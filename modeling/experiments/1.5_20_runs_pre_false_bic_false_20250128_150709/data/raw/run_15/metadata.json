{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "fairness_weight": {
      "description": "Weight given to fairness considerations in the utility calculation",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "self_interest_sensitivity": {
      "description": "Sensitivity to the monetary gain (split_self)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U_accept = exp(fairness_weight * log(1 + (combined_earning/2 - split_self)^2)) * exp(self_interest_sensitivity * split_self)",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting the proposal",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fairness_weight": {
      "description": "Weight given to fairness considerations in the utility calculation",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "self_interest_sensitivity": {
      "description": "Sensitivity to the monetary gain (split_self)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "combined_earning": {
      "description": "Total amount of money earned in the trial",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A multiplicative utility model for responder acceptance decisions, incorporating fairness and self-interest. Fairness is modeled as a penalty for deviation from an equal split, while self-interest is a positive function of the responder's proposed share.  The model uses two learnable parameters: a fairness weight and a self-interest sensitivity, both constrained to positive values.",
  "full_reasoning": "Let me think through this step by step...\n\n**Key Psychological Mechanisms:**\n\n1. **Fairness:** Responders are sensitive to the fairness of the proposed split.  A perfectly fair split (equal contribution, equal share) should yield high utility.  Deviations from fairness should decrease utility.\n\n2. **Self-interest:** Responders primarily care about maximizing their own monetary gain. A higher proposed share for the self should increase utility.\n\n**How these mechanisms interact:**\n\nThe interaction between fairness and self-interest is likely complex.  A responder might accept an unfair offer if their share is sufficiently large, but would reject it if the unfairness is extreme even if the share is relatively high.  Therefore, the utility function should be non-linear.\n\n**Mathematical Form:**\n\nA suitable mathematical form could be a multiplicative model, where the utility is the product of fairness and self-interest components. This reflects the idea that both factors influence the final decision, and a low score in either one can result in a low overall utility. To handle potential negative values, we can use an exponential transformation to make both components positive.  \n\n**Parameters:**\n\n1. `fairness_weight`:  Represents the relative importance of fairness compared to self-interest. A higher value indicates stronger sensitivity to fairness. The weight can be considered in the range between 0 and 1.\n\n2. `self_interest_sensitivity`: Represents how much the responder values a higher monetary gain.  A higher value indicates greater sensitivity to monetary rewards.\n\n\n**How model variables map to observable behavior:**\n\nThe model will predict the utility of accepting a proposal. The `fairness_weight` parameter will modulate how deviations from a perfectly fair split reduce utility. The `self_interest_sensitivity` will impact how much the utility increases with the monetary gain (`split_self`).\n\n<MODEL>\nU_accept = exp(fairness_weight * log(1 + (combined_earning/2 - split_self)^2)) * exp(self_interest_sensitivity * split_self)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Weight given to fairness considerations in the utility calculation\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"self_interest_sensitivity\": {\n      \"description\": \"Sensitivity to the monetary gain (split_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"combined_earning\":{\n      \"description\": \"Total amount of money earned in the trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA multiplicative utility model for responder acceptance decisions, incorporating fairness and self-interest. Fairness is modeled as a penalty for deviation from an equal split, while self-interest is a positive function of the responder's proposed share.  The model uses two learnable parameters: a fairness weight and a self-interest sensitivity, both constrained to positive values.\n</SUMMARY>\n",
  "simulation_code": "def simulate_model(trial_data, fairness_weight=0.5, self_interest_sensitivity=1.0):\n    \"\"\"\n    Simulates the utility of accepting a proposal based on fairness and self-interest.\n\n    Args:\n        trial_data: A list of dictionaries, where each dictionary represents a trial and contains \n                     'combined_earning' and 'split_self' keys.\n        fairness_weight: The weight given to fairness considerations (0-1).\n        self_interest_sensitivity: The sensitivity to the monetary gain (0-10).\n\n    Returns:\n        A list of utility values for each trial.  Returns an empty list if trial_data is invalid.\n    \"\"\"\n    if not isinstance(trial_data, list):\n        return []\n    utility_values = []\n    for trial in trial_data:\n        try:\n            combined_earning = trial['combined_earning']\n            split_self = trial['split_self']\n            \n            # Handle potential errors to avoid runtime crashes\n            if combined_earning < 0 or split_self <0:\n                utility_values.append(0)  # or raise an exception as needed\n                continue\n            if combined_earning ==0 and split_self == 0:\n                utility_values.append(1) # avoiding log(0)\n                continue\n\n\n            fairness_term = math.exp(fairness_weight * math.log(1 + (combined_earning / 2 - split_self) ** 2))\n            self_interest_term = math.exp(self_interest_sensitivity * split_self)\n            utility = fairness_term * self_interest_term\n            utility_values.append(utility)\n        except (KeyError, TypeError):\n            print(f\"Warning: Skipping trial due to missing or incorrect data: {trial}\")\n            utility_values.append(0) #or handle the error differently.\n\n    return utility_values",
  "fitting_results": [
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -33.56677142126111,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.44099266456575426,
      "self_interest_sensitivity": 7.641685762968649,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.016017790242573177,
      "success": true,
      "log_likelihood": -25.564897177651428,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -27.56677142251174,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -27.066771422615957,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.534775297466,
      "self_interest_sensitivity": 6.055298547549782,
      "success": true,
      "log_likelihood": -299.33606208692606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.8987138875461922,
      "self_interest_sensitivity": 8.57420094518133,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.2073848054785725,
      "success": true,
      "log_likelihood": -21.597557353157878,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.838096534451463,
      "self_interest_sensitivity": 3.121980512689361,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -28.06677142240752,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -27.066771422615954,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -33.06677142136533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -27.56677142251174,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.5847881465580684,
      "self_interest_sensitivity": 4.9053364288985914,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.38899251659633116,
      "self_interest_sensitivity": 6.114020385745751,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.0,
      "self_interest_sensitivity": 10.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0915282433756498,
      "self_interest_sensitivity": 3.783185032215518,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.38823332923885634,
      "self_interest_sensitivity": 9.75752342530377,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.7081542352814842,
      "self_interest_sensitivity": 9.97423973099642,
      "success": true,
      "log_likelihood": -92.10340371656177,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.5532652753121253,
      "self_interest_sensitivity": 2.5166272625357786,
      "success": true,
      "log_likelihood": 3.472563569852968e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -25.066771423032826,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.4301799016749369,
      "success": true,
      "log_likelihood": -11.783966373079373,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.412052886109154,
      "self_interest_sensitivity": 8.078207594439792,
      "success": true,
      "log_likelihood": -529.5945713873308,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.8492578472973726,
      "self_interest_sensitivity": 8.859682063100578,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -26.06677142282439,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.7531943849701426,
      "self_interest_sensitivity": 9.91533453927643,
      "success": true,
      "log_likelihood": -345.38776394700704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.8640424953139706,
      "self_interest_sensitivity": 2.1469507473982397,
      "success": true,
      "log_likelihood": -367.6582487161246,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -30.066771421990644,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.036009958491128535,
      "self_interest_sensitivity": 5.740319736287129,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.5414523327648594,
      "self_interest_sensitivity": 7.6608787713585045,
      "success": true,
      "log_likelihood": -184.20680743672378,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.6753967266946699,
      "self_interest_sensitivity": 4.112261057710914,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -33.566771421261116,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -27.566771422511735,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.2197511178543884,
      "self_interest_sensitivity": 5.093254393253266,
      "success": true,
      "log_likelihood": -506.56872045729034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.7635684273028674,
      "self_interest_sensitivity": 7.991834680016723,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.2958495572095032,
      "success": true,
      "log_likelihood": -20.4708067047025,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.8134384818366719,
      "self_interest_sensitivity": 9.321770592426796,
      "success": true,
      "log_likelihood": -253.2843602268452,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -26.06677142282439,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.7719575085946857,
      "self_interest_sensitivity": 1.9692728862687459,
      "success": true,
      "log_likelihood": -276.31020014668826,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.42079143006207886,
      "success": true,
      "log_likelihood": -10.429064955986055,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.5585545463399503,
      "self_interest_sensitivity": 3.0433676454526837,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.15731350999751947,
      "self_interest_sensitivity": 5.660593021631636,
      "success": true,
      "log_likelihood": -644.723826037533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.7330867383704053,
      "self_interest_sensitivity": 5.513099131954547,
      "success": true,
      "log_likelihood": -23.02585092644049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.7165526120730361,
      "self_interest_sensitivity": 8.445292139566709,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.19225425724413384,
      "success": true,
      "log_likelihood": -23.027610245652433,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.8133048677921655,
      "self_interest_sensitivity": 5.435971682650846,
      "success": true,
      "log_likelihood": -230.2585092968047,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.6079098372848437,
      "self_interest_sensitivity": 9.22421171297843,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 2.492572763269186e-16,
      "success": true,
      "log_likelihood": -28.066771422407534,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -27.566771422511735,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -25.566771422928614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.07923399881178339,
      "self_interest_sensitivity": 4.07986518240481,
      "success": true,
      "log_likelihood": -253.28436022684522,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -32.566771421469554,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.0894430341753391,
      "success": true,
      "log_likelihood": -25.45579178102358,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.18629323826765998,
      "self_interest_sensitivity": 4.750042948384263,
      "success": true,
      "log_likelihood": -345.3877639470071,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.05785966403825249,
      "self_interest_sensitivity": 6.934162637491751,
      "success": true,
      "log_likelihood": -506.56872045729034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.8989245467867899,
      "self_interest_sensitivity": 6.996212455905463,
      "success": true,
      "log_likelihood": -552.6204223173712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -30.066771421990648,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.5341292463336325,
      "self_interest_sensitivity": 5.293301519632453,
      "success": true,
      "log_likelihood": -92.1034037165618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.403700639482527,
      "self_interest_sensitivity": 4.82177177964903,
      "success": true,
      "log_likelihood": -736.8272297576949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.3335649066676735,
      "success": true,
      "log_likelihood": -15.38495745041209,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.08464584182856294,
      "self_interest_sensitivity": 8.52934399203031,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.5882570208149047,
      "self_interest_sensitivity": 4.885232886589371,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -33.566771421261116,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.6054191176301332,
      "self_interest_sensitivity": 6.555354987808757,
      "success": true,
      "log_likelihood": -460.5170185972094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.0,
      "success": true,
      "log_likelihood": -31.06677142178221,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.6771704133321435,
      "self_interest_sensitivity": 4.4127417582198305,
      "success": true,
      "log_likelihood": -368.41361487704745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.5229975768871246,
      "self_interest_sensitivity": 7.57339415557912,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.3425192464054007,
      "success": true,
      "log_likelihood": -13.816545291378855,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.3955223409674642,
      "self_interest_sensitivity": 3.1608951166812815,
      "success": true,
      "log_likelihood": -368.41361487704756,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.5824317551463088,
      "self_interest_sensitivity": 5.386643231305416,
      "success": true,
      "log_likelihood": -69.07755278652137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.7474688327122985,
      "self_interest_sensitivity": 8.437730605734021,
      "success": true,
      "log_likelihood": -736.8272297576949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.46005252902822646,
      "self_interest_sensitivity": 4.533318850791642,
      "success": true,
      "log_likelihood": -713.8013788276544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.7168291780827606,
      "self_interest_sensitivity": 7.482897199724753,
      "success": true,
      "log_likelihood": -391.439465807088,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.6836228800964009,
      "self_interest_sensitivity": 4.09283804534864,
      "success": true,
      "log_likelihood": -184.20680743672386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.2691774686497679,
      "self_interest_sensitivity": 9.275999685802821,
      "success": true,
      "log_likelihood": -414.4653167371285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.6832779592936579,
      "self_interest_sensitivity": 9.97823592929182,
      "success": true,
      "log_likelihood": -253.28436022684528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0017466814685956245,
      "self_interest_sensitivity": 0.48805788055867527,
      "success": true,
      "log_likelihood": -8.346150745798216,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.2336931405348821,
      "self_interest_sensitivity": 8.156669842292736,
      "success": true,
      "log_likelihood": -782.8789316177758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.1451663073818877,
      "success": true,
      "log_likelihood": -23.585522967922763,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.5658453818006355,
      "self_interest_sensitivity": 8.317167788583674,
      "success": true,
      "log_likelihood": -759.8530806877353,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.4867283911608795,
      "self_interest_sensitivity": 7.376244573785463,
      "success": true,
      "log_likelihood": -391.439465807088,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.6556986710937646,
      "self_interest_sensitivity": 9.857513504031582,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0600489241955362,
      "self_interest_sensitivity": 3.5019595500875154,
      "success": true,
      "log_likelihood": -736.8272275372512,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.0,
      "self_interest_sensitivity": 0.15648990742135724,
      "success": true,
      "log_likelihood": -25.660212734220693,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.5137160799545268,
      "self_interest_sensitivity": 3.4193887376074428,
      "success": true,
      "log_likelihood": -322.36191301696664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.20378186850025437,
      "self_interest_sensitivity": 8.1769427084548,
      "success": true,
      "log_likelihood": -736.8272297576948,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.6210213768462317,
      "self_interest_sensitivity": 6.039840040143921,
      "success": true,
      "log_likelihood": -253.28436022684514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.37533816932220054,
      "self_interest_sensitivity": 2.761827200025712,
      "success": true,
      "log_likelihood": -644.29385532833,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.8784487591743093,
      "self_interest_sensitivity": 0.951064773039575,
      "success": true,
      "log_likelihood": -45.44482448537892,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.8096888868444699,
      "self_interest_sensitivity": 2.8175748604162987,
      "success": true,
      "log_likelihood": -437.49116766716895,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.6706478733008361,
      "self_interest_sensitivity": 9.337278395753943,
      "success": true,
      "log_likelihood": -253.28436022684528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "fairness_weight": {
        "r": 0.17454653666484574,
        "p": 0.08240829180384975
      },
      "self_interest_sensitivity": {
        "r": 0.23142291780130614,
        "p": 0.020521313068140642
      }
    }
  },
  "bic_results": {
    "average_bic": 432.2214616840222,
    "individual_bics": [
      74.30058071943444,
      836.0976713511691,
      58.296832232215074,
      62.300580721935695,
      61.30058072214413,
      605.8391620507643,
      7.167037869712219,
      50.362152583227974,
      7.167037869712219,
      63.30058072172726,
      61.300580722144126,
      73.30058071964288,
      62.300580721935695,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      237.42554717011674,
      191.37384531003576,
      7.167037869967093,
      57.30058072297787,
      30.734970623070964,
      1066.3561806515738,
      790.0459694910882,
      59.300580722561,
      697.9425657709263,
      742.4835353091614,
      67.3005807208935,
      191.3738453100358,
      375.5806527503598,
      7.167037869712219,
      74.30058071943445,
      62.30058072193569,
      1020.3044787914929,
      7.167037869712219,
      48.10865128631722,
      513.7357583306026,
      59.300580722561,
      559.7874381702887,
      28.025167788884332,
      651.8908639108454,
      1296.614689951978,
      53.2187397297932,
      743.9942676310072,
      53.222258368217084,
      467.6840564705216,
      790.0459694910882,
      63.300580721727286,
      62.30058072193569,
      58.300580722769446,
      513.7357583306027,
      72.30058071985133,
      58.07862143895938,
      697.9425657709264,
      1020.3044787914929,
      1112.4078825116546,
      67.30058072089352,
      191.37384531003582,
      1480.821497392302,
      37.9369527777364,
      651.8908639108454,
      836.0976713511691,
      74.30058071943445,
      928.201075071331,
      69.30058072047665,
      743.9942676310071,
      145.32214344995484,
      34.80012845966993,
      743.9942676310073,
      145.32214344995495,
      1480.821497392302,
      1434.769795532221,
      790.0459694910883,
      375.58065275035995,
      836.0976713511692,
      513.7357583306028,
      23.85933936850865,
      1572.9249011124639,
      54.338083812757745,
      1526.8731992523828,
      790.0459694910883,
      145.32214344995484,
      1480.8214929514147,
      58.4874633453536,
      651.8908639108455,
      1480.8214973923018,
      513.7357583306025,
      1295.7547485335722,
      98.05668684767006,
      882.1493732112501,
      513.7357583306028
    ],
    "num_parameters": 2,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}