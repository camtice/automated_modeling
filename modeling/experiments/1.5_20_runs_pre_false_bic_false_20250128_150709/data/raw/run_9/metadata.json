{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "fairness_weight": {
      "description": "Weight given to fairness considerations",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "unfairness_scale": {
      "description": "Scaling parameter for the unfairness penalty",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U_accept = split_self + fairness_weight * ( (token_self / (token_self + token_opp)) * combined_earning - split_self) * unfairness_scale",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "The proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Amount of money earned in total (note that each token found is \u00a33)",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "fairness_weight": {
      "description": "Weight given to fairness considerations",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "unfairness_scale": {
      "description": "Scaling parameter for the unfairness penalty",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A linear utility model for responder behavior in an ultimatum game. Utility of accepting is a weighted sum of the monetary gain and a penalty for unfairness, scaled by two learnable parameters: fairness_weight (representing the importance of fairness relative to self-interest) and unfairness_scale (a scaling factor for the magnitude of the fairness penalty). The fairness penalty is calculated as the difference between the participant's proportional share based on token contributions and their actual share of the combined earnings.",
  "full_reasoning": "Let me think through this step by step...\n\nThe key psychological mechanisms involved in responder behavior in this ultimatum game are fairness and self-interest.  Responders don't simply maximize their monetary gain; they also consider the fairness of the offer relative to the contributions of each player.  A highly unfair offer (where the proposer takes a disproportionately large share given the token contributions) is likely to be rejected, even if it means getting nothing.\n\nThese mechanisms interact in a way that can be captured by a model that balances the expected monetary gain against a perceived fairness deviation.  A simple, yet powerful, approach is to represent the utility as a linear combination of these two factors.\n\nA mathematical form that can capture this interaction is a linear utility function where the utility of accepting an offer is the sum of the monetary gain and a term that penalizes unfairness.  The amount of the penalty will be determined by a parameter capturing the individual's sensitivity to fairness.\n\nThe parameters needed to calibrate the model are:\n\n1.  A parameter representing the weight given to fairness considerations (fairness_weight).  This parameter quantifies how much the responder values fairness relative to monetary gain.  Higher values indicate greater sensitivity to fairness.\n2.  A parameter representing the scaling of the unfairness penalty (unfairness_scale). This allows us to better tune the effect of the fairness calculation.\n\n\nThe model variables map to observable behavior as follows: If the utility of accepting an offer is positive, the responder is more likely to accept; otherwise, they are more likely to reject.  The magnitude of the utility reflects the strength of the preference for acceptance or rejection.\n\n<MODEL>\nU_accept = split_self + fairness_weight * ( (token_self / (token_self + token_opp)) * combined_earning - split_self) * unfairness_scale\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Amount of money earned in total (note that each token found is \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Weight given to fairness considerations\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"unfairness_scale\": {\n      \"description\": \"Scaling parameter for the unfairness penalty\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA linear utility model for responder behavior in an ultimatum game. Utility of accepting is a weighted sum of the monetary gain and a penalty for unfairness, scaled by two learnable parameters: fairness_weight (representing the importance of fairness relative to self-interest) and unfairness_scale (a scaling factor for the magnitude of the fairness penalty). The fairness penalty is calculated as the difference between the participant's proportional share based on token contributions and their actual share of the combined earnings.\n</SUMMARY>\n",
  "simulation_code": "def simulate_model(trial_data, fairness_weight=1, unfairness_scale=1):\n    utility_values = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        #Handle division by zero\n        if (token_self + token_opp) == 0:\n            proportional_share = 0\n        else:\n            proportional_share = (token_self / (token_self + token_opp)) * combined_earning\n\n        unfairness = proportional_share - split_self\n        utility = split_self + fairness_weight * unfairness * unfairness_scale\n        utility_values.append(utility)\n    return utility_values",
  "fitting_results": [
    {
      "fairness_weight": -1.1731091839838592,
      "unfairness_scale": 5.52804928989354,
      "success": true,
      "log_likelihood": -13.891927091597163,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -6.584219175045904,
      "unfairness_scale": 0.23636673203521782,
      "success": true,
      "log_likelihood": -16.250868347508888,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -1.8893326271727438,
      "unfairness_scale": 0.8717933107780822,
      "success": true,
      "log_likelihood": -12.409833837873212,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -9.982173773108093,
      "unfairness_scale": 0.19032221722326761,
      "success": true,
      "log_likelihood": -13.88741192162509,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -0.2887951908751733,
      "unfairness_scale": 7.8492499043844575,
      "success": true,
      "log_likelihood": -11.012420513755458,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -1.920333192005342,
      "unfairness_scale": 0.5815679220936149,
      "success": true,
      "log_likelihood": -13.632687974800847,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.5829637051526848,
      "unfairness_scale": 4.437734149619166,
      "success": true,
      "log_likelihood": -1.8610878832673212,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 1.592983624119217,
      "unfairness_scale": 0.0,
      "success": true,
      "log_likelihood": -23.000129874103948,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 5.973484813249511,
      "unfairness_scale": 0.43308691046495795,
      "success": true,
      "log_likelihood": -1.8610878832673055,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -4.2519614145333815,
      "unfairness_scale": 0.5676765892656774,
      "success": true,
      "log_likelihood": -11.5085135481323,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -9.753686928373625,
      "unfairness_scale": 0.2269324284246344,
      "success": true,
      "log_likelihood": -8.984390301351379,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -4.487220941171648,
      "unfairness_scale": 1.2248344065417218,
      "success": true,
      "log_likelihood": -13.499859164443105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -9.408729021125515,
      "unfairness_scale": 0.2548771230805384,
      "success": true,
      "log_likelihood": -10.263954890462724,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.3108529716138764,
      "unfairness_scale": 8.322383589227691,
      "success": true,
      "log_likelihood": -1.8610878832673756,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 9.346801789751009,
      "unfairness_scale": 0.27678326127829694,
      "success": true,
      "log_likelihood": -1.861087883267298,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 6.4134456974672975,
      "unfairness_scale": 0.40337734198736613,
      "success": true,
      "log_likelihood": -1.8610878832673339,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 2.7123163991666295,
      "unfairness_scale": 0.9538113734001451,
      "success": true,
      "log_likelihood": -1.8610878832672981,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -8.05572321127112,
      "unfairness_scale": 0.02414161102788905,
      "success": true,
      "log_likelihood": -10.259330522033927,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -9.99999325237878,
      "unfairness_scale": 0.01616686291026533,
      "success": true,
      "log_likelihood": -10.877852780679435,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.7544914417020894,
      "unfairness_scale": 3.4288507822150533,
      "success": true,
      "log_likelihood": -1.8610878832673168,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -2.162856343714921,
      "unfairness_scale": 0.6803604181268128,
      "success": true,
      "log_likelihood": -15.512968510587879,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -9.968756917597306,
      "unfairness_scale": 0.027228690735953492,
      "success": true,
      "log_likelihood": -11.686952909848236,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -0.45447178067783534,
      "unfairness_scale": 4.014472772800646,
      "success": true,
      "log_likelihood": -18.604446443961344,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -0.34045395418748503,
      "unfairness_scale": 3.849209959410589,
      "success": true,
      "log_likelihood": -16.99314609386477,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -3.7141599804647747,
      "unfairness_scale": 0.5088958234327807,
      "success": true,
      "log_likelihood": -14.104534099631197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -9.314086713325475,
      "unfairness_scale": 0.12936157809679683,
      "success": true,
      "log_likelihood": -15.540167349853446,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -9.941990703666956,
      "unfairness_scale": 0.13870786421300604,
      "success": true,
      "log_likelihood": -13.558953797304012,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -2.207894090365185,
      "unfairness_scale": 2.0096785336635525,
      "success": true,
      "log_likelihood": -5.491801033950338,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 3.624871965054564,
      "unfairness_scale": 0.0,
      "success": true,
      "log_likelihood": -11.750129878204175,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -1.1879800757766694,
      "unfairness_scale": 0.4341838253706485,
      "success": true,
      "log_likelihood": -16.225262119121822,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 8.99515279841686,
      "unfairness_scale": 0.2876035768243008,
      "success": true,
      "log_likelihood": -1.8610878832673023,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -3.9244239464011375,
      "unfairness_scale": 1.652473127606206,
      "success": true,
      "log_likelihood": -13.891927091597255,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -9.902392313000536,
      "unfairness_scale": 0.14654641356563297,
      "success": true,
      "log_likelihood": -22.06676428858926,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -3.363434486825851,
      "unfairness_scale": 0.6080998494118494,
      "success": true,
      "log_likelihood": -15.267901605588223,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 9.727792001876734,
      "unfairness_scale": 0.26594305326632145,
      "success": true,
      "log_likelihood": -1.8610878832673388,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 4.916486544474494,
      "unfairness_scale": 0.0,
      "success": true,
      "log_likelihood": -20.675129875915243,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -0.15359517891959218,
      "unfairness_scale": 5.8940829228494875,
      "success": true,
      "log_likelihood": -12.460979405946446,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -3.8594503025150946,
      "unfairness_scale": 0.45218530042091687,
      "success": true,
      "log_likelihood": -14.483899975857025,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -10.0,
      "unfairness_scale": 0.09292051253376886,
      "success": true,
      "log_likelihood": -17.74200929826307,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 9.99790670635192,
      "unfairness_scale": 0.01550602324085907,
      "success": true,
      "log_likelihood": -10.708205898448911,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -7.393731822847069,
      "unfairness_scale": 0.15991869033887993,
      "success": true,
      "log_likelihood": -17.69825126407611,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -7.627511025867968,
      "unfairness_scale": 0.47238359657995654,
      "success": true,
      "log_likelihood": -13.345135591717522,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 8.3329812972659,
      "unfairness_scale": 0.1138887608617326,
      "success": true,
      "log_likelihood": -7.283181387753663,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -0.31151905594373436,
      "unfairness_scale": 3.9410450193775235,
      "success": true,
      "log_likelihood": -16.37528665257575,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -5.080625528156295,
      "unfairness_scale": 0.22299422419253592,
      "success": true,
      "log_likelihood": -14.654593571373347,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -0.08859327631794583,
      "unfairness_scale": 5.870246996155616,
      "success": true,
      "log_likelihood": -16.111416127766383,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -9.746369851702099,
      "unfairness_scale": 0.15098153253645896,
      "success": true,
      "log_likelihood": -15.512968511638803,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -0.19650197826853816,
      "unfairness_scale": 8.79521882915454,
      "success": true,
      "log_likelihood": -19.394406479511204,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -2.4047235957717366,
      "unfairness_scale": 1.0450834209374995,
      "success": true,
      "log_likelihood": -11.45032771242881,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -9.88786824080943,
      "unfairness_scale": 0.0858551442462085,
      "success": true,
      "log_likelihood": -26.150269912446003,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -9.882053653721213,
      "unfairness_scale": 0.06954720052375696,
      "success": true,
      "log_likelihood": -17.421940321085586,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -2.142718590332785,
      "unfairness_scale": 1.6389390231268046,
      "success": true,
      "log_likelihood": -20.028666021018257,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -9.99870956413769,
      "unfairness_scale": 0.11385159550177341,
      "success": true,
      "log_likelihood": -18.994419191792236,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -0.08416271227524927,
      "unfairness_scale": 8.58329091613973,
      "success": true,
      "log_likelihood": -22.399060766031738,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -0.44732322432972665,
      "unfairness_scale": 4.3357243550144,
      "success": true,
      "log_likelihood": -20.511553805203523,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -6.516311547069685,
      "unfairness_scale": 0.5024361374924019,
      "success": true,
      "log_likelihood": -7.003636055930819,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -8.175805664256885,
      "unfairness_scale": 0.4191612598607648,
      "success": true,
      "log_likelihood": -10.198996912437298,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.4930482176352921,
      "unfairness_scale": 1.6803224027742687,
      "success": true,
      "log_likelihood": -11.740691752652413,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -3.3161443376419304,
      "unfairness_scale": 1.5287365651692366,
      "success": true,
      "log_likelihood": -14.911718343893316,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -0.05075550144403958,
      "unfairness_scale": 4.104383157758126,
      "success": true,
      "log_likelihood": -14.489013885139236,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -9.469591780623485,
      "unfairness_scale": 0.10172325951643471,
      "success": true,
      "log_likelihood": -19.7202462758515,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -1.484292726570136,
      "unfairness_scale": 1.1643746491778784,
      "success": true,
      "log_likelihood": -14.894406482615343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -5.496840111959255,
      "unfairness_scale": 1.1797700052705946,
      "success": true,
      "log_likelihood": -13.891927091597099,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -0.19589867569767508,
      "unfairness_scale": 7.006973307103085,
      "success": true,
      "log_likelihood": -21.237141836749586,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -6.824353640521922,
      "unfairness_scale": 0.5424491628969029,
      "success": true,
      "log_likelihood": -11.14736234015277,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -0.20179946538572066,
      "unfairness_scale": 6.285997210492426,
      "success": true,
      "log_likelihood": -15.195077637414121,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 7.455337282239947,
      "unfairness_scale": 0.015447733469559783,
      "success": true,
      "log_likelihood": -10.318910268695701,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -9.999991454744237,
      "unfairness_scale": 0.020371702794925263,
      "success": true,
      "log_likelihood": -13.079465185711593,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -9.993696802566157,
      "unfairness_scale": 0.1075186399341557,
      "success": true,
      "log_likelihood": -16.39002782587237,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 9.99399943813302,
      "unfairness_scale": 0.02751992896595832,
      "success": true,
      "log_likelihood": -11.65243995646906,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -10.0,
      "unfairness_scale": 9.644882507005041,
      "success": true,
      "log_likelihood": -0.059639113022505935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -0.6221069079407714,
      "unfairness_scale": 6.034852253759291,
      "success": true,
      "log_likelihood": -18.29276950964199,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -1.1327923555594293,
      "unfairness_scale": 1.240137083241838,
      "success": true,
      "log_likelihood": -15.841388807548459,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -0.06199984978075466,
      "unfairness_scale": 5.086557005457799,
      "success": true,
      "log_likelihood": -15.21685281736298,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -9.948134308679707,
      "unfairness_scale": 0.10906397326579213,
      "success": true,
      "log_likelihood": -25.07806683006881,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -1.04743847487743,
      "unfairness_scale": 0.8825874825556644,
      "success": true,
      "log_likelihood": -14.886522639823294,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 9.998375488918041,
      "unfairness_scale": 0.035458295192760225,
      "success": true,
      "log_likelihood": -9.115562790343136,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -3.3672802532029955,
      "unfairness_scale": 1.3727386916239943,
      "success": true,
      "log_likelihood": -22.662605620645788,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -9.999037089082728,
      "unfairness_scale": 0.06309838140778788,
      "success": true,
      "log_likelihood": -23.53949284902292,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -7.075718590212537,
      "unfairness_scale": 0.9165156035318437,
      "success": true,
      "log_likelihood": -13.891927091597022,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -1.971042109215892,
      "unfairness_scale": 0.5372384269525259,
      "success": true,
      "log_likelihood": -24.355035824147297,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 0.06749398579616929,
      "unfairness_scale": 7.3017222631102925,
      "success": true,
      "log_likelihood": -11.180197776257263,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -4.919605527257349,
      "unfairness_scale": 0.8240915981395084,
      "success": true,
      "log_likelihood": -19.455793669739876,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -2.4568336326844156,
      "unfairness_scale": 0.593411110874024,
      "success": true,
      "log_likelihood": -12.882674307964072,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -1.3507002005883142,
      "unfairness_scale": 0.541374298719139,
      "success": true,
      "log_likelihood": -26.640038947905797,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -6.595897001691705,
      "unfairness_scale": 1.1689408947929192,
      "success": true,
      "log_likelihood": -9.975979270608887,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -9.99999996885184,
      "unfairness_scale": 0.07713681346609613,
      "success": true,
      "log_likelihood": -17.95794256485775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -9.024040014553064,
      "unfairness_scale": 0.3444380156510266,
      "success": true,
      "log_likelihood": -17.57452876487639,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": 3.4560721656595086,
      "unfairness_scale": 0.07957990342746257,
      "success": true,
      "log_likelihood": -8.652439959271737,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -3.267858357842974,
      "unfairness_scale": 0.42004778095198464,
      "success": true,
      "log_likelihood": -15.237141840275271,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "fairness_weight": -0.371339232672947,
      "unfairness_scale": 1.491880268051139,
      "success": true,
      "log_likelihood": -21.189202184627035,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "fairness_weight": {
        "r": 0.8753202568440751,
        "p": 1.0875079103863818e-32
      },
      "unfairness_scale": {
        "r": 0.32349235088635353,
        "p": 0.0010271011207859191
      }
    }
  },
  "bic_results": {
    "average_bic": 34.85676301408838,
    "individual_bics": [
      34.95089206010655,
      39.668774571929994,
      31.98670555265864,
      34.9418617201624,
      29.191878904423135,
      34.432413826513915,
      10.889213643446862,
      53.16729762512011,
      10.88921364344683,
      30.184064973176817,
      25.135818479614976,
      34.16675620579843,
      27.694947657837666,
      10.889213643446972,
      10.889213643446816,
      10.889213643446887,
      10.889213643446816,
      27.685698920980073,
      28.92274343827109,
      10.889213643446853,
      38.192974898087975,
      30.540943696608693,
      44.375930764834905,
      41.15333006464176,
      35.376106076174615,
      38.247372576619114,
      34.284945471520246,
      18.150639944812895,
      30.667297633320572,
      39.61756211515586,
      10.889213643446825,
      34.95089206010673,
      51.300566454090735,
      37.70284108808867,
      10.889213643446897,
      48.5172976287427,
      32.08899668880511,
      36.13483782862627,
      42.65105647343836,
      28.583449673810044,
      42.56354040506444,
      33.85730906034726,
      21.733400652419547,
      39.917611182063716,
      36.47622501965891,
      39.38987013244498,
      38.192974900189824,
      45.955850835934626,
      30.067693301769843,
      59.467577701804224,
      42.01091851908339,
      47.22436991894873,
      45.15587626049669,
      51.965159408975694,
      48.19014548731926,
      21.174309988773857,
      27.565031701786815,
      30.648421382217045,
      36.99047456469885,
      36.14506564719069,
      46.60753042861522,
      36.95585084214291,
      34.95089206010642,
      49.64132155041139,
      29.46176255721776,
      37.557193151740464,
      27.804858414303624,
      33.32596824833541,
      39.94709352865696,
      30.471917789850337,
      7.286316102957231,
      43.752576896196196,
      38.849815492009135,
      37.60074351163818,
      57.32317153704984,
      36.940083156558806,
      25.398163457598493,
      52.492249118203794,
      54.24602357495806,
      34.95089206010626,
      55.87710952520681,
      29.527433429426743,
      46.07862521639197,
      32.932386492840365,
      60.44711577272381,
      27.118996418129996,
      43.082923006627716,
      42.316095406665,
      24.471917795455695,
      37.64132155746276,
      49.54544224616629
    ],
    "num_parameters": 2,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}