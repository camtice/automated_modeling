{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: U_accept = self_interest_sensitivity * split_self + fairness_weight * (splitperc_self - (token_self / (token_self + token_opp)) * 100)\nSummary: A utility model for responder behavior in a bargaining game.  The model combines the monetary gain for the responder with a fairness term, weighted by two learnable parameters: `fairness_weight` representing the relative importance of fairness, and `self_interest_sensitivity` representing the sensitivity to changes in monetary gain. The fairness term is calculated as the difference between the responder's share and a share proportional to their contribution relative to the opponent's contribution.\nModel 2:\nSpecification: U_accept =  self_interest_weight * split_self + fairness_weight * (splitperc_self - (token_self / (token_self + token_opp)) * 100)\nSummary: A utility model for responder behavior in a bargaining game. The model combines the monetary gain for the responder (split_self) with a fairness term, weighted by two learnable parameters: `self_interest_weight` and `fairness_weight`. The fairness term is calculated as the difference between the responder's percentage share and a percentage share proportional to their contribution relative to the opponent's contribution.\nModel 3:\nSpecification: U_accept = alpha * split_self - gamma * abs(splitperc_self - splitperc_opp) * abs( (token_self / (token_self + token_opp)) - (splitperc_self / (splitperc_self + splitperc_opp)) )\nSummary: A utility model for responder behavior incorporating both self-interest and inequity aversion.  Utility is a weighted sum of the responder's monetary gain and the absolute difference between their percentage share and the opponent's percentage share, further modulated by the difference between the relative contributions of tokens. The model uses two learnable parameters: `alpha` for self-interest weighting and `gamma` for inequity aversion weighting.\nModel 4:\nSpecification: U_accept =  self_interest_weight * split_self + fairness_weight * abs(split_self - (token_self / (token_self + token_opp)) * combined_earning)\nSummary: A utility model for responder acceptance decisions based on self-interest and reference-dependent fairness.  Utility is a weighted sum of the responder's monetary gain and the absolute deviation of their share from a fair share proportional to their relative contribution, calculated with respect to the total combined earnings.  The model uses two learnable parameters representing the weights for self-interest and fairness.\nModel 5:\nSpecification: U_accept = relative_gain_weight * (split_self / (3 * token_self)) - opponent_greed_sensitivity * (split_opp / (3 * token_opp))\nSummary: A utility model for responder acceptance decisions based on relative gain and opponent's perceived greed.  Utility is a weighted difference between the responder's monetary gain relative to their contribution and the opponent's monetary gain relative to their contribution. The model uses two learnable parameters: `relative_gain_weight` and `opponent_greed_sensitivity`.\nModel 6:\nSpecification: U_accept = contribution_sensitivity * (split_self / (token_self + token_opp)) * token_self + inequity_sensitivity * (splitperc_self - (token_self / (token_self + token_opp)) * 100)\nSummary: A utility model for responder acceptance decisions, weighing the monetary gain from the offer based on relative contribution to the total tokens and sensitivity to proportional inequity. The model uses two learnable parameters: `contribution_sensitivity` reflecting the importance of relative contribution and `inequity_sensitivity` representing the aversion to proportional inequity.  The utility is a weighted sum of the monetary gain adjusted by relative contribution and the deviation of the percentage share from the proportional contribution.\nModel 7:\nSpecification: U_accept = self_interest_weight * split_self + contextual_fairness_weight * ( (splitperc_self - (token_self / (token_self + token_opp)) * 100) * (combined_earning / 100) * trial_type_modifier )\nSummary: A utility model for responder acceptance decisions that incorporates self-interest and contextual fairness.  The utility is a weighted sum of the responder's monetary gain and a fairness term, where the fairness term considers the deviation from a proportional split adjusted by total earnings and a trial type modifier. The model uses two learnable parameters: self-interest_weight and contextual_fairness_weight.\nModel 8:\nSpecification: U_accept = self_interest_weight * split_self + relative_advantage_weight * (splitperc_self - splitperc_opp) * (token_self / token_opp)\nSummary: A utility model for responder behavior that combines self-interest and a relative advantage term.  The relative advantage term is the difference between the responder's and opponent's percentage shares, scaled by the ratio of the responder's tokens to the opponent's tokens. The model uses two learnable parameters: `self_interest_weight` and `relative_advantage_weight`.\nModel 9:\nSpecification: U_accept = self_interest_weight * split_self + H( (splitperc_self / (token_self/(token_self + token_opp)) * 100) - satisficing_threshold ) * self_interest_weight * split_self\nSummary: A utility model for responder acceptance decisions combining self-interest and a satisficing threshold. The model posits that responders have a weighted preference for higher monetary gains (self-interest) but also accept offers if they exceed a minimum percentage gain relative to their contribution, irrespective of further self-interest gains.  This minimum acceptable percentage gain is a learnable parameter, along with the self-interest weight.\nModel 10:\nSpecification: U_accept =  self_interest_weight * split_self + relative_advantage_weight * (split_self - split_opp) * (token_self / token_opp) * trial_type_modifier + risk_aversion * (token_self/(token_self+token_opp) )* (split_self-split_opp)\nSummary: A utility model for responder acceptance decisions incorporating self-interest, relative advantage, trial type, and risk aversion modulated by the pre-task token count. The utility is a weighted sum of self-interest, relative advantage (scaled by the ratio of tokens and a trial type modifier) and a risk-aversion term modulated by the relative token contribution and the difference between the participant's and opponent's shares. The model has two learnable parameters: self_interest_weight and relative_advantage_weight, and a risk aversion parameter that interacts with the token counts.\nModel 11:\nSpecification: U_accept = self_interest_weight * split_self + satisficing_threshold * max(0, (split_self / token_self) - (split_opp / token_opp))\nSummary: A utility model for responder acceptance decisions based on a weighted self-interest component and a satisficing threshold.  The satisficing threshold determines the positive utility from exceeding the opponent's return per token. The model uses two learnable parameters: self_interest_weight and satisficing_threshold.\nModel 12:\nSpecification: U_accept = w_self * split_self + w_ref * (split_self - (token_self / (token_self + token_opp)) * combined_earning) * (1 + (split_self < (token_self / (token_self + token_opp)) * combined_earning) )\nSummary: A prospect theory-based utility model for responder acceptance decisions.  The model incorporates self-interest and a reference-dependent component reflecting gain/loss relative to a fair share based on token contribution. Loss aversion is included through a multiplication factor applied to the reference-dependent component. The model has two learnable parameters:  `w_self` and `w_ref`.\nModel 13:\nSpecification: U_accept =  self_interest_weight * split_self + relative_advantage_sensitivity * (split_self - (token_self / (token_self + token_opp)) * combined_earning)\nSummary: A utility model for responder acceptance decisions combining self-interest and a relative advantage term. The relative advantage is computed as the difference between the actual split and the participant's proportional share based on token contributions, weighted by a sensitivity parameter. The model has two learnable parameters: `self_interest_weight` and `relative_advantage_sensitivity`.\nModel 14:\nSpecification: U_accept = self_interest_weight * split_self + social_pref_weight * ( (splitperc_self - splitperc_opp) * (token_self / (token_self + token_opp)) ) * trial_type_modifier\nSummary: A utility model for responder acceptance decisions incorporating self-interest and a context-dependent social preference term.  The social preference component is modulated by the difference in percentage shares between the participant and the opponent, scaled by the participant's relative contribution and a contextual modifier based on the trial type. The model uses two learnable parameters: `self_interest_weight` and `social_pref_weight`.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "self_interest_weight": {
      "description": "Weight given to the absolute monetary gain for the participant",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "social_comparison_weight": {
      "description": "Weight given to the difference between participant's and opponent's share, scaled by relative contributions",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U_accept = self_interest_weight * split_self + social_comparison_weight * (split_self - split_opp) * (token_self / (token_self + token_opp))",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "self_interest_weight": {
      "description": "Weight given to the absolute monetary gain for the participant",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "social_comparison_weight": {
      "description": "Weight given to the difference between participant's and opponent's share, scaled by relative contributions",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "The proposed share of money for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_opp": {
      "description": "The proposed share of money for the opponent (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A utility model for responder acceptance decisions that combines self-interest (absolute monetary gain) with a social comparison term. The social comparison term is the difference between the responder's and opponent's shares, scaled by the responder's relative contribution in the token-finding task.  The model uses two learnable parameters: `self_interest_weight` and `social_comparison_weight`.",
  "full_reasoning": "Let me think through this step by step...\n\nThe previous models primarily focus on self-interest and fairness concerns, often calculating fairness as the deviation from a proportional split based on token contributions.  However, they lack exploration of potential social comparison effects.  Responders might not only compare their share to a fair proportion but also to the opponent's share, especially considering the pre-task token-finding activity emphasizes individual contribution.  A simple model incorporating this could help determine if such a social comparison plays a significant role independently of fairness concerns. This social comparison should be framed in a way that respects the relative contributions of each individual.\n\nThis model will capture the utility of accepting an offer based on two factors:  the absolute monetary gain (`split_self`) and a social comparison term, which is the difference between the participant's share and the opponent's share, scaled by the relative contributions from the token finding task. This helps us determine how much more or less the participant receives compared to the opponent, given their relative contributions. We then weigh these factors to determine the overall utility of accepting.\n\nThis model avoids high covariance between parameters by ensuring that the two parameters influence distinctly different aspects of the decision-making process. The self-interest parameter governs how much the absolute monetary gain matters, while the social comparison parameter focuses entirely on the relative gains and not the absolute.\n\nThe model will predict responder behavior only, using the variables available.\n\n\n<MODEL>\nU_accept = self_interest_weight * split_self + social_comparison_weight * (split_self - split_opp) * (token_self / (token_self + token_opp))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"self_interest_weight\": {\n      \"description\": \"Weight given to the absolute monetary gain for the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"social_comparison_weight\": {\n      \"description\": \"Weight given to the difference between participant's and opponent's share, scaled by relative contributions\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share of money for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"The proposed share of money for the opponent (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA utility model for responder acceptance decisions that combines self-interest (absolute monetary gain) with a social comparison term. The social comparison term is the difference between the responder's and opponent's shares, scaled by the responder's relative contribution in the token-finding task.  The model uses two learnable parameters: `self_interest_weight` and `social_comparison_weight`.\n</SUMMARY>\n",
  "simulation_code": "def simulate_model(trial_data, self_interest_weight=1, social_comparison_weight=1):\n    utility_values = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        split_opp = trial.get(\"split_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        #Handle division by zero\n        if token_self + token_opp == 0:\n            relative_contribution = 0\n        else:\n            relative_contribution = token_self / (token_self + token_opp)\n\n        utility = (self_interest_weight * split_self) + (social_comparison_weight * (split_self - split_opp) * relative_contribution)\n        utility_values.append(utility)\n    return utility_values",
  "fitting_results": [
    {
      "self_interest_weight": 0.8477470788630455,
      "social_comparison_weight": 10.0,
      "success": true,
      "log_likelihood": -0.7231132672611751,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.1785927328057706,
      "social_comparison_weight": 1.8716152339904537,
      "success": true,
      "log_likelihood": -16.81223726671987,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.4441281678132705,
      "social_comparison_weight": 2.101385151495025,
      "success": true,
      "log_likelihood": -15.462524942708734,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.6592015706106475,
      "social_comparison_weight": 3.119778497302215,
      "success": true,
      "log_likelihood": -12.94522078761686,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.9959184041837107,
      "social_comparison_weight": 1.9988442360091396,
      "success": true,
      "log_likelihood": -16.75902945474079,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.7695297964506054,
      "social_comparison_weight": 3.096842764896027,
      "success": true,
      "log_likelihood": -10.52393810213079,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "social_comparison_weight": -10.0,
      "success": true,
      "log_likelihood": -9.444851518460133e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.5956748977043596,
      "social_comparison_weight": 2.777217053642924,
      "success": true,
      "log_likelihood": -11.152897184945234,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "social_comparison_weight": -10.0,
      "success": true,
      "log_likelihood": -9.444851518460133e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.4307189671419966,
      "social_comparison_weight": 3.2152541461117834,
      "success": true,
      "log_likelihood": -13.009469390633067,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.3265670532300518,
      "social_comparison_weight": 4.372304507067355,
      "success": true,
      "log_likelihood": -10.122836075516433,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.8215635721278445,
      "social_comparison_weight": 5.910729436176767,
      "success": true,
      "log_likelihood": -5.490809973444067,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.63365922461049,
      "social_comparison_weight": 3.4709772278351334,
      "success": true,
      "log_likelihood": -12.332909473922115,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "social_comparison_weight": -10.0,
      "success": true,
      "log_likelihood": -9.444851518460129e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "social_comparison_weight": -10.0,
      "success": true,
      "log_likelihood": -9.444851518460132e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "social_comparison_weight": -10.0,
      "success": true,
      "log_likelihood": -9.444851518460132e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "social_comparison_weight": -10.0,
      "success": true,
      "log_likelihood": -9.44485151846013e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "social_comparison_weight": 5.384126112012257,
      "success": true,
      "log_likelihood": -2.492368243319414,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 3.1359596677059693,
      "social_comparison_weight": 1.3183249683839162,
      "success": true,
      "log_likelihood": -7.352612124375078,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "social_comparison_weight": -10.0,
      "success": true,
      "log_likelihood": -9.444851518460131e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.118010938524641,
      "social_comparison_weight": 1.575520353031042,
      "success": true,
      "log_likelihood": -17.75296389021016,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.897937614603235,
      "social_comparison_weight": 1.4175639265396185,
      "success": true,
      "log_likelihood": -8.502057070079923,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.336735253509055,
      "social_comparison_weight": 2.9031840111788294,
      "success": true,
      "log_likelihood": -13.805023539352716,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.332428927311906,
      "social_comparison_weight": 1.8336385813800615,
      "success": true,
      "log_likelihood": -16.37965518804614,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.863863842922082,
      "social_comparison_weight": 1.5462953201304384,
      "success": true,
      "log_likelihood": -18.575112648098234,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.3819235824074068,
      "social_comparison_weight": 1.617183646754498,
      "success": true,
      "log_likelihood": -16.499140974658054,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 3.9804431781036484,
      "social_comparison_weight": 5.538454508284345,
      "success": true,
      "log_likelihood": -6.885171324114746,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.8397108080278073,
      "social_comparison_weight": 5.661735706850702,
      "success": true,
      "log_likelihood": -8.866126382903072,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.191436310807668,
      "social_comparison_weight": 0.7484682527833341,
      "success": true,
      "log_likelihood": -9.856304878066881,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.2981200469135603,
      "social_comparison_weight": 0.7245477724671514,
      "success": true,
      "log_likelihood": -16.361897817488483,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 9.853921311383878,
      "social_comparison_weight": -9.970817232084277,
      "success": true,
      "log_likelihood": -1.0984407966400506e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.8477472896889323,
      "social_comparison_weight": 10.0,
      "success": true,
      "log_likelihood": -0.7231132672611549,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.9996813947551413,
      "social_comparison_weight": 1.9188563574332482,
      "success": true,
      "log_likelihood": -17.03607515969252,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.6445177648311082,
      "social_comparison_weight": 3.572178588871341,
      "success": true,
      "log_likelihood": -12.137076457046307,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "social_comparison_weight": -10.0,
      "success": true,
      "log_likelihood": -9.44485151846013e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.685158519206142,
      "social_comparison_weight": 2.5558934187987714,
      "success": true,
      "log_likelihood": -11.011103366768696,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 4.523631718432858,
      "social_comparison_weight": 4.239322640142945,
      "success": true,
      "log_likelihood": -7.64427611621487,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.141798151182735,
      "social_comparison_weight": 1.9172929795410134,
      "success": true,
      "log_likelihood": -16.783680371024392,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.0841061339085936,
      "social_comparison_weight": 1.0036384717085323,
      "success": true,
      "log_likelihood": -18.650900641909992,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.9088532711825308,
      "social_comparison_weight": 0.3330741267851475,
      "success": true,
      "log_likelihood": -9.549193733835011,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.1029581267004456,
      "social_comparison_weight": 1.3418047003814848,
      "success": true,
      "log_likelihood": -18.280116248808824,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.5411105395264769,
      "social_comparison_weight": 2.5274918469577696,
      "success": true,
      "log_likelihood": -13.44753233071102,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.1639339252130139,
      "social_comparison_weight": -0.9572369389959245,
      "success": true,
      "log_likelihood": -6.929255753971412,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.9045076894308401,
      "social_comparison_weight": 2.531745045704248,
      "success": true,
      "log_likelihood": -13.281769189518624,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.108060172861141,
      "social_comparison_weight": 2.428222241782421,
      "success": true,
      "log_likelihood": -12.769382598156996,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.5242913339542616,
      "social_comparison_weight": 0.987283533332728,
      "success": true,
      "log_likelihood": -15.236473814033491,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.8456209704832793,
      "social_comparison_weight": 2.8171937131545612,
      "success": true,
      "log_likelihood": -13.037749996854625,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.7586374077787187,
      "social_comparison_weight": 1.5788746565180325,
      "success": true,
      "log_likelihood": -18.54267640650544,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.8395769749593837,
      "social_comparison_weight": 1.990242447782474,
      "success": true,
      "log_likelihood": -16.793495332737837,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.4627623989832613,
      "social_comparison_weight": 0.497902380630737,
      "success": true,
      "log_likelihood": -23.133773975674043,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.323975990708051,
      "social_comparison_weight": 1.0362226730624582,
      "success": true,
      "log_likelihood": -16.871171208690324,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.54349162018104,
      "social_comparison_weight": 4.0198657453919076,
      "success": true,
      "log_likelihood": -8.309909971928398,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.3022596894593317,
      "social_comparison_weight": 1.7143243729239943,
      "success": true,
      "log_likelihood": -16.721616605627744,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.7664745882389021,
      "social_comparison_weight": 0.6586914691941914,
      "success": true,
      "log_likelihood": -20.979818962587654,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.24724403913068027,
      "social_comparison_weight": 0.8031711746147604,
      "success": true,
      "log_likelihood": -22.10258515103082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.6972201772687125,
      "social_comparison_weight": 4.371199446780504,
      "success": true,
      "log_likelihood": -10.73745494736132,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.521100601077738,
      "social_comparison_weight": 4.689224907955484,
      "success": true,
      "log_likelihood": -10.032050091230216,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.4807945278417907,
      "social_comparison_weight": -1.2607935423477303,
      "success": true,
      "log_likelihood": -11.408191589790102,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.36742019125069,
      "social_comparison_weight": 8.695495928514891,
      "success": true,
      "log_likelihood": -3.6147438245684556,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.4839519278519346,
      "social_comparison_weight": 0.5410908219137828,
      "success": true,
      "log_likelihood": -13.933694271181713,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.9999209001690444,
      "social_comparison_weight": 1.0710133004357472,
      "success": true,
      "log_likelihood": -19.20576181295234,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.1518074327765944,
      "social_comparison_weight": 1.9504835151357995,
      "success": true,
      "log_likelihood": -16.665627272636588,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.8477472181714039,
      "social_comparison_weight": 10.0,
      "success": true,
      "log_likelihood": -0.7231132672611483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.9438821020000725,
      "social_comparison_weight": 1.617230140895198,
      "success": true,
      "log_likelihood": -18.168729801867723,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 3.0469780676682845,
      "social_comparison_weight": 10.0,
      "success": true,
      "log_likelihood": -5.305969230143491,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.144735401975894,
      "social_comparison_weight": 2.8260372557005993,
      "success": true,
      "log_likelihood": -12.221387137648659,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.3262599268581217,
      "social_comparison_weight": 0.5726003363958507,
      "success": true,
      "log_likelihood": -8.400005497176114,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.7947539078330343,
      "social_comparison_weight": 0.6673933852800602,
      "success": true,
      "log_likelihood": -12.062073594743127,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.8858257678967205,
      "social_comparison_weight": 2.2225755470881126,
      "success": true,
      "log_likelihood": -13.716733993305878,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.080061374713858,
      "social_comparison_weight": -0.3708705326108818,
      "success": true,
      "log_likelihood": -11.265016271020093,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.7917134817817246,
      "social_comparison_weight": 5.815495728771416,
      "success": true,
      "log_likelihood": -5.551297938669756,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.1219585578516171,
      "social_comparison_weight": 6.313281579871537,
      "success": true,
      "log_likelihood": -5.795707241148482,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.6207917221723787,
      "social_comparison_weight": 2.349468502299924,
      "success": true,
      "log_likelihood": -14.441064651844949,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.473925837545241,
      "social_comparison_weight": 0.6715859702850795,
      "success": true,
      "log_likelihood": -14.616664039107247,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.46808397315123534,
      "social_comparison_weight": 0.6611762004170194,
      "success": true,
      "log_likelihood": -22.776426863202136,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.466528322342289,
      "social_comparison_weight": 2.5017019587536167,
      "success": true,
      "log_likelihood": -11.644133162741086,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.8907222924629843,
      "social_comparison_weight": 0.042210836184054426,
      "success": true,
      "log_likelihood": -7.881416789100726,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "social_comparison_weight": 3.5914785618516953,
      "success": true,
      "log_likelihood": -6.955528232163188,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.5312818139098744,
      "social_comparison_weight": 0.27688275749912017,
      "success": true,
      "log_likelihood": -22.403758359320634,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.8477472246888345,
      "social_comparison_weight": 10.0,
      "success": true,
      "log_likelihood": -0.723113267261148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.5426364025461416,
      "social_comparison_weight": 0.7265723506849866,
      "success": true,
      "log_likelihood": -22.31249429203774,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.9886104275919527,
      "social_comparison_weight": -0.48643704865862614,
      "success": true,
      "log_likelihood": -11.291760175382612,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.3506843555085917,
      "social_comparison_weight": 4.027055788521559,
      "success": true,
      "log_likelihood": -7.5066263902151915,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 4.001495374356633,
      "social_comparison_weight": 5.727438105694684,
      "success": true,
      "log_likelihood": -6.745276943330358,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.30451714009773956,
      "social_comparison_weight": 0.1395404552064229,
      "success": true,
      "log_likelihood": -23.95437435165156,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.4883637361457305,
      "social_comparison_weight": 10.0,
      "success": true,
      "log_likelihood": -1.5904826073757357,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.132940727582041,
      "social_comparison_weight": 0.9147988480850112,
      "success": true,
      "log_likelihood": -18.216161877866213,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.231728536586806,
      "social_comparison_weight": 1.6916396086288554,
      "success": true,
      "log_likelihood": -15.971337841777734,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.8318145602527474,
      "social_comparison_weight": 0.5370759319864783,
      "success": true,
      "log_likelihood": -6.117465852132147,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.5093252458630126,
      "social_comparison_weight": 3.639847445134423,
      "success": true,
      "log_likelihood": -10.45302266150502,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.7772759548487462,
      "social_comparison_weight": 0.4553648951778858,
      "success": true,
      "log_likelihood": -20.52507804771244,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "self_interest_weight": {
        "r": 0.6606742119991693,
        "p": 7.48093546889348e-14
      },
      "social_comparison_weight": {
        "r": 0.9387843466989884,
        "p": 3.77813998146936e-47
      }
    }
  },
  "bic_results": {
    "average_bic": 29.66308006380666,
    "individual_bics": [
      8.613264411434571,
      40.791512410351956,
      38.09208776232969,
      33.05747945214594,
      40.6850967863938,
      28.214914081173802,
      7.167039765882524,
      29.47283224680269,
      7.167039765882524,
      33.185976658178355,
      27.41271002794509,
      18.148657823800356,
      31.832856824756448,
      7.167039765882524,
      7.167039765882524,
      7.167039765882524,
      7.167039765882524,
      12.151774363551048,
      21.872262125662374,
      7.167039765882524,
      42.67296565733254,
      24.171152017072068,
      34.77708495561765,
      39.9263482530045,
      44.317263173108685,
      40.16531982622833,
      20.937380525141712,
      24.899290642718363,
      26.879647633045984,
      39.890833511889184,
      7.167040073793813,
      8.61326441143453,
      41.239188196297256,
      31.441190791004836,
      7.167039765882524,
      29.189244610449613,
      22.455590109341962,
      40.734398618961,
      44.4688391607322,
      26.26542534458224,
      43.727270374529866,
      34.06210253833426,
      21.025549384855044,
      33.730576255949465,
      32.705803073226214,
      37.6399855049792,
      33.24253787062147,
      44.2523906899231,
      40.75402854238789,
      53.4345858282603,
      40.909380294292866,
      23.786857820769015,
      40.61027108816771,
      49.126675802087526,
      51.37220817897386,
      28.64194777163486,
      27.231138059372654,
      29.983421056492425,
      14.396525526049132,
      35.03442641927565,
      45.578561502816896,
      40.49829242218539,
      8.613264411434516,
      43.504497480647665,
      17.778976337199204,
      31.609812152209535,
      23.967048871264446,
      31.291185066398477,
      34.60050586352398,
      29.697070418952407,
      18.269633754251732,
      18.758452359209183,
      36.04916718060212,
      36.400365955126716,
      52.71989160331649,
      30.455304202394395,
      22.92987145511367,
      21.078094341238597,
      51.974554595553485,
      8.613264411434516,
      51.7920264609877,
      29.750558227677445,
      22.180290657342603,
      20.65759176357294,
      55.075786580215336,
      10.348003091663692,
      43.599361632644644,
      39.10971356046769,
      19.401969581176516,
      28.07308319992226,
      48.2171939723371
    ],
    "num_parameters": 2,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}