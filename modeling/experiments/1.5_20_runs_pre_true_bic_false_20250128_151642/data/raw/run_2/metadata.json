{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: U_accept = self_interest_sensitivity * split_self + fairness_weight * (splitperc_self - (token_self / (token_self + token_opp)) * 100)\nSummary: A utility model for responder behavior in a bargaining game.  The model combines the monetary gain for the responder with a fairness term, weighted by two learnable parameters: `fairness_weight` representing the relative importance of fairness, and `self_interest_sensitivity` representing the sensitivity to changes in monetary gain. The fairness term is calculated as the difference between the responder's share and a share proportional to their contribution relative to the opponent's contribution.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "self_interest_weight": {
      "description": "Weight assigned to self-interest in utility calculation.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fairness_weight": {
      "description": "Weight assigned to fairness in utility calculation.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U_accept =  self_interest_weight * split_self + fairness_weight * (splitperc_self - (token_self / (token_self + token_opp)) * 100)",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting the offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "self_interest_weight": {
      "description": "Weight assigned to self-interest in utility calculation.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fairness_weight": {
      "description": "Weight assigned to fairness in utility calculation.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Amount of money the participant receives in the proposed split (\u00a3).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "splitperc_self": {
      "description": "Percentage of the combined earnings that the participant receives in the proposed split (%).",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A utility model for responder behavior in a bargaining game. The model combines the monetary gain for the responder (split_self) with a fairness term, weighted by two learnable parameters: `self_interest_weight` and `fairness_weight`. The fairness term is calculated as the difference between the responder's percentage share and a percentage share proportional to their contribution relative to the opponent's contribution.",
  "full_reasoning": "Let me think through this step by step...\n\nThe key psychological mechanisms involved in responder behavior in this bargaining game are likely self-interest and a consideration of fairness.  A responder will be more likely to accept an offer if it benefits them more, but they may also reject offers perceived as unfair, even if they result in a monetary gain.  The fairness consideration could be based on different understandings of what constitutes a \"fair\" split; one possibility could be a simple proportional split based on the token contributions of each party.  However, this may not fully capture the nuances of fairness perception, as individuals might have varying sensitivities to deviations from proportionality.\n\nHow these mechanisms interact: The responder\u2019s decision will be a balance between maximizing their own monetary gain and ensuring fairness. If an offer is highly beneficial but significantly unfair, the responder might still reject it; conversely, a slightly unfair but substantial offer might be accepted.  The relative importance of self-interest and fairness perceptions will vary between responders.\n\nWhat mathematical form could capture these interactions? A linear utility function might be suitable. This allows for a straightforward weighting of the two factors \u2013 self-interest and fairness. The self-interest component is easily measured as the amount of money received (split_self). The fairness component could be represented as the difference between the proposed split and a proportionality-based expectation of the fair share.\n\nWhat parameters would be needed to calibrate the model? Two learnable parameters would be sufficient: one for the weight given to self-interest and the other for the weight given to fairness.  This allows flexibility in calibrating the model to different individual behaviors.\n\n\nHow the model variables map to observable behavior:  The utility calculation will take the split_self and a fairness term as inputs. The model\u2019s parameters will determine the weights applied to each, ultimately predicting the utility of accepting the offer. Higher utility implies a higher likelihood of acceptance.  Rejecting the offer has a utility of zero. The model would not predict the probability of acceptance directly, as it only computes utility values.  Probabilities are handled by the later application of a temperature parameter, as specified in the task description.\n\n\n<MODEL>\nU_accept =  self_interest_weight * split_self + fairness_weight * (splitperc_self - (token_self / (token_self + token_opp)) * 100)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"self_interest_weight\": {\n      \"description\": \"Weight assigned to self-interest in utility calculation.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Weight assigned to fairness in utility calculation.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount of money the participant receives in the proposed split (\u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Percentage of the combined earnings that the participant receives in the proposed split (%).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA utility model for responder behavior in a bargaining game. The model combines the monetary gain for the responder (split_self) with a fairness term, weighted by two learnable parameters: `self_interest_weight` and `fairness_weight`. The fairness term is calculated as the difference between the responder's percentage share and a percentage share proportional to their contribution relative to the opponent's contribution.\n</SUMMARY>\n",
  "simulation_code": "def simulate_model(trial_data, self_interest_weight=1, fairness_weight=1):\n    utility_values = []\n    for trial in trial_data:\n        try:\n            split_self = trial['split_self']\n            splitperc_self = trial['splitperc_self']\n            token_self = trial['token_self']\n            token_opp = trial['token_opp']\n\n            #Handle potential division by zero\n            if token_self + token_opp == 0:\n                fairness_term = 0\n            else:\n                fairness_term = splitperc_self - (token_self / (token_self + token_opp)) * 100\n\n            utility = self_interest_weight * split_self + fairness_weight * fairness_term\n            utility_values.append(utility)\n        except (KeyError, TypeError) as e:\n            print(f\"Error processing trial: {trial}.  Error: {e}\")\n            utility_values.append(None) # or handle the error as appropriate\n\n    return utility_values",
  "fitting_results": [
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.3398650869529985,
      "success": true,
      "log_likelihood": -8.460896738802491,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.9076549367031201,
      "fairness_weight": 0.17241117733940675,
      "success": true,
      "log_likelihood": -17.296180488059942,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.9853276470355368,
      "fairness_weight": 0.37485208512806145,
      "success": true,
      "log_likelihood": -10.667416276312297,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.2580130019428344,
      "fairness_weight": 0.28945829698487974,
      "success": true,
      "log_likelihood": -13.375243144908023,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.5440103006398345,
      "fairness_weight": 0.3921728566619977,
      "success": true,
      "log_likelihood": -11.257367050171847,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.4804232808045992,
      "fairness_weight": 0.17250566786853638,
      "success": true,
      "log_likelihood": -14.735357988728179,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_weight": -0.8008350495948959,
      "success": true,
      "log_likelihood": -2.2987206236847716e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.421982331448248,
      "fairness_weight": 0.15425794619802455,
      "success": true,
      "log_likelihood": -15.279149642722066,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_weight": -1.0141980242425783,
      "success": true,
      "log_likelihood": -2.1192100383236498e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.310447370368081,
      "fairness_weight": 0.36834300392053626,
      "success": true,
      "log_likelihood": -11.613547729684154,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 6.773755411391001,
      "fairness_weight": 1.6391007414800842,
      "success": true,
      "log_likelihood": -4.274002184412637,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.30800898848246794,
      "success": true,
      "log_likelihood": -9.268950855491537,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.1704304273360553,
      "fairness_weight": 0.30903265161366916,
      "success": true,
      "log_likelihood": -12.939873558239379,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_weight": -1.0393805290993403,
      "success": true,
      "log_likelihood": -2.275712847499335e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_weight": -0.8029246545229132,
      "success": true,
      "log_likelihood": -2.285297042790283e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_weight": -0.9480421701583392,
      "success": true,
      "log_likelihood": -1.9143213553651962e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_weight": -1.0501797209051518,
      "success": true,
      "log_likelihood": -2.3587581996909894e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_weight": 0.5208424597322224,
      "success": true,
      "log_likelihood": -1.3615556949290286,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 3.196602714159433,
      "fairness_weight": 0.1431391381571826,
      "success": true,
      "log_likelihood": -7.674662028805914,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_weight": -0.9981331168518722,
      "success": true,
      "log_likelihood": -2.043914493695309e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.0210572169964174,
      "fairness_weight": 0.1744816771911143,
      "success": true,
      "log_likelihood": -16.862528617486543,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.4437058963932237,
      "fairness_weight": 0.11391582612898553,
      "success": true,
      "log_likelihood": -9.737035160642668,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.6286767532526578,
      "fairness_weight": 0.17508745222903896,
      "success": true,
      "log_likelihood": -17.513380770837745,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.0015299606065309,
      "fairness_weight": 0.15854457912482606,
      "success": true,
      "log_likelihood": -17.388551801175485,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.8172022173841926,
      "fairness_weight": 0.18379956060702954,
      "success": true,
      "log_likelihood": -17.064254721155397,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.4946266832242026,
      "fairness_weight": 0.21683363157498906,
      "success": true,
      "log_likelihood": -13.99447317939425,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.319055394927421,
      "fairness_weight": 0.1946083289741581,
      "success": true,
      "log_likelihood": -15.15261232944574,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.6462789908968003,
      "fairness_weight": 0.6592166206126251,
      "success": true,
      "log_likelihood": -6.597328548266937,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.094586741248649,
      "fairness_weight": 0.0737994356652032,
      "success": true,
      "log_likelihood": -10.182986600072855,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.1867293411994868,
      "fairness_weight": 0.06902951277840244,
      "success": true,
      "log_likelihood": -16.679740733280127,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_weight": -0.9837048473046279,
      "success": true,
      "log_likelihood": -1.991023005121643e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.3398643327735767,
      "success": true,
      "log_likelihood": -8.46089673873553,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.4781051748871141,
      "fairness_weight": 0.1115164855746654,
      "success": true,
      "log_likelihood": -20.758046717588396,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.8257429997509133,
      "fairness_weight": 0.225825726033301,
      "success": true,
      "log_likelihood": -15.421582742202515,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_weight": -1.0184674836884247,
      "success": true,
      "log_likelihood": -2.1423094710587895e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.8842598583422883,
      "fairness_weight": 0.19044254792763335,
      "success": true,
      "log_likelihood": -12.623448161850334,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.4773049925632056,
      "fairness_weight": 0.2443834828381103,
      "success": true,
      "log_likelihood": -10.062060404155082,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.9345149272873775,
      "fairness_weight": 0.1915391459885793,
      "success": true,
      "log_likelihood": -16.583783045508763,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.9008583588566679,
      "fairness_weight": 0.08906255990211383,
      "success": true,
      "log_likelihood": -19.345498415947358,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.7194476543278812,
      "fairness_weight": 0.017897348319895225,
      "success": true,
      "log_likelihood": -9.74128708516907,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.7106670375595837,
      "fairness_weight": 0.08730426321846309,
      "success": true,
      "log_likelihood": -20.72573576236891,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.4338421847673659,
      "fairness_weight": 0.32125582336192643,
      "success": true,
      "log_likelihood": -10.69276786621955,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_weight": -0.34250545113968267,
      "success": true,
      "log_likelihood": -23.025281340933148,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.0127734444938292,
      "fairness_weight": 0.1407665648231861,
      "success": true,
      "log_likelihood": -17.79149880706706,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.4372617155684282,
      "fairness_weight": 0.18112071475657474,
      "success": true,
      "log_likelihood": -14.82735725954534,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.3193028985643391,
      "fairness_weight": 0.08666187654643533,
      "success": true,
      "log_likelihood": -15.938638460930811,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.8559520497323685,
      "fairness_weight": 0.13984719393708092,
      "success": true,
      "log_likelihood": -18.554846311631533,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.6124735555079638,
      "fairness_weight": 0.16331545288265104,
      "success": true,
      "log_likelihood": -18.0809957192447,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.7799264926398038,
      "fairness_weight": 0.23904739532392805,
      "success": true,
      "log_likelihood": -14.857877027834055,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.40615494958203285,
      "fairness_weight": 0.050080002359224815,
      "success": true,
      "log_likelihood": -23.236365291392325,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.9848791102531115,
      "fairness_weight": 0.0696973982302099,
      "success": true,
      "log_likelihood": -18.53714495575113,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.2071644286942654,
      "success": true,
      "log_likelihood": -13.012403413765282,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.9130736123763606,
      "fairness_weight": 0.13323138108883112,
      "success": true,
      "log_likelihood": -18.48943528403918,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.6422752165411427,
      "fairness_weight": 0.056928704694711584,
      "success": true,
      "log_likelihood": -21.50002937245333,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.4772593459085201,
      "fairness_weight": 0.17441279662590178,
      "success": true,
      "log_likelihood": -17.318008379976813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 4.416942699454571,
      "fairness_weight": 1.3067550015259097,
      "success": true,
      "log_likelihood": -5.3032385955747605,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.7314180557221798,
      "fairness_weight": 0.33415920583945297,
      "success": true,
      "log_likelihood": -11.25872029331909,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.6443504874160372,
      "fairness_weight": -0.11781724159817068,
      "success": true,
      "log_likelihood": -11.357241549052016,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.2830853121943596,
      "success": true,
      "log_likelihood": -10.006664541916189,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.465629597348108,
      "fairness_weight": 0.05984800390738993,
      "success": true,
      "log_likelihood": -13.936235001814644,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.7214419990240007,
      "fairness_weight": 0.07771685870631989,
      "success": true,
      "log_likelihood": -20.790038471998464,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.8167010455805721,
      "fairness_weight": 0.16598393408621803,
      "success": true,
      "log_likelihood": -17.754451631307273,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.3398633666722329,
      "success": true,
      "log_likelihood": -8.460896738706658,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.6461330972525647,
      "fairness_weight": 0.13286533250761504,
      "success": true,
      "log_likelihood": -19.48274871912551,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.571121883176561,
      "fairness_weight": 0.3358976879019913,
      "success": true,
      "log_likelihood": -10.687144937678106,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.3079920020149207,
      "fairness_weight": 0.19074342058174754,
      "success": true,
      "log_likelihood": -15.276697043450378,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.9404098691603844,
      "fairness_weight": 0.029366143679171532,
      "success": true,
      "log_likelihood": -8.939722462673881,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.6894643950738903,
      "fairness_weight": 0.06381875242439664,
      "success": true,
      "log_likelihood": -12.364847519955593,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.422916804134866,
      "fairness_weight": 0.18880859700310076,
      "success": true,
      "log_likelihood": -14.774252397309313,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.2540151351430642,
      "fairness_weight": -0.014939136567424858,
      "success": true,
      "log_likelihood": -11.497029750599836,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 3.841774786874652,
      "fairness_weight": 10.0,
      "success": true,
      "log_likelihood": -3.1233791487268294e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.20368284848215343,
      "success": true,
      "log_likelihood": -13.183581049695414,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.0501170049191588,
      "fairness_weight": 0.17242082809277326,
      "success": true,
      "log_likelihood": -16.808581525672743,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.4838553989303107,
      "fairness_weight": 0.0783175389114041,
      "success": true,
      "log_likelihood": -14.438958715073209,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.35727795182665634,
      "fairness_weight": 0.057550563980721864,
      "success": true,
      "log_likelihood": -23.300446744444844,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.106723634368667,
      "fairness_weight": 0.09524033687730415,
      "success": true,
      "log_likelihood": -17.725875625488293,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.0619025817372094,
      "fairness_weight": 0.021708085926675027,
      "success": true,
      "log_likelihood": -7.8254642057340655,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.21843080086526842,
      "success": true,
      "log_likelihood": -12.480681162691102,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.5961854523475035,
      "fairness_weight": 0.04825392536816427,
      "success": true,
      "log_likelihood": -21.85302224167878,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.3398635543326752,
      "success": true,
      "log_likelihood": -8.460896738707264,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.374548539464281,
      "fairness_weight": 0.05275874936543725,
      "success": true,
      "log_likelihood": -23.348360001341067,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.9083480118173147,
      "fairness_weight": -0.08168233385540265,
      "success": true,
      "log_likelihood": -10.646691325543726,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.21452865960113326,
      "success": true,
      "log_likelihood": -12.661070408314949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.3609956382423993,
      "fairness_weight": 0.40607465557829703,
      "success": true,
      "log_likelihood": -9.37234312906494,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.3342543228304354,
      "fairness_weight": 0.02498583838582024,
      "success": true,
      "log_likelihood": -23.782035158922397,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.10405543694398921,
      "fairness_weight": 10.0,
      "success": true,
      "log_likelihood": -24.373396089227132,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.9081759304776023,
      "fairness_weight": 0.07209242894292589,
      "success": true,
      "log_likelihood": -19.258900055096667,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.1760529554285352,
      "fairness_weight": 0.21881004447325117,
      "success": true,
      "log_likelihood": -13.611084969270996,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 3.118745986460605,
      "fairness_weight": 0.07795475986287949,
      "success": true,
      "log_likelihood": -6.021589704515789,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.668250858201175,
      "fairness_weight": 0.28368022320675496,
      "success": true,
      "log_likelihood": -12.411837311342833,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.624467322027479,
      "fairness_weight": 0.026765387466413288,
      "success": true,
      "log_likelihood": -21.119542109795827,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "self_interest_weight": {
        "r": 0.5919253153512127,
        "p": 8.824514953365284e-11
      },
      "fairness_weight": {
        "r": 0.8487821557076417,
        "p": 7.123667798799792e-29
      }
    }
  },
  "bic_results": {
    "average_bic": 32.739266953758325,
    "individual_bics": [
      24.088831354517204,
      41.7593988530321,
      28.501870429536815,
      33.91752416672826,
      29.681771977255913,
      36.637753854368576,
      7.167042474353467,
      37.725337162356354,
      7.167042115332296,
      30.394133336280525,
      15.715042245737493,
      25.704939587895296,
      33.04678499339098,
      7.167042428337915,
      7.167042447506305,
      7.16704170555493,
      7.16704259442862,
      9.890149266770276,
      22.51636193452405,
      7.167041964741207,
      40.892095111885304,
      26.641108198197557,
      42.19379941858771,
      41.94414147926319,
      41.29554731922301,
      35.15598423570072,
      37.4722625358037,
      20.36169497344609,
      27.533011077057928,
      40.52651934347247,
      7.16704185895823,
      24.08883135438328,
      48.68313131208901,
      38.01020336131725,
      7.167042161531162,
      32.413934200612886,
      27.291158685222385,
      40.334603967929745,
      45.85803470880693,
      26.649612047250358,
      48.61850940165004,
      28.55257360935132,
      53.217600558778514,
      42.75003549104634,
      36.8217523960029,
      39.04431479877384,
      44.27673050017528,
      43.32902931540162,
      36.88279193258033,
      53.63976845969687,
      44.24132778841448,
      33.19184470444279,
      44.145908444990575,
      50.16709662181888,
      41.803054636865845,
      17.77351506806174,
      29.6844784635504,
      29.88152097501625,
      27.1803669607446,
      35.03950788054151,
      48.74711482090915,
      42.67594113952676,
      24.088831354325535,
      46.13253531516324,
      28.54132775226843,
      37.72043196381298,
      25.04648280225998,
      31.896732916823403,
      36.71554267153085,
      30.16109737811189,
      7.167100344495195,
      33.53419997630305,
      40.784200928257704,
      36.044955307058636,
      53.76793136580191,
      42.6187891278888,
      22.81796628838035,
      32.12840020229442,
      50.87308236026978,
      24.08883135432675,
      53.86375787959435,
      28.460420527999673,
      32.489178693542115,
      25.9117241350421,
      54.73110819475701,
      55.91383005536648,
      45.68483798710555,
      34.38920781545421,
      19.2102172859438,
      31.990712499597883,
      49.40612209650387
    ],
    "num_parameters": 2,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}