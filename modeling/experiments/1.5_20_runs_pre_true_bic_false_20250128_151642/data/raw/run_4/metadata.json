{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: U_accept = self_interest_sensitivity * split_self + fairness_weight * (splitperc_self - (token_self / (token_self + token_opp)) * 100)\nSummary: A utility model for responder behavior in a bargaining game.  The model combines the monetary gain for the responder with a fairness term, weighted by two learnable parameters: `fairness_weight` representing the relative importance of fairness, and `self_interest_sensitivity` representing the sensitivity to changes in monetary gain. The fairness term is calculated as the difference between the responder's share and a share proportional to their contribution relative to the opponent's contribution.\nModel 2:\nSpecification: U_accept =  self_interest_weight * split_self + fairness_weight * (splitperc_self - (token_self / (token_self + token_opp)) * 100)\nSummary: A utility model for responder behavior in a bargaining game. The model combines the monetary gain for the responder (split_self) with a fairness term, weighted by two learnable parameters: `self_interest_weight` and `fairness_weight`. The fairness term is calculated as the difference between the responder's percentage share and a percentage share proportional to their contribution relative to the opponent's contribution.\nModel 3:\nSpecification: U_accept = alpha * split_self - gamma * abs(splitperc_self - splitperc_opp) * abs( (token_self / (token_self + token_opp)) - (splitperc_self / (splitperc_self + splitperc_opp)) )\nSummary: A utility model for responder behavior incorporating both self-interest and inequity aversion.  Utility is a weighted sum of the responder's monetary gain and the absolute difference between their percentage share and the opponent's percentage share, further modulated by the difference between the relative contributions of tokens. The model uses two learnable parameters: `alpha` for self-interest weighting and `gamma` for inequity aversion weighting.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "self_interest_weight": {
      "description": "Weight representing the importance of self-interest in the utility function",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fairness_weight": {
      "description": "Weight representing the importance of fairness (deviation from reference point) in the utility function",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U_accept =  self_interest_weight * split_self + fairness_weight * abs(split_self - (token_self / (token_self + token_opp)) * combined_earning)",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting the proposed offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "self_interest_weight": {
      "description": "Weight representing the importance of self-interest in the utility function",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fairness_weight": {
      "description": "Weight representing the importance of fairness (deviation from reference point) in the utility function",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Amount of money proposed for the participant (\u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned (\u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A utility model for responder acceptance decisions based on self-interest and reference-dependent fairness.  Utility is a weighted sum of the responder's monetary gain and the absolute deviation of their share from a fair share proportional to their relative contribution, calculated with respect to the total combined earnings.  The model uses two learnable parameters representing the weights for self-interest and fairness.",
  "full_reasoning": "Let me think through this step by step...\n\nWe need a model that predicts the utility of accepting an offer for a responder in a bargaining game, focusing on psychological principles and minimizing the number of parameters.  Previous models focused on fairness considerations comparing the split to the contribution ratio.  While important, this misses another key aspect of human decision-making:  **reference dependence**. People often evaluate outcomes not in absolute terms, but relative to a reference point.  In this scenario, a natural reference point is the total combined earnings, and a fair share would be proportional to the contribution of tokens.\n\nTherefore, I will create a model based on two core psychological mechanisms:\n\n1. **Self-interest:**  Responders are driven by the monetary gain (`split_self`).\n2. **Reference-dependent fairness:** Responders evaluate fairness based on the deviation of their share from what they perceive as a fair share of the `combined_earnings` proportional to their relative contribution (`token_self`/(`token_self` + `token_opp`)). This is our reference point.\n\nThe interaction between these mechanisms can be captured mathematically by a simple weighted sum where the weighting parameters capture the relative importance of self-interest and fairness.  To make this simple we will calculate the proposed split with respect to a simple relative contribution calculation.\n\nThe model will have two learnable parameters:  a weight for self-interest and a weight for reference-dependent fairness. We expect these parameters to have high covariance, as individuals may value both self-interest and fairness. To avoid high covariance, we will look at the absolute value of deviation from a fair split.\n\n\n<MODEL>\nU_accept =  self_interest_weight * split_self + fairness_weight * abs(split_self - (token_self / (token_self + token_opp)) * combined_earning)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"self_interest_weight\": {\n      \"description\": \"Weight representing the importance of self-interest in the utility function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Weight representing the importance of fairness (deviation from reference point) in the utility function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount of money proposed for the participant (\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned (\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA utility model for responder acceptance decisions based on self-interest and reference-dependent fairness.  Utility is a weighted sum of the responder's monetary gain and the absolute deviation of their share from a fair share proportional to their relative contribution, calculated with respect to the total combined earnings.  The model uses two learnable parameters representing the weights for self-interest and fairness.\n</SUMMARY>\n",
  "simulation_code": "def simulate_model(trial_data, self_interest_weight=1, fairness_weight=1):\n    utility_values = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        #Handle division by zero\n        if (token_self + token_opp) == 0:\n          fair_share = 0\n        else:\n          fair_share = (token_self / (token_self + token_opp)) * combined_earning\n\n        utility = (self_interest_weight * split_self) + (fairness_weight * abs(split_self - fair_share))\n        utility_values.append(utility)\n    return utility_values",
  "fitting_results": [
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.16547007308001224,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.485634924126813,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.2392609140350377,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.00071826425154,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.07953632595151866,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.84315821740286,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.01927538156492785,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.946793805217524,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.5002616296217681,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -21.355363563519436,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 9.775496701109898,
      "fairness_weight": 8.249888198821475,
      "success": true,
      "log_likelihood": -6.342477479709196e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.5323394511210965,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -20.968222059175122,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 9.622253134711482,
      "fairness_weight": 8.795435307958813,
      "success": true,
      "log_likelihood": -5.550295830819783e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.09691603437437055,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.790227413567518,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_weight": 7.172127878549402,
      "success": true,
      "log_likelihood": -9.767877127496826e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 9.373135221710003,
      "fairness_weight": 9.350808453990366,
      "success": true,
      "log_likelihood": -5.536750357071246e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 9.765523311266227,
      "fairness_weight": 8.707078715428732,
      "success": true,
      "log_likelihood": -5.030029464878524e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "fairness_weight": 7.326607550692338,
      "success": true,
      "log_likelihood": -8.862721909890676e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.6305052107739775,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -9.314100511662497,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.5213596611546178,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -10.14070262559087,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 9.273469568185904,
      "fairness_weight": 9.900591738535006,
      "success": true,
      "log_likelihood": -4.894041437747114e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.22981824392356545,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.071078385474767,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.323091928732356,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -11.8414963868434,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.26561051250120277,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -23.792498805987336,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.07737044306110062,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.84904221371526,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.37263525261566155,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -22.79024942711899,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.34346603599870473,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -23.08557816289606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.4027022528274766,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -11.126394044758053,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.7620589021258143,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -18.083908515340074,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 9.470416439752556,
      "fairness_weight": 9.467952027524015,
      "success": true,
      "log_likelihood": -4.742705838623753e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.045022238671842574,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.917865838002548,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 9.67909505941582,
      "fairness_weight": 8.320866177557104,
      "success": true,
      "log_likelihood": -6.697722294515714e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.6416681095024411,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -19.606629511267226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.7096504790742372,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -18.745873404467854,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.12981030915105843,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.66273572051194,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.4485826156101203,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -21.959897382739964,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.5660124023703594,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -9.793428384198277,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.31010034037313444,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -23.404100097563184,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.2151067340533153,
      "fairness_weight": 0.8593995969181374,
      "success": true,
      "log_likelihood": -6.988082712525647,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.33049776910247974,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -23.211941130890295,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.448587365280573,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -21.9598973825613,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.7666157823823039,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -18.02658339128844,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.22981880527232842,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.071078385483332,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.19958828947003848,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.280359571889214,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.6009573123139045,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -20.119051304108982,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.2901001137031141,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -23.584141130446636,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.3780393289847493,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -22.733949252321295,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.3778544979258536,
      "fairness_weight": 1.622783753954788,
      "success": true,
      "log_likelihood": -10.378567039527425,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.033517222478423,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -14.818891996169047,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.35661163980080013,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -22.954319393418622,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.12539759103580853,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.681876208140274,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.10564312137522203,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.75984393669379,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.3487022325040263,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -23.03366591826307,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.6651526323703412,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -9.066947778244844,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.1793142661122706,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -13.24613950291749,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.4168246738097811,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -22.316796444522854,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.2283060132530073,
      "fairness_weight": 0.1540189558767451,
      "success": true,
      "log_likelihood": -11.481402333440197,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.2535611448230424,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -23.889839603763935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.9319554232505938,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -15.996587227445971,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.1276028323745878,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.672388702067927,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.5727346384286983,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -20.47110334101881,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.8464315940832778,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -7.884388686935948,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.37533302499104443,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -22.76220067126823,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.16097430103014673,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.510118074706416,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.9149528986686916,
      "fairness_weight": 0.5980777069036509,
      "success": true,
      "log_likelihood": -11.046042013328075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.3228005431272221,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -23.285436190905944,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.23217253877905517,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.053753761538175,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.5290710093743553,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -21.008024898602002,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.0887607477065173,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -6.560712655496235,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.29010292336208565,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -23.58414113059438,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.4971263802530851,
      "fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -21.392765533338917,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "self_interest_weight": {
        "r": 0.5206074592306004,
        "p": 2.8211290631949944e-08
      },
      "fairness_weight": {
        "r": 0.3496423973642101,
        "p": 0.00036288627686701416
      }
    }
  },
  "bic_results": {
    "average_bic": 45.501966552029494,
    "individual_bics": [
      57.073634862828236,
      56.138307725165845,
      55.168474405415296,
      56.853354311717936,
      57.06062548734727,
      49.87776500395109,
      7.167050561867179,
      49.10348199526246,
      7.167048977503882,
      57.073634862828236,
      56.747492704047254,
      57.073634862828236,
      57.073634862828236,
      7.167057412666475,
      7.1670489504129336,
      7.16704793697115,
      7.167055602356039,
      25.795238900237216,
      27.448443128093963,
      7.167047664995096,
      55.30919464786175,
      30.850030650599017,
      57.073634862828236,
      54.75203548888689,
      56.86512230434274,
      52.7475367311502,
      53.33819420270434,
      57.073634862828236,
      29.419825966428327,
      43.334854907592366,
      7.167047362323897,
      57.073634862828236,
      57.002769552917314,
      57.073634862828236,
      7.167051272356809,
      46.38029689944667,
      44.65878468584793,
      56.4925093179361,
      51.086832642392146,
      26.753894645308776,
      53.975238072038586,
      57.073634862828236,
      21.143203301963513,
      53.59092013869281,
      51.08683264203482,
      43.2202046594891,
      55.30919464787888,
      57.073634862828236,
      57.073634862828236,
      55.727757020690646,
      47.40514048513018,
      57.073634862828236,
      54.33532013780549,
      52.63493638155481,
      57.073634862828236,
      57.073634862828236,
      57.073634862828236,
      27.92417195596707,
      57.073634862828236,
      36.80482186925031,
      53.07567666374946,
      56.530790293192766,
      57.073634862828236,
      56.6867257502998,
      57.073634862828236,
      53.234369713438355,
      25.30093343340191,
      33.6593168827472,
      51.800630765957926,
      30.129842543792613,
      57.073634862828236,
      57.073634862828236,
      54.94671708444009,
      39.16021233180416,
      56.51181528104807,
      48.10924455894984,
      22.935815250784117,
      57.073634862828236,
      52.691439219448675,
      57.073634862828236,
      56.18727402632505,
      29.25912190356837,
      57.073634862828236,
      53.737910258724106,
      55.27454539998857,
      57.073634862828236,
      49.18308767411622,
      57.073634862828236,
      20.28846318790469,
      54.335320138100975,
      49.95256894359005
    ],
    "num_parameters": 2,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}