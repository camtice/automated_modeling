{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the given task. The model should obtain the utility, (not the probability of choosing an action).  Your goal is to eventually explore the entire space of possible explainations and mechanisms by which the observed behavior arises.\n\nYour model should use the given variables appropriately, but does not necessary need to use all or even most of the variables. Do not include the model for the utility of rejecting an offer. \n\nThe model should:\n1. Predict only responder behavior.\n2. Build on relevant psychological principles.\n3. Be considerate of high covariance between learnable parameters as the model\nwill have to pass parameter recovery tests.\n4. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n5. Not include parameters to simulate general stochasticity of behavior, because this will be handled later by a temperature parameter.\n6. Should have no more than two learnable parameters.\n7. This specific model should calculate the utility of an action, which will then be used to determine\nthe probability of choosing that action. Negative values should represent a negative utility, and thus an unlikly action.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nYou will be given the complete list of models that you have already created. Analyze the models, and notice the absence of possible explanations of behaviors that should be tested. You should start with simple obvious explanations, and as you notice these being thoroughly explored you should shift to fundamentally different models of behavior. Pay less attention to the names of the variables, and how they are actually interacting with the given behavioral data.\n\nYour results will be scored on a combination of BIC with a penalization for number of learned parameters, the ability to recover those learned parameters, and the ability of those parameters to account for the differences in behaviors among varying groups of people.\n\nPrevious Models:\nModel 1:\nSpecification: U_accept = self_interest_sensitivity * split_self + fairness_weight * (splitperc_self - (token_self / (token_self + token_opp)) * 100)\nSummary: A utility model for responder behavior in a bargaining game.  The model combines the monetary gain for the responder with a fairness term, weighted by two learnable parameters: `fairness_weight` representing the relative importance of fairness, and `self_interest_sensitivity` representing the sensitivity to changes in monetary gain. The fairness term is calculated as the difference between the responder's share and a share proportional to their contribution relative to the opponent's contribution.\nModel 2:\nSpecification: U_accept =  self_interest_weight * split_self + fairness_weight * (splitperc_self - (token_self / (token_self + token_opp)) * 100)\nSummary: A utility model for responder behavior in a bargaining game. The model combines the monetary gain for the responder (split_self) with a fairness term, weighted by two learnable parameters: `self_interest_weight` and `fairness_weight`. The fairness term is calculated as the difference between the responder's percentage share and a percentage share proportional to their contribution relative to the opponent's contribution.\nModel 3:\nSpecification: U_accept = alpha * split_self - gamma * abs(splitperc_self - splitperc_opp) * abs( (token_self / (token_self + token_opp)) - (splitperc_self / (splitperc_self + splitperc_opp)) )\nSummary: A utility model for responder behavior incorporating both self-interest and inequity aversion.  Utility is a weighted sum of the responder's monetary gain and the absolute difference between their percentage share and the opponent's percentage share, further modulated by the difference between the relative contributions of tokens. The model uses two learnable parameters: `alpha` for self-interest weighting and `gamma` for inequity aversion weighting.\nModel 4:\nSpecification: U_accept =  self_interest_weight * split_self + fairness_weight * abs(split_self - (token_self / (token_self + token_opp)) * combined_earning)\nSummary: A utility model for responder acceptance decisions based on self-interest and reference-dependent fairness.  Utility is a weighted sum of the responder's monetary gain and the absolute deviation of their share from a fair share proportional to their relative contribution, calculated with respect to the total combined earnings.  The model uses two learnable parameters representing the weights for self-interest and fairness.\nModel 5:\nSpecification: U_accept = relative_gain_weight * (split_self / (3 * token_self)) - opponent_greed_sensitivity * (split_opp / (3 * token_opp))\nSummary: A utility model for responder acceptance decisions based on relative gain and opponent's perceived greed.  Utility is a weighted difference between the responder's monetary gain relative to their contribution and the opponent's monetary gain relative to their contribution. The model uses two learnable parameters: `relative_gain_weight` and `opponent_greed_sensitivity`.\nModel 6:\nSpecification: U_accept = contribution_sensitivity * (split_self / (token_self + token_opp)) * token_self + inequity_sensitivity * (splitperc_self - (token_self / (token_self + token_opp)) * 100)\nSummary: A utility model for responder acceptance decisions, weighing the monetary gain from the offer based on relative contribution to the total tokens and sensitivity to proportional inequity. The model uses two learnable parameters: `contribution_sensitivity` reflecting the importance of relative contribution and `inequity_sensitivity` representing the aversion to proportional inequity.  The utility is a weighted sum of the monetary gain adjusted by relative contribution and the deviation of the percentage share from the proportional contribution.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "learnable_parameters": {
    "self_interest_weight": {
      "description": "Weight given to the responder's own monetary gain",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "contextual_fairness_weight": {
      "description": "Weight given to contextual fairness (considering total earnings and trial type)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U_accept = self_interest_weight * split_self + contextual_fairness_weight * ( (splitperc_self - (token_self / (token_self + token_opp)) * 100) * (combined_earning / 100) * trial_type_modifier )",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "self_interest_weight": {
      "description": "Weight given to the responder's own monetary gain",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "contextual_fairness_weight": {
      "description": "Weight given to contextual fairness (considering total earnings and trial type)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "The proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "splitperc_self": {
      "description": "The proposed share for the participant (in %)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Amount of money earned in total",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "trial_type": {
      "description": "How much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]",
      "range": {
        "min": 1,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "trial_type_modifier": {
      "description": "Modifier based on trial type, scaling the fairness term.  Empirically determined.",
      "range": {
        "min": 0,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A utility model for responder acceptance decisions that incorporates self-interest and contextual fairness.  The utility is a weighted sum of the responder's monetary gain and a fairness term, where the fairness term considers the deviation from a proportional split adjusted by total earnings and a trial type modifier. The model uses two learnable parameters: self-interest_weight and contextual_fairness_weight.",
  "full_reasoning": "Let me think through this step by step...\n\nThe previous models primarily focus on fairness considerations relative to contribution and self-interest.  However, they don't explicitly consider the *context* of the offer \u2013 how much was earned in total.  A 50/50 split might be considered fair if the total earnings are low, but unfair if the total earnings are high, especially if one's contribution was significantly higher.  Additionally, none directly incorporate the trial type (equal, opponent more, participant more) which provides valuable information about the context of the offer.\n\nThis model will address this gap by incorporating a \"contextual fairness\" mechanism.  The core idea is that the perceived fairness of an offer depends not only on the proportional split, but also on the total earnings and the relative contributions in the context of the trial type.  A small deviation from a proportional split might be acceptable if the total earnings are low, but less acceptable if the total earnings are high.  The trial type helps to determine the expected fairness baseline.\n\nThe model will have two learnable parameters:\n\n1.  `contextual_fairness_weight`: This parameter governs the sensitivity to the deviation from a proportionally fair split adjusted for the total earnings and trial type.  A higher value indicates a stronger preference for contextual fairness.\n2.  `self_interest_weight`: This parameter weights the importance of the responder's own monetary gain.\n\nThe mathematical form will combine these parameters to determine the utility of accepting an offer.  The fairness component will be calculated as the deviation from a proportional split, adjusted by total earnings, and further modified based on trial type.\n\n\n<MODEL>\nU_accept = self_interest_weight * split_self + contextual_fairness_weight * ( (splitperc_self - (token_self / (token_self + token_opp)) * 100) * (combined_earning / 100) * trial_type_modifier )\n\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"self_interest_weight\": {\n      \"description\": \"Weight given to the responder's own monetary gain\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"contextual_fairness_weight\": {\n      \"description\": \"Weight given to contextual fairness (considering total earnings and trial type)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Amount of money earned in total\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type\": {\n      \"description\": \"How much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type_modifier\": {\n        \"description\": \"Modifier based on trial type, scaling the fairness term.  Empirically determined.\",\n        \"range\": {\n            \"min\": 0,\n            \"max\": 2,\n            \"inclusive_min\": true,\n            \"inclusive_max\": true\n        },\n        \"learnable\": false,\n        \"source\": \"calculated\"\n    }\n\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA utility model for responder acceptance decisions that incorporates self-interest and contextual fairness.  The utility is a weighted sum of the responder's monetary gain and a fairness term, where the fairness term considers the deviation from a proportional split adjusted by total earnings and a trial type modifier. The model uses two learnable parameters: self-interest_weight and contextual_fairness_weight.\n</SUMMARY>\n",
  "simulation_code": "def simulate_model(trial_data, self_interest_weight=1, contextual_fairness_weight=1):\n    utility_values = []\n    for trial in trial_data:\n        #Handle potential missing data gracefully\n        split_self = trial.get(\"split_self\", 0)\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        trial_type = trial.get(\"trial_type\", 1) # Default to type 1 if missing\n\n        # Calculate trial_type_modifier (example values - replace with your actual mapping)\n        if trial_type == 1:\n            trial_type_modifier = 1.0\n        elif trial_type == 2:\n            trial_type_modifier = 0.5\n        elif trial_type == 3:\n            trial_type_modifier = 1.5\n        else:\n            trial_type_modifier = 1.0  #default\n\n\n        #Avoid division by zero errors\n        if token_self + token_opp == 0:\n          proportional_share = 0\n        else:\n          proportional_share = (token_self / (token_self + token_opp)) * 100\n\n        # Calculate utility\n        utility = self_interest_weight * split_self + contextual_fairness_weight * ( (splitperc_self - proportional_share) * (combined_earning / 100) * trial_type_modifier )\n        utility_values.append(utility)\n    return utility_values",
  "fitting_results": [
    {
      "self_interest_weight": 0.0,
      "contextual_fairness_weight": 4.250212601989112,
      "success": true,
      "log_likelihood": -6.870979248191136,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.2518602019346003,
      "contextual_fairness_weight": 2.482907898046316,
      "success": true,
      "log_likelihood": -15.10423488459892,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.064811327754535,
      "contextual_fairness_weight": 1.797686795347069,
      "success": true,
      "log_likelihood": -17.250433817194054,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.1250099587552984,
      "contextual_fairness_weight": 2.589409771560304,
      "success": true,
      "log_likelihood": -15.06139862545523,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.6483988721514964,
      "contextual_fairness_weight": 1.650697264110448,
      "success": true,
      "log_likelihood": -18.562455662636456,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.055714768997938,
      "contextual_fairness_weight": 2.6115513332467004,
      "success": true,
      "log_likelihood": -12.692925423858606,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "contextual_fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228865,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.9043683331347807,
      "contextual_fairness_weight": 2.287750053703344,
      "success": true,
      "log_likelihood": -13.409794425459774,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "contextual_fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -0.0064721874752288674,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.5925513779344054,
      "contextual_fairness_weight": 4.648455172697357,
      "success": true,
      "log_likelihood": -10.814211696770919,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.592734115730618,
      "contextual_fairness_weight": 3.6520185986303395,
      "success": true,
      "log_likelihood": -12.193959437701066,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.004222736302759306,
      "contextual_fairness_weight": 3.344969006344263,
      "success": true,
      "log_likelihood": -8.977392143257774,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.5543139634351444,
      "contextual_fairness_weight": 4.236111398193196,
      "success": true,
      "log_likelihood": -11.400974778852511,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "contextual_fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228864,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "contextual_fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228864,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "contextual_fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228867,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "contextual_fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228865,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 6.132829295897562,
      "contextual_fairness_weight": 3.7273041782586818,
      "success": true,
      "log_likelihood": -3.8034823018882387,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.0172151313585207,
      "contextual_fairness_weight": 0.5654656889071416,
      "success": true,
      "log_likelihood": -9.502353214201818,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "contextual_fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228866,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.0023967189517562,
      "contextual_fairness_weight": 1.702443693031887,
      "success": true,
      "log_likelihood": -17.69157890468076,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.3855658666113326,
      "contextual_fairness_weight": 1.2068498388278697,
      "success": true,
      "log_likelihood": -9.40868810199426,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.8162161657237956,
      "contextual_fairness_weight": 2.2814959298021975,
      "success": true,
      "log_likelihood": -16.16275105351231,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.3837128982118403,
      "contextual_fairness_weight": 2.334527108616135,
      "success": true,
      "log_likelihood": -15.098530203905725,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.6327313285923623,
      "contextual_fairness_weight": 1.3986494964657274,
      "success": true,
      "log_likelihood": -19.603229721089974,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.3256407171948625,
      "contextual_fairness_weight": 1.8526334868453191,
      "success": true,
      "log_likelihood": -16.142921073031246,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 6.24653411449117,
      "contextual_fairness_weight": 10.0,
      "success": true,
      "log_likelihood": -2.6559413731076447,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.4492957519081426,
      "contextual_fairness_weight": 10.0,
      "success": true,
      "log_likelihood": -3.898547484249939,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.6017938395624494,
      "contextual_fairness_weight": 0.2632063755820197,
      "success": true,
      "log_likelihood": -10.974271466390475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.232344977420047,
      "contextual_fairness_weight": 0.7826329293869381,
      "success": true,
      "log_likelihood": -16.35464644774834,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "contextual_fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228866,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "contextual_fairness_weight": 4.25022040627516,
      "success": true,
      "log_likelihood": -6.870979248173075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.9197135469461103,
      "contextual_fairness_weight": 2.23786036676729,
      "success": true,
      "log_likelihood": -16.283034348521753,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.9408237701158662,
      "contextual_fairness_weight": 5.4795481146655,
      "success": true,
      "log_likelihood": -9.610908156469222,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "contextual_fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228865,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.3842471889289447,
      "contextual_fairness_weight": 2.623012555957919,
      "success": true,
      "log_likelihood": -11.672528243167445,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.097781934521915,
      "contextual_fairness_weight": 2.071618765157588,
      "success": true,
      "log_likelihood": -12.587844475733327,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.8501014833176317,
      "contextual_fairness_weight": 1.7245731018595527,
      "success": true,
      "log_likelihood": -18.046132681092587,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.0081527751716755,
      "contextual_fairness_weight": 1.0911965318190924,
      "success": true,
      "log_likelihood": -18.600102825586738,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.150010515580786,
      "contextual_fairness_weight": 0.6388738793461749,
      "success": true,
      "log_likelihood": -9.011318258260758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.9922338720511604,
      "contextual_fairness_weight": 1.4301423913750897,
      "success": true,
      "log_likelihood": -18.32856497579065,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.6287712349464728,
      "contextual_fairness_weight": 4.030143936211959,
      "success": true,
      "log_likelihood": -10.100145810968472,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 10.0,
      "contextual_fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -23.013701505177707,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.8673939017145313,
      "contextual_fairness_weight": 2.961788492154992,
      "success": true,
      "log_likelihood": -12.75713464200826,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.60085437058906,
      "contextual_fairness_weight": 2.0788794413672216,
      "success": true,
      "log_likelihood": -14.737750110839603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.607784525968819,
      "contextual_fairness_weight": 1.3016673454047472,
      "success": true,
      "log_likelihood": -14.454055178440669,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.051195426530671,
      "contextual_fairness_weight": 3.842075895356715,
      "success": true,
      "log_likelihood": -11.06607109416264,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.7767067221829436,
      "contextual_fairness_weight": 2.0859118321349066,
      "success": true,
      "log_likelihood": -16.8523135861423,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.6275501362090946,
      "contextual_fairness_weight": 1.9876157373918795,
      "success": true,
      "log_likelihood": -17.136246059101943,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.34417517514581736,
      "contextual_fairness_weight": 0.3575553283660684,
      "success": true,
      "log_likelihood": -23.70810143824856,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.1336762145895567,
      "contextual_fairness_weight": 0.9545284169566115,
      "success": true,
      "log_likelihood": -17.5537368170158,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "contextual_fairness_weight": 2.705805956329358,
      "success": true,
      "log_likelihood": -10.999476462290952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.2706712649817735,
      "contextual_fairness_weight": 2.0253880023276145,
      "success": true,
      "log_likelihood": -16.061490640863987,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.6888481570920763,
      "contextual_fairness_weight": 0.6672687590213578,
      "success": true,
      "log_likelihood": -21.102277382711673,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.10926712336501665,
      "contextual_fairness_weight": 0.6576268242370379,
      "success": true,
      "log_likelihood": -22.943590216384177,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.8625764092031052,
      "contextual_fairness_weight": 6.2956389631850875,
      "success": true,
      "log_likelihood": -8.870205370768122,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.9868326750424125,
      "contextual_fairness_weight": 4.3036748401962255,
      "success": true,
      "log_likelihood": -10.772148829026705,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.1376584282233722,
      "contextual_fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -13.680488206347606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "contextual_fairness_weight": 3.2917997673426664,
      "success": true,
      "log_likelihood": -9.101754384634269,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.8283276817897616,
      "contextual_fairness_weight": 1.0799961984020725,
      "success": true,
      "log_likelihood": -12.406326128732374,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.9585803463230305,
      "contextual_fairness_weight": 1.2362776866834346,
      "success": true,
      "log_likelihood": -18.80920617452517,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.0029330741166724,
      "contextual_fairness_weight": 2.0927195627089423,
      "success": true,
      "log_likelihood": -16.61768140618432,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "contextual_fairness_weight": 4.250225353207945,
      "success": true,
      "log_likelihood": -6.870979248175597,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.5122684548846839,
      "contextual_fairness_weight": 1.0159843091765526,
      "success": true,
      "log_likelihood": -21.335360669380343,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.926415461277033,
      "contextual_fairness_weight": 8.800575342573064,
      "success": true,
      "log_likelihood": -6.6594195626509896,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 3.581030237354583,
      "contextual_fairness_weight": 5.7455533233698555,
      "success": true,
      "log_likelihood": -7.386398575613813,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.452939309478814,
      "contextual_fairness_weight": 0.7901940183048332,
      "success": true,
      "log_likelihood": -7.979006769138102,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.6281523933944486,
      "contextual_fairness_weight": 0.6085425429270961,
      "success": true,
      "log_likelihood": -12.35649928876226,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.9008486413727756,
      "contextual_fairness_weight": 2.66797025400543,
      "success": true,
      "log_likelihood": -13.083857253519541,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.3560367118546894,
      "contextual_fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -11.540124489646958,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.5347539012964588,
      "contextual_fairness_weight": 10.0,
      "success": true,
      "log_likelihood": -0.8931473068771214,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.027547447409497224,
      "contextual_fairness_weight": 2.7874539559639815,
      "success": true,
      "log_likelihood": -10.8929282611294,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.040413126255499,
      "contextual_fairness_weight": 1.700244469068055,
      "success": true,
      "log_likelihood": -17.56358707136107,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.4791907519679763,
      "contextual_fairness_weight": 0.8195829178621808,
      "success": true,
      "log_likelihood": -14.305148796151142,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.5029243830400908,
      "contextual_fairness_weight": 0.9278637336198517,
      "success": true,
      "log_likelihood": -21.683243769216332,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.243958501976712,
      "contextual_fairness_weight": 2.6442194320567713,
      "success": true,
      "log_likelihood": -12.104799432911744,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.8464392870969613,
      "contextual_fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -7.884388686839371,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "contextual_fairness_weight": 2.4341852289988304,
      "success": true,
      "log_likelihood": -12.057510420346109,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.5714104641370659,
      "contextual_fairness_weight": 0.43566301468546315,
      "success": true,
      "log_likelihood": -21.991299824527037,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "contextual_fairness_weight": 4.250221653315681,
      "success": true,
      "log_likelihood": -6.870979248172691,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.47411389240115004,
      "contextual_fairness_weight": 0.764942241960748,
      "success": true,
      "log_likelihood": -22.305830890563044,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.3338941414214998,
      "contextual_fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -11.74186065422336,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.0,
      "contextual_fairness_weight": 2.250450047836802,
      "success": true,
      "log_likelihood": -12.847227247317388,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.211865209567358,
      "contextual_fairness_weight": 3.607904880876701,
      "success": true,
      "log_likelihood": -11.132478583312242,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.3489659340766597,
      "contextual_fairness_weight": 0.28655003266712803,
      "success": true,
      "log_likelihood": -23.682243757153277,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.21173167396884393,
      "contextual_fairness_weight": 6.53028007420334,
      "success": true,
      "log_likelihood": -4.483335135049575,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.9073707560335329,
      "contextual_fairness_weight": 0.7314949127548288,
      "success": true,
      "log_likelihood": -19.24543399186103,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.09607237673138726,
      "contextual_fairness_weight": 1.8602148912799854,
      "success": true,
      "log_likelihood": -15.493863558229352,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 2.0887625263819114,
      "contextual_fairness_weight": 0.0,
      "success": true,
      "log_likelihood": -6.560712655499419,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 1.5893084608409775,
      "contextual_fairness_weight": 2.6285393026725252,
      "success": true,
      "log_likelihood": -13.98669939175852,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    },
    {
      "self_interest_weight": 0.7022727829981363,
      "contextual_fairness_weight": 0.4251193206985084,
      "success": true,
      "log_likelihood": -20.700555537104197,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "self_interest_weight": {
        "r": 0.8782878439417151,
        "p": 3.597604786490602e-33
      },
      "contextual_fairness_weight": {
        "r": 0.8174049623578233,
        "p": 3.2865766332845374e-25
      }
    }
  },
  "bic_results": {
    "average_bic": 31.41073427055872,
    "individual_bics": [
      20.908996373294492,
      37.37550764611006,
      41.667905511300326,
      37.28983512782268,
      44.29194920218513,
      32.55288872462943,
      7.179982251862677,
      33.98662672783177,
      7.179982251862677,
      28.795461270454055,
      31.554956752314354,
      25.121822163427765,
      29.96898743461724,
      7.179982251862677,
      7.179982251862677,
      7.179982251862677,
      7.179982251862677,
      14.774002480688697,
      26.171744305315855,
      7.179982251862677,
      42.55019568627374,
      25.98441408090074,
      39.49253998393684,
      37.36409828472367,
      46.373497319092166,
      39.45288002297471,
      12.47892062312751,
      14.964132845412099,
      29.11558080969317,
      39.8763307724089,
      7.179982251862677,
      20.90899637325837,
      39.73310657395572,
      26.38885418985066,
      7.179982251862677,
      30.512094363247108,
      32.34272682837887,
      43.25930323909739,
      44.367243528085694,
      25.189674393433734,
      43.824167828493515,
      27.367329498849166,
      53.19444088726763,
      32.68130716092874,
      36.64253809859142,
      36.075148233793556,
      29.2991800652375,
      40.87166504919682,
      41.439529995116104,
      54.583240753409335,
      42.27451151094382,
      29.165990801494125,
      39.29001915864019,
      49.371592642335564,
      53.05421830968057,
      24.907448618448463,
      28.711335534965627,
      34.528014289607434,
      25.370546646180756,
      31.979690134376966,
      44.785450225962556,
      40.40240068928086,
      20.908996373263413,
      49.837759215672904,
      20.4858770022142,
      21.939835028139846,
      23.125051415188423,
      31.88003645443674,
      33.334752383951304,
      30.247286856206138,
      8.953332490666462,
      28.952894399171022,
      42.29421201963436,
      35.777335469214506,
      50.53352541534488,
      31.376636742735705,
      22.935815250590963,
      31.282058717604436,
      51.14963752596629,
      20.9089963732576,
      51.778699658038306,
      30.650759185358943,
      32.861492371546994,
      29.431995043536702,
      54.53152539121877,
      16.13370814701137,
      45.65790586063428,
      38.154764993370925,
      20.288463187911056,
      35.14043666042926,
      48.56814895112061
    ],
    "num_parameters": 2,
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n)"
  }
}