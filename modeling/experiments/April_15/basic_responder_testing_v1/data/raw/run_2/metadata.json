{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable parameters. Specifically, try to think about parameters that impact different aspects of the utility function.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions, especially non-linear relationships\n* What parameters would be needed to calibrate the model, focusing on parameters that are not highly correlated\n* How the model variables map to observable behavior\n\nConsider the following when designing your model:\n\n*   **Non-linear Utility:** Explore models where utility is not a simple linear combination of factors. Consider diminishing sensitivity to fairness, where the impact of unfairness is smaller at larger deviations from the fair split using a nonlinear function such as log or exponential function.\n*   **Interaction Effects:** Investigate interactions between fairness and combined earnings. For example, the influence of fairness may be amplified when combined earnings are low, and attenuated when earnings are high.\n*   **Loss Aversion:** Incorporate a loss aversion parameter that differentially weights gains and losses relative to a reference point (e.g., the fair split).\n*   **Proposer Intentions/Trust:** Model the impact of proposer behavior (e.g., how much they proposed for themselves) on responder decisions. Consider that extremely unfair divisions could be seen as aggressive actions rather than simply unfair.\n*   **Individual Differences:** While aiming for parsimony, consider if a more complex model with additional parameters could better capture individual differences in fairness preferences or other psychological factors.\n*   **Anchoring Bias:** The initial split_opp might act as an anchor, influencing the perception of split_self. Explore models that incorporate this anchoring effect.\n\nWhen deciding on your model, aim for the highest accuracy while maintaining parameter recovery (r > 0.7 is ideal for all parameters). A lower BIC is also desirable, but not at the cost of accuracy or parameter recovery.\n</think>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable parameters. Specifically, try to think about parameters that impact different aspects of the utility function.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions, especially non-linear relationships\n* What parameters would be needed to calibrate the model, focusing on parameters that are not highly correlated\n* How the model variables map to observable behavior\n\nConsider the following when designing your model:\n\n*   **Non-linear Utility:** Explore models where utility is not a simple linear combination of factors. Consider diminishing sensitivity to fairness, where the impact of unfairness is smaller at larger deviations from the fair split using a nonlinear function such as log or exponential function.\n*   **Interaction Effects:** Investigate interactions between fairness and combined earnings. For example, the influence of fairness may be amplified when combined earnings are low, and attenuated when earnings are high.\n*   **Loss Aversion:** Incorporate a loss aversion parameter that differentially weights gains and losses relative to a reference point (e.g., the fair split).\n*   **Proposer Intentions/Trust:** Model the impact of proposer behavior (e.g., how much they proposed for themselves) on responder decisions. Consider that extremely unfair divisions could be seen as aggressive actions rather than simply unfair.\n*   **Individual Differences:** While aiming for parsimony, consider if a more complex model with additional parameters could better capture individual differences in fairness preferences or other psychological factors.\n*   **Anchoring Bias:** The initial split_opp might act as an anchor, influencing the perception of split_self. Explore models that incorporate this anchoring effect.\n\nWhen deciding on your model, aim for the highest accuracy while maintaining parameter recovery (r > 0.7 is ideal for all parameters). A lower BIC is also desirable, but not at the cost of accuracy or parameter recovery.\n</think>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, let's break down this ultimatum game scenario and design a computational model for responder behavior. The goal is to predict acceptance/rejection of offers, focusing on fairness, combined earnings, and potential interaction effects while prioritizing parameter identifiability.\n\n**1. Key Psychological Mechanisms:**\n\n*   **Fairness:** Responders evaluate the fairness of the proposed split. This is central to the task.\n*   **Combined Earnings:** The total amount of money at stake influences decisions. A small unfairness might be tolerated for a large overall gain.\n*   **Loss Aversion:** People are more sensitive to losses than to gains of the same magnitude.\n*   **Proposer Intentions/Trust:** The proposer's offer (how much they keep) can signal their intentions and influence trust, impacting the responder's decision.\n*   **Anchoring Bias**: The initial offer made by the proposer can act as an anchor.\n\n**2. How these Mechanisms Interact:**\n\n*   Fairness and combined earnings interact: The importance of fairness might be amplified when the stakes (combined earnings) are low. Conversely, a small degree of unfairness could be tolerated if combined earnings are high.\n*   Loss aversion and fairness: A proposal that gives the responder less than a \"fair\" share can be perceived as a loss relative to the reference point of fairness.\n*   Proposer intentions and fairness: An extremely unfair split by the proposer may trigger a stronger negative reaction than a slightly unfair split.\n\n**3. Mathematical Form:**\n\nI will start with a model incorporating a fairness term, a loss aversion parameter, and an earnings sensitivity term. The fairness term will be non-linear to account for decreasing sensitivity to unfairness as unfairness increases. I will also incorporate an anchoring effect. I will use a log transformation for the fairness term and a standard loss aversion specification. I will also include the proportion kept by the other player in the trial, but will downweight it to allow for some tolerance of unfairness.\n\n**4. Parameters:**\n\n*   `alpha`: Sensitivity to fairness (learnable, positive).\n*   `lambda_loss`: Loss aversion coefficient (learnable, >= 1).\n*   `gamma`: Sensitivity to combined earnings (learnable, positive).\n*   `delta`: The degree to which the proposer offer anchors the responder, scaled between -1 and 1. This variable is learnable.\n* `baseline`: A baseline parameter, representing the utility if all variables are zero.\n\n**5. Model Variables and Observable Behavior:**\n\n*   `token_self`, `token_opp`, `combined_earning`, `split_self`, `split_opp`: Directly from the data.\n*   `accept`: The binary outcome we want to predict (responder behavior).\n\nNow, let's create the model specification:\n\n```xml\n<MODEL>\nU = baseline + gamma * combined_earning + alpha * log(max(1e-6, fair_split - split_self + delta * (split_self - split_opp)))*I(split_self < fair_split) * lambda_loss + alpha * log(max(1e-6, split_self - fair_split))*I(split_self >= fair_split)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity to fairness\",\n      \"range\": {\n        \"min\": 0.001,\n        \"max\": 20\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_loss\": {\n      \"description\": \"Loss aversion coefficient\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity to combined earnings\",\n      \"range\": {\n        \"min\": 0.00001,\n        \"max\": 0.1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n     \"delta\": {\n      \"description\": \"Anchoring Parameter\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"baseline\": {\n      \"description\": \"Baseline utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Amount of money earned in total\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"The proposed share of the opponent (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_split\": {\n      \"description\": \"The fair split calculated by combined earning divided by 2\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n        \"I\": {\n      \"description\": \"Indicator function; 1 if true, 0 if false\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nThis model predicts the utility of accepting an offer in an ultimatum game, considering fairness, loss aversion, the combined earnings, and a baseline parameter. Fairness is modeled using a logarithmic function to account for decreasing sensitivity to unfairness. Loss aversion amplifies the negative impact of offers below the fair split. Sensitivity to combined earnings scales the overall impact of the earnings amount. The model includes a baseline utility term and an anchoring parameter, reflecting the influence of the opponent's offer on the responder's perception of fairness.\n</SUMMARY>\n```\n"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'lambda_loss', 'gamma', 'delta', 'baseline']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = baseline + gamma * combined_earning + alpha * log(max(1e-6, fair_split - split_self + delta * (split_self - split_opp)))*I(split_self < fair_split) * lambda_loss + alpha * log(max(1e-6, split_self - fair_split))*I(split_self >= fair_split)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity to fairness\",\n      \"range\": {\n        \"min\": 0.001,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_loss\": {\n      \"description\": \"Loss aversion coefficient\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity to combined earnings\",\n      \"range\": {\n        \"min\": 1e-05,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta\": {\n      \"description\": \"Anchoring Parameter\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"baseline\": {\n      \"description\": \"Baseline utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Amount of money earned in total\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"The proposed share of the opponent (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_split\": {\n      \"description\": \"The fair split calculated by combined earning divided by 2\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"I\": {\n      \"description\": \"Indicator function; 1 if true, 0 if false\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=1, lambda_loss=1, gamma=0.01, delta=0, baseline=0):\n    model_predictions = []\n    for trial in trial_data:\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        split_opp = trial.get(\"split_opp\", 0)\n\n        fair_split = combined_earning / 2.0\n\n        # Indicator function for split_self < fair_split\n        I_below = 1 if split_self < fair_split else 0\n\n        # Indicator function for split_self >= fair_split\n        I_above = 1 if split_self >= fair_split else 0\n\n        # Utility calculation\n        term1 = baseline\n        term2 = gamma * combined_earning\n        term3 = alpha * math.log(max(1e-6, fair_split - split_self + delta * (split_self - split_opp))) * I_below * lambda_loss if I_below == 1 else 0\n        term4 = alpha * math.log(max(1e-6, split_self - fair_split)) * I_above if I_above == 1 else 0\n\n        U = term1 + term2 + term3 + term4\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744713589.69221
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Sensitivity to fairness",
      "range": {
        "min": 0.001,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda_loss": {
      "description": "Loss aversion coefficient",
      "range": {
        "min": 1,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity to combined earnings",
      "range": {
        "min": 1e-05,
        "max": 0.1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "delta": {
      "description": "Anchoring Parameter",
      "range": {
        "min": -1,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "baseline": {
      "description": "Baseline utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = baseline + gamma * combined_earning + alpha * log(max(1e-6, fair_split - split_self + delta * (split_self - split_opp)))*I(split_self < fair_split) * lambda_loss + alpha * log(max(1e-6, split_self - fair_split))*I(split_self >= fair_split)",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Sensitivity to fairness",
      "range": {
        "min": 0.001,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda_loss": {
      "description": "Loss aversion coefficient",
      "range": {
        "min": 1,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity to combined earnings",
      "range": {
        "min": 1e-05,
        "max": 0.1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "delta": {
      "description": "Anchoring Parameter",
      "range": {
        "min": -1,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "baseline": {
      "description": "Baseline utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "combined_earning": {
      "description": "Amount of money earned in total",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_opp": {
      "description": "The proposed share of the opponent (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "fair_split": {
      "description": "The fair split calculated by combined earning divided by 2",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "I": {
      "description": "Indicator function; 1 if true, 0 if false",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "This model predicts the utility of accepting an offer in an ultimatum game, considering fairness, loss aversion, the combined earnings, and a baseline parameter. Fairness is modeled using a logarithmic function to account for decreasing sensitivity to unfairness. Loss aversion amplifies the negative impact of offers below the fair split. Sensitivity to combined earnings scales the overall impact of the earnings amount. The model includes a baseline utility term and an anchoring parameter, reflecting the influence of the opponent's offer on the responder's perception of fairness.",
  "target_variable": "accept",
  "full_reasoning": "Okay, let's break down this ultimatum game scenario and design a computational model for responder behavior. The goal is to predict acceptance/rejection of offers, focusing on fairness, combined earnings, and potential interaction effects while prioritizing parameter identifiability.\n\n**1. Key Psychological Mechanisms:**\n\n*   **Fairness:** Responders evaluate the fairness of the proposed split. This is central to the task.\n*   **Combined Earnings:** The total amount of money at stake influences decisions. A small unfairness might be tolerated for a large overall gain.\n*   **Loss Aversion:** People are more sensitive to losses than to gains of the same magnitude.\n*   **Proposer Intentions/Trust:** The proposer's offer (how much they keep) can signal their intentions and influence trust, impacting the responder's decision.\n*   **Anchoring Bias**: The initial offer made by the proposer can act as an anchor.\n\n**2. How these Mechanisms Interact:**\n\n*   Fairness and combined earnings interact: The importance of fairness might be amplified when the stakes (combined earnings) are low. Conversely, a small degree of unfairness could be tolerated if combined earnings are high.\n*   Loss aversion and fairness: A proposal that gives the responder less than a \"fair\" share can be perceived as a loss relative to the reference point of fairness.\n*   Proposer intentions and fairness: An extremely unfair split by the proposer may trigger a stronger negative reaction than a slightly unfair split.\n\n**3. Mathematical Form:**\n\nI will start with a model incorporating a fairness term, a loss aversion parameter, and an earnings sensitivity term. The fairness term will be non-linear to account for decreasing sensitivity to unfairness as unfairness increases. I will also incorporate an anchoring effect. I will use a log transformation for the fairness term and a standard loss aversion specification. I will also include the proportion kept by the other player in the trial, but will downweight it to allow for some tolerance of unfairness.\n\n**4. Parameters:**\n\n*   `alpha`: Sensitivity to fairness (learnable, positive).\n*   `lambda_loss`: Loss aversion coefficient (learnable, >= 1).\n*   `gamma`: Sensitivity to combined earnings (learnable, positive).\n*   `delta`: The degree to which the proposer offer anchors the responder, scaled between -1 and 1. This variable is learnable.\n* `baseline`: A baseline parameter, representing the utility if all variables are zero.\n\n**5. Model Variables and Observable Behavior:**\n\n*   `token_self`, `token_opp`, `combined_earning`, `split_self`, `split_opp`: Directly from the data.\n*   `accept`: The binary outcome we want to predict (responder behavior).\n\nNow, let's create the model specification:\n\n```xml\n<MODEL>\nU = baseline + gamma * combined_earning + alpha * log(max(1e-6, fair_split - split_self + delta * (split_self - split_opp)))*I(split_self < fair_split) * lambda_loss + alpha * log(max(1e-6, split_self - fair_split))*I(split_self >= fair_split)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity to fairness\",\n      \"range\": {\n        \"min\": 0.001,\n        \"max\": 20\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_loss\": {\n      \"description\": \"Loss aversion coefficient\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity to combined earnings\",\n      \"range\": {\n        \"min\": 0.00001,\n        \"max\": 0.1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n     \"delta\": {\n      \"description\": \"Anchoring Parameter\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"baseline\": {\n      \"description\": \"Baseline utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Amount of money earned in total\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"The proposed share of the opponent (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_split\": {\n      \"description\": \"The fair split calculated by combined earning divided by 2\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n        \"I\": {\n      \"description\": \"Indicator function; 1 if true, 0 if false\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nThis model predicts the utility of accepting an offer in an ultimatum game, considering fairness, loss aversion, the combined earnings, and a baseline parameter. Fairness is modeled using a logarithmic function to account for decreasing sensitivity to unfairness. Loss aversion amplifies the negative impact of offers below the fair split. Sensitivity to combined earnings scales the overall impact of the earnings amount. The model includes a baseline utility term and an anchoring parameter, reflecting the influence of the opponent's offer on the responder's perception of fairness.\n</SUMMARY>\n```\n",
  "prediction_type": "utility",
  "current_model": "Specification: U = baseline + gamma * combined_earning + alpha * log(max(1e-6, fair_split - split_self + delta * (split_self - split_opp)))*I(split_self < fair_split) * lambda_loss + alpha * log(max(1e-6, split_self - fair_split))*I(split_self >= fair_split)\nSummary: This model predicts the utility of accepting an offer in an ultimatum game, considering fairness, loss aversion, the combined earnings, and a baseline parameter. Fairness is modeled using a logarithmic function to account for decreasing sensitivity to unfairness. Loss aversion amplifies the negative impact of offers below the fair split. Sensitivity to combined earnings scales the overall impact of the earnings amount. The model includes a baseline utility term and an anchoring parameter, reflecting the influence of the opponent's offer on the responder's perception of fairness.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=1, lambda_loss=1, gamma=0.01, delta=0, baseline=0):\n    model_predictions = []\n    for trial in trial_data:\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        split_opp = trial.get(\"split_opp\", 0)\n\n        fair_split = combined_earning / 2.0\n\n        # Indicator function for split_self < fair_split\n        I_below = 1 if split_self < fair_split else 0\n\n        # Indicator function for split_self >= fair_split\n        I_above = 1 if split_self >= fair_split else 0\n\n        # Utility calculation\n        term1 = baseline\n        term2 = gamma * combined_earning\n        term3 = alpha * math.log(max(1e-6, fair_split - split_self + delta * (split_self - split_opp))) * I_below * lambda_loss if I_below == 1 else 0\n        term4 = alpha * math.log(max(1e-6, split_self - fair_split)) * I_above if I_above == 1 else 0\n\n        U = term1 + term2 + term3 + term4\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6807081807081807,
  "fitting_results": [
    {
      "alpha": 0.17767109489288013,
      "lambda_loss": 10.0,
      "gamma": 0.1,
      "delta": 1.0,
      "baseline": 10.0,
      "success": true,
      "log_likelihood": -0.0005728932313583822,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.001,
      "lambda_loss": 1.0,
      "gamma": 1e-05,
      "delta": -0.9584428690662823,
      "baseline": -0.0007110545790599953,
      "success": true,
      "log_likelihood": -24.981181325881902,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.001002445228502879,
      "lambda_loss": 1.0003209665944235,
      "gamma": 1e-05,
      "delta": 1.0,
      "baseline": 0.12498107916150542,
      "success": true,
      "log_likelihood": -24.897708034368037,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.10872436369665277,
      "lambda_loss": 1.1484406073288886,
      "gamma": 0.0801862160908898,
      "delta": 1.0,
      "baseline": 0.30469939480235964,
      "success": true,
      "log_likelihood": -23.97148918456388,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.1317075819700463,
      "lambda_loss": 5.732491304925525,
      "gamma": 1e-05,
      "delta": 0.5002928559713872,
      "baseline": 10.0,
      "success": true,
      "log_likelihood": -22.126662466804476,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.198757994514937,
      "lambda_loss": 3.4841491736782273,
      "gamma": 1e-05,
      "delta": 0.8691248313951092,
      "baseline": 10.0,
      "success": true,
      "log_likelihood": -22.127990039277893,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.02233289621695739,
      "lambda_loss": 1.0064103018763495,
      "gamma": 0.1,
      "delta": -1.0,
      "baseline": 10.0,
      "success": true,
      "log_likelihood": -0.0005193826848207235,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 13.633645754659002,
      "lambda_loss": 6.250073269861798,
      "gamma": 0.1,
      "delta": -1.0,
      "baseline": -1.8284624325976435,
      "success": true,
      "log_likelihood": -345.38776394700704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.02174389022116347,
      "lambda_loss": 1.000747474993614,
      "gamma": 0.1,
      "delta": -1.0,
      "baseline": 10.0,
      "success": true,
      "log_likelihood": -0.0005194858066516969,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.10792117852892627,
      "lambda_loss": 7.171932302838409,
      "gamma": 1e-05,
      "delta": 0.5078254769821378,
      "baseline": 10.0,
      "success": true,
      "log_likelihood": -21.005632346074478,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 17.245184377273176,
      "lambda_loss": 1.0,
      "gamma": 1e-05,
      "delta": 1.0,
      "baseline": 3.7576717600907603,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.058433764435328,
      "lambda_loss": 2.3600217741684473,
      "gamma": 0.06451502746555454,
      "delta": 0.6899809123360212,
      "baseline": 2.9362156066321248,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0010018121169424385,
      "lambda_loss": 1.0001230752569883,
      "gamma": 1e-05,
      "delta": 1.0,
      "baseline": -0.3227534767960491,
      "success": true,
      "log_likelihood": -24.45107459279461,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0034923730295379424,
      "lambda_loss": 1.0001804396774718,
      "gamma": 0.1,
      "delta": -1.0,
      "baseline": 10.0,
      "success": true,
      "log_likelihood": -0.0005215412277018727,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.239769370028613,
      "lambda_loss": 3.360388475458524,
      "gamma": 0.057135076212411984,
      "delta": -0.796220186699793,
      "baseline": 4.614117005313971,
      "success": true,
      "log_likelihood": -69.07755573508692,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.965384519969001,
      "lambda_loss": 1.0,
      "gamma": 0.1,
      "delta": -1.0,
      "baseline": 10.0,
      "success": true,
      "log_likelihood": -69.07755366032933,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 12.91635755412636,
      "lambda_loss": 7.537316372421368,
      "gamma": 0.1,
      "delta": -1.0,
      "baseline": -3.2217966488181613,
      "success": true,
      "log_likelihood": -69.07755278652134,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.1674203369718484,
      "lambda_loss": 3.892223991188486,
      "gamma": 0.06172387727595297,
      "delta": 1.0,
      "baseline": 10.0,
      "success": true,
      "log_likelihood": -13.944131022959828,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.001,
      "lambda_loss": 1.0,
      "gamma": 1e-05,
      "delta": -0.999999556970487,
      "baseline": 2.0787484203701636,
      "success": true,
      "log_likelihood": -12.565623289332306,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 11.416215837863122,
      "lambda_loss": 1.0707480585179179,
      "gamma": 0.1,
      "delta": -1.0,
      "baseline": 1.4308943429471694,
      "success": true,
      "log_likelihood": -69.07765329483759,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.001,
      "lambda_loss": 7.420190485570908,
      "gamma": 0.01936886886392688,
      "delta": -0.9999999673905035,
      "baseline": 0.0009342962036064476,
      "success": true,
      "log_likelihood": -25.057004883097672,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.001,
      "lambda_loss": 1.0,
      "gamma": 1e-05,
      "delta": -0.9997813017447444,
      "baseline": 1.8238255094856577,
      "success": true,
      "log_likelihood": -14.515462218144917,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.001,
      "lambda_loss": 3.5595808326246154,
      "gamma": 0.030058663679440756,
      "delta": -0.8271851320570742,
      "baseline": -0.9376321862179232,
      "success": true,
      "log_likelihood": -23.55615134171973,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.001,
      "lambda_loss": 1.0,
      "gamma": 0.00028065121053435425,
      "delta": 0.3887568679166035,
      "baseline": 0.10950485363148929,
      "success": true,
      "log_likelihood": -24.92058201594534,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.1501309511357289,
      "lambda_loss": 4.909219294037575,
      "gamma": 1e-05,
      "delta": 1.0,
      "baseline": 10.0,
      "success": true,
      "log_likelihood": -22.73853838629776,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.001,
      "lambda_loss": 1.0003272486713097,
      "gamma": 0.02855758614707143,
      "delta": 1.0,
      "baseline": 0.008239213105485567,
      "success": true,
      "log_likelihood": -24.40806205543886,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.001,
      "lambda_loss": 1.0276569236990936,
      "gamma": 1e-05,
      "delta": 0.19832591244742606,
      "baseline": 0.22382501977734914,
      "success": true,
      "log_likelihood": -24.756071182099177,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.25770649097788906,
      "lambda_loss": 3.1772651788527293,
      "gamma": 1e-05,
      "delta": 1.0,
      "baseline": 10.0,
      "success": true,
      "log_likelihood": -17.057715032927383,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.001,
      "lambda_loss": 1.0,
      "gamma": 1e-05,
      "delta": -0.867406827049983,
      "baseline": 2.078784004768036,
      "success": true,
      "log_likelihood": -12.565081215558443,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 16.52178424195083,
      "lambda_loss": 8.247853578612071,
      "gamma": 0.1,
      "delta": -1.0,
      "baseline": 3.217351319305941,
      "success": true,
      "log_likelihood": -253.28436022684514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 15.372897058440488,
      "lambda_loss": 1.0000000057344085,
      "gamma": 0.1,
      "delta": -1.0,
      "baseline": 4.033647122560459,
      "success": true,
      "log_likelihood": -69.07755394698627,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 16.32613278033559,
      "lambda_loss": 2.73234625380963,
      "gamma": 0.08615298014960517,
      "delta": 0.8643645849769628,
      "baseline": -3.8693590233066955,
      "success": true,
      "log_likelihood": -69.07755278652138,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.31636751448286393,
      "lambda_loss": 2.316009008753389,
      "gamma": 1e-05,
      "delta": 1.0,
      "baseline": 9.558639843082526,
      "success": true,
      "log_likelihood": -21.647705217102224,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0011560463742566838,
      "lambda_loss": 1.0007654265367085,
      "gamma": 1e-05,
      "delta": 1.0,
      "baseline": -0.43612147029929776,
      "success": true,
      "log_likelihood": -24.056982781573474,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.08131306418071521,
      "lambda_loss": 10.0,
      "gamma": 0.1,
      "delta": -1.0,
      "baseline": 10.0,
      "success": true,
      "log_likelihood": -0.0002582414606886055,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.001,
      "lambda_loss": 1.0,
      "gamma": 0.1,
      "delta": -0.8760484703352169,
      "baseline": -0.6134380463614294,
      "success": true,
      "log_likelihood": -22.861626424539352,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.001,
      "lambda_loss": 1.0,
      "gamma": 1e-05,
      "delta": 0.2083115988775291,
      "baseline": 0.8217392056505708,
      "success": true,
      "log_likelihood": -22.175541527691554,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0010131431797305625,
      "lambda_loss": 1.000168649476262,
      "gamma": 1e-05,
      "delta": 1.0,
      "baseline": 0.013878721129754877,
      "success": true,
      "log_likelihood": -24.95338495745829,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.001,
      "lambda_loss": 1.151157582489549,
      "gamma": 1e-05,
      "delta": -0.10080238213725672,
      "baseline": 0.6931074534382872,
      "success": true,
      "log_likelihood": -22.93382772421251,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.3844907484727615,
      "lambda_loss": 9.198002873466237,
      "gamma": 0.1,
      "delta": -1.0,
      "baseline": -6.814680259353985,
      "success": true,
      "log_likelihood": -138.15510560200744,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.001,
      "lambda_loss": 1.0,
      "gamma": 1e-05,
      "delta": -0.3806522503710122,
      "baseline": 0.45172138391709726,
      "success": true,
      "log_likelihood": -24.08004572316622,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.001,
      "lambda_loss": 1.0000173128507257,
      "gamma": 1e-05,
      "delta": 1.0,
      "baseline": -1.2388726088843123,
      "success": true,
      "log_likelihood": -19.069422961550707,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.001,
      "lambda_loss": 1.0,
      "gamma": 1e-05,
      "delta": -0.32562899493729347,
      "baseline": 3.5551745022380286,
      "success": true,
      "log_likelihood": -4.571281539677958,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.001,
      "lambda_loss": 1.0977933828922217,
      "gamma": 0.03204443724418684,
      "delta": -0.2971751832709678,
      "baseline": -0.10878561973639746,
      "success": true,
      "log_likelihood": -25.016423937025955,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.964143379368842,
      "lambda_loss": 4.162773113402988,
      "gamma": 0.01455015035042241,
      "delta": -0.4743433560443846,
      "baseline": 8.501488557474872,
      "success": true,
      "log_likelihood": -391.43946595540905,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.2531320352998794,
      "lambda_loss": 2.880043049024968,
      "gamma": 0.07594697359158488,
      "delta": 0.5002434022919208,
      "baseline": 9.999833267303048,
      "success": true,
      "log_likelihood": -20.018881463545345,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.406197594097206,
      "lambda_loss": 1.975781004429639,
      "gamma": 0.03463004918122466,
      "delta": 0.9457634262058374,
      "baseline": -3.027158284983276,
      "success": true,
      "log_likelihood": -437.49116766716884,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 14.874112726960808,
      "lambda_loss": 8.45016080283547,
      "gamma": 0.013801735834340132,
      "delta": -0.876553932310268,
      "baseline": -9.468171297091175,
      "success": true,
      "log_likelihood": -575.6462732474116,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.2921581361240047,
      "lambda_loss": 2.4702949753793564,
      "gamma": 1e-05,
      "delta": 1.0,
      "baseline": 9.406835706861683,
      "success": true,
      "log_likelihood": -21.645040659831814,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.412043609217151,
      "lambda_loss": 6.914412050320383,
      "gamma": 0.028060569021594213,
      "delta": 0.6148848461311773,
      "baseline": -6.241697526178049,
      "success": true,
      "log_likelihood": -437.4911676671689,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.001,
      "lambda_loss": 5.361850028249945,
      "gamma": 1e-05,
      "delta": -0.9904680186359827,
      "baseline": 0.8128644783494632,
      "success": true,
      "log_likelihood": -22.196605256169878,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.828962884734525,
      "lambda_loss": 2.859547842355421,
      "gamma": 1e-05,
      "delta": 1.0,
      "baseline": -10.0,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.001,
      "lambda_loss": 1.0,
      "gamma": 3.084952323912292e-05,
      "delta": -0.13838079304509168,
      "baseline": 0.1067396268803065,
      "success": true,
      "log_likelihood": -24.923057165682124,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.026708746362791306,
      "lambda_loss": 9.997027002415516,
      "gamma": 0.1,
      "delta": 1.0,
      "baseline": 2.6635345302447035,
      "success": true,
      "log_likelihood": -22.099783565199946,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0010123774258648274,
      "lambda_loss": 1.0001830739174742,
      "gamma": 0.05880940985517742,
      "delta": 1.0,
      "baseline": -1.1483200069937862,
      "success": true,
      "log_likelihood": -23.881047940108704,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.966253330527687,
      "lambda_loss": 8.504262390520353,
      "gamma": 0.02303013520641276,
      "delta": 0.6823705248799017,
      "baseline": -3.962084714606597,
      "success": true,
      "log_likelihood": -276.31021115688554,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0010085081714960864,
      "lambda_loss": 1.0003625147077033,
      "gamma": 1e-05,
      "delta": 1.0,
      "baseline": -0.9416839972067373,
      "success": true,
      "log_likelihood": -21.270369919707672,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.07761612992531304,
      "lambda_loss": 7.917521993975231,
      "gamma": 0.1,
      "delta": 0.568852487025366,
      "baseline": 9.313885878562356,
      "success": true,
      "log_likelihood": -11.789743775986619,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.09564097112260204,
      "lambda_loss": 9.999984372387313,
      "gamma": 1e-05,
      "delta": 0.5000498017113304,
      "baseline": 9.747491740003577,
      "success": true,
      "log_likelihood": -4.481857666052122,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.001,
      "lambda_loss": 1.0,
      "gamma": 0.04440106147300994,
      "delta": -0.9999928304537541,
      "baseline": 0.8952373242127597,
      "success": true,
      "log_likelihood": -17.679066217745156,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.23677184367177606,
      "lambda_loss": 2.9636875088823906,
      "gamma": 1e-05,
      "delta": 1.0,
      "baseline": 10.0,
      "success": true,
      "log_likelihood": -22.497281452482163,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7373990192630497,
      "lambda_loss": 2.562332636208039,
      "gamma": 0.004159481430079834,
      "delta": 0.7073150540153672,
      "baseline": -9.104436326303828,
      "success": true,
      "log_likelihood": -414.46518477287407,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.17807803782861392,
      "lambda_loss": 10.0,
      "gamma": 0.1,
      "delta": 1.0,
      "baseline": 10.0,
      "success": true,
      "log_likelihood": -0.000572757826082448,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.06974719744754629,
      "lambda_loss": 9.680612380277804,
      "gamma": 0.06736199177961741,
      "delta": 0.6284061548521671,
      "baseline": 8.083671823869416,
      "success": true,
      "log_likelihood": -21.92621034259857,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.696221740612978,
      "lambda_loss": 7.955368301319547,
      "gamma": 0.08987513640605096,
      "delta": 0.9012974479212423,
      "baseline": -7.735505664070958,
      "success": true,
      "log_likelihood": -184.2068074339544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.289339697347962,
      "lambda_loss": 4.713787470517608,
      "gamma": 0.05752425437399305,
      "delta": 0.7198337946033313,
      "baseline": -1.5854914401062477,
      "success": true,
      "log_likelihood": -460.5170185969772,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.20305964124862555,
      "lambda_loss": 2.3757062813488656,
      "gamma": 1e-05,
      "delta": 1.0,
      "baseline": 8.967124600766454,
      "success": true,
      "log_likelihood": -10.059369466874367,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 14.08487798484426,
      "lambda_loss": 6.683517943072723,
      "gamma": 0.1,
      "delta": -1.0,
      "baseline": -1.186505464188091,
      "success": true,
      "log_likelihood": -184.20680743672364,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.09885308814156889,
      "lambda_loss": 7.9329419580810825,
      "gamma": 0.1,
      "delta": 0.7345995110656816,
      "baseline": 9.695994419817445,
      "success": true,
      "log_likelihood": -22.12699004984154,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.001,
      "lambda_loss": 1.0,
      "gamma": 1e-05,
      "delta": -0.9981457489128573,
      "baseline": 2.3971679725538206,
      "success": true,
      "log_likelihood": -10.330247376337493,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.042792061450811165,
      "lambda_loss": 6.93069834081047,
      "gamma": 0.09383481158579057,
      "delta": 1.0,
      "baseline": 0.1870670902079694,
      "success": true,
      "log_likelihood": -9.316333025047104,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0010368893294252575,
      "lambda_loss": 1.000356729801924,
      "gamma": 0.04500331004067802,
      "delta": 1.0,
      "baseline": -2.2654411080170433,
      "success": true,
      "log_likelihood": -14.712318101428409,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.1815628139577847,
      "lambda_loss": 4.286513706384811,
      "gamma": 0.007657897299165012,
      "delta": 0.9585820848667825,
      "baseline": -7.4637925148860695,
      "success": true,
      "log_likelihood": -437.4911661311354,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 14.761797703576113,
      "lambda_loss": 4.839077950839945,
      "gamma": 0.08309299024949969,
      "delta": -0.818952657188798,
      "baseline": -2.207534793528641,
      "success": true,
      "log_likelihood": -253.28436022684525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.01491047127089253,
      "lambda_loss": 4.659199907230751,
      "gamma": 1e-05,
      "delta": 0.5770032011139263,
      "baseline": 0.8991975815740058,
      "success": true,
      "log_likelihood": -24.768245751317178,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0708739913179167,
      "lambda_loss": 9.505048495786934,
      "gamma": 1e-05,
      "delta": 0.769401053938843,
      "baseline": 10.0,
      "success": true,
      "log_likelihood": -21.005540079553768,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.001,
      "lambda_loss": 1.0,
      "gamma": 1e-05,
      "delta": -0.8457372413692741,
      "baseline": 2.832585073009751,
      "success": true,
      "log_likelihood": -7.72740856374287,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 16.874804760253998,
      "lambda_loss": 6.876414281763762,
      "gamma": 0.039047316135219286,
      "delta": 0.6303818969574615,
      "baseline": -8.138231162460025,
      "success": true,
      "log_likelihood": -46.051701856480925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.010288499786933086,
      "lambda_loss": 1.0005735996875087,
      "gamma": 0.1,
      "delta": 1.0,
      "baseline": -0.5928576249232838,
      "success": true,
      "log_likelihood": -23.065416946679104,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 19.581615840038328,
      "lambda_loss": 1.9054741038165373,
      "gamma": 1e-05,
      "delta": 1.0,
      "baseline": -5.369656691347509,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 18.847505251808517,
      "lambda_loss": 3.928342467900183,
      "gamma": 1e-05,
      "delta": 1.0,
      "baseline": 8.108287747606031,
      "success": true,
      "log_likelihood": -437.4911676671689,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 18.335854722093575,
      "lambda_loss": 1.3183102939551385,
      "gamma": 0.1,
      "delta": -1.0,
      "baseline": 7.562036339639056,
      "success": true,
      "log_likelihood": -138.15510557683552,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.084087742692951,
      "lambda_loss": 5.143268145280961,
      "gamma": 0.09048816170886424,
      "delta": 0.6957203562879308,
      "baseline": 1.8993400274271508,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.929491548526523,
      "lambda_loss": 1.0,
      "gamma": 1e-05,
      "delta": 1.0,
      "baseline": -8.899688360236945,
      "success": true,
      "log_likelihood": -414.4653167371284,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6602378150839503,
      "lambda_loss": 1.0287637319333862,
      "gamma": 1e-05,
      "delta": 0.7369126371724233,
      "baseline": 9.814554122876617,
      "success": true,
      "log_likelihood": -24.03536491311785,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0010085261733871493,
      "lambda_loss": 1.0003251829683526,
      "gamma": 0.05559747796495823,
      "delta": 1.0,
      "baseline": -2.5598482560065734,
      "success": true,
      "log_likelihood": -12.855606218020483,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.31644625506548646,
      "lambda_loss": 2.1287298416178597,
      "gamma": 1e-05,
      "delta": 1.0,
      "baseline": 10.0,
      "success": true,
      "log_likelihood": -21.015823500923407,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 15.1136710970206,
      "lambda_loss": 5.155086505100899,
      "gamma": 0.06070930643690384,
      "delta": 0.4909758869138736,
      "baseline": -0.02583645967254178,
      "success": true,
      "log_likelihood": -184.20680743672372,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.071423142843296,
      "lambda_loss": 2.049443358233208,
      "gamma": 0.1,
      "delta": -1.0,
      "baseline": 0.6028933887685285,
      "success": true,
      "log_likelihood": -115.12756659666641,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.940164863453015,
      "lambda_loss": 7.139122171742975,
      "gamma": 0.03486688483601625,
      "delta": 0.6384582010889945,
      "baseline": -0.11491505711973993,
      "success": true,
      "log_likelihood": -391.4394658070879,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.12363768826932055,
      "lambda_loss": 5.064369770364079,
      "gamma": 1e-05,
      "delta": 0.6003474346981932,
      "baseline": 9.343611537851377,
      "success": true,
      "log_likelihood": -21.006476034832318,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.03801059315986995,
        "p": 0.7073163127891781
      },
      "lambda_loss": {
        "r": 0.10620808820407261,
        "p": 0.292934481123635
      },
      "gamma": {
        "r": -0.08873621316411068,
        "p": 0.37997661978169134
      },
      "delta": {
        "r": 0.823990245692821,
        "p": 6.436798401831099e-26
      },
      "baseline": {
        "r": 0.12042155552593263,
        "p": 0.2327033118818722
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 209.45728912925705,
  "bic_results": {
    "average_bic": 209.45728912925705,
    "individual_bics": [
      17.918740478743267,
      67.87995734404436,
      67.71301076101662,
      65.8605730614083,
      62.170919625889496,
      62.17357477083634,
      17.91863345765019,
      708.6931225862946,
      17.918633663893853,
      59.9288593844295,
      754.7448244463756,
      202.12440212540412,
      66.81974387786977,
      17.918637774735952,
      156.07270616245438,
      156.0727020129392,
      156.07270026532322,
      45.805856738200205,
      43.04884127094516,
      156.07290128195572,
      68.0316044584759,
      46.94851912857038,
      65.02989737572001,
      67.75875872417123,
      63.39467146487607,
      66.73371880315827,
      67.4297370564789,
      52.03302475813531,
      43.04775712339743,
      524.4863151459708,
      156.0727025862531,
      156.0727002653233,
      61.213005126485,
      66.0315602554275,
      17.918111175201926,
      63.64084754135925,
      62.26867774766366,
      67.82436460719713,
      63.78525014070557,
      294.2278058962954,
      66.07768613861299,
      56.05644061538196,
      27.060157771636465,
      67.95044256633246,
      800.7965266030986,
      57.95535761937124,
      892.8999300266182,
      1169.2101411871038,
      61.20767601194417,
      892.8999300266183,
      62.31080520462031,
      248.17610398548507,
      67.7637090236448,
      62.117161822680444,
      65.67969057249796,
      570.5380170060516,
      60.4583345316959,
      41.49708224425379,
      26.881310024384792,
      53.275727127770864,
      62.91215759724487,
      846.8479642380287,
      17.918740207932714,
      61.77001537747769,
      386.33120956018934,
      938.951631886235,
      38.03633362602928,
      386.3312095657278,
      62.171574791963636,
      38.57808944495554,
      36.55026074237476,
      47.34223089513736,
      892.8999269545513,
      524.486315145971,
      67.45408619491491,
      59.92867485138808,
      33.372411819766285,
      110.0209984052424,
      64.04842858563876,
      156.07270026532325,
      892.8999300266183,
      294.2278058459516,
      202.12440212540412,
      846.8482281665373,
      65.98832451851625,
      43.62880712832151,
      59.949241694127366,
      386.331209565728,
      248.17272788561337,
      800.7965263064564,
      59.93054676194518
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 5,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.038\n- lambda_loss: r = 0.106\n- gamma: r = -0.089\n- delta: r = 0.824\n- baseline: r = 0.120",
  "previous_models": [
    "Specification: U = baseline + gamma * combined_earning + alpha * log(max(1e-6, fair_split - split_self + delta * (split_self - split_opp)))*I(split_self < fair_split) * lambda_loss + alpha * log(max(1e-6, split_self - fair_split))*I(split_self >= fair_split)\nSummary: This model predicts the utility of accepting an offer in an ultimatum game, considering fairness, loss aversion, the combined earnings, and a baseline parameter. Fairness is modeled using a logarithmic function to account for decreasing sensitivity to unfairness. Loss aversion amplifies the negative impact of offers below the fair split. Sensitivity to combined earnings scales the overall impact of the earnings amount. The model includes a baseline utility term and an anchoring parameter, reflecting the influence of the opponent's offer on the responder's perception of fairness.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 209.45728912925705\nOverall Accuracy: 0.6807\n\nParameter Recovery:\n- alpha: r = 0.038\n- lambda_loss: r = 0.106\n- gamma: r = -0.089\n- delta: r = 0.824\n- baseline: r = 0.120"
  ]
}