{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, let's break down the Ultimatum Game and design a computational model for responder behavior.\n\n**1. Psychological Mechanisms:**\n\n*   **Fairness:** People care about fairness. Offers perceived as unfair are more likely to be rejected, even if it means getting nothing. This is likely the core driver.\n*   **Loss Aversion:** People feel the pain of a loss more strongly than the pleasure of an equivalent gain. Rejecting a small offer might be seen as avoiding the loss of being exploited, even though it is a loss in absolute terms.\n*   **Reference Point:** Fairness isn't judged in a vacuum. People have a reference point (e.g., 50/50 split, proportional to contribution) against which they evaluate the offer. Deviations from this reference point influence acceptance.\n*   **Contribution:** How much the responder feels that they contributed to the shared pot will influence the reference point of fairness.\n*   **Opponent Contribution:** How much the opponent contributed to the shared pot will influence the reference point of fairness.\n*   **Amount sensitivity:** It is possible the responder is more or less sensitive to changes in the offer amounts. This could influence acceptance rates as an non-linear function.\n*   **Stochasticity:** People don't always act rationally. There's some randomness or noise in their decision-making process.\n\n**2. Interaction of Mechanisms:**\n\nFairness is the primary mechanism. The reference point, which is a weighted calculation of the relative token contributions, is subtracted from the offer made. Loss aversion amplifies the negative utility of offers below the reference point. Stochasticity adds noise to the utility calculation. The combined utility, including amount sensitivity, determines the probability of acceptance.\n\n**3. Mathematical Form:**\n\nI'll use a utility-based approach with a logistic choice rule. The utility function will incorporate fairness, loss aversion, and contribution.\n\n**4. Parameters:**\n\n*   `fairness_sensitivity (alpha)`: How sensitive the responder is to deviations from their fairness reference point.\n*   `loss_aversion (lambda_param)`: The weight given to losses relative to gains.\n*   `token_weight_self (gamma_self)`: The weight given to the participant's own token count when calculating the fairness reference point.\n*   `token_weight_opp (gamma_opp)`: The weight given to the opponent's token count when calculating the fairness reference point. We can constrain these to be complementary (gamma and (1-gamma)).\n*   `amount_sensitivity (beta)`: How sensitive to changes in the offer amount.\n* `amount_transform (xi)`: The power law exponent applied to the amount.\n\n**5. Model Variables & Observable Behavior:**\n\n*   `token_self`: Directly from the data, influences the fairness reference point.\n*   `token_opp`: Directly from the data, influences the fairness reference point.\n*   `split_self`: The proposed amount for the responder.\n*   `combined_earning`: Total amount to be split. Influences what is considered \"fair\".\n*   `accept`: The responder's choice (0 or 1). This is what the model will predict.\n\nNow, putting it all together:\n\n```xml\n<MODEL>\nU = -alpha * (gamma_self * token_self/(token_self + token_opp) + gamma_opp * token_opp/(token_self + token_opp) * combined_earning - split_self) * (1 + lambda_param * (split_self < (gamma_self * token_self/(token_self + token_opp) + gamma_opp * token_opp/(token_self + token_opp) * combined_earning))) + beta * (split_self**xi)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Fairness sensitivity: how much deviations from fairness affect utility.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion: weight given to losses relative to gains (deviation from fairness).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_self\": {\n      \"description\": \"Weight given to the participant's own token count when calculating the fairness reference point.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_opp\": {\n      \"description\": \"Weight given to the opponent's token count when calculating the fairness reference point.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n   \"beta\": {\n      \"description\": \"Amount sensitivity: how much the responder is sensitive to changes in the offer amount.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n  \"xi\": {\n      \"description\": \"Amount transform: non-linear transform exponent applied to offer amount.\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 2\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Amount of money earned in total\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 300\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nThis utility model predicts responder behavior in the Ultimatum Game. The utility function incorporates fairness considerations, loss aversion, and the relative contributions of the proposer and responder.  Fairness is calculated based on the ratio of self and opp tokens to the combined earning. The deviation from this expected fair split is weighted by alpha, with an additional loss aversion term for negative deviations. Finally, the model incorporates a sensitivity to the amount being offered, powered by xi. The probability of accepting the offer is then predicted using a logistic function with temperature 1 (implied in instruction). There are five free parameters: fairness sensitivity (alpha), loss aversion (lambda_param), token weight for self (gamma_self), amount sensitivity (beta), and amount transform(xi).\n</SUMMARY>\n```"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'lambda_param', 'gamma_self', 'beta', 'xi']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = -alpha * (gamma_self * token_self/(token_self + token_opp) + gamma_opp * token_opp/(token_self + token_opp) * combined_earning - split_self) * (1 + lambda_param * (split_self < (gamma_self * token_self/(token_self + token_opp) + gamma_opp * token_opp/(token_self + token_opp) * combined_earning))) + beta * (split_self**xi)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Fairness sensitivity: how much deviations from fairness affect utility.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion: weight given to losses relative to gains (deviation from fairness).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_self\": {\n      \"description\": \"Weight given to the participant's own token count when calculating the fairness reference point.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_opp\": {\n      \"description\": \"Weight given to the opponent's token count when calculating the fairness reference point.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Amount sensitivity: how much the responder is sensitive to changes in the offer amount.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"xi\": {\n      \"description\": \"Amount transform: non-linear transform exponent applied to offer amount.\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Amount of money earned in total\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 300,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=1, lambda_param=1, gamma_self=0.5, beta=1, xi=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        # Calculate fairness reference point\n        total_tokens = token_self + token_opp\n        if total_tokens == 0:\n            fairness_reference = 0 # Avoid division by zero\n        else:\n            fairness_reference = (gamma_self * token_self/total_tokens + (1 - gamma_self) * token_opp/total_tokens) * combined_earning # gamma_opp = (1-gamma_self)\n\n        # Calculate deviation from fairness\n        deviation = fairness_reference - split_self\n\n        # Loss aversion\n        loss_aversion_term = 0\n        if split_self < fairness_reference:\n            loss_aversion_term = 1 + lambda_param\n\n        # Calculate Utility\n        utility = -alpha * deviation * loss_aversion_term + beta * (split_self**xi)\n\n        model_predictions.append(utility)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 3, \"token_self\": 7, \"combined_earning\": 10, \"split_opp\": 7.0, \"split_self\": 3.0, \"splitperc_opp\": 70, \"splitperc_self\": 30, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 30.0, \"proposed_amount\": 3.0}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 4, \"token_self\": 6, \"combined_earning\": 10, \"split_opp\": 6.0, \"split_self\": 4.0, \"splitperc_opp\": 60, \"splitperc_self\": 40, \"accept\": 1.0, \"accepted_amount\": 4.0, \"accepted_perc\": 40.0, \"proposed_perc\": 40.0, \"proposed_amount\": 4.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744713747.017187
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Fairness sensitivity: how much deviations from fairness affect utility.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Loss aversion: weight given to losses relative to gains (deviation from fairness).",
      "range": {
        "min": 0,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma_self": {
      "description": "Weight given to the participant's own token count when calculating the fairness reference point.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Amount sensitivity: how much the responder is sensitive to changes in the offer amount.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "xi": {
      "description": "Amount transform: non-linear transform exponent applied to offer amount.",
      "range": {
        "min": 0.1,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = -alpha * (gamma_self * token_self/(token_self + token_opp) + gamma_opp * token_opp/(token_self + token_opp) * combined_earning - split_self) * (1 + lambda_param * (split_self < (gamma_self * token_self/(token_self + token_opp) + gamma_opp * token_opp/(token_self + token_opp) * combined_earning))) + beta * (split_self**xi)",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Fairness sensitivity: how much deviations from fairness affect utility.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Loss aversion: weight given to losses relative to gains (deviation from fairness).",
      "range": {
        "min": 0,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma_self": {
      "description": "Weight given to the participant's own token count when calculating the fairness reference point.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma_opp": {
      "description": "Weight given to the opponent's token count when calculating the fairness reference point.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Amount sensitivity: how much the responder is sensitive to changes in the offer amount.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "xi": {
      "description": "Amount transform: non-linear transform exponent applied to offer amount.",
      "range": {
        "min": 0.1,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Amount of money earned in total",
      "range": {
        "min": 0,
        "max": 300,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "This utility model predicts responder behavior in the Ultimatum Game. The utility function incorporates fairness considerations, loss aversion, and the relative contributions of the proposer and responder.  Fairness is calculated based on the ratio of self and opp tokens to the combined earning. The deviation from this expected fair split is weighted by alpha, with an additional loss aversion term for negative deviations. Finally, the model incorporates a sensitivity to the amount being offered, powered by xi. The probability of accepting the offer is then predicted using a logistic function with temperature 1 (implied in instruction). There are five free parameters: fairness sensitivity (alpha), loss aversion (lambda_param), token weight for self (gamma_self), amount sensitivity (beta), and amount transform(xi).",
  "target_variable": "accept",
  "full_reasoning": "Okay, let's break down the Ultimatum Game and design a computational model for responder behavior.\n\n**1. Psychological Mechanisms:**\n\n*   **Fairness:** People care about fairness. Offers perceived as unfair are more likely to be rejected, even if it means getting nothing. This is likely the core driver.\n*   **Loss Aversion:** People feel the pain of a loss more strongly than the pleasure of an equivalent gain. Rejecting a small offer might be seen as avoiding the loss of being exploited, even though it is a loss in absolute terms.\n*   **Reference Point:** Fairness isn't judged in a vacuum. People have a reference point (e.g., 50/50 split, proportional to contribution) against which they evaluate the offer. Deviations from this reference point influence acceptance.\n*   **Contribution:** How much the responder feels that they contributed to the shared pot will influence the reference point of fairness.\n*   **Opponent Contribution:** How much the opponent contributed to the shared pot will influence the reference point of fairness.\n*   **Amount sensitivity:** It is possible the responder is more or less sensitive to changes in the offer amounts. This could influence acceptance rates as an non-linear function.\n*   **Stochasticity:** People don't always act rationally. There's some randomness or noise in their decision-making process.\n\n**2. Interaction of Mechanisms:**\n\nFairness is the primary mechanism. The reference point, which is a weighted calculation of the relative token contributions, is subtracted from the offer made. Loss aversion amplifies the negative utility of offers below the reference point. Stochasticity adds noise to the utility calculation. The combined utility, including amount sensitivity, determines the probability of acceptance.\n\n**3. Mathematical Form:**\n\nI'll use a utility-based approach with a logistic choice rule. The utility function will incorporate fairness, loss aversion, and contribution.\n\n**4. Parameters:**\n\n*   `fairness_sensitivity (alpha)`: How sensitive the responder is to deviations from their fairness reference point.\n*   `loss_aversion (lambda_param)`: The weight given to losses relative to gains.\n*   `token_weight_self (gamma_self)`: The weight given to the participant's own token count when calculating the fairness reference point.\n*   `token_weight_opp (gamma_opp)`: The weight given to the opponent's token count when calculating the fairness reference point. We can constrain these to be complementary (gamma and (1-gamma)).\n*   `amount_sensitivity (beta)`: How sensitive to changes in the offer amount.\n* `amount_transform (xi)`: The power law exponent applied to the amount.\n\n**5. Model Variables & Observable Behavior:**\n\n*   `token_self`: Directly from the data, influences the fairness reference point.\n*   `token_opp`: Directly from the data, influences the fairness reference point.\n*   `split_self`: The proposed amount for the responder.\n*   `combined_earning`: Total amount to be split. Influences what is considered \"fair\".\n*   `accept`: The responder's choice (0 or 1). This is what the model will predict.\n\nNow, putting it all together:\n\n```xml\n<MODEL>\nU = -alpha * (gamma_self * token_self/(token_self + token_opp) + gamma_opp * token_opp/(token_self + token_opp) * combined_earning - split_self) * (1 + lambda_param * (split_self < (gamma_self * token_self/(token_self + token_opp) + gamma_opp * token_opp/(token_self + token_opp) * combined_earning))) + beta * (split_self**xi)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Fairness sensitivity: how much deviations from fairness affect utility.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion: weight given to losses relative to gains (deviation from fairness).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_self\": {\n      \"description\": \"Weight given to the participant's own token count when calculating the fairness reference point.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_opp\": {\n      \"description\": \"Weight given to the opponent's token count when calculating the fairness reference point.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n   \"beta\": {\n      \"description\": \"Amount sensitivity: how much the responder is sensitive to changes in the offer amount.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n  \"xi\": {\n      \"description\": \"Amount transform: non-linear transform exponent applied to offer amount.\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 2\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Amount of money earned in total\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 300\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nThis utility model predicts responder behavior in the Ultimatum Game. The utility function incorporates fairness considerations, loss aversion, and the relative contributions of the proposer and responder.  Fairness is calculated based on the ratio of self and opp tokens to the combined earning. The deviation from this expected fair split is weighted by alpha, with an additional loss aversion term for negative deviations. Finally, the model incorporates a sensitivity to the amount being offered, powered by xi. The probability of accepting the offer is then predicted using a logistic function with temperature 1 (implied in instruction). There are five free parameters: fairness sensitivity (alpha), loss aversion (lambda_param), token weight for self (gamma_self), amount sensitivity (beta), and amount transform(xi).\n</SUMMARY>\n```",
  "prediction_type": "utility",
  "current_model": "Specification: U = -alpha * (gamma_self * token_self/(token_self + token_opp) + gamma_opp * token_opp/(token_self + token_opp) * combined_earning - split_self) * (1 + lambda_param * (split_self < (gamma_self * token_self/(token_self + token_opp) + gamma_opp * token_opp/(token_self + token_opp) * combined_earning))) + beta * (split_self**xi)\nSummary: This utility model predicts responder behavior in the Ultimatum Game. The utility function incorporates fairness considerations, loss aversion, and the relative contributions of the proposer and responder.  Fairness is calculated based on the ratio of self and opp tokens to the combined earning. The deviation from this expected fair split is weighted by alpha, with an additional loss aversion term for negative deviations. Finally, the model incorporates a sensitivity to the amount being offered, powered by xi. The probability of accepting the offer is then predicted using a logistic function with temperature 1 (implied in instruction). There are five free parameters: fairness sensitivity (alpha), loss aversion (lambda_param), token weight for self (gamma_self), amount sensitivity (beta), and amount transform(xi).\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=1, lambda_param=1, gamma_self=0.5, beta=1, xi=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        # Calculate fairness reference point\n        total_tokens = token_self + token_opp\n        if total_tokens == 0:\n            fairness_reference = 0 # Avoid division by zero\n        else:\n            fairness_reference = (gamma_self * token_self/total_tokens + (1 - gamma_self) * token_opp/total_tokens) * combined_earning # gamma_opp = (1-gamma_self)\n\n        # Calculate deviation from fairness\n        deviation = fairness_reference - split_self\n\n        # Loss aversion\n        loss_aversion_term = 0\n        if split_self < fairness_reference:\n            loss_aversion_term = 1 + lambda_param\n\n        # Calculate Utility\n        utility = -alpha * deviation * loss_aversion_term + beta * (split_self**xi)\n\n        model_predictions.append(utility)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.8363858363858364,
  "fitting_results": [
    {
      "alpha": 8.948577213303187,
      "lambda_param": 4.014775781971015,
      "gamma_self": 0.47383272856093006,
      "beta": 5.278779793102094,
      "xi": 1.0015088855409462,
      "success": true,
      "log_likelihood": -6.707599013627263e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6745216451906282,
      "lambda_param": 0.5679614755376966,
      "gamma_self": 0.8477460218939205,
      "beta": 1.0683902312025513,
      "xi": 0.6837900433432565,
      "success": true,
      "log_likelihood": -16.030289224521532,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.918596388806812,
      "lambda_param": 1.6972426761131058e-06,
      "gamma_self": 1.0,
      "beta": 1.9265547617726804,
      "xi": 0.7476180068389622,
      "success": true,
      "log_likelihood": -9.742141703418142,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5370883173396733,
      "lambda_param": 1.4453122071232483,
      "gamma_self": 0.9085023779317584,
      "beta": 0.25814370341225135,
      "xi": 1.712867390023503,
      "success": true,
      "log_likelihood": -12.542099283972874,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.268192696097694,
      "lambda_param": 0.0,
      "gamma_self": 1.0,
      "beta": 2.819863645859339,
      "xi": 0.40117531858060074,
      "success": true,
      "log_likelihood": -8.417901974033223,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.5365711753552993,
      "lambda_param": 0.24147967406248466,
      "gamma_self": 0.7618564118765361,
      "beta": 2.758470395781218,
      "xi": 0.6216601396008526,
      "success": true,
      "log_likelihood": -9.894139687856924,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "lambda_param": 0.0,
      "gamma_self": 1.0,
      "beta": 10.0,
      "xi": 2.0,
      "success": true,
      "log_likelihood": -1.1115188322406213e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8147315305236028,
      "lambda_param": 1.5098406568593943,
      "gamma_self": 0.8540424991152501,
      "beta": 4.057710465586185,
      "xi": 0.4097232011187225,
      "success": true,
      "log_likelihood": -9.258798864379676,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "lambda_param": 0.0,
      "gamma_self": 1.0,
      "beta": 10.0,
      "xi": 2.0,
      "success": true,
      "log_likelihood": -1.1115188322406224e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.6243863208088283,
      "lambda_param": 0.0,
      "gamma_self": 1.0,
      "beta": 0.5034399107022094,
      "xi": 1.2822181707645144,
      "success": true,
      "log_likelihood": -11.110852971223869,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.621256793015752,
      "lambda_param": 3.058322066794402,
      "gamma_self": 1.0,
      "beta": 10.0,
      "xi": 1.111833653801739,
      "success": true,
      "log_likelihood": -0.44703956484549756,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.44895281302032114,
      "lambda_param": 5.0,
      "gamma_self": 0.6059021633457473,
      "beta": 0.08557118923514728,
      "xi": 1.962171790056705,
      "success": true,
      "log_likelihood": -5.630821097391302,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.7784067153790972,
      "lambda_param": 0.0,
      "gamma_self": 0.8649322909568906,
      "beta": 2.8274394347136367,
      "xi": 0.4972909323500648,
      "success": true,
      "log_likelihood": -7.915268923269232,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "lambda_param": 0.0,
      "gamma_self": 0.0,
      "beta": 10.0,
      "xi": 2.0,
      "success": true,
      "log_likelihood": -1.1115188322406204e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "lambda_param": 0.0,
      "gamma_self": 0.48081027134544213,
      "beta": 10.0,
      "xi": 2.0,
      "success": true,
      "log_likelihood": -1.1115188322406207e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "lambda_param": 0.0,
      "gamma_self": 1.0,
      "beta": 10.0,
      "xi": 2.0,
      "success": true,
      "log_likelihood": -1.111518832240622e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "lambda_param": 0.0,
      "gamma_self": 0.0,
      "beta": 10.0,
      "xi": 2.0,
      "success": true,
      "log_likelihood": -1.111518832240621e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.495452433142338,
      "lambda_param": 2.666124190635148,
      "gamma_self": 0.8121672418522586,
      "beta": 10.0,
      "xi": 2.0,
      "success": true,
      "log_likelihood": -0.0002947738774634751,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.44923760737782,
      "lambda_param": 0.044075321817364156,
      "gamma_self": 1.0,
      "beta": 5.924125454297112,
      "xi": 0.313273101279396,
      "success": true,
      "log_likelihood": -5.170532793288003,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "lambda_param": 0.0,
      "gamma_self": 0.0,
      "beta": 10.0,
      "xi": 2.0,
      "success": true,
      "log_likelihood": -1.1115188322406215e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2578676935214808,
      "lambda_param": 2.5481777022876233e-05,
      "gamma_self": 1.0,
      "beta": 2.30705181547742,
      "xi": 0.33258738763996093,
      "success": true,
      "log_likelihood": -13.764578090109346,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.26267127449904704,
      "lambda_param": 3.673159815583941,
      "gamma_self": 0.9393577022042331,
      "beta": 4.1974485113620235,
      "xi": 0.38830893104568226,
      "success": true,
      "log_likelihood": -6.947187719995796,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7826710204694444,
      "lambda_param": 1.3540218145571616,
      "gamma_self": 0.4251153272577264,
      "beta": 0.6425896916433281,
      "xi": 1.1915130288854718,
      "success": true,
      "log_likelihood": -11.475087550205313,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.1735116246441907,
      "lambda_param": 4.880447690520859,
      "gamma_self": 0.6901078353891752,
      "beta": 0.9049886956965105,
      "xi": 0.8562548737850453,
      "success": true,
      "log_likelihood": -15.982245870053797,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.4392679185863552,
      "lambda_param": 3.0830817953854575,
      "gamma_self": 1.0,
      "beta": 3.7614921048537027,
      "xi": 0.1,
      "success": true,
      "log_likelihood": -10.427419190369116,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9305460688404997,
      "lambda_param": 0.0,
      "gamma_self": 1.0,
      "beta": 0.9665950858501295,
      "xi": 0.8739540370474537,
      "success": true,
      "log_likelihood": -14.851262619893149,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.147742595305484,
      "lambda_param": 1.0868063009837465,
      "gamma_self": 0.5794388068670846,
      "beta": 5.237504772473535,
      "xi": 0.6322640390728239,
      "success": true,
      "log_likelihood": -4.806640836139895,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.725381700051951,
      "lambda_param": 1.6934038110311915,
      "gamma_self": 0.8659809430317656,
      "beta": 10.0,
      "xi": 0.6566391034751691,
      "success": true,
      "log_likelihood": -1.1977954329406937,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "lambda_param": 0.0,
      "gamma_self": 0.0,
      "beta": 10.0,
      "xi": 2.0,
      "success": true,
      "log_likelihood": -91.11315840966864,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7800955090181259,
      "lambda_param": 0.09623032639581643,
      "gamma_self": 0.9999245828920651,
      "beta": 7.075612777529237,
      "xi": 0.1,
      "success": true,
      "log_likelihood": -18.269372242916887,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "lambda_param": 0.0,
      "gamma_self": 1.0,
      "beta": 10.0,
      "xi": 2.0,
      "success": true,
      "log_likelihood": -1.1115188322406217e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.934651752310989,
      "lambda_param": 5.0,
      "gamma_self": 0.4998409852519286,
      "beta": 7.898713521229514,
      "xi": 0.4408731366398627,
      "success": true,
      "log_likelihood": -4.859634094011768e-07,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.5772823084091874,
      "lambda_param": 0.0046612451612550645,
      "gamma_self": 0.27954238155617495,
      "beta": 1.062100039564831,
      "xi": 0.8269621050381992,
      "success": true,
      "log_likelihood": -13.084869231177331,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3780628064120866,
      "lambda_param": 0.29839721250078854,
      "gamma_self": 0.6310494736580207,
      "beta": 1.2480636738813897,
      "xi": 0.7313820270509943,
      "success": true,
      "log_likelihood": -12.74823452370925,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "lambda_param": 0.0,
      "gamma_self": 0.0,
      "beta": 10.0,
      "xi": 2.0,
      "success": true,
      "log_likelihood": -1.1115188322406207e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2468903379503418,
      "lambda_param": 0.3396348260663546,
      "gamma_self": 0.4999998469556153,
      "beta": 0.6239953483488393,
      "xi": 1.8776822740740786,
      "success": true,
      "log_likelihood": -8.14454165596158,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8837780481181254,
      "lambda_param": 1.2996025630114447,
      "gamma_self": 0.9193252103299681,
      "beta": 1.945252053115619,
      "xi": 1.127172073643247,
      "success": true,
      "log_likelihood": -6.829566065278894,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1368431040514344,
      "lambda_param": 0.1803934291422452,
      "gamma_self": 1.0,
      "beta": 1.9432104789982638,
      "xi": 0.4079564737192715,
      "success": true,
      "log_likelihood": -13.309898841164005,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8971888334593773,
      "lambda_param": 0.0,
      "gamma_self": 0.9272683923473479,
      "beta": 2.5403226995452286,
      "xi": 0.19524573207164847,
      "success": true,
      "log_likelihood": -16.001974098995777,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "lambda_param": 0.0,
      "gamma_self": 0.0,
      "beta": 10.0,
      "xi": 2.0,
      "success": true,
      "log_likelihood": -68.08722310623786,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3687918740388658,
      "lambda_param": 6.718763920726982e-06,
      "gamma_self": 0.7293173974740378,
      "beta": 3.5267787093959795,
      "xi": 0.1,
      "success": true,
      "log_likelihood": -14.445339416666712,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8177008319510934,
      "lambda_param": 0.6518408375523791,
      "gamma_self": 0.8493914722081686,
      "beta": 0.14422833428211673,
      "xi": 1.4334152057016347,
      "success": true,
      "log_likelihood": -11.968590606863799,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.2924156954522123,
      "lambda_param": 0.02181882548661259,
      "gamma_self": 0.49985799789916835,
      "beta": 3.894165678023604,
      "xi": 0.1,
      "success": true,
      "log_likelihood": -4.629523790351632,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.4372616123091495,
      "lambda_param": 2.9037085663294286,
      "gamma_self": 0.49998761429420213,
      "beta": 10.0,
      "xi": 1.3853511150346824,
      "success": true,
      "log_likelihood": -46.44771162220447,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.2355015288147467,
      "lambda_param": 4.364812618252762,
      "gamma_self": 0.7977651141272807,
      "beta": 1.3981832599518367,
      "xi": 0.8276529136273487,
      "success": true,
      "log_likelihood": -12.77620060629749,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.13968651336702237,
      "lambda_param": 2.5211012226597145,
      "gamma_self": 0.5000068627317752,
      "beta": 0.5469163175815905,
      "xi": 1.2642914919900234,
      "success": true,
      "log_likelihood": -14.815774287715618,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.2938276912146454,
      "lambda_param": 0.20346399758533384,
      "gamma_self": 0.5544165141873388,
      "beta": 4.207228536489226,
      "xi": 0.34892534567837247,
      "success": true,
      "log_likelihood": -9.680115742415905,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.14835065054626745,
      "lambda_param": 4.280776810270259,
      "gamma_self": 0.7230861519528372,
      "beta": 0.0884537115447181,
      "xi": 2.0,
      "success": true,
      "log_likelihood": -16.955908141148978,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.5855828979632483,
      "lambda_param": 0.4431820186900109,
      "gamma_self": 1.0,
      "beta": 3.685776629770674,
      "xi": 0.1,
      "success": true,
      "log_likelihood": -8.38418277457164,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.21184379351907015,
      "lambda_param": 0.008628153751757111,
      "gamma_self": 0.27941736805982287,
      "beta": 0.04800737140288108,
      "xi": 2.0,
      "success": true,
      "log_likelihood": -22.60926298194086,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.22952367996018383,
      "lambda_param": 1.3496063405458734,
      "gamma_self": 0.6627762061482356,
      "beta": 0.7402128925225878,
      "xi": 0.9352834817391347,
      "success": true,
      "log_likelihood": -16.943593898897625,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.6558790151427907,
      "lambda_param": 7.764858641105594e-05,
      "gamma_self": 0.4030091168313685,
      "beta": 0.5072026054444648,
      "xi": 0.9249433124630069,
      "success": true,
      "log_likelihood": -6.518615519108544,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6079541635301646,
      "lambda_param": 0.7151475399887479,
      "gamma_self": 0.4025030243465499,
      "beta": 0.7694645217428991,
      "xi": 1.0035469824088188,
      "success": true,
      "log_likelihood": -15.369028490782785,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.13609901317244313,
      "lambda_param": 1.4375543335990273,
      "gamma_self": 0.10600858035117164,
      "beta": 0.10075593817787687,
      "xi": 1.9551871470831486,
      "success": true,
      "log_likelihood": -19.409557726734207,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7355129047884479,
      "lambda_param": 0.0,
      "gamma_self": 1.0,
      "beta": 0.9708203249855429,
      "xi": 0.14009875096790486,
      "success": true,
      "log_likelihood": -18.859044304900937,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.267277901504573,
      "lambda_param": 3.303129268483447,
      "gamma_self": 1.0,
      "beta": 1.448505268769184,
      "xi": 1.2932880246996121,
      "success": true,
      "log_likelihood": -4.068239863513891,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7439492787798354,
      "lambda_param": 0.6841766447184655,
      "gamma_self": 0.7533899866497344,
      "beta": 1.7275653123911021,
      "xi": 0.6111710557278387,
      "success": true,
      "log_likelihood": -8.557384362896194,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.013243672387731935,
      "lambda_param": 0.0,
      "gamma_self": 0.0,
      "beta": 1.8805944563476535,
      "xi": 0.1,
      "success": true,
      "log_likelihood": -12.55347334708604,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.282637583576664,
      "lambda_param": 3.1217490659998797,
      "gamma_self": 0.4999946518459689,
      "beta": 4.38263445811096,
      "xi": 1.097681718186129,
      "success": true,
      "log_likelihood": -2.7715436773663202,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.46861592098910365,
      "lambda_param": 0.0006281791251073172,
      "gamma_self": 0.23664829023022954,
      "beta": 1.2293274166984762,
      "xi": 0.769680960573044,
      "success": true,
      "log_likelihood": -13.014843418168212,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.14463474085483927,
      "lambda_param": 4.394935599824789,
      "gamma_self": 0.599337474289022,
      "beta": 1.5841849774945438,
      "xi": 0.36127428349082674,
      "success": true,
      "log_likelihood": -18.597334674113156,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.5440778046173849,
      "lambda_param": 0.0,
      "gamma_self": 0.8420835911150825,
      "beta": 2.5505331411087098,
      "xi": 0.2837746538060921,
      "success": true,
      "log_likelihood": -13.335694125302075,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.737127440431413,
      "lambda_param": 4.615661140987779,
      "gamma_self": 0.5373535809169981,
      "beta": 1.8267364960060148,
      "xi": 1.6309265793883976,
      "success": true,
      "log_likelihood": -6.188375968587455e-07,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6606453071525284,
      "lambda_param": 0.0,
      "gamma_self": 0.5000098214265811,
      "beta": 0.12582098871012015,
      "xi": 1.7765081275084615,
      "success": true,
      "log_likelihood": -18.303535496374227,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.4570339329225597,
      "lambda_param": 0.8726843894732502,
      "gamma_self": 0.658358396447381,
      "beta": 0.4470467323887252,
      "xi": 1.7272565060723795,
      "success": true,
      "log_likelihood": -4.805834539614799,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.2993834263350669,
      "lambda_param": 4.703605863117788,
      "gamma_self": 0.585093169365467,
      "beta": 1.6442871735004747,
      "xi": 0.8176755518298576,
      "success": true,
      "log_likelihood": -11.378531208129258,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9871267314657114,
      "lambda_param": 0.001552728689276809,
      "gamma_self": 0.499868747699116,
      "beta": 5.225859036141352,
      "xi": 0.1,
      "success": true,
      "log_likelihood": -6.923587547650681,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7649732682671284,
      "lambda_param": 0.0,
      "gamma_self": 0.943626505074351,
      "beta": 3.434791033606636,
      "xi": 0.2228525688992164,
      "success": true,
      "log_likelihood": -10.279017202573295,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.18568616650057032,
      "lambda_param": 4.911872876549837,
      "gamma_self": 0.4997390491467731,
      "beta": 0.25858713213093765,
      "xi": 2.0,
      "success": true,
      "log_likelihood": -11.289158997773646,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.2862501129545009,
      "lambda_param": 0.0,
      "gamma_self": 1.0,
      "beta": 2.8952650786014607,
      "xi": 0.1,
      "success": true,
      "log_likelihood": -9.829032850845186,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "lambda_param": 5.0,
      "gamma_self": 0.9287725935784722,
      "beta": 7.286423514860227,
      "xi": 0.742624448725117,
      "success": true,
      "log_likelihood": -7.383379811167486e-07,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.633182054182136,
      "lambda_param": 2.326041328752697,
      "gamma_self": 0.47821780724630475,
      "beta": 5.7150557073618415,
      "xi": 0.9518397503393581,
      "success": true,
      "log_likelihood": -3.1019887625299742,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7247774109615339,
      "lambda_param": 0.2971800296863237,
      "gamma_self": 0.8340685433791775,
      "beta": 0.37058415361260816,
      "xi": 1.4318506233012713,
      "success": true,
      "log_likelihood": -14.965197854851239,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.1193362474229636,
      "lambda_param": 1.6563216514713959,
      "gamma_self": 0.49999455719508773,
      "beta": 0.5230408918181756,
      "xi": 1.2617698782701803,
      "success": true,
      "log_likelihood": -14.386476551940811,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.057877333833012454,
      "lambda_param": 4.48189938114666,
      "gamma_self": 0.6572382110786474,
      "beta": 0.050826869954820456,
      "xi": 2.0,
      "success": true,
      "log_likelihood": -21.96994902803721,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1874316156331977,
      "lambda_param": 1.4843137379264155,
      "gamma_self": 0.5888882304566181,
      "beta": 6.998345160257563,
      "xi": 0.24158581914104285,
      "success": true,
      "log_likelihood": -6.788229780986387,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "lambda_param": 0.0,
      "gamma_self": 1.0,
      "beta": 10.0,
      "xi": 2.0,
      "success": true,
      "log_likelihood": -46.05161859820937,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2179813217688116,
      "lambda_param": 0.47682589763194444,
      "gamma_self": 0.3993020951073587,
      "beta": 0.0,
      "xi": 0.1,
      "success": true,
      "log_likelihood": -6.583537734183511,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.09320270287244382,
      "lambda_param": 0.07823985154043026,
      "gamma_self": 0.807131587506741,
      "beta": 0.05952329852908496,
      "xi": 2.0,
      "success": true,
      "log_likelihood": -21.67546018113687,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.632900289316797,
      "lambda_param": 4.420711763418425,
      "gamma_self": 0.49780195839119457,
      "beta": 1.4839687378734452,
      "xi": 1.5401974920078518,
      "success": true,
      "log_likelihood": -7.875374210008309e-07,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.40156216423729185,
      "lambda_param": 0.29666775475054913,
      "gamma_self": 0.4999989366090954,
      "beta": 0.7896180722118367,
      "xi": 0.45375717022435685,
      "success": true,
      "log_likelihood": -21.791870032853165,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.25135395193141735,
      "lambda_param": 0.0014922982006720235,
      "gamma_self": 0.0,
      "beta": 2.782871619039512,
      "xi": 0.1,
      "success": true,
      "log_likelihood": -9.998674647899506,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.40063918501833584,
      "lambda_param": 3.4654332789534994,
      "gamma_self": 0.5939523190979734,
      "beta": 0.031222494573491102,
      "xi": 2.0,
      "success": true,
      "log_likelihood": -7.651568404349054,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.7798534064346088,
      "lambda_param": 0.01527116610158626,
      "gamma_self": 0.7203818031269502,
      "beta": 0.7902074926642281,
      "xi": 2.0,
      "success": true,
      "log_likelihood": -3.6425027527918705,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.22845320456907606,
      "lambda_param": 0.0,
      "gamma_self": 0.9114645741766327,
      "beta": 0.9141513126455811,
      "xi": 0.1,
      "success": true,
      "log_likelihood": -23.330961126698725,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "lambda_param": 5.0,
      "gamma_self": 0.66716926229369,
      "beta": 10.0,
      "xi": 0.9120266404330406,
      "success": true,
      "log_likelihood": -0.0005232157174263857,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7407774815439361,
      "lambda_param": 0.013919753475324889,
      "gamma_self": 0.8552683813258579,
      "beta": 2.416186638212868,
      "xi": 0.1581914635583101,
      "success": true,
      "log_likelihood": -17.05385634744157,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.551535724587892,
      "lambda_param": 0.8287109505837226,
      "gamma_self": 1.0,
      "beta": 0.02780190158005838,
      "xi": 2.0,
      "success": true,
      "log_likelihood": -13.21636315472186,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "lambda_param": 0.0,
      "gamma_self": 1.0,
      "beta": 10.0,
      "xi": 2.0,
      "success": true,
      "log_likelihood": -45.061456549587746,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.470070893316542,
      "lambda_param": 4.861945518709027,
      "gamma_self": 0.49999982815353505,
      "beta": 10.0,
      "xi": 2.0,
      "success": true,
      "log_likelihood": -0.015013502114595786,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.46530581740815047,
      "lambda_param": 0.009631538641774223,
      "gamma_self": 0.4999999202225016,
      "beta": 1.8242133714593995,
      "xi": 0.1,
      "success": true,
      "log_likelihood": -20.081427445023195,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.5933286962120385,
        "p": 7.765293635265676e-11
      },
      "lambda_param": {
        "r": 0.2298533948341511,
        "p": 0.02141824857619279
      },
      "gamma_self": {
        "r": 0.8463688522191056,
        "p": 1.4556110108138876e-28
      },
      "beta": {
        "r": 0.44696098702477705,
        "p": 3.1362795970613404e-06
      },
      "xi": {
        "r": 0.5971110808123882,
        "p": 5.484626172885186e-11
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 42.22721197898567,
  "bic_results": {
    "average_bic": 42.22721197898567,
    "individual_bics": [
      17.91759603380035,
      49.97817314132361,
      37.40187809911683,
      43.00179326022629,
      34.753398640346994,
      37.7058740679944,
      17.917596915318214,
      36.4351924210399,
      17.917596915318214,
      40.139300634728286,
      18.811673821971542,
      29.179236887063155,
      33.748132538819014,
      17.917596915318214,
      17.917596915318214,
      17.917596915318214,
      17.917596915318214,
      17.918184240035476,
      28.258660278856553,
      17.917596915318214,
      45.44675087249924,
      31.81197013227214,
      40.86776979269118,
      49.88208643238814,
      38.77243307301878,
      47.62011993206684,
      27.53087636456034,
      20.313185558161937,
      200.14391151161783,
      54.45633917811432,
      17.917596915318214,
      17.91759566420737,
      44.08733315463521,
      43.414063739699046,
      17.917596915318214,
      34.20667800420371,
      31.57672682283834,
      44.53739237460856,
      49.92154289027211,
      154.09204090475626,
      46.80827352561397,
      41.85477590600814,
      27.176642272983813,
      110.81301793668949,
      43.46999590487553,
      47.549143267711784,
      37.27782617711236,
      51.82941097457851,
      34.68596024142383,
      63.13612065616226,
      51.804782490075794,
      30.95482573049764,
      48.65565167384612,
      56.73671014574896,
      55.63568330208243,
      26.05407441930833,
      35.03236341807293,
      43.024541386452626,
      23.46068204701319,
      43.94728152861697,
      55.11226404050686,
      44.5889829428847,
      17.91759592995574,
      54.52466568502901,
      27.529263771510145,
      40.674657108539066,
      31.764769787581912,
      38.47562909742714,
      40.49591268782784,
      37.57566039397092,
      17.91759616895651,
      24.121572217340496,
      47.847990401983026,
      46.69054779616217,
      61.85749274835497,
      31.49405425425332,
      110.02083188869929,
      31.08467016064757,
      61.268515054554285,
      17.91759626735539,
      61.50133475798688,
      37.91494398807956,
      33.22073150097866,
      25.20260019786429,
      64.579516945678,
      17.9186411237154,
      52.02530738716369,
      44.35032100172427,
      108.04050779145604,
      17.94762169650974,
      58.080449582326935
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 5,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.593\n- lambda_param: r = 0.230\n- gamma_self: r = 0.846\n- beta: r = 0.447\n- xi: r = 0.597",
  "previous_models": [
    "Specification: U = -alpha * (gamma_self * token_self/(token_self + token_opp) + gamma_opp * token_opp/(token_self + token_opp) * combined_earning - split_self) * (1 + lambda_param * (split_self < (gamma_self * token_self/(token_self + token_opp) + gamma_opp * token_opp/(token_self + token_opp) * combined_earning))) + beta * (split_self**xi)\nSummary: This utility model predicts responder behavior in the Ultimatum Game. The utility function incorporates fairness considerations, loss aversion, and the relative contributions of the proposer and responder.  Fairness is calculated based on the ratio of self and opp tokens to the combined earning. The deviation from this expected fair split is weighted by alpha, with an additional loss aversion term for negative deviations. Finally, the model incorporates a sensitivity to the amount being offered, powered by xi. The probability of accepting the offer is then predicted using a logistic function with temperature 1 (implied in instruction). There are five free parameters: fairness sensitivity (alpha), loss aversion (lambda_param), token weight for self (gamma_self), amount sensitivity (beta), and amount transform(xi).\nTarget Variable: accept\nPrediction Type: utility\nBIC: 42.22721197898567\nOverall Accuracy: 0.8364\n\nParameter Recovery:\n- alpha: r = 0.593\n- lambda_param: r = 0.230\n- gamma_self: r = 0.846\n- beta: r = 0.447\n- xi: r = 0.597"
  ]
}