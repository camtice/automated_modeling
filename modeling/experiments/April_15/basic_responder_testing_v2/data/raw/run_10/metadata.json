{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "```text\nInstructions:\n<think>\nThe previous model (run 9) had good beta recovery, but still poor alpha and lambda recovery. The BIC was mediocre, and accuracy was only okay. The multiplicative interaction between fairness and amount seems promising and should be kept. However, the fairness calculation needs refinement, and the loss aversion term may be too simplistic or interact poorly with the other terms. The issue is that `split_self / combined_earning` still may not be the best way to measure fairness. Also, it might be too similar to the way loss aversion is calculated, leading to collinearity between alpha and lambda.\n\nHere's what I'll suggest for the next iteration (run 10):\n\n1.  **Refine Fairness Calculation:** Instead of `split_self / combined_earning`, explore a different way to scale split_self. I suggest a modified \"fairness\" calculation that considers the ratio of one's own tokens to the total tokens and incorporates a *reference point* based on the combined earning. Make the \"fair share\" be the *amount* a participant should expect rather than just a ratio, such as `FairShare = (token_self / (token_self + token_opp)) * combined_earning`. Then, calculate how far the split is away from the FairShare rather than the ratio, as in `Fairness = FairShare - split_self`.\n\n2.  **Re-Evaluate Loss Aversion:** Given the issues with lambda_param's recovery, consider a non-linear loss aversion term. A power function such as `(Fairness < 0 ? lambda_param * abs(Fairness)**rho : 0)` may work better. This introduces a new parameter (rho) to control the curvature of the loss aversion.\n\n3.  **Amount Sensitivity:** Keep `log(split_self + 1)` as is.\n\n4.  **Multiplicative Interaction:** Retain the multiplicative interaction between fairness and amount.\n\n5.  **Trial Type:** Trial type is still implicitly considered, so no changes there.\n\n6.  **Parameter Bounds:** Keep parameter bounds relatively tight, but adjust as needed for the new rho parameter.\n\n7.  **Number of Parameters:** Aim for 4 parameters again.\n</think>\n\nBe EXTREMELY considerate of high covariance between learnable parameters in the model. Aim for an appropriate number of learnable parameters, with a strong bias toward fewer if it improves parameter identifiability. The model should propose a significantly different BIC than previous models, hopefully lower.\n\nWhen developing your model, reason step by step about:\n\n*   The *most essential* psychological mechanisms involved: fairness, loss aversion, and amount sensitivity. How are these mechanisms *fundamentally* calculated and perceived, especially with regards to trial type? What are the *minimal* number of parameters needed to capture these, with emphasis on fairness?\n*   How these mechanisms *fundamentally* interact. Are the interactions multiplicative, additive, or something else? Justify your choice based on theory or intuition. Pay special attention to how fairness and amount sensitivity influence each other.\n*   What *simple* mathematical form could capture these interactions. Focus on ratios and logarithmic functions.\n*   What parameters are *absolutely necessary* to calibrate the model, focusing ruthlessly on potential parameter covariance and identifiability issues. What are the ranges of these parameters?\n*   How the *core* model variables map to observable behavior.\n\nIncorporate *strong* prior knowledge or constraints that could reduce parameter covariance and improve parameter identifiability. Given the failure of previous attempts to model trial_type as a direct utility effect, consider alternative approaches that modulate the fairness calculation. Pay special attention to potentially high correlation between the weighting of fairness (alpha), and the loss aversion term (lambda_param), and attempt to reduce this collinearity.\n```",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: ```text\nInstructions:\n<think>\nThe previous model (run 9) had good beta recovery, but still poor alpha and lambda recovery. The BIC was mediocre, and accuracy was only okay. The multiplicative interaction between fairness and amount seems promising and should be kept. However, the fairness calculation needs refinement, and the loss aversion term may be too simplistic or interact poorly with the other terms. The issue is that `split_self / combined_earning` still may not be the best way to measure fairness. Also, it might be too similar to the way loss aversion is calculated, leading to collinearity between alpha and lambda.\n\nHere's what I'll suggest for the next iteration (run 10):\n\n1.  **Refine Fairness Calculation:** Instead of `split_self / combined_earning`, explore a different way to scale split_self. I suggest a modified \"fairness\" calculation that considers the ratio of one's own tokens to the total tokens and incorporates a *reference point* based on the combined earning. Make the \"fair share\" be the *amount* a participant should expect rather than just a ratio, such as `FairShare = (token_self / (token_self + token_opp)) * combined_earning`. Then, calculate how far the split is away from the FairShare rather than the ratio, as in `Fairness = FairShare - split_self`.\n\n2.  **Re-Evaluate Loss Aversion:** Given the issues with lambda_param's recovery, consider a non-linear loss aversion term. A power function such as `(Fairness < 0 ? lambda_param * abs(Fairness)**rho : 0)` may work better. This introduces a new parameter (rho) to control the curvature of the loss aversion.\n\n3.  **Amount Sensitivity:** Keep `log(split_self + 1)` as is.\n\n4.  **Multiplicative Interaction:** Retain the multiplicative interaction between fairness and amount.\n\n5.  **Trial Type:** Trial type is still implicitly considered, so no changes there.\n\n6.  **Parameter Bounds:** Keep parameter bounds relatively tight, but adjust as needed for the new rho parameter.\n\n7.  **Number of Parameters:** Aim for 4 parameters again.\n</think>\n\nBe EXTREMELY considerate of high covariance between learnable parameters in the model. Aim for an appropriate number of learnable parameters, with a strong bias toward fewer if it improves parameter identifiability. The model should propose a significantly different BIC than previous models, hopefully lower.\n\nWhen developing your model, reason step by step about:\n\n*   The *most essential* psychological mechanisms involved: fairness, loss aversion, and amount sensitivity. How are these mechanisms *fundamentally* calculated and perceived, especially with regards to trial type? What are the *minimal* number of parameters needed to capture these, with emphasis on fairness?\n*   How these mechanisms *fundamentally* interact. Are the interactions multiplicative, additive, or something else? Justify your choice based on theory or intuition. Pay special attention to how fairness and amount sensitivity influence each other.\n*   What *simple* mathematical form could capture these interactions. Focus on ratios and logarithmic functions.\n*   What parameters are *absolutely necessary* to calibrate the model, focusing ruthlessly on potential parameter covariance and identifiability issues. What are the ranges of these parameters?\n*   How the *core* model variables map to observable behavior.\n\nIncorporate *strong* prior knowledge or constraints that could reduce parameter covariance and improve parameter identifiability. Given the failure of previous attempts to model trial_type as a direct utility effect, consider alternative approaches that modulate the fairness calculation. Pay special attention to potentially high correlation between the weighting of fairness (alpha), and the loss aversion term (lambda_param), and attempt to reduce this collinearity.\n```\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, let's break down this computational modeling task. The goal is to predict whether a participant will accept or reject a proposed split of money in a bargaining game. The core psychological drivers are fairness, loss aversion, and sensitivity to the amount of money offered. The model must be parsimonious, identifiable, and have good parameter recovery.\n\nHere's the plan:\n\n1.  **Fairness Calculation:** As discussed, instead of relative proportions, focus on absolute deviations from what the participant *expects* as a fair share. The fair share will be defined as the proportion of tokens found by the participant relative to the total tokens available, multiplied by the combined earning. Fairness will be this `FairShare - split_self`.\n\n2.  **Loss Aversion:** Use a power function to model loss aversion, introducing a `rho` parameter to allow for non-linearity in the response to unfair offers. So if `Fairness` is less than zero (i.e. the participant receives less than their fair share), the loss is scaled by `lambda_param * abs(Fairness)**rho`.\n\n3.  **Amount Sensitivity:** Use `log(split_self + 1)` to model sensitivity to the amount offered. The +1 is used because log(0) is not defined, but split_self could be 0.\n\n4.  **Interaction:** Keep the multiplicative interaction between fairness and amount.\n\n5.  **Utility Function:** Combine the fairness, loss aversion, and amount sensitivity components into a utility function.\n\n6.  **Choice Rule:** Use a logistic function to map the utility to a probability of accepting the offer.\n\n7.  **Parameter Constraints:** Carefully select parameter bounds to promote identifiability.\n\nHere's the model specification:\n\n```\n<MODEL>\nFairShare = (token_self / (token_self + token_opp)) * combined_earning\nFairness = FairShare - split_self\nLoss = Fairness < 0 ? lambda_param * abs(Fairness)**rho : 0\nU = alpha * Fairness * log(split_self + 1) - Loss + beta * log(split_self + 1)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"FairShare\": {\n      \"description\": \"The amount of money the participant should fairly expect\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Fairness\": {\n      \"description\": \"The difference between the fair share and the proposed split for the participant.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Loss\": {\n      \"description\": \"Loss aversion component of the utility function. Only applies if Fairness is negative.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Weighting of fairness * log(split_self + 1) in the utility function\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Weighting of log(split_self + 1)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion parameter: magnitude of the pain of receiving less than the fair share.\",\n      \"range\": {\n        \"min\": 0.001,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"rho\": {\n      \"description\": \"Exponent for loss aversion, which can be used to change the shape of the loss aversion curve.\",\n      \"range\": {\n        \"min\": 0.001,\n        \"max\": 5\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n     \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total earnings from the task.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nThis model predicts responder behavior in an ultimatum game, focusing on fairness, loss aversion, and amount sensitivity. Fairness is calculated as the difference between the participant's expected fair share and the offer. Loss aversion is modeled with a power function scaled by lambda_param, only active when the offer is unfair. The utility function combines fairness, loss aversion, and the log of the offer amount, with parameters alpha, beta, lambda_param, and rho controlling the weighting of these components.\n</SUMMARY>\n```"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta', 'lambda_param', 'rho']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                FairShare = (token_self / (token_self + token_opp)) * combined_earning\nFairness = FairShare - split_self\nLoss = Fairness < 0 ? lambda_param * abs(Fairness)**rho : 0\nU = alpha * Fairness * log(split_self + 1) - Loss + beta * log(split_self + 1)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"FairShare\": {\n      \"description\": \"The amount of money the participant should fairly expect\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Fairness\": {\n      \"description\": \"The difference between the fair share and the proposed split for the participant.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Loss\": {\n      \"description\": \"Loss aversion component of the utility function. Only applies if Fairness is negative.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Weighting of fairness * log(split_self + 1) in the utility function\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Weighting of log(split_self + 1)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion parameter: magnitude of the pain of receiving less than the fair share.\",\n      \"range\": {\n        \"min\": 0.001,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"rho\": {\n      \"description\": \"Exponent for loss aversion, which can be used to change the shape of the loss aversion curve.\",\n      \"range\": {\n        \"min\": 0.001,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total earnings from the task.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=0, beta=0, lambda_param=1, rho=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        total_tokens = token_self + token_opp\n\n        # Handle the case where both are zero to avoid division by zero\n        if total_tokens == 0:\n            FairShare = combined_earning / 2  # Assume equal split if no tokens\n        else:\n            FairShare = (token_self / total_tokens) * combined_earning\n\n        Fairness = FairShare - split_self\n\n        if Fairness < 0:\n            Loss = lambda_param * abs(Fairness)**rho\n        else:\n            Loss = 0\n\n        U = alpha * Fairness * math.log(split_self + 1) - Loss + beta * math.log(split_self + 1)\n        model_predictions.append(U) # Return utility directly as per instructions.  A logistic function would be used to get probability.\n\n    return model_predictions\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744714008.423606
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Weighting of fairness * log(split_self + 1) in the utility function",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Weighting of log(split_self + 1)",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Loss aversion parameter: magnitude of the pain of receiving less than the fair share.",
      "range": {
        "min": 0.001,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "rho": {
      "description": "Exponent for loss aversion, which can be used to change the shape of the loss aversion curve.",
      "range": {
        "min": 0.001,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "FairShare = (token_self / (token_self + token_opp)) * combined_earning\nFairness = FairShare - split_self\nLoss = Fairness < 0 ? lambda_param * abs(Fairness)**rho : 0\nU = alpha * Fairness * log(split_self + 1) - Loss + beta * log(split_self + 1)",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "FairShare": {
      "description": "The amount of money the participant should fairly expect",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Fairness": {
      "description": "The difference between the fair share and the proposed split for the participant.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Loss": {
      "description": "Loss aversion component of the utility function. Only applies if Fairness is negative.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Weighting of fairness * log(split_self + 1) in the utility function",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Weighting of log(split_self + 1)",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Loss aversion parameter: magnitude of the pain of receiving less than the fair share.",
      "range": {
        "min": 0.001,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "rho": {
      "description": "Exponent for loss aversion, which can be used to change the shape of the loss aversion curve.",
      "range": {
        "min": 0.001,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total earnings from the task.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "The proposed share for the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "This model predicts responder behavior in an ultimatum game, focusing on fairness, loss aversion, and amount sensitivity. Fairness is calculated as the difference between the participant's expected fair share and the offer. Loss aversion is modeled with a power function scaled by lambda_param, only active when the offer is unfair. The utility function combines fairness, loss aversion, and the log of the offer amount, with parameters alpha, beta, lambda_param, and rho controlling the weighting of these components.",
  "target_variable": "accept",
  "full_reasoning": "Okay, let's break down this computational modeling task. The goal is to predict whether a participant will accept or reject a proposed split of money in a bargaining game. The core psychological drivers are fairness, loss aversion, and sensitivity to the amount of money offered. The model must be parsimonious, identifiable, and have good parameter recovery.\n\nHere's the plan:\n\n1.  **Fairness Calculation:** As discussed, instead of relative proportions, focus on absolute deviations from what the participant *expects* as a fair share. The fair share will be defined as the proportion of tokens found by the participant relative to the total tokens available, multiplied by the combined earning. Fairness will be this `FairShare - split_self`.\n\n2.  **Loss Aversion:** Use a power function to model loss aversion, introducing a `rho` parameter to allow for non-linearity in the response to unfair offers. So if `Fairness` is less than zero (i.e. the participant receives less than their fair share), the loss is scaled by `lambda_param * abs(Fairness)**rho`.\n\n3.  **Amount Sensitivity:** Use `log(split_self + 1)` to model sensitivity to the amount offered. The +1 is used because log(0) is not defined, but split_self could be 0.\n\n4.  **Interaction:** Keep the multiplicative interaction between fairness and amount.\n\n5.  **Utility Function:** Combine the fairness, loss aversion, and amount sensitivity components into a utility function.\n\n6.  **Choice Rule:** Use a logistic function to map the utility to a probability of accepting the offer.\n\n7.  **Parameter Constraints:** Carefully select parameter bounds to promote identifiability.\n\nHere's the model specification:\n\n```\n<MODEL>\nFairShare = (token_self / (token_self + token_opp)) * combined_earning\nFairness = FairShare - split_self\nLoss = Fairness < 0 ? lambda_param * abs(Fairness)**rho : 0\nU = alpha * Fairness * log(split_self + 1) - Loss + beta * log(split_self + 1)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"FairShare\": {\n      \"description\": \"The amount of money the participant should fairly expect\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Fairness\": {\n      \"description\": \"The difference between the fair share and the proposed split for the participant.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Loss\": {\n      \"description\": \"Loss aversion component of the utility function. Only applies if Fairness is negative.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Weighting of fairness * log(split_self + 1) in the utility function\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Weighting of log(split_self + 1)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion parameter: magnitude of the pain of receiving less than the fair share.\",\n      \"range\": {\n        \"min\": 0.001,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"rho\": {\n      \"description\": \"Exponent for loss aversion, which can be used to change the shape of the loss aversion curve.\",\n      \"range\": {\n        \"min\": 0.001,\n        \"max\": 5\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n     \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total earnings from the task.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nThis model predicts responder behavior in an ultimatum game, focusing on fairness, loss aversion, and amount sensitivity. Fairness is calculated as the difference between the participant's expected fair share and the offer. Loss aversion is modeled with a power function scaled by lambda_param, only active when the offer is unfair. The utility function combines fairness, loss aversion, and the log of the offer amount, with parameters alpha, beta, lambda_param, and rho controlling the weighting of these components.\n</SUMMARY>\n```",
  "prediction_type": "utility",
  "current_model": "Specification: FairShare = (token_self / (token_self + token_opp)) * combined_earning\nFairness = FairShare - split_self\nLoss = Fairness < 0 ? lambda_param * abs(Fairness)**rho : 0\nU = alpha * Fairness * log(split_self + 1) - Loss + beta * log(split_self + 1)\nSummary: This model predicts responder behavior in an ultimatum game, focusing on fairness, loss aversion, and amount sensitivity. Fairness is calculated as the difference between the participant's expected fair share and the offer. Loss aversion is modeled with a power function scaled by lambda_param, only active when the offer is unfair. The utility function combines fairness, loss aversion, and the log of the offer amount, with parameters alpha, beta, lambda_param, and rho controlling the weighting of these components.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=0, beta=0, lambda_param=1, rho=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        total_tokens = token_self + token_opp\n\n        # Handle the case where both are zero to avoid division by zero\n        if total_tokens == 0:\n            FairShare = combined_earning / 2  # Assume equal split if no tokens\n        else:\n            FairShare = (token_self / total_tokens) * combined_earning\n\n        Fairness = FairShare - split_self\n\n        if Fairness < 0:\n            Loss = lambda_param * abs(Fairness)**rho\n        else:\n            Loss = 0\n\n        U = alpha * Fairness * math.log(split_self + 1) - Loss + beta * math.log(split_self + 1)\n        model_predictions.append(U) # Return utility directly as per instructions.  A logistic function would be used to get probability.\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7701465201465201,
  "fitting_results": [
    {
      "alpha": -1.1651301075835048,
      "beta": -0.25373184830266776,
      "lambda_param": 1.6127043032909387,
      "rho": 0.001,
      "success": true,
      "log_likelihood": -7.753330075761806,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.5787069569772354,
      "beta": 1.4552729260835078,
      "lambda_param": 0.001,
      "rho": 0.4811069014704816,
      "success": true,
      "log_likelihood": -18.024891723217152,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.980374500235744,
      "beta": 2.6798520646391095,
      "lambda_param": 0.001,
      "rho": 0.7412754264245421,
      "success": true,
      "log_likelihood": -13.14480194706061,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.582872933386823,
      "beta": 1.2012220677254424,
      "lambda_param": 0.001,
      "rho": 0.9183707049596526,
      "success": true,
      "log_likelihood": -17.9506923606428,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -1.5078423581634444,
      "beta": 3.1435072242821462,
      "lambda_param": 0.001,
      "rho": 2.0956003775204066,
      "success": true,
      "log_likelihood": -8.755136378603124,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.820862032870152,
      "beta": 2.842136611844281,
      "lambda_param": 0.001,
      "rho": 1.3049881731111614,
      "success": true,
      "log_likelihood": -14.112237962238623,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.2334998534305397,
      "beta": 10.0,
      "lambda_param": 0.001,
      "rho": 2.9756604881686273,
      "success": true,
      "log_likelihood": -3.7711109928674066e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -1.1711638236923776,
      "beta": 4.132715068940033,
      "lambda_param": 0.001,
      "rho": 0.05621646178130588,
      "success": true,
      "log_likelihood": -11.252150441338298,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.21274845970626,
      "beta": 10.0,
      "lambda_param": 0.001,
      "rho": 2.897624090038467,
      "success": true,
      "log_likelihood": -3.7696645207934565e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.8491406093444096,
      "beta": 1.479408015327617,
      "lambda_param": 0.001,
      "rho": 2.1605607993823375,
      "success": true,
      "log_likelihood": -14.224734470670302,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -1.3282326039886834,
      "beta": 2.9655174548268697,
      "lambda_param": 0.001,
      "rho": 3.2847982585588147,
      "success": true,
      "log_likelihood": -9.97802196207147,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -1.0500278240559557,
      "beta": 0.0150139557363293,
      "lambda_param": 1.8469413259266994,
      "rho": 0.001,
      "success": true,
      "log_likelihood": -9.475584092711614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -1.4073981315621427,
      "beta": 2.7548924690039795,
      "lambda_param": 0.001,
      "rho": 1.9742095865675284,
      "success": true,
      "log_likelihood": -9.39619855314275,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.2244433779757227,
      "beta": 10.0,
      "lambda_param": 0.001,
      "rho": 0.8376062353082743,
      "success": true,
      "log_likelihood": -3.767709846458165e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.2387063127018707,
      "beta": 10.0,
      "lambda_param": 0.001,
      "rho": 0.4307518045103122,
      "success": true,
      "log_likelihood": -3.769758529125153e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.211858494806688,
      "beta": 10.0,
      "lambda_param": 0.001,
      "rho": 0.001,
      "success": true,
      "log_likelihood": -3.7673289997069466e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.221475696403726,
      "beta": 10.0,
      "lambda_param": 0.001,
      "rho": 2.2847257273697217,
      "success": true,
      "log_likelihood": -3.768781412974795e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.585378175133212,
      "beta": 3.616889493861445,
      "lambda_param": 0.001,
      "rho": 0.0010017387337694333,
      "success": true,
      "log_likelihood": -8.634622516772588,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -1.1537508649265393,
      "beta": 6.15384560406902,
      "lambda_param": 0.001,
      "rho": 0.001,
      "success": true,
      "log_likelihood": -5.796772154949449,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.1905627530052856,
      "beta": 10.0,
      "lambda_param": 0.001,
      "rho": 0.001,
      "success": true,
      "log_likelihood": -3.771624053337835e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.8613138080541073,
      "beta": 2.414849383714659,
      "lambda_param": 0.001,
      "rho": 1.3838228055811328,
      "success": true,
      "log_likelihood": -14.350150934685429,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.8964595807378498,
      "beta": 4.671749875604452,
      "lambda_param": 0.001,
      "rho": 1.9646491078026176,
      "success": true,
      "log_likelihood": -7.998718291909521,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.32129107675687146,
      "beta": 0.4663319849703841,
      "lambda_param": 0.001,
      "rho": 0.0023121576308296012,
      "success": true,
      "log_likelihood": -21.68780518212208,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.4648512053707887,
      "beta": 1.347517990697407,
      "lambda_param": 0.001,
      "rho": 0.4997670319745261,
      "success": true,
      "log_likelihood": -19.46484351921232,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -1.3577057999451998,
      "beta": 3.208589330216175,
      "lambda_param": 0.001,
      "rho": 2.2137051415165687,
      "success": true,
      "log_likelihood": -9.815059948418464,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.5524982282728467,
      "beta": 1.7958778183371886,
      "lambda_param": 0.001,
      "rho": 1.6478074225607513,
      "success": true,
      "log_likelihood": -17.722956665175886,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.7053499118227856,
      "beta": 2.132171060328182,
      "lambda_param": 0.001,
      "rho": 2.024086438731825,
      "success": true,
      "log_likelihood": -15.99429146430645,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -2.595988954683712,
      "beta": 2.753626339648449,
      "lambda_param": 0.001,
      "rho": 1.4578582591654112,
      "success": true,
      "log_likelihood": -5.900523212594609,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.801916299817549,
      "beta": 4.43042985894943,
      "lambda_param": 0.001,
      "rho": 0.22932741619377492,
      "success": true,
      "log_likelihood": -7.884350517288659,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -2.406952556737238,
      "beta": 9.999996280606618,
      "lambda_param": 0.001,
      "rho": 3.119362226592919,
      "success": true,
      "log_likelihood": -25.756933375668076,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.2311286648287045,
      "beta": 10.0,
      "lambda_param": 0.001,
      "rho": 0.001,
      "success": true,
      "log_likelihood": -3.768055975891994e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -1.1651230373298889,
      "beta": -0.25373348493968884,
      "lambda_param": 1.6126478314413764,
      "rho": 0.001,
      "success": true,
      "log_likelihood": -7.753330075586279,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.218159068730005,
      "beta": 0.4004815355464987,
      "lambda_param": 0.001,
      "rho": 2.161575685840509,
      "success": true,
      "log_likelihood": -23.403112225172464,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.5097104144316686,
      "beta": 0.8773144284125955,
      "lambda_param": 0.001,
      "rho": 1.9694974048568816,
      "success": true,
      "log_likelihood": -18.863485410523552,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.2401280872095573,
      "beta": 10.0,
      "lambda_param": 0.001,
      "rho": 0.001,
      "success": true,
      "log_likelihood": -3.769924755403491e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.30666624151792665,
      "beta": 1.4160540342565844,
      "lambda_param": 0.001,
      "rho": 0.10189273900716905,
      "success": true,
      "log_likelihood": -19.27768782718389,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.8364596674030654,
      "beta": 3.275788077124943,
      "lambda_param": 0.001,
      "rho": 1.4362253800631806,
      "success": true,
      "log_likelihood": -12.925795263408162,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.9316700729663169,
      "beta": 2.2785577240352026,
      "lambda_param": 0.001,
      "rho": 1.7904741436609812,
      "success": true,
      "log_likelihood": -13.60322480255578,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.6096544371569498,
      "beta": 2.2090395480719884,
      "lambda_param": 0.001,
      "rho": 1.8798024444861159,
      "success": true,
      "log_likelihood": -16.24283749763179,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.4638677611580397,
      "beta": 3.319820060513189,
      "lambda_param": 0.001,
      "rho": 0.5089028934253519,
      "success": true,
      "log_likelihood": -8.212943553654593,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.727379300381675,
      "beta": 2.264829818674097,
      "lambda_param": 0.001,
      "rho": 1.6831937734097242,
      "success": true,
      "log_likelihood": -15.630786853993012,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.7142736519717626,
      "beta": 0.36422820968138536,
      "lambda_param": 0.001,
      "rho": 0.027598359539245245,
      "success": true,
      "log_likelihood": -13.770336039308372,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.377087039169927,
      "beta": 10.0,
      "lambda_param": 0.001,
      "rho": 1.2004870311056541,
      "success": true,
      "log_likelihood": -23.02587911195247,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.4358679640111433,
      "beta": 1.3738506846492053,
      "lambda_param": 0.001,
      "rho": 0.9590865532449783,
      "success": true,
      "log_likelihood": -19.625951695533058,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.6074894229049569,
      "beta": 2.077482673579544,
      "lambda_param": 0.001,
      "rho": 2.4885236710820315,
      "success": true,
      "log_likelihood": -16.676568606186322,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.2381408871854824,
      "beta": 1.4486047678846405,
      "lambda_param": 0.001,
      "rho": 1.6528000996556451,
      "success": true,
      "log_likelihood": -18.086083976630118,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.6676225097147623,
      "beta": 1.8266150696776786,
      "lambda_param": 0.001,
      "rho": 2.5813705309771944,
      "success": true,
      "log_likelihood": -16.69674098686608,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.3477303192333484,
      "beta": 0.5598246633406191,
      "lambda_param": 0.001,
      "rho": 1.543426963399434,
      "success": true,
      "log_likelihood": -21.38477308013557,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -1.6041998725522917,
      "beta": 2.86976338900006,
      "lambda_param": 0.001,
      "rho": 1.7918499122821672,
      "success": true,
      "log_likelihood": -8.307500289011537,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.17782177296986948,
      "beta": 0.6235218902770352,
      "lambda_param": 1.3148011945819948,
      "rho": 0.001,
      "success": true,
      "log_likelihood": -23.787610000300035,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.35554231343898957,
      "beta": 1.6000029381180578,
      "lambda_param": 0.001,
      "rho": 1.1027246631269185,
      "success": true,
      "log_likelihood": -18.42906440912907,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.44506064236415926,
      "beta": -0.36286240849329704,
      "lambda_param": 0.1858429196160568,
      "rho": 0.001,
      "success": true,
      "log_likelihood": -13.905610484905338,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.25176702593034284,
      "beta": 0.8341378563309267,
      "lambda_param": 0.001,
      "rho": 0.15733820094318116,
      "success": true,
      "log_likelihood": -22.44118360929027,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.11173993470808226,
      "beta": 0.6833192083522119,
      "lambda_param": 1.2970020557845,
      "rho": 0.001,
      "success": true,
      "log_likelihood": -23.149082089122835,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.5263043667822197,
      "beta": 0.7815885200226664,
      "lambda_param": 0.001,
      "rho": 1.7416709974180657,
      "success": true,
      "log_likelihood": -18.36737909216278,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -1.710666140182089,
      "beta": 2.4775340137252777,
      "lambda_param": 0.001,
      "rho": 1.1027980494305365,
      "success": true,
      "log_likelihood": -7.993324080255814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -1.0131937958936803,
      "beta": 1.0595459889228624,
      "lambda_param": 0.001,
      "rho": 1.9981717866308368,
      "success": true,
      "log_likelihood": -11.85923917282728,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.34385825633536354,
      "beta": 0.8446592836081193,
      "lambda_param": 0.001,
      "rho": 0.0015220293675201777,
      "success": true,
      "log_likelihood": -11.567016320646676,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.8794100168948107,
      "beta": -0.1118932862392364,
      "lambda_param": 1.3458000614339818,
      "rho": 0.001,
      "success": true,
      "log_likelihood": -10.177626563183576,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.2114876723255553,
      "beta": 1.7331370881361847,
      "lambda_param": 0.001,
      "rho": 0.0011394377410594726,
      "success": true,
      "log_likelihood": -14.852281520515783,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.4240485980914589,
      "beta": 1.4528630189492806,
      "lambda_param": 0.001,
      "rho": 0.42743277907193694,
      "success": true,
      "log_likelihood": -19.40912560607227,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.9229861575583244,
      "beta": 2.252718527115824,
      "lambda_param": 0.001,
      "rho": 2.608899099152778,
      "success": true,
      "log_likelihood": -13.695698235875323,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -1.165114936808825,
      "beta": -0.25374664900919597,
      "lambda_param": 1.612639807285834,
      "rho": 0.001,
      "success": true,
      "log_likelihood": -7.7533300757687265,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.24066924515646748,
      "beta": 0.5268515359708665,
      "lambda_param": 0.001,
      "rho": 0.049700606940402584,
      "success": true,
      "log_likelihood": -23.148371390740618,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.7694696914635478,
      "beta": 0.48413457400418625,
      "lambda_param": 0.001,
      "rho": 1.5639115191203976,
      "success": true,
      "log_likelihood": -13.422594481885092,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.5268670448939976,
      "beta": 1.6407112242300896,
      "lambda_param": 0.001,
      "rho": 1.1061873586324655,
      "success": true,
      "log_likelihood": -18.287820409409733,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.6020654175697115,
      "beta": 3.927274416567485,
      "lambda_param": 0.001,
      "rho": 2.2925432480147254,
      "success": true,
      "log_likelihood": -7.379387055886951,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.5401850387524637,
      "beta": 3.1172828308723055,
      "lambda_param": 0.001,
      "rho": 2.0170151014464435,
      "success": true,
      "log_likelihood": -10.70206379773792,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.27801748816997074,
      "beta": 1.0313064925261322,
      "lambda_param": 0.001,
      "rho": 1.0627716263190632,
      "success": true,
      "log_likelihood": -21.522874278727777,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.19996164143890358,
      "beta": 2.234287190715332,
      "lambda_param": 0.001,
      "rho": 1.1029361722552329,
      "success": true,
      "log_likelihood": -10.191996909859313,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -10.0,
      "beta": 1.291849571588108,
      "lambda_param": 0.30167102865702405,
      "rho": 4.341980414741406,
      "success": true,
      "log_likelihood": -0.33485795414138886,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.5987570638568704,
      "beta": -0.1526433104791631,
      "lambda_param": 0.7923830564540391,
      "rho": 0.001,
      "success": true,
      "log_likelihood": -13.013254131295733,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.580860844297912,
      "beta": 1.6009169343846148,
      "lambda_param": 0.001,
      "rho": 0.0018439397903895708,
      "success": true,
      "log_likelihood": -17.871749671965574,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.21765352395046378,
      "beta": 1.606306303295908,
      "lambda_param": 0.001,
      "rho": 0.00290951368863341,
      "success": true,
      "log_likelihood": -16.2041584360885,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.33714899039092316,
      "beta": 0.9272639400288103,
      "lambda_param": 1.163285004163082,
      "rho": 5.0,
      "success": true,
      "log_likelihood": -21.32841989298616,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.963411703921405,
      "beta": 3.5613072568576585,
      "lambda_param": 0.001,
      "rho": 3.1354848159929505,
      "success": true,
      "log_likelihood": -12.373275326361927,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.5639939199212584,
      "beta": 4.079846830117332,
      "lambda_param": 0.001,
      "rho": 0.005062392246036439,
      "success": true,
      "log_likelihood": -6.159558579014771,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -1.3061356230639647,
      "beta": -0.4108438039261568,
      "lambda_param": 10.0,
      "rho": 0.2256432975649151,
      "success": true,
      "log_likelihood": -5.415371201971362,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.15629807677647228,
      "beta": 0.7612089224155213,
      "lambda_param": 0.001,
      "rho": 0.47412687816799337,
      "success": true,
      "log_likelihood": -22.662741381851166,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -1.1651245891820594,
      "beta": -0.2537361795261917,
      "lambda_param": 1.6126570666467026,
      "rho": 0.001,
      "success": true,
      "log_likelihood": -7.753330075527419,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.22527672799741824,
      "beta": 0.6551710242573509,
      "lambda_param": 0.001,
      "rho": 1.0138443871435783,
      "success": true,
      "log_likelihood": -23.14079012171831,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.006794926410785214,
      "beta": 1.6520460477995853,
      "lambda_param": 0.001,
      "rho": 4.9900497238834935,
      "success": true,
      "log_likelihood": -10.863381354138378,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.9535120875943229,
      "beta": 0.1267082678004637,
      "lambda_param": 10.0,
      "rho": 0.16637143580760194,
      "success": true,
      "log_likelihood": -9.394594890709994,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.4915368082747892,
      "beta": 1.4111302577662739,
      "lambda_param": 0.001,
      "rho": 0.7301237686961696,
      "success": true,
      "log_likelihood": -19.085343397225035,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.1858051364141938,
      "beta": 0.7305367717026517,
      "lambda_param": 0.001,
      "rho": 0.023354886662371385,
      "success": true,
      "log_likelihood": -22.968155492330716,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -1.2371445083354078,
      "beta": -0.12535110905179628,
      "lambda_param": 0.001,
      "rho": 0.31971689889367017,
      "success": true,
      "log_likelihood": -7.536907727824761,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.5010903284064276,
      "beta": 1.9839891189898784,
      "lambda_param": 0.001,
      "rho": 1.6906802465475939,
      "success": true,
      "log_likelihood": -17.048510829426657,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.746064352835033,
      "beta": 0.5155200789185234,
      "lambda_param": 1.181099280395421,
      "rho": 5.0,
      "success": true,
      "log_likelihood": -13.658647730178771,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.6155430896461642,
      "beta": 4.465788750941322,
      "lambda_param": 0.001,
      "rho": 0.004659673868531435,
      "success": true,
      "log_likelihood": -5.385134119837643,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.312999399051237,
      "beta": 0.8884642698523171,
      "lambda_param": 0.001,
      "rho": 0.24785377050481147,
      "success": true,
      "log_likelihood": -21.887075820720685,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.29710151214060426,
      "beta": 1.3468619048226131,
      "lambda_param": 0.001,
      "rho": 0.22080033925910308,
      "success": true,
      "log_likelihood": -19.683991641143027,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.8804891141078017,
        "p": 1.5541078679402746e-33
      },
      "beta": {
        "r": 0.7426458176643229,
        "p": 9.252328051728786e-19
      },
      "lambda_param": {
        "r": 0.33188701322463665,
        "p": 0.0007427560500495387
      },
      "rho": {
        "r": 0.3917494231803718,
        "p": 5.564058877869455e-05
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 40.36427605374196,
  "bic_results": {
    "average_bic": 40.36427605374196,
    "individual_bics": [
      29.84073590534805,
      50.38385920025874,
      40.623679647945664,
      50.235460475110045,
      31.844348511030688,
      42.55855167830168,
      14.334151176044298,
      36.83837663650104,
      14.334151147114856,
      42.78354469516505,
      34.29011967796738,
      33.285243939247664,
      33.12647286010994,
      14.334151108021368,
      14.334151148995023,
      14.334151100404434,
      14.3341511294527,
      31.603320787369615,
      25.92762006372334,
      14.334151186305506,
      43.0343776231953,
      30.33151233764348,
      57.7096861180686,
      53.26376279224908,
      33.96419565066137,
      49.77998908417621,
      46.322658682437336,
      26.135122179013656,
      30.10277678840176,
      65.84794250516059,
      14.334151114943957,
      29.840735904996997,
      61.140300204169364,
      52.06104657487154,
      14.334151152319548,
      52.889451408192215,
      40.18566628064076,
      41.540525358935994,
      46.819750749088016,
      30.759962861133626,
      45.59564946181047,
      41.87474783244119,
      60.385833977729376,
      53.58597914489056,
      47.68721296619708,
      50.50624370708468,
      47.7275577275566,
      57.103621914095584,
      30.949076331847515,
      61.909295754424505,
      51.192204572082574,
      42.14529672363511,
      59.21644297240498,
      60.63223993207011,
      51.06883393814999,
      30.320723914336067,
      38.052554099478996,
      37.468108395117795,
      34.689328880191596,
      44.038638794856006,
      53.15232696596898,
      41.72547222557509,
      29.840735905361893,
      60.63081853530568,
      41.17926471759462,
      50.9097165726439,
      29.092849865598343,
      35.73820334930028,
      57.37982431127999,
      34.71806957354306,
      15.003791662107217,
      40.360584016415906,
      50.077575097755584,
      46.74239262600143,
      56.99091553979676,
      39.08062640654829,
      26.65319291185398,
      25.164818157767165,
      59.659558517526776,
      29.840735904879278,
      60.61565599726106,
      36.060838462101195,
      33.12326553524443,
      52.50476254827451,
      60.27038673848587,
      29.40789120947396,
      48.43109741267776,
      41.65137121418198,
      25.104343993499725,
      58.108227395265814,
      53.7020590361105
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 4,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.880\n- beta: r = 0.743\n- lambda_param: r = 0.332\n- rho: r = 0.392",
  "previous_models": [
    "Specification: FairShare = (token_self / (token_self + token_opp)) * combined_earning\nFairness = FairShare - split_self\nLoss = Fairness < 0 ? lambda_param * abs(Fairness)**rho : 0\nU = alpha * Fairness * log(split_self + 1) - Loss + beta * log(split_self + 1)\nSummary: This model predicts responder behavior in an ultimatum game, focusing on fairness, loss aversion, and amount sensitivity. Fairness is calculated as the difference between the participant's expected fair share and the offer. Loss aversion is modeled with a power function scaled by lambda_param, only active when the offer is unfair. The utility function combines fairness, loss aversion, and the log of the offer amount, with parameters alpha, beta, lambda_param, and rho controlling the weighting of these components.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 40.36427605374196\nOverall Accuracy: 0.7701\n\nParameter Recovery:\n- alpha: r = 0.880\n- beta: r = 0.743\n- lambda_param: r = 0.332\n- rho: r = 0.392"
  ]
}