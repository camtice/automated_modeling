{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Instructions:\n<think>\nThe previous model had decent accuracy, but poor parameter recovery and a BIC that could be improved. The low parameter recovery suggests high covariance between the parameters or an insufficiently complex model. Let's focus on improving parameter recovery, which should also help with BIC. The recovery for gamma_self was high, whereas the others were not great.\n\nHere's what I'll do:\n\n1.  **Emphasize Prior Knowledge:** Remind the model to incorporate any prior knowledge or constraints that could reduce parameter covariance. For example, we could have a better prior belief about fairness_sensitivity (alpha), or amount_sensitivity (beta)\n2.  **Consider interaction terms:** Consider multiplicative interactions between the contribution weights and the fairness sensitivity.\n3.  **Encourage Alternative Functional Forms:** Suggest exploring different functional forms for fairness and loss aversion, rather than sticking to the standard linear or power law forms. Perhaps some kind of diminishing return should be considered.\n4.  **Suggest a Model Comparison Heuristic**: Given the previous model had a middling BIC, make sure that the model proposes a significantly different BIC.\n</think>\n\nBe VERY considerate of high covariance between learnable parameters in the model. Aim for an appropriate number of learnable parameters, with a slight bias toward fewer if it improves parameter identifiability. The model should propose a significantly different BIC than previous models.\n\nWhen developing your model, reason step by step about:\n\n*   The key psychological mechanisms involved\n*   How these mechanisms interact, including potential multiplicative or non-linear interactions\n*   What mathematical form could capture these interactions, exploring options beyond standard linear or power law functions (consider diminishing returns or other non-linear relationships)\n*   What parameters would be needed to calibrate the model, carefully considering potential parameter covariance and identifiability issues\n*   How the model variables map to observable behavior\n*   Incorporate any prior knowledge or constraints that could reduce parameter covariance and improve parameter identifiability. What are reasonable estimates of each learnable parameter?",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Instructions:\n<think>\nThe previous model had decent accuracy, but poor parameter recovery and a BIC that could be improved. The low parameter recovery suggests high covariance between the parameters or an insufficiently complex model. Let's focus on improving parameter recovery, which should also help with BIC. The recovery for gamma_self was high, whereas the others were not great.\n\nHere's what I'll do:\n\n1.  **Emphasize Prior Knowledge:** Remind the model to incorporate any prior knowledge or constraints that could reduce parameter covariance. For example, we could have a better prior belief about fairness_sensitivity (alpha), or amount_sensitivity (beta)\n2.  **Consider interaction terms:** Consider multiplicative interactions between the contribution weights and the fairness sensitivity.\n3.  **Encourage Alternative Functional Forms:** Suggest exploring different functional forms for fairness and loss aversion, rather than sticking to the standard linear or power law forms. Perhaps some kind of diminishing return should be considered.\n4.  **Suggest a Model Comparison Heuristic**: Given the previous model had a middling BIC, make sure that the model proposes a significantly different BIC.\n</think>\n\nBe VERY considerate of high covariance between learnable parameters in the model. Aim for an appropriate number of learnable parameters, with a slight bias toward fewer if it improves parameter identifiability. The model should propose a significantly different BIC than previous models.\n\nWhen developing your model, reason step by step about:\n\n*   The key psychological mechanisms involved\n*   How these mechanisms interact, including potential multiplicative or non-linear interactions\n*   What mathematical form could capture these interactions, exploring options beyond standard linear or power law functions (consider diminishing returns or other non-linear relationships)\n*   What parameters would be needed to calibrate the model, carefully considering potential parameter covariance and identifiability issues\n*   How the model variables map to observable behavior\n*   Incorporate any prior knowledge or constraints that could reduce parameter covariance and improve parameter identifiability. What are reasonable estimates of each learnable parameter?\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, let's design a computational model for the ultimatum game, focusing on responder behavior. I'll emphasize fairness considerations, loss aversion, and response to money. I will attempt to create a more accurate model and a parameter recovery test, and use reasonable priors to improve parameter recovery.\n\nHere's my reasoning:\n\n1.  **Fairness:** People care about fairness. I'll use the difference between the proposed split and a \"fair\" split as a measure of fairness. The \"fair\" split will be based on the relative contributions of the participant and the opponent.\n2.  **Loss Aversion:** People dislike losing more than they like gaining. I'll incorporate a loss aversion parameter that penalizes offers below what the participant perceives as their \"fair\" share.\n3.  **Amount Sensitivity:** People are generally motivated by money. The utility of an offer should increase with the amount of money offered.\n4.  **Interaction:** Fairness considerations and amount sensitivity likely interact. A very unfair offer might be rejected even if the amount is substantial, while a slightly unfair offer might be accepted if the amount is high enough. Let's consider interaction terms between contribution weights and fairness.\n5.  **Parameter Identifiability:** High covariance between parameters can lead to poor parameter recovery. I'll try to minimize covariance by:\n\n    *   Using reasonable priors for parameters (e.g., fairness sensitivity should be positive).\n    *   Using a functional form that avoids redundancies.\n    *   Keeping the number of parameters relatively small.\n\nHere's the mathematical model:\n\n```\n<MODEL>\nU = beta * split_self + alpha * (token_self / (token_self + token_opp)) * max(0, split_self - (combined_earning * (token_self / (token_self + token_opp)))) - lambda_param * (token_self / (token_self + token_opp)) * max(0, (combined_earning * (token_self / (token_self + token_opp))) - split_self)\n</MODEL>\n\n```\n\nHere are the variable descriptions:\n\n```json\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Amount sensitivity parameter (how much the participant values money). Higher values indicate that the participant values the money more. Constrained to be positive.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Fairness sensitivity parameter (how much the participant cares about getting their fair share). Higher values indicate that the participant is more sensitive to unfairness. Constrained to be positive.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion parameter (how much more the participant dislikes getting less than their fair share, compared to liking getting more). Higher values indicate greater loss aversion. Constrained to be positive.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"The total amount of money earned (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n```\n\n```\n<target_variable>accept</target_variable>\n```\n\n```\n<SUMMARY>\nThis model predicts responder behavior in the ultimatum game. It calculates the utility of accepting an offer based on three factors: amount sensitivity (beta), fairness sensitivity (alpha), and loss aversion (lambda_param). The model incorporates the relative contributions of the participant and opponent to determine a \"fair\" split. The fairness and loss aversion parameters are weighted by the participants relative contribution.\n</SUMMARY>\n```"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta', 'alpha', 'lambda_param']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = beta * split_self + alpha * (token_self / (token_self + token_opp)) * max(0, split_self - (combined_earning * (token_self / (token_self + token_opp)))) - lambda_param * (token_self / (token_self + token_opp)) * max(0, (combined_earning * (token_self / (token_self + token_opp))) - split_self)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Amount sensitivity parameter (how much the participant values money). Higher values indicate that the participant values the money more. Constrained to be positive.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Fairness sensitivity parameter (how much the participant cares about getting their fair share). Higher values indicate that the participant is more sensitive to unfairness. Constrained to be positive.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion parameter (how much more the participant dislikes getting less than their fair share, compared to liking getting more). Higher values indicate greater loss aversion. Constrained to be positive.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"The total amount of money earned (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=1, alpha=1, lambda_param=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate relative contribution\n        total_tokens = token_self + token_opp\n        if total_tokens == 0:\n            fair_share = combined_earning / 2  # Default to 50/50 if no tokens found\n            relative_contribution = 0.5 #Sets the relative contribution to 0.5 if no tokens found for either person\n        else:\n            relative_contribution = token_self / total_tokens\n            fair_share = combined_earning * relative_contribution\n\n        # Calculate utility\n        positive_diff = max(0, split_self - fair_share)\n        negative_diff = max(0, fair_share - split_self)\n\n        U = beta * split_self + alpha * relative_contribution * positive_diff - lambda_param * relative_contribution * negative_diff\n\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744713782.723857
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Amount sensitivity parameter (how much the participant values money). Higher values indicate that the participant values the money more. Constrained to be positive.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha": {
      "description": "Fairness sensitivity parameter (how much the participant cares about getting their fair share). Higher values indicate that the participant is more sensitive to unfairness. Constrained to be positive.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Loss aversion parameter (how much more the participant dislikes getting less than their fair share, compared to liking getting more). Higher values indicate greater loss aversion. Constrained to be positive.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = beta * split_self + alpha * (token_self / (token_self + token_opp)) * max(0, split_self - (combined_earning * (token_self / (token_self + token_opp)))) - lambda_param * (token_self / (token_self + token_opp)) * max(0, (combined_earning * (token_self / (token_self + token_opp))) - split_self)",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Amount sensitivity parameter (how much the participant values money). Higher values indicate that the participant values the money more. Constrained to be positive.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha": {
      "description": "Fairness sensitivity parameter (how much the participant cares about getting their fair share). Higher values indicate that the participant is more sensitive to unfairness. Constrained to be positive.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Loss aversion parameter (how much more the participant dislikes getting less than their fair share, compared to liking getting more). Higher values indicate greater loss aversion. Constrained to be positive.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "The proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "The total amount of money earned (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "This model predicts responder behavior in the ultimatum game. It calculates the utility of accepting an offer based on three factors: amount sensitivity (beta), fairness sensitivity (alpha), and loss aversion (lambda_param). The model incorporates the relative contributions of the participant and opponent to determine a \"fair\" split. The fairness and loss aversion parameters are weighted by the participants relative contribution.",
  "target_variable": "accept",
  "full_reasoning": "Okay, let's design a computational model for the ultimatum game, focusing on responder behavior. I'll emphasize fairness considerations, loss aversion, and response to money. I will attempt to create a more accurate model and a parameter recovery test, and use reasonable priors to improve parameter recovery.\n\nHere's my reasoning:\n\n1.  **Fairness:** People care about fairness. I'll use the difference between the proposed split and a \"fair\" split as a measure of fairness. The \"fair\" split will be based on the relative contributions of the participant and the opponent.\n2.  **Loss Aversion:** People dislike losing more than they like gaining. I'll incorporate a loss aversion parameter that penalizes offers below what the participant perceives as their \"fair\" share.\n3.  **Amount Sensitivity:** People are generally motivated by money. The utility of an offer should increase with the amount of money offered.\n4.  **Interaction:** Fairness considerations and amount sensitivity likely interact. A very unfair offer might be rejected even if the amount is substantial, while a slightly unfair offer might be accepted if the amount is high enough. Let's consider interaction terms between contribution weights and fairness.\n5.  **Parameter Identifiability:** High covariance between parameters can lead to poor parameter recovery. I'll try to minimize covariance by:\n\n    *   Using reasonable priors for parameters (e.g., fairness sensitivity should be positive).\n    *   Using a functional form that avoids redundancies.\n    *   Keeping the number of parameters relatively small.\n\nHere's the mathematical model:\n\n```\n<MODEL>\nU = beta * split_self + alpha * (token_self / (token_self + token_opp)) * max(0, split_self - (combined_earning * (token_self / (token_self + token_opp)))) - lambda_param * (token_self / (token_self + token_opp)) * max(0, (combined_earning * (token_self / (token_self + token_opp))) - split_self)\n</MODEL>\n\n```\n\nHere are the variable descriptions:\n\n```json\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Amount sensitivity parameter (how much the participant values money). Higher values indicate that the participant values the money more. Constrained to be positive.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Fairness sensitivity parameter (how much the participant cares about getting their fair share). Higher values indicate that the participant is more sensitive to unfairness. Constrained to be positive.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion parameter (how much more the participant dislikes getting less than their fair share, compared to liking getting more). Higher values indicate greater loss aversion. Constrained to be positive.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"The total amount of money earned (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n```\n\n```\n<target_variable>accept</target_variable>\n```\n\n```\n<SUMMARY>\nThis model predicts responder behavior in the ultimatum game. It calculates the utility of accepting an offer based on three factors: amount sensitivity (beta), fairness sensitivity (alpha), and loss aversion (lambda_param). The model incorporates the relative contributions of the participant and opponent to determine a \"fair\" split. The fairness and loss aversion parameters are weighted by the participants relative contribution.\n</SUMMARY>\n```",
  "prediction_type": "utility",
  "current_model": "Specification: U = beta * split_self + alpha * (token_self / (token_self + token_opp)) * max(0, split_self - (combined_earning * (token_self / (token_self + token_opp)))) - lambda_param * (token_self / (token_self + token_opp)) * max(0, (combined_earning * (token_self / (token_self + token_opp))) - split_self)\nSummary: This model predicts responder behavior in the ultimatum game. It calculates the utility of accepting an offer based on three factors: amount sensitivity (beta), fairness sensitivity (alpha), and loss aversion (lambda_param). The model incorporates the relative contributions of the participant and opponent to determine a \"fair\" split. The fairness and loss aversion parameters are weighted by the participants relative contribution.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=1, alpha=1, lambda_param=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate relative contribution\n        total_tokens = token_self + token_opp\n        if total_tokens == 0:\n            fair_share = combined_earning / 2  # Default to 50/50 if no tokens found\n            relative_contribution = 0.5 #Sets the relative contribution to 0.5 if no tokens found for either person\n        else:\n            relative_contribution = token_self / total_tokens\n            fair_share = combined_earning * relative_contribution\n\n        # Calculate utility\n        positive_diff = max(0, split_self - fair_share)\n        negative_diff = max(0, fair_share - split_self)\n\n        U = beta * split_self + alpha * relative_contribution * positive_diff - lambda_param * relative_contribution * negative_diff\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7695360195360195,
  "fitting_results": [
    {
      "beta": 0.0,
      "alpha": 2.2578892945617217,
      "lambda_param": 3.129348975964865,
      "success": true,
      "log_likelihood": -9.0751102166466,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.4447416557530159,
      "alpha": 10.0,
      "lambda_param": 1.2100011687616248,
      "success": true,
      "log_likelihood": -17.437078155057208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4044801328934897,
      "alpha": 10.0,
      "lambda_param": 3.750036564041206,
      "success": true,
      "log_likelihood": -8.538083037671612,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5606410109418425,
      "alpha": 10.0,
      "lambda_param": 1.8199823116297178,
      "success": true,
      "log_likelihood": -14.562398802264989,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5175030246196988,
      "alpha": 8.297938534686129,
      "lambda_param": 5.503780782136346,
      "success": true,
      "log_likelihood": -6.562903980656582,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.9504044036190342,
      "alpha": 10.0,
      "lambda_param": 1.741938751038706,
      "success": true,
      "log_likelihood": -12.501363986050974,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "alpha": 9.493896289836288,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -1.294270312162549e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.9606944756676172,
      "alpha": 10.0,
      "lambda_param": 1.6891508917787315,
      "success": true,
      "log_likelihood": -12.44044665531684,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "alpha": 5.255135585295595,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -1.2942703121625492e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5896482803849825,
      "alpha": 10.0,
      "lambda_param": 2.4128642816563635,
      "success": true,
      "log_likelihood": -12.248326083275282,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.0432745792630915,
      "alpha": 5.536466191665467,
      "lambda_param": 10.0,
      "success": true,
      "log_likelihood": -3.1661439079537086,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.0,
      "alpha": 2.2574255583892855,
      "lambda_param": 2.6819073484792413,
      "success": true,
      "log_likelihood": -9.942078137117464,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.7943192345067441,
      "alpha": 10.0,
      "lambda_param": 2.983898701921829,
      "success": true,
      "log_likelihood": -10.69950538151086,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "alpha": 7.9769785708754215,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -1.294270312162549e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "alpha": 5.3090501201220155,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -1.2942703121625492e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "alpha": 7.0236681665182035,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -1.294270312162549e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "alpha": 8.923365299637332,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -1.2942703121625492e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.3643765203037947,
      "alpha": 9.022001369555982,
      "lambda_param": 2.6852450666472776,
      "success": true,
      "log_likelihood": -3.9183597131116463,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.1799898666432047,
      "alpha": 4.379051533627266,
      "lambda_param": 1.7250023835927462,
      "success": true,
      "log_likelihood": -5.752502689278471,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "alpha": 7.049431063568851,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -1.294270312162549e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.622133287484659,
      "alpha": 10.0,
      "lambda_param": 1.570406561159672,
      "success": true,
      "log_likelihood": -15.291907837245038,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4662272126930416,
      "alpha": 4.4309017541289135,
      "lambda_param": 1.185306433226176,
      "success": true,
      "log_likelihood": -8.282997052226454,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.23093425317974836,
      "alpha": 10.0,
      "lambda_param": 0.9727514067373182,
      "success": true,
      "log_likelihood": -18.94070804618141,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.45515215290551764,
      "alpha": 10.0,
      "lambda_param": 1.013396177177151,
      "success": true,
      "log_likelihood": -18.138253613131717,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6841598490324968,
      "alpha": 10.0,
      "lambda_param": 2.236043599553105,
      "success": true,
      "log_likelihood": -12.94320686870826,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6853375131873963,
      "alpha": 10.0,
      "lambda_param": 1.3955032404473355,
      "success": true,
      "log_likelihood": -15.260433515316876,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6949235761163615,
      "alpha": 7.596527187632927,
      "lambda_param": 1.4864888429149965,
      "success": true,
      "log_likelihood": -15.03815344536283,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8341653420650369,
      "alpha": 10.0,
      "lambda_param": 5.886864027955622,
      "success": true,
      "log_likelihood": -6.130300698212495,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.2744774903447325,
      "alpha": 6.088678604949126,
      "lambda_param": 0.8692815039371506,
      "success": true,
      "log_likelihood": -8.837317268123142,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6415596252555485,
      "alpha": 10.0,
      "lambda_param": 0.6240288225385233,
      "success": true,
      "log_likelihood": -15.768713083366285,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "alpha": 5.763225014373249,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -1.294270312162549e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.0,
      "alpha": 2.256941275547942,
      "lambda_param": 3.129247485426487,
      "success": true,
      "log_likelihood": -9.075110214241983,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.15871351075191267,
      "alpha": 10.0,
      "lambda_param": 0.5561955881204641,
      "success": true,
      "log_likelihood": -21.639015127441063,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.3240058343809803,
      "alpha": 10.0,
      "lambda_param": 1.3065865658307638,
      "success": true,
      "log_likelihood": -16.996700896212907,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "alpha": 4.119311422179578,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -1.2942703121625492e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.7545562350554101,
      "alpha": 10.0,
      "lambda_param": 1.031330690602042,
      "success": true,
      "log_likelihood": -14.790893744639623,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.6006616217960647,
      "alpha": 5.866689214317056,
      "lambda_param": 2.5018208729872655,
      "success": true,
      "log_likelihood": -7.805103235475954,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.613609781092304,
      "alpha": 10.0,
      "lambda_param": 1.8297770559688606,
      "success": true,
      "log_likelihood": -14.453295900536823,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5138902515808532,
      "alpha": 9.659838883085447,
      "lambda_param": 0.8179106350139282,
      "success": true,
      "log_likelihood": -17.926224318892608,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.8783606565759765,
      "alpha": 10.0,
      "lambda_param": 0.18893549876098217,
      "success": true,
      "log_likelihood": -9.59634444820303,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.4549357152497917,
      "alpha": 10.0,
      "lambda_param": 0.9221935665908291,
      "success": true,
      "log_likelihood": -18.408870751918663,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.11380758292936181,
      "alpha": 10.0,
      "lambda_param": 1.8496955583748607,
      "success": true,
      "log_likelihood": -12.568107748844575,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.006776368580639,
      "alpha": 1.5857572769809714,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -23.014307852963828,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.49346801316536054,
      "alpha": 10.0,
      "lambda_param": 0.9848657866085357,
      "success": true,
      "log_likelihood": -17.88780724394197,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.7860714785467845,
      "alpha": 10.0,
      "lambda_param": 1.4753659939736956,
      "success": true,
      "log_likelihood": -14.22352127577467,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5979511606518407,
      "alpha": 10.0,
      "lambda_param": 0.5298490037107798,
      "success": true,
      "log_likelihood": -16.194970404386492,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.4766090722573152,
      "alpha": 9.850274333727196,
      "lambda_param": 1.1524490840412152,
      "success": true,
      "log_likelihood": -17.51083222936975,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.22857844254329102,
      "alpha": 10.0,
      "lambda_param": 0.9150322721328712,
      "success": true,
      "log_likelihood": -19.33828298455098,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.7711891681361331,
      "alpha": 7.90869368872971,
      "lambda_param": 3.311797371473437,
      "success": true,
      "log_likelihood": -9.872124161753309,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.18270763014913266,
      "alpha": 0.348138852488135,
      "lambda_param": 0.28344549143924325,
      "success": true,
      "log_likelihood": -23.625377682338474,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5238223469451868,
      "alpha": 10.0,
      "lambda_param": 0.599427062458035,
      "success": true,
      "log_likelihood": -17.659443278322787,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.0,
      "alpha": 2.2574092544960296,
      "lambda_param": 1.472839097088239,
      "success": true,
      "log_likelihood": -14.275493264612141,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.35855074491231487,
      "alpha": 10.0,
      "lambda_param": 0.6955273912691108,
      "success": true,
      "log_likelihood": -19.938598226967834,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.30028164347958275,
      "alpha": 0.0,
      "lambda_param": 0.33692011502712893,
      "success": true,
      "log_likelihood": -21.91542439920637,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.2307340706522554,
      "alpha": 10.0,
      "lambda_param": 1.2759558331896075,
      "success": true,
      "log_likelihood": -16.814022362023,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5182967611821858,
      "alpha": 8.896335097067107,
      "lambda_param": 7.376123978242475,
      "success": true,
      "log_likelihood": -5.5043908029588104,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.34785786099466187,
      "alpha": 10.0,
      "lambda_param": 2.562448670086983,
      "success": true,
      "log_likelihood": -11.062536308620292,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5500882060752396,
      "alpha": 10.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -13.496146651866379,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.0,
      "alpha": 2.2574535738016253,
      "lambda_param": 2.3746730429898544,
      "success": true,
      "log_likelihood": -10.69802663072306,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6128841911891709,
      "alpha": 7.198522592678188,
      "lambda_param": 0.2412682141163184,
      "success": true,
      "log_likelihood": -14.331830107357217,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.36165737970684114,
      "alpha": 10.0,
      "lambda_param": 0.5862162557195683,
      "success": true,
      "log_likelihood": -20.102604699460638,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5219328291780597,
      "alpha": 10.0,
      "lambda_param": 1.5548575149460169,
      "success": true,
      "log_likelihood": -15.7185741268388,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.0,
      "alpha": 2.257442366829554,
      "lambda_param": 3.1292281454715156,
      "success": true,
      "log_likelihood": -9.075110207172042,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.2578591497440039,
      "alpha": 10.0,
      "lambda_param": 0.7606122470107607,
      "success": true,
      "log_likelihood": -20.3162128620846,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.188973375667346,
      "alpha": 10.0,
      "lambda_param": 2.0658205343644807,
      "success": true,
      "log_likelihood": -12.170074168338934,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5769932609650908,
      "alpha": 10.0,
      "lambda_param": 1.1679105997787118,
      "success": true,
      "log_likelihood": -16.683714686249324,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.0409341872760578,
      "alpha": 9.373946148805274,
      "lambda_param": 0.3415257298361368,
      "success": true,
      "log_likelihood": -8.644943657936217,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.9133656044360471,
      "alpha": 10.0,
      "lambda_param": 0.6041920573450226,
      "success": true,
      "log_likelihood": -11.646390957195164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5495801219953429,
      "alpha": 10.0,
      "lambda_param": 0.9632051451794698,
      "success": true,
      "log_likelihood": -17.334867627795116,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6615365185796361,
      "alpha": 7.835169464085012,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -11.425836944910676,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.16456845478920049,
      "alpha": 10.0,
      "lambda_param": 10.0,
      "success": true,
      "log_likelihood": -1.9447780581570757,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.0,
      "alpha": 2.257441671303321,
      "lambda_param": 1.571409498715622,
      "success": true,
      "log_likelihood": -13.743177113179906,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5934461871537002,
      "alpha": 10.0,
      "lambda_param": 1.4286856993661998,
      "success": true,
      "log_likelihood": -15.878562810904628,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6362443811395669,
      "alpha": 10.0,
      "lambda_param": 0.4028004002390853,
      "success": true,
      "log_likelihood": -14.916243009170119,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.18727069018673342,
      "alpha": 0.0,
      "lambda_param": 0.42259686547555836,
      "success": true,
      "log_likelihood": -23.337418774026883,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.7210014656709804,
      "alpha": 10.0,
      "lambda_param": 1.0791004424071762,
      "success": true,
      "log_likelihood": -15.204665041208443,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.1199959820901602,
      "alpha": 7.131924713230168,
      "lambda_param": 0.3035938131290992,
      "success": true,
      "log_likelihood": -7.593835066880166,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.0,
      "alpha": 0.0,
      "lambda_param": 3.329865470037974,
      "success": true,
      "log_likelihood": -8.91433502105382,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.21625593052281686,
      "alpha": 10.0,
      "lambda_param": 0.15211043348181902,
      "success": true,
      "log_likelihood": -21.865339579454925,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.0,
      "alpha": 2.257456531862061,
      "lambda_param": 3.1292315460028086,
      "success": true,
      "log_likelihood": -9.075110207179566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.16790482477850263,
      "alpha": 10.0,
      "lambda_param": 0.3631104678812525,
      "success": true,
      "log_likelihood": -22.509439501058313,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6498157942249168,
      "alpha": 8.802078070433112,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -11.618731132659976,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.0,
      "alpha": 0.0,
      "lambda_param": 2.374660030780645,
      "success": true,
      "log_likelihood": -10.859923452085228,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.924104434644423,
      "alpha": 9.642980290551158,
      "lambda_param": 2.1449091487770633,
      "success": true,
      "log_likelihood": -12.344955149441821,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.12733781114912698,
      "alpha": 10.0,
      "lambda_param": 0.11071833406999398,
      "success": true,
      "log_likelihood": -23.04165587458276,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.0,
      "alpha": 10.0,
      "lambda_param": 3.1292300184158313,
      "success": true,
      "log_likelihood": -7.984356027145629,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.517654193773944,
      "alpha": 10.0,
      "lambda_param": 0.6942962676735284,
      "success": true,
      "log_likelihood": -17.877298852133677,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.1334419430787487,
      "alpha": 0.0,
      "lambda_param": 1.9262843423204168,
      "success": true,
      "log_likelihood": -13.575886118232553,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.7255302177474823,
      "alpha": 9.546648962634418,
      "lambda_param": 0.7648427597212513,
      "success": true,
      "log_likelihood": -5.356972665903764,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6068409778156979,
      "alpha": 10.0,
      "lambda_param": 1.3779626016147941,
      "success": true,
      "log_likelihood": -15.93142838707765,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.2990841776904005,
      "alpha": 10.0,
      "lambda_param": 0.2011441171566156,
      "success": true,
      "log_likelihood": -20.523634922089283,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.8140818090734631,
        "p": 7.300063708643043e-25
      },
      "alpha": {
        "r": 0.05885123021352735,
        "p": 0.5608242170728192
      },
      "lambda_param": {
        "r": 0.8219561540530936,
        "p": 1.0727257540408117e-25
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 35.570673026662114,
  "bic_results": {
    "average_bic": 35.570673026662114,
    "individual_bics": [
      28.90077724866153,
      45.62471312548274,
      27.826722890711554,
      39.87535441989831,
      23.876364776681495,
      35.75328478747028,
      10.750582700774574,
      35.63145012600201,
      10.750582700774574,
      35.247208981918895,
      17.082844631275748,
      30.63471308960326,
      32.14956757839005,
      10.750582700774574,
      10.750582700774574,
      10.750582700774574,
      10.750582700774574,
      18.587276241591624,
      22.25556219392527,
      10.750582700774574,
      41.33437248985841,
      27.31655091982124,
      48.631972907731154,
      47.02706404163176,
      36.63697055278485,
      41.27142384600208,
      40.82686370609399,
      23.011158211793322,
      28.425191351614615,
      42.2879829821009,
      10.750582700774574,
      28.900777243852296,
      54.02858707025045,
      44.74395860779414,
      10.750582700774574,
      40.33234430464758,
      26.36076328632024,
      39.65714861644197,
      46.60300545315354,
      29.94324571177439,
      47.56829831920565,
      35.88677231305748,
      56.77917252129599,
      46.52617130325227,
      39.19759936691767,
      43.14049762414132,
      45.772221274107835,
      49.427122784470285,
      30.49480513887495,
      58.001312180045275,
      46.06944337201391,
      39.301543344592616,
      50.627753269303994,
      54.58140561378107,
      44.37860153941433,
      21.759338421285953,
      32.87562943260892,
      37.74285011910109,
      32.146610076814454,
      39.41421703008277,
      50.95576621428961,
      42.18770506904593,
      28.900777229712414,
      51.38298253953754,
      35.0907051520462,
      44.117986187866975,
      28.040444131240765,
      34.04333872975866,
      45.42029207095857,
      33.60223070518968,
      14.640112931682483,
      38.23691104172814,
      42.507682437177586,
      40.58304283370857,
      57.4253943634221,
      41.15988689778521,
      25.938226949128662,
      28.57922685747597,
      54.48123597427818,
      28.900777229727463,
      55.76943581748496,
      33.98801908068828,
      32.47040371953879,
      35.44046711425197,
      56.833868564533844,
      26.719268869659587,
      46.50515451963568,
      37.90232905183343,
      21.464502147175857,
      42.61341358952363,
      51.7978266595469
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.814\n- alpha: r = 0.059\n- lambda_param: r = 0.822",
  "previous_models": [
    "Specification: U = beta * split_self + alpha * (token_self / (token_self + token_opp)) * max(0, split_self - (combined_earning * (token_self / (token_self + token_opp)))) - lambda_param * (token_self / (token_self + token_opp)) * max(0, (combined_earning * (token_self / (token_self + token_opp))) - split_self)\nSummary: This model predicts responder behavior in the ultimatum game. It calculates the utility of accepting an offer based on three factors: amount sensitivity (beta), fairness sensitivity (alpha), and loss aversion (lambda_param). The model incorporates the relative contributions of the participant and opponent to determine a \"fair\" split. The fairness and loss aversion parameters are weighted by the participants relative contribution.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 35.570673026662114\nOverall Accuracy: 0.7695\n\nParameter Recovery:\n- beta: r = 0.814\n- alpha: r = 0.059\n- lambda_param: r = 0.822"
  ]
}