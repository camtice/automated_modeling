{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Instructions:\n<think>\nThe previous model had good recovery for beta and lambda, but very poor recovery for alpha, and the overall accuracy was middling, though the BIC score was good. We need to dramatically improve the recovery of alpha and consider if there is an interaction between alpha and the other parameters. This might involve rethinking the model's core assumptions about fairness. Also, it may be advantageous to try a different loss aversion functional form.\n\nHere's what I'll do:\n\n1. **Re-evaluate the fairness component:** The model seems to struggle with capturing fairness sensitivity. Encourage exploring alternative ways to model how people perceive fairness, beyond the simple proportional split based on token counts. Consider how trial_type (equal, opponent more, participant more) could directly inform fairness perception.\n2. **Explore non-linear loss aversion:** The current linear loss aversion might be too simplistic. Suggest a non-linear form, perhaps with diminishing sensitivity to losses as they become larger. For example, a log transform of the difference between the fair share and the actual split.\n3. **Interaction terms revisited:** While the previous attempt had an interaction term, it might not have been the right one. Prompt the model to consider interaction terms between alpha and beta. Is fairness more important when the stakes are high (high combined_earning)?\n4. **Prior Knowledge, again:** Re-emphasize the importance of incorporating prior knowledge, especially regarding fairness. What is a reasonable range for alpha, given the experimental context? Are participants likely to be completely insensitive to fairness (alpha close to 0), or are they likely to heavily weigh it (alpha significantly greater than 0)?\n5.  **Suggest an additional psychological mechanism**: Suggest that they add a \"status quo bias\", where they are biased to reject offers where they have contributed more.\n6. **Model Comparison Heuristic**: Strongly encourage that the model proposes a significantly different BIC.\n\n</think>\n\nBe VERY considerate of high covariance between learnable parameters in the model. Aim for an appropriate number of learnable parameters, with a slight bias toward fewer if it improves parameter identifiability. The model should propose a significantly different BIC than previous models.\n\nWhen developing your model, reason step by step about:\n\n*   The key psychological mechanisms involved, including fairness, loss aversion, and amount sensitivity.\n*   How these mechanisms interact, including potential multiplicative or non-linear interactions. Specifically, consider interactions between fairness sensitivity (alpha) and amount sensitivity (beta), as well as the role of combined_earning in modulating fairness perception.\n*   What mathematical form could capture these interactions, exploring options beyond standard linear or power law functions. Explore non-linear loss aversion functions (e.g., logarithmic) and alternative ways to model fairness perception, perhaps by incorporating trial_type.\n*   What parameters would be needed to calibrate the model, carefully considering potential parameter covariance and identifiability issues. What are reasonable estimates of each learnable parameter? What is a reasonable prior range for fairness sensitivity (alpha), and amount sensitivity (beta)?\n*   How the model variables map to observable behavior.\n*   Incorporate any prior knowledge or constraints that could reduce parameter covariance and improve parameter identifiability. What are reasonable estimates of each learnable parameter? Consider adding a status quo bias where participants are more likely to reject offers when they contribute more.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Instructions:\n<think>\nThe previous model had good recovery for beta and lambda, but very poor recovery for alpha, and the overall accuracy was middling, though the BIC score was good. We need to dramatically improve the recovery of alpha and consider if there is an interaction between alpha and the other parameters. This might involve rethinking the model's core assumptions about fairness. Also, it may be advantageous to try a different loss aversion functional form.\n\nHere's what I'll do:\n\n1. **Re-evaluate the fairness component:** The model seems to struggle with capturing fairness sensitivity. Encourage exploring alternative ways to model how people perceive fairness, beyond the simple proportional split based on token counts. Consider how trial_type (equal, opponent more, participant more) could directly inform fairness perception.\n2. **Explore non-linear loss aversion:** The current linear loss aversion might be too simplistic. Suggest a non-linear form, perhaps with diminishing sensitivity to losses as they become larger. For example, a log transform of the difference between the fair share and the actual split.\n3. **Interaction terms revisited:** While the previous attempt had an interaction term, it might not have been the right one. Prompt the model to consider interaction terms between alpha and beta. Is fairness more important when the stakes are high (high combined_earning)?\n4. **Prior Knowledge, again:** Re-emphasize the importance of incorporating prior knowledge, especially regarding fairness. What is a reasonable range for alpha, given the experimental context? Are participants likely to be completely insensitive to fairness (alpha close to 0), or are they likely to heavily weigh it (alpha significantly greater than 0)?\n5.  **Suggest an additional psychological mechanism**: Suggest that they add a \"status quo bias\", where they are biased to reject offers where they have contributed more.\n6. **Model Comparison Heuristic**: Strongly encourage that the model proposes a significantly different BIC.\n\n</think>\n\nBe VERY considerate of high covariance between learnable parameters in the model. Aim for an appropriate number of learnable parameters, with a slight bias toward fewer if it improves parameter identifiability. The model should propose a significantly different BIC than previous models.\n\nWhen developing your model, reason step by step about:\n\n*   The key psychological mechanisms involved, including fairness, loss aversion, and amount sensitivity.\n*   How these mechanisms interact, including potential multiplicative or non-linear interactions. Specifically, consider interactions between fairness sensitivity (alpha) and amount sensitivity (beta), as well as the role of combined_earning in modulating fairness perception.\n*   What mathematical form could capture these interactions, exploring options beyond standard linear or power law functions. Explore non-linear loss aversion functions (e.g., logarithmic) and alternative ways to model fairness perception, perhaps by incorporating trial_type.\n*   What parameters would be needed to calibrate the model, carefully considering potential parameter covariance and identifiability issues. What are reasonable estimates of each learnable parameter? What is a reasonable prior range for fairness sensitivity (alpha), and amount sensitivity (beta)?\n*   How the model variables map to observable behavior.\n*   Incorporate any prior knowledge or constraints that could reduce parameter covariance and improve parameter identifiability. What are reasonable estimates of each learnable parameter? Consider adding a status quo bias where participants are more likely to reject offers when they contribute more.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, here's my attempt at a computational model for the ultimatum game, focusing on responder behavior. I'll incorporate fairness, loss aversion, and amount sensitivity, while trying to minimize parameter covariance and maximizing parameter recoverability. I'll include a status quo bias where they are more likely to reject if they contributed more.\n\n*   **Fairness:** I'll use the relative contribution of the participant to the total earnings as a measure of fairness. This will be modulated by a fairness sensitivity parameter, *alpha*. Trial type will be used to modulate fairness.\n*   **Loss Aversion:** A key idea is that people dislike losses more than they like gains of equal magnitude. Here, the \"loss\" is receiving less than what is perceived as fair. The fairness amount will be influenced by the trial type (equal, opponent more, self more). I will also add a \"status quo\" bias to the loss aversion, so that losses feel greater when the participant contributed more.\n*   **Amount Sensitivity:** Participants are more likely to accept larger offers, regardless of fairness considerations. This will be captured by a parameter, *beta*, that represents sensitivity to the offered amount.\n*   **Status Quo Bias:** Participants are more likely to reject offers when they contributed more, holding fairness and amount constant. This will be captured by a parameter, *kappa*.\n*   **Combined Earning Modulation:** The perceived importance of fairness might depend on the total amount at stake. When the combined earning is high, fairness considerations might become more salient.\n\nHere's the formal model:\n\n```\n<MODEL>\nFairShare = combined_earning * (token_self / (token_self + token_opp))\nLoss = FairShare - split_self\nStatusQuo = trial_type == 3\nU = beta * split_self - alpha * Loss * (1 + kappa * StatusQuo)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"FairShare\": {\n      \"description\": \"The amount of money considered fair, based on the proportion of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Loss\": {\n      \"description\": \"The difference between what the participant perceives as a fair split and the actual split offered. If negative, the offer is more than fair, and Loss is 0.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n      \"StatusQuo\": {\n      \"description\": \"Binary indicator (0 or 1) indicating whether the participant found more tokens than the opponent (trial_type==3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha\": {\n      \"description\": \"Fairness sensitivity parameter. Higher values indicate greater sensitivity to deviations from a fair split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Amount sensitivity parameter. Higher values indicate greater sensitivity to the absolute amount offered.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"kappa\": {\n      \"description\": \"Status quo bias parameter. Higher values indicate a greater tendency to reject offers when the participant found more tokens (StatusQuo=1).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"The total amount of money earned in the round.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"The number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"The number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n   \"trial_type\": {\n      \"description\": \"How much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nThis model predicts responder behavior in the ultimatum game by considering fairness, loss aversion, and amount sensitivity. It calculates a fair share based on token contributions and quantifies the loss as the difference between the fair share and the offer. A status quo bias is added, penalizing offers where the participant contributed more. The model incorporates three learnable parameters: alpha (fairness sensitivity), beta (amount sensitivity), and kappa (status quo bias), each with specified bounds to aid parameter recovery.\n</SUMMARY>\n```"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta', 'kappa']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                FairShare = combined_earning * (token_self / (token_self + token_opp))\nLoss = FairShare - split_self\nStatusQuo = trial_type == 3\nU = beta * split_self - alpha * Loss * (1 + kappa * StatusQuo)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"FairShare\": {\n      \"description\": \"The amount of money considered fair, based on the proportion of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Loss\": {\n      \"description\": \"The difference between what the participant perceives as a fair split and the actual split offered. If negative, the offer is more than fair, and Loss is 0.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"StatusQuo\": {\n      \"description\": \"Binary indicator (0 or 1) indicating whether the participant found more tokens than the opponent (trial_type==3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha\": {\n      \"description\": \"Fairness sensitivity parameter. Higher values indicate greater sensitivity to deviations from a fair split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Amount sensitivity parameter. Higher values indicate greater sensitivity to the absolute amount offered.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"kappa\": {\n      \"description\": \"Status quo bias parameter. Higher values indicate a greater tendency to reject offers when the participant found more tokens (StatusQuo=1).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \\u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"The total amount of money earned in the round.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"The number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"The number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type\": {\n      \"description\": \"How much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=1, beta=1, kappa=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        trial_type = trial.get(\"trial_type\", 0)\n\n        # Calculate FairShare\n        FairShare = combined_earning * (token_self / (token_self + token_opp)) if (token_self + token_opp) > 0 else combined_earning / 2\n\n        # Calculate Loss. If the offer is more than fair, loss is 0\n        Loss = max(0, FairShare - split_self)\n\n        # Determine StatusQuo\n        StatusQuo = 1 if trial_type == 3 else 0\n\n        # Calculate Utility\n        U = beta * split_self - alpha * Loss * (1 + kappa * StatusQuo)\n\n        model_predictions.append(U)\n    return model_predictions\n```",
      "timestamp": 1744713823.9187222
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Fairness sensitivity parameter. Higher values indicate greater sensitivity to deviations from a fair split.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Amount sensitivity parameter. Higher values indicate greater sensitivity to the absolute amount offered.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "kappa": {
      "description": "Status quo bias parameter. Higher values indicate a greater tendency to reject offers when the participant found more tokens (StatusQuo=1).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "FairShare = combined_earning * (token_self / (token_self + token_opp))\nLoss = FairShare - split_self\nStatusQuo = trial_type == 3\nU = beta * split_self - alpha * Loss * (1 + kappa * StatusQuo)",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "FairShare": {
      "description": "The amount of money considered fair, based on the proportion of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Loss": {
      "description": "The difference between what the participant perceives as a fair split and the actual split offered. If negative, the offer is more than fair, and Loss is 0.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "StatusQuo": {
      "description": "Binary indicator (0 or 1) indicating whether the participant found more tokens than the opponent (trial_type==3).",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "alpha": {
      "description": "Fairness sensitivity parameter. Higher values indicate greater sensitivity to deviations from a fair split.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Amount sensitivity parameter. Higher values indicate greater sensitivity to the absolute amount offered.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "kappa": {
      "description": "Status quo bias parameter. Higher values indicate a greater tendency to reject offers when the participant found more tokens (StatusQuo=1).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "The proposed share for the participant (in \u00a3).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "The total amount of money earned in the round.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "The number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "The number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "trial_type": {
      "description": "How much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]",
      "range": {
        "min": 1,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "This model predicts responder behavior in the ultimatum game by considering fairness, loss aversion, and amount sensitivity. It calculates a fair share based on token contributions and quantifies the loss as the difference between the fair share and the offer. A status quo bias is added, penalizing offers where the participant contributed more. The model incorporates three learnable parameters: alpha (fairness sensitivity), beta (amount sensitivity), and kappa (status quo bias), each with specified bounds to aid parameter recovery.",
  "target_variable": "accept",
  "full_reasoning": "Okay, here's my attempt at a computational model for the ultimatum game, focusing on responder behavior. I'll incorporate fairness, loss aversion, and amount sensitivity, while trying to minimize parameter covariance and maximizing parameter recoverability. I'll include a status quo bias where they are more likely to reject if they contributed more.\n\n*   **Fairness:** I'll use the relative contribution of the participant to the total earnings as a measure of fairness. This will be modulated by a fairness sensitivity parameter, *alpha*. Trial type will be used to modulate fairness.\n*   **Loss Aversion:** A key idea is that people dislike losses more than they like gains of equal magnitude. Here, the \"loss\" is receiving less than what is perceived as fair. The fairness amount will be influenced by the trial type (equal, opponent more, self more). I will also add a \"status quo\" bias to the loss aversion, so that losses feel greater when the participant contributed more.\n*   **Amount Sensitivity:** Participants are more likely to accept larger offers, regardless of fairness considerations. This will be captured by a parameter, *beta*, that represents sensitivity to the offered amount.\n*   **Status Quo Bias:** Participants are more likely to reject offers when they contributed more, holding fairness and amount constant. This will be captured by a parameter, *kappa*.\n*   **Combined Earning Modulation:** The perceived importance of fairness might depend on the total amount at stake. When the combined earning is high, fairness considerations might become more salient.\n\nHere's the formal model:\n\n```\n<MODEL>\nFairShare = combined_earning * (token_self / (token_self + token_opp))\nLoss = FairShare - split_self\nStatusQuo = trial_type == 3\nU = beta * split_self - alpha * Loss * (1 + kappa * StatusQuo)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"FairShare\": {\n      \"description\": \"The amount of money considered fair, based on the proportion of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Loss\": {\n      \"description\": \"The difference between what the participant perceives as a fair split and the actual split offered. If negative, the offer is more than fair, and Loss is 0.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n      \"StatusQuo\": {\n      \"description\": \"Binary indicator (0 or 1) indicating whether the participant found more tokens than the opponent (trial_type==3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha\": {\n      \"description\": \"Fairness sensitivity parameter. Higher values indicate greater sensitivity to deviations from a fair split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Amount sensitivity parameter. Higher values indicate greater sensitivity to the absolute amount offered.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"kappa\": {\n      \"description\": \"Status quo bias parameter. Higher values indicate a greater tendency to reject offers when the participant found more tokens (StatusQuo=1).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"The total amount of money earned in the round.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"The number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"The number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n   \"trial_type\": {\n      \"description\": \"How much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nThis model predicts responder behavior in the ultimatum game by considering fairness, loss aversion, and amount sensitivity. It calculates a fair share based on token contributions and quantifies the loss as the difference between the fair share and the offer. A status quo bias is added, penalizing offers where the participant contributed more. The model incorporates three learnable parameters: alpha (fairness sensitivity), beta (amount sensitivity), and kappa (status quo bias), each with specified bounds to aid parameter recovery.\n</SUMMARY>\n```",
  "prediction_type": "utility",
  "current_model": "Specification: FairShare = combined_earning * (token_self / (token_self + token_opp))\nLoss = FairShare - split_self\nStatusQuo = trial_type == 3\nU = beta * split_self - alpha * Loss * (1 + kappa * StatusQuo)\nSummary: This model predicts responder behavior in the ultimatum game by considering fairness, loss aversion, and amount sensitivity. It calculates a fair share based on token contributions and quantifies the loss as the difference between the fair share and the offer. A status quo bias is added, penalizing offers where the participant contributed more. The model incorporates three learnable parameters: alpha (fairness sensitivity), beta (amount sensitivity), and kappa (status quo bias), each with specified bounds to aid parameter recovery.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=1, beta=1, kappa=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        trial_type = trial.get(\"trial_type\", 0)\n\n        # Calculate FairShare\n        FairShare = combined_earning * (token_self / (token_self + token_opp)) if (token_self + token_opp) > 0 else combined_earning / 2\n\n        # Calculate Loss. If the offer is more than fair, loss is 0\n        Loss = max(0, FairShare - split_self)\n\n        # Determine StatusQuo\n        StatusQuo = 1 if trial_type == 3 else 0\n\n        # Calculate Utility\n        U = beta * split_self - alpha * Loss * (1 + kappa * StatusQuo)\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.8116605616605617,
  "fitting_results": [
    {
      "alpha": 1.5639827093025098,
      "beta": 0.07848743139365418,
      "kappa": 10.0,
      "success": true,
      "log_likelihood": -5.939192141841582,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8670163270416276,
      "beta": 0.6079278087634492,
      "kappa": 0.4277365457199402,
      "success": true,
      "log_likelihood": -16.06818006330977,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.794440069787761,
      "beta": 1.2499178192560423,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -10.046565396073188,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.230626843879956,
      "beta": 0.7090790323033399,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -13.653156181726471,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.934490645217824,
      "beta": 1.0143698114088202,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -9.848024472742107,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2751441331991542,
      "beta": 1.2519096720088756,
      "kappa": 0.26093693207142316,
      "success": true,
      "log_likelihood": -10.882063990382044,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -1.2942703121847535e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2208748603018138,
      "beta": 1.2084668852451859,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -11.096668637705035,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -1.2942703121847536e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.6378870143595274,
      "beta": 0.7720613884151428,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -11.166531345329746,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 6.08533888179392,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -1.3191363754253618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.568816457645179,
      "beta": 0.09121088937786757,
      "kappa": 0.5512062483459957,
      "success": true,
      "log_likelihood": -8.94651018026199,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.17551288035051,
      "beta": 1.1506072391891118,
      "kappa": 0.3801185271999857,
      "success": true,
      "log_likelihood": -8.479673870580523,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "kappa": 2.9761633366449947,
      "success": true,
      "log_likelihood": -1.2942703121847535e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -1.2942703121847536e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -1.2942703121847535e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -1.2942703121847536e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.9928496443709178,
      "beta": 4.19989887489535,
      "kappa": 0.25579484576613365,
      "success": true,
      "log_likelihood": -2.700909969783774,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7612560976340504,
      "beta": 1.785843195528244,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -6.6500354895606035,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -1.2942703121847535e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9527847459199045,
      "beta": 0.7287165498684561,
      "kappa": 0.5078697047842938,
      "success": true,
      "log_likelihood": -14.905663897924534,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7319753298468312,
      "beta": 1.5739425570976102,
      "kappa": 0.256410118428819,
      "success": true,
      "log_likelihood": -7.875201107700683,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.065214511416323,
      "beta": 1.5228609256712142,
      "kappa": 10.0,
      "success": true,
      "log_likelihood": -6.779632401630994,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7411332182767268,
      "beta": 0.6090263205647177,
      "kappa": 0.3790067420023777,
      "success": true,
      "log_likelihood": -16.838719462342553,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1914021701793818,
      "beta": 0.6848293475922159,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -13.939297530276198,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8945891982028823,
      "beta": 0.7857969874384204,
      "kappa": 0.013100873078943136,
      "success": true,
      "log_likelihood": -14.894431960848685,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.5157413608203558,
      "beta": 1.338258174155796,
      "kappa": 1.2416795417582895,
      "success": true,
      "log_likelihood": -9.453405922317387,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.46546617523952,
      "beta": 1.6631546237227768,
      "kappa": 0.34431875279945495,
      "success": true,
      "log_likelihood": -3.7303398404527517,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.4312240113670367,
      "beta": 1.1910268856969226,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -9.36186349536399,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.38585951908187965,
      "beta": 0.6843249809965587,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -15.902796867872945,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -1.2942703121847535e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.5639818987046854,
      "beta": 0.07848847742491445,
      "kappa": 10.0,
      "success": true,
      "log_likelihood": -5.939192141818419,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5423394842154657,
      "beta": 0.4243840126789526,
      "kappa": 5.5715777127784705,
      "success": true,
      "log_likelihood": -17.786556179369306,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.040748219762206,
      "beta": 0.5795672227287929,
      "kappa": 1.3462252745906222,
      "success": true,
      "log_likelihood": -14.347021397804543,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "kappa": 2.1428844508319695,
      "success": true,
      "log_likelihood": -1.2942703121847536e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8188872665613863,
      "beta": 1.0688820347736236,
      "kappa": 0.9480574977620951,
      "success": true,
      "log_likelihood": -12.447273753198422,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.844369457178779,
      "beta": 2.079240335367011,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -7.00932420189916,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1391313795931406,
      "beta": 0.7091181080017784,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -14.225669128127151,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5412534008776806,
      "beta": 0.5917114983099395,
      "kappa": 0.04120721626082147,
      "success": true,
      "log_likelihood": -17.71761764994067,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.11504007542735879,
      "beta": 1.00163412939573,
      "kappa": 3.7855079704412113,
      "success": true,
      "log_likelihood": -9.036657158726076,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6639058909038152,
      "beta": 0.6541011458210458,
      "kappa": 1.8634220842059652,
      "success": true,
      "log_likelihood": -16.116160319178157,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3465524570612502,
      "beta": 0.4034456729766406,
      "kappa": 2.5110886652206856,
      "success": true,
      "log_likelihood": -10.585027012707151,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "kappa": 7.60849409841948,
      "success": true,
      "log_likelihood": -23.025863872743603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9276504660690784,
      "beta": 0.9188301104648663,
      "kappa": 3.108771060780186,
      "success": true,
      "log_likelihood": -12.883144594202294,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0095801415779249,
      "beta": 0.9669427395315042,
      "kappa": 0.22441323687037357,
      "success": true,
      "log_likelihood": -13.16840755555884,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.3771832109361987,
      "beta": 0.7520114203915719,
      "kappa": 1.5542209318968319,
      "success": true,
      "log_likelihood": -14.939823687756524,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0945472854826546,
      "beta": 0.9090252289772948,
      "kappa": 2.4429805569843834,
      "success": true,
      "log_likelihood": -12.600341786718685,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.664833878698361,
      "beta": 0.4053193556323206,
      "kappa": 2.2565482837953956,
      "success": true,
      "log_likelihood": -17.52291743450699,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.6099341644278884,
      "beta": 0.718535139830391,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -11.26989120594693,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.1563389435736686,
      "beta": 0.19925357032543925,
      "kappa": 1.3107524218088893,
      "success": true,
      "log_likelihood": -23.43780784828988,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.4051530384613024,
      "beta": 0.6353746701214653,
      "kappa": 1.0248996948336622,
      "success": true,
      "log_likelihood": -16.89803029968264,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9009887431369232,
      "beta": 0.10527257307334165,
      "kappa": 10.0,
      "success": true,
      "log_likelihood": -10.187864718401865,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5844259680024892,
      "beta": 0.6130761032371875,
      "kappa": 3.3899137012752973,
      "success": true,
      "log_likelihood": -16.444594359010694,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.24179734582127296,
      "beta": 0.46211849349872963,
      "kappa": 8.902382998718243,
      "success": true,
      "log_likelihood": -18.020256883498813,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6166297160277755,
      "beta": 0.22317077472143715,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -19.145851304366055,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.7277482479540165,
      "beta": 1.9044010262667759,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -4.334577663611121,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.499925373649394,
      "beta": 1.0274065511001325,
      "kappa": 2.021161332850848,
      "success": true,
      "log_likelihood": -7.9780990314731595,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.5688292315802078,
      "kappa": 1.1459833544158058,
      "success": true,
      "log_likelihood": -13.680488206347569,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3563601860020542,
      "beta": 0.15427798297538015,
      "kappa": 10.0,
      "success": true,
      "log_likelihood": -7.114414213736139,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.2164376118145092,
      "beta": 0.887212060773421,
      "kappa": 5.173868823478004,
      "success": true,
      "log_likelihood": -11.700108082349756,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.41546778021301045,
      "beta": 0.4936805602333909,
      "kappa": 1.7573559027390786,
      "success": true,
      "log_likelihood": -18.765829699610343,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.078540813326034,
      "beta": 0.7289766424144033,
      "kappa": 0.9209522645946696,
      "success": true,
      "log_likelihood": -13.923753896167936,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.5639796167871642,
      "beta": 0.07848816886408772,
      "kappa": 10.0,
      "success": true,
      "log_likelihood": -5.939192141822366,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.4885582957882134,
      "beta": 0.3153627504641461,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -20.702526785999552,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.903663615117629,
      "beta": 0.6790826189194631,
      "kappa": 2.182572768671835,
      "success": true,
      "log_likelihood": -8.937096189207033,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0327536949222813,
      "beta": 0.9718587472869853,
      "kappa": 1.5325921111746743,
      "success": true,
      "log_likelihood": -12.471717814448974,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.23115810888984883,
      "beta": 1.2209194292034355,
      "kappa": 2.0068944031813323,
      "success": true,
      "log_likelihood": -7.888418269804885,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.33659549135765887,
      "beta": 0.9455624356052788,
      "kappa": 0.5231205329408498,
      "success": true,
      "log_likelihood": -11.690548851912292,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8108152728828328,
      "beta": 0.9007730520860082,
      "kappa": 2.4768434184688184,
      "success": true,
      "log_likelihood": -13.239916846522298,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.6780230141886091,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -11.540124489362126,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 1.133314274720974,
      "kappa": 10.0,
      "success": true,
      "log_likelihood": -0.0624481968061205,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0263152350748403,
      "beta": 0.15130272637241865,
      "kappa": 10.0,
      "success": true,
      "log_likelihood": -9.37123731731824,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9085797491669128,
      "beta": 0.6853157193534972,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -15.606148306179364,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.2540631005847484,
      "beta": 0.748668325790476,
      "kappa": 2.0501582382813313,
      "success": true,
      "log_likelihood": -14.107428028764373,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.288258497525058,
      "beta": 0.2698709542228271,
      "kappa": 3.084279406092924,
      "success": true,
      "log_likelihood": -21.399000400768273,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8593908031032479,
      "beta": 1.0021271670762404,
      "kappa": 0.588113628868096,
      "success": true,
      "log_likelihood": -13.039764371837888,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.1021905773433643,
      "beta": 1.0396946810372185,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -7.802173684434492,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3195870845152073,
      "beta": 0.0,
      "kappa": 10.0,
      "success": true,
      "log_likelihood": -6.469389431615112,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.13341097189525455,
      "beta": 0.2659180823290655,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -22.370657498046846,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.5639888130273876,
      "beta": 0.07849769127127662,
      "kappa": 10.0,
      "success": true,
      "log_likelihood": -5.939192143592446,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.25901027149748707,
      "beta": 0.24890018155609578,
      "kappa": 1.5924140185313296,
      "success": true,
      "log_likelihood": -22.355326230180644,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "kappa": 1.1312081627940604,
      "success": true,
      "log_likelihood": -68.73866400294936,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2353896560165092,
      "beta": 0.016412604068648827,
      "kappa": 0.6865013062624489,
      "success": true,
      "log_likelihood": -9.89098839257981,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.6676569712706761,
      "beta": 1.3502399948354564,
      "kappa": 0.4758285416762093,
      "success": true,
      "log_likelihood": -9.712159163074896,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0742540607238381,
      "beta": 0.17953226619788068,
      "kappa": 4.395802742729016,
      "success": true,
      "log_likelihood": -23.43828994511127,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7859791394692501,
      "beta": 0.18993275924590522,
      "kappa": 10.0,
      "success": true,
      "log_likelihood": -5.467080638514674,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.4427650582091347,
      "beta": 0.5727278170675156,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -17.95964190293655,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.078922663201196,
      "beta": 0.15825946521064416,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -13.317159678737738,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.337798289719498,
      "beta": 1.5512458559224322,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -5.817840692301093,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.912664556306744,
      "beta": 1.78445318565341,
      "kappa": 5.016761237059377,
      "success": true,
      "log_likelihood": -8.091888587361638,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.16635330176307891,
      "beta": 0.3534877151839347,
      "kappa": 0.0,
      "success": true,
      "log_likelihood": -20.83312331619385,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.8288096536917601,
        "p": 1.8687344265365772e-26
      },
      "beta": {
        "r": 0.7566368587195118,
        "p": 8.690578351125468e-20
      },
      "kappa": {
        "r": 0.5974060443323036,
        "p": 5.336885694926616e-11
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 33.97978375363018,
  "bic_results": {
    "average_bic": 33.97978375363018,
    "individual_bics": [
      22.628941099051495,
      42.88691694198788,
      30.843687607514706,
      38.05686917882127,
      30.446605760852545,
      32.514684796132414,
      10.750582700774574,
      32.9438940907784,
      10.750582700774574,
      33.08361950602782,
      13.388829566219055,
      28.64357717589231,
      27.709904556529377,
      10.750582700774574,
      10.750582700774574,
      10.750582700774574,
      10.750582700774574,
      16.15237675493588,
      24.050627794489536,
      10.750582700774574,
      40.561884611217394,
      26.500959030769696,
      24.309821618630316,
      44.42799574005343,
      38.629151875920726,
      40.5394207370657,
      29.657368660003105,
      18.211236496273834,
      29.47428380609631,
      42.55615055111422,
      10.750582700774574,
      22.628941099005168,
      46.32366917410694,
      39.44459961097742,
      10.750582700774574,
      35.645104321765174,
      24.76920521916665,
      39.20189507162263,
      46.18579211524967,
      28.823871132820482,
      42.98287745372464,
      31.920610840782633,
      56.80228456085554,
      36.51684600377292,
      37.087371926486014,
      40.63020419088138,
      35.9512403888057,
      45.796391684382314,
      33.290339227262194,
      57.626172511948084,
      44.54661741473362,
      31.12628625217206,
      43.639745533389714,
      46.79107058236596,
      49.042259424100436,
      19.419712142590573,
      26.706754878314648,
      38.111533228063465,
      24.979385242840607,
      34.15077298006784,
      48.28221621458901,
      38.5980646077042,
      22.628941099013062,
      52.15561038736743,
      28.624749193782396,
      35.69399244426628,
      26.527393354978102,
      34.131654519192914,
      37.230390508412924,
      33.83080579409258,
      10.875453208980572,
      29.49303145000481,
      41.962853427727055,
      38.965412872897076,
      53.54855761690487,
      36.83008555904411,
      26.354904184237313,
      23.689335678598553,
      55.49187181146202,
      22.62894110255322,
      55.461209275729615,
      148.22788482126705,
      30.53253360052795,
      30.174875141518122,
      57.62713670559087,
      21.68471809239768,
      46.669840621241434,
      37.3848761728438,
      22.386238199970517,
      26.934333990091606,
      52.416803447756024
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.829\n- beta: r = 0.757\n- kappa: r = 0.597",
  "previous_models": [
    "Specification: FairShare = combined_earning * (token_self / (token_self + token_opp))\nLoss = FairShare - split_self\nStatusQuo = trial_type == 3\nU = beta * split_self - alpha * Loss * (1 + kappa * StatusQuo)\nSummary: This model predicts responder behavior in the ultimatum game by considering fairness, loss aversion, and amount sensitivity. It calculates a fair share based on token contributions and quantifies the loss as the difference between the fair share and the offer. A status quo bias is added, penalizing offers where the participant contributed more. The model incorporates three learnable parameters: alpha (fairness sensitivity), beta (amount sensitivity), and kappa (status quo bias), each with specified bounds to aid parameter recovery.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 33.97978375363018\nOverall Accuracy: 0.8117\n\nParameter Recovery:\n- alpha: r = 0.829\n- beta: r = 0.757\n- kappa: r = 0.597"
  ]
}