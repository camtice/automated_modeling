{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "```text\nInstructions:\n<think>\nThe previous model performed poorly in terms of parameter recovery, accuracy, and BIC. The trial type offsets were not identifiable, and alpha and beta were also poorly recovered. This suggests a problem with the model's structure, likely high covariance between the trial type offsets and potentially with alpha/beta. The hyperbolic aversion formulation may not be ideal, or the way FairShare is calculated.\n\nHere's what I'll do to improve:\n\n1.  **Simplify FairShare:** Revert to a simpler FairShare calculation, focusing on the core token ratio but still incorporating trial_type. Instead of additive offsets, try multiplicative modulation of the token ratio based on trial_type. This might reduce covariance.\n2.  **Explore a Different Loss Aversion Function:** The hyperbolic aversion didn't work well. Try a power law function or a simple difference with a threshold. This will give the model more flexibility in capturing loss aversion.\n3.  **Interaction between Alpha and Combined Earning:** Explore an explicit interaction between alpha (fairness sensitivity) and combined_earning. People might be *more* fairness-sensitive when *more* is at stake. Try modulating alpha by a function of combined_earning (e.g., alpha * combined_earning^gamma, where gamma is a learnable parameter).\n4.  **Amount Sensitivity with Diminishing Returns:** Instead of a linear or simple ratio for amount sensitivity, consider a logarithmic or power function to reflect diminishing returns. The subjective value of an additional dollar decreases as the total amount increases.\n5.  **Consider a Hybrid Approach:** Combine elements that worked in past models (e.g., the simpler FairShare from earlier models) with new ideas (e.g., the alpha/combined_earning interaction).\n6.   **Focus on Parameter Identifiability**:  Carefully consider which parameters are truly necessary and whether their effects can be disentangled.  If trial-type is causing problems, think about *why*. Is it inherently difficult to quantify these effects, or is it just the *way* they are being included? If the latter, think about better ways to include it.\n\n</think>\n\nBe VERY considerate of high covariance between learnable parameters in the model. Aim for an appropriate number of learnable parameters, with a slight bias toward fewer if it improves parameter identifiability. The model should propose a significantly different BIC than previous models.\n\nWhen developing your model, reason step by step about:\n\n*   The key psychological mechanisms involved, including fairness, loss aversion, and amount sensitivity.\n*   How these mechanisms interact, including potential multiplicative or non-linear interactions. Specifically, consider interactions between fairness sensitivity (alpha) and combined_earning, as well as the role of trial_type in modulating fairness perception.\n*   What mathematical form could capture these interactions, exploring options beyond standard linear or power law functions. Explore alternative loss aversion functions (e.g., power law, threshold-based) and alternative ways to model fairness perception, perhaps by incorporating trial_type directly into the token ratio calculation.\n*   What parameters would be needed to calibrate the model, carefully considering potential parameter covariance and identifiability issues. What are reasonable estimates of each learnable parameter? What is a reasonable prior range for fairness sensitivity (alpha), amount sensitivity (beta), and the new gamma parameter for alpha/combined_earning interaction?\n*   How the model variables map to observable behavior.\n*   Incorporate any prior knowledge or constraints that could reduce parameter covariance and improve parameter identifiability. What are reasonable estimates of each learnable parameter? Consider multiplicative modulation of the token ratio based on trial_type. Explore a logarithmic or power function for amount sensitivity.\n```",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: ```text\nInstructions:\n<think>\nThe previous model performed poorly in terms of parameter recovery, accuracy, and BIC. The trial type offsets were not identifiable, and alpha and beta were also poorly recovered. This suggests a problem with the model's structure, likely high covariance between the trial type offsets and potentially with alpha/beta. The hyperbolic aversion formulation may not be ideal, or the way FairShare is calculated.\n\nHere's what I'll do to improve:\n\n1.  **Simplify FairShare:** Revert to a simpler FairShare calculation, focusing on the core token ratio but still incorporating trial_type. Instead of additive offsets, try multiplicative modulation of the token ratio based on trial_type. This might reduce covariance.\n2.  **Explore a Different Loss Aversion Function:** The hyperbolic aversion didn't work well. Try a power law function or a simple difference with a threshold. This will give the model more flexibility in capturing loss aversion.\n3.  **Interaction between Alpha and Combined Earning:** Explore an explicit interaction between alpha (fairness sensitivity) and combined_earning. People might be *more* fairness-sensitive when *more* is at stake. Try modulating alpha by a function of combined_earning (e.g., alpha * combined_earning^gamma, where gamma is a learnable parameter).\n4.  **Amount Sensitivity with Diminishing Returns:** Instead of a linear or simple ratio for amount sensitivity, consider a logarithmic or power function to reflect diminishing returns. The subjective value of an additional dollar decreases as the total amount increases.\n5.  **Consider a Hybrid Approach:** Combine elements that worked in past models (e.g., the simpler FairShare from earlier models) with new ideas (e.g., the alpha/combined_earning interaction).\n6.   **Focus on Parameter Identifiability**:  Carefully consider which parameters are truly necessary and whether their effects can be disentangled.  If trial-type is causing problems, think about *why*. Is it inherently difficult to quantify these effects, or is it just the *way* they are being included? If the latter, think about better ways to include it.\n\n</think>\n\nBe VERY considerate of high covariance between learnable parameters in the model. Aim for an appropriate number of learnable parameters, with a slight bias toward fewer if it improves parameter identifiability. The model should propose a significantly different BIC than previous models.\n\nWhen developing your model, reason step by step about:\n\n*   The key psychological mechanisms involved, including fairness, loss aversion, and amount sensitivity.\n*   How these mechanisms interact, including potential multiplicative or non-linear interactions. Specifically, consider interactions between fairness sensitivity (alpha) and combined_earning, as well as the role of trial_type in modulating fairness perception.\n*   What mathematical form could capture these interactions, exploring options beyond standard linear or power law functions. Explore alternative loss aversion functions (e.g., power law, threshold-based) and alternative ways to model fairness perception, perhaps by incorporating trial_type directly into the token ratio calculation.\n*   What parameters would be needed to calibrate the model, carefully considering potential parameter covariance and identifiability issues. What are reasonable estimates of each learnable parameter? What is a reasonable prior range for fairness sensitivity (alpha), amount sensitivity (beta), and the new gamma parameter for alpha/combined_earning interaction?\n*   How the model variables map to observable behavior.\n*   Incorporate any prior knowledge or constraints that could reduce parameter covariance and improve parameter identifiability. What are reasonable estimates of each learnable parameter? Consider multiplicative modulation of the token ratio based on trial_type. Explore a logarithmic or power function for amount sensitivity.\n```\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, let's break down this computational modeling task step-by-step. The goal is to create a model that predicts whether a responder will accept or reject a proposed split in a resource allocation game, considering fairness, loss aversion, and amount sensitivity, while also ensuring good parameter recovery.\n\n**1. Psychological Mechanisms:**\n\n*   **Fairness:** People prefer fair splits. The \"fairness\" of a split is influenced by the relative contributions of the participant and the opponent (token\\_self, token\\_opp) and also by the trial type (equal contributions, opponent more, participant more).\n*   **Loss Aversion:** People are more sensitive to potential losses than to equivalent gains. Rejecting a proposal means losing the offered amount (split\\_self).\n*   **Amount Sensitivity:** People are sensitive to the absolute amount of money offered. The subjective value of money might exhibit diminishing returns.\n\n**2. Interactions:**\n\n*   **Alpha and Combined Earning:** My hypothesis is that fairness sensitivity (alpha) may be *higher* when there's more at stake (higher combined\\_earning). A small unfairness might be tolerated when the total pie is small, but the same unfairness might trigger rejection when the pie is large. I'll model this as a multiplicative interaction.\n*   **Trial Type and Fairness:** The `trial_type` variable biases how the individual views the \"fair\" split.\n*   **Token Ratio and Amount:** The token ratio and the amount of money available can determine the response. The more money at stake, the more likely someone is to accept something above some minimal threshold.\n\n**3. Mathematical Form:**\n\n*   **FairShare:** I'll calculate a \"FairShare\" based on the token ratio and modulate it by `trial_type` multiplicatively. This attempts to capture the fairness perception. Let's use trial type as a multiplier of how much the individual views there fair share.\n    *   `token_ratio = token_self / (token_self + token_opp)`\n    *   `FairShare = token_ratio * trial_type_multiplier`\n*   **Amount Received:** `split_self` will determine how much money they are getting.\n*   **Loss Aversion:** I'll use a power function to model loss aversion. I will create an expected gain based on what they view as fair vs what they are getting.\n    *   `expected_gain = split_self - FairShare * combined_earning`\n    *   `loss_aversion = expected_gain < 0 ? lambda_param * abs(expected_gain)**rho : expected_gain**rho`\n*   **Utility:** The utility of accepting the offer will be a function of fairness (FairShare), amount (split\\_self), and loss aversion. I'll incorporate alpha (fairness sensitivity), beta (amount sensitivity), and gamma (alpha/combined_earning interaction).\n    *   `utility = alpha * combined_earning**gamma * FairShare + beta * split_self**omega - loss_aversion`\n*   **Probability of Acceptance:** I'll use a logistic function to convert utility into a probability of accepting:\n    *   `probability_accept = 1 / (1 + exp(-utility))`\n\n**4. Parameters:**\n\n*   `alpha`: Fairness sensitivity. Higher values mean greater sensitivity to deviations from FairShare.\n*   `beta`: Amount sensitivity. Higher values mean greater preference for larger amounts.\n*   `gamma`: Combined earning interaction. Captures the degree to which fairness sensitivity increases with combined earnings.\n*   `lambda_param`: Loss aversion parameter. Values greater than 1 indicate loss aversion.\n*   `rho`: Curvature of the Loss Aversion function.\n*   `omega`: Curvature of the utility over the money available.\n*   `trial_type_multiplier`: Multiplier to account for the fact that an equal trial type is different than an opponent more, and a participant more trial type.\n\n**5. Mapping to Observable Behavior:**\n\nThe model predicts the probability of accepting the offer (`accept`). This probability is derived from the utility function, which incorporates fairness, amount, and loss aversion, weighted by the sensitivity parameters.\n\n**6. Parameter Identifiability Considerations:**\n\n*   **Multiplicative `trial_type`:** This reduces the direct covariance with `alpha` and `beta`.\n*   **Combined Earning Interaction:** This could potentially increase covariance between alpha and gamma. Careful prior specification and regularization might be needed during fitting. I will constrain the range for the learning parameters.\n\nNow, let's formalize the model.\n\n```\n<MODEL>\ntoken_ratio = token_self / (token_self + token_opp)\nFairShare = token_ratio * trial_type_multiplier\nexpected_gain = split_self - FairShare * combined_earning\nloss_aversion = expected_gain < 0 ? lambda_param * abs(expected_gain)**rho : expected_gain**rho\nutility = alpha * combined_earning**gamma * FairShare + beta * split_self**omega - loss_aversion\nprobability_accept = 1 / (1 + exp(-utility))\n</MODEL>\n```\n\n```json\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_ratio\": {\n      \"description\": \"Ratio of tokens found by the participant to the total tokens found\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"FairShare\": {\n      \"description\": \"The participant's perception of a fair share, based on token ratio and trial type\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 3\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"expected_gain\": {\n      \"description\": \"Difference between amount offered and the participant's notion of fair share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_aversion\": {\n      \"description\": \"Loss aversion term, calculated as a power function of the expected gain/loss\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"utility\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"probability_accept\": {\n      \"description\": \"Probability of accepting the offer, derived from the utility using a logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Fairness sensitivity parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Amount sensitivity parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Combined earning interaction parameter (modulates fairness sensitivity)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n        \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion parameter\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n        \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n     \"rho\": {\n      \"description\": \"Loss aversion parameter\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n        \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n     \"omega\": {\n      \"description\": \"Diminishing returns to the amount\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n        \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"trial_type_multiplier\": {\n      \"description\": \"Multiplier applied to the token ratio based on the trial type. [trial_type = 1 = equal, 2 = opponent more, 3 = participant more]\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n        \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Amount of money earned in total\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"The proposed share of the opponent (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accept\": {\n      \"description\": \"Whether the participant responded accept (1) or reject (0)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n```\n\n```\n<target_variable>accept</target_variable>\n```\n\n```\n<SUMMARY>\nThis model predicts responder behavior in a resource allocation game by integrating fairness, amount sensitivity, and loss aversion. It calculates a \"FairShare\" based on the token ratio and modulates it by a trial_type multiplier. A utility function combines fairness, amount, and loss aversion (modeled using a power function), weighted by learnable parameters. Fairness sensitivity (alpha) is modulated by combined_earning. The model uses a logistic function to convert utility into the probability of accepting the offer. Parameters include alpha (fairness sensitivity), beta (amount sensitivity), gamma (combined earning interaction), lambda_param (loss aversion), rho (curvature of loss aversion), omega (curvature of utility of money), and trial_type_multiplier.\n</SUMMARY>\n```"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta', 'gamma', 'lambda_param', 'rho', 'omega', 'trial_type_multiplier']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                token_ratio = token_self / (token_self + token_opp)\nFairShare = token_ratio * trial_type_multiplier\nexpected_gain = split_self - FairShare * combined_earning\nloss_aversion = expected_gain < 0 ? lambda_param * abs(expected_gain)**rho : expected_gain**rho\nutility = alpha * combined_earning**gamma * FairShare + beta * split_self**omega - loss_aversion\nprobability_accept = 1 / (1 + exp(-utility))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_ratio\": {\n      \"description\": \"Ratio of tokens found by the participant to the total tokens found\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"FairShare\": {\n      \"description\": \"The participant's perception of a fair share, based on token ratio and trial type\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"expected_gain\": {\n      \"description\": \"Difference between amount offered and the participant's notion of fair share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_aversion\": {\n      \"description\": \"Loss aversion term, calculated as a power function of the expected gain/loss\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"utility\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"probability_accept\": {\n      \"description\": \"Probability of accepting the offer, derived from the utility using a logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Fairness sensitivity parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Amount sensitivity parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Combined earning interaction parameter (modulates fairness sensitivity)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion parameter\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"rho\": {\n      \"description\": \"Loss aversion parameter\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"omega\": {\n      \"description\": \"Diminishing returns to the amount\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"trial_type_multiplier\": {\n      \"description\": \"Multiplier applied to the token ratio based on the trial type. [trial_type = 1 = equal, 2 = opponent more, 3 = participant more]\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Amount of money earned in total\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"The proposed share of the opponent (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accept\": {\n      \"description\": \"Whether the participant responded accept (1) or reject (0)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=1, beta=1, gamma=0.5, lambda_param=2, rho=0.5, omega=0.5, trial_type_multiplier=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        trial_type = trial.get(\"trial_type\", 1)\n\n        #token_ratio = token_self / (token_self + token_opp) if (token_self + token_opp) > 0 else 0\n        if (token_self + token_opp) > 0:\n            token_ratio = token_self / (token_self + token_opp)\n        else:\n            token_ratio = 0\n\n        FairShare = token_ratio * trial_type_multiplier\n        expected_gain = split_self - FairShare * combined_earning\n\n        if expected_gain < 0:\n            loss_aversion = lambda_param * abs(expected_gain)**rho\n        else:\n            loss_aversion = expected_gain**rho\n\n        utility = alpha * combined_earning**gamma * FairShare + beta * split_self**omega - loss_aversion\n        probability_accept = 1 / (1 + math.exp(-utility))\n\n        model_predictions.append(probability_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744713924.321694
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Fairness sensitivity parameter",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Amount sensitivity parameter",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Combined earning interaction parameter (modulates fairness sensitivity)",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Loss aversion parameter",
      "range": {
        "min": 1,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "rho": {
      "description": "Loss aversion parameter",
      "range": {
        "min": 0.1,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "omega": {
      "description": "Diminishing returns to the amount",
      "range": {
        "min": 0.1,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "trial_type_multiplier": {
      "description": "Multiplier applied to the token ratio based on the trial type. [trial_type = 1 = equal, 2 = opponent more, 3 = participant more]",
      "range": {
        "min": 0.1,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "token_ratio = token_self / (token_self + token_opp)\nFairShare = token_ratio * trial_type_multiplier\nexpected_gain = split_self - FairShare * combined_earning\nloss_aversion = expected_gain < 0 ? lambda_param * abs(expected_gain)**rho : expected_gain**rho\nutility = alpha * combined_earning**gamma * FairShare + beta * split_self**omega - loss_aversion\nprobability_accept = 1 / (1 + exp(-utility))",
  "variable_descriptions": {
    "token_ratio": {
      "description": "Ratio of tokens found by the participant to the total tokens found",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "FairShare": {
      "description": "The participant's perception of a fair share, based on token ratio and trial type",
      "range": {
        "min": 0,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "expected_gain": {
      "description": "Difference between amount offered and the participant's notion of fair share",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "loss_aversion": {
      "description": "Loss aversion term, calculated as a power function of the expected gain/loss",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "utility": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "probability_accept": {
      "description": "Probability of accepting the offer, derived from the utility using a logistic function",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Fairness sensitivity parameter",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Amount sensitivity parameter",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Combined earning interaction parameter (modulates fairness sensitivity)",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Loss aversion parameter",
      "range": {
        "min": 1,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "rho": {
      "description": "Loss aversion parameter",
      "range": {
        "min": 0.1,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "omega": {
      "description": "Diminishing returns to the amount",
      "range": {
        "min": 0.1,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "trial_type_multiplier": {
      "description": "Multiplier applied to the token ratio based on the trial type. [trial_type = 1 = equal, 2 = opponent more, 3 = participant more]",
      "range": {
        "min": 0.1,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Amount of money earned in total",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_opp": {
      "description": "The proposed share of the opponent (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "The proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "accept": {
      "description": "Whether the participant responded accept (1) or reject (0)",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "This model predicts responder behavior in a resource allocation game by integrating fairness, amount sensitivity, and loss aversion. It calculates a \"FairShare\" based on the token ratio and modulates it by a trial_type multiplier. A utility function combines fairness, amount, and loss aversion (modeled using a power function), weighted by learnable parameters. Fairness sensitivity (alpha) is modulated by combined_earning. The model uses a logistic function to convert utility into the probability of accepting the offer. Parameters include alpha (fairness sensitivity), beta (amount sensitivity), gamma (combined earning interaction), lambda_param (loss aversion), rho (curvature of loss aversion), omega (curvature of utility of money), and trial_type_multiplier.",
  "target_variable": "accept",
  "full_reasoning": "Okay, let's break down this computational modeling task step-by-step. The goal is to create a model that predicts whether a responder will accept or reject a proposed split in a resource allocation game, considering fairness, loss aversion, and amount sensitivity, while also ensuring good parameter recovery.\n\n**1. Psychological Mechanisms:**\n\n*   **Fairness:** People prefer fair splits. The \"fairness\" of a split is influenced by the relative contributions of the participant and the opponent (token\\_self, token\\_opp) and also by the trial type (equal contributions, opponent more, participant more).\n*   **Loss Aversion:** People are more sensitive to potential losses than to equivalent gains. Rejecting a proposal means losing the offered amount (split\\_self).\n*   **Amount Sensitivity:** People are sensitive to the absolute amount of money offered. The subjective value of money might exhibit diminishing returns.\n\n**2. Interactions:**\n\n*   **Alpha and Combined Earning:** My hypothesis is that fairness sensitivity (alpha) may be *higher* when there's more at stake (higher combined\\_earning). A small unfairness might be tolerated when the total pie is small, but the same unfairness might trigger rejection when the pie is large. I'll model this as a multiplicative interaction.\n*   **Trial Type and Fairness:** The `trial_type` variable biases how the individual views the \"fair\" split.\n*   **Token Ratio and Amount:** The token ratio and the amount of money available can determine the response. The more money at stake, the more likely someone is to accept something above some minimal threshold.\n\n**3. Mathematical Form:**\n\n*   **FairShare:** I'll calculate a \"FairShare\" based on the token ratio and modulate it by `trial_type` multiplicatively. This attempts to capture the fairness perception. Let's use trial type as a multiplier of how much the individual views there fair share.\n    *   `token_ratio = token_self / (token_self + token_opp)`\n    *   `FairShare = token_ratio * trial_type_multiplier`\n*   **Amount Received:** `split_self` will determine how much money they are getting.\n*   **Loss Aversion:** I'll use a power function to model loss aversion. I will create an expected gain based on what they view as fair vs what they are getting.\n    *   `expected_gain = split_self - FairShare * combined_earning`\n    *   `loss_aversion = expected_gain < 0 ? lambda_param * abs(expected_gain)**rho : expected_gain**rho`\n*   **Utility:** The utility of accepting the offer will be a function of fairness (FairShare), amount (split\\_self), and loss aversion. I'll incorporate alpha (fairness sensitivity), beta (amount sensitivity), and gamma (alpha/combined_earning interaction).\n    *   `utility = alpha * combined_earning**gamma * FairShare + beta * split_self**omega - loss_aversion`\n*   **Probability of Acceptance:** I'll use a logistic function to convert utility into a probability of accepting:\n    *   `probability_accept = 1 / (1 + exp(-utility))`\n\n**4. Parameters:**\n\n*   `alpha`: Fairness sensitivity. Higher values mean greater sensitivity to deviations from FairShare.\n*   `beta`: Amount sensitivity. Higher values mean greater preference for larger amounts.\n*   `gamma`: Combined earning interaction. Captures the degree to which fairness sensitivity increases with combined earnings.\n*   `lambda_param`: Loss aversion parameter. Values greater than 1 indicate loss aversion.\n*   `rho`: Curvature of the Loss Aversion function.\n*   `omega`: Curvature of the utility over the money available.\n*   `trial_type_multiplier`: Multiplier to account for the fact that an equal trial type is different than an opponent more, and a participant more trial type.\n\n**5. Mapping to Observable Behavior:**\n\nThe model predicts the probability of accepting the offer (`accept`). This probability is derived from the utility function, which incorporates fairness, amount, and loss aversion, weighted by the sensitivity parameters.\n\n**6. Parameter Identifiability Considerations:**\n\n*   **Multiplicative `trial_type`:** This reduces the direct covariance with `alpha` and `beta`.\n*   **Combined Earning Interaction:** This could potentially increase covariance between alpha and gamma. Careful prior specification and regularization might be needed during fitting. I will constrain the range for the learning parameters.\n\nNow, let's formalize the model.\n\n```\n<MODEL>\ntoken_ratio = token_self / (token_self + token_opp)\nFairShare = token_ratio * trial_type_multiplier\nexpected_gain = split_self - FairShare * combined_earning\nloss_aversion = expected_gain < 0 ? lambda_param * abs(expected_gain)**rho : expected_gain**rho\nutility = alpha * combined_earning**gamma * FairShare + beta * split_self**omega - loss_aversion\nprobability_accept = 1 / (1 + exp(-utility))\n</MODEL>\n```\n\n```json\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_ratio\": {\n      \"description\": \"Ratio of tokens found by the participant to the total tokens found\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"FairShare\": {\n      \"description\": \"The participant's perception of a fair share, based on token ratio and trial type\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 3\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"expected_gain\": {\n      \"description\": \"Difference between amount offered and the participant's notion of fair share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_aversion\": {\n      \"description\": \"Loss aversion term, calculated as a power function of the expected gain/loss\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"utility\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"probability_accept\": {\n      \"description\": \"Probability of accepting the offer, derived from the utility using a logistic function\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Fairness sensitivity parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Amount sensitivity parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Combined earning interaction parameter (modulates fairness sensitivity)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n        \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion parameter\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n        \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n     \"rho\": {\n      \"description\": \"Loss aversion parameter\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n        \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n     \"omega\": {\n      \"description\": \"Diminishing returns to the amount\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n        \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"trial_type_multiplier\": {\n      \"description\": \"Multiplier applied to the token ratio based on the trial type. [trial_type = 1 = equal, 2 = opponent more, 3 = participant more]\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n        \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Amount of money earned in total\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"The proposed share of the opponent (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accept\": {\n      \"description\": \"Whether the participant responded accept (1) or reject (0)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n```\n\n```\n<target_variable>accept</target_variable>\n```\n\n```\n<SUMMARY>\nThis model predicts responder behavior in a resource allocation game by integrating fairness, amount sensitivity, and loss aversion. It calculates a \"FairShare\" based on the token ratio and modulates it by a trial_type multiplier. A utility function combines fairness, amount, and loss aversion (modeled using a power function), weighted by learnable parameters. Fairness sensitivity (alpha) is modulated by combined_earning. The model uses a logistic function to convert utility into the probability of accepting the offer. Parameters include alpha (fairness sensitivity), beta (amount sensitivity), gamma (combined earning interaction), lambda_param (loss aversion), rho (curvature of loss aversion), omega (curvature of utility of money), and trial_type_multiplier.\n</SUMMARY>\n```",
  "prediction_type": "utility",
  "current_model": "Specification: token_ratio = token_self / (token_self + token_opp)\nFairShare = token_ratio * trial_type_multiplier\nexpected_gain = split_self - FairShare * combined_earning\nloss_aversion = expected_gain < 0 ? lambda_param * abs(expected_gain)**rho : expected_gain**rho\nutility = alpha * combined_earning**gamma * FairShare + beta * split_self**omega - loss_aversion\nprobability_accept = 1 / (1 + exp(-utility))\nSummary: This model predicts responder behavior in a resource allocation game by integrating fairness, amount sensitivity, and loss aversion. It calculates a \"FairShare\" based on the token ratio and modulates it by a trial_type multiplier. A utility function combines fairness, amount, and loss aversion (modeled using a power function), weighted by learnable parameters. Fairness sensitivity (alpha) is modulated by combined_earning. The model uses a logistic function to convert utility into the probability of accepting the offer. Parameters include alpha (fairness sensitivity), beta (amount sensitivity), gamma (combined earning interaction), lambda_param (loss aversion), rho (curvature of loss aversion), omega (curvature of utility of money), and trial_type_multiplier.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=1, beta=1, gamma=0.5, lambda_param=2, rho=0.5, omega=0.5, trial_type_multiplier=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        trial_type = trial.get(\"trial_type\", 1)\n\n        #token_ratio = token_self / (token_self + token_opp) if (token_self + token_opp) > 0 else 0\n        if (token_self + token_opp) > 0:\n            token_ratio = token_self / (token_self + token_opp)\n        else:\n            token_ratio = 0\n\n        FairShare = token_ratio * trial_type_multiplier\n        expected_gain = split_self - FairShare * combined_earning\n\n        if expected_gain < 0:\n            loss_aversion = lambda_param * abs(expected_gain)**rho\n        else:\n            loss_aversion = expected_gain**rho\n\n        utility = alpha * combined_earning**gamma * FairShare + beta * split_self**omega - loss_aversion\n        probability_accept = 1 / (1 + math.exp(-utility))\n\n        model_predictions.append(probability_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6062271062271062,
  "fitting_results": [
    {
      "alpha": 0.0,
      "beta": 6.524412609515822,
      "gamma": 0.9428359672228067,
      "lambda_param": 10.0,
      "rho": 1.0,
      "omega": 0.1,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.3685921765356444,
      "beta": 10.0,
      "gamma": 0.6380145011583555,
      "lambda_param": 8.639851177868197,
      "rho": 1.0,
      "omega": 0.9271505198510481,
      "trial_type_multiplier": 1.7866369506581028,
      "success": true,
      "log_likelihood": -20.45901987696625,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "gamma": 0.0,
      "lambda_param": 10.0,
      "rho": 1.0,
      "omega": 0.8276837020080459,
      "trial_type_multiplier": 1.1946034265581766,
      "success": true,
      "log_likelihood": -19.675434632977517,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.837573038058327,
      "beta": 8.11594755800561,
      "gamma": 0.6000500864055046,
      "lambda_param": 10.0,
      "rho": 0.5999677890365928,
      "omega": 1.0,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -21.606246762122705,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1121446638051886,
      "beta": 9.90139283960438,
      "gamma": 1.0,
      "lambda_param": 10.0,
      "rho": 1.0,
      "omega": 0.8387661785374144,
      "trial_type_multiplier": 1.4361620819747052,
      "success": true,
      "log_likelihood": -20.417615069326345,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.893194879037591,
      "beta": 4.624712255902891,
      "gamma": 0.7957030019006498,
      "lambda_param": 9.999980050349732,
      "rho": 0.8261293882766049,
      "omega": 1.0,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -17.79247515821267,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.84503147702741,
      "beta": 10.0,
      "gamma": 1.0,
      "lambda_param": 8.663671710634063,
      "rho": 0.1,
      "omega": 1.0,
      "trial_type_multiplier": 1.907117636493551,
      "success": true,
      "log_likelihood": -11.277420749090219,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5062012521457645,
      "beta": 6.9059080818382865,
      "gamma": 0.6680846494906274,
      "lambda_param": 1.7501388889458738,
      "rho": 0.9315140597018575,
      "omega": 0.6678425765832858,
      "trial_type_multiplier": 2.3928304499442348,
      "success": true,
      "log_likelihood": -18.29840980882821,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 9.36263630938791,
      "gamma": 1.0,
      "lambda_param": 1.0,
      "rho": 0.1,
      "omega": 1.0,
      "trial_type_multiplier": 1.5878304656056759,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.3095882739886937,
      "beta": 4.9801429354023545,
      "gamma": 0.6105079765726718,
      "lambda_param": 5.338911686514155,
      "rho": 0.9813041733233492,
      "omega": 0.9901343912233077,
      "trial_type_multiplier": 1.9501836640795651,
      "success": true,
      "log_likelihood": -21.59277626868395,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.4562550982460163,
      "beta": 8.101259406638572,
      "gamma": 1.0,
      "lambda_param": 10.0,
      "rho": 0.9735383317111904,
      "omega": 1.0,
      "trial_type_multiplier": 1.5656681877449068,
      "success": true,
      "log_likelihood": -19.23543362758755,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.96637114826872,
      "beta": 2.8574053732095543,
      "gamma": 0.0,
      "lambda_param": 7.8283104652693805,
      "rho": 1.0,
      "omega": 0.1,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -24.95329849290357,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.2033615686478094,
      "beta": 7.594183463782328,
      "gamma": 0.4040979448057686,
      "lambda_param": 10.0,
      "rho": 1.0,
      "omega": 1.0,
      "trial_type_multiplier": 1.2890139220617371,
      "success": true,
      "log_likelihood": -19.762477075052654,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.939970798492761,
      "beta": 3.6110090098435723,
      "gamma": 1.0,
      "lambda_param": 7.340606139109682,
      "rho": 0.1,
      "omega": 1.0,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.28324861663098,
      "beta": 5.169418264520346,
      "gamma": 1.0,
      "lambda_param": 6.37714321126002,
      "rho": 0.1,
      "omega": 1.0,
      "trial_type_multiplier": 0.7238758304357221,
      "success": true,
      "log_likelihood": -11.277420750817289,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.855633165203166,
      "beta": 5.827028794182345,
      "gamma": 0.7095526136900784,
      "lambda_param": 6.84624349265257,
      "rho": 0.11068706375204372,
      "omega": 0.8488365945609125,
      "trial_type_multiplier": 1.3525724420049219,
      "success": true,
      "log_likelihood": -11.277420746310431,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.621913531645252,
      "beta": 6.001693844499206,
      "gamma": 1.0,
      "lambda_param": 9.353581821338823,
      "rho": 1.0,
      "omega": 1.0,
      "trial_type_multiplier": 0.3312316608297175,
      "success": true,
      "log_likelihood": -11.277428071312002,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.818719730267118,
      "beta": 8.201769115029693,
      "gamma": 0.9997383876448313,
      "lambda_param": 10.0,
      "rho": 0.8441987382214983,
      "omega": 1.0,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -13.231173932252437,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.582544186054264,
      "beta": 10.0,
      "gamma": 0.9016980694473122,
      "lambda_param": 9.69767734277893,
      "rho": 1.0,
      "omega": 0.6695399997482002,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -13.653468209232281,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.243335315258625,
      "beta": 1.113993054282676,
      "gamma": 0.7040468204002627,
      "lambda_param": 6.807613122895269,
      "rho": 0.6318668019252158,
      "omega": 0.5811208125064424,
      "trial_type_multiplier": 2.205537039683813,
      "success": true,
      "log_likelihood": -11.277420858918783,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 10.0,
      "gamma": 0.7775004521195413,
      "lambda_param": 9.680347550177897,
      "rho": 1.0,
      "omega": 0.9107645468274734,
      "trial_type_multiplier": 2.997545398112202,
      "success": true,
      "log_likelihood": -18.552618154700397,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 10.0,
      "gamma": 0.8990390402601804,
      "lambda_param": 9.999960523718116,
      "rho": 0.9964095904109758,
      "omega": 1.0,
      "trial_type_multiplier": 2.5906099936781977,
      "success": true,
      "log_likelihood": -14.419466527291545,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "gamma": 0.0,
      "lambda_param": 7.005272850449908,
      "rho": 1.0,
      "omega": 0.1,
      "trial_type_multiplier": 0.1,
      "success": true,
      "log_likelihood": -26.42992458891152,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.205662618515583,
      "beta": 6.7482121252254705,
      "gamma": 0.0001019310477399686,
      "lambda_param": 6.817180505285213,
      "rho": 0.9461028987197907,
      "omega": 1.0,
      "trial_type_multiplier": 1.5265228646773679,
      "success": true,
      "log_likelihood": -20.92747041608752,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.123451234235015,
      "beta": 10.0,
      "gamma": 0.8736319820233613,
      "lambda_param": 9.051417530520675,
      "rho": 1.0,
      "omega": 0.38709217451285555,
      "trial_type_multiplier": 2.4652909972356394,
      "success": true,
      "log_likelihood": -19.714195044388205,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.8383968062544356,
      "beta": 10.0,
      "gamma": 0.8625916704145001,
      "lambda_param": 4.208679847782747,
      "rho": 1.0,
      "omega": 0.6290622531201455,
      "trial_type_multiplier": 2.171836746994276,
      "success": true,
      "log_likelihood": -19.548492830504706,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.5336330549109455,
      "gamma": 0.24485107036216822,
      "lambda_param": 10.0,
      "rho": 0.2843826849001843,
      "omega": 1.0,
      "trial_type_multiplier": 0.749999996346817,
      "success": true,
      "log_likelihood": -19.08222255082048,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9490971742314102,
      "beta": 7.48108065952187,
      "gamma": 0.6273788184680571,
      "lambda_param": 8.283621470645281,
      "rho": 1.0,
      "omega": 0.881380792229707,
      "trial_type_multiplier": 1.5206387104309622,
      "success": true,
      "log_likelihood": -21.775583694545343,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.539986117111903,
      "beta": 7.3282416348525885,
      "gamma": 0.8888923652752798,
      "lambda_param": 4.875465087101374,
      "rho": 0.6618242658516945,
      "omega": 0.673540942814153,
      "trial_type_multiplier": 2.6453873214506105,
      "success": true,
      "log_likelihood": -15.277420973703908,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.341702960033379,
      "beta": 8.511011517993996,
      "gamma": 0.0,
      "lambda_param": 9.06369647802403,
      "rho": 1.0,
      "omega": 0.41998313120438774,
      "trial_type_multiplier": 0.7762129126846927,
      "success": true,
      "log_likelihood": -17.491743154074836,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.152024897791957,
      "beta": 6.717351287745907,
      "gamma": 1.0,
      "lambda_param": 8.342650841676443,
      "rho": 0.1,
      "omega": 1.0,
      "trial_type_multiplier": 1.982563187836388,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.21740705819963,
      "beta": 4.98300989324074,
      "gamma": 0.21731603788919251,
      "lambda_param": 6.688976108636919,
      "rho": 1.0,
      "omega": 1.0,
      "trial_type_multiplier": 2.674089499468689,
      "success": true,
      "log_likelihood": -24.57723887189572,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.863755160625411,
      "beta": 0.00021825162796103482,
      "gamma": 0.7482504180615894,
      "lambda_param": 10.0,
      "rho": 0.7225293466834295,
      "omega": 0.8145511397375033,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -22.36260148419528,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 9.999884384324307,
      "gamma": 0.6573228909532539,
      "lambda_param": 10.0,
      "rho": 0.961824003947977,
      "omega": 0.8898870267107428,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -21.967463146803745,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.576231365842224,
      "beta": 5.752784390512394,
      "gamma": 0.527657772828889,
      "lambda_param": 2.939121286945205,
      "rho": 0.6713767125542809,
      "omega": 0.5330080615150011,
      "trial_type_multiplier": 2.4555921778529455,
      "success": true,
      "log_likelihood": -11.277420746040875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.722990127984095,
      "beta": 2.2683571204656814,
      "gamma": 0.7732365243136734,
      "lambda_param": 10.0,
      "rho": 0.7025585285606255,
      "omega": 1.0,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -17.722755588578195,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8193055781369558,
      "beta": 7.106675706021335,
      "gamma": 1.0,
      "lambda_param": 5.943667545463549,
      "rho": 0.7311133757095382,
      "omega": 1.0,
      "trial_type_multiplier": 2.347131872342724,
      "success": true,
      "log_likelihood": -17.037441249358846,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.1408860159101915,
      "beta": 9.870038386832995,
      "gamma": 0.8217547624862297,
      "lambda_param": 9.384184758350992,
      "rho": 1.0,
      "omega": 0.9999902131724306,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -20.44814164172749,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.271624319618961,
      "beta": 8.906854416741105,
      "gamma": 0.0,
      "lambda_param": 10.0,
      "rho": 1.0,
      "omega": 0.9687793736564209,
      "trial_type_multiplier": 1.3002156473912936,
      "success": true,
      "log_likelihood": -19.722287778818778,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.477010163129822,
      "beta": 9.132395367628071,
      "gamma": 0.8956587626219799,
      "lambda_param": 3.5545680894660636,
      "rho": 0.7147366933814843,
      "omega": 0.6726125756795284,
      "trial_type_multiplier": 2.4069656374209605,
      "success": true,
      "log_likelihood": -14.277420745026529,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 3.97339809808723,
      "gamma": 0.5440250656736486,
      "lambda_param": 8.621044764693076,
      "rho": 0.7750700399488042,
      "omega": 0.7169125847958302,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -18.64027387233938,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.8639727546015465,
      "beta": 5.167272884600213,
      "gamma": 0.5391984007012894,
      "lambda_param": 1.0050587102660753,
      "rho": 0.3929105147937694,
      "omega": 0.253892105857916,
      "trial_type_multiplier": 2.863622028977824,
      "success": true,
      "log_likelihood": -39.277305556377314,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.434524953315767,
      "beta": 3.388052319616869,
      "gamma": 1.0,
      "lambda_param": 1.0,
      "rho": 0.1,
      "omega": 1.0,
      "trial_type_multiplier": 1.9976736407845046,
      "success": true,
      "log_likelihood": -12.277420745496608,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.608330954332432,
      "beta": 3.2545681150495778,
      "gamma": 0.5582573644384489,
      "lambda_param": 7.833992327306359,
      "rho": 0.7017337827657519,
      "omega": 0.9420730098645858,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -19.33637116892102,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.167644215631382,
      "beta": 7.627990152458856,
      "gamma": 0.1271644080475186,
      "lambda_param": 6.6684046067729295,
      "rho": 0.6876994053500819,
      "omega": 1.0,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -18.75753264861777,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.11317956917146606,
      "beta": 9.733990248980065,
      "gamma": 0.16590567436662074,
      "lambda_param": 10.0,
      "rho": 0.9364713509949474,
      "omega": 1.0,
      "trial_type_multiplier": 0.6522911247673762,
      "success": true,
      "log_likelihood": -18.861555477093027,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.263674657138296,
      "beta": 5.302219675215422,
      "gamma": 0.37498858005078795,
      "lambda_param": 10.0,
      "rho": 0.6415895119596489,
      "omega": 1.0,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -19.543108371835128,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.549083465189845,
      "beta": 10.0,
      "gamma": 0.6240901153926034,
      "lambda_param": 10.0,
      "rho": 1.0,
      "omega": 1.0,
      "trial_type_multiplier": 2.11762469073504,
      "success": true,
      "log_likelihood": -22.610366488885127,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.159328907915861,
      "beta": 8.067525182582772,
      "gamma": 0.21896622354943782,
      "lambda_param": 1.9697664197793665,
      "rho": 0.5299072227512048,
      "omega": 0.28332083586178847,
      "trial_type_multiplier": 0.4142871557051708,
      "success": true,
      "log_likelihood": -32.277047332115906,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.124655518296576,
      "beta": 7.3734872724430645,
      "gamma": 0.06609057777419311,
      "lambda_param": 8.013373463046436,
      "rho": 1.0,
      "omega": 1.0,
      "trial_type_multiplier": 2.788547331057651,
      "success": true,
      "log_likelihood": -24.574134217086666,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.738255160864643,
      "beta": 9.676396463974093,
      "gamma": 0.7393985138359349,
      "lambda_param": 8.048670483879848,
      "rho": 0.9437055367835252,
      "omega": 1.0,
      "trial_type_multiplier": 2.9994758889156516,
      "success": true,
      "log_likelihood": -19.075210388082215,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0832892127109288,
      "beta": 8.521273377823505,
      "gamma": 0.4571771041757951,
      "lambda_param": 5.3797332248951655,
      "rho": 1.0,
      "omega": 0.8058435341959361,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -24.57965952541455,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.075676136944253,
      "beta": 5.763899802198375,
      "gamma": 0.6058776816603116,
      "lambda_param": 10.0,
      "rho": 0.696092326900543,
      "omega": 1.0,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -19.954670959887203,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.8139841896246764,
      "beta": 1.550659727263841,
      "gamma": 0.8186373782274469,
      "lambda_param": 10.0,
      "rho": 0.5034000899326043,
      "omega": 1.0,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -21.096083300305466,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.684382403611514,
      "beta": 8.62042556973378,
      "gamma": 0.0,
      "lambda_param": 4.404952519915829,
      "rho": 1.0,
      "omega": 0.7602791131614705,
      "trial_type_multiplier": 2.2147655573247036,
      "success": true,
      "log_likelihood": -23.12853631696619,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7377995061847402,
      "beta": 9.761986054917067,
      "gamma": 0.5065183518371117,
      "lambda_param": 10.0,
      "rho": 1.0,
      "omega": 0.9595448170583403,
      "trial_type_multiplier": 1.4511087297881289,
      "success": true,
      "log_likelihood": -21.420672346848296,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 7.2033769965007854,
      "gamma": 0.2724395318961427,
      "lambda_param": 9.99171573425881,
      "rho": 0.7058439103194162,
      "omega": 0.9027298140495464,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -22.82726871769236,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.047971672387588,
      "beta": 4.7615890955450375,
      "gamma": 1.0,
      "lambda_param": 9.041907728585059,
      "rho": 0.7135977368461917,
      "omega": 0.9565999225869807,
      "trial_type_multiplier": 1.9983068410920897,
      "success": true,
      "log_likelihood": -15.27742074522025,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.020147929967122474,
      "beta": 6.927104268023995,
      "gamma": 1.943715888053183e-08,
      "lambda_param": 9.95937778732303,
      "rho": 1.0,
      "omega": 1.0,
      "trial_type_multiplier": 2.2984043363651203,
      "success": true,
      "log_likelihood": -24.57378065433568,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.3460002358382144,
      "beta": 3.9496380117737586,
      "gamma": 1.0,
      "lambda_param": 8.798078810492694,
      "rho": 0.7358967998581435,
      "omega": 1.0,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -15.914969626812251,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.27381610092668,
      "beta": 8.179339120081364,
      "gamma": 0.9904655497138039,
      "lambda_param": 8.248388854999268,
      "rho": 0.9541254800797447,
      "omega": 1.0,
      "trial_type_multiplier": 1.9423418964159567,
      "success": true,
      "log_likelihood": -20.310765011794242,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.41740786862192,
      "beta": 2.903485624462947,
      "gamma": 0.3526654271048153,
      "lambda_param": 4.978349259838398,
      "rho": 0.921483293016503,
      "omega": 0.961349960272295,
      "trial_type_multiplier": 1.8186126143027195,
      "success": true,
      "log_likelihood": -19.554512544634072,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7863709952279339,
      "beta": 8.120814734535507,
      "gamma": 0.0,
      "lambda_param": 7.291026676227479,
      "rho": 1.0,
      "omega": 0.1,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -24.95329849274691,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.946774749792634,
      "beta": 6.537740846840994,
      "gamma": 0.23048411011018527,
      "lambda_param": 3.305267690892787,
      "rho": 0.10510495691713317,
      "omega": 0.43892335123958787,
      "trial_type_multiplier": 0.9818343998437041,
      "success": true,
      "log_likelihood": -31.27726327384515,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.082435195057839,
      "beta": 2.6147776137469165,
      "gamma": 0.6542678277742988,
      "lambda_param": 9.22061076382142,
      "rho": 0.7294941767886262,
      "omega": 1.0,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -23.176237575154147,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.532861088069714,
      "beta": 8.238840237472445,
      "gamma": 0.10547500374245702,
      "lambda_param": 7.018944707161919,
      "rho": 0.8171472432874524,
      "omega": 0.9817322609310202,
      "trial_type_multiplier": 1.8265852372384381,
      "success": true,
      "log_likelihood": -19.373673488935747,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.055731119826275,
      "beta": 9.20805724622409,
      "gamma": 0.7973142811159422,
      "lambda_param": 2.965962348931721,
      "rho": 0.5063702315221931,
      "omega": 0.8168385420857766,
      "trial_type_multiplier": 1.9757314730768758,
      "success": true,
      "log_likelihood": -14.277420745030437,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.91017768363284,
      "beta": 2.967503675195038,
      "gamma": 1.0,
      "lambda_param": 7.229252312716236,
      "rho": 0.1,
      "omega": 1.0,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -16.277420744556448,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.557856417289199,
      "beta": 5.49436364654702,
      "gamma": 0.6989793342227388,
      "lambda_param": 9.923471472408531,
      "rho": 0.9308205611296763,
      "omega": 0.9575585209552396,
      "trial_type_multiplier": 1.643307713262848,
      "success": true,
      "log_likelihood": -21.494577759824335,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.637924879121051,
      "beta": 1.3536460923812936,
      "gamma": 1.0,
      "lambda_param": 5.925169514754005,
      "rho": 0.1,
      "omega": 0.48794140110879336,
      "trial_type_multiplier": 2.0565750057837904,
      "success": true,
      "log_likelihood": -14.277420745026747,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9150636765917716,
      "beta": 5.598418269521197,
      "gamma": 0.639068912173133,
      "lambda_param": 7.112940040317789,
      "rho": 0.7502868216372809,
      "omega": 1.0,
      "trial_type_multiplier": 2.4604246438846853,
      "success": true,
      "log_likelihood": -23.490642108880547,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.177060290586119,
      "beta": 3.6060611295951204,
      "gamma": 0.0,
      "lambda_param": 7.664191331348113,
      "rho": 1.0,
      "omega": 0.1,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -24.953298492912566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.962615705372418,
      "beta": 8.550599460684486,
      "gamma": 0.6621072116143333,
      "lambda_param": 10.0,
      "rho": 0.7737268536966226,
      "omega": 1.0,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -19.645355155260454,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 1.0907956914817467,
      "gamma": 0.0,
      "lambda_param": 10.0,
      "rho": 0.1,
      "omega": 1.0,
      "trial_type_multiplier": 0.1,
      "success": true,
      "log_likelihood": -18.676620295613073,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.555756645119126,
      "beta": 8.264603287554944,
      "gamma": 0.3250308382152205,
      "lambda_param": 9.680042086098709,
      "rho": 0.9972351216835562,
      "omega": 0.6579804896547075,
      "trial_type_multiplier": 1.2896474752859222,
      "success": true,
      "log_likelihood": -22.23547779853111,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 2.665111724520349,
      "gamma": 0.8269027441211007,
      "lambda_param": 8.377714579318104,
      "rho": 0.9796279434284435,
      "omega": 0.27028726321430907,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -16.415169044995427,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.778405220023604,
      "beta": 2.0298499447500395,
      "gamma": 0.9100688591036175,
      "lambda_param": 7.5507515485306556,
      "rho": 0.17348426952210763,
      "omega": 0.47959778519000085,
      "trial_type_multiplier": 2.413376627109562,
      "success": true,
      "log_likelihood": -13.277420745261566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.278094802026739,
      "beta": 8.570565943321041,
      "gamma": 0.0,
      "lambda_param": 8.221359452713868,
      "rho": 1.0,
      "omega": 0.1,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -24.95329849344197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.3099207672001745,
      "beta": 5.324196463979014,
      "gamma": 0.0,
      "lambda_param": 9.866858994303625,
      "rho": 0.5680119335005668,
      "omega": 1.0,
      "trial_type_multiplier": 1.7671391291576304,
      "success": true,
      "log_likelihood": -21.348021125050412,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 7.583166164722945,
      "gamma": 0.0,
      "lambda_param": 10.0,
      "rho": 1.0,
      "omega": 0.1,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 6.730601389823812,
      "gamma": 0.5036250666671103,
      "lambda_param": 8.511414850424726,
      "rho": 0.912101220858311,
      "omega": 0.7380738402497117,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -23.8598784522275,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.30060487570038,
      "beta": 5.060828544149601,
      "gamma": 1.0,
      "lambda_param": 7.749874063021426,
      "rho": 0.1,
      "omega": 1.0,
      "trial_type_multiplier": 1.6357112306255774,
      "success": true,
      "log_likelihood": -14.277420745026527,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8805549700179525,
      "beta": 0.5546371900036393,
      "gamma": 0.0,
      "lambda_param": 8.579127096194512,
      "rho": 1.0,
      "omega": 0.1,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.346564002017488,
      "beta": 9.996322618054547,
      "gamma": 0.16201547446201323,
      "lambda_param": 9.997940224024514,
      "rho": 0.5568035131110544,
      "omega": 1.0,
      "trial_type_multiplier": 2.8788152139321515,
      "success": true,
      "log_likelihood": -19.0590396325197,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.995170845104469,
      "beta": 3.1766965743088997,
      "gamma": 0.4511690670129933,
      "lambda_param": 6.709989257260834,
      "rho": 1.0,
      "omega": 0.2639056818085117,
      "trial_type_multiplier": 1.3709823448940106,
      "success": true,
      "log_likelihood": -21.9599175445666,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.699769823945865,
      "beta": 6.518053651987886,
      "gamma": 0.0,
      "lambda_param": 9.5083228828144,
      "rho": 1.0,
      "omega": 0.1,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -24.953298492957984,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 8.925463287696543,
      "gamma": 0.7694779412936755,
      "lambda_param": 9.601772975096464,
      "rho": 0.969350403375138,
      "omega": 1.0,
      "trial_type_multiplier": 2.9999845677682053,
      "success": true,
      "log_likelihood": -19.022113021039196,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.11942227175596089,
      "beta": 3.7611066563108206,
      "gamma": 0.0,
      "lambda_param": 10.0,
      "rho": 1.0,
      "omega": 0.1,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.463502721589986,
      "beta": 7.39529707509349,
      "gamma": 0.9970458354158825,
      "lambda_param": 5.637872961163158,
      "rho": 0.26544880656964887,
      "omega": 0.5387030430910728,
      "trial_type_multiplier": 2.484949641847994,
      "success": true,
      "log_likelihood": -13.277420745261571,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.9921336742542923,
      "beta": 4.6074955757361895,
      "gamma": 0.6850095955707982,
      "lambda_param": 10.0,
      "rho": 0.4584750073558898,
      "omega": 1.0,
      "trial_type_multiplier": 3.0,
      "success": true,
      "log_likelihood": -19.44575464434164,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.723731987147189,
      "beta": 0.6005369363556543,
      "gamma": 0.0,
      "lambda_param": 5.527446069832137,
      "rho": 0.2333992134864673,
      "omega": 1.0,
      "trial_type_multiplier": 0.1,
      "success": true,
      "log_likelihood": -21.864792251804328,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": -0.13699960002371833,
        "p": 0.1740864147061513
      },
      "beta": {
        "r": -0.23417589057403465,
        "p": 0.0190258597432256
      },
      "gamma": {
        "r": 0.10004327675762936,
        "p": 0.3220069376392654
      },
      "lambda_param": {
        "r": -0.03196427075729395,
        "p": 0.7522266646388923
      },
      "rho": {
        "r": 0.03009478439127485,
        "p": 0.7662897629863483
      },
      "omega": {
        "r": 0.09490512420778505,
        "p": 0.34760676442675703
      },
      "trial_type_multiplier": {
        "r": -0.03383502251774736,
        "p": 0.7382346542069115
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 64.31569241795472,
  "bic_results": {
    "average_bic": 64.31569241795472,
    "individual_bics": [
      74.99122955510879,
      66.00267232312527,
      64.4355018351478,
      68.29712609343818,
      65.91986270784545,
      60.66958288561811,
      47.63947406737321,
      61.68145218684919,
      47.63947406065607,
      68.27018510656066,
      63.55549982436787,
      74.9912295549999,
      64.60958671929808,
      47.63947406065607,
      47.63947407082735,
      47.63947406181363,
      47.639488711816774,
      51.54698043369764,
      52.39156898765734,
      47.63947428703034,
      62.189868878593565,
      53.92356562377586,
      77.9444817470158,
      66.93957340136781,
      64.51302265796917,
      64.18161823020219,
      63.24907767083373,
      68.63579995828346,
      55.639474516600586,
      60.06811887734244,
      47.63947406065607,
      74.23911031298421,
      69.80983553758333,
      69.01955886280027,
      47.63947406127452,
      60.53014374634916,
      59.15951506791046,
      65.98091585264774,
      64.52920812683033,
      53.63947405924583,
      62.365180313871534,
      103.63924368194739,
      49.63947406018599,
      63.75737490703481,
      62.59969786642831,
      62.807743523378825,
      64.17084931286303,
      70.30536554696303,
      89.63872723342459,
      74.2329010033661,
      63.2350533453572,
      74.24395162002187,
      64.99397448896718,
      67.2767991698037,
      71.34170520312514,
      67.92597726288936,
      70.73917000457749,
      55.63947405963327,
      74.23219387786412,
      56.91457182281727,
      65.70616259278125,
      64.19365765846092,
      74.99122955468658,
      87.63915911688306,
      71.43710771950106,
      63.831979547064265,
      53.639474059253644,
      57.639474058305666,
      68.07378808884144,
      53.63947405924627,
      72.06591678695386,
      74.9912295550179,
      64.37534287971368,
      62.43787316041892,
      69.55558816625499,
      57.91497065918362,
      51.6394740597159,
      74.99122955607672,
      67.7806748192936,
      74.99122955510879,
      72.80438947364777,
      53.63947405924583,
      74.99122955510879,
      63.20271183423217,
      69.00446765832598,
      74.99122955510873,
      63.12885861127116,
      74.99122955510879,
      51.63947405971591,
      63.97614185787605,
      68.81421707280143
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 7,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha: r = -0.137\n- beta: r = -0.234\n- gamma: r = 0.100\n- lambda_param: r = -0.032\n- rho: r = 0.030\n- omega: r = 0.095\n- trial_type_multiplier: r = -0.034",
  "previous_models": [
    "Specification: token_ratio = token_self / (token_self + token_opp)\nFairShare = token_ratio * trial_type_multiplier\nexpected_gain = split_self - FairShare * combined_earning\nloss_aversion = expected_gain < 0 ? lambda_param * abs(expected_gain)**rho : expected_gain**rho\nutility = alpha * combined_earning**gamma * FairShare + beta * split_self**omega - loss_aversion\nprobability_accept = 1 / (1 + exp(-utility))\nSummary: This model predicts responder behavior in a resource allocation game by integrating fairness, amount sensitivity, and loss aversion. It calculates a \"FairShare\" based on the token ratio and modulates it by a trial_type multiplier. A utility function combines fairness, amount, and loss aversion (modeled using a power function), weighted by learnable parameters. Fairness sensitivity (alpha) is modulated by combined_earning. The model uses a logistic function to convert utility into the probability of accepting the offer. Parameters include alpha (fairness sensitivity), beta (amount sensitivity), gamma (combined earning interaction), lambda_param (loss aversion), rho (curvature of loss aversion), omega (curvature of utility of money), and trial_type_multiplier.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 64.31569241795472\nOverall Accuracy: 0.6062\n\nParameter Recovery:\n- alpha: r = -0.137\n- beta: r = -0.234\n- gamma: r = 0.100\n- lambda_param: r = -0.032\n- rho: r = 0.030\n- omega: r = 0.095\n- trial_type_multiplier: r = -0.034"
  ]
}