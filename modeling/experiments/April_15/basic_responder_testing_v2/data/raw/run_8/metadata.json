{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "```text\nInstructions:\n<think>\nThe previous model performed poorly, with very low parameter recovery, poor accuracy, and a high BIC. It's clear the model is over-parameterized, and the chosen functional forms don't capture the underlying psychology well, or are too heavily parameterized without a strong reason. The interaction between alpha and combined_earning didn't help, and the trial_type multiplier also failed to improve parameter recovery. The individual power laws for different parameters were also not identifiable.\n\nHere's what to do to improve, focusing on simplification and identifiability:\n\n1.  **Drastically Reduce Parameters:** Aim for a model with *at most* 4 learnable parameters, and preferably 3. Every parameter must be strongly justified. Get rid of parameters like rho, omega, and gamma.\n2.  **Re-evaluate FairShare:** The trial_type multiplier didn't work. Instead of trying to modulate fairness in a complex way, go back to the basic idea of incorporating trial_type as a direct effect on utility, or on the *weight* of the fairness component.\n3.  **Simpler Loss Aversion:** Get rid of the power law loss aversion. A simple linear loss aversion (lambda * expected_loss if expected_loss < 0, 0 otherwise) might be more identifiable.\n4.  **No interaction between Alpha and Combined Earning:** As implemented, it hurts parameter recovery. Avoid it.\n5.  **Focus on Core Mechanisms:** Prioritize getting the basic fairness, amount sensitivity, and loss aversion components right before adding complexities.\n\n</think>\n\nBe EXTREMELY considerate of high covariance between learnable parameters in the model. Aim for an appropriate number of learnable parameters, with a strong bias toward fewer if it improves parameter identifiability. The model should propose a significantly different BIC than previous models, hopefully lower.\n\nWhen developing your model, reason step by step about:\n\n*   The *most essential* psychological mechanisms involved: fairness, loss aversion, and amount sensitivity. What are the *minimal* number of parameters needed to capture these?\n*   How these mechanisms *fundamentally* interact. Are the interactions multiplicative, additive, or something else? Justify your choice based on theory or intuition.\n*   What *simple* mathematical form could capture these interactions. Avoid complex functions unless there's a very strong reason. Favor linear or logarithmic functions over power laws.\n*   What parameters are *absolutely necessary* to calibrate the model, focusing ruthlessly on potential parameter covariance and identifiability issues. What are the ranges of these parameters?\n*   How the *core* model variables map to observable behavior.\n\nIncorporate *strong* prior knowledge or constraints that could reduce parameter covariance and improve parameter identifiability. Given the failure of previous attempts to model trial_type, consider alternative approaches that are more parsimonious. Perhaps trial_type directly modulates the *utility* associated with accepting or rejecting, rather than being part of the fairness calculation.\n\n```",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: ```text\nInstructions:\n<think>\nThe previous model performed poorly, with very low parameter recovery, poor accuracy, and a high BIC. It's clear the model is over-parameterized, and the chosen functional forms don't capture the underlying psychology well, or are too heavily parameterized without a strong reason. The interaction between alpha and combined_earning didn't help, and the trial_type multiplier also failed to improve parameter recovery. The individual power laws for different parameters were also not identifiable.\n\nHere's what to do to improve, focusing on simplification and identifiability:\n\n1.  **Drastically Reduce Parameters:** Aim for a model with *at most* 4 learnable parameters, and preferably 3. Every parameter must be strongly justified. Get rid of parameters like rho, omega, and gamma.\n2.  **Re-evaluate FairShare:** The trial_type multiplier didn't work. Instead of trying to modulate fairness in a complex way, go back to the basic idea of incorporating trial_type as a direct effect on utility, or on the *weight* of the fairness component.\n3.  **Simpler Loss Aversion:** Get rid of the power law loss aversion. A simple linear loss aversion (lambda * expected_loss if expected_loss < 0, 0 otherwise) might be more identifiable.\n4.  **No interaction between Alpha and Combined Earning:** As implemented, it hurts parameter recovery. Avoid it.\n5.  **Focus on Core Mechanisms:** Prioritize getting the basic fairness, amount sensitivity, and loss aversion components right before adding complexities.\n\n</think>\n\nBe EXTREMELY considerate of high covariance between learnable parameters in the model. Aim for an appropriate number of learnable parameters, with a strong bias toward fewer if it improves parameter identifiability. The model should propose a significantly different BIC than previous models, hopefully lower.\n\nWhen developing your model, reason step by step about:\n\n*   The *most essential* psychological mechanisms involved: fairness, loss aversion, and amount sensitivity. What are the *minimal* number of parameters needed to capture these?\n*   How these mechanisms *fundamentally* interact. Are the interactions multiplicative, additive, or something else? Justify your choice based on theory or intuition.\n*   What *simple* mathematical form could capture these interactions. Avoid complex functions unless there's a very strong reason. Favor linear or logarithmic functions over power laws.\n*   What parameters are *absolutely necessary* to calibrate the model, focusing ruthlessly on potential parameter covariance and identifiability issues. What are the ranges of these parameters?\n*   How the *core* model variables map to observable behavior.\n\nIncorporate *strong* prior knowledge or constraints that could reduce parameter covariance and improve parameter identifiability. Given the failure of previous attempts to model trial_type, consider alternative approaches that are more parsimonious. Perhaps trial_type directly modulates the *utility* associated with accepting or rejecting, rather than being part of the fairness calculation.\n\n```\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "```think\nOkay, I've carefully considered the feedback and the failures of the previous model. It's clear that simplicity and identifiability are key. I need to drastically reduce the number of parameters and focus on the core mechanisms of fairness, amount sensitivity, and loss aversion, while avoiding complex interactions and power laws. I will also incorporate the trial_type in a more direct way.\n\nHere's my plan for the revised model:\n\n1.  **Core Mechanisms:**\n    *   **Fairness:** I'll use a simple fairness term, `fairness = split_self / combined_earning`. This represents the proportion of the total earning offered to the participant.\n    *   **Amount Sensitivity:**  I will scale the fairness value, since subjects are sensitive to the absolute amount. Use `split_self`.\n    *   **Loss Aversion:** A simple linear loss aversion term will be included, which will compare the received amount versus the fair share.\n\n2.  **Interaction:** I'll use an additive model where the utility is the sum of the weighted fairness, the amount and the loss aversion components.\n\n3.  **Mathematical Form:**  I'll use linear terms for fairness, amount, and loss aversion.\n\n4.  **Parameters:**\n    *   `alpha`: Weight for fairness.  Bounded between 0 and 10.\n    *   `beta`: Weight for amount. Bounded between 0 and 10.\n    *   `lambda_param`: Loss aversion coefficient. Bounded between 0 and 10.\n    *   `trial_type_effect`:  This directly influences utility based on whether the offer is fair, unfair to the participant, or unfair to the opponent. Bounded between -5 and 5. A negative value makes acceptance less likely, and vice-versa.\n\n5.  **Model Mapping:**\n    *   Utility = `alpha * fairness + beta * split_self + lambda_param * loss_aversion + trial_type_effect`.\n    *   loss_aversion = max(0, fairness * combined_earning - split_self). That is the difference between how much the subjects gets and what it *should* get.\n\n6.  **trial\\_type:**\n    * Directly add this to the utility function, it will have a weight that the model can learn, to affect the probability to accept.\n\n7. **Prior Knowledge/Constraints:**\n    * The parameters `alpha`, `beta` and `lambda_param` are bounded above 0, and bounded.\n    *The `trial_type_effect` can be negative to positive, since it represents a disutility.\n\n</think>\n\n```\n<MODEL>\nU = alpha * (split_self / combined_earning) + beta * split_self + lambda_param * max(0, (split_self / combined_earning) * combined_earning - split_self) + trial_type_effect\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Weight for fairness\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Weight for amount\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion coefficient\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Amount of money earned in total\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type_effect\": {\n      \"description\": \"Direct effect of trial type on utility\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nA linear utility model with additive components for fairness, amount sensitivity, and linear loss aversion, along with a direct effect of trial type. It uses four learnable parameters: `alpha` (fairness weight), `beta` (amount weight), `lambda_param` (loss aversion coefficient), and `trial_type_effect`. The model predicts the utility of accepting an offer, which will then be passed through a logistic (sigmoid) function to predict whether the participant accepts or rejects.\n</SUMMARY>\n```"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta', 'lambda_param', 'trial_type_effect']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = alpha * (split_self / combined_earning) + beta * split_self + lambda_param * max(0, (split_self / combined_earning) * combined_earning - split_self) + trial_type_effect\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Weight for fairness\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Weight for amount\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion coefficient\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Amount of money earned in total\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type_effect\": {\n      \"description\": \"Direct effect of trial type on utility\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=1, beta=1, lambda_param=1, trial_type_effect=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)  # Avoid division by zero\n        if combined_earning == 0:\n            fairness = 0\n        else:\n            fairness = split_self / combined_earning\n\n        loss_aversion = max(0, (split_self / combined_earning) * combined_earning - split_self)\n\n        U = alpha * fairness + beta * split_self + lambda_param * loss_aversion + trial_type_effect\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"g1\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 10, \"split_opp\": 2.5, \"split_self\": 2.5, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 2.5, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 2.5}, {\"ID\": 1, \"group\": \"g1\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 10, \"split_opp\": 4.0, \"split_self\": 1.0, \"splitperc_opp\": 80, \"splitperc_self\": 20, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 20.0, \"proposed_amount\": 1.0}, {\"ID\": 2, \"group\": \"g1\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 10, \"split_opp\": 3.0, \"split_self\": 2.0, \"splitperc_opp\": 60, \"splitperc_self\": 40, \"accept\": 1.0, \"accepted_amount\": 2.0, \"accepted_perc\": 40.0, \"proposed_perc\": 40.0, \"proposed_amount\": 2.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744713963.808803
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Weight for fairness",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Weight for amount",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Loss aversion coefficient",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "trial_type_effect": {
      "description": "Direct effect of trial type on utility",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = alpha * (split_self / combined_earning) + beta * split_self + lambda_param * max(0, (split_self / combined_earning) * combined_earning - split_self) + trial_type_effect",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Weight for fairness",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Weight for amount",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Loss aversion coefficient",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Amount of money earned in total",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "trial_type_effect": {
      "description": "Direct effect of trial type on utility",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A linear utility model with additive components for fairness, amount sensitivity, and linear loss aversion, along with a direct effect of trial type. It uses four learnable parameters: `alpha` (fairness weight), `beta` (amount weight), `lambda_param` (loss aversion coefficient), and `trial_type_effect`. The model predicts the utility of accepting an offer, which will then be passed through a logistic (sigmoid) function to predict whether the participant accepts or rejects.",
  "target_variable": "accept",
  "full_reasoning": "```think\nOkay, I've carefully considered the feedback and the failures of the previous model. It's clear that simplicity and identifiability are key. I need to drastically reduce the number of parameters and focus on the core mechanisms of fairness, amount sensitivity, and loss aversion, while avoiding complex interactions and power laws. I will also incorporate the trial_type in a more direct way.\n\nHere's my plan for the revised model:\n\n1.  **Core Mechanisms:**\n    *   **Fairness:** I'll use a simple fairness term, `fairness = split_self / combined_earning`. This represents the proportion of the total earning offered to the participant.\n    *   **Amount Sensitivity:**  I will scale the fairness value, since subjects are sensitive to the absolute amount. Use `split_self`.\n    *   **Loss Aversion:** A simple linear loss aversion term will be included, which will compare the received amount versus the fair share.\n\n2.  **Interaction:** I'll use an additive model where the utility is the sum of the weighted fairness, the amount and the loss aversion components.\n\n3.  **Mathematical Form:**  I'll use linear terms for fairness, amount, and loss aversion.\n\n4.  **Parameters:**\n    *   `alpha`: Weight for fairness.  Bounded between 0 and 10.\n    *   `beta`: Weight for amount. Bounded between 0 and 10.\n    *   `lambda_param`: Loss aversion coefficient. Bounded between 0 and 10.\n    *   `trial_type_effect`:  This directly influences utility based on whether the offer is fair, unfair to the participant, or unfair to the opponent. Bounded between -5 and 5. A negative value makes acceptance less likely, and vice-versa.\n\n5.  **Model Mapping:**\n    *   Utility = `alpha * fairness + beta * split_self + lambda_param * loss_aversion + trial_type_effect`.\n    *   loss_aversion = max(0, fairness * combined_earning - split_self). That is the difference between how much the subjects gets and what it *should* get.\n\n6.  **trial\\_type:**\n    * Directly add this to the utility function, it will have a weight that the model can learn, to affect the probability to accept.\n\n7. **Prior Knowledge/Constraints:**\n    * The parameters `alpha`, `beta` and `lambda_param` are bounded above 0, and bounded.\n    *The `trial_type_effect` can be negative to positive, since it represents a disutility.\n\n</think>\n\n```\n<MODEL>\nU = alpha * (split_self / combined_earning) + beta * split_self + lambda_param * max(0, (split_self / combined_earning) * combined_earning - split_self) + trial_type_effect\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Weight for fairness\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Weight for amount\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion coefficient\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Amount of money earned in total\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type_effect\": {\n      \"description\": \"Direct effect of trial type on utility\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nA linear utility model with additive components for fairness, amount sensitivity, and linear loss aversion, along with a direct effect of trial type. It uses four learnable parameters: `alpha` (fairness weight), `beta` (amount weight), `lambda_param` (loss aversion coefficient), and `trial_type_effect`. The model predicts the utility of accepting an offer, which will then be passed through a logistic (sigmoid) function to predict whether the participant accepts or rejects.\n</SUMMARY>\n```",
  "prediction_type": "utility",
  "current_model": "Specification: U = alpha * (split_self / combined_earning) + beta * split_self + lambda_param * max(0, (split_self / combined_earning) * combined_earning - split_self) + trial_type_effect\nSummary: A linear utility model with additive components for fairness, amount sensitivity, and linear loss aversion, along with a direct effect of trial type. It uses four learnable parameters: `alpha` (fairness weight), `beta` (amount weight), `lambda_param` (loss aversion coefficient), and `trial_type_effect`. The model predicts the utility of accepting an offer, which will then be passed through a logistic (sigmoid) function to predict whether the participant accepts or rejects.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=1, beta=1, lambda_param=1, trial_type_effect=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)  # Avoid division by zero\n        if combined_earning == 0:\n            fairness = 0\n        else:\n            fairness = split_self / combined_earning\n\n        loss_aversion = max(0, (split_self / combined_earning) * combined_earning - split_self)\n\n        U = alpha * fairness + beta * split_self + lambda_param * loss_aversion + trial_type_effect\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7554945054945055,
  "fitting_results": [
    {
      "alpha": 8.413531725233554,
      "beta": 0.02588302769860373,
      "lambda_param": 9.6561485047521,
      "trial_type_effect": -5.0,
      "success": true,
      "log_likelihood": -6.334706660196199,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.1217838309876631,
      "lambda_param": 8.699014198229104,
      "trial_type_effect": -3.4332056382092233,
      "success": true,
      "log_likelihood": -18.75690948971076,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.21944985212307525,
      "lambda_param": 2.2923340631785183,
      "trial_type_effect": -3.6277510426353996,
      "success": true,
      "log_likelihood": -18.971947173136368,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.43970137493646005,
      "lambda_param": 6.994017486742284,
      "trial_type_effect": -5.0,
      "success": true,
      "log_likelihood": -15.565458346532052,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.0,
      "lambda_param": 4.01883248077496,
      "trial_type_effect": -3.2746088003779725,
      "success": true,
      "log_likelihood": -20.594400885712034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.34891959150487467,
      "lambda_param": 4.1798022538395685,
      "trial_type_effect": -3.4169473234607257,
      "success": true,
      "log_likelihood": -14.985864739447958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.5060119728874404,
      "beta": 7.398781946841213,
      "lambda_param": 8.477818573324067,
      "trial_type_effect": 3.8542782966859908,
      "success": true,
      "log_likelihood": -4.040309814797557e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.18636886071668177,
      "lambda_param": 5.014604050160003,
      "trial_type_effect": -2.743955942345847,
      "success": true,
      "log_likelihood": -15.661098699403894,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.5820616221591481,
      "beta": 6.458123867803774,
      "lambda_param": 1.8761103161042225,
      "trial_type_effect": 5.0,
      "success": true,
      "log_likelihood": -5.436208308007891e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.13078049086164328,
      "lambda_param": 9.143942992819845,
      "trial_type_effect": -4.0514102588148955,
      "success": true,
      "log_likelihood": -18.135733273965077,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.3210119570856365,
      "lambda_param": 6.791853326282173,
      "trial_type_effect": -4.452248458031049,
      "success": true,
      "log_likelihood": -16.423675528457675,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.298363812583604,
      "beta": 0.1764368752921241,
      "lambda_param": 4.064508772720483,
      "trial_type_effect": -5.0,
      "success": true,
      "log_likelihood": -8.048066710564218,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.06973513246368743,
      "lambda_param": 2.3631584038507123,
      "trial_type_effect": -3.674176058792787,
      "success": true,
      "log_likelihood": -17.21118117924633,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7196007146553343,
      "beta": 7.788073175469893,
      "lambda_param": 0.8837123807042413,
      "trial_type_effect": 3.418401081246581,
      "success": true,
      "log_likelihood": -4.956099576883228e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.4842003046411956,
      "beta": 6.888988245310656,
      "lambda_param": 5.662641868132693,
      "trial_type_effect": 3.8443008781862855,
      "success": true,
      "log_likelihood": -1.1798188532248164e-05,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.54798596540322,
      "beta": 10.0,
      "lambda_param": 0.7384145032283285,
      "trial_type_effect": 5.0,
      "success": true,
      "log_likelihood": -2.3299615085475153e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.54406592999295,
      "beta": 9.678236035905103,
      "lambda_param": 1.5782934166371643,
      "trial_type_effect": 1.9899490847847172,
      "success": true,
      "log_likelihood": -1.8088546117441512e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 2.0107545408962206,
      "lambda_param": 5.126537167849962,
      "trial_type_effect": -5.0,
      "success": true,
      "log_likelihood": -3.615663971806881,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.5145829839903231,
      "lambda_param": 7.328352684804544,
      "trial_type_effect": -1.807310834275675,
      "success": true,
      "log_likelihood": -8.394705258577183,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.343861267667401,
      "beta": 9.273090250544037,
      "lambda_param": 9.408218571159571,
      "trial_type_effect": 0.9388336234875749,
      "success": true,
      "log_likelihood": -5.776538183344697e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.0,
      "lambda_param": 2.2660020081109944,
      "trial_type_effect": -2.725391350310931,
      "success": true,
      "log_likelihood": -19.094400886087392,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.488417316890342,
      "lambda_param": 8.375504623687501,
      "trial_type_effect": -2.075894041418563,
      "success": true,
      "log_likelihood": -9.651676228294058,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.36372717258714793,
      "lambda_param": 2.2941718865977014,
      "trial_type_effect": -5.0,
      "success": true,
      "log_likelihood": -12.954170466333975,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.36460466443071815,
      "lambda_param": 9.382552940151053,
      "trial_type_effect": -4.126336268000025,
      "success": true,
      "log_likelihood": -16.49351811710274,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.863144296052091,
      "beta": 0.0,
      "lambda_param": 7.190317497893755,
      "trial_type_effect": -2.958959707498018,
      "success": true,
      "log_likelihood": -21.36798618145648,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.327048401501338,
      "lambda_param": 7.9598445240076074,
      "trial_type_effect": -3.678071294725973,
      "success": true,
      "log_likelihood": -17.617561378221474,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.5010308516613122,
      "lambda_param": 4.583479216357037,
      "trial_type_effect": -4.417104256425544,
      "success": true,
      "log_likelihood": -13.259148148820731,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.16315175987655886,
      "lambda_param": 6.895385751965812,
      "trial_type_effect": -4.826071738163612,
      "success": true,
      "log_likelihood": -14.669626477412125,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.14246788031501026,
      "lambda_param": 1.112882210554288,
      "trial_type_effect": -0.9126733852360539,
      "success": true,
      "log_likelihood": -10.315492164331502,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.0,
      "lambda_param": 4.045962092507519,
      "trial_type_effect": -1.4813145322337726,
      "success": true,
      "log_likelihood": -16.17797543412017,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.2091646978871875,
      "beta": 6.231936378539898,
      "lambda_param": 7.559270439588683,
      "trial_type_effect": 5.0,
      "success": true,
      "log_likelihood": -5.017583908200643e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.413520897616133,
      "beta": 0.02588427514650205,
      "lambda_param": 3.5709642393526106,
      "trial_type_effect": -5.0,
      "success": true,
      "log_likelihood": -6.3347066602065665,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.3299408029787652,
      "lambda_param": 9.444790760400718,
      "trial_type_effect": -4.646200202376152,
      "success": true,
      "log_likelihood": -15.54651738881119,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.26769886771534834,
      "lambda_param": 4.648249321982696,
      "trial_type_effect": -4.572384240597845,
      "success": true,
      "log_likelihood": -15.780766120955223,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.554065866179043,
      "beta": 6.146789207329221,
      "lambda_param": 7.628695195991968,
      "trial_type_effect": 4.44596908257518,
      "success": true,
      "log_likelihood": -4.867162637123335e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.9387430625487659,
      "lambda_param": 8.110024506732493,
      "trial_type_effect": -5.0,
      "success": true,
      "log_likelihood": -9.543051210977493,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.7711967682755032,
      "lambda_param": 8.81783136293785,
      "trial_type_effect": -4.274634481558478,
      "success": true,
      "log_likelihood": -12.435572934341732,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.0,
      "lambda_param": 9.806219093309632,
      "trial_type_effect": -2.9999999588857484,
      "success": true,
      "log_likelihood": -19.868515203347357,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.0,
      "lambda_param": 2.0609245636968976,
      "trial_type_effect": -2.1508324281557423,
      "success": true,
      "log_likelihood": -18.864428512917428,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.0,
      "lambda_param": 5.098695369817485,
      "trial_type_effect": -0.18381183761569125,
      "success": true,
      "log_likelihood": -8.232954722559718,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.0,
      "lambda_param": 4.683614832757883,
      "trial_type_effect": -2.4446859990044607,
      "success": true,
      "log_likelihood": -18.766035916994483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.93268413234292,
      "beta": 0.1297791656919735,
      "lambda_param": 4.736771356584828,
      "trial_type_effect": -5.0,
      "success": true,
      "log_likelihood": -14.973469756457895,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "lambda_param": 2.4875699864779355,
      "trial_type_effect": 3.5553479699889974,
      "success": true,
      "log_likelihood": -4.569499625090484,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.41793944846309383,
      "lambda_param": 0.763364688145185,
      "trial_type_effect": -4.141962117086957,
      "success": true,
      "log_likelihood": -14.603239273066743,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.41411680697120945,
      "lambda_param": 2.266384274792459,
      "trial_type_effect": -3.791984011433313,
      "success": true,
      "log_likelihood": -15.35503520693199,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.696524382871029,
      "beta": 0.8013321200337773,
      "lambda_param": 3.0864121393370225,
      "trial_type_effect": -3.044183960410847,
      "success": true,
      "log_likelihood": -15.342431953038776,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.1724616933244073,
      "lambda_param": 4.931879688508972,
      "trial_type_effect": -3.4651705932325956,
      "success": true,
      "log_likelihood": -15.589385478178428,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.3602022637569181,
      "lambda_param": 5.932641562312297,
      "trial_type_effect": -4.925569175129382,
      "success": true,
      "log_likelihood": -17.952042707064496,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.334668095355408,
      "beta": 0.0,
      "lambda_param": 0.8422107660941069,
      "trial_type_effect": -3.2053897548299215,
      "success": true,
      "log_likelihood": -21.237769940587146,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.944634876450639,
      "beta": 0.2047220730715355,
      "lambda_param": 5.200805665978977,
      "trial_type_effect": -2.3786819336595544,
      "success": true,
      "log_likelihood": -22.01860243305258,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.1775150174923891,
      "lambda_param": 9.89354333663463,
      "trial_type_effect": -2.5504998323652717,
      "success": true,
      "log_likelihood": -17.762896386262064,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.0,
      "lambda_param": 0.9090760460382563,
      "trial_type_effect": -5.0,
      "success": true,
      "log_likelihood": -9.248371694813379,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.5231237321840009,
      "lambda_param": 5.079939429569938,
      "trial_type_effect": -4.665355114499636,
      "success": true,
      "log_likelihood": -15.331355807649118,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.0723370087609165,
      "beta": 0.6023583179737998,
      "lambda_param": 3.249860767702062,
      "trial_type_effect": -2.880417785028921,
      "success": true,
      "log_likelihood": -19.500444209657704,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0947640923189648,
      "beta": 0.22697611339350787,
      "lambda_param": 4.836303642330274,
      "trial_type_effect": -1.3044813946257539,
      "success": true,
      "log_likelihood": -23.434174152497675,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.22801412598257112,
      "lambda_param": 1.881419279056118,
      "trial_type_effect": -4.744519445053514,
      "success": true,
      "log_likelihood": -16.50884628036677,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.19913851569400698,
      "lambda_param": 6.382803352460936,
      "trial_type_effect": -4.973153951480235,
      "success": true,
      "log_likelihood": -14.088177797076092,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.06823935646819936,
      "lambda_param": 6.2490934502173054,
      "trial_type_effect": 1.840408840425128,
      "success": true,
      "log_likelihood": -12.536077972626188,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.175950792830523,
      "beta": 0.02882279929022934,
      "lambda_param": 6.565170234664683,
      "trial_type_effect": -5.0,
      "success": true,
      "log_likelihood": -7.68144591253248,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.4539755279242558,
      "lambda_param": 0.42998927673303267,
      "trial_type_effect": -2.529510293364934,
      "success": true,
      "log_likelihood": -12.426268830576147,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.0,
      "lambda_param": 7.181825015417795,
      "trial_type_effect": -2.4446893112622536,
      "success": true,
      "log_likelihood": -19.26603591698623,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.0,
      "lambda_param": 1.2917174879972493,
      "trial_type_effect": -2.9999999115665523,
      "success": true,
      "log_likelihood": -18.36851520366004,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.413534719345089,
      "beta": 0.02588218006173712,
      "lambda_param": 5.378440045344587,
      "trial_type_effect": -5.0,
      "success": true,
      "log_likelihood": -6.3347066602096875,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.37559580542769233,
      "lambda_param": 4.657428731954751,
      "trial_type_effect": -4.652079228664752,
      "success": true,
      "log_likelihood": -17.214867923234753,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.15636620413878352,
      "lambda_param": 9.555107300036644,
      "trial_type_effect": -5.0,
      "success": true,
      "log_likelihood": -11.009896504563265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.536766674597048,
      "lambda_param": 9.23307326921918,
      "trial_type_effect": -4.534818492669873,
      "success": true,
      "log_likelihood": -14.103517153194236,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.19095489882405836,
      "lambda_param": 8.219367337520628,
      "trial_type_effect": -0.6700059967780518,
      "success": true,
      "log_likelihood": -7.665358694205456,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.03249190962522815,
      "lambda_param": 3.0081710524036556,
      "trial_type_effect": -0.9114335477855912,
      "success": true,
      "log_likelihood": -11.681528582764155,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.7236351575358198,
      "lambda_param": 9.610956657676251,
      "trial_type_effect": -5.0,
      "success": true,
      "log_likelihood": -12.076705956166009,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.40473799364291,
      "beta": 0.0,
      "lambda_param": 7.947731932135853,
      "trial_type_effect": 1.428286685313427,
      "success": true,
      "log_likelihood": -10.157069807362786,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.36463799250031,
      "beta": 0.2445244648716467,
      "lambda_param": 9.438771450132956,
      "trial_type_effect": -5.0,
      "success": true,
      "log_likelihood": -8.421403794192626,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.006758920998705833,
      "lambda_param": 1.4667633828530235,
      "trial_type_effect": -5.0,
      "success": true,
      "log_likelihood": -8.74630541940125,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.2955094679664653,
      "lambda_param": 9.229623327982623,
      "trial_type_effect": -3.8896952256064146,
      "success": true,
      "log_likelihood": -17.240744277479962,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.89046993696348,
      "beta": 0.5002723106405008,
      "lambda_param": 8.848554257545821,
      "trial_type_effect": -2.8577245600540673,
      "success": true,
      "log_likelihood": -13.864229218349903,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.039245231073791,
      "beta": 0.12499971906884412,
      "lambda_param": 0.9276940043433446,
      "trial_type_effect": -2.256435145945558,
      "success": true,
      "log_likelihood": -22.58731068168295,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.06900304244692096,
      "lambda_param": 4.1378562405305575,
      "trial_type_effect": -2.214312459509259,
      "success": true,
      "log_likelihood": -14.409233673078225,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.80958970845742,
      "beta": 0.0,
      "lambda_param": 3.3455077440477154,
      "trial_type_effect": 0.7722890091645214,
      "success": true,
      "log_likelihood": -7.157010501162312,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.4608082968361748,
      "lambda_param": 8.886929489469553,
      "trial_type_effect": -4.772629350779877,
      "success": true,
      "log_likelihood": -6.982422885866206,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.5230499640957811,
      "lambda_param": 9.969760071465096,
      "trial_type_effect": -1.320960597492696,
      "success": true,
      "log_likelihood": -21.68299474351873,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.413531536512595,
      "beta": 0.02588322017127156,
      "lambda_param": 3.4503298923419043,
      "trial_type_effect": -5.0,
      "success": true,
      "log_likelihood": -6.334706660197424,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.04617002443255,
      "beta": 0.0,
      "lambda_param": 0.022125658856153585,
      "trial_type_effect": -2.581076678238337,
      "success": true,
      "log_likelihood": -21.77325802847841,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.4044812931971697,
      "beta": 0.0,
      "lambda_param": 7.29656728016455,
      "trial_type_effect": 1.4283367214802012,
      "success": true,
      "log_likelihood": -10.157069808985835,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.646886242068714,
      "beta": 0.04919752955908896,
      "lambda_param": 2.8682488151313104,
      "trial_type_effect": -5.0,
      "success": true,
      "log_likelihood": -9.08275085335591,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.668672736746569,
      "beta": 0.6664571124881047,
      "lambda_param": 0.4172823081650878,
      "trial_type_effect": -5.0,
      "success": true,
      "log_likelihood": -10.146545022607166,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.31564346879343,
      "beta": 0.0,
      "lambda_param": 6.46927937587914,
      "trial_type_effect": -0.5297392287887944,
      "success": true,
      "log_likelihood": -23.565585177306343,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.51940747975854,
      "beta": 0.0,
      "lambda_param": 6.9275464021529345,
      "trial_type_effect": -5.0,
      "success": true,
      "log_likelihood": -7.68446953669833,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.0,
      "lambda_param": 3.0814662996793283,
      "trial_type_effect": -1.9961943704078204,
      "success": true,
      "log_likelihood": -18.43846407290085,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.8331712342635353,
      "beta": 0.3016911292109224,
      "lambda_param": 4.519550496204524,
      "trial_type_effect": -3.3193995100674054,
      "success": true,
      "log_likelihood": -17.442251803113948,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.699845826643399,
      "beta": 0.6761317138482492,
      "lambda_param": 4.8926721504990525,
      "trial_type_effect": -0.1956075769920352,
      "success": true,
      "log_likelihood": -6.480327034986091,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.362780920561625,
      "beta": 0.9109152221629694,
      "lambda_param": 6.583625913783938,
      "trial_type_effect": -5.0,
      "success": true,
      "log_likelihood": -9.089003869151071,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.097588720848462,
      "beta": 0.0,
      "lambda_param": 2.4549602923250937,
      "trial_type_effect": -1.7537687432532136,
      "success": true,
      "log_likelihood": -19.41725533758882,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.12431436260632239,
        "p": 0.21783674716730958
      },
      "beta": {
        "r": 0.45072573475548017,
        "p": 2.529386607657245e-06
      },
      "lambda_param": {
        "r": -0.05055788771859885,
        "p": 0.6173974973963291
      },
      "trial_type_effect": {
        "r": 0.45001390056083457,
        "p": 2.6348780114691757e-06
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 39.793738171720456,
  "bic_results": {
    "average_bic": 39.793738171720456,
    "individual_bics": [
      27.003489074216837,
      51.847894733245965,
      52.27797010009718,
      45.464992446888544,
      55.522877525248504,
      44.30580523272036,
      14.334083834444069,
      45.656273152632224,
      14.334086626241056,
      50.605542301754596,
      47.181426810739794,
      30.430209174952875,
      48.7564381123171,
      14.334085666023594,
      14.334099350201503,
      14.334075800423669,
      14.334079371533663,
      21.5654036974382,
      31.123486270978805,
      14.334087306900807,
      52.52287752599922,
      33.63742821041255,
      40.24241668649239,
      47.32111198802993,
      57.0700481167374,
      49.569198510267384,
      40.852372051465906,
      43.67332870864869,
      34.96506008248744,
      46.69002662206478,
      14.334085788992256,
      27.00348907423757,
      45.427110531446814,
      45.895607995734885,
      14.334085488149714,
      33.42017817577943,
      39.205221622507906,
      54.07110616051915,
      52.06293277965929,
      30.799985198943876,
      51.8661475878134,
      44.281015266740226,
      23.47307500400541,
      43.540554299957925,
      45.044146167688424,
      45.01893965990199,
      45.51284671018129,
      50.238161167953436,
      56.809615634998735,
      58.37128061992959,
      49.85986852634856,
      32.830819143451194,
      44.99678736912267,
      53.33496417313985,
      61.20242405881979,
      47.35176831455799,
      42.51043134797662,
      39.40623169907681,
      29.6969675788894,
      39.18661341497673,
      52.8661475877969,
      51.07110616114451,
      27.003489074243817,
      48.76381160029395,
      36.35386876295097,
      42.541110060212915,
      29.664793142235354,
      37.697132919352754,
      38.487487666156454,
      34.64821536855001,
      31.176883342209692,
      31.826686592626938,
      48.81556430878436,
      42.06253419052425,
      59.50869711719034,
      43.15254309998089,
      28.648096756149066,
      28.29892152555685,
      57.7000652408619,
      27.00348907421929,
      57.880591810781254,
      34.64821537179611,
      32.49957746053626,
      34.62716579903877,
      61.46524610843713,
      29.7030148272211,
      51.211003899626135,
      49.21857936005233,
      27.294729823796622,
      32.51208349212658,
      53.168586429002076
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 4,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.124\n- beta: r = 0.451\n- lambda_param: r = -0.051\n- trial_type_effect: r = 0.450",
  "previous_models": [
    "Specification: U = alpha * (split_self / combined_earning) + beta * split_self + lambda_param * max(0, (split_self / combined_earning) * combined_earning - split_self) + trial_type_effect\nSummary: A linear utility model with additive components for fairness, amount sensitivity, and linear loss aversion, along with a direct effect of trial type. It uses four learnable parameters: `alpha` (fairness weight), `beta` (amount weight), `lambda_param` (loss aversion coefficient), and `trial_type_effect`. The model predicts the utility of accepting an offer, which will then be passed through a logistic (sigmoid) function to predict whether the participant accepts or rejects.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 39.793738171720456\nOverall Accuracy: 0.7555\n\nParameter Recovery:\n- alpha: r = 0.124\n- beta: r = 0.451\n- lambda_param: r = -0.051\n- trial_type_effect: r = 0.450"
  ]
}