{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "```text\nInstructions:\n<think>\nThe previous model, while simpler, still yielded poor parameter recovery. The accuracy was okay, but not good enough to justify the BIC. The core issue seems to be the way fairness, amount, and trial type are combined. The additive approach might be too simple, and the direct effect of `trial_type_effect` on utility didn't sufficiently capture the nuances of how trial type influences decisions. The linear loss aversion also may not be correct. The model may be too simplistic.\n\nHere's what I will suggest for the next iteration:\n\n1.  **Re-think Trial Type:** Ditch the direct `trial_type_effect` term. It doesn't work. Instead, consider trial type as modulating the *fairness calculation itself*. Maybe people have different reference points for what's fair depending on the trial type.\n\n2.  **Fairness Definition:** Revisit the definition of fairness. `split_self / combined_earning` might be too simplistic. Consider how the token contributions (`token_self`, `token_opp`) influence the perception of a fair split. A ratio of `token_self` to the total tokens could be a better baseline.\n\n3.  **Consider a non-linear utility for amount offered:** The last utility function was too linear. The value of money decays for each subject so consider a term such as `log(split_self+1)` instead of `split_self` directly.\n\n4.  **Explore Multiplicative Interactions:** Instead of a purely additive model, try a model where fairness *multiplies* the impact of the amount offered. This would imply that fairness acts as a \"discount\" or \"boost\" to the utility of the money received.\n\n5.  **Simpler Loss Aversion:** Keep the simple linear loss aversion for now (lambda * expected_loss if expected_loss < 0, 0 otherwise).\n\n6.  **Parameter Bounds:** Keep parameter bounds relatively tight to aid identifiability.\n\n7. **Number of Parameters:** Keep the number of parameters at 4 or below.\n\n</think>\n\nBe EXTREMELY considerate of high covariance between learnable parameters in the model. Aim for an appropriate number of learnable parameters, with a strong bias toward fewer if it improves parameter identifiability. The model should propose a significantly different BIC than previous models, hopefully lower.\n\nWhen developing your model, reason step by step about:\n\n*   The *most essential* psychological mechanisms involved: fairness, loss aversion, and amount sensitivity. How are these mechanisms *fundamentally* calculated and perceived, especially with regards to trial type? What are the *minimal* number of parameters needed to capture these, with emphasis on fairness?\n*   How these mechanisms *fundamentally* interact. Are the interactions multiplicative, additive, or something else? Justify your choice based on theory or intuition. Pay special attention to how fairness and amount sensitivity influence each other.\n*   What *simple* mathematical form could capture these interactions. Focus on ratios and logarithmic functions.\n*   What parameters are *absolutely necessary* to calibrate the model, focusing ruthlessly on potential parameter covariance and identifiability issues. What are the ranges of these parameters?\n*   How the *core* model variables map to observable behavior.\n\nIncorporate *strong* prior knowledge or constraints that could reduce parameter covariance and improve parameter identifiability. Given the failure of previous attempts to model trial_type as a direct utility effect, consider alternative approaches that modulate the fairness calculation.\n\n```",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: ```text\nInstructions:\n<think>\nThe previous model, while simpler, still yielded poor parameter recovery. The accuracy was okay, but not good enough to justify the BIC. The core issue seems to be the way fairness, amount, and trial type are combined. The additive approach might be too simple, and the direct effect of `trial_type_effect` on utility didn't sufficiently capture the nuances of how trial type influences decisions. The linear loss aversion also may not be correct. The model may be too simplistic.\n\nHere's what I will suggest for the next iteration:\n\n1.  **Re-think Trial Type:** Ditch the direct `trial_type_effect` term. It doesn't work. Instead, consider trial type as modulating the *fairness calculation itself*. Maybe people have different reference points for what's fair depending on the trial type.\n\n2.  **Fairness Definition:** Revisit the definition of fairness. `split_self / combined_earning` might be too simplistic. Consider how the token contributions (`token_self`, `token_opp`) influence the perception of a fair split. A ratio of `token_self` to the total tokens could be a better baseline.\n\n3.  **Consider a non-linear utility for amount offered:** The last utility function was too linear. The value of money decays for each subject so consider a term such as `log(split_self+1)` instead of `split_self` directly.\n\n4.  **Explore Multiplicative Interactions:** Instead of a purely additive model, try a model where fairness *multiplies* the impact of the amount offered. This would imply that fairness acts as a \"discount\" or \"boost\" to the utility of the money received.\n\n5.  **Simpler Loss Aversion:** Keep the simple linear loss aversion for now (lambda * expected_loss if expected_loss < 0, 0 otherwise).\n\n6.  **Parameter Bounds:** Keep parameter bounds relatively tight to aid identifiability.\n\n7. **Number of Parameters:** Keep the number of parameters at 4 or below.\n\n</think>\n\nBe EXTREMELY considerate of high covariance between learnable parameters in the model. Aim for an appropriate number of learnable parameters, with a strong bias toward fewer if it improves parameter identifiability. The model should propose a significantly different BIC than previous models, hopefully lower.\n\nWhen developing your model, reason step by step about:\n\n*   The *most essential* psychological mechanisms involved: fairness, loss aversion, and amount sensitivity. How are these mechanisms *fundamentally* calculated and perceived, especially with regards to trial type? What are the *minimal* number of parameters needed to capture these, with emphasis on fairness?\n*   How these mechanisms *fundamentally* interact. Are the interactions multiplicative, additive, or something else? Justify your choice based on theory or intuition. Pay special attention to how fairness and amount sensitivity influence each other.\n*   What *simple* mathematical form could capture these interactions. Focus on ratios and logarithmic functions.\n*   What parameters are *absolutely necessary* to calibrate the model, focusing ruthlessly on potential parameter covariance and identifiability issues. What are the ranges of these parameters?\n*   How the *core* model variables map to observable behavior.\n\nIncorporate *strong* prior knowledge or constraints that could reduce parameter covariance and improve parameter identifiability. Given the failure of previous attempts to model trial_type as a direct utility effect, consider alternative approaches that modulate the fairness calculation.\n\n```\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "```text\nOkay, let's think through this step by step to design a new computational model.\n\n**1. Psychological Mechanisms:**\n\n*   **Fairness:** The core of the decision. Participants compare the proposed split to what they perceive as fair. Let's define fairness based on relative token contributions. Fair share = `token_self / (token_self + token_opp)`. This is the proportion of tokens they found, reflecting their contribution. The *difference* between the actual split and the fair split is key.\n*   **Amount Sensitivity:** The raw utility of the proposed amount. Use a logarithmic transformation to model diminishing returns of money. `log(split_self + 1)`.\n*   **Loss Aversion:** People dislike getting less than their \"fair\" share. A simple linear loss aversion will be used.\n\n**2. Interaction of Mechanisms:**\n\n*   Fairness modulates the impact of amount. If the split is very unfair, the amount offered has less influence. A multiplicative interaction makes sense: Utility = Fairness * Amount - Loss Aversion. This makes intuitive sense, if a participant is receiving what they perceive to be unfair, the amount is much less of a factor.\n\n**3. Mathematical Form:**\n\n*   Fairness: `fair_share = token_self / (token_self + token_opp)`\n    `fairness_diff = split_self / combined_earning - fair_share`\n*   Amount: `log(split_self + 1)`\n*   Loss Aversion: `loss_aversion_term = lambda_param * fairness_diff if fairness_diff < 0 else 0`\n*   Utility: `utility = beta * log(split_self + 1) * (1 - alpha * abs(fairness_diff)) - loss_aversion_term`\n    The *abs* of the fairness difference is used, and the utility from the amount is multiplied.\n    Alpha acts as a weighting of the *relative* importance of fairness to the value of amount earned.\n    Beta is a scaling parameter on the overall amount.\n\n**4. Parameters:**\n\n*   `alpha`: Weighting of fairness. This parameter scales the impact of the absolute difference of fairness on utility. Range: \\[0, 1].\n*   `beta`: Sensitivity to the amount of money offered. This parameter scales the log of the amount offered, in the utility function. Range: \\[0, 5].\n*   `lambda_param`: Loss aversion. Penalty for getting less than the fair share. Range: \\[0, 5].\n\n**5. Mapping to Observable Behavior:**\n\n*   Use the utility to predict the probability of accepting using a logistic function: `probability = 1 / (1 + exp(-utility))`\n\n**6. Trial Type Considerations:**\n\nTrial type is implicitly considered in the `fair_share` calculation, which depends on `token_self` and `token_opp`. Different trial types will lead to different `token_self` and `token_opp` values, thus directly influencing the perceived fairness.\n\nNow, let's write the model and variable descriptions.\n\n</think>\n```\n\n```\n<MODEL>\nU = beta * log(split_self + 1) * (1 - alpha * abs((split_self / combined_earning) - (token_self / (token_self + token_opp))))) - (lambda_param * ((split_self / combined_earning) - (token_self / (token_self + token_opp))) if ((split_self / combined_earning) - (token_self / (token_self + token_opp))) < 0 else 0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Weighting parameter of fairness. This parameter scales the relative importance of fairness to the value of amount earned.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to the amount of money offered. Scales the log of the amount offered.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion parameter. Penalty for getting less than the fair share\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Amount of money earned in total\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nThis model predicts acceptance behavior in a bargaining game. It calculates utility based on the proposed split, perceived fairness (derived from token contributions), and loss aversion. The log of the amount is scaled by a factor that depends on the absolute difference between the proportion of the proposed split, and the proportion of effort the participant put into the split. Finally, it subtracts an amount scaled by lambda_param if the split is perceived to be unfair. Three free parameters are used: alpha, which moderates the influence of fairness on the amount; beta, which moderates sensitivity to the amount of money; and lambda_param, which specifies loss aversion.\n</SUMMARY>\n```"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta', 'lambda_param']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = beta * log(split_self + 1) * (1 - alpha * abs((split_self / combined_earning) - (token_self / (token_self + token_opp))))) - (lambda_param * ((split_self / combined_earning) - (token_self / (token_self + token_opp))) if ((split_self / combined_earning) - (token_self / (token_self + token_opp))) < 0 else 0)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Weighting parameter of fairness. This parameter scales the relative importance of fairness to the value of amount earned.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to the amount of money offered. Scales the log of the amount offered.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion parameter. Penalty for getting less than the fair share\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Amount of money earned in total\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=0.5, beta=2.5, lambda_param=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0.0)\n        combined_earning = trial.get(\"combined_earning\", 1.0)  # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate fair share\n        total_tokens = token_self + token_opp\n        if total_tokens == 0:\n            fair_share = 0.5  # Default to 50/50 if no tokens\n        else:\n            fair_share = token_self / total_tokens\n\n        # Calculate fairness difference\n        fairness_diff = (split_self / combined_earning) - fair_share\n\n        # Calculate amount component\n        amount_component = beta * math.log(split_self + 1)\n\n        # Calculate fairness component\n        fairness_component = (1 - alpha * abs(fairness_diff))\n\n        #Calculate loss aversion component\n        loss_aversion_term = lambda_param * fairness_diff if fairness_diff < 0 else 0\n        # Calculate utility\n        utility = amount_component * fairness_component - loss_aversion_term\n\n        model_predictions.append(utility)\n    return model_predictions\n```",
      "timestamp": 1744713988.856151
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Weighting parameter of fairness. This parameter scales the relative importance of fairness to the value of amount earned.",
      "range": {
        "min": 0.0,
        "max": 1.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Sensitivity to the amount of money offered. Scales the log of the amount offered.",
      "range": {
        "min": 0.0,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Loss aversion parameter. Penalty for getting less than the fair share",
      "range": {
        "min": 0.0,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = beta * log(split_self + 1) * (1 - alpha * abs((split_self / combined_earning) - (token_self / (token_self + token_opp))))) - (lambda_param * ((split_self / combined_earning) - (token_self / (token_self + token_opp))) if ((split_self / combined_earning) - (token_self / (token_self + token_opp))) < 0 else 0)",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Weighting parameter of fairness. This parameter scales the relative importance of fairness to the value of amount earned.",
      "range": {
        "min": 0.0,
        "max": 1.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Sensitivity to the amount of money offered. Scales the log of the amount offered.",
      "range": {
        "min": 0.0,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Loss aversion parameter. Penalty for getting less than the fair share",
      "range": {
        "min": 0.0,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "The proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0.0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Amount of money earned in total",
      "range": {
        "min": 0.0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "This model predicts acceptance behavior in a bargaining game. It calculates utility based on the proposed split, perceived fairness (derived from token contributions), and loss aversion. The log of the amount is scaled by a factor that depends on the absolute difference between the proportion of the proposed split, and the proportion of effort the participant put into the split. Finally, it subtracts an amount scaled by lambda_param if the split is perceived to be unfair. Three free parameters are used: alpha, which moderates the influence of fairness on the amount; beta, which moderates sensitivity to the amount of money; and lambda_param, which specifies loss aversion.",
  "target_variable": "accept",
  "full_reasoning": "```text\nOkay, let's think through this step by step to design a new computational model.\n\n**1. Psychological Mechanisms:**\n\n*   **Fairness:** The core of the decision. Participants compare the proposed split to what they perceive as fair. Let's define fairness based on relative token contributions. Fair share = `token_self / (token_self + token_opp)`. This is the proportion of tokens they found, reflecting their contribution. The *difference* between the actual split and the fair split is key.\n*   **Amount Sensitivity:** The raw utility of the proposed amount. Use a logarithmic transformation to model diminishing returns of money. `log(split_self + 1)`.\n*   **Loss Aversion:** People dislike getting less than their \"fair\" share. A simple linear loss aversion will be used.\n\n**2. Interaction of Mechanisms:**\n\n*   Fairness modulates the impact of amount. If the split is very unfair, the amount offered has less influence. A multiplicative interaction makes sense: Utility = Fairness * Amount - Loss Aversion. This makes intuitive sense, if a participant is receiving what they perceive to be unfair, the amount is much less of a factor.\n\n**3. Mathematical Form:**\n\n*   Fairness: `fair_share = token_self / (token_self + token_opp)`\n    `fairness_diff = split_self / combined_earning - fair_share`\n*   Amount: `log(split_self + 1)`\n*   Loss Aversion: `loss_aversion_term = lambda_param * fairness_diff if fairness_diff < 0 else 0`\n*   Utility: `utility = beta * log(split_self + 1) * (1 - alpha * abs(fairness_diff)) - loss_aversion_term`\n    The *abs* of the fairness difference is used, and the utility from the amount is multiplied.\n    Alpha acts as a weighting of the *relative* importance of fairness to the value of amount earned.\n    Beta is a scaling parameter on the overall amount.\n\n**4. Parameters:**\n\n*   `alpha`: Weighting of fairness. This parameter scales the impact of the absolute difference of fairness on utility. Range: \\[0, 1].\n*   `beta`: Sensitivity to the amount of money offered. This parameter scales the log of the amount offered, in the utility function. Range: \\[0, 5].\n*   `lambda_param`: Loss aversion. Penalty for getting less than the fair share. Range: \\[0, 5].\n\n**5. Mapping to Observable Behavior:**\n\n*   Use the utility to predict the probability of accepting using a logistic function: `probability = 1 / (1 + exp(-utility))`\n\n**6. Trial Type Considerations:**\n\nTrial type is implicitly considered in the `fair_share` calculation, which depends on `token_self` and `token_opp`. Different trial types will lead to different `token_self` and `token_opp` values, thus directly influencing the perceived fairness.\n\nNow, let's write the model and variable descriptions.\n\n</think>\n```\n\n```\n<MODEL>\nU = beta * log(split_self + 1) * (1 - alpha * abs((split_self / combined_earning) - (token_self / (token_self + token_opp))))) - (lambda_param * ((split_self / combined_earning) - (token_self / (token_self + token_opp))) if ((split_self / combined_earning) - (token_self / (token_self + token_opp))) < 0 else 0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Weighting parameter of fairness. This parameter scales the relative importance of fairness to the value of amount earned.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to the amount of money offered. Scales the log of the amount offered.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion parameter. Penalty for getting less than the fair share\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Amount of money earned in total\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nThis model predicts acceptance behavior in a bargaining game. It calculates utility based on the proposed split, perceived fairness (derived from token contributions), and loss aversion. The log of the amount is scaled by a factor that depends on the absolute difference between the proportion of the proposed split, and the proportion of effort the participant put into the split. Finally, it subtracts an amount scaled by lambda_param if the split is perceived to be unfair. Three free parameters are used: alpha, which moderates the influence of fairness on the amount; beta, which moderates sensitivity to the amount of money; and lambda_param, which specifies loss aversion.\n</SUMMARY>\n```",
  "prediction_type": "utility",
  "current_model": "Specification: U = beta * log(split_self + 1) * (1 - alpha * abs((split_self / combined_earning) - (token_self / (token_self + token_opp))))) - (lambda_param * ((split_self / combined_earning) - (token_self / (token_self + token_opp))) if ((split_self / combined_earning) - (token_self / (token_self + token_opp))) < 0 else 0)\nSummary: This model predicts acceptance behavior in a bargaining game. It calculates utility based on the proposed split, perceived fairness (derived from token contributions), and loss aversion. The log of the amount is scaled by a factor that depends on the absolute difference between the proportion of the proposed split, and the proportion of effort the participant put into the split. Finally, it subtracts an amount scaled by lambda_param if the split is perceived to be unfair. Three free parameters are used: alpha, which moderates the influence of fairness on the amount; beta, which moderates sensitivity to the amount of money; and lambda_param, which specifies loss aversion.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=0.5, beta=2.5, lambda_param=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0.0)\n        combined_earning = trial.get(\"combined_earning\", 1.0)  # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate fair share\n        total_tokens = token_self + token_opp\n        if total_tokens == 0:\n            fair_share = 0.5  # Default to 50/50 if no tokens\n        else:\n            fair_share = token_self / total_tokens\n\n        # Calculate fairness difference\n        fairness_diff = (split_self / combined_earning) - fair_share\n\n        # Calculate amount component\n        amount_component = beta * math.log(split_self + 1)\n\n        # Calculate fairness component\n        fairness_component = (1 - alpha * abs(fairness_diff))\n\n        #Calculate loss aversion component\n        loss_aversion_term = lambda_param * fairness_diff if fairness_diff < 0 else 0\n        # Calculate utility\n        utility = amount_component * fairness_component - loss_aversion_term\n\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6349206349206349,
  "fitting_results": [
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.28740677439673384,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.390311530981634,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.45510503459503315,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -23.58852891303219,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0997627010611158,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.884065851433625,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.1382496431100679,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.820691110189895,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.80668360470388,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -21.11158305684546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 5.0,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -0.025311903097041046,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.8972349187352087,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -20.36427504115368,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 5.0,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -0.025311903097041042,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.2080095490363924,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.65512863876963,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0592455785135683,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.92883709305185,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 5.0,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -0.025311903097041042,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 5.0,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -0.02531190309704104,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 5.0,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -0.02531190309704104,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 5.0,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -0.025311903097041035,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 2.3143283500388483,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -9.535594475926603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 2.3914697850705258,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -9.110915756326266,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 5.0,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -0.02531190309704103,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.46119460164653125,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -23.553837401715548,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 2.048626689782292,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -11.146293758805351,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.41313302940638125,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -23.81765866272902,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.24895442260056588,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.52844715579996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.6298795911740971,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -22.463543729489185,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.5342196456043198,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -23.110955463377735,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 2.1974536519576233,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -10.215405606946096,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 1.2743935651258524,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -17.10688336789945,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 5.0,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -0.025311903097041046,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 5.0,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -0.02531190309704104,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.8894889376620312,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -20.42924020787562,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 1.1148425489431812,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -18.492772580392476,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.28257728985108876,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.408657564812685,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.790578043930719,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -21.241290085991704,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 2.402206844161453,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -9.053273860959308,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.5620637078614902,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -22.929867662561207,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 1.9746113564204328,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -5.340099406484941,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.4879460283430254,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -23.397236836212034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.7144916844150795,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -21.83790278024263,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 1.1021640679046127,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -18.603172224960723,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.3771305414535572,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -23.999661635684838,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.264371419223196,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.47525500932248,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.9002689669862571,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -20.338749834501492,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.39658722885990066,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -23.903001484765802,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.49301847101364776,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -23.366773270146425,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.832664908437487,
      "lambda_param": 5.0,
      "success": true,
      "log_likelihood": -11.14841153249951,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 1.5261587812171833,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -14.989013950386335,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.5726481548345033,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -22.859380010092675,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.2738954319849227,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.44092315373659,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.09565652914114431,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.88963373903204,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.5344863585041449,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -23.109263791421867,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 2.46677741186961,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -8.714265086597154,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 1.8893541003241572,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -12.224729457402853,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.5579332422567478,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -22.957132288803653,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 2.1715502705763217,
      "lambda_param": 0.1341062366935052,
      "success": true,
      "log_likelihood": -10.186272481512852,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.394716805152911,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -23.912480534787726,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 1.3675620207730486,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -16.30914896272316,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.19221650457847214,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.698237957074166,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.9364570080265456,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -20.03287575514853,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 2.9234565693608894,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -6.657748408611698,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.543119359118779,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -23.053749110348047,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.23287181879838964,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.580758654510856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 1.2506911930148294,
      "lambda_param": 4.7144066450241855,
      "success": true,
      "log_likelihood": -10.272199475289826,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.4369615693146186,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -23.689749226209592,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.4140545856838346,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -23.81281426087076,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.8736315253660684,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -20.56169351883223,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 3.1530932696850553,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -5.822868275822137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.3349018362997142,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -24.1950726001191,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.7810018138469945,
      "lambda_param": 0.0,
      "success": true,
      "log_likelihood": -21.317917931369813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.13009968591940263,
        "p": 0.19700519138153186
      },
      "beta": {
        "r": 0.8390253492462629,
        "p": 1.1900118147133019e-27
      },
      "lambda_param": {
        "r": 0.2586629103824264,
        "p": 0.009363473979402726
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 48.852678148871945,
  "bic_results": {
    "average_bic": 48.852678148871945,
    "individual_bics": [
      60.65715380128435,
      59.531179877331596,
      57.92761464143271,
      60.51868851823558,
      60.39193903574812,
      52.97372292905925,
      10.801180621562413,
      51.47910689767569,
      10.801180621562413,
      60.65715380128435,
      60.06081409290759,
      60.65715380128435,
      60.608231001472035,
      10.801180621562413,
      10.801180621562413,
      10.801180621562413,
      10.801180621562413,
      29.821745767221536,
      28.972388328020863,
      10.801180621562413,
      57.85823161879942,
      33.04314433297903,
      60.65715380128435,
      58.385874140826374,
      59.807451126968246,
      55.677644274346704,
      56.9724677421238,
      60.65715380128435,
      31.181368029260522,
      44.964323551167226,
      10.801180621562413,
      60.65715380128435,
      60.65715380128435,
      60.65715380128435,
      10.801180621562413,
      51.60903723111957,
      47.73610197615328,
      59.5678719449937,
      53.23313698735174,
      28.857104537286947,
      56.61029214049074,
      60.65715380128435,
      21.43075562833821,
      57.5450304877924,
      54.426362375853586,
      47.95690126528977,
      58.749880086738,
      60.65715380128435,
      60.65715380128435,
      59.70106683401329,
      51.42805648437131,
      60.65715380128435,
      58.55655978489993,
      57.484103355661176,
      60.65715380128435,
      60.65715380128435,
      60.65715380128435,
      33.04737988036735,
      60.65715380128435,
      40.728584716141,
      56.469316835553684,
      59.63240312284151,
      60.65715380128435,
      60.52982429343241,
      60.65715380128435,
      56.96908439821206,
      28.179086988562638,
      35.20001573017404,
      56.66482139297564,
      31.123101778394034,
      60.65715380128435,
      60.65715380128435,
      58.57551788494378,
      43.368854740814655,
      60.14703272951667,
      50.81630832566539,
      24.066053632591725,
      60.65715380128435,
      56.85805503606443,
      60.65715380128435,
      59.912074124390045,
      31.294955765947982,
      60.65715380128435,
      58.13005526778751,
      58.376185337109845,
      60.65715380128435,
      51.873943853032785,
      60.65715380128435,
      22.396293367012603,
      59.140702015606536,
      53.38639267810795
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.130\n- beta: r = 0.839\n- lambda_param: r = 0.259",
  "previous_models": [
    "Specification: U = beta * log(split_self + 1) * (1 - alpha * abs((split_self / combined_earning) - (token_self / (token_self + token_opp))))) - (lambda_param * ((split_self / combined_earning) - (token_self / (token_self + token_opp))) if ((split_self / combined_earning) - (token_self / (token_self + token_opp))) < 0 else 0)\nSummary: This model predicts acceptance behavior in a bargaining game. It calculates utility based on the proposed split, perceived fairness (derived from token contributions), and loss aversion. The log of the amount is scaled by a factor that depends on the absolute difference between the proportion of the proposed split, and the proportion of effort the participant put into the split. Finally, it subtracts an amount scaled by lambda_param if the split is perceived to be unfair. Three free parameters are used: alpha, which moderates the influence of fairness on the amount; beta, which moderates sensitivity to the amount of money; and lambda_param, which specifies loss aversion.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 48.852678148871945\nOverall Accuracy: 0.6349\n\nParameter Recovery:\n- alpha: r = 0.130\n- beta: r = 0.839\n- lambda_param: r = 0.259"
  ]
}