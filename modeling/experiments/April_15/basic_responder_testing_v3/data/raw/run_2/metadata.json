{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "First, think step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact (be explicit about alternative plausible mechanisms or sources of nonlinearity)\n* What mathematical form(s) and parameterizations could capture these interactions\u2014including (but not limited to) nonlinearities, thresholds, multiplicative or divisive forms, or interaction terms\n* What parameters would be needed to calibrate the model (but aim for maximally independent parameters, with clearly distinct psychological roles)\n* How the model variables map to observable behavior (and consider if alternative operationalizations or normalizations would improve interpretability or identifiability)\n* How to balance parsimony and interpretability (bias towards fewer learnable parameters, but do not exclude important mechanisms)\n* How the parameter values could be recovered from behavior; explicitly consider whether your model may suffer from high parameter collinearity or overfitting\n\nSpecific guidance:\n- Consider whether new (e.g., non-monotonic or piecewise) relationships between variables might better fit the data.\n- Try forms of nonlinearity (e.g., squaring, thresholding, sigmoid, divisive normalization), especially to capture strong shifts or asymptotes in responder behavior.\n- Consider interaction or penalty terms beyond additive effects (e.g., multiplicative, max/min, ratio, or softmin/softmax functions).\n- Be OPEN to using zero, one, two, or three learnable parameters (not always three!)\u2014if justified by mechanisms.\n- Carefully justify inclusion and exclusion of each model term.\n- Consider including a stochasticity/noise parameter ONLY if it models true behavioral variability, not just mimics unexplained error.\n- Propose at least one subtle twist from the most standard, purely linear models for this task (even if later ruled out).\n\nYour output should:\n1. Briefly mention, in your reasoning, at least one alternative eligible psychological mechanism or form not immediately obvious from the task description.\n2. Once you\u2019ve reasoned step by step, present a single, well-justified computational model as detailed previously.\n3. Provide the model mathematical formula between <MODEL> and </MODEL> tags, and variable descriptions between <VARIABLES> and </VARIABLES>, as specified in the output format.\n4. Specify the target variable within <target_variable> tags.\n\nBe clear, creative, and rigorous in defining how task variables are integrated into your model, and show extra care to reduce parameter correlation and enhance parameter recovery through thoughtful functional form selection and normalization.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: First, think step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact (be explicit about alternative plausible mechanisms or sources of nonlinearity)\n* What mathematical form(s) and parameterizations could capture these interactions\u2014including (but not limited to) nonlinearities, thresholds, multiplicative or divisive forms, or interaction terms\n* What parameters would be needed to calibrate the model (but aim for maximally independent parameters, with clearly distinct psychological roles)\n* How the model variables map to observable behavior (and consider if alternative operationalizations or normalizations would improve interpretability or identifiability)\n* How to balance parsimony and interpretability (bias towards fewer learnable parameters, but do not exclude important mechanisms)\n* How the parameter values could be recovered from behavior; explicitly consider whether your model may suffer from high parameter collinearity or overfitting\n\nSpecific guidance:\n- Consider whether new (e.g., non-monotonic or piecewise) relationships between variables might better fit the data.\n- Try forms of nonlinearity (e.g., squaring, thresholding, sigmoid, divisive normalization), especially to capture strong shifts or asymptotes in responder behavior.\n- Consider interaction or penalty terms beyond additive effects (e.g., multiplicative, max/min, ratio, or softmin/softmax functions).\n- Be OPEN to using zero, one, two, or three learnable parameters (not always three!)\u2014if justified by mechanisms.\n- Carefully justify inclusion and exclusion of each model term.\n- Consider including a stochasticity/noise parameter ONLY if it models true behavioral variability, not just mimics unexplained error.\n- Propose at least one subtle twist from the most standard, purely linear models for this task (even if later ruled out).\n\nYour output should:\n1. Briefly mention, in your reasoning, at least one alternative eligible psychological mechanism or form not immediately obvious from the task description.\n2. Once you\u2019ve reasoned step by step, present a single, well-justified computational model as detailed previously.\n3. Provide the model mathematical formula between <MODEL> and </MODEL> tags, and variable descriptions between <VARIABLES> and </VARIABLES>, as specified in the output format.\n4. Specify the target variable within <target_variable> tags.\n\nBe clear, creative, and rigorous in defining how task variables are integrated into your model, and show extra care to reduce parameter correlation and enhance parameter recovery through thoughtful functional form selection and normalization.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let me proceed step by step as instructed.\n\n**Step 1: Key psychological mechanisms in UG responder behavior**\n- **Selfish gain:** Responders want high payoffs, so larger offers are preferred.\n- **Inequity aversion:** Responders dislike unfairness/unjust offers\u2014i.e., being offered less than half.\n- **Relative contribution:** Here, the fairness norm can depend on tokens found: a split based on contributions (not just equal split).\n- **Sensitivity to intentionality/role:** May respond differently if their own contribution is higher/lower, or they are offered exactly what they \"deserve.\"\n- **Contextual scaling:** Offers that are the same \u00a3 amount may feel fairer or less fair depending on the combined_earning (pot size).\n- **Threshold/Step function:** Rejection increases quickly when fairness falls below contribution norm\u2014a non-linear effect.\n\n**Step 2: How these mechanisms interact**\n- Participants may evaluate offers against a personalized fairness norm: the share \u201cdeserved\u201d based on relative contribution, not just 50%.\n- Deviations from this personalized fairness point may be penalized, nonlinearly.\n- People may still accept slightly unfair offers, with rejection rates rising sharply beyond a (soft) threshold (sigmoid-type effect).\n- Utility may combine self-gain and fairness deviation (possibly multiplicatively or with nonlinearity).\n- Offers far above norm may be accepted even if \u201ctoo generous,\u201d but mainly rejections are for unfair/low offers.\n\n**Alternative plausible modeling twists**\n- **Ratio or divisive forms:** Instead of using an additive penalty, could use (offered - deserved)/deserved.\n- **Soft-min or ReLU:** Penalize only deviations below norm, not above.\n- **Objective versus perceived fairness:** Include a weight on \u201cproportional fairness\u201d (token contribution) vs. \u201cequal split.\u201d\n- **Reference dependence:** Some participants may quickly reject anything below a certain fraction, akin to a threshold function (e.g., a softmax masking effect).\n- **Interaction terms:** Penalty for unfairness could increase as combined_earning grows (e.g., higher stakes = more fairness sensitivity).\n- **Nonlinear weighting:** Power terms or squaring the deviation from fairness point.\n\n**Step 3: Mathematical form(s) and parameterization**\n- Define a \u201cdeserved\u201d/normative share for responder: norm_self = token_self / (token_self + token_opp) \u00d7 combined_earning\n- **Fairness deviation:** delta = split_self - norm_self\n- Penalize negative delta more than positive: use e.g., a soft-thresholded penalty (-theta_neg\u00b7max(0, -delta)), optionally with a nonlinear function (e.g., tanh or power).\n- **Gain sensitivity:** Include a weight on absolute offered amount (i.e., some people always accept large payoffs even if unfair).\n- For robust parameter recovery: use independent parameters for gain and fairness sensitivity, and avoid combining similar parameters.\n\n**Step 4: Choose parameters; mapping variables**\n- **Gain weight:** beta_gain (how much more utility per \u00a3 offered)\n- **Fairness aversion:** beta_inequity (sensitivity to fairness violations; must be positive)\n- **Fairness exponent:** gamma (maybe fixed at 1 or learnable in [0.5, 2]) for nonlinearity in fairness penalty (to allow abrupt \u201cunfairness\u201d effects)\n- **Intercept:** bias (trait baseline for responder, e.g., general rejection/acceptance tendency)\n\nTo avoid overparameterization and for parameter recovery, keep number of learnable parameters modest (2-3).\n\n**Step 5: Functional form suggestions**\n- Linear combination: Utility = bias + beta_gain \u00d7 split_self - beta_inequity \u00d7 (max(0, norm_self - split_self))^gamma\n  - Only penalize when offer < deserved (\u201cnorm_self\u201d).\n- Could use splitperc_self and \u201cdeserved\u201d percent, but since token values/combined_earning are in the data, use \u00a3 amounts for interpretability.\n\n**Step 6: Final choices for variables and bounds**\n- **beta_gain:** [-5, 5] (participants may reward or punish large offers; likely positive, but allow negative for edge cases)\n- **beta_inequity:** [0, 10] (must be non-negative)\n- **bias:** [-10, 10] (flexible baseline)\n- **gamma:** [0.5, 3] (exponent for nonlinearity; learnable for flexibility or fixed at 1 for recovery ease)\n\n**Step 7: Specify only necessary variables in model**\n- Utility for responder = bias + beta_gain \u00d7 split_self - beta_inequity \u00d7 (max(0, norm_self - split_self))^gamma\n- Probability of accept is sigmoid(utility), but the output is utility.\n\n**Check for identifiability**\n- beta_gain and beta_inequity are recoverable if split_self and norm_self are not perfectly collinear (which they are not).\n- bias is independently recoverable.\n- gamma increases abruptness\u2014if too flexible, might be under-identified; can bound as above.\n\n**Step 8: Provide the required specification**\n\n---\n\n<MODEL>\nutility = bias + beta_gain * split_self - beta_inequity * ((max(0, norm_self - split_self)) ** gamma)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Latent utility of accepting the proposal; less than 0 implies less than 50% chance of accept\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline tendency to accept/reject offers, independent of variables\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_gain\": {\n      \"description\": \"Sensitivity to amount offered to participant (split_self); positive values mean more for self increases acceptance\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_inequity\": {\n      \"description\": \"Sensitivity to fairness violation (receiving less than deserved per contribution); non-negative\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Strength of nonlinearity in fairness penalty; values above 1 increase sensitivity to large violations\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount of money offered to the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"norm_self\": {\n      \"description\": \"Amount of money participant 'deserves' based on token contribution (in \u00a3): norm_self = token_self/(token_self+token_opp) \u00d7 combined_earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant in the pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent in the pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial (\u00a33 per token found by either party)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThe model predicts responder acceptance using a utility that combines a baseline bias, linear sensitivity to the personal monetary offer, and a nonlinear penalty for receiving less than a personalized, contribution-based fairness norm. Only fairness violations below this norm are penalized, and the penalty exponent enables sharp, nonlinear rejection of unfair offers. All variables are mapped directly from the trial structure, supporting interpretable and parameter-recoverable modeling of responder choices.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['bias', 'beta_gain', 'beta_inequity', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                utility = bias + beta_gain * split_self - beta_inequity * ((max(0, norm_self - split_self)) ** gamma)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Latent utility of accepting the proposal; less than 0 implies less than 50% chance of accept\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline tendency to accept/reject offers, independent of variables\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_gain\": {\n      \"description\": \"Sensitivity to amount offered to participant (split_self); positive values mean more for self increases acceptance\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_inequity\": {\n      \"description\": \"Sensitivity to fairness violation (receiving less than deserved per contribution); non-negative\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Strength of nonlinearity in fairness penalty; values above 1 increase sensitivity to large violations\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount of money offered to the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"norm_self\": {\n      \"description\": \"Amount of money participant 'deserves' based on token contribution (in \\u00a3): norm_self = token_self/(token_self+token_opp) \\u00d7 combined_earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant in the pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent in the pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial (\\u00a33 per token found by either party)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, bias=0, beta_gain=1, beta_inequity=1, gamma=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        # Calculate norm_self\n        if (token_self + token_opp) == 0:\n            norm_self = combined_earning / 2  #If both are 0 tokens, split is equal\n        else:\n            norm_self = (token_self / (token_self + token_opp)) * combined_earning\n\n        # Calculate utility\n        inequity = max(0, norm_self - split_self)\n        utility = bias + beta_gain * split_self - beta_inequity * (inequity ** gamma)\n        model_predictions.append(utility)\n    return model_predictions\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744714367.536463
    }
  ],
  "learnable_parameters": {
    "bias": {
      "description": "Baseline tendency to accept/reject offers, independent of variables",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_gain": {
      "description": "Sensitivity to amount offered to participant (split_self); positive values mean more for self increases acceptance",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_inequity": {
      "description": "Sensitivity to fairness violation (receiving less than deserved per contribution); non-negative",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Strength of nonlinearity in fairness penalty; values above 1 increase sensitivity to large violations",
      "range": {
        "min": 0.5,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "utility = bias + beta_gain * split_self - beta_inequity * ((max(0, norm_self - split_self)) ** gamma)",
  "variable_descriptions": {
    "utility": {
      "description": "Latent utility of accepting the proposal; less than 0 implies less than 50% chance of accept",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "bias": {
      "description": "Baseline tendency to accept/reject offers, independent of variables",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_gain": {
      "description": "Sensitivity to amount offered to participant (split_self); positive values mean more for self increases acceptance",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_inequity": {
      "description": "Sensitivity to fairness violation (receiving less than deserved per contribution); non-negative",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Strength of nonlinearity in fairness penalty; values above 1 increase sensitivity to large violations",
      "range": {
        "min": 0.5,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Amount of money offered to the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "norm_self": {
      "description": "Amount of money participant 'deserves' based on token contribution (in \u00a3): norm_self = token_self/(token_self+token_opp) \u00d7 combined_earning",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "token_self": {
      "description": "Number of tokens found by the participant in the pretask",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent in the pretask",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned in the trial (\u00a33 per token found by either party)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "The model predicts responder acceptance using a utility that combines a baseline bias, linear sensitivity to the personal monetary offer, and a nonlinear penalty for receiving less than a personalized, contribution-based fairness norm. Only fairness violations below this norm are penalized, and the penalty exponent enables sharp, nonlinear rejection of unfair offers. All variables are mapped directly from the trial structure, supporting interpretable and parameter-recoverable modeling of responder choices.",
  "target_variable": "accept",
  "full_reasoning": "Let me proceed step by step as instructed.\n\n**Step 1: Key psychological mechanisms in UG responder behavior**\n- **Selfish gain:** Responders want high payoffs, so larger offers are preferred.\n- **Inequity aversion:** Responders dislike unfairness/unjust offers\u2014i.e., being offered less than half.\n- **Relative contribution:** Here, the fairness norm can depend on tokens found: a split based on contributions (not just equal split).\n- **Sensitivity to intentionality/role:** May respond differently if their own contribution is higher/lower, or they are offered exactly what they \"deserve.\"\n- **Contextual scaling:** Offers that are the same \u00a3 amount may feel fairer or less fair depending on the combined_earning (pot size).\n- **Threshold/Step function:** Rejection increases quickly when fairness falls below contribution norm\u2014a non-linear effect.\n\n**Step 2: How these mechanisms interact**\n- Participants may evaluate offers against a personalized fairness norm: the share \u201cdeserved\u201d based on relative contribution, not just 50%.\n- Deviations from this personalized fairness point may be penalized, nonlinearly.\n- People may still accept slightly unfair offers, with rejection rates rising sharply beyond a (soft) threshold (sigmoid-type effect).\n- Utility may combine self-gain and fairness deviation (possibly multiplicatively or with nonlinearity).\n- Offers far above norm may be accepted even if \u201ctoo generous,\u201d but mainly rejections are for unfair/low offers.\n\n**Alternative plausible modeling twists**\n- **Ratio or divisive forms:** Instead of using an additive penalty, could use (offered - deserved)/deserved.\n- **Soft-min or ReLU:** Penalize only deviations below norm, not above.\n- **Objective versus perceived fairness:** Include a weight on \u201cproportional fairness\u201d (token contribution) vs. \u201cequal split.\u201d\n- **Reference dependence:** Some participants may quickly reject anything below a certain fraction, akin to a threshold function (e.g., a softmax masking effect).\n- **Interaction terms:** Penalty for unfairness could increase as combined_earning grows (e.g., higher stakes = more fairness sensitivity).\n- **Nonlinear weighting:** Power terms or squaring the deviation from fairness point.\n\n**Step 3: Mathematical form(s) and parameterization**\n- Define a \u201cdeserved\u201d/normative share for responder: norm_self = token_self / (token_self + token_opp) \u00d7 combined_earning\n- **Fairness deviation:** delta = split_self - norm_self\n- Penalize negative delta more than positive: use e.g., a soft-thresholded penalty (-theta_neg\u00b7max(0, -delta)), optionally with a nonlinear function (e.g., tanh or power).\n- **Gain sensitivity:** Include a weight on absolute offered amount (i.e., some people always accept large payoffs even if unfair).\n- For robust parameter recovery: use independent parameters for gain and fairness sensitivity, and avoid combining similar parameters.\n\n**Step 4: Choose parameters; mapping variables**\n- **Gain weight:** beta_gain (how much more utility per \u00a3 offered)\n- **Fairness aversion:** beta_inequity (sensitivity to fairness violations; must be positive)\n- **Fairness exponent:** gamma (maybe fixed at 1 or learnable in [0.5, 2]) for nonlinearity in fairness penalty (to allow abrupt \u201cunfairness\u201d effects)\n- **Intercept:** bias (trait baseline for responder, e.g., general rejection/acceptance tendency)\n\nTo avoid overparameterization and for parameter recovery, keep number of learnable parameters modest (2-3).\n\n**Step 5: Functional form suggestions**\n- Linear combination: Utility = bias + beta_gain \u00d7 split_self - beta_inequity \u00d7 (max(0, norm_self - split_self))^gamma\n  - Only penalize when offer < deserved (\u201cnorm_self\u201d).\n- Could use splitperc_self and \u201cdeserved\u201d percent, but since token values/combined_earning are in the data, use \u00a3 amounts for interpretability.\n\n**Step 6: Final choices for variables and bounds**\n- **beta_gain:** [-5, 5] (participants may reward or punish large offers; likely positive, but allow negative for edge cases)\n- **beta_inequity:** [0, 10] (must be non-negative)\n- **bias:** [-10, 10] (flexible baseline)\n- **gamma:** [0.5, 3] (exponent for nonlinearity; learnable for flexibility or fixed at 1 for recovery ease)\n\n**Step 7: Specify only necessary variables in model**\n- Utility for responder = bias + beta_gain \u00d7 split_self - beta_inequity \u00d7 (max(0, norm_self - split_self))^gamma\n- Probability of accept is sigmoid(utility), but the output is utility.\n\n**Check for identifiability**\n- beta_gain and beta_inequity are recoverable if split_self and norm_self are not perfectly collinear (which they are not).\n- bias is independently recoverable.\n- gamma increases abruptness\u2014if too flexible, might be under-identified; can bound as above.\n\n**Step 8: Provide the required specification**\n\n---\n\n<MODEL>\nutility = bias + beta_gain * split_self - beta_inequity * ((max(0, norm_self - split_self)) ** gamma)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Latent utility of accepting the proposal; less than 0 implies less than 50% chance of accept\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline tendency to accept/reject offers, independent of variables\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_gain\": {\n      \"description\": \"Sensitivity to amount offered to participant (split_self); positive values mean more for self increases acceptance\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_inequity\": {\n      \"description\": \"Sensitivity to fairness violation (receiving less than deserved per contribution); non-negative\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Strength of nonlinearity in fairness penalty; values above 1 increase sensitivity to large violations\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount of money offered to the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"norm_self\": {\n      \"description\": \"Amount of money participant 'deserves' based on token contribution (in \u00a3): norm_self = token_self/(token_self+token_opp) \u00d7 combined_earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant in the pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent in the pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial (\u00a33 per token found by either party)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThe model predicts responder acceptance using a utility that combines a baseline bias, linear sensitivity to the personal monetary offer, and a nonlinear penalty for receiving less than a personalized, contribution-based fairness norm. Only fairness violations below this norm are penalized, and the penalty exponent enables sharp, nonlinear rejection of unfair offers. All variables are mapped directly from the trial structure, supporting interpretable and parameter-recoverable modeling of responder choices.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: utility = bias + beta_gain * split_self - beta_inequity * ((max(0, norm_self - split_self)) ** gamma)\nSummary: The model predicts responder acceptance using a utility that combines a baseline bias, linear sensitivity to the personal monetary offer, and a nonlinear penalty for receiving less than a personalized, contribution-based fairness norm. Only fairness violations below this norm are penalized, and the penalty exponent enables sharp, nonlinear rejection of unfair offers. All variables are mapped directly from the trial structure, supporting interpretable and parameter-recoverable modeling of responder choices.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, bias=0, beta_gain=1, beta_inequity=1, gamma=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        # Calculate norm_self\n        if (token_self + token_opp) == 0:\n            norm_self = combined_earning / 2  #If both are 0 tokens, split is equal\n        else:\n            norm_self = (token_self / (token_self + token_opp)) * combined_earning\n\n        # Calculate utility\n        inequity = max(0, norm_self - split_self)\n        utility = bias + beta_gain * split_self - beta_inequity * (inequity ** gamma)\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.8107448107448106,
  "fitting_results": [
    {
      "bias": -4.981936365560146,
      "beta_gain": 0.788994632241035,
      "beta_inequity": 0.13616119434115992,
      "gamma": 3.0,
      "success": true,
      "log_likelihood": -5.8569359570666695,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.169864686283461,
      "beta_gain": 0.5643976030370754,
      "beta_inequity": 2.836643358624561,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -15.17614273608686,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.739881427579468,
      "beta_gain": 1.0896297581577175,
      "beta_inequity": 5.5661314870711855,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -9.682542349913115,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -3.3636738689840877,
      "beta_gain": 1.3055923103960643,
      "beta_inequity": 0.22509773107887632,
      "gamma": 2.168573038259969,
      "success": true,
      "log_likelihood": -12.10173005722714,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 6.697465337710941,
      "beta_gain": 0.5162121488439784,
      "beta_inequity": 6.171119893894582,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -8.559957990173354,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.3211537980559742,
      "beta_gain": 1.0279205077462303,
      "beta_inequity": 1.6398416970513374,
      "gamma": 0.9183461054266469,
      "success": true,
      "log_likelihood": -10.829548718274637,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "beta_gain": 5.0,
      "beta_inequity": 0.0,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -2.9053042393118085e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.519630154645523,
      "beta_gain": 0.8855992890473003,
      "beta_inequity": 0.08297262823298548,
      "gamma": 3.0,
      "success": true,
      "log_likelihood": -8.968669596863473,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "beta_gain": 5.0,
      "beta_inequity": 0.0,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -2.9053042393118064e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.9502342833448987,
      "beta_gain": 0.7996927902829477,
      "beta_inequity": 4.690179708213779,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -10.173631932266874,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -7.420722519182217,
      "beta_gain": 5.0,
      "beta_inequity": 2.6164467253414805,
      "gamma": 1.7267135031570138,
      "success": true,
      "log_likelihood": -1.0574714380053514,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -5.126097789867114,
      "beta_gain": 0.9514126120864892,
      "beta_inequity": 0.1805938155947591,
      "gamma": 3.0,
      "success": true,
      "log_likelihood": -6.412020901543667,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.069308861661854,
      "beta_gain": 0.8912258944765622,
      "beta_inequity": 6.2438809301766405,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -8.354410520098172,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "beta_gain": 5.0,
      "beta_inequity": 0.0,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -2.90530423931181e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "beta_gain": 5.0,
      "beta_inequity": 0.0,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -2.9053042393118095e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "beta_gain": 5.0,
      "beta_inequity": 0.0,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -2.905304239311808e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "beta_gain": 5.0,
      "beta_inequity": 0.0,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -2.9053042393118095e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -1.6417423629164056,
      "beta_gain": 5.0,
      "beta_inequity": 4.2182613273223035,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -1.0551282843405976,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "beta_gain": 0.9445345888235602,
      "beta_inequity": 4.961451670222396,
      "gamma": 0.5595105590675058,
      "success": true,
      "log_likelihood": -5.1499429272839,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 7.0719161529037144,
      "beta_gain": 5.0,
      "beta_inequity": 0.0,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -5.4942167021831045e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.395202081566929,
      "beta_gain": 0.33879153746549945,
      "beta_inequity": 4.106423280942658,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -12.819539960749438,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 7.893761647443838,
      "beta_gain": 0.9374168534380145,
      "beta_inequity": 4.65502723842512,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -6.866792982123588,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -3.6689889694085123,
      "beta_gain": 0.992365305868926,
      "beta_inequity": 0.02537707786939069,
      "gamma": 3.0,
      "success": true,
      "log_likelihood": -15.264047959867408,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.2099457629568547,
      "beta_gain": 0.8001051554022005,
      "beta_inequity": 1.9484849966514814,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -16.317868916829266,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 8.398105425243807,
      "beta_gain": -0.10025114435631004,
      "beta_inequity": 5.371505828760984,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -10.014845055545921,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.0171017399968494,
      "beta_gain": 0.8621145840864146,
      "beta_inequity": 2.9906964279986985,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -13.766011685272222,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.7447461622145346,
      "beta_gain": 1.2418188234889398,
      "beta_inequity": 3.7954371780817606,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -11.324111375787968,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.944652460543832,
      "beta_gain": 1.3936254524828922,
      "beta_inequity": 10.0,
      "gamma": 0.5201659587079822,
      "success": true,
      "log_likelihood": -3.6888022001622476,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.721597922339732,
      "beta_gain": 0.38987609309483856,
      "beta_inequity": 1.1771186495082986,
      "gamma": 0.9200674602650251,
      "success": true,
      "log_likelihood": -7.70064724615875,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.407590856098442,
      "beta_gain": 0.1733895481504265,
      "beta_inequity": 2.774870272012582,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -13.529956162822344,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "beta_gain": 5.0,
      "beta_inequity": 0.0,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -2.905304239311809e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -4.9821143683711355,
      "beta_gain": 0.7890509678384988,
      "beta_inequity": 0.1361463909832623,
      "gamma": 3.0,
      "success": true,
      "log_likelihood": -5.856935935633965,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.1830785661947676,
      "beta_gain": 0.6848740018696635,
      "beta_inequity": 0.2964472979570581,
      "gamma": 0.9189415225735549,
      "success": true,
      "log_likelihood": -19.42020741972436,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.4293434487717715,
      "beta_gain": 0.7400098335975964,
      "beta_inequity": 2.64679375648995,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -14.160763035146621,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "beta_gain": 5.0,
      "beta_inequity": 0.0,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -2.905304239311809e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -4.308323356333309,
      "beta_gain": 2.550141022341053,
      "beta_inequity": 1.7803497850467707,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -9.248151910979352,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -1.511193340322955,
      "beta_gain": 2.183367325337689,
      "beta_inequity": 0.8417778434356525,
      "gamma": 1.4435136523239707,
      "success": true,
      "log_likelihood": -6.94077191564168,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.306966092447402,
      "beta_gain": 0.3787223555507482,
      "beta_inequity": 3.8121769346058976,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -13.168910103024576,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.504822540615084,
      "beta_gain": 0.17926799878723404,
      "beta_inequity": 2.7438817924135037,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -15.745992418680919,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.445494810140524,
      "beta_gain": 0.2680141292649551,
      "beta_inequity": 2.1810737149444805,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -8.154819697605753,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.032416318291685,
      "beta_gain": 0.09062491711820024,
      "beta_inequity": 3.102209681139095,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -15.420462188385649,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.3520575748753104,
      "beta_gain": 0.4097498676285107,
      "beta_inequity": 2.8155498625092954,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -10.478819685416367,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.8907328513718026,
      "beta_gain": 5.0,
      "beta_inequity": 0.0,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -23.020824154512436,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.33081796230226074,
      "beta_gain": 0.8762956888096345,
      "beta_inequity": 2.0716821633193527,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -15.59989419703,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.9402675642401015,
      "beta_gain": 0.9756705173051902,
      "beta_inequity": 3.0303012091500223,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -13.076585364814143,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -0.9937717128163734,
      "beta_gain": 1.0423488790697588,
      "beta_inequity": 0.791264044637796,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -15.116900245278233,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.1102397711853,
      "beta_gain": 0.6397598824447969,
      "beta_inequity": 2.8377839166350904,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -15.008420146908028,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -1.050895040709054,
      "beta_gain": 0.7301173967408479,
      "beta_inequity": 1.526084443367604,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -16.76500156230992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.9916591038685,
      "beta_gain": -0.12122479411088992,
      "beta_inequity": 2.6782102312229363,
      "gamma": 0.9103498420692708,
      "success": true,
      "log_likelihood": -8.214006448845167,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -1.4240939260140117,
      "beta_gain": 0.46695957733412075,
      "beta_inequity": 0.06801422558801218,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -22.67464528711798,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.0129521604733687,
      "beta_gain": 0.5715046960301493,
      "beta_inequity": 1.3173013418881037,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -17.357082951136285,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.8119870551290824,
      "beta_gain": 0.4894721788461405,
      "beta_inequity": 0.7426734906089272,
      "gamma": 0.6743409148140855,
      "success": true,
      "log_likelihood": -11.387116277471867,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.005726210805128,
      "beta_gain": 0.9084086276986436,
      "beta_inequity": 0.49045622287230733,
      "gamma": 0.8278877844348007,
      "success": true,
      "log_likelihood": -17.667882278228245,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.34578399029639,
      "beta_gain": 0.8004002763654575,
      "beta_inequity": 0.0,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -19.77288468331839,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.379811946835147,
      "beta_gain": -0.0171962877137002,
      "beta_inequity": 2.0637007716365368,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -17.799725128511724,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -8.96013541999097,
      "beta_gain": 4.1894663535904675,
      "beta_inequity": 1.4780657923254636,
      "gamma": 3.0,
      "success": true,
      "log_likelihood": -3.5515825222871586,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.164652111286973,
      "beta_gain": 0.7697792916504256,
      "beta_inequity": 0.208292825529277,
      "gamma": 3.0,
      "success": true,
      "log_likelihood": -9.990557866601755,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.840487493595378,
      "beta_gain": 0.06822550705327553,
      "beta_inequity": 0.0,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -12.536077970319536,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -4.613529622367144,
      "beta_gain": 0.8230183399919084,
      "beta_inequity": 0.14091424809385697,
      "gamma": 3.0,
      "success": true,
      "log_likelihood": -7.017210755188291,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -0.16098272105703829,
      "beta_gain": 0.9220444904019512,
      "beta_inequity": 0.7159050571907023,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -13.580070162730818,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.5005804117437094,
      "beta_gain": 0.34231879268287285,
      "beta_inequity": 1.4688499722995005,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -19.463803049290288,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.488391103072901,
      "beta_gain": 0.34521160471625084,
      "beta_inequity": 3.853072627681595,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -13.098920750827757,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -4.982253056908286,
      "beta_gain": 0.789056646720833,
      "beta_inequity": 0.1361200902551442,
      "gamma": 3.0,
      "success": true,
      "log_likelihood": -5.856935926545245,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.4261080427650157,
      "beta_gain": 0.7307133893088503,
      "beta_inequity": 0.013782189794889535,
      "gamma": 2.9841325664216223,
      "success": true,
      "log_likelihood": -18.75206317372474,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.3302881209281257,
      "beta_gain": 1.149510949495448,
      "beta_inequity": 3.0804093752896664,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -8.680290214521571,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.6690044564320642,
      "beta_gain": 1.1293209796323,
      "beta_inequity": 2.847425579999499,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -13.049412464279833,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.322580684360422,
      "beta_gain": 0.5115521808382475,
      "beta_inequity": 2.43463578844216,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -7.404832362365538,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.922817220965326,
      "beta_gain": 0.3274705322703657,
      "beta_inequity": 2.868053035934075,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -10.083425668768344,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -3.0646226050235104,
      "beta_gain": 1.6800081083541358,
      "beta_inequity": 1.5249239509571706,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -12.163174452318113,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.36514183344322,
      "beta_gain": -0.13997509566785565,
      "beta_inequity": 1.498496965501988,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -9.38071173527278,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -1.6937438760123669,
      "beta_gain": 1.2305717972363073,
      "beta_inequity": 10.0,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -0.17356809516475213,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -3.6800008926193164,
      "beta_gain": 0.6467087918076034,
      "beta_inequity": 0.06664757323515168,
      "gamma": 3.0,
      "success": true,
      "log_likelihood": -9.765264979307624,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -0.37063713964076495,
      "beta_gain": 0.7700732251523298,
      "beta_inequity": 0.9364676155648819,
      "gamma": 0.9582718391617272,
      "success": true,
      "log_likelihood": -15.550798102639732,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -0.6247589627584546,
      "beta_gain": 0.9592507878432368,
      "beta_inequity": 0.6264663131071664,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -14.428513735385735,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -0.05778724826783589,
      "beta_gain": 0.31343962602991793,
      "beta_inequity": 0.7132125584600341,
      "gamma": 0.5347011937264466,
      "success": true,
      "log_likelihood": -22.299644960354886,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.521005120518862,
      "beta_gain": 0.4569696687105696,
      "beta_inequity": 0.05974342991371996,
      "gamma": 3.0,
      "success": true,
      "log_likelihood": -10.503791622341865,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 7.321198128782254,
      "beta_gain": 0.1048525724926152,
      "beta_inequity": 2.584379844813277,
      "gamma": 0.5101364296720072,
      "success": true,
      "log_likelihood": -6.061618970374022,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -3.4930706001027483,
      "beta_gain": 0.3360835342136251,
      "beta_inequity": 0.07158606699421405,
      "gamma": 3.0,
      "success": true,
      "log_likelihood": -6.16617181804328,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -0.8104657794817021,
      "beta_gain": 0.48984028849476313,
      "beta_inequity": 0.2749918041357121,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -21.561357895247358,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -4.982171397055825,
      "beta_gain": 0.7890554780234659,
      "beta_inequity": 0.13609389108750006,
      "gamma": 3.0,
      "success": true,
      "log_likelihood": -5.8569359482988945,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.4300294471971095,
      "beta_gain": 0.23642325640110068,
      "beta_inequity": 0.8034798352733716,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -22.602709884149288,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.4560927027318673,
      "beta_gain": 0.01683050835491182,
      "beta_inequity": 0.08298597441813699,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -10.318487369079428,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -3.095740357846293,
      "beta_gain": 0.5042865897900544,
      "beta_inequity": 0.19285498679721694,
      "gamma": 3.0,
      "success": true,
      "log_likelihood": -7.90859252901643,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -10.0,
      "beta_gain": 4.045434278236366,
      "beta_inequity": 0.26870019846394777,
      "gamma": 2.56389415274461,
      "success": true,
      "log_likelihood": -3.351331218954391,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.171937266010299,
      "beta_gain": -0.08766587123455795,
      "beta_inequity": 0.9659915871562621,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -22.4708923100706,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -1.099269195455894,
      "beta_gain": 0.34065776133919157,
      "beta_inequity": 2.660406207235557,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -6.700640397603109,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.359017629348398,
      "beta_gain": 0.24757999478391066,
      "beta_inequity": 2.1061162538751783,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -16.765618526815413,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.9001800776943972,
      "beta_gain": 0.036188550093630596,
      "beta_inequity": 1.9739989439651593,
      "gamma": 3.0,
      "success": true,
      "log_likelihood": -30.046768481321635,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.45160683318103,
      "beta_gain": 0.5275307500714737,
      "beta_inequity": 0.012012571335584855,
      "gamma": 3.0,
      "success": true,
      "log_likelihood": -4.78473953143858,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -9.948518255360199,
      "beta_gain": 3.5574139597326906,
      "beta_inequity": 1.0822819196450273,
      "gamma": 1.0064756142957862,
      "success": true,
      "log_likelihood": -5.695184772208702,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.3855088361182095,
      "beta_gain": 0.19760226483324814,
      "beta_inequity": 0.8243999531820502,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -20.417294014288174,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "bias": {
        "r": 0.7601873143847561,
        "p": 4.6483826130861226e-20
      },
      "beta_gain": {
        "r": 0.6248425449166237,
        "p": 3.707894784234697e-12
      },
      "beta_inequity": {
        "r": 0.5618962141710866,
        "p": 1.1825885365953884e-09
      },
      "gamma": {
        "r": 0.43174675396518525,
        "p": 7.289985475983002e-06
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 35.757516677907745,
  "bic_results": {
    "average_bic": 35.757516677907745,
    "individual_bics": [
      26.04794766795778,
      44.686361225998155,
      33.69916045365067,
      38.537535868278724,
      31.453991734171147,
      35.99317319037371,
      14.334076334885287,
      32.271414947551385,
      14.334076334885287,
      34.68133961835819,
      16.44901862983514,
      27.158117556911776,
      31.042896794020784,
      14.334076334885287,
      14.334076334885287,
      14.334076334885287,
      14.334076334885287,
      16.444332322505634,
      24.63396160839224,
      14.334086742257844,
      39.97315567532331,
      28.067661718071616,
      44.86217167355926,
      46.969813587482975,
      34.36376586491628,
      41.86609912436889,
      36.98229850540038,
      21.711680154148937,
      29.73537024614194,
      41.393988079469125,
      14.334076334885287,
      26.04794762509237,
      53.17449059327316,
      42.65560182411768,
      14.334076334885287,
      32.83037957578314,
      28.2156195851078,
      40.671895959873595,
      45.82606059118628,
      30.643715149035945,
      45.175000130595734,
      35.29171512465717,
      60.375724062849315,
      45.533864147884444,
      40.48724648345272,
      44.567876244380905,
      44.350916047640496,
      47.864078878444275,
      30.762088651514773,
      59.6833663280604,
      49.048241656097005,
      37.10830830876817,
      49.66984031028093,
      53.879845120461226,
      49.933526010847885,
      21.437240798398758,
      34.315191487027946,
      39.406231694463514,
      28.36849726420102,
      41.494216079286076,
      53.26168185240502,
      40.531917255479954,
      26.04794760691493,
      51.83820210127392,
      31.694656182867583,
      40.4329006823841,
      29.143740478555515,
      34.50092709136113,
      38.66042465846067,
      33.09549922437,
      14.681211944153944,
      33.86460571243968,
      45.4356719591039,
      43.191103224595906,
      58.933365674534215,
      35.341658998508166,
      26.457313694572484,
      26.666419389911,
      57.45679154431916,
      26.04794765042223,
      59.53949552212302,
      34.97105049198329,
      30.1512608118573,
      21.03673819173322,
      59.27586037396564,
      27.735356549030655,
      47.86531280745527,
      74.4276127164677,
      23.9035548167016,
      25.724445298241843,
      55.168663782400785
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 4,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- bias: r = 0.760\n- beta_gain: r = 0.625\n- beta_inequity: r = 0.562\n- gamma: r = 0.432",
  "previous_models": [
    "Specification: utility = bias + beta_gain * split_self - beta_inequity * ((max(0, norm_self - split_self)) ** gamma)\nSummary: The model predicts responder acceptance using a utility that combines a baseline bias, linear sensitivity to the personal monetary offer, and a nonlinear penalty for receiving less than a personalized, contribution-based fairness norm. Only fairness violations below this norm are penalized, and the penalty exponent enables sharp, nonlinear rejection of unfair offers. All variables are mapped directly from the trial structure, supporting interpretable and parameter-recoverable modeling of responder choices.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 35.757516677907745\nOverall Accuracy: 0.8107\n\nParameter Recovery:\n- bias: r = 0.760\n- beta_gain: r = 0.625\n- beta_inequity: r = 0.562\n- gamma: r = 0.432"
  ]
}