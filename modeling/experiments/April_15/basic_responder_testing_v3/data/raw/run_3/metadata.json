{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nReviewing the run results: Current parameter recovery for bias is strong, but for beta_gain, beta_inequity, and especially gamma, it is moderate to low. BIC and accuracy are decent but not exceptional. Given the instructions, the LLM already considers nonlinearity and penalizes only deviations below a contribution-based fairness norm, with a nonlinear exponent. \n\nParameter recovery issues for beta_inequity and gamma suggest that including both a fairness sensitivity and a nonlinearity exponent creates collinearity or overfitting. Additionally, gain and fairness terms may be correlated if the variables are not normalized. The variable mapping may still allow redundancy.\n\nTo improve, the instructions should urge explicit normalization of variables (e.g., working in percents of pot rather than absolute values), and/or divisive or interaction forms that can better separate psychological drivers and reduce parameter collinearity. The role of a fairness norm could be operationalized in ratio or difference space, or a relative\u2013not just absolute\u2013utility. Moreover, the possibility of using \u201csoftmax\u201d or \u201cratio-based\u201d forms (e.g., offered/deserved, or log(offered/deserved)), or piecewise relationships, should be specifically highlighted\u2014not just general nonlinearity.\n\nAdditionally, there may be too many parameters for the data, so the instructions should emphasize bias towards minimizing unnecessary parameters, selecting the most behaviorally-identifiable ones (e.g., choose either nonlinearity OR fairness strength, but not both unless clearly distinct).\n\nFinally, the modeler should explicitly simulate and reason about parameter recovery: which parameters can be recovered, and why. They should be told to assess/remedy collinearity and to compare alternative forms for possible parsimony and recovery enhancement.\n\nEncourage less obvious modeling strategies\u2014for example, \u201csoftmin\u201d rather than \u201cmax\u201d, or self/other differences; allow asymmetrical punishment for unfairness; or even \u201ccategorical\u201d or \u201cthreshold\u201d regimes that are hybrid between continuous and step models. Suggest considering whether a \u201creference-dependent\u201d utility (evaluating relative to norm) or even a piecewise-linear/step utility might outperform additive approaches.\n\nAdditionally, nudge the LLM to avoid using both split_self and norm_self as separate inputs if they could yield the same information, and to explore modeling with derived/composite variables\u2014such as ratio, percent deviation, or an explicit \u201crelative unfairness\u201d metric.\n\nMake sure all terms in the instructions are precise. Encourage modelers to provide a short statement indicating why their model should yield improved parameter recovery AND prediction, not just post hoc description.\n\nSummarize and clean up these changes in new instructions.\n</think>\n\n---\n**Instructions for Next Computational Modeling Run**\n\nBefore preparing your model, think systematically through each of the following steps:\n\n1. **Clarify Psychological Mechanisms**  \n   - Explicitly identify the cognitive drivers influencing responder acceptance/rejection in this context (e.g., self-interest, inequity aversion, contribution-to-reward matching, \"reference points\" or norms, threshold effects).\n   - Consider at least one non-standard mechanism, such as categorical regime change, attention to ratios, or \u201creference-dependent\u201d utility\u2014do not default to only additive linear or threshold forms.\n\n2. **Consider Alternative Variable Mappings and Normalization**  \n   - Reflect critically on whether using absolute values (e.g., \u00a3) or normalized values (e.g., percent of combined_earning, offered/deserved ratio) would improve parameter independence and interpretability.\n   - Explore composite variables that condense information (e.g., offered/proportional norm, percent deviation from norm) to reduce redundancy and multicollinearity among predictors.\n\n3. **Explore Varied Mathematical Formulations**  \n   - Explicitly consider functional forms beyond strictly additive or monotonic (e.g., softmin, ratio, log-ratio, piecewise, or hybrid step-continuous).\n   - If using nonlinearity (e.g., exponents, sigmoid penalties), justify its necessity and consider whether it can be parameterized so as not to be collinear with other parameters. If adding a nonlinearity parameter, consider omitting or fixing the corresponding slope so each parameter is interpretable and separately recoverable.\n   - Where possible, choose between magnitude-based and direction-based fairness penalties (e.g., only penalize under-offers, or penalize both over- and under-offers differently).\n\n4. **Apply Special Attention to Parameter Recovery and Parsimony**  \n   - Before finalizing your model, reason about which parameters can be successfully identified and separated when fit to behavioral data. Prefer models with parameters that are not mathematically or conceptually redundant, to maximize recovery.\n   - Where possible, simulate or reason about the collinearity between parameters, and bias toward forms that give clearer, less correlated parameter interpretations.\n   - If two parameters show highly overlapping behavioral patterns, simplify: consider fixing one or removing it.\n\n5. **Be Thoughtful and Justified in Model Construction**\n   - Clearly justify the inclusion (or exclusion) of each model term and parameter, referencing psychological theory and the potential for behavioral identification.\n   - Minimize number of learnable parameters, but do not ignore important mechanisms; if a standard mechanism does not improve recovery, consider alternatives such as stepwise or regime-change models, or interaction terms.\n   - Consider offering at least one form that \u201cbreaks the mold\u201d of recent models for this dataset (for instance, using a ratio, a piecewise or asymmetrical penalty, or log transformation).\n\n6. **Explicitly Reflect and Predict Improved Performance**\n   - In your reasoning, clearly state why your model form should yield improved parameter recovery AND predictive fit, not just descriptive plausibility.\n   - Reflect on how your modeling choices specifically address previous limitations of collinearity, overfitting, or poor parameter identifiability.\n\n**Formatting and Output Requirements**\n\n- Use the provided tag format:  \n  - Present your model\u2019s formula using explicit mathematical notation between <MODEL>...</MODEL> tags.  \n  - Detail all variables (including their source, learnability, range, and a clear description) in JSON format between <VARIABLES>...</VARIABLES> tags.  \n  - Specify the target variable your model predicts (should be \u201caccept\u201d) within <target_variable> tags.  \n  - Summarize your model, focusing only on its theoretical structure and innovations, within <SUMMARY> tags.\n\n**General Advice**  \n- Favor models that increase interpretability and parameter identifiability, potentially by using normalized or composite variables and reducing redundant terms.\n- Directly address possible weak spots in earlier approaches\u2014such as parameter correlation or indistinguishable effects.\n- Encourage careful, creative departures from past models, ideally proposing structures that would provide more robust and recoverable insights.\n\nBe rigorous, concise, and specific in your modeling choices and justifications.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nReviewing the run results: Current parameter recovery for bias is strong, but for beta_gain, beta_inequity, and especially gamma, it is moderate to low. BIC and accuracy are decent but not exceptional. Given the instructions, the LLM already considers nonlinearity and penalizes only deviations below a contribution-based fairness norm, with a nonlinear exponent. \n\nParameter recovery issues for beta_inequity and gamma suggest that including both a fairness sensitivity and a nonlinearity exponent creates collinearity or overfitting. Additionally, gain and fairness terms may be correlated if the variables are not normalized. The variable mapping may still allow redundancy.\n\nTo improve, the instructions should urge explicit normalization of variables (e.g., working in percents of pot rather than absolute values), and/or divisive or interaction forms that can better separate psychological drivers and reduce parameter collinearity. The role of a fairness norm could be operationalized in ratio or difference space, or a relative\u2013not just absolute\u2013utility. Moreover, the possibility of using \u201csoftmax\u201d or \u201cratio-based\u201d forms (e.g., offered/deserved, or log(offered/deserved)), or piecewise relationships, should be specifically highlighted\u2014not just general nonlinearity.\n\nAdditionally, there may be too many parameters for the data, so the instructions should emphasize bias towards minimizing unnecessary parameters, selecting the most behaviorally-identifiable ones (e.g., choose either nonlinearity OR fairness strength, but not both unless clearly distinct).\n\nFinally, the modeler should explicitly simulate and reason about parameter recovery: which parameters can be recovered, and why. They should be told to assess/remedy collinearity and to compare alternative forms for possible parsimony and recovery enhancement.\n\nEncourage less obvious modeling strategies\u2014for example, \u201csoftmin\u201d rather than \u201cmax\u201d, or self/other differences; allow asymmetrical punishment for unfairness; or even \u201ccategorical\u201d or \u201cthreshold\u201d regimes that are hybrid between continuous and step models. Suggest considering whether a \u201creference-dependent\u201d utility (evaluating relative to norm) or even a piecewise-linear/step utility might outperform additive approaches.\n\nAdditionally, nudge the LLM to avoid using both split_self and norm_self as separate inputs if they could yield the same information, and to explore modeling with derived/composite variables\u2014such as ratio, percent deviation, or an explicit \u201crelative unfairness\u201d metric.\n\nMake sure all terms in the instructions are precise. Encourage modelers to provide a short statement indicating why their model should yield improved parameter recovery AND prediction, not just post hoc description.\n\nSummarize and clean up these changes in new instructions.\n</think>\n\n---\n**Instructions for Next Computational Modeling Run**\n\nBefore preparing your model, think systematically through each of the following steps:\n\n1. **Clarify Psychological Mechanisms**  \n   - Explicitly identify the cognitive drivers influencing responder acceptance/rejection in this context (e.g., self-interest, inequity aversion, contribution-to-reward matching, \"reference points\" or norms, threshold effects).\n   - Consider at least one non-standard mechanism, such as categorical regime change, attention to ratios, or \u201creference-dependent\u201d utility\u2014do not default to only additive linear or threshold forms.\n\n2. **Consider Alternative Variable Mappings and Normalization**  \n   - Reflect critically on whether using absolute values (e.g., \u00a3) or normalized values (e.g., percent of combined_earning, offered/deserved ratio) would improve parameter independence and interpretability.\n   - Explore composite variables that condense information (e.g., offered/proportional norm, percent deviation from norm) to reduce redundancy and multicollinearity among predictors.\n\n3. **Explore Varied Mathematical Formulations**  \n   - Explicitly consider functional forms beyond strictly additive or monotonic (e.g., softmin, ratio, log-ratio, piecewise, or hybrid step-continuous).\n   - If using nonlinearity (e.g., exponents, sigmoid penalties), justify its necessity and consider whether it can be parameterized so as not to be collinear with other parameters. If adding a nonlinearity parameter, consider omitting or fixing the corresponding slope so each parameter is interpretable and separately recoverable.\n   - Where possible, choose between magnitude-based and direction-based fairness penalties (e.g., only penalize under-offers, or penalize both over- and under-offers differently).\n\n4. **Apply Special Attention to Parameter Recovery and Parsimony**  \n   - Before finalizing your model, reason about which parameters can be successfully identified and separated when fit to behavioral data. Prefer models with parameters that are not mathematically or conceptually redundant, to maximize recovery.\n   - Where possible, simulate or reason about the collinearity between parameters, and bias toward forms that give clearer, less correlated parameter interpretations.\n   - If two parameters show highly overlapping behavioral patterns, simplify: consider fixing one or removing it.\n\n5. **Be Thoughtful and Justified in Model Construction**\n   - Clearly justify the inclusion (or exclusion) of each model term and parameter, referencing psychological theory and the potential for behavioral identification.\n   - Minimize number of learnable parameters, but do not ignore important mechanisms; if a standard mechanism does not improve recovery, consider alternatives such as stepwise or regime-change models, or interaction terms.\n   - Consider offering at least one form that \u201cbreaks the mold\u201d of recent models for this dataset (for instance, using a ratio, a piecewise or asymmetrical penalty, or log transformation).\n\n6. **Explicitly Reflect and Predict Improved Performance**\n   - In your reasoning, clearly state why your model form should yield improved parameter recovery AND predictive fit, not just descriptive plausibility.\n   - Reflect on how your modeling choices specifically address previous limitations of collinearity, overfitting, or poor parameter identifiability.\n\n**Formatting and Output Requirements**\n\n- Use the provided tag format:  \n  - Present your model\u2019s formula using explicit mathematical notation between <MODEL>...</MODEL> tags.  \n  - Detail all variables (including their source, learnability, range, and a clear description) in JSON format between <VARIABLES>...</VARIABLES> tags.  \n  - Specify the target variable your model predicts (should be \u201caccept\u201d) within <target_variable> tags.  \n  - Summarize your model, focusing only on its theoretical structure and innovations, within <SUMMARY> tags.\n\n**General Advice**  \n- Favor models that increase interpretability and parameter identifiability, potentially by using normalized or composite variables and reducing redundant terms.\n- Directly address possible weak spots in earlier approaches\u2014such as parameter correlation or indistinguishable effects.\n- Encourage careful, creative departures from past models, ideally proposing structures that would provide more robust and recoverable insights.\n\nBe rigorous, concise, and specific in your modeling choices and justifications.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Certainly! Here\u2019s my step-by-step reasoning aligned with the enhanced instructions:\n\n---\n**Step-by-Step Reasoning**\n\n**1. Key Psychological Drivers:**\n- **Self-interest**: Utility is higher when the responder receives more.\n- **Inequity aversion**: Dislike for offers perceived as less than deserved, especially when their share is less than their contribution norm.\n- **Contribution-based norm/reference**: Responder expects a share proportional to contribution (reference-dependent norm).\n- **Potential for categorical \u201cunacceptable below X%\u201d** (threshold or regime-change).\n\n**2. Variable Mapping & Normalization:**\n- Past models may have used absolute (\u00a3) or percent splits; both can confound effects when combined_earning varies.\n- **Explicitly normalize** all offers as a proportion of total pot (splitperc_self/100).\n- **Propose a \u201crelative offer\u201d variable:** offered share divided by deserved share (\u201ccontribution norm\u201d), i.e.:  \n  relative_offer = (splitperc_self / 100) / (token_self / (token_self + token_opp))\n\n**3. Alternative Mathematical Forms:**\n- Additive terms (gain + fairness penalty) risk collinearity.\n- Nonlinearity (e.g., a power for under-offers) tends to be strongly correlated with fairness penalty magnitude.\n- **Propose a ratio-based log utility:**  \n  Utility increases nonlinearly with the log of relative_offer (ratio of offered/expected).\n- This compresses scale, reduces parameter overlaps, and may allow more identifiable parameters.\n- **Add an intercept/bias term.**\n- **Consider soft minimum with floor** (no reward for overoffering, only penalty for being under-contributed).\n\n**4. Parameter Recovery & Parsimony:**\n- Having both \u03b2 (slope) and \u03b3 (nonlinearity) often yields moderate recovery for both.\n- Log-transforms remove the need for explicit power/exponent: only a gain slope and bias needed.\n- **Minimalist model:** Only two learnable parameters (bias, slope).\n- Strong separability: bias captures overall acceptance rate; slope tunes sensitivity to contribution-based fairness.\n\n**5. Model Construction Justification:**\n- This model is interpretable: bias interprets as basic tendency to accept; slope interprets as sensitivity to fairness shortfall.\n- By using ratio and log, confounds with combined_earning scale and explicit norm terms are removed.\n- Model is reference-dependent and interpretable; also, the log form provides a continuous penalty for being under the reference point\u2014mirroring human loss aversion for unfairness.\n\n**6. Expected Improvement:**\n- Only two parameters, both readily recoverable: bias (overall acceptance rate), beta_log_ratio (sensitivity to fairness norm violation).\n- Ratio-based variable avoids explicit collinearity between absolute offer and fairness norm.\n- Log transform gives nonlinear, loss-averse penalty, but no exponent is learned (no overfitting).\n- Should improve parameter recovery and interpretability relative to previous fair/ non-fair additive nonlinear models.\n\n---\nHere is the proposed model:\n\n<MODEL>\nU = bias + beta_log_ratio * log(max((splitperc_self / 100) / (token_self / (token_self + token_opp)), floor))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer on a given trial; used to compute probability of acceptance.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Learned participant baseline tendency to accept (logit scale).\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_log_ratio\": {\n      \"description\": \"Sensitivity to log-ratio of actual over deserved share based on contribution.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Percent of the total pot offered to participant (the responder) in this proposal.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant (as responder), i.e. their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent, i.e. their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"floor\": {\n      \"description\": \"Small positive value to prevent log(0) (e.g., 0.01).\",\n      \"range\": {\n        \"min\": 0.000001,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nA two-parameter log-ratio model of responder utility, in which the percent of the pot offered to the responder is evaluated relative to a contribution-based fairness norm. The utility is proportional to the log of the offered-over-deserved share (with a small floor to prevent divergence). This structure allows for continuous, reference-dependent loss aversion, minimizes parameter collinearity through explicit normalization, and is highly interpretable for both prediction and psychological inference.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['bias', 'beta_log_ratio']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = bias + beta_log_ratio * log(max((splitperc_self / 100) / (token_self / (token_self + token_opp)), floor))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer on a given trial; used to compute probability of acceptance.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Learned participant baseline tendency to accept (logit scale).\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_log_ratio\": {\n      \"description\": \"Sensitivity to log-ratio of actual over deserved share based on contribution.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Percent of the total pot offered to participant (the responder) in this proposal.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant (as responder), i.e. their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent, i.e. their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"floor\": {\n      \"description\": \"Small positive value to prevent log(0) (e.g., 0.01).\",\n      \"range\": {\n        \"min\": 1e-06,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, bias=0.0, beta_log_ratio=1.0):\n    model_predictions = []\n    floor = 0.01  # Or any value within the specified range\n\n    for trial in trial_data:\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate the deserved share based on contribution\n        if token_self + token_opp == 0:\n            deserved_share = 0.5  # Default to 50% if no tokens found\n        else:\n            deserved_share = token_self / (token_self + token_opp)\n\n        # Calculate the ratio of offered share to deserved share\n        ratio = (splitperc_self / 100) / deserved_share if deserved_share > 0 else 0.0\n        \n        # Apply the floor\n        ratio = max(ratio, floor)\n\n        # Calculate the utility\n        U = bias + beta_log_ratio * math.log(ratio)\n\n        model_predictions.append(U)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 50, \"token_self\": 50, \"combined_earning\": 100, \"split_opp\": 50.0, \"split_self\": 50.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 50.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 50.0}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 25, \"token_self\": 75, \"combined_earning\": 100, \"split_opp\": 25.0, \"split_self\": 75.0, \"splitperc_opp\": 25, \"splitperc_self\": 75, \"accept\": 1.0, \"accepted_amount\": 75.0, \"accepted_perc\": 75.0, \"proposed_perc\": 75.0, \"proposed_amount\": 75.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744714441.3984032
    }
  ],
  "learnable_parameters": {
    "bias": {
      "description": "Learned participant baseline tendency to accept (logit scale).",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_log_ratio": {
      "description": "Sensitivity to log-ratio of actual over deserved share based on contribution.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = bias + beta_log_ratio * log(max((splitperc_self / 100) / (token_self / (token_self + token_opp)), floor))",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer on a given trial; used to compute probability of acceptance.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "bias": {
      "description": "Learned participant baseline tendency to accept (logit scale).",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_log_ratio": {
      "description": "Sensitivity to log-ratio of actual over deserved share based on contribution.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "splitperc_self": {
      "description": "Percent of the total pot offered to participant (the responder) in this proposal.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by participant (as responder), i.e. their contribution.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by opponent, i.e. their contribution.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "floor": {
      "description": "Small positive value to prevent log(0) (e.g., 0.01).",
      "range": {
        "min": 1e-06,
        "max": 0.1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    }
  },
  "model_summary": "A two-parameter log-ratio model of responder utility, in which the percent of the pot offered to the responder is evaluated relative to a contribution-based fairness norm. The utility is proportional to the log of the offered-over-deserved share (with a small floor to prevent divergence). This structure allows for continuous, reference-dependent loss aversion, minimizes parameter collinearity through explicit normalization, and is highly interpretable for both prediction and psychological inference.",
  "target_variable": "accept",
  "full_reasoning": "Certainly! Here\u2019s my step-by-step reasoning aligned with the enhanced instructions:\n\n---\n**Step-by-Step Reasoning**\n\n**1. Key Psychological Drivers:**\n- **Self-interest**: Utility is higher when the responder receives more.\n- **Inequity aversion**: Dislike for offers perceived as less than deserved, especially when their share is less than their contribution norm.\n- **Contribution-based norm/reference**: Responder expects a share proportional to contribution (reference-dependent norm).\n- **Potential for categorical \u201cunacceptable below X%\u201d** (threshold or regime-change).\n\n**2. Variable Mapping & Normalization:**\n- Past models may have used absolute (\u00a3) or percent splits; both can confound effects when combined_earning varies.\n- **Explicitly normalize** all offers as a proportion of total pot (splitperc_self/100).\n- **Propose a \u201crelative offer\u201d variable:** offered share divided by deserved share (\u201ccontribution norm\u201d), i.e.:  \n  relative_offer = (splitperc_self / 100) / (token_self / (token_self + token_opp))\n\n**3. Alternative Mathematical Forms:**\n- Additive terms (gain + fairness penalty) risk collinearity.\n- Nonlinearity (e.g., a power for under-offers) tends to be strongly correlated with fairness penalty magnitude.\n- **Propose a ratio-based log utility:**  \n  Utility increases nonlinearly with the log of relative_offer (ratio of offered/expected).\n- This compresses scale, reduces parameter overlaps, and may allow more identifiable parameters.\n- **Add an intercept/bias term.**\n- **Consider soft minimum with floor** (no reward for overoffering, only penalty for being under-contributed).\n\n**4. Parameter Recovery & Parsimony:**\n- Having both \u03b2 (slope) and \u03b3 (nonlinearity) often yields moderate recovery for both.\n- Log-transforms remove the need for explicit power/exponent: only a gain slope and bias needed.\n- **Minimalist model:** Only two learnable parameters (bias, slope).\n- Strong separability: bias captures overall acceptance rate; slope tunes sensitivity to contribution-based fairness.\n\n**5. Model Construction Justification:**\n- This model is interpretable: bias interprets as basic tendency to accept; slope interprets as sensitivity to fairness shortfall.\n- By using ratio and log, confounds with combined_earning scale and explicit norm terms are removed.\n- Model is reference-dependent and interpretable; also, the log form provides a continuous penalty for being under the reference point\u2014mirroring human loss aversion for unfairness.\n\n**6. Expected Improvement:**\n- Only two parameters, both readily recoverable: bias (overall acceptance rate), beta_log_ratio (sensitivity to fairness norm violation).\n- Ratio-based variable avoids explicit collinearity between absolute offer and fairness norm.\n- Log transform gives nonlinear, loss-averse penalty, but no exponent is learned (no overfitting).\n- Should improve parameter recovery and interpretability relative to previous fair/ non-fair additive nonlinear models.\n\n---\nHere is the proposed model:\n\n<MODEL>\nU = bias + beta_log_ratio * log(max((splitperc_self / 100) / (token_self / (token_self + token_opp)), floor))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer on a given trial; used to compute probability of acceptance.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Learned participant baseline tendency to accept (logit scale).\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_log_ratio\": {\n      \"description\": \"Sensitivity to log-ratio of actual over deserved share based on contribution.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Percent of the total pot offered to participant (the responder) in this proposal.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant (as responder), i.e. their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent, i.e. their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"floor\": {\n      \"description\": \"Small positive value to prevent log(0) (e.g., 0.01).\",\n      \"range\": {\n        \"min\": 0.000001,\n        \"max\": 0.1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nA two-parameter log-ratio model of responder utility, in which the percent of the pot offered to the responder is evaluated relative to a contribution-based fairness norm. The utility is proportional to the log of the offered-over-deserved share (with a small floor to prevent divergence). This structure allows for continuous, reference-dependent loss aversion, minimizes parameter collinearity through explicit normalization, and is highly interpretable for both prediction and psychological inference.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = bias + beta_log_ratio * log(max((splitperc_self / 100) / (token_self / (token_self + token_opp)), floor))\nSummary: A two-parameter log-ratio model of responder utility, in which the percent of the pot offered to the responder is evaluated relative to a contribution-based fairness norm. The utility is proportional to the log of the offered-over-deserved share (with a small floor to prevent divergence). This structure allows for continuous, reference-dependent loss aversion, minimizes parameter collinearity through explicit normalization, and is highly interpretable for both prediction and psychological inference.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, bias=0.0, beta_log_ratio=1.0):\n    model_predictions = []\n    floor = 0.01  # Or any value within the specified range\n\n    for trial in trial_data:\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate the deserved share based on contribution\n        if token_self + token_opp == 0:\n            deserved_share = 0.5  # Default to 50% if no tokens found\n        else:\n            deserved_share = token_self / (token_self + token_opp)\n\n        # Calculate the ratio of offered share to deserved share\n        ratio = (splitperc_self / 100) / deserved_share if deserved_share > 0 else 0.0\n        \n        # Apply the floor\n        ratio = max(ratio, floor)\n\n        # Calculate the utility\n        U = bias + beta_log_ratio * math.log(ratio)\n\n        model_predictions.append(U)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7844932844932845,
  "fitting_results": [
    {
      "bias": -1.045937043455428,
      "beta_log_ratio": 5.6920227783935005,
      "success": true,
      "log_likelihood": -6.54078018691902,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.6570917444906392,
      "beta_log_ratio": 5.0966602686279545,
      "success": true,
      "log_likelihood": -15.49477753786805,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.415701365698087,
      "beta_log_ratio": 10.0,
      "success": true,
      "log_likelihood": -9.145613377409353,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.4179895449244957,
      "beta_log_ratio": 5.921721649333422,
      "success": true,
      "log_likelihood": -14.245405744727535,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.453817419968146,
      "beta_log_ratio": 10.0,
      "success": true,
      "log_likelihood": -9.877566379944717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.373480670392591,
      "beta_log_ratio": 6.164287031247817,
      "success": true,
      "log_likelihood": -12.38877136559674,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "beta_log_ratio": -3.5520411144668342,
      "success": true,
      "log_likelihood": -0.000675751042263964,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.885839149584298,
      "beta_log_ratio": 6.53889284474461,
      "success": true,
      "log_likelihood": -11.41810123001374,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "beta_log_ratio": -3.5318101836426377,
      "success": true,
      "log_likelihood": -0.0006757723571793969,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.6408007546403773,
      "beta_log_ratio": 9.569245214779828,
      "success": true,
      "log_likelihood": -10.151484341357211,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.453816739853005,
      "beta_log_ratio": 10.0,
      "success": true,
      "log_likelihood": -5.459238858760569,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -0.5993044441061328,
      "beta_log_ratio": 5.5016410338921045,
      "success": true,
      "log_likelihood": -8.099503227345236,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.134063265624243,
      "beta_log_ratio": 10.0,
      "success": true,
      "log_likelihood": -8.983822134197563,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "beta_log_ratio": -3.598128751060369,
      "success": true,
      "log_likelihood": -0.0006758206846473321,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "beta_log_ratio": -3.6061377730512816,
      "success": true,
      "log_likelihood": -0.0006758494740271492,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "beta_log_ratio": -3.5513982419377483,
      "success": true,
      "log_likelihood": -0.0006757512313237249,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "beta_log_ratio": -3.5535168497718668,
      "success": true,
      "log_likelihood": -0.0006757507293430233,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "beta_log_ratio": 9.102827791761372,
      "success": true,
      "log_likelihood": -3.7660571041679964,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 7.237103102907021,
      "beta_log_ratio": 5.68422428307817,
      "success": true,
      "log_likelihood": -5.630042921814725,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "beta_log_ratio": -3.5468578351449533,
      "success": true,
      "log_likelihood": -0.000675753478313002,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.6360572941596168,
      "beta_log_ratio": 6.148954060333893,
      "success": true,
      "log_likelihood": -13.480293796209377,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 6.488329960962237,
      "beta_log_ratio": 5.4928360025648155,
      "success": true,
      "log_likelihood": -6.997268643837076,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.206052778692731,
      "beta_log_ratio": 3.9030476406387273,
      "success": true,
      "log_likelihood": -17.126532059709774,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.4965001637553423,
      "beta_log_ratio": 4.409646182187113,
      "success": true,
      "log_likelihood": -16.568531848586925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.1398062181393755,
      "beta_log_ratio": 6.066447290513157,
      "success": true,
      "log_likelihood": -13.984231247326548,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.9648079368327394,
      "beta_log_ratio": 6.3113341424618925,
      "success": true,
      "log_likelihood": -12.960765671182926,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.341052364833584,
      "beta_log_ratio": 7.432586635331738,
      "success": true,
      "log_likelihood": -11.835450560376568,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.450502708524471,
      "beta_log_ratio": 10.0,
      "success": true,
      "log_likelihood": -5.290645808419644,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.4758617849611255,
      "beta_log_ratio": 3.005509222171714,
      "success": true,
      "log_likelihood": -9.205736486025767,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.1609545111368145,
      "beta_log_ratio": 2.7723629640419416,
      "success": true,
      "log_likelihood": -14.790164987196908,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "beta_log_ratio": -3.5827357991804494,
      "success": true,
      "log_likelihood": -0.0006757792041797439,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -1.0459446884076917,
      "beta_log_ratio": 5.692036394856635,
      "success": true,
      "log_likelihood": -6.540780186909759,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.0979167285203235,
      "beta_log_ratio": 2.881447979432024,
      "success": true,
      "log_likelihood": -19.692085806455335,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.4345341044939537,
      "beta_log_ratio": 6.509798683127572,
      "success": true,
      "log_likelihood": -13.326622099848594,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "beta_log_ratio": -3.552666245458599,
      "success": true,
      "log_likelihood": -0.0006757508891171459,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.3754485673355745,
      "beta_log_ratio": 4.585493074362122,
      "success": true,
      "log_likelihood": -14.880192290464898,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 6.638843697017807,
      "beta_log_ratio": 8.596582554603192,
      "success": true,
      "log_likelihood": -8.78060339590063,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.040738685152454,
      "beta_log_ratio": 5.867138502758781,
      "success": true,
      "log_likelihood": -14.275302486538685,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.87482353281786,
      "beta_log_ratio": 3.4919920765544137,
      "success": true,
      "log_likelihood": -16.476412336307295,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.291581519496142,
      "beta_log_ratio": 2.412446850310241,
      "success": true,
      "log_likelihood": -8.40500900190602,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.5026337136946704,
      "beta_log_ratio": 3.4701724952213024,
      "success": true,
      "log_likelihood": -17.55964538612423,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.109552098288403,
      "beta_log_ratio": 7.2957349817153,
      "success": true,
      "log_likelihood": -10.287766024187375,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.437395291395274,
      "beta_log_ratio": -0.2205972190673208,
      "success": true,
      "log_likelihood": -4.564378243155026,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.8193593703253055,
      "beta_log_ratio": 4.660564676452854,
      "success": true,
      "log_likelihood": -15.880216972914262,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.916249556116131,
      "beta_log_ratio": 5.82384516300051,
      "success": true,
      "log_likelihood": -13.299193852952161,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.6466581927112767,
      "beta_log_ratio": 2.607584822636207,
      "success": true,
      "log_likelihood": -17.02712113691281,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.85699441172799,
      "beta_log_ratio": 5.098058965858112,
      "success": true,
      "log_likelihood": -15.339698079207528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.0752474839343389,
      "beta_log_ratio": 3.1791066704329936,
      "success": true,
      "log_likelihood": -18.82876352469897,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.701676283638473,
      "beta_log_ratio": 6.5929204771332515,
      "success": true,
      "log_likelihood": -13.333838864893199,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.5643542516064696,
      "beta_log_ratio": 0.8098522879043396,
      "success": true,
      "log_likelihood": -24.268453952518843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.2276403042584723,
      "beta_log_ratio": 2.2439256427418437,
      "success": true,
      "log_likelihood": -18.662538405634155,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -0.602198650793902,
      "beta_log_ratio": 3.4922392256223307,
      "success": true,
      "log_likelihood": -11.426586416554413,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.0718623562701035,
      "beta_log_ratio": 3.6011769329295658,
      "success": true,
      "log_likelihood": -18.183886286443933,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.1447529045246474,
      "beta_log_ratio": 1.4087516919272405,
      "success": true,
      "log_likelihood": -22.724543852752944,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.9280884183621304,
      "beta_log_ratio": 2.836951346354329,
      "success": true,
      "log_likelihood": -19.53302611844286,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.145171337361367,
      "beta_log_ratio": 10.0,
      "success": true,
      "log_likelihood": -6.132929322319469,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.1017477407998166,
      "beta_log_ratio": 8.738615102810916,
      "success": true,
      "log_likelihood": -9.966347988529854,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.412115481898386,
      "beta_log_ratio": -1.5203106100387518,
      "success": true,
      "log_likelihood": -11.845609986039838,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -0.6749857347075646,
      "beta_log_ratio": 4.9499624786885,
      "success": true,
      "log_likelihood": -8.567042958998671,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.155540414120856,
      "beta_log_ratio": 2.4828779348250016,
      "success": true,
      "log_likelihood": -14.30365338497278,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.7674095509636008,
      "beta_log_ratio": 2.238333679085932,
      "success": true,
      "log_likelihood": -20.417867274024097,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.925472132104676,
      "beta_log_ratio": 5.63553651086032,
      "success": true,
      "log_likelihood": -14.62618989841853,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -1.0459412448639704,
      "beta_log_ratio": 5.692032710490809,
      "success": true,
      "log_likelihood": -6.540780186893605,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.073149605570793,
      "beta_log_ratio": 2.515520561796854,
      "success": true,
      "log_likelihood": -20.65927712833134,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.2250746516350077,
      "beta_log_ratio": 7.793789819654311,
      "success": true,
      "log_likelihood": -9.86128222384193,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.507542607999273,
      "beta_log_ratio": 5.914827624162339,
      "success": true,
      "log_likelihood": -13.820056928635575,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.502450596008818,
      "beta_log_ratio": 2.6238049593826225,
      "success": true,
      "log_likelihood": -8.1085497758456,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.360597972280623,
      "beta_log_ratio": 3.2565087842369707,
      "success": true,
      "log_likelihood": -10.221658861260869,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.6521550909195217,
      "beta_log_ratio": 4.355698537541991,
      "success": true,
      "log_likelihood": -16.446750406595946,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.2505049587134955,
      "beta_log_ratio": 1.2544607802074992,
      "success": true,
      "log_likelihood": -9.779306912196734,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -0.1150240534389677,
      "beta_log_ratio": 10.0,
      "success": true,
      "log_likelihood": -3.0401292958497095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -0.5832659396330268,
      "beta_log_ratio": 3.578876774052253,
      "success": true,
      "log_likelihood": -11.326992704565303,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.131040735694475,
      "beta_log_ratio": 3.7136684837778153,
      "success": true,
      "log_likelihood": -17.947870684137623,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.869260210244909,
      "beta_log_ratio": 2.3883438145769844,
      "success": true,
      "log_likelihood": -15.636074693342046,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.7139661795577189,
      "beta_log_ratio": 1.2967801181866365,
      "success": true,
      "log_likelihood": -23.471566140503842,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.821968789455134,
      "beta_log_ratio": 4.598756105609852,
      "success": true,
      "log_likelihood": -13.702724903256025,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 4.375596854318998,
      "beta_log_ratio": 2.0008430219471935,
      "success": true,
      "log_likelihood": -6.741893358103098,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -2.579071958059254,
      "beta_log_ratio": 0.49861728599362215,
      "success": true,
      "log_likelihood": -7.675533779325971,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.8807593369477636,
      "beta_log_ratio": 0.747641781982053,
      "success": true,
      "log_likelihood": -23.529690189595648,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -1.0459408244561157,
      "beta_log_ratio": 5.692030867888214,
      "success": true,
      "log_likelihood": -6.540780186893434,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.9636941609559044,
      "beta_log_ratio": 1.5310602518098226,
      "success": true,
      "log_likelihood": -22.909653002224573,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.272602992708189,
      "beta_log_ratio": -0.23369999319627227,
      "success": true,
      "log_likelihood": -10.309814113613983,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -1.046428915308478,
      "beta_log_ratio": 2.849418029829434,
      "success": true,
      "log_likelihood": -10.604664941889101,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 3.708048726517503,
      "beta_log_ratio": 7.210898888982236,
      "success": true,
      "log_likelihood": -12.48587265017075,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.966606968980646,
      "beta_log_ratio": 0.8936781103498544,
      "success": true,
      "log_likelihood": -23.314464427990274,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": -0.20097842039571204,
      "beta_log_ratio": 9.091392312020822,
      "success": true,
      "log_likelihood": -5.898344952676177,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.366764039833357,
      "beta_log_ratio": 2.4526100999293132,
      "success": true,
      "log_likelihood": -18.16804344605402,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 0.3530105987202935,
      "beta_log_ratio": 4.296264723978036,
      "success": true,
      "log_likelihood": -13.64104681281224,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 5.7593493961203315,
      "beta_log_ratio": 3.275244286337999,
      "success": true,
      "log_likelihood": -5.4148060031866105,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 2.3147701266237783,
      "beta_log_ratio": 4.791297445350597,
      "success": true,
      "log_likelihood": -16.094716212041913,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "bias": 1.3876879139949763,
      "beta_log_ratio": 0.9523200881447508,
      "success": true,
      "log_likelihood": -21.38507740085712,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "bias": {
        "r": 0.9383782063995547,
        "p": 5.172778340682138e-47
      },
      "beta_log_ratio": {
        "r": 0.8947434039917639,
        "p": 4.391690824148101e-36
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 30.417160851765022,
  "bic_results": {
    "average_bic": 30.417160851765022,
    "individual_bics": [
      20.24859825075026,
      38.15659295264832,
      25.458264631730927,
      35.65784936636729,
      26.922170636801653,
      31.944580608105703,
      7.168389378996748,
      30.003240336939697,
      7.168389421626578,
      27.47000655962664,
      18.08551559443336,
      23.366044331602694,
      25.134682145307345,
      7.168389518281514,
      7.1683895758602745,
      7.168389379374867,
      7.168389378370906,
      14.699152085248212,
      18.427123720541672,
      7.1683893838688455,
      34.12762546933097,
      21.161575164586374,
      41.420101996331766,
      40.30410157408607,
      35.135500371565314,
      33.08856921927807,
      30.837938997665354,
      17.748329493751505,
      25.578510848963752,
      36.74736785130604,
      7.168389435320579,
      20.24859825073174,
      46.55120948982289,
      33.82028207660941,
      7.1683893786904544,
      36.92742245784201,
      24.72824466871348,
      35.71764284998959,
      40.11986254952681,
      23.977055880724258,
      42.28632864916068,
      27.742569925286972,
      16.29579436322227,
      38.92747182274074,
      33.76542558281654,
      41.22128015073784,
      37.84643403532728,
      44.82456492631016,
      33.834715606698616,
      55.703945781949905,
      44.49211468818053,
      30.020210710021047,
      43.534810449800084,
      52.61612558241811,
      46.233090113797935,
      19.432896521551157,
      27.099733853971927,
      30.858257848991897,
      24.301123794909564,
      35.77434464685778,
      48.00277242496041,
      36.41941767374928,
      20.24859825069943,
      48.4855921335749,
      26.889602324596083,
      34.80715173418337,
      23.384137428603417,
      27.61035559943396,
      40.06053869010411,
      26.725651701305686,
      13.247296468611639,
      29.821023286042823,
      43.062779245187464,
      38.43918726359631,
      54.1101701579199,
      34.57248768342427,
      20.650824593118415,
      22.51810543556416,
      54.226418256103514,
      20.24859825069909,
      52.986343881361364,
      27.78666610414019,
      28.37636776069042,
      32.13878317725372,
      53.795966732892765,
      18.963727782264574,
      43.50312476902026,
      34.4491315025367,
      17.996649883285443,
      39.356470300996044,
      49.93719267862646
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- bias: r = 0.938\n- beta_log_ratio: r = 0.895",
  "previous_models": [
    "Specification: U = bias + beta_log_ratio * log(max((splitperc_self / 100) / (token_self / (token_self + token_opp)), floor))\nSummary: A two-parameter log-ratio model of responder utility, in which the percent of the pot offered to the responder is evaluated relative to a contribution-based fairness norm. The utility is proportional to the log of the offered-over-deserved share (with a small floor to prevent divergence). This structure allows for continuous, reference-dependent loss aversion, minimizes parameter collinearity through explicit normalization, and is highly interpretable for both prediction and psychological inference.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 30.417160851765022\nOverall Accuracy: 0.7845\n\nParameter Recovery:\n- bias: r = 0.938\n- beta_log_ratio: r = 0.895"
  ]
}