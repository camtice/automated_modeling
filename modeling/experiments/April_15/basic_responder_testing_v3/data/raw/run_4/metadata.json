{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nThe previous best model\u2014a two-parameter log-ratio model\u2014yielded very high parameter recovery and solid overall accuracy/BIC, leveraging reference-dependent utility via normalization (offered/deserved share, log transform). However, its functional form remains monotonic and continuous, and does not allow for the kinds of \u201cregime changes,\u201d discretion, or categorical rejections sometimes seen in game behavior (i.e., \u201cbelow a certain threshold, always reject\u201d\u2014not easily captured by smooth log functions).\n\nTo further enhance parameter identifiability and prediction, the next instructions should motivate trying models that:\n- Explicitly account for possible categorical/threshold or \u201chybrid\u201d effects (i.e., combine continuous sensitivity with discontinuous regime changes).\n- Consider asymmetry: rejection may be *very* rapid just below fairness or may depend nonlinearly on the magnitude of under-offering (e.g., nonlinearity only below the fairness point).\n- Encourage the exploration of \u201cstep\u201d or \u201cpiecewise\u201d models\u2014e.g., sharply changing utility below a reference, flat above\u2014potentially with an additional parameter to capture the \u201crejection regime.\u201d\n- Suggest functional forms where the acceptance probability saturates (e.g., softmax, min, or capped penalties) to better match observed switch-like responses.\n- Introduce interaction terms or composite variables, such as the sign and magnitude of the offered\u2013deserved gap.\n- Urge careful justification if proposing more than two learnable parameters (e.g., only if clearly separable and interpretable), but do not strictly limit parameter count if separation can be justified.\n- Urge the modeler to reason, prior to specification, about potential limitations of log-ratio models and the possibility of \u201cpsychological cliffs\u201d as evidenced in responder data.\n- Specifically demand that the new proposal cover at least one approach not reducible to the monotonic log or linear transforms recently used and encourage innovative hybridizations\u2014e.g., logistic kernel or an explicit \u201cminimum acceptance threshold\u201d parameter.\n\nEncourage the modeler to assess and articulate, step by step, how their proposal would increase predictive fidelity and parameter recovery above a (strong) reference-dependent, two-parameter, log-ratio baseline. Reference how regime change, discontinuity, or asymmetry may yield more distinct and separable parameter effects in fitting, thus improving recovery/BIC. Additionally, if proposing a more complex model, require explicit justification and checks against parameter collinearity.\n\nInclude a caution that novelty should not come at the expense of interpretability or parameter identifiability; always reason clearly about whether any added mechanism will produce reliably distinguishable behavioral patterns in simulated/fitted data.\n\nEncourage concise mathematical models\u2014presenting new ideas with minimal jargon and maximal clarity.\n</think>\n\n---\n\n**Instructions for Run 4 Computational Modeling**\n\nBefore constructing your model, systematically follow each step below and ensure your approach stretches beyond standard forms:\n\n1. **Identify Diverse Psychological Mechanisms**  \n   - Enumerate the potential cognitive drivers in responder decisions (e.g., self-interest, fairness norm, aversion to disadvantage, threshold-based rejection, regime-switching).  \n   - Explicitly consider whether behavior is better captured by *continuous* (e.g., log, linear) or *categorical/regime-changing* (e.g., step, threshold, piecewise) functions\u2014or a hybrid thereof.\n\n2. **Innovate in Variable Construction and Functional Form**  \n   - Go beyond standard normalization: devise composite variables (e.g., sign-magnitude gap, ratio, percent deviation) that reveal underlying patterns or asymmetries.  \n   - If modeling thresholds or regime changes, implement these using mathematically explicit forms (e.g., indicator functions, piecewise definitions, soft/hard thresholds).\n   - Consider asymmetrical treatment of under- vs. over-reward (e.g., a penalty only for offers below a reference, or sharper slope below fairness).\n   - You must include at least one non-monotonic or regime-change/threshold element in your model formulation (e.g., utility drops discontinuously when the offer falls below a computed norm).\n\n3. **Refine Parameterization for Recovery and Interpretability**  \n   - If you introduce additional parameters, justify their unique psychological roles and explain in advance why their effects will be distinguishable and recoverable from data.\n   - Where possible, limit the number of learnable parameters\u2014*unless* more are genuinely needed to capture unique effects or stepwise/regime shifts.\n   - Attentively assess the risk of collinearity among parameters, and adjust your form to maximize unique influence on observable data.\n\n4. **Explicitly Simulate and Argue for Model Advantages**  \n   - In your reasoning, compare your model\u2019s expressive power to a reference-dependent log-ratio utility.\n   - State clearly and specifically *why and how* your model will yield increased parameter recovery and prediction accuracy (e.g., by capturing sharp decision boundaries, explicit aversion to unfairness, or psychological \u201ccliffs\u201d missed by previous models).\n\n5. **Formatting and Output Requirements**  \n   - Use the precise tag format for your output:  \n     - <MODEL>\u2026</MODEL> for your model\u2019s formula (mathematical notation only).  \n     - <VARIABLES>\u2026</VARIABLES> for detailed JSON variable definitions (meaning, range, learnability, source, etc.).  \n     - <target_variable>\u2026</target_variable> to declare the output.  \n     - <SUMMARY>\u2026</SUMMARY> to concisely describe the theoretical structure and innovations of your model.\n\n6. **General Advice**  \n   - Favor models maximizing interpretability and separable parameter effects over mere novelty.\n   - Justify each model component rigorously\u2014do not add features unless they offer distinct explanatory or predictive value.\n   - Be explicit and concrete: if proposing a regime-change mechanism, define its mathematical structure, not just its intuition.\n   - Ensure the model can be directly and unambiguously computed from the provided dataset.\n\n**Special Nudge Toward Creativity:**  \n- You are required to include at least one of the following innovations: explicit threshold or step function, piecewise regime change, asymmetric treatment of unfairness, or an interaction term (e.g., penalty that intensifies for offers especially far below a norm).\n- If you choose to stick with a broadly log-ratio or continuous function, you *must* combine it with a regime-switch, indicator, or piecewise structure.\n\nBe rigorous, precise, and out-of-the-box in your model specification and justification.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nThe previous best model\u2014a two-parameter log-ratio model\u2014yielded very high parameter recovery and solid overall accuracy/BIC, leveraging reference-dependent utility via normalization (offered/deserved share, log transform). However, its functional form remains monotonic and continuous, and does not allow for the kinds of \u201cregime changes,\u201d discretion, or categorical rejections sometimes seen in game behavior (i.e., \u201cbelow a certain threshold, always reject\u201d\u2014not easily captured by smooth log functions).\n\nTo further enhance parameter identifiability and prediction, the next instructions should motivate trying models that:\n- Explicitly account for possible categorical/threshold or \u201chybrid\u201d effects (i.e., combine continuous sensitivity with discontinuous regime changes).\n- Consider asymmetry: rejection may be *very* rapid just below fairness or may depend nonlinearly on the magnitude of under-offering (e.g., nonlinearity only below the fairness point).\n- Encourage the exploration of \u201cstep\u201d or \u201cpiecewise\u201d models\u2014e.g., sharply changing utility below a reference, flat above\u2014potentially with an additional parameter to capture the \u201crejection regime.\u201d\n- Suggest functional forms where the acceptance probability saturates (e.g., softmax, min, or capped penalties) to better match observed switch-like responses.\n- Introduce interaction terms or composite variables, such as the sign and magnitude of the offered\u2013deserved gap.\n- Urge careful justification if proposing more than two learnable parameters (e.g., only if clearly separable and interpretable), but do not strictly limit parameter count if separation can be justified.\n- Urge the modeler to reason, prior to specification, about potential limitations of log-ratio models and the possibility of \u201cpsychological cliffs\u201d as evidenced in responder data.\n- Specifically demand that the new proposal cover at least one approach not reducible to the monotonic log or linear transforms recently used and encourage innovative hybridizations\u2014e.g., logistic kernel or an explicit \u201cminimum acceptance threshold\u201d parameter.\n\nEncourage the modeler to assess and articulate, step by step, how their proposal would increase predictive fidelity and parameter recovery above a (strong) reference-dependent, two-parameter, log-ratio baseline. Reference how regime change, discontinuity, or asymmetry may yield more distinct and separable parameter effects in fitting, thus improving recovery/BIC. Additionally, if proposing a more complex model, require explicit justification and checks against parameter collinearity.\n\nInclude a caution that novelty should not come at the expense of interpretability or parameter identifiability; always reason clearly about whether any added mechanism will produce reliably distinguishable behavioral patterns in simulated/fitted data.\n\nEncourage concise mathematical models\u2014presenting new ideas with minimal jargon and maximal clarity.\n</think>\n\n---\n\n**Instructions for Run 4 Computational Modeling**\n\nBefore constructing your model, systematically follow each step below and ensure your approach stretches beyond standard forms:\n\n1. **Identify Diverse Psychological Mechanisms**  \n   - Enumerate the potential cognitive drivers in responder decisions (e.g., self-interest, fairness norm, aversion to disadvantage, threshold-based rejection, regime-switching).  \n   - Explicitly consider whether behavior is better captured by *continuous* (e.g., log, linear) or *categorical/regime-changing* (e.g., step, threshold, piecewise) functions\u2014or a hybrid thereof.\n\n2. **Innovate in Variable Construction and Functional Form**  \n   - Go beyond standard normalization: devise composite variables (e.g., sign-magnitude gap, ratio, percent deviation) that reveal underlying patterns or asymmetries.  \n   - If modeling thresholds or regime changes, implement these using mathematically explicit forms (e.g., indicator functions, piecewise definitions, soft/hard thresholds).\n   - Consider asymmetrical treatment of under- vs. over-reward (e.g., a penalty only for offers below a reference, or sharper slope below fairness).\n   - You must include at least one non-monotonic or regime-change/threshold element in your model formulation (e.g., utility drops discontinuously when the offer falls below a computed norm).\n\n3. **Refine Parameterization for Recovery and Interpretability**  \n   - If you introduce additional parameters, justify their unique psychological roles and explain in advance why their effects will be distinguishable and recoverable from data.\n   - Where possible, limit the number of learnable parameters\u2014*unless* more are genuinely needed to capture unique effects or stepwise/regime shifts.\n   - Attentively assess the risk of collinearity among parameters, and adjust your form to maximize unique influence on observable data.\n\n4. **Explicitly Simulate and Argue for Model Advantages**  \n   - In your reasoning, compare your model\u2019s expressive power to a reference-dependent log-ratio utility.\n   - State clearly and specifically *why and how* your model will yield increased parameter recovery and prediction accuracy (e.g., by capturing sharp decision boundaries, explicit aversion to unfairness, or psychological \u201ccliffs\u201d missed by previous models).\n\n5. **Formatting and Output Requirements**  \n   - Use the precise tag format for your output:  \n     - <MODEL>\u2026</MODEL> for your model\u2019s formula (mathematical notation only).  \n     - <VARIABLES>\u2026</VARIABLES> for detailed JSON variable definitions (meaning, range, learnability, source, etc.).  \n     - <target_variable>\u2026</target_variable> to declare the output.  \n     - <SUMMARY>\u2026</SUMMARY> to concisely describe the theoretical structure and innovations of your model.\n\n6. **General Advice**  \n   - Favor models maximizing interpretability and separable parameter effects over mere novelty.\n   - Justify each model component rigorously\u2014do not add features unless they offer distinct explanatory or predictive value.\n   - Be explicit and concrete: if proposing a regime-change mechanism, define its mathematical structure, not just its intuition.\n   - Ensure the model can be directly and unambiguously computed from the provided dataset.\n\n**Special Nudge Toward Creativity:**  \n- You are required to include at least one of the following innovations: explicit threshold or step function, piecewise regime change, asymmetric treatment of unfairness, or an interaction term (e.g., penalty that intensifies for offers especially far below a norm).\n- If you choose to stick with a broadly log-ratio or continuous function, you *must* combine it with a regime-switch, indicator, or piecewise structure.\n\nBe rigorous, precise, and out-of-the-box in your model specification and justification.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let\u2019s proceed methodically as directed.\n\n---\n\n### 1. Identify Diverse Psychological Mechanisms\n\nResponder behavior in this task likely reflects a combination of:\n- **Self-interest**: Maximizing personal gain.\n- **Fairness norms/reference**: Rejecting offers seen as \u201cunfair,\u201d often defined by proportionality or equity relative to contributions.\n- **Aversion to disadvantage**: Reluctance to accept outcomes where one gets less than the proposer (\"disadvantageous inequity aversion\").\n- **Threshold/rejection regime**: \u201cTake-it-or-leave-it\u201d behavior\u2014participants categorically reject offers below a subjective \u201cminimum acceptable share.\u201d\n- **Hybrid/Regime change**: Accept-above/reject-below \u201ccliff\u201d (can be sharp or softened).\n\n**Continuous** log or linear models can capture smooth preferences, but often miss sharp, thresholded behavior seen in responder data. There is evidence of categorical *rejection regimes* for offers below a certain \"fair\" or \"acceptable\" share.\n\n---\n\n### 2. Innovate in Functional Form\n\n#### **Contemporary Limitation**\nA log-ratio model (e.g., \\(\\log(\\text{split}_\\text{self}/\\text{deserved}_\\text{self})\\)) is monotonic and cannot, alone, produce sharp drop-offs or \u201ccategorical\u201d rejection below a salient fairness threshold.\n\n#### **Hybrid/Piecewise Design**\n- Introduce an **explicit threshold parameter** (\\(\\tau\\)), defining the minimum acceptable share (relative to what\u2019s \u201cdeserved\u201d by contribution).\n- Allow *continuous* sensitivity to improvements *above* the threshold, while conferring a fixed (possibly large negative) utility to offers falling below threshold.\n- To avoid non-differentiability (and for better parameter recovery), implement the regime border with a *smooth* transition (via a soft penalty), e.g., adding a fast sigmoid or a smoothed Heaviside.\n\n#### **Asymmetry/Disadvantage Emphasis**\n- Only penalize offers *below* the threshold; offers above threshold rise in utility, but don't suffer extra penalty.\n\n#### **Composite Variable**\n- Use the **deserved proportion** (by contribution):  \n  \\(\\text{deserved}_\\text{self} = \\frac{\\text{token}_\\text{self}}{\\text{token}_\\text{self} + \\text{token}_\\text{opp}}\\)\n- Offered versus deserved gap:  \n  \\(\\Delta = \\text{splitperc}_\\text{self} - 100 \\times \\text{deserved}_\\text{self}\\)\n\n#### **Model Construction**\nDefine utility as:\n- If offer is above threshold (relative to deserved), utility rises with gap (possibly in a continuous fashion).\n- If offer is below threshold, add a sharp penalty.\n\nTo maintain smoothness for optimization/estimation, combine a continuous part (for above-threshold) and a \u201cstep\u201d penalty for below-threshold using a sigmoid indicator:\n- \u201cBelow threshold\u201d penalty: weighted by a steep sigmoid function centered on the threshold.\n\n---\n\n### 3. Refining Parameterization\n\n**Parameters:**\n- `weight_gap`: Sensitivity to the offered-minus-deserved gap (continuous component).\n- `accept_threshold`: The critical threshold (fraction of deserved share; e.g., 0.6 means won\u2019t accept less than 60% of what is deserved by contribution).\n- `penalty_below_threshold`: Steep penalty to utility for offers below threshold (\\( \\ll 0 \\)), producing categorical rejection.\n- `sigma_cutoff`: Slope/sharpness of threshold boundary (\u201csoft-step\u201d steepness).\n\nAll parameters have clear psychological meaning and, with careful bounds, should be recoverable. Collinearity risk is minimized because each parameter controls a different region (slope above, penalty below, position/sharpness of regime change).\n\n---\n\n### 4. Comparative Advantage\n\nCompared to a standard (monotonic, log-ratio) model:\n- This model can produce sharply categorical rejections at/below a threshold, reflecting the \u201cpsychological cliff\u201d observed in responder data.\n- Parameter recovery is enhanced because the threshold (`accept_threshold`) and penalty (`penalty_below_threshold`) are decorrelated\u2014parameter changes produce distinct, observable changes in simulated data.\n- The model retains continuous sensitivity above the threshold, preserving goodness-of-fit for non-categorical responders.\n\n---\n\n### 5. Model Specification\n\n#### **Mathematical Formula**\n\nDenote:\n- Deserved share: \\( S_\\text{des} = 100 \\times \\frac{\\text{token}_\\text{self}}{\\text{token}_\\text{self} + \\text{token}_\\text{opp}} \\)\n- Offered share: \\( S_\\text{off} = \\text{splitperc}_\\text{self} \\)\n- Offered-minus-threshold: \\( X = S_\\text{off} - \\text{accept_threshold} \\times S_\\text{des} \\)\n\nUtility:\n\\[\nU = \\text{weight_gap}\\, \\cdot\\, (S_\\text{off} - S_\\text{des})\\ +\\ \\text{penalty_below_threshold} \\cdot \\text{sigmoid}\\Big(-\\sigma_\\text{cutoff} \\cdot X \\Big)\n\\]\nwhere \\( \\text{sigmoid}(z) = \\frac{1}{1 + e^{-z}} \\).\n\n---\n\n## Model Output\n\n<MODEL>\nS_des = 100 * token_self / (token_self + token_opp)\nX = splitperc_self - accept_threshold * S_des\nU = weight_gap * (splitperc_self - S_des) + penalty_below_threshold * (1 / (1 + exp(sigma_cutoff * X)))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 24,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 24,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed share for participant, in percent of total pot.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"S_des\": {\n      \"description\": \"Deserved share for participant based on their contribution, in percent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"accept_threshold\": {\n      \"description\": \"Minimum acceptable fraction of deserved share the participant will tolerate before categorically rejecting (as a proportion, e.g. 0.5).\",\n      \"range\": {\n        \"min\": 0.2,\n        \"max\": 1.3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"X\": {\n      \"description\": \"Difference between offered percent and thresholded deserved percent.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"weight_gap\": {\n      \"description\": \"Sensitivity to the gap between offered and deserved percent (continuous component, positive favors acceptance, negative favors rejection).\",\n      \"range\": {\n        \"min\": -5.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"penalty_below_threshold\": {\n      \"description\": \"Utility penalty incurred for offers below the threshold (large negative = strong categorical rejection).\",\n      \"range\": {\n        \"min\": -40.0,\n        \"max\": 0.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sigma_cutoff\": {\n      \"description\": \"Sharpness of threshold regime transition (higher = sharper, must be positive).\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 20.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the offer (drives probability of accept via logistic function).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts responder acceptance as a hybrid of continuous and categorical processes: participants weigh the offered percentage against their deserved share (by contribution) with continuous sensitivity above a soft threshold, but incur a sharp penalty for offers falling below a learnable \u201cminimum acceptable\u201d threshold (expressed as a fraction of deserved share). The categorical penalty is implemented with a smooth sigmoid transition, allowing for both regime change and gradation. Parameterization ensures separable and interpretable roles for threshold position, penalty strength, continuous fairness sensitivity, and threshold sharpness, supporting improved identifiability and accurate recovery of step-like rejection patterns and continuous degrees of fairness aversion.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['accept_threshold', 'weight_gap', 'penalty_below_threshold', 'sigma_cutoff']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                S_des = 100 * token_self / (token_self + token_opp)\nX = splitperc_self - accept_threshold * S_des\nU = weight_gap * (splitperc_self - S_des) + penalty_below_threshold * (1 / (1 + exp(sigma_cutoff * X)))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 24,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 24,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed share for participant, in percent of total pot.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"S_des\": {\n      \"description\": \"Deserved share for participant based on their contribution, in percent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"accept_threshold\": {\n      \"description\": \"Minimum acceptable fraction of deserved share the participant will tolerate before categorically rejecting (as a proportion, e.g. 0.5).\",\n      \"range\": {\n        \"min\": 0.2,\n        \"max\": 1.3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"X\": {\n      \"description\": \"Difference between offered percent and thresholded deserved percent.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"weight_gap\": {\n      \"description\": \"Sensitivity to the gap between offered and deserved percent (continuous component, positive favors acceptance, negative favors rejection).\",\n      \"range\": {\n        \"min\": -5.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"penalty_below_threshold\": {\n      \"description\": \"Utility penalty incurred for offers below the threshold (large negative = strong categorical rejection).\",\n      \"range\": {\n        \"min\": -40.0,\n        \"max\": 0.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sigma_cutoff\": {\n      \"description\": \"Sharpness of threshold regime transition (higher = sharper, must be positive).\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 20.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the offer (drives probability of accept via logistic function).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, accept_threshold=0.5, weight_gap=1.0, penalty_below_threshold=-10.0, sigma_cutoff=5.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 1)\n        token_opp = trial.get(\"token_opp\", 1)\n        splitperc_self = trial.get(\"splitperc_self\", 50)\n\n        # Calculate deserved share\n        S_des = 100 * token_self / (token_self + token_opp) if (token_self + token_opp) > 0 else 0.0\n\n        # Calculate X\n        X = splitperc_self - accept_threshold * S_des\n\n        # Calculate sigmoid value\n        try:\n            sigmoid_val = 1 / (1 + math.exp(sigma_cutoff * X))\n        except OverflowError:\n            sigmoid_val = 0.0 if (sigma_cutoff * X) > 0 else 1.0\n\n        # Calculate Utility\n        U = weight_gap * (splitperc_self - S_des) + penalty_below_threshold * sigmoid_val\n\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 0, \"trial_role\": 1, \"token_opp\": 12, \"token_self\": 12, \"combined_earning\": 50, \"split_opp\": 25.0, \"split_self\": 25.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 25.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 25.0}, {\"ID\": 1, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 0, \"trial_role\": 1, \"token_opp\": 12, \"token_self\": 12, \"combined_earning\": 50, \"split_opp\": 12.5, \"split_self\": 37.5, \"splitperc_opp\": 25, \"splitperc_self\": 75, \"accept\": 1.0, \"accepted_amount\": 37.5, \"accepted_perc\": 75.0, \"proposed_perc\": 75.0, \"proposed_amount\": 37.5}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 3, \"trial_type\": 0, \"trial_role\": 1, \"token_opp\": 12, \"token_self\": 12, \"combined_earning\": 50, \"split_opp\": 25.0, \"split_self\": 25.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 25.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 25.0}, {\"ID\": 3, \"group\": \"control\", \"trial_number\": 4, \"trial_type\": 0, \"trial_role\": 1, \"token_opp\": 12, \"token_self\": 12, \"combined_earning\": 50, \"split_opp\": 25.0, \"split_self\": 25.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 25.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 25.0}, {\"ID\": 4, \"group\": \"control\", \"trial_number\": 5, \"trial_type\": 0, \"trial_role\": 1, \"token_opp\": 12, \"token_self\": 12, \"combined_earning\": 50, \"split_opp\": 25.0, \"split_self\": 25.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 25.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 25.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744714517.176171
    }
  ],
  "learnable_parameters": {
    "accept_threshold": {
      "description": "Minimum acceptable fraction of deserved share the participant will tolerate before categorically rejecting (as a proportion, e.g. 0.5).",
      "range": {
        "min": 0.2,
        "max": 1.3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "weight_gap": {
      "description": "Sensitivity to the gap between offered and deserved percent (continuous component, positive favors acceptance, negative favors rejection).",
      "range": {
        "min": -5.0,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "penalty_below_threshold": {
      "description": "Utility penalty incurred for offers below the threshold (large negative = strong categorical rejection).",
      "range": {
        "min": -40.0,
        "max": 0.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "sigma_cutoff": {
      "description": "Sharpness of threshold regime transition (higher = sharper, must be positive).",
      "range": {
        "min": 0.1,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "S_des = 100 * token_self / (token_self + token_opp)\nX = splitperc_self - accept_threshold * S_des\nU = weight_gap * (splitperc_self - S_des) + penalty_below_threshold * (1 / (1 + exp(sigma_cutoff * X)))",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 1,
        "max": 24,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 1,
        "max": 24,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "splitperc_self": {
      "description": "Proposed share for participant, in percent of total pot.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "S_des": {
      "description": "Deserved share for participant based on their contribution, in percent.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "accept_threshold": {
      "description": "Minimum acceptable fraction of deserved share the participant will tolerate before categorically rejecting (as a proportion, e.g. 0.5).",
      "range": {
        "min": 0.2,
        "max": 1.3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "X": {
      "description": "Difference between offered percent and thresholded deserved percent.",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "weight_gap": {
      "description": "Sensitivity to the gap between offered and deserved percent (continuous component, positive favors acceptance, negative favors rejection).",
      "range": {
        "min": -5.0,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "penalty_below_threshold": {
      "description": "Utility penalty incurred for offers below the threshold (large negative = strong categorical rejection).",
      "range": {
        "min": -40.0,
        "max": 0.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "sigma_cutoff": {
      "description": "Sharpness of threshold regime transition (higher = sharper, must be positive).",
      "range": {
        "min": 0.1,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Utility of accepting the offer (drives probability of accept via logistic function).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "This model predicts responder acceptance as a hybrid of continuous and categorical processes: participants weigh the offered percentage against their deserved share (by contribution) with continuous sensitivity above a soft threshold, but incur a sharp penalty for offers falling below a learnable \u201cminimum acceptable\u201d threshold (expressed as a fraction of deserved share). The categorical penalty is implemented with a smooth sigmoid transition, allowing for both regime change and gradation. Parameterization ensures separable and interpretable roles for threshold position, penalty strength, continuous fairness sensitivity, and threshold sharpness, supporting improved identifiability and accurate recovery of step-like rejection patterns and continuous degrees of fairness aversion.",
  "target_variable": "accept",
  "full_reasoning": "Let\u2019s proceed methodically as directed.\n\n---\n\n### 1. Identify Diverse Psychological Mechanisms\n\nResponder behavior in this task likely reflects a combination of:\n- **Self-interest**: Maximizing personal gain.\n- **Fairness norms/reference**: Rejecting offers seen as \u201cunfair,\u201d often defined by proportionality or equity relative to contributions.\n- **Aversion to disadvantage**: Reluctance to accept outcomes where one gets less than the proposer (\"disadvantageous inequity aversion\").\n- **Threshold/rejection regime**: \u201cTake-it-or-leave-it\u201d behavior\u2014participants categorically reject offers below a subjective \u201cminimum acceptable share.\u201d\n- **Hybrid/Regime change**: Accept-above/reject-below \u201ccliff\u201d (can be sharp or softened).\n\n**Continuous** log or linear models can capture smooth preferences, but often miss sharp, thresholded behavior seen in responder data. There is evidence of categorical *rejection regimes* for offers below a certain \"fair\" or \"acceptable\" share.\n\n---\n\n### 2. Innovate in Functional Form\n\n#### **Contemporary Limitation**\nA log-ratio model (e.g., \\(\\log(\\text{split}_\\text{self}/\\text{deserved}_\\text{self})\\)) is monotonic and cannot, alone, produce sharp drop-offs or \u201ccategorical\u201d rejection below a salient fairness threshold.\n\n#### **Hybrid/Piecewise Design**\n- Introduce an **explicit threshold parameter** (\\(\\tau\\)), defining the minimum acceptable share (relative to what\u2019s \u201cdeserved\u201d by contribution).\n- Allow *continuous* sensitivity to improvements *above* the threshold, while conferring a fixed (possibly large negative) utility to offers falling below threshold.\n- To avoid non-differentiability (and for better parameter recovery), implement the regime border with a *smooth* transition (via a soft penalty), e.g., adding a fast sigmoid or a smoothed Heaviside.\n\n#### **Asymmetry/Disadvantage Emphasis**\n- Only penalize offers *below* the threshold; offers above threshold rise in utility, but don't suffer extra penalty.\n\n#### **Composite Variable**\n- Use the **deserved proportion** (by contribution):  \n  \\(\\text{deserved}_\\text{self} = \\frac{\\text{token}_\\text{self}}{\\text{token}_\\text{self} + \\text{token}_\\text{opp}}\\)\n- Offered versus deserved gap:  \n  \\(\\Delta = \\text{splitperc}_\\text{self} - 100 \\times \\text{deserved}_\\text{self}\\)\n\n#### **Model Construction**\nDefine utility as:\n- If offer is above threshold (relative to deserved), utility rises with gap (possibly in a continuous fashion).\n- If offer is below threshold, add a sharp penalty.\n\nTo maintain smoothness for optimization/estimation, combine a continuous part (for above-threshold) and a \u201cstep\u201d penalty for below-threshold using a sigmoid indicator:\n- \u201cBelow threshold\u201d penalty: weighted by a steep sigmoid function centered on the threshold.\n\n---\n\n### 3. Refining Parameterization\n\n**Parameters:**\n- `weight_gap`: Sensitivity to the offered-minus-deserved gap (continuous component).\n- `accept_threshold`: The critical threshold (fraction of deserved share; e.g., 0.6 means won\u2019t accept less than 60% of what is deserved by contribution).\n- `penalty_below_threshold`: Steep penalty to utility for offers below threshold (\\( \\ll 0 \\)), producing categorical rejection.\n- `sigma_cutoff`: Slope/sharpness of threshold boundary (\u201csoft-step\u201d steepness).\n\nAll parameters have clear psychological meaning and, with careful bounds, should be recoverable. Collinearity risk is minimized because each parameter controls a different region (slope above, penalty below, position/sharpness of regime change).\n\n---\n\n### 4. Comparative Advantage\n\nCompared to a standard (monotonic, log-ratio) model:\n- This model can produce sharply categorical rejections at/below a threshold, reflecting the \u201cpsychological cliff\u201d observed in responder data.\n- Parameter recovery is enhanced because the threshold (`accept_threshold`) and penalty (`penalty_below_threshold`) are decorrelated\u2014parameter changes produce distinct, observable changes in simulated data.\n- The model retains continuous sensitivity above the threshold, preserving goodness-of-fit for non-categorical responders.\n\n---\n\n### 5. Model Specification\n\n#### **Mathematical Formula**\n\nDenote:\n- Deserved share: \\( S_\\text{des} = 100 \\times \\frac{\\text{token}_\\text{self}}{\\text{token}_\\text{self} + \\text{token}_\\text{opp}} \\)\n- Offered share: \\( S_\\text{off} = \\text{splitperc}_\\text{self} \\)\n- Offered-minus-threshold: \\( X = S_\\text{off} - \\text{accept_threshold} \\times S_\\text{des} \\)\n\nUtility:\n\\[\nU = \\text{weight_gap}\\, \\cdot\\, (S_\\text{off} - S_\\text{des})\\ +\\ \\text{penalty_below_threshold} \\cdot \\text{sigmoid}\\Big(-\\sigma_\\text{cutoff} \\cdot X \\Big)\n\\]\nwhere \\( \\text{sigmoid}(z) = \\frac{1}{1 + e^{-z}} \\).\n\n---\n\n## Model Output\n\n<MODEL>\nS_des = 100 * token_self / (token_self + token_opp)\nX = splitperc_self - accept_threshold * S_des\nU = weight_gap * (splitperc_self - S_des) + penalty_below_threshold * (1 / (1 + exp(sigma_cutoff * X)))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 24,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 24,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed share for participant, in percent of total pot.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"S_des\": {\n      \"description\": \"Deserved share for participant based on their contribution, in percent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"accept_threshold\": {\n      \"description\": \"Minimum acceptable fraction of deserved share the participant will tolerate before categorically rejecting (as a proportion, e.g. 0.5).\",\n      \"range\": {\n        \"min\": 0.2,\n        \"max\": 1.3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"X\": {\n      \"description\": \"Difference between offered percent and thresholded deserved percent.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"weight_gap\": {\n      \"description\": \"Sensitivity to the gap between offered and deserved percent (continuous component, positive favors acceptance, negative favors rejection).\",\n      \"range\": {\n        \"min\": -5.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"penalty_below_threshold\": {\n      \"description\": \"Utility penalty incurred for offers below the threshold (large negative = strong categorical rejection).\",\n      \"range\": {\n        \"min\": -40.0,\n        \"max\": 0.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sigma_cutoff\": {\n      \"description\": \"Sharpness of threshold regime transition (higher = sharper, must be positive).\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 20.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the offer (drives probability of accept via logistic function).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts responder acceptance as a hybrid of continuous and categorical processes: participants weigh the offered percentage against their deserved share (by contribution) with continuous sensitivity above a soft threshold, but incur a sharp penalty for offers falling below a learnable \u201cminimum acceptable\u201d threshold (expressed as a fraction of deserved share). The categorical penalty is implemented with a smooth sigmoid transition, allowing for both regime change and gradation. Parameterization ensures separable and interpretable roles for threshold position, penalty strength, continuous fairness sensitivity, and threshold sharpness, supporting improved identifiability and accurate recovery of step-like rejection patterns and continuous degrees of fairness aversion.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: S_des = 100 * token_self / (token_self + token_opp)\nX = splitperc_self - accept_threshold * S_des\nU = weight_gap * (splitperc_self - S_des) + penalty_below_threshold * (1 / (1 + exp(sigma_cutoff * X)))\nSummary: This model predicts responder acceptance as a hybrid of continuous and categorical processes: participants weigh the offered percentage against their deserved share (by contribution) with continuous sensitivity above a soft threshold, but incur a sharp penalty for offers falling below a learnable \u201cminimum acceptable\u201d threshold (expressed as a fraction of deserved share). The categorical penalty is implemented with a smooth sigmoid transition, allowing for both regime change and gradation. Parameterization ensures separable and interpretable roles for threshold position, penalty strength, continuous fairness sensitivity, and threshold sharpness, supporting improved identifiability and accurate recovery of step-like rejection patterns and continuous degrees of fairness aversion.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, accept_threshold=0.5, weight_gap=1.0, penalty_below_threshold=-10.0, sigma_cutoff=5.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 1)\n        token_opp = trial.get(\"token_opp\", 1)\n        splitperc_self = trial.get(\"splitperc_self\", 50)\n\n        # Calculate deserved share\n        S_des = 100 * token_self / (token_self + token_opp) if (token_self + token_opp) > 0 else 0.0\n\n        # Calculate X\n        X = splitperc_self - accept_threshold * S_des\n\n        # Calculate sigmoid value\n        try:\n            sigmoid_val = 1 / (1 + math.exp(sigma_cutoff * X))\n        except OverflowError:\n            sigmoid_val = 0.0 if (sigma_cutoff * X) > 0 else 1.0\n\n        # Calculate Utility\n        U = weight_gap * (splitperc_self - S_des) + penalty_below_threshold * sigmoid_val\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6926129426129426,
  "fitting_results": [
    {
      "accept_threshold": 0.7185834204798904,
      "weight_gap": 4.538577967559572,
      "penalty_below_threshold": -18.837904394249406,
      "sigma_cutoff": 15.203208195382,
      "success": true,
      "log_likelihood": -47.43727315211102,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.21079627204864315,
      "weight_gap": 0.027360585441029636,
      "penalty_below_threshold": -6.022744100895953,
      "sigma_cutoff": 10.891697986004928,
      "success": true,
      "log_likelihood": -21.98107018579126,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.48877405077012287,
      "weight_gap": -0.022987402053668088,
      "penalty_below_threshold": -40.0,
      "sigma_cutoff": 6.398860373621173,
      "success": true,
      "log_likelihood": -16.617404617353223,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.4568214945343022,
      "weight_gap": 0.012207629508994745,
      "penalty_below_threshold": -15.181612332548957,
      "sigma_cutoff": 8.051889926615637,
      "success": true,
      "log_likelihood": -17.207232679265147,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.45148751757351435,
      "weight_gap": 0.031343681887188994,
      "penalty_below_threshold": -16.998855196392118,
      "sigma_cutoff": 5.69606601978643,
      "success": true,
      "log_likelihood": -16.557931848558155,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.3330426154847137,
      "weight_gap": -0.005009405834614623,
      "penalty_below_threshold": -23.28240682123265,
      "sigma_cutoff": 13.19045946472332,
      "success": true,
      "log_likelihood": -21.331274174320196,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.2,
      "weight_gap": -0.16993176466610768,
      "penalty_below_threshold": 0.0,
      "sigma_cutoff": 4.506077738992153,
      "success": true,
      "log_likelihood": -8.460896738707042,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.3521245515172962,
      "weight_gap": -0.01684588528528889,
      "penalty_below_threshold": -5.327270248863889,
      "sigma_cutoff": 12.68671746114608,
      "success": true,
      "log_likelihood": -21.01894487184916,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.2,
      "weight_gap": -0.16993042056043425,
      "penalty_below_threshold": 0.0,
      "sigma_cutoff": 0.23053594758060056,
      "success": true,
      "log_likelihood": -8.460896738933108,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.5309075908966774,
      "weight_gap": 0.024742818482807946,
      "penalty_below_threshold": -35.09005032695602,
      "sigma_cutoff": 5.979995884523728,
      "success": true,
      "log_likelihood": -14.882126481434849,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.6054764690777859,
      "weight_gap": -0.13703231615631103,
      "penalty_below_threshold": -19.62416963604851,
      "sigma_cutoff": 20.0,
      "success": true,
      "log_likelihood": -8.06622946427138,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.9966436240655903,
      "weight_gap": 0.10102514446913294,
      "penalty_below_threshold": -0.9848458473954402,
      "sigma_cutoff": 13.353229195670647,
      "success": true,
      "log_likelihood": -8.904482948086908,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 1.3,
      "weight_gap": 0.05915554655870967,
      "penalty_below_threshold": 0.0,
      "sigma_cutoff": 8.706499691538264,
      "success": true,
      "log_likelihood": -18.461048290920218,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.3680941405885321,
      "weight_gap": -0.16992746878088827,
      "penalty_below_threshold": 0.0,
      "sigma_cutoff": 9.123814404143806,
      "success": true,
      "log_likelihood": -8.46089674116628,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.3565171874635433,
      "weight_gap": -0.16993169481738107,
      "penalty_below_threshold": 0.0,
      "sigma_cutoff": 15.523226785281418,
      "success": true,
      "log_likelihood": -8.460896738706603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.2,
      "weight_gap": -0.1699317053986337,
      "penalty_below_threshold": 0.0,
      "sigma_cutoff": 1.4966245524349442,
      "success": true,
      "log_likelihood": -8.460896738706584,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.2,
      "weight_gap": -0.16993170709405359,
      "penalty_below_threshold": 0.0,
      "sigma_cutoff": 10.710491867878932,
      "success": true,
      "log_likelihood": -8.460896738706582,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.2702907415404662,
      "weight_gap": -0.15191090947989916,
      "penalty_below_threshold": -26.5324462342044,
      "sigma_cutoff": 0.335628250735379,
      "success": true,
      "log_likelihood": -11.683919454168178,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.31792492420047935,
      "weight_gap": -0.0862110249862338,
      "penalty_below_threshold": -4.798845048032367,
      "sigma_cutoff": 8.772422334186194,
      "success": true,
      "log_likelihood": -16.442385978283895,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 1.08200317242996,
      "weight_gap": -0.16993165124936807,
      "penalty_below_threshold": 0.0,
      "sigma_cutoff": 12.892475871186264,
      "success": true,
      "log_likelihood": -8.460896738707007,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.5891634825176786,
      "weight_gap": -0.056044836461256006,
      "penalty_below_threshold": -3.9089098150894626,
      "sigma_cutoff": 20.0,
      "success": true,
      "log_likelihood": -18.421685190658078,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 1.073974131158563,
      "weight_gap": -0.03272613178648172,
      "penalty_below_threshold": 0.0,
      "sigma_cutoff": 19.14305693425792,
      "success": true,
      "log_likelihood": -22.341988163249894,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.7285436983203851,
      "weight_gap": 0.04675005537117057,
      "penalty_below_threshold": 0.0,
      "sigma_cutoff": 9.997192275462591,
      "success": true,
      "log_likelihood": -20.304900371970422,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.5597022835752836,
      "weight_gap": -0.03628869258263992,
      "penalty_below_threshold": -3.0855373904385863,
      "sigma_cutoff": 4.979578075712059,
      "success": true,
      "log_likelihood": -20.153584885949122,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.20008331900462936,
      "weight_gap": 0.03608347364345363,
      "penalty_below_threshold": -17.14611000335703,
      "sigma_cutoff": 12.342760974747554,
      "success": true,
      "log_likelihood": -20.978385547711802,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.4580753138900735,
      "weight_gap": -0.029840866717226387,
      "penalty_below_threshold": -3.4480943735770033,
      "sigma_cutoff": 19.373955666922505,
      "success": true,
      "log_likelihood": -19.963419423327466,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.4125507877722597,
      "weight_gap": -0.022224870884243974,
      "penalty_below_threshold": -20.695963003756603,
      "sigma_cutoff": 2.864510500603579,
      "success": true,
      "log_likelihood": -18.18104674947126,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.7109667632307047,
      "weight_gap": -0.024001225453644675,
      "penalty_below_threshold": -27.06906731240153,
      "sigma_cutoff": 1.8040037143337662,
      "success": true,
      "log_likelihood": -7.781210590862083,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.4708247996631864,
      "weight_gap": -0.12149121764765652,
      "penalty_below_threshold": -3.9561987891404824,
      "sigma_cutoff": 7.992506129885552,
      "success": true,
      "log_likelihood": -17.29451844021684,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.5720407706954344,
      "weight_gap": -0.06962731982873764,
      "penalty_below_threshold": -2.4195834519691948,
      "sigma_cutoff": 15.556240959397131,
      "success": true,
      "log_likelihood": -22.03079006147142,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.2,
      "weight_gap": -0.1699318265258823,
      "penalty_below_threshold": 0.0,
      "sigma_cutoff": 3.568595800008192,
      "success": true,
      "log_likelihood": -8.460896738708554,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.610700069928854,
      "weight_gap": 0.1369220836129133,
      "penalty_below_threshold": -10.019259432207162,
      "sigma_cutoff": 19.483217405709823,
      "success": true,
      "log_likelihood": -8.066228987221434,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.4045380589872446,
      "weight_gap": 0.00023027190944219805,
      "penalty_below_threshold": -18.17819295818439,
      "sigma_cutoff": 16.083377163185684,
      "success": true,
      "log_likelihood": -19.40807437288585,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.497711212258498,
      "weight_gap": -0.0026921406698709005,
      "penalty_below_threshold": -33.50578005174319,
      "sigma_cutoff": 4.667748644219961,
      "success": true,
      "log_likelihood": -15.244761863125552,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 1.0613366438677148,
      "weight_gap": -0.16993110834160038,
      "penalty_below_threshold": 0.0,
      "sigma_cutoff": 15.692805631547003,
      "success": true,
      "log_likelihood": -8.460896738755608,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.3988463061650815,
      "weight_gap": -0.056584159540270636,
      "penalty_below_threshold": -12.988100455174589,
      "sigma_cutoff": 3.104698949867733,
      "success": true,
      "log_likelihood": -16.326731224075772,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 1.0162538588156858,
      "weight_gap": 0.0049768271024331215,
      "penalty_below_threshold": 0.0,
      "sigma_cutoff": 17.27677706266513,
      "success": true,
      "log_likelihood": -24.88288791122959,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.20966323063966935,
      "weight_gap": 0.03272964412281977,
      "penalty_below_threshold": -32.78674033467957,
      "sigma_cutoff": 12.308622798820382,
      "success": true,
      "log_likelihood": -21.379581168028132,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.30254461967358276,
      "weight_gap": -0.01839042564175834,
      "penalty_below_threshold": -13.218298377724022,
      "sigma_cutoff": 18.576961041485053,
      "success": true,
      "log_likelihood": -21.54633610416881,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.5734232220138701,
      "weight_gap": -0.11772663185963549,
      "penalty_below_threshold": -2.5431393160407776,
      "sigma_cutoff": 17.546292285887787,
      "success": true,
      "log_likelihood": -16.623244692483816,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.35645967100181863,
      "weight_gap": -0.014958241692773707,
      "penalty_below_threshold": -36.1191579621808,
      "sigma_cutoff": 11.336281682680022,
      "success": true,
      "log_likelihood": -21.1045584751093,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.8853397499844947,
      "weight_gap": 0.054281155209164884,
      "penalty_below_threshold": -1.4794165398084915,
      "sigma_cutoff": 15.164034245720222,
      "success": true,
      "log_likelihood": -11.057443392094802,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.6144094644123194,
      "weight_gap": -0.1453934491747503,
      "penalty_below_threshold": -0.8360250221818533,
      "sigma_cutoff": 4.875001612034856,
      "success": true,
      "log_likelihood": -11.228259977880779,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.5316046676067703,
      "weight_gap": -0.03251157817925318,
      "penalty_below_threshold": -2.4500100008078785,
      "sigma_cutoff": 17.812883817532303,
      "success": true,
      "log_likelihood": -21.819266435459607,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.37236506489585436,
      "weight_gap": -0.016157791286324823,
      "penalty_below_threshold": -23.84006688343368,
      "sigma_cutoff": 2.7245417753362333,
      "success": true,
      "log_likelihood": -20.4652163985397,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.22137365619790675,
      "weight_gap": -0.02691401085643569,
      "penalty_below_threshold": -38.02716075829524,
      "sigma_cutoff": 11.539987855529874,
      "success": true,
      "log_likelihood": -22.02479433558454,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.5995245787369923,
      "weight_gap": -0.3533017369919512,
      "penalty_below_threshold": -16.74679209019721,
      "sigma_cutoff": 13.890614724290467,
      "success": true,
      "log_likelihood": -51.32117852988486,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.29226423062153406,
      "weight_gap": 0.03499699104334383,
      "penalty_below_threshold": -26.988729963631208,
      "sigma_cutoff": 3.1436976101964498,
      "success": true,
      "log_likelihood": -20.10520959853808,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.6880477450550149,
      "weight_gap": 0.03697983729799057,
      "penalty_below_threshold": -0.7964570419657481,
      "sigma_cutoff": 15.829228377265828,
      "success": true,
      "log_likelihood": -18.077673634394632,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.24600851271130578,
      "weight_gap": 0.005861197901538092,
      "penalty_below_threshold": 0.0,
      "sigma_cutoff": 17.265431051405866,
      "success": true,
      "log_likelihood": -24.85579410033112,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.40403651381816136,
      "weight_gap": -0.06425611769160444,
      "penalty_below_threshold": -4.130457107907541,
      "sigma_cutoff": 0.3261631015168959,
      "success": true,
      "log_likelihood": -21.88401635673276,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.5109751777161032,
      "weight_gap": 0.07958763867106677,
      "penalty_below_threshold": -35.70060637567761,
      "sigma_cutoff": 9.954807694615605,
      "success": true,
      "log_likelihood": -12.305510457638304,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.28428150709448874,
      "weight_gap": 0.00942422716138213,
      "penalty_below_threshold": -32.90490295878966,
      "sigma_cutoff": 10.531632191829194,
      "success": true,
      "log_likelihood": -22.67813915913728,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 1.242931239844557,
      "weight_gap": -0.0011680599635077683,
      "penalty_below_threshold": 0.0,
      "sigma_cutoff": 12.368986969385606,
      "success": true,
      "log_likelihood": -24.949405260649822,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.2,
      "weight_gap": 0.05245699239057726,
      "penalty_below_threshold": -38.77419809550216,
      "sigma_cutoff": 7.9237528160717225,
      "success": true,
      "log_likelihood": -18.857874034231976,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.696672040139957,
      "weight_gap": -0.03993891024009943,
      "penalty_below_threshold": -15.630150884870234,
      "sigma_cutoff": 19.36169948111566,
      "success": true,
      "log_likelihood": -9.523366907917026,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.6698292161196414,
      "weight_gap": -0.021712534444821182,
      "penalty_below_threshold": -14.366699376550441,
      "sigma_cutoff": 8.573447132349024,
      "success": true,
      "log_likelihood": -9.622962607771042,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.8481178594264501,
      "weight_gap": -0.09545293700825531,
      "penalty_below_threshold": 0.0,
      "sigma_cutoff": 18.259917718540468,
      "success": true,
      "log_likelihood": -13.840750462631151,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 1.3,
      "weight_gap": 3.371830357792836,
      "penalty_below_threshold": -31.539877178019953,
      "sigma_cutoff": 3.3411183543476852,
      "success": true,
      "log_likelihood": -69.07746832471416,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.3871479401561859,
      "weight_gap": -0.10609856157436975,
      "penalty_below_threshold": -5.745225546636217,
      "sigma_cutoff": 0.27372595222477736,
      "success": true,
      "log_likelihood": -18.84900285333154,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.6550816507318016,
      "weight_gap": -0.05470632822015193,
      "penalty_below_threshold": -2.162045895262507,
      "sigma_cutoff": 17.794204910903865,
      "success": true,
      "log_likelihood": -23.057423325251214,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.5957184560857338,
      "weight_gap": -0.04465831769759173,
      "penalty_below_threshold": -3.5407327795245984,
      "sigma_cutoff": 5.681837550092141,
      "success": true,
      "log_likelihood": -19.093989357794094,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 1.2210388614083159,
      "weight_gap": 0.09650732949888152,
      "penalty_below_threshold": -1.4859728457188353,
      "sigma_cutoff": 13.829529849441212,
      "success": true,
      "log_likelihood": -6.919084744384929,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.5586181100704308,
      "weight_gap": -0.04352758263335372,
      "penalty_below_threshold": -4.141638708403491,
      "sigma_cutoff": 2.712805629949246,
      "success": true,
      "log_likelihood": -17.758859233616494,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.2812852173723168,
      "weight_gap": 0.10904107521863227,
      "penalty_below_threshold": -11.94103212783546,
      "sigma_cutoff": 8.20056790481622,
      "success": true,
      "log_likelihood": -12.244744619826756,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.30401941468759786,
      "weight_gap": 0.008995349310231554,
      "penalty_below_threshold": -9.91736242217843,
      "sigma_cutoff": 5.675633098626811,
      "success": true,
      "log_likelihood": -22.02426541082805,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.40225425339145326,
      "weight_gap": -0.18642857268908544,
      "penalty_below_threshold": -6.866584724397532,
      "sigma_cutoff": 13.125091475105465,
      "success": true,
      "log_likelihood": -12.158792125161542,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.46983321553562374,
      "weight_gap": -0.08477529258809989,
      "penalty_below_threshold": -2.6099795564909565,
      "sigma_cutoff": 5.408479825258376,
      "success": true,
      "log_likelihood": -20.006579487077527,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.25447081094414153,
      "weight_gap": 0.008277092555708155,
      "penalty_below_threshold": -20.46859614558111,
      "sigma_cutoff": 9.534627966572309,
      "success": true,
      "log_likelihood": -22.72259561687776,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.411136329317447,
      "weight_gap": -0.10568586483168911,
      "penalty_below_threshold": -2.8370872102915565,
      "sigma_cutoff": 7.851918146926609,
      "success": true,
      "log_likelihood": -16.146242975818105,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.9360288644002055,
      "weight_gap": 3.410644885107038,
      "penalty_below_threshold": -10.785934140328205,
      "sigma_cutoff": 11.041796853498644,
      "success": true,
      "log_likelihood": -1.3862943579357307,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 1.3,
      "weight_gap": 0.05608645829648336,
      "penalty_below_threshold": -1.0960670251096276,
      "sigma_cutoff": 1.817414414106222,
      "success": true,
      "log_likelihood": -12.090504972136799,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.2,
      "weight_gap": 0.02063206092627056,
      "penalty_below_threshold": -10.301977311252521,
      "sigma_cutoff": 2.5923962485352865,
      "success": true,
      "log_likelihood": -22.659376052252014,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 1.0292314353041232,
      "weight_gap": -0.02176759871873578,
      "penalty_below_threshold": 0.0,
      "sigma_cutoff": 17.39886011868446,
      "success": true,
      "log_likelihood": -23.696794128879258,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.6994279512400395,
      "weight_gap": -0.08253425346170266,
      "penalty_below_threshold": -3.3122823511384327,
      "sigma_cutoff": 17.95323665869833,
      "success": true,
      "log_likelihood": -21.35309041490582,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.33878711721938803,
      "weight_gap": -0.037003270922174446,
      "penalty_below_threshold": -14.846887247005792,
      "sigma_cutoff": 5.3386293834373735,
      "success": true,
      "log_likelihood": -19.401144639530138,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 1.1898712273483105,
      "weight_gap": -0.06976838459289147,
      "penalty_below_threshold": 0.0,
      "sigma_cutoff": 18.432196426416812,
      "success": true,
      "log_likelihood": -16.961736253186196,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.31225871865934884,
      "weight_gap": 0.10654505661008049,
      "penalty_below_threshold": -11.855683530349557,
      "sigma_cutoff": 12.73915941053862,
      "success": true,
      "log_likelihood": -12.417877064535144,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.40945131273995583,
      "weight_gap": -0.0067065887272846235,
      "penalty_below_threshold": -0.2581676951552744,
      "sigma_cutoff": 16.630641884598973,
      "success": true,
      "log_likelihood": -24.892002090090223,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 1.3,
      "weight_gap": 0.09649633304579978,
      "penalty_below_threshold": -1.4863876501193767,
      "sigma_cutoff": 15.384120832437143,
      "success": true,
      "log_likelihood": -6.919057176531102,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.7849574092363251,
      "weight_gap": 0.008533811784788223,
      "penalty_below_threshold": 0.0,
      "sigma_cutoff": 0.12311393208356149,
      "success": true,
      "log_likelihood": -24.74787323669062,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.2,
      "weight_gap": -0.08725265657880137,
      "penalty_below_threshold": 0.0,
      "sigma_cutoff": 0.1,
      "success": true,
      "log_likelihood": -14.753074465201543,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 1.3,
      "weight_gap": 0.056389987977395646,
      "penalty_below_threshold": -1.277672980663177,
      "sigma_cutoff": 0.1,
      "success": true,
      "log_likelihood": -11.627937550416078,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.5102884274862668,
      "weight_gap": -0.06639137031208725,
      "penalty_below_threshold": -14.625585718481284,
      "sigma_cutoff": 14.14077336717475,
      "success": true,
      "log_likelihood": -13.033889999118339,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.4339509352185966,
      "weight_gap": -0.03220362089040121,
      "penalty_below_threshold": -1.9288004198385167,
      "sigma_cutoff": 9.824547862323007,
      "success": true,
      "log_likelihood": -23.28482863940231,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 1.20421075447618,
      "weight_gap": 5.0,
      "penalty_below_threshold": 0.0,
      "sigma_cutoff": 2.6998535591803243,
      "success": true,
      "log_likelihood": -24.412145402943107,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.2334704744665599,
      "weight_gap": -0.016027871998342946,
      "penalty_below_threshold": -11.463609360770057,
      "sigma_cutoff": 18.451811916124427,
      "success": true,
      "log_likelihood": -22.98622530416612,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.4963522012845118,
      "weight_gap": 0.056026561383732576,
      "penalty_below_threshold": -7.64145390173284,
      "sigma_cutoff": 0.52799042245874,
      "success": true,
      "log_likelihood": -12.76596932608375,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.2,
      "weight_gap": -0.10611015251334605,
      "penalty_below_threshold": -6.9694072598544805,
      "sigma_cutoff": 9.889622847012207,
      "success": true,
      "log_likelihood": -13.730228496960208,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.4871388297448568,
      "weight_gap": -0.048123251967552384,
      "penalty_below_threshold": -29.563211534667644,
      "sigma_cutoff": 4.45356625215859,
      "success": true,
      "log_likelihood": -15.646306463897055,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "accept_threshold": 0.5707500414903364,
      "weight_gap": -0.061508108836918936,
      "penalty_below_threshold": -2.1385799206540783,
      "sigma_cutoff": 11.145358913195764,
      "success": true,
      "log_likelihood": -22.576799306243597,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "accept_threshold": {
        "r": 0.36186763225766533,
        "p": 0.00021613145801502415
      },
      "weight_gap": {
        "r": 0.6022408778599504,
        "p": 3.397586769179052e-11
      },
      "penalty_below_threshold": {
        "r": 0.005429043822243011,
        "p": 0.957247275265395
      },
      "sigma_cutoff": {
        "r": -0.01540077517193757,
        "p": 0.8791234471903003
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 50.04379870076801,
  "bic_results": {
    "average_bic": 50.04379870076801,
    "individual_bics": [
      109.20862205804647,
      58.29621612540696,
      47.56888498853088,
      48.74854111235473,
      47.44993945094075,
      56.996624102464835,
      31.255869231238524,
      56.371965497522766,
      31.255869231690657,
      44.09832871669414,
      30.4665346823672,
      32.14304164999825,
      51.25617233566487,
      31.255869236157,
      31.255869231237646,
      31.255869231237607,
      31.255869231237604,
      37.701914662160796,
      47.218847710392225,
      31.255869231238453,
      51.1774461351406,
      59.018052080324225,
      54.94387649776529,
      54.64124552572268,
      56.29084684924804,
      54.26091460047937,
      50.696169252766964,
      29.896496935548605,
      48.92311263425812,
      58.39565587676728,
      31.255869231241547,
      30.466533728267308,
      53.150224499596135,
      44.82359948007554,
      31.255869231335655,
      46.98753820197598,
      64.09985157628363,
      57.0932380898807,
      57.426747962162054,
      47.58056513879207,
      56.54319270404304,
      36.448962538014044,
      36.790595709586,
      57.97260862474366,
      55.26450855090384,
      58.383664424993526,
      116.97643281359416,
      54.5444949509006,
      50.48942302261371,
      64.04566395448668,
      58.102108467289966,
      38.94509666910105,
      59.690354072099,
      64.23288627512409,
      52.04982382228839,
      33.380809569658496,
      33.58000096936652,
      42.01557667908674,
      152.48901240325276,
      52.03208146048752,
      60.448922404326865,
      52.52205446941262,
      28.172245242594297,
      49.85179422105743,
      38.82356499347795,
      58.38260657548054,
      38.65166000414752,
      54.3472347279795,
      59.77926698757996,
      46.626561705460645,
      17.1066644696959,
      38.515085698098034,
      59.652827858328465,
      61.72766401158296,
      57.04025658363608,
      53.13636503288471,
      48.25754826019683,
      39.16982988289473,
      64.11807993400488,
      28.172190106886646,
      63.82982222720568,
      43.84022468422752,
      37.58995085465659,
      40.40185575206112,
      60.90373303262906,
      63.15836655971066,
      60.306526362156674,
      39.86601440599194,
      41.79453274774485,
      45.626688681618546,
      59.48767436631164
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 4,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- accept_threshold: r = 0.362\n- weight_gap: r = 0.602\n- penalty_below_threshold: r = 0.005\n- sigma_cutoff: r = -0.015",
  "previous_models": [
    "Specification: S_des = 100 * token_self / (token_self + token_opp)\nX = splitperc_self - accept_threshold * S_des\nU = weight_gap * (splitperc_self - S_des) + penalty_below_threshold * (1 / (1 + exp(sigma_cutoff * X)))\nSummary: This model predicts responder acceptance as a hybrid of continuous and categorical processes: participants weigh the offered percentage against their deserved share (by contribution) with continuous sensitivity above a soft threshold, but incur a sharp penalty for offers falling below a learnable \u201cminimum acceptable\u201d threshold (expressed as a fraction of deserved share). The categorical penalty is implemented with a smooth sigmoid transition, allowing for both regime change and gradation. Parameterization ensures separable and interpretable roles for threshold position, penalty strength, continuous fairness sensitivity, and threshold sharpness, supporting improved identifiability and accurate recovery of step-like rejection patterns and continuous degrees of fairness aversion.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 50.04379870076801\nOverall Accuracy: 0.6926\n\nParameter Recovery:\n- accept_threshold: r = 0.362\n- weight_gap: r = 0.602\n- penalty_below_threshold: r = 0.005\n- sigma_cutoff: r = -0.015"
  ]
}