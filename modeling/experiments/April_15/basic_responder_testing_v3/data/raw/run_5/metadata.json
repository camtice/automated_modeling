{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nBased on the previous run\u2019s results\u2014specifically, poor parameter recovery for the \u201cpenalty_below_threshold\u201d and \u201csigma_cutoff\u201d parameters, and only moderate accuracy\u2014there\u2019s clear evidence the threshold-based, hybrid \u201cstep+continuous\u201d model struggled: it likely suffered from parameter redundancy/collinearity, and its regime-change mechanism was not sufficiently recoverable. This suggests that even though regime shifts are theoretically appealing, their implementation produced parameters whose roles overlapped or failed to manifest separable, robust effects in the observed data.\n\nConversely, the best models to date have achieved superior parameter recovery and fit with concise, monotonic, reference-dependent forms (especially the two-parameter log-ratio model), likely because each parameter exercised clear, unique control over observable outputs.\n\nInstructions for the next round should:\n\n- Push for solutions that preserve or improve on the psychological interpretability and separability of the log-ratio model, but search for *robust and distinctive* sources of asymmetry, regime change, or decision \u201ccliffs\u201d *without* introducing multiple highly-overlapping parameters.\n- Caution strongly against multi-parameter threshold mechanisms unless the \u201cregimes\u201d can be made truly independent and recoverable (e.g., ensure an explicit sharp threshold parameter whose impact cannot be perfectly offset by others).\n- Encourage alternatives such as: \n    - Simple, parameter-sparse asymmetric penalty functions (e.g., loss-aversion only for disadvantage; capped or saturating losses; hinge, ReLU, or one-sided power transforms), especially forms that only penalize \u201cbelow norm.\u201d\n    - Single-parameter soft-min or capped loss functions that still permit discontinuity but are easier to recover.\n    - Hybrid models that \u201cgate\u201d continuous utility by a single binary or probabilistic regime parameter, but restrict the number of parameters controlling this process to *one*.\n    - One-sided nonlinearities (e.g., exponential or squared penalty for below-fairness; zero above).\n- Suggest exploring direct interaction terms or composite predictors reflecting *how far* and *in what direction* the offer deviates from the fair norm, and making a clear psychological justification for each mathematical innovation.\n- Recommend revisiting and potentially slightly extending the best \u201clog-ratio\u201d model (for example, log relative to deserved with an added asymmetric penalty only for negative deviation), or a simple loss-averse/kinked model, but avoiding overly complex regime-changing models unless parameter identifiability is unambiguous.\n- Instruct the modeler to simulate plausible offer distributions and explicitly walk through how each added parameter would translate to *distinct* observable effects.\n- Urge that all parameters\u2014especially threshold or penalty terms\u2014be structured so that their influence is not washed out or redundantly absorbed by other parameters, to promote high recovery.\n\nEncourage:\n- Experimentation with \u201csingle-switch\u201d models (one clear regime breakpoint), piecewise-linear with a soft \u201cmax\u201d/\u201cmin\u201d function, or non-linearities only below fairness norm.\n- Very concise mathematical forms: every parameter should have one clearly interpretable, dimensionally distinct job, and must yield distinct effects on predictions.\n\nFinally, stress that models should remain compatible with the dataset\u2019s structure and, as always, maximize interpretability, parameter recovery, and predictive strength.\n</think>\n\n---\n\n**Instructions for Run 5 Computational Modeling**\n\nBefore building your formal model, carefully follow these steps\u2014prioritizing creative, robust solutions that maximize parameter recovery, interpretability, and prediction accuracy:\n\n1. **Map Psychological Mechanisms to Distinct Model Components**  \n   - List the cognitive drivers at play (e.g., self-interest, reference to fairness norm, aversion to disadvantage, categorical rejection, asymmetric thresholds).  \n   - Critically evaluate whether each process truly requires a dedicated parameter, or if it can be captured by a simpler, more recoverable structure.\n\n2. **Strive for Minimal, Distinct Parameterization**  \n   - Strongly prefer models in which *each* learnable parameter controls *only one* conceptually unique, non-overlapping effect (e.g., only the steepness of a penalty, only the position of a threshold).  \n   - Avoid models where two or more parameters influence the same region of prediction space; parameter redundancy kills recovery.\n\n3. **Innovate with Asymmetry and Discontinuous Sensitivity\u2014But with Simplicity**  \n   - Try models that enforce *asymmetric* or *piecewise* effects (e.g., only penalizing under-allocation, or using a \u201ckink\u201d at fairness), but restrict this to *one* extra mechanism, controlled by a single parameter.\n   - Possible structures:\n     - Add a penalty term that activates only if the offer falls below the fairness norm (e.g., via a max(0, deserved \u2013 offer) or indicator).\n     - Use a \u201chinge,\u201d ReLU, or squared-excess penalty, with a single parameter scaling its strength.\n     - Consider combining log-ratio utility with a single, saturating penalty term or a capped function for under-offering.\n     - Allow for *one* threshold or regime switch at a psychologically justified point\u2014do not combine slope, position, and penalty parameters unless you can provide mathematical proof they can be separately recovered.\n\n4. **Explicitly Assess Each Parameter\u2019s Recoverability**  \n   - For every learnable parameter, clearly justify why and how its effects will show up as *distinctive* changes in simulated or fitted data.\n   - Demonstrate\u2014before formalizing your model\u2014how your chosen form guards against parameter collinearity and indeterminacy.\n\n5. **Functional Form and Composite Predictors**  \n   - Consider creative, psychologically motivated composite predictors (e.g., log or ratio of offer/deserved, or gap from norm), but keep the number of \u201ccontrol knobs\u201d minimal and separable.\n   - Test, in your reasoning, that for any regime- or threshold-like effect you include, no other parameter can trivially mimic its influence.\n\n6. **Formatting and Output**  \n   - Present the mathematical model in <MODEL>\u2026</MODEL> tags;  \n   - Use <VARIABLES>\u2026</VARIABLES> for JSON, fully defining each parameter and computed variable;  \n   - State the <target_variable> as required;  \n   - Give a concise, technical <SUMMARY> describing the formal structure, innovations, and separability of your model.\n\n7. **General Advice**  \n   - Be bold in functional form, but ruthless in parameter economy and identifiability.\n   - Consider revisiting or slightly extending strong prior models (e.g., log-ratio utility with one-sided penalty), rather than adding threshold/penalty parameters unless strictly necessary.\n   - Ensure models are directly and unambiguously computable from the provided dataset.\n\n**Special Nudge Toward Improvement:**  \n- You are *required* to introduce either: (a) an asymmetric or one-sided penalty mechanism for under-offered share, or (b) a single learnable threshold mechanism with *only one* parameter tightly controlling regime change, *not* overlapping with slope or penalty parameters.\n- If you employ log-ratio/continuous forms, you must combine these with a single, independently acting mechanism for regime change or nonlinearity, and explain its benefit.\n- For any non-standard structure, clearly simulate or walk through its distinctive behavioral signatures.\n\nFoster precision, minimality, and distinctiveness in your design\u2014prioritize steps you can mathematically show will increase both prediction and parameter recovery over prior models.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nBased on the previous run\u2019s results\u2014specifically, poor parameter recovery for the \u201cpenalty_below_threshold\u201d and \u201csigma_cutoff\u201d parameters, and only moderate accuracy\u2014there\u2019s clear evidence the threshold-based, hybrid \u201cstep+continuous\u201d model struggled: it likely suffered from parameter redundancy/collinearity, and its regime-change mechanism was not sufficiently recoverable. This suggests that even though regime shifts are theoretically appealing, their implementation produced parameters whose roles overlapped or failed to manifest separable, robust effects in the observed data.\n\nConversely, the best models to date have achieved superior parameter recovery and fit with concise, monotonic, reference-dependent forms (especially the two-parameter log-ratio model), likely because each parameter exercised clear, unique control over observable outputs.\n\nInstructions for the next round should:\n\n- Push for solutions that preserve or improve on the psychological interpretability and separability of the log-ratio model, but search for *robust and distinctive* sources of asymmetry, regime change, or decision \u201ccliffs\u201d *without* introducing multiple highly-overlapping parameters.\n- Caution strongly against multi-parameter threshold mechanisms unless the \u201cregimes\u201d can be made truly independent and recoverable (e.g., ensure an explicit sharp threshold parameter whose impact cannot be perfectly offset by others).\n- Encourage alternatives such as: \n    - Simple, parameter-sparse asymmetric penalty functions (e.g., loss-aversion only for disadvantage; capped or saturating losses; hinge, ReLU, or one-sided power transforms), especially forms that only penalize \u201cbelow norm.\u201d\n    - Single-parameter soft-min or capped loss functions that still permit discontinuity but are easier to recover.\n    - Hybrid models that \u201cgate\u201d continuous utility by a single binary or probabilistic regime parameter, but restrict the number of parameters controlling this process to *one*.\n    - One-sided nonlinearities (e.g., exponential or squared penalty for below-fairness; zero above).\n- Suggest exploring direct interaction terms or composite predictors reflecting *how far* and *in what direction* the offer deviates from the fair norm, and making a clear psychological justification for each mathematical innovation.\n- Recommend revisiting and potentially slightly extending the best \u201clog-ratio\u201d model (for example, log relative to deserved with an added asymmetric penalty only for negative deviation), or a simple loss-averse/kinked model, but avoiding overly complex regime-changing models unless parameter identifiability is unambiguous.\n- Instruct the modeler to simulate plausible offer distributions and explicitly walk through how each added parameter would translate to *distinct* observable effects.\n- Urge that all parameters\u2014especially threshold or penalty terms\u2014be structured so that their influence is not washed out or redundantly absorbed by other parameters, to promote high recovery.\n\nEncourage:\n- Experimentation with \u201csingle-switch\u201d models (one clear regime breakpoint), piecewise-linear with a soft \u201cmax\u201d/\u201cmin\u201d function, or non-linearities only below fairness norm.\n- Very concise mathematical forms: every parameter should have one clearly interpretable, dimensionally distinct job, and must yield distinct effects on predictions.\n\nFinally, stress that models should remain compatible with the dataset\u2019s structure and, as always, maximize interpretability, parameter recovery, and predictive strength.\n</think>\n\n---\n\n**Instructions for Run 5 Computational Modeling**\n\nBefore building your formal model, carefully follow these steps\u2014prioritizing creative, robust solutions that maximize parameter recovery, interpretability, and prediction accuracy:\n\n1. **Map Psychological Mechanisms to Distinct Model Components**  \n   - List the cognitive drivers at play (e.g., self-interest, reference to fairness norm, aversion to disadvantage, categorical rejection, asymmetric thresholds).  \n   - Critically evaluate whether each process truly requires a dedicated parameter, or if it can be captured by a simpler, more recoverable structure.\n\n2. **Strive for Minimal, Distinct Parameterization**  \n   - Strongly prefer models in which *each* learnable parameter controls *only one* conceptually unique, non-overlapping effect (e.g., only the steepness of a penalty, only the position of a threshold).  \n   - Avoid models where two or more parameters influence the same region of prediction space; parameter redundancy kills recovery.\n\n3. **Innovate with Asymmetry and Discontinuous Sensitivity\u2014But with Simplicity**  \n   - Try models that enforce *asymmetric* or *piecewise* effects (e.g., only penalizing under-allocation, or using a \u201ckink\u201d at fairness), but restrict this to *one* extra mechanism, controlled by a single parameter.\n   - Possible structures:\n     - Add a penalty term that activates only if the offer falls below the fairness norm (e.g., via a max(0, deserved \u2013 offer) or indicator).\n     - Use a \u201chinge,\u201d ReLU, or squared-excess penalty, with a single parameter scaling its strength.\n     - Consider combining log-ratio utility with a single, saturating penalty term or a capped function for under-offering.\n     - Allow for *one* threshold or regime switch at a psychologically justified point\u2014do not combine slope, position, and penalty parameters unless you can provide mathematical proof they can be separately recovered.\n\n4. **Explicitly Assess Each Parameter\u2019s Recoverability**  \n   - For every learnable parameter, clearly justify why and how its effects will show up as *distinctive* changes in simulated or fitted data.\n   - Demonstrate\u2014before formalizing your model\u2014how your chosen form guards against parameter collinearity and indeterminacy.\n\n5. **Functional Form and Composite Predictors**  \n   - Consider creative, psychologically motivated composite predictors (e.g., log or ratio of offer/deserved, or gap from norm), but keep the number of \u201ccontrol knobs\u201d minimal and separable.\n   - Test, in your reasoning, that for any regime- or threshold-like effect you include, no other parameter can trivially mimic its influence.\n\n6. **Formatting and Output**  \n   - Present the mathematical model in <MODEL>\u2026</MODEL> tags;  \n   - Use <VARIABLES>\u2026</VARIABLES> for JSON, fully defining each parameter and computed variable;  \n   - State the <target_variable> as required;  \n   - Give a concise, technical <SUMMARY> describing the formal structure, innovations, and separability of your model.\n\n7. **General Advice**  \n   - Be bold in functional form, but ruthless in parameter economy and identifiability.\n   - Consider revisiting or slightly extending strong prior models (e.g., log-ratio utility with one-sided penalty), rather than adding threshold/penalty parameters unless strictly necessary.\n   - Ensure models are directly and unambiguously computable from the provided dataset.\n\n**Special Nudge Toward Improvement:**  \n- You are *required* to introduce either: (a) an asymmetric or one-sided penalty mechanism for under-offered share, or (b) a single learnable threshold mechanism with *only one* parameter tightly controlling regime change, *not* overlapping with slope or penalty parameters.\n- If you employ log-ratio/continuous forms, you must combine these with a single, independently acting mechanism for regime change or nonlinearity, and explain its benefit.\n- For any non-standard structure, clearly simulate or walk through its distinctive behavioral signatures.\n\nFoster precision, minimality, and distinctiveness in your design\u2014prioritize steps you can mathematically show will increase both prediction and parameter recovery over prior models.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let's follow the step-by-step guidance specified and explicitly build a model that maximizes recoverability, separability, and predictive power while introducing **exactly one asymmetric or threshold-driven penalty mechanism**.\n\n---\n\n### **Step 1: Map Key Psychological Mechanisms**\n- **Self-interest**: Participants want more for themselves (split_self).\n- **Reference to fairness norm**: There\u2019s a standard (proportional share, i.e., deserved amount based on tokens found; \u201cdeserved\u201d = combined_earning \u00d7 (token_self / (token_self + token_opp))).\n- **Inequity aversion / disadvantageous payoff**: Dislike for offers below deserved (stronger effect when under-offered).\n- **Asymmetry**: Stronger sensitivity/rejection to offers **below** deserved versus above.\n- **No explicit multiple regime/threshold: Only a *single* additional mechanism allowed.**\n\n### **Step 2: Minimal, Distinct Parameterization**\n- Needs *one* term for proportional offer alignment (log-ratio).\n- Needs *one* asymmetric penalty for being under the deserved amount (not above).\n- No overlapping parameters\u2014each has a *unique* and non-redundant job.\n\n### **Step 3: Innovate with Asymmetric, One-Sided Penalty**\n- I will construct a model with two terms:\n    1. **Log-ratio utility**: captures normalization to deserved share.\n    2. **One-sided \u201chinge\u201d penalty**: activates only if split_self < deserved, scaled by a single penalty parameter.\n- No extra thresholds: penalty is strictly one-sided, with a single scaling parameter\u2014nonlinear only for under-offers.\n\n### **Step 4: Parameter Recoverability**\n- **Log-ratio slope**: Modifies overall sensitivity to fairness, manifesting as global change in acceptance gradient.\n- **Penalty strength**: Controls *stepwise* drop-off in acceptance below deserved, without affecting utility for above-norm offers.\n- Their effects are not mutually substitutable or collinear.\n\n### **Step 5: Composite Predictors and Mathematical Form**\n- Compute \u201cdeserved\u201d for each trial from the participant\u2019s and opponent\u2019s tokens and combined_earning.\n- **Utility** =  \n  slope * log(split_self / deserved)  \n  \u2212 penalty * max(0, deserved \u2212 split_self)\n- The \u201cmax(0, \u2026)\u201d term is zero when the offer is >= deserved; only penalizes below-deserved states.\n- No extra learning knobs; parameters modify either global slope, or steepness of the penalty for under-offering.\n\n---\n\n## **Model Specification**\n\n<MODEL>\nU = slope * log(split_self / deserved) - penalty * max(0, deserved - split_self)\n</MODEL>\n\n---\n\n## **Variable Descriptions**\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Latent utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"slope\": {\n      \"description\": \"Sensitivity of utility to proportional deviation from the deserved amount (log-ratio slope)\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"penalty\": {\n      \"description\": \"Strength of asymmetric penalty for under-offers (only when the offered amount is below deserved); zero penalty above deserved\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 50.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.0,\n          \"high\": 50.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share of the total earning allocated to the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"deserved\": {\n      \"description\": \"Deserved share for the participant, computed as their proportional contribution: deserved = combined_earning \u00d7 (token_self / (token_self + token_opp))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA two-parameter, reference-dependent utility model predicting offer acceptance. Utility combines a log-ratio term quantifying proportional deviation from the deserved share, and a single-sided, linear penalty applied exclusively when offers fall below the participant\u2019s deserved amount. Each parameter modulates a distinct behavioral signature: overall fairness sensitivity (slope) and steepness of punishment for under-offers (penalty). The model prevents collinearity by activating the penalty only in disadvantageous cases, thus maximizing psychological interpretability and parameter recoverability while remaining parsimonious.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['slope', 'penalty']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = slope * log(split_self / deserved) - penalty * max(0, deserved - split_self)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Latent utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"slope\": {\n      \"description\": \"Sensitivity of utility to proportional deviation from the deserved amount (log-ratio slope)\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"penalty\": {\n      \"description\": \"Strength of asymmetric penalty for under-offers (only when the offered amount is below deserved); zero penalty above deserved\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 50.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.0,\n          \"high\": 50.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share of the total earning allocated to the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"deserved\": {\n      \"description\": \"Deserved share for the participant, computed as their proportional contribution: deserved = combined_earning \\u00d7 (token_self / (token_self + token_opp))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, slope=1.0, penalty=0.0):\n    \"\"\"\n    Simulates the ultimatum game model and returns a list of model predictions.\n\n    Args:\n        trial_data (list of dict): A list of dictionaries, where each dictionary\n            represents a trial and contains the following keys:\n            - split_self (float): The proposed share of the total earning allocated\n              to the participant.\n            - token_self (int): The number of tokens the participant has.\n            - token_opp (int): The number of tokens the opponent has.\n            - combined_earning (int): The total combined earning.\n        slope (float): Sensitivity of utility to proportional deviation from the\n            deserved amount (log-ratio slope).\n        penalty (float): Strength of asymmetric penalty for under-offers.\n\n    Returns:\n        list of float: A list of model predictions, where each element is the\n        utility calculated for the corresponding trial.\n    \"\"\"\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\")\n        token_self = trial.get(\"token_self\")\n        token_opp = trial.get(\"token_opp\")\n        combined_earning = trial.get(\"combined_earning\")\n\n        # Calculate deserved share\n        deserved = combined_earning * (token_self / (token_self + token_opp))\n\n        # Calculate utility\n        utility = slope * math.log(split_self / deserved) - penalty * max(0, deserved - split_self)\n        model_predictions.append(utility)\n\n    return model_predictions\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1744714588.3464682
    }
  ],
  "learnable_parameters": {
    "slope": {
      "description": "Sensitivity of utility to proportional deviation from the deserved amount (log-ratio slope)",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "penalty": {
      "description": "Strength of asymmetric penalty for under-offers (only when the offered amount is below deserved); zero penalty above deserved",
      "range": {
        "min": 0.0,
        "max": 50.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.0,
          "high": 50.0
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = slope * log(split_self / deserved) - penalty * max(0, deserved - split_self)",
  "variable_descriptions": {
    "U": {
      "description": "Latent utility of accepting the proposed offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "slope": {
      "description": "Sensitivity of utility to proportional deviation from the deserved amount (log-ratio slope)",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "penalty": {
      "description": "Strength of asymmetric penalty for under-offers (only when the offered amount is below deserved); zero penalty above deserved",
      "range": {
        "min": 0.0,
        "max": 50.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.0,
          "high": 50.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share of the total earning allocated to the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "deserved": {
      "description": "Deserved share for the participant, computed as their proportional contribution: deserved = combined_earning \u00d7 (token_self / (token_self + token_opp))",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A two-parameter, reference-dependent utility model predicting offer acceptance. Utility combines a log-ratio term quantifying proportional deviation from the deserved share, and a single-sided, linear penalty applied exclusively when offers fall below the participant\u2019s deserved amount. Each parameter modulates a distinct behavioral signature: overall fairness sensitivity (slope) and steepness of punishment for under-offers (penalty). The model prevents collinearity by activating the penalty only in disadvantageous cases, thus maximizing psychological interpretability and parameter recoverability while remaining parsimonious.",
  "target_variable": "accept",
  "full_reasoning": "Let's follow the step-by-step guidance specified and explicitly build a model that maximizes recoverability, separability, and predictive power while introducing **exactly one asymmetric or threshold-driven penalty mechanism**.\n\n---\n\n### **Step 1: Map Key Psychological Mechanisms**\n- **Self-interest**: Participants want more for themselves (split_self).\n- **Reference to fairness norm**: There\u2019s a standard (proportional share, i.e., deserved amount based on tokens found; \u201cdeserved\u201d = combined_earning \u00d7 (token_self / (token_self + token_opp))).\n- **Inequity aversion / disadvantageous payoff**: Dislike for offers below deserved (stronger effect when under-offered).\n- **Asymmetry**: Stronger sensitivity/rejection to offers **below** deserved versus above.\n- **No explicit multiple regime/threshold: Only a *single* additional mechanism allowed.**\n\n### **Step 2: Minimal, Distinct Parameterization**\n- Needs *one* term for proportional offer alignment (log-ratio).\n- Needs *one* asymmetric penalty for being under the deserved amount (not above).\n- No overlapping parameters\u2014each has a *unique* and non-redundant job.\n\n### **Step 3: Innovate with Asymmetric, One-Sided Penalty**\n- I will construct a model with two terms:\n    1. **Log-ratio utility**: captures normalization to deserved share.\n    2. **One-sided \u201chinge\u201d penalty**: activates only if split_self < deserved, scaled by a single penalty parameter.\n- No extra thresholds: penalty is strictly one-sided, with a single scaling parameter\u2014nonlinear only for under-offers.\n\n### **Step 4: Parameter Recoverability**\n- **Log-ratio slope**: Modifies overall sensitivity to fairness, manifesting as global change in acceptance gradient.\n- **Penalty strength**: Controls *stepwise* drop-off in acceptance below deserved, without affecting utility for above-norm offers.\n- Their effects are not mutually substitutable or collinear.\n\n### **Step 5: Composite Predictors and Mathematical Form**\n- Compute \u201cdeserved\u201d for each trial from the participant\u2019s and opponent\u2019s tokens and combined_earning.\n- **Utility** =  \n  slope * log(split_self / deserved)  \n  \u2212 penalty * max(0, deserved \u2212 split_self)\n- The \u201cmax(0, \u2026)\u201d term is zero when the offer is >= deserved; only penalizes below-deserved states.\n- No extra learning knobs; parameters modify either global slope, or steepness of the penalty for under-offering.\n\n---\n\n## **Model Specification**\n\n<MODEL>\nU = slope * log(split_self / deserved) - penalty * max(0, deserved - split_self)\n</MODEL>\n\n---\n\n## **Variable Descriptions**\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Latent utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"slope\": {\n      \"description\": \"Sensitivity of utility to proportional deviation from the deserved amount (log-ratio slope)\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"penalty\": {\n      \"description\": \"Strength of asymmetric penalty for under-offers (only when the offered amount is below deserved); zero penalty above deserved\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 50.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.0,\n          \"high\": 50.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share of the total earning allocated to the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"deserved\": {\n      \"description\": \"Deserved share for the participant, computed as their proportional contribution: deserved = combined_earning \u00d7 (token_self / (token_self + token_opp))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA two-parameter, reference-dependent utility model predicting offer acceptance. Utility combines a log-ratio term quantifying proportional deviation from the deserved share, and a single-sided, linear penalty applied exclusively when offers fall below the participant\u2019s deserved amount. Each parameter modulates a distinct behavioral signature: overall fairness sensitivity (slope) and steepness of punishment for under-offers (penalty). The model prevents collinearity by activating the penalty only in disadvantageous cases, thus maximizing psychological interpretability and parameter recoverability while remaining parsimonious.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = slope * log(split_self / deserved) - penalty * max(0, deserved - split_self)\nSummary: A two-parameter, reference-dependent utility model predicting offer acceptance. Utility combines a log-ratio term quantifying proportional deviation from the deserved share, and a single-sided, linear penalty applied exclusively when offers fall below the participant\u2019s deserved amount. Each parameter modulates a distinct behavioral signature: overall fairness sensitivity (slope) and steepness of punishment for under-offers (penalty). The model prevents collinearity by activating the penalty only in disadvantageous cases, thus maximizing psychological interpretability and parameter recoverability while remaining parsimonious.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, slope=1.0, penalty=0.0):\n    \"\"\"\n    Simulates the ultimatum game model and returns a list of model predictions.\n\n    Args:\n        trial_data (list of dict): A list of dictionaries, where each dictionary\n            represents a trial and contains the following keys:\n            - split_self (float): The proposed share of the total earning allocated\n              to the participant.\n            - token_self (int): The number of tokens the participant has.\n            - token_opp (int): The number of tokens the opponent has.\n            - combined_earning (int): The total combined earning.\n        slope (float): Sensitivity of utility to proportional deviation from the\n            deserved amount (log-ratio slope).\n        penalty (float): Strength of asymmetric penalty for under-offers.\n\n    Returns:\n        list of float: A list of model predictions, where each element is the\n        utility calculated for the corresponding trial.\n    \"\"\"\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\")\n        token_self = trial.get(\"token_self\")\n        token_opp = trial.get(\"token_opp\")\n        combined_earning = trial.get(\"combined_earning\")\n\n        # Calculate deserved share\n        deserved = combined_earning * (token_self / (token_self + token_opp))\n\n        # Calculate utility\n        utility = slope * math.log(split_self / deserved) - penalty * max(0, deserved - split_self)\n        model_predictions.append(utility)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6462148962148963,
  "fitting_results": [
    {
      "slope": 4.945091124806905,
      "penalty": 0.703743618617519,
      "success": true,
      "log_likelihood": -7.340959009374931,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 1.3174255787379863,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -21.742576793163504,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 1.4456908481372297,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -21.24953783118484,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 2.005291161595918,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -19.095301610159506,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 1.1213796451242604,
      "penalty": 0.2295697343775574,
      "success": true,
      "log_likelihood": -18.679935738929245,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 0.6085532015528056,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -24.11791282867104,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -6.784883520294368,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -8.321334631423987,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 0.4758563565477082,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -24.429563740920415,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -6.784875061839906,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -8.32133463143609,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 2.609559481390019,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -16.933802526083717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 2.35411623750499,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -17.817827600467528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 5.495114675609637,
      "penalty": 0.2876153129036039,
      "success": true,
      "log_likelihood": -8.396197063456286,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 2.2719693257295566,
      "penalty": 0.03083864993640029,
      "success": true,
      "log_likelihood": -17.632810112526403,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -6.784885872979514,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -8.321334631422761,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -6.7848916324776924,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -8.32133463142368,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -6.784883881786071,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -8.32133463142374,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -6.784882710642127,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -8.321334631424628,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -0.686332546838847,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -23.908571098699984,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -1.069352446869477,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -22.664791144041953,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -6.78487175393434,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -8.321334631444097,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 1.075494619016575,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -22.642722131983007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -0.7983042243840539,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -23.577503156839533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 2.075622546287291,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -18.831959146496757,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 1.0708685033160894,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -22.659377570599126,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -0.3156092677606886,
      "penalty": 0.42849080692602803,
      "success": true,
      "log_likelihood": -20.86196705099475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 0.9246927469579987,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -23.168562610707333,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 1.1499609131789403,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -22.371546239416695,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 5.127241529877234,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -10.669796062914342,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -1.3525830299738923,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -21.608123974527746,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -0.46022032848645755,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -24.462137517417165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -6.78487488255071,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -8.321334631436478,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 4.945060302045248,
      "penalty": 0.7037527927040376,
      "success": true,
      "log_likelihood": -7.340959009395681,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 1.4229643567042238,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -21.33733516198271,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 2.3220919100085173,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -17.93190152940591,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -6.784878298972668,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -8.321334631430037,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 0.49968099589721554,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -24.378173928478432,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 0.3858230505470507,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -24.604170291118418,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 1.2394556130927308,
      "penalty": 0.03753521485079424,
      "success": true,
      "log_likelihood": -21.435754268332992,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 0.24267184097284147,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -24.81287662043226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -1.9045623666624876,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -19.47672194662268,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 0.08182758690239574,
      "penalty": 0.10628347405734843,
      "success": true,
      "log_likelihood": -24.307265807106393,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 4.806391172010894,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -11.25432847111105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -4.826149619674825,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -11.216857110740012,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 0.945974608067026,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -23.096579996650725,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 0.7396798438334569,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -23.754905441743993,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -0.17501062411724636,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -24.87987720759445,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 1.1499584894127899,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -22.37154623938182,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 1.6802213874044092,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -20.339796648022944,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -1.2083620300002953,
      "penalty": 0.8390682344213232,
      "success": true,
      "log_likelihood": -17.43136237737874,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 0.21345136202848547,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -24.844387082080896,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -0.106411771383454,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -24.926055592714217,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 4.51065439747991,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -11.839698803675109,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 0.9538912570775925,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -23.069602481336187,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 0.18534089819665756,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -24.871011402894027,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 0.5620645992842974,
      "penalty": 0.24722650567325674,
      "success": true,
      "log_likelihood": -20.557521453819156,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 3.784192567387511,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -13.493070957225102,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 4.059816217972224,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -12.827288810245468,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -3.5318726561859606,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -14.147332206763561,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 5.447994167949261,
      "penalty": 0.18156325721321284,
      "success": true,
      "log_likelihood": -8.990928473424153,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -0.6982919405658048,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -23.8747934351977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 0.28754010177777445,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -24.757020115063163,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 1.2500245450074783,
      "penalty": 0.029741289940122668,
      "success": true,
      "log_likelihood": -21.521805204477467,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 4.94511413288291,
      "penalty": 0.7037147241493465,
      "success": true,
      "log_likelihood": -7.340959009909761,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 1.1637993723667288,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -22.32047297546567,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 4.954476662511685,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -10.978289642536396,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 1.0587296017114478,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -22.70284433712469,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -1.8467427080865182,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -19.697621374393265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -1.007655204029734,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -22.883588792118466,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 0.911321561742124,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -23.213351891001412,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -2.3374564467375896,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -17.87708560913476,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 10.0,
      "penalty": 48.49244413365419,
      "success": true,
      "log_likelihood": -1.5532046541065188,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 4.4527467587316965,
      "penalty": 0.02695189817782245,
      "success": true,
      "log_likelihood": -11.711158213702388,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 0.9720123128495288,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -23.007456086036772,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -0.5347625297869406,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -24.298762176484615,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 0.5125544672341894,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -24.34954293131641,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 0.21443061195047713,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -24.843393897202454,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -2.6601857321198974,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -16.764255374090666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -10.0,
      "penalty": 49.7636226249211,
      "success": true,
      "log_likelihood": -24.579057132414263,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -0.1681214494179147,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -24.885513789970464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 2.4099772147527365,
      "penalty": 48.64778750295983,
      "success": true,
      "log_likelihood": -25.668385256181534,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 0.46842259592744134,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -24.445164016351992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -3.1655675497725126,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -15.177822702932083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -1.4252971720816217,
      "penalty": 1.7279775329174885,
      "success": true,
      "log_likelihood": -9.967417910777364,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 1.4995825780226288,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -21.04084547557955,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -0.11329514821215976,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -24.9224258447809,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 9.656125727944099,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -5.924581022138077,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -0.06259174568344059,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -24.9438597152905,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 2.190766996119194,
      "penalty": 0.3485682872667729,
      "success": true,
      "log_likelihood": -13.638008731587423,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -2.295658274512986,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -18.026586960600838,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": 1.4546668038095787,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -21.21481323153224,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "slope": -0.48392099176022924,
      "penalty": 0.0,
      "success": true,
      "log_likelihood": -24.4124015250493,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "slope": {
        "r": 0.7320798079352976,
        "p": 5.001157884284368e-18
      },
      "penalty": {
        "r": 0.40166939037590965,
        "p": 3.442417068795906e-05
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 43.91067068123458,
  "bic_results": {
    "average_bic": 43.91067068123458,
    "individual_bics": [
      21.84895589566208,
      50.65219146323923,
      49.666113539281895,
      45.35764109723123,
      44.52690935477071,
      55.4028635342543,
      23.809707139760192,
      56.02616535875305,
      23.8097071397844,
      41.03464292907965,
      42.80269307784727,
      23.959432003824794,
      42.432658101965025,
      23.80970713975774,
      23.80970713975958,
      23.809707139759702,
      23.80970713976148,
      54.984180074312185,
      52.49662016499612,
      23.809707139800416,
      52.45248214087823,
      54.322044190591285,
      44.83095616990573,
      52.48579301811047,
      48.89097197890172,
      53.504163098326885,
      51.91013035574561,
      28.506630002740906,
      50.38328582596771,
      56.09131291174655,
      23.809707139785175,
      21.848955895703583,
      49.84170820087764,
      43.03084093572404,
      23.809707139772293,
      55.92338573386908,
      56.375378459149054,
      50.0385464135782,
      56.79279111777674,
      46.120481770157575,
      55.781569491125005,
      29.67569481913432,
      29.600752098392242,
      53.36019787021367,
      54.676848760400205,
      56.92679229210112,
      51.91013035567586,
      47.846631172958105,
      42.0297626316697,
      56.85581204107401,
      57.01914906234065,
      30.846435484262436,
      53.30624283958459,
      56.90906068270027,
      48.28208078455053,
      34.153179791362426,
      32.82161549740316,
      35.46170229043934,
      25.14889482376053,
      54.916624747307615,
      56.681078107038545,
      50.21064828586715,
      21.84895589673174,
      51.80798382784356,
      29.12361716198501,
      52.5727265511616,
      46.56228062569875,
      52.93421546114915,
      53.59374165891504,
      42.92120909518174,
      10.273447185125256,
      30.589354304317,
      53.18195004898576,
      55.76456222988145,
      55.86612373954504,
      56.853825671317125,
      40.69554862509355,
      56.325152141740745,
      56.938065456853145,
      58.503808389275285,
      56.0573659096162,
      37.522683282776384,
      27.101873698466946,
      49.24872882807132,
      57.01188956647402,
      19.016199921188374,
      57.05475730749322,
      34.443055340087064,
      43.220211798113894,
      49.5966643399767,
      55.99184092701082
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- slope: r = 0.732\n- penalty: r = 0.402",
  "previous_models": [
    "Specification: U = slope * log(split_self / deserved) - penalty * max(0, deserved - split_self)\nSummary: A two-parameter, reference-dependent utility model predicting offer acceptance. Utility combines a log-ratio term quantifying proportional deviation from the deserved share, and a single-sided, linear penalty applied exclusively when offers fall below the participant\u2019s deserved amount. Each parameter modulates a distinct behavioral signature: overall fairness sensitivity (slope) and steepness of punishment for under-offers (penalty). The model prevents collinearity by activating the penalty only in disadvantageous cases, thus maximizing psychological interpretability and parameter recoverability while remaining parsimonious.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 43.91067068123458\nOverall Accuracy: 0.6462\n\nParameter Recovery:\n- slope: r = 0.732\n- penalty: r = 0.402"
  ]
}