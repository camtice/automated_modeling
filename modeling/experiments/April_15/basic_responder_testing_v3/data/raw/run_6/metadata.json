{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFrom the prior run, it is evident that asymmetric, one-sided linear penalties for under-offering still led to parameter recovery limitations (notably for the \u201cpenalty\u201d parameter), despite reasonable psychological interpretability. The most successful prior models (e.g., log-ratio forms) reached excellent parameter recovery when using concise, monotonic, fully multiplicative or reference-dependent effects, and not mixture or additive forms that are triggered only in narrow dynamic ranges. This suggests \u201cpiecewise\u201d or \u201cswitching\u201d models can introduce locally flat or collinear regions, hurting recoverability, especially where penalties are only active for a subset of trials.\n\nTo improve, the next modeling run should:\n\n- Move away from additive, linear, or soft-threshold penalty terms that rely on an indicator or ReLU structure, as these tend to be ill-posed when offer distributions cluster near or far from the threshold, \u201cwashing out\u201d parameter effects.\n- Prefer strictly monotonic, *smooth* but still asymmetric functions that supplant additive penalty terms. Examples: nonlinear transforms (e.g., exponential, smoothly rectifying powers), or continuous ratio- or log-ratio-based loss aversion, especially with a *single* shape or asymmetry parameter (e.g., a power or \u201closs aversion\u201d parameter like in prospect theory).\n- Explicitly build *interaction* or *modulation* effects; for example, a model where log-ratio sensitivity steepens (or flattens) in the disadvantageous domain, using only one learnable nonlinearity or shape parameter.\n- Consider highly recoverable, interpretable nonlinearity from behavioral economics\u2014e.g., prospect theory\u2019s value function: v(x) = x^\u03b1 if x >= 0, and \u2013\u03bb|x|^\u03b2 if x < 0\u2014with \u03bb (\u201closs aversion\u201d) as a single asymmetry parameter, or extend the log-ratio model so that utility = \u03b2 * log(offer / deserved) when offer >= deserved, and \u2013\u03bb * |log(offer / deserved)|^\u03b1 otherwise (single switching parameter, but smooth with no hard threshold).\n\nEncourage the following:\n- \u201cSmooth regime\u201d models (e.g., exponentiated or power-transformed deviation, or nonlinear reweighting of loss domain), always with *at most* one clearly learnable parameter governing asymmetry or nonlinearity.\n- Formulations where parameter effects can be visualized over the entire offer\u2013deserved space and are never \u201coff\u201d for a range of trials.\n- Disallow redundant bias/intercept parameters unless strongly justified\u2014prior art shows they often absorb variance inappropriately.\n- For \u201casymmetry,\u201d strictly restrict to one shape/strength or one sharpness parameter, and show it transitions smoothly so its effect cannot be trivially substituted by another parameter.\n- If a threshold is used, make it hard (not soft) and make the remainder of the function completely invariant to this location\u2014e.g., a single \u201ckink\u201d at offer=deserved with entirely distinct slopes above/below, or parameterized only by the difference in effect.\n\nAbove all: maximize recoverability by preventing overlapping functional forms (no two parameters affect the same space or can compensate for one another anywhere in the observed data).\n</think>\n\n---\n**Instructions for Run 6 Computational Modeling**\n\nWhen constructing your formal model for responder choice, rigorously adhere to the following steps to outpace previous models in predictive accuracy, parameter recovery, and interpretability:\n\n1. **Psychological Mechanism\u2013Parameter Mapping**\n    - Define the cognitive/psychological drivers (self-interest, proportionality to earned/contributed, loss aversion to under-offering, fairness reference).\n    - Each should only have a dedicated parameter if you can demonstrate its quantitative effect is unique, separable, and active across the observed offer space.\n\n2. **Parameterization Principles**\n    - Limit your model to *the smallest number* of learnable parameters that each have a mathematically non-redundant influence.\n    - No two parameters should act on the same outcome region or statistical moments of the data.\n    - Do not introduce intercepts/biases or regime switches unless they yield clearly interpretable independent effects and parameter recovery is guaranteed.\n\n3. **Functional Form Innovation**\n    - Prioritize *smooth, monotonic, asymmetric* nonlinearities instead of additive thresholded penalties.\n    - Strongly consider \u201cProspect-Theoretic\u201d forms: for example, use a power or log transformation of the proportional offer deviation, with a single loss aversion/asymmetry parameter modulating the \u201cbelow-norm\u201d side.\n    - Optionally, introduce a multiplicative effect that magnifies the influence of unfairness below the fairness norm, via a shape or steepness parameter.\n    - You may choose a sharply kinked but fully piecewise-linear model, provided only a *single* parameter governs the slope on each side of the reference point and transitions are immediate (no overlapping regions of parameter effect).\n\n4. **Simulation-Backed Justification**\n    - Before formalizing your model, explicitly consider how *each* parameter\u2019s variation manifests in synthetic or real data (i.e., simulate three to four plausible trials and describe how predictions differ as you change each parameter).\n    - Ensure that *across the observed data*, every parameter\u2019s effect is \u201clit up\u201d and detectable under variation in participant and offer variables.\n\n5. **Model Output and Formatting**\n    - Present the formal mathematical model in <MODEL>\u2026</MODEL> tags with *only* the formula (no prose or comments).\n    - List all variable descriptions\u2014including range, distributions, learnable/data/calculated status\u2014in <VARIABLES>\u2026</VARIABLES> JSON format as previously specified.\n    - State your target variable (likely <target_variable>accept</target_variable>).\n    - Summarize your model in <SUMMARY>\u2026</SUMMARY> with a sharply technical, non-generic, and fully descriptive explanation.\n\n6. **Encouraged Model Types (Choose One Only):**\n    - *Prospect-Theoretic*: A reference-point utility where deviation above/below (offer/deserved) is transformed by power functions or log with different slopes/weights, with a *single* asymmetry (\u201closs aversion\u201d) parameter.\n    - *Single-Regime-Kinked*: Utility as proportional slope above a fairness norm and another below, controlled by a single asymmetry parameter and no overlap.\n    - *Reference-Modulated Exponential/Piecewise*: A model where penalty for disadvantage is exponentially or power-law larger than reward, controlled by a shape parameter.\n\n7. **General Guidance**\n    - Only use parameter-rich forms when each parameter\u2019s separate effect can be mathematically guaranteed in the full trial range.\n    - Avoid additive bias or \u201ccatch-all\u201d terms unless critical; such terms reduce parameter identifiability.\n    - Prefer simplicity and continuous action of parameters across the full space of offers.\n\n**Special Emphasis:**\n- The model *must* feature a strictly single-parameter asymmetry for unfair offers, implemented via a behavioral-economics/Prospect-Theory-inspired function or a mathematically crisp, immediately active above/below-norm \u201ckink.\u201d\n- Do not return to additive one-sided penalties (max(0, \u2026) \u00d7 parameter) unless using a nonlinear transform that ensures parameter salience and recovery.\n- Novel proposals that achieve both a high degree of interpretability and structural parameter identifiability are encouraged.\n\nBe creative, but rigorously inspect separability and mathematical coverage\u2014every parameter must have a reliably observable, independent signature in prediction space.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFrom the prior run, it is evident that asymmetric, one-sided linear penalties for under-offering still led to parameter recovery limitations (notably for the \u201cpenalty\u201d parameter), despite reasonable psychological interpretability. The most successful prior models (e.g., log-ratio forms) reached excellent parameter recovery when using concise, monotonic, fully multiplicative or reference-dependent effects, and not mixture or additive forms that are triggered only in narrow dynamic ranges. This suggests \u201cpiecewise\u201d or \u201cswitching\u201d models can introduce locally flat or collinear regions, hurting recoverability, especially where penalties are only active for a subset of trials.\n\nTo improve, the next modeling run should:\n\n- Move away from additive, linear, or soft-threshold penalty terms that rely on an indicator or ReLU structure, as these tend to be ill-posed when offer distributions cluster near or far from the threshold, \u201cwashing out\u201d parameter effects.\n- Prefer strictly monotonic, *smooth* but still asymmetric functions that supplant additive penalty terms. Examples: nonlinear transforms (e.g., exponential, smoothly rectifying powers), or continuous ratio- or log-ratio-based loss aversion, especially with a *single* shape or asymmetry parameter (e.g., a power or \u201closs aversion\u201d parameter like in prospect theory).\n- Explicitly build *interaction* or *modulation* effects; for example, a model where log-ratio sensitivity steepens (or flattens) in the disadvantageous domain, using only one learnable nonlinearity or shape parameter.\n- Consider highly recoverable, interpretable nonlinearity from behavioral economics\u2014e.g., prospect theory\u2019s value function: v(x) = x^\u03b1 if x >= 0, and \u2013\u03bb|x|^\u03b2 if x < 0\u2014with \u03bb (\u201closs aversion\u201d) as a single asymmetry parameter, or extend the log-ratio model so that utility = \u03b2 * log(offer / deserved) when offer >= deserved, and \u2013\u03bb * |log(offer / deserved)|^\u03b1 otherwise (single switching parameter, but smooth with no hard threshold).\n\nEncourage the following:\n- \u201cSmooth regime\u201d models (e.g., exponentiated or power-transformed deviation, or nonlinear reweighting of loss domain), always with *at most* one clearly learnable parameter governing asymmetry or nonlinearity.\n- Formulations where parameter effects can be visualized over the entire offer\u2013deserved space and are never \u201coff\u201d for a range of trials.\n- Disallow redundant bias/intercept parameters unless strongly justified\u2014prior art shows they often absorb variance inappropriately.\n- For \u201casymmetry,\u201d strictly restrict to one shape/strength or one sharpness parameter, and show it transitions smoothly so its effect cannot be trivially substituted by another parameter.\n- If a threshold is used, make it hard (not soft) and make the remainder of the function completely invariant to this location\u2014e.g., a single \u201ckink\u201d at offer=deserved with entirely distinct slopes above/below, or parameterized only by the difference in effect.\n\nAbove all: maximize recoverability by preventing overlapping functional forms (no two parameters affect the same space or can compensate for one another anywhere in the observed data).\n</think>\n\n---\n**Instructions for Run 6 Computational Modeling**\n\nWhen constructing your formal model for responder choice, rigorously adhere to the following steps to outpace previous models in predictive accuracy, parameter recovery, and interpretability:\n\n1. **Psychological Mechanism\u2013Parameter Mapping**\n    - Define the cognitive/psychological drivers (self-interest, proportionality to earned/contributed, loss aversion to under-offering, fairness reference).\n    - Each should only have a dedicated parameter if you can demonstrate its quantitative effect is unique, separable, and active across the observed offer space.\n\n2. **Parameterization Principles**\n    - Limit your model to *the smallest number* of learnable parameters that each have a mathematically non-redundant influence.\n    - No two parameters should act on the same outcome region or statistical moments of the data.\n    - Do not introduce intercepts/biases or regime switches unless they yield clearly interpretable independent effects and parameter recovery is guaranteed.\n\n3. **Functional Form Innovation**\n    - Prioritize *smooth, monotonic, asymmetric* nonlinearities instead of additive thresholded penalties.\n    - Strongly consider \u201cProspect-Theoretic\u201d forms: for example, use a power or log transformation of the proportional offer deviation, with a single loss aversion/asymmetry parameter modulating the \u201cbelow-norm\u201d side.\n    - Optionally, introduce a multiplicative effect that magnifies the influence of unfairness below the fairness norm, via a shape or steepness parameter.\n    - You may choose a sharply kinked but fully piecewise-linear model, provided only a *single* parameter governs the slope on each side of the reference point and transitions are immediate (no overlapping regions of parameter effect).\n\n4. **Simulation-Backed Justification**\n    - Before formalizing your model, explicitly consider how *each* parameter\u2019s variation manifests in synthetic or real data (i.e., simulate three to four plausible trials and describe how predictions differ as you change each parameter).\n    - Ensure that *across the observed data*, every parameter\u2019s effect is \u201clit up\u201d and detectable under variation in participant and offer variables.\n\n5. **Model Output and Formatting**\n    - Present the formal mathematical model in <MODEL>\u2026</MODEL> tags with *only* the formula (no prose or comments).\n    - List all variable descriptions\u2014including range, distributions, learnable/data/calculated status\u2014in <VARIABLES>\u2026</VARIABLES> JSON format as previously specified.\n    - State your target variable (likely <target_variable>accept</target_variable>).\n    - Summarize your model in <SUMMARY>\u2026</SUMMARY> with a sharply technical, non-generic, and fully descriptive explanation.\n\n6. **Encouraged Model Types (Choose One Only):**\n    - *Prospect-Theoretic*: A reference-point utility where deviation above/below (offer/deserved) is transformed by power functions or log with different slopes/weights, with a *single* asymmetry (\u201closs aversion\u201d) parameter.\n    - *Single-Regime-Kinked*: Utility as proportional slope above a fairness norm and another below, controlled by a single asymmetry parameter and no overlap.\n    - *Reference-Modulated Exponential/Piecewise*: A model where penalty for disadvantage is exponentially or power-law larger than reward, controlled by a shape parameter.\n\n7. **General Guidance**\n    - Only use parameter-rich forms when each parameter\u2019s separate effect can be mathematically guaranteed in the full trial range.\n    - Avoid additive bias or \u201ccatch-all\u201d terms unless critical; such terms reduce parameter identifiability.\n    - Prefer simplicity and continuous action of parameters across the full space of offers.\n\n**Special Emphasis:**\n- The model *must* feature a strictly single-parameter asymmetry for unfair offers, implemented via a behavioral-economics/Prospect-Theory-inspired function or a mathematically crisp, immediately active above/below-norm \u201ckink.\u201d\n- Do not return to additive one-sided penalties (max(0, \u2026) \u00d7 parameter) unless using a nonlinear transform that ensures parameter salience and recovery.\n- Novel proposals that achieve both a high degree of interpretability and structural parameter identifiability are encouraged.\n\nBe creative, but rigorously inspect separability and mathematical coverage\u2014every parameter must have a reliably observable, independent signature in prediction space.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let me proceed step by step as requested.\n\n---\n\n**Step 1: Psychological Mechanism\u2013Parameter Mapping**\n\nResponder decisions here likely reflect:\n- *Self-interest* (absolute amount received)\n- *Fairness reference* (offer relative to what participant contributed/deserved)\n- *Loss aversion/asymmetry* (greater penalty when offered less than deserved, less boost when offered more)\n\nBest practice: Fix the \u201cfairness reference\u201d as what's deserved by *proportional contribution*: deserved_self = token_self / (token_self + token_opp) \u00d7 combined_earning, or equivalently, deserved_self_perc = token_self / (token_self + token_opp).\n\nSo, define the *relative offer*:\n- rel_offer = split_self / combined_earning\n- rel_deserved = token_self / (token_self + token_opp)\n- Offer deviation: \u0394 = rel_offer \u2013 rel_deserved.\n\nParametrically, classical *Prospect Theory* value function is best here:\n- Utility is linear or mildly nonlinear in *gains* (\u0394 \u2265 0).\n- Utility is steeper for *losses* (\u0394 < 0), with a *single* asymmetry parameter (loss aversion \u03bb \u2265 1).\n\n**Step 2: Parameterization Principles**\n\n- Asymmetry parameter \u03bb: reflects aversion to \u201cunfair disadvantage.\u201d\n- All terms tied to \u0394 above/below zero; each region governed by a unique effect.\n- No additional bias or sensitivity parameters unless *uniquely* justified.\n\n**Step 3: Functional Form Innovation**\n\nChoose a *piecewise power model* anchored at \u0394 = 0 (offer = deserved):\n\nU = { (\u0394)^\u03b1                    if \u0394 \u2265 0  \n     \u2013\u03bb \u00d7 |\u0394|^\u03b1                if \u0394 < 0 }\n\nFor identifiability and simplicity, fix exponent \u03b1=1 (linear), or, if including, restrict to \u03b1 in [0.5,2] (one shape parameter maximum). I will use \u03b1=1 for maximal recovery and only one (asymmetry) parameter, per instructions.\n\n**Step 4: Simulation Justification**\n\n- \u03bb=1: symmetric (no loss aversion): positive and negative deviations have equal weight.\n- \u03bb>1: sharper drop for negative \u0394, steeper penalty for offers below deserved, boosting rejection of \u201cunfair\u201d (to the responder) proposals.\n- Parameter can be precisely inferred from acceptance of below-deserved offers.\n\n**Step 5: Model Output and Formatting**\n\n---\n\n**Final Model Specification**\n\n<MODEL>\nutility = \n    rel_offer - rel_deserved                   if rel_offer >= rel_deserved\n    -lambda_param * (rel_deserved - rel_offer) if rel_offer <  rel_deserved\n</MODEL>\n\n---\n\n**Variable Descriptions**\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Decision utility for accepting the proposed split (accept if >0, logistic transform to probability).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"rel_offer\": {\n      \"description\": \"Proportion of the total pot offered to the participant (split_self/combined_earning).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"rel_deserved\": {\n      \"description\": \"Proportion of the pot deserved based on the participant's contribution (token_self/(token_self+token_opp)).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion parameter: multiplicatively increases penalty for offers below deserved (must be \u22651 for meaningful interpretation).\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 1,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed monetary amount for participant in \u00a3.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money available to divide in \u00a3.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA reference-dependent, prospect-theory-inspired responder utility model in which acceptance utility equals the proportional deviation of the offered share from the participant's deserved share, with a single \u201closs aversion\u201d parameter (lambda_param) that amplifies the penalty for receiving less than deserved. This strictly enforces a single, immediately active, and separable asymmetry in the utility of offers above and below fairness, maximizing parameter recoverability and interpretability while modeling responder sensitivity to fairness violations.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['lambda_param']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                utility = \n    rel_offer - rel_deserved                   if rel_offer >= rel_deserved\n    -lambda_param * (rel_deserved - rel_offer) if rel_offer <  rel_deserved\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Decision utility for accepting the proposed split (accept if >0, logistic transform to probability).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"rel_offer\": {\n      \"description\": \"Proportion of the total pot offered to the participant (split_self/combined_earning).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"rel_deserved\": {\n      \"description\": \"Proportion of the pot deserved based on the participant's contribution (token_self/(token_self+token_opp)).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion parameter: multiplicatively increases penalty for offers below deserved (must be \\u22651 for meaningful interpretation).\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 1,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed monetary amount for participant in \\u00a3.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money available to divide in \\u00a3.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, lambda_param=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)\n        split_self = trial.get(\"split_self\", 0)\n\n        rel_offer = split_self / combined_earning if combined_earning > 0 else 0\n        rel_deserved = token_self / (token_self + token_opp) if (token_self + token_opp) > 0 else 0\n\n        if rel_offer >= rel_deserved:\n            utility = rel_offer - rel_deserved\n        else:\n            utility = -lambda_param * (rel_deserved - rel_offer)\n\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '''\n[\n  {\n    \"ID\": 1,\n    \"group\": \"control\",\n    \"trial_number\": 1,\n    \"trial_type\": 1,\n    \"trial_role\": 1,\n    \"token_opp\": 18,\n    \"token_self\": 18,\n    \"combined_earning\": 6,\n    \"split_opp\": 3.0,\n    \"split_self\": 3.0,\n    \"splitperc_opp\": 50,\n    \"splitperc_self\": 50,\n    \"accept\": 1.0,\n    \"accepted_amount\": 3.0,\n    \"accepted_perc\": 50.0,\n    \"proposed_perc\": 50.0,\n    \"proposed_amount\": 3.0\n  },\n  {\n    \"ID\": 2,\n    \"group\": \"control\",\n    \"trial_number\": 2,\n    \"trial_type\": 1,\n    \"trial_role\": 1,\n    \"token_opp\": 18,\n    \"token_self\": 18,\n    \"combined_earning\": 6,\n    \"split_opp\": 4.5,\n    \"split_self\": 1.5,\n    \"splitperc_opp\": 75,\n    \"splitperc_self\": 25,\n    \"accept\": 0.0,\n    \"accepted_amount\": 0.0,\n    \"accepted_perc\": 0.0,\n    \"proposed_perc\": 25.0,\n    \"proposed_amount\": 1.5\n  }\n]\n'''\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744714657.467415
    }
  ],
  "learnable_parameters": {
    "lambda_param": {
      "description": "Loss aversion parameter: multiplicatively increases penalty for offers below deserved (must be \u22651 for meaningful interpretation).",
      "range": {
        "min": 1,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 1,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "utility = \n    rel_offer - rel_deserved                   if rel_offer >= rel_deserved\n    -lambda_param * (rel_deserved - rel_offer) if rel_offer <  rel_deserved",
  "variable_descriptions": {
    "utility": {
      "description": "Decision utility for accepting the proposed split (accept if >0, logistic transform to probability).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "rel_offer": {
      "description": "Proportion of the total pot offered to the participant (split_self/combined_earning).",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "rel_deserved": {
      "description": "Proportion of the pot deserved based on the participant's contribution (token_self/(token_self+token_opp)).",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "lambda_param": {
      "description": "Loss aversion parameter: multiplicatively increases penalty for offers below deserved (must be \u22651 for meaningful interpretation).",
      "range": {
        "min": 1,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 1,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed monetary amount for participant in \u00a3.",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total money available to divide in \u00a3.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Tokens found by the participant.",
      "range": {
        "min": 0,
        "max": 36,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": 36,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A reference-dependent, prospect-theory-inspired responder utility model in which acceptance utility equals the proportional deviation of the offered share from the participant's deserved share, with a single \u201closs aversion\u201d parameter (lambda_param) that amplifies the penalty for receiving less than deserved. This strictly enforces a single, immediately active, and separable asymmetry in the utility of offers above and below fairness, maximizing parameter recoverability and interpretability while modeling responder sensitivity to fairness violations.",
  "target_variable": "accept",
  "full_reasoning": "Let me proceed step by step as requested.\n\n---\n\n**Step 1: Psychological Mechanism\u2013Parameter Mapping**\n\nResponder decisions here likely reflect:\n- *Self-interest* (absolute amount received)\n- *Fairness reference* (offer relative to what participant contributed/deserved)\n- *Loss aversion/asymmetry* (greater penalty when offered less than deserved, less boost when offered more)\n\nBest practice: Fix the \u201cfairness reference\u201d as what's deserved by *proportional contribution*: deserved_self = token_self / (token_self + token_opp) \u00d7 combined_earning, or equivalently, deserved_self_perc = token_self / (token_self + token_opp).\n\nSo, define the *relative offer*:\n- rel_offer = split_self / combined_earning\n- rel_deserved = token_self / (token_self + token_opp)\n- Offer deviation: \u0394 = rel_offer \u2013 rel_deserved.\n\nParametrically, classical *Prospect Theory* value function is best here:\n- Utility is linear or mildly nonlinear in *gains* (\u0394 \u2265 0).\n- Utility is steeper for *losses* (\u0394 < 0), with a *single* asymmetry parameter (loss aversion \u03bb \u2265 1).\n\n**Step 2: Parameterization Principles**\n\n- Asymmetry parameter \u03bb: reflects aversion to \u201cunfair disadvantage.\u201d\n- All terms tied to \u0394 above/below zero; each region governed by a unique effect.\n- No additional bias or sensitivity parameters unless *uniquely* justified.\n\n**Step 3: Functional Form Innovation**\n\nChoose a *piecewise power model* anchored at \u0394 = 0 (offer = deserved):\n\nU = { (\u0394)^\u03b1                    if \u0394 \u2265 0  \n     \u2013\u03bb \u00d7 |\u0394|^\u03b1                if \u0394 < 0 }\n\nFor identifiability and simplicity, fix exponent \u03b1=1 (linear), or, if including, restrict to \u03b1 in [0.5,2] (one shape parameter maximum). I will use \u03b1=1 for maximal recovery and only one (asymmetry) parameter, per instructions.\n\n**Step 4: Simulation Justification**\n\n- \u03bb=1: symmetric (no loss aversion): positive and negative deviations have equal weight.\n- \u03bb>1: sharper drop for negative \u0394, steeper penalty for offers below deserved, boosting rejection of \u201cunfair\u201d (to the responder) proposals.\n- Parameter can be precisely inferred from acceptance of below-deserved offers.\n\n**Step 5: Model Output and Formatting**\n\n---\n\n**Final Model Specification**\n\n<MODEL>\nutility = \n    rel_offer - rel_deserved                   if rel_offer >= rel_deserved\n    -lambda_param * (rel_deserved - rel_offer) if rel_offer <  rel_deserved\n</MODEL>\n\n---\n\n**Variable Descriptions**\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Decision utility for accepting the proposed split (accept if >0, logistic transform to probability).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"rel_offer\": {\n      \"description\": \"Proportion of the total pot offered to the participant (split_self/combined_earning).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"rel_deserved\": {\n      \"description\": \"Proportion of the pot deserved based on the participant's contribution (token_self/(token_self+token_opp)).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion parameter: multiplicatively increases penalty for offers below deserved (must be \u22651 for meaningful interpretation).\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 1,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed monetary amount for participant in \u00a3.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money available to divide in \u00a3.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA reference-dependent, prospect-theory-inspired responder utility model in which acceptance utility equals the proportional deviation of the offered share from the participant's deserved share, with a single \u201closs aversion\u201d parameter (lambda_param) that amplifies the penalty for receiving less than deserved. This strictly enforces a single, immediately active, and separable asymmetry in the utility of offers above and below fairness, maximizing parameter recoverability and interpretability while modeling responder sensitivity to fairness violations.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: utility = \n    rel_offer - rel_deserved                   if rel_offer >= rel_deserved\n    -lambda_param * (rel_deserved - rel_offer) if rel_offer <  rel_deserved\nSummary: A reference-dependent, prospect-theory-inspired responder utility model in which acceptance utility equals the proportional deviation of the offered share from the participant's deserved share, with a single \u201closs aversion\u201d parameter (lambda_param) that amplifies the penalty for receiving less than deserved. This strictly enforces a single, immediately active, and separable asymmetry in the utility of offers above and below fairness, maximizing parameter recoverability and interpretability while modeling responder sensitivity to fairness violations.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, lambda_param=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)\n        split_self = trial.get(\"split_self\", 0)\n\n        rel_offer = split_self / combined_earning if combined_earning > 0 else 0\n        rel_deserved = token_self / (token_self + token_opp) if (token_self + token_opp) > 0 else 0\n\n        if rel_offer >= rel_deserved:\n            utility = rel_offer - rel_deserved\n        else:\n            utility = -lambda_param * (rel_deserved - rel_offer)\n\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5659340659340659,
  "fitting_results": [
    {
      "lambda_param": 10.0,
      "success": true,
      "log_likelihood": -9.60486225950833,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.977509529599368,
      "success": true,
      "log_likelihood": -22.659085130742643,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.6743709087562344,
      "success": true,
      "log_likelihood": -21.718742194816496,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 4.683742618402004,
      "success": true,
      "log_likelihood": -20.261943322980517,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 5.7565751687290385,
      "success": true,
      "log_likelihood": -18.702068260504806,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -24.60384960910948,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -28.83718294157641,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -24.803849609068948,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -28.837182941576415,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 6.404964456909099,
      "success": true,
      "log_likelihood": -17.79111900107743,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 5.689974936884629,
      "success": true,
      "log_likelihood": -18.79745506523325,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "success": true,
      "log_likelihood": -10.104862259404115,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 5.624331911206085,
      "success": true,
      "log_likelihood": -18.891739704980417,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -28.837182941576422,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -28.83718294157641,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -28.837182941576415,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -28.83718294157642,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -26.870516275314678,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -27.120516275264315,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -28.837182941576412,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.56613693387281,
      "success": true,
      "log_likelihood": -23.166851892910625,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -26.920516275303445,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 4.4243361389189175,
      "success": true,
      "log_likelihood": -20.64135074731954,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.1439785036704975,
      "success": true,
      "log_likelihood": -23.637455307561076,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.762398781576999,
      "success": true,
      "log_likelihood": -21.59480003516294,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.042034773146197,
      "success": true,
      "log_likelihood": -23.742100174035276,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.042033106095255,
      "success": true,
      "log_likelihood": -23.742100174028813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "success": true,
      "log_likelihood": -12.204862258942383,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -27.270516275232005,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -26.137182942129577,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -28.837182941576412,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "success": true,
      "log_likelihood": -9.604862259508334,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.749880634643825,
      "success": true,
      "log_likelihood": -22.94538616513891,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 5.072205340915248,
      "success": true,
      "log_likelihood": -19.693155223739186,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -28.83718294157641,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -24.937182942374506,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -24.953849609039626,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.4603796660258297,
      "success": true,
      "log_likelihood": -22.015964744349578,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -25.10384960900613,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -27.82051627511793,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -24.7205162757503,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "success": true,
      "log_likelihood": -12.538195591593857,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -28.637182941616683,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.5177206679469646,
      "success": true,
      "log_likelihood": -24.21606708088007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.2967369404171292,
      "success": true,
      "log_likelihood": -24.38020166157113,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -25.97051627549644,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.109849452808116,
      "success": true,
      "log_likelihood": -23.672903682001788,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 4.0826384653044885,
      "success": true,
      "log_likelihood": -21.137364403652775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 5.756594418175839,
      "success": true,
      "log_likelihood": -18.70206826031247,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -24.90384960904543,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -25.737182942210314,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "success": true,
      "log_likelihood": -13.104862258063253,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.6460888830031044,
      "success": true,
      "log_likelihood": -24.11061635635066,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -25.30384960896582,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 5.249023657764992,
      "success": true,
      "log_likelihood": -19.435152374617665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 9.088088477175924,
      "success": true,
      "log_likelihood": -14.492286973993739,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 9.231700063846361,
      "success": true,
      "log_likelihood": -14.339628341809252,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -28.40384960832998,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "success": true,
      "log_likelihood": -10.604862259273292,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -26.78718294199467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -24.97051627569882,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.1738749310861576,
      "success": true,
      "log_likelihood": -22.402822156808952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "success": true,
      "log_likelihood": -9.604862259508335,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.787257004863267,
      "success": true,
      "log_likelihood": -22.899243647224292,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "success": true,
      "log_likelihood": -13.038195591790377,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.9747754050820954,
      "success": true,
      "log_likelihood": -23.809045477902696,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -27.83718294178037,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -27.003849608620218,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.5496573027708433,
      "success": true,
      "log_likelihood": -24.19050572980566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -27.87051627510768,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "success": true,
      "log_likelihood": -7.871528926698905,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "success": true,
      "log_likelihood": -13.271528924507717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.3872369251310657,
      "success": true,
      "log_likelihood": -23.37321108914314,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -26.420516275404452,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.2655058746678594,
      "success": true,
      "log_likelihood": -24.568220246588773,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -25.38718294228268,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -28.020516275077945,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "success": true,
      "log_likelihood": -11.104862257981834,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -25.42051627560432,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "success": true,
      "log_likelihood": -9.604862259508337,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -24.75384960907561,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -28.303849608350927,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "success": true,
      "log_likelihood": -11.271528925802253,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 3.13408243561463,
      "success": true,
      "log_likelihood": -22.455388044072656,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -25.403849608942114,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "success": true,
      "log_likelihood": -9.538195592855011,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -25.520516275587593,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 10.0,
      "success": true,
      "log_likelihood": -13.03819559159115,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -27.970516275088954,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 2.977497963605525,
      "success": true,
      "log_likelihood": -22.659085130846975,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "lambda_param": 1.0,
      "success": true,
      "log_likelihood": -26.05384960881002,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "lambda_param": {
        "r": 0.780682412961407,
        "p": 1.003091681294942e-21
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 47.856807015570205,
  "bic_results": {
    "average_bic": 47.856807015570205,
    "individual_bics": [
      22.79324345747277,
      48.901689199941394,
      47.0210033280891,
      44.107405584417144,
      40.98765545946572,
      52.79121815667507,
      61.257884821608926,
      53.191218156594005,
      61.25788482160894,
      39.16575694061097,
      41.17842906892261,
      23.79324345726434,
      41.36699834841694,
      61.257884821608954,
      61.257884821608926,
      61.25788482160894,
      61.25788482160895,
      57.324551489085465,
      57.82455148898474,
      61.25788482160893,
      49.91722272427736,
      57.424551489063,
      44.86622043309519,
      50.85842955357826,
      46.77311900878199,
      51.06771928652666,
      51.067719286513736,
      27.993243456340874,
      58.12455148892012,
      55.85788482271526,
      61.25788482160893,
      22.793243457472776,
      49.47429126873393,
      42.96982938593448,
      61.257884821608926,
      53.45788482320512,
      53.49121815653536,
      47.615448427155265,
      53.79121815646837,
      59.22455148869197,
      53.02455148995671,
      28.659910121643822,
      60.857884821689474,
      52.01565310021625,
      52.34392226159837,
      55.52455148944899,
      50.929326302459685,
      45.85824774576166,
      40.98765545908105,
      53.39121815654697,
      55.05788482287674,
      29.793243454582615,
      51.80475165115743,
      54.19121815638775,
      42.45382368769144,
      32.56809288644359,
      32.262775622074614,
      60.39121815511607,
      24.793243457002692,
      57.157884822445446,
      53.52455148985375,
      48.38916325207401,
      22.79324345747278,
      49.38200623290469,
      29.659910122036862,
      51.2016098942615,
      59.25788482201685,
      57.591218155696545,
      51.96453039806743,
      59.32455148867147,
      19.32657679185392,
      30.126576787471542,
      50.32994111674239,
      56.42455148926501,
      52.719959431633654,
      54.35788482302147,
      59.624551488612,
      25.793243454419777,
      54.42455148966475,
      22.793243457472784,
      53.091218156607326,
      60.19121815515796,
      26.126576790060614,
      48.49429502660142,
      54.39121815634034,
      22.65991012416613,
      54.624551489631294,
      29.659910121638408,
      59.52455148863402,
      48.90168920015006,
      55.69121815607615
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 1,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- lambda_param: r = 0.781",
  "previous_models": [
    "Specification: utility = \n    rel_offer - rel_deserved                   if rel_offer >= rel_deserved\n    -lambda_param * (rel_deserved - rel_offer) if rel_offer <  rel_deserved\nSummary: A reference-dependent, prospect-theory-inspired responder utility model in which acceptance utility equals the proportional deviation of the offered share from the participant's deserved share, with a single \u201closs aversion\u201d parameter (lambda_param) that amplifies the penalty for receiving less than deserved. This strictly enforces a single, immediately active, and separable asymmetry in the utility of offers above and below fairness, maximizing parameter recoverability and interpretability while modeling responder sensitivity to fairness violations.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 47.856807015570205\nOverall Accuracy: 0.5659\n\nParameter Recovery:\n- lambda_param: r = 0.781"
  ]
}