{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nDespite the interpretability and solid parameter recovery for the loss aversion parameter in the previous run, the model underperformed on both BIC and accuracy versus more concise log-ratio models (see the \"best run\" in the history with significantly better recovery and fit). The linear piecewise/prospect format, while familiar, isn't optimized for smooth parametric variation\u2014especially in the region just around the fairness reference (rel_offer \u2248 rel_deserved). This regime produces abrupt kinks and flat/ambiguous gradients, which can lead to estimation noise, particularly when participant data clusters around this norm.\n\nThe history of best models shows the log-ratio family offers: (a) direct, reference-relative valuation; (b) clear parametric control (scaling via a single \u03b2 or shape/loss aversion parameter); (c) monotonicity and smoothness, ensuring every trial\u2014no matter where the proposal lands\u2014provides information for parameter estimation. Models with nonlinear power/exponential transforms deliver similar benefits, provided the shape parameter is active everywhere (not confined to \"loss\" or \"gain\" regions only). Further, the best-recovered models avoided strictly additive bias/intercept parameters.\n\nTo boost both fit and parameter recovery for the next round, instructions must:\n\n- Explicitly recommend a *log-ratio* or *generalized ratio-based* model as the base form, highlighting its empirical superiority in parameter recovery and BIC.\n- Encourage generalization by incorporating a *single, smoothly-acting, globally-active nonlinearity parameter*\u2014for example, modifying the exponent or sensitivity of the log-ratio, or smoothly tuning reference-dependence.\n- Require *no abrupt kinks*, *piecewise switches*, or *max*/*indicator* operations. Transformations should maintain differentiability and parameter sensitivity across the offer reference boundary.\n- Emphasize normalization of all amounts (e.g., by \u201cdeserved\u201d or \u201cpot size\u201d) to prevent collinearity, increase comparability, and support psychological interpretability.\n- Suggest that if loss aversion/asymmetry is modeled, it must smoothly modulate sensitivity below the norm (not switch regimes), such as through a continuous exponent, or by multiplying the log-ratio by a learnable \u201closs aversion\u201d parameter everywhere (rather than only below the norm).\n- Stress the *removal or strong justification* of intercept/bias parameters, as past evidence suggests these add noise and hurt recovery.\n- Push towards fully monotonic and interpretable transforms, making calibration of each parameter separable in synthetic and real data.\n- Invite creative, out-of-the-box variants on these forms\u2014such as applying a smooth sigmoid or power to the log-ratio, or scaling via a single learnable parameter that impacts unfairness nonlinearly, without causing non-identifiable overlaps.\n</think>\n\n---\n**Instructions for Run 7 Computational Modeling**\n\nWhen formulating your formal responder choice model, use the following principles to maximize fit, parameter recovery, and interpretability, intentionally moving beyond standard piecewise or thresholded models:\n\n1. **Adopt a Log-Ratio or Generalized Reference-Dependent Base**\n   - Model utility as a (possibly transformed) function of the *ratio* between the actual offer and a fairness norm (e.g., offer/deserved).\n   - Encourage using log or log-like functions (including exponentiated or power-law forms) for direct, reference-relative sensitivity; these have empirically yielded the highest recoverability.\n\n2. **Single, Globally-Active, Nonlinear Parameter**\n   - Incorporate only one main learnable parameter that smoothly modulates decision sensitivity or loss aversion *across the entire offer space* (not just above or below the reference point).\n   - This parameter might directly scale the log-ratio (e.g., \u03b2 \u00d7 log(offer/deserved)), apply a power (e.g., log(offer/deserved)^\u03b1), or enter as an exponent (e.g., (offer/deserved)^\u03b1 \u2013 1).\n   - Ensure changes in this parameter always correspond to monotonic changes in model predictions for every input.\n\n3. **Strictly No Piecewise, Max, or Discontinuous Terms**\n   - Disallow \u201cif-else\u201d, \u201cmax(0, \u2026)\u201d, indicator, or stepwise structures that partition the offer space.\n   - Any asymmetry or loss aversion should be implemented via a continuous parameter, such as an exponent or reweighting coefficient, that is active globally and produces a smooth response curve.\n\n4. **Psychological Clarity and Normalization**\n   - All computation should be made using normalized/relative variables (e.g., percent of pot offered, contribution shares, or offer/deserved ratios), never absolute values unless specifically justified.\n   - Give each parameter a clear, isolable psychological interpretation (e.g., \u201cfairness sensitivity,\u201d \u201cnonlinear loss aversion\u201d).\n\n5. **Parameter Limitation and Identifiability**\n   - Do not include additive bias/intercept terms or multiple sensitivity parameters unless it is mathematically clear that each controls a fully independent aspect of model output.\n   - Every parameter must be demonstrably recoverable through simulation: provide a brief verbal account of how variation in the parameter distinctly shifts predicted acceptance behavior throughout the data range.\n\n6. **Format and Output**\n   - Express your mathematical model precisely between <MODEL>\u2026</MODEL> tags, containing *only* the equation.\n   - Provide variable descriptions as JSON in <VARIABLES>\u2026</VARIABLES> tags, specifying variable roles (learnable/data/calculated), ranges, and sources.\n   - State your prediction target in <target_variable> tags.\n   - In <SUMMARY> tags, concisely describe model structure and psychological basis, avoiding generalities or repetition of task details.\n\n7. **Encourage Bold, Yet Justified Innovations**\n   - You may propose innovative extensions\u2014like scaling log-ratio by a parameterized sigmoid, applying a global exponent to the reference-dependent deviation, or otherwise achieving interpretable, non-redundant nonlinearity.\n   - The model must remain succinct, structurally identifiable, and monotonic.\n\n**Special Emphasis:**\n- *No regime switches or thresholded penalties:* The effect of every parameter must be visible and learnable across the entire dataset.\n- *Favor log-ratio or smoothly transformed ratio-based models above all.* If proposing a novel nonlinearity, explain how it enhances recoverability and interpretability versus standard forms.\n- *Reject intercept or bias terms unless their contribution to fit cannot be absorbed by a sensitivity/shape parameter.*\n\nBe thorough and creative, but guarantee that all parameters are live, independent, interpretable, and yield improved recoverability across the observed offer range.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nDespite the interpretability and solid parameter recovery for the loss aversion parameter in the previous run, the model underperformed on both BIC and accuracy versus more concise log-ratio models (see the \"best run\" in the history with significantly better recovery and fit). The linear piecewise/prospect format, while familiar, isn't optimized for smooth parametric variation\u2014especially in the region just around the fairness reference (rel_offer \u2248 rel_deserved). This regime produces abrupt kinks and flat/ambiguous gradients, which can lead to estimation noise, particularly when participant data clusters around this norm.\n\nThe history of best models shows the log-ratio family offers: (a) direct, reference-relative valuation; (b) clear parametric control (scaling via a single \u03b2 or shape/loss aversion parameter); (c) monotonicity and smoothness, ensuring every trial\u2014no matter where the proposal lands\u2014provides information for parameter estimation. Models with nonlinear power/exponential transforms deliver similar benefits, provided the shape parameter is active everywhere (not confined to \"loss\" or \"gain\" regions only). Further, the best-recovered models avoided strictly additive bias/intercept parameters.\n\nTo boost both fit and parameter recovery for the next round, instructions must:\n\n- Explicitly recommend a *log-ratio* or *generalized ratio-based* model as the base form, highlighting its empirical superiority in parameter recovery and BIC.\n- Encourage generalization by incorporating a *single, smoothly-acting, globally-active nonlinearity parameter*\u2014for example, modifying the exponent or sensitivity of the log-ratio, or smoothly tuning reference-dependence.\n- Require *no abrupt kinks*, *piecewise switches*, or *max*/*indicator* operations. Transformations should maintain differentiability and parameter sensitivity across the offer reference boundary.\n- Emphasize normalization of all amounts (e.g., by \u201cdeserved\u201d or \u201cpot size\u201d) to prevent collinearity, increase comparability, and support psychological interpretability.\n- Suggest that if loss aversion/asymmetry is modeled, it must smoothly modulate sensitivity below the norm (not switch regimes), such as through a continuous exponent, or by multiplying the log-ratio by a learnable \u201closs aversion\u201d parameter everywhere (rather than only below the norm).\n- Stress the *removal or strong justification* of intercept/bias parameters, as past evidence suggests these add noise and hurt recovery.\n- Push towards fully monotonic and interpretable transforms, making calibration of each parameter separable in synthetic and real data.\n- Invite creative, out-of-the-box variants on these forms\u2014such as applying a smooth sigmoid or power to the log-ratio, or scaling via a single learnable parameter that impacts unfairness nonlinearly, without causing non-identifiable overlaps.\n</think>\n\n---\n**Instructions for Run 7 Computational Modeling**\n\nWhen formulating your formal responder choice model, use the following principles to maximize fit, parameter recovery, and interpretability, intentionally moving beyond standard piecewise or thresholded models:\n\n1. **Adopt a Log-Ratio or Generalized Reference-Dependent Base**\n   - Model utility as a (possibly transformed) function of the *ratio* between the actual offer and a fairness norm (e.g., offer/deserved).\n   - Encourage using log or log-like functions (including exponentiated or power-law forms) for direct, reference-relative sensitivity; these have empirically yielded the highest recoverability.\n\n2. **Single, Globally-Active, Nonlinear Parameter**\n   - Incorporate only one main learnable parameter that smoothly modulates decision sensitivity or loss aversion *across the entire offer space* (not just above or below the reference point).\n   - This parameter might directly scale the log-ratio (e.g., \u03b2 \u00d7 log(offer/deserved)), apply a power (e.g., log(offer/deserved)^\u03b1), or enter as an exponent (e.g., (offer/deserved)^\u03b1 \u2013 1).\n   - Ensure changes in this parameter always correspond to monotonic changes in model predictions for every input.\n\n3. **Strictly No Piecewise, Max, or Discontinuous Terms**\n   - Disallow \u201cif-else\u201d, \u201cmax(0, \u2026)\u201d, indicator, or stepwise structures that partition the offer space.\n   - Any asymmetry or loss aversion should be implemented via a continuous parameter, such as an exponent or reweighting coefficient, that is active globally and produces a smooth response curve.\n\n4. **Psychological Clarity and Normalization**\n   - All computation should be made using normalized/relative variables (e.g., percent of pot offered, contribution shares, or offer/deserved ratios), never absolute values unless specifically justified.\n   - Give each parameter a clear, isolable psychological interpretation (e.g., \u201cfairness sensitivity,\u201d \u201cnonlinear loss aversion\u201d).\n\n5. **Parameter Limitation and Identifiability**\n   - Do not include additive bias/intercept terms or multiple sensitivity parameters unless it is mathematically clear that each controls a fully independent aspect of model output.\n   - Every parameter must be demonstrably recoverable through simulation: provide a brief verbal account of how variation in the parameter distinctly shifts predicted acceptance behavior throughout the data range.\n\n6. **Format and Output**\n   - Express your mathematical model precisely between <MODEL>\u2026</MODEL> tags, containing *only* the equation.\n   - Provide variable descriptions as JSON in <VARIABLES>\u2026</VARIABLES> tags, specifying variable roles (learnable/data/calculated), ranges, and sources.\n   - State your prediction target in <target_variable> tags.\n   - In <SUMMARY> tags, concisely describe model structure and psychological basis, avoiding generalities or repetition of task details.\n\n7. **Encourage Bold, Yet Justified Innovations**\n   - You may propose innovative extensions\u2014like scaling log-ratio by a parameterized sigmoid, applying a global exponent to the reference-dependent deviation, or otherwise achieving interpretable, non-redundant nonlinearity.\n   - The model must remain succinct, structurally identifiable, and monotonic.\n\n**Special Emphasis:**\n- *No regime switches or thresholded penalties:* The effect of every parameter must be visible and learnable across the entire dataset.\n- *Favor log-ratio or smoothly transformed ratio-based models above all.* If proposing a novel nonlinearity, explain how it enhances recoverability and interpretability versus standard forms.\n- *Reject intercept or bias terms unless their contribution to fit cannot be absorbed by a sensitivity/shape parameter.*\n\nBe thorough and creative, but guarantee that all parameters are live, independent, interpretable, and yield improved recoverability across the observed offer range.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let me proceed step by step according to the instructions, aiming for optimal fit, interpretability, smoothness, and parameter recovery.\n\n---\n\n**Step 1: Choice of Model Structure**  \n- Log-ratio form most favored: utility depends on log(offer/deserved).  \n- A single, strictly global, learnable parameter modulates sensitivity or nonlinearity, with no abrupt regime switches.  \n- All calculations should be in normalized space (e.g., share offered as a ratio of fairness norm or contributed share).  \n- No intercept, no max, no if-then, and no additive bias.\n- Reject piecewise/prospect-like approaches in favor of smooth monotonic variants.\n\n---\n\n**Option Exploration**  \nThe following options fulfill all criteria:\n\n1. **\u03b2 \u00d7 log(offer/deserved)** (log-ratio, sensitivity parameter \u03b2)\n2. **sign-preserving power transform:** \u03b2 \u00d7 sign(log(offer/deserved)) \u00d7 |log(offer/deserved)|^\u03b1 (single \u03b1 exponent governs steepness/sensitivity, still smooth & monotonic, \u03b2 removed to avoid redundancy)\n3. **Generalized exponent on offer/deserved ratio:**  \n   - utility = \u03b2 \u00d7 ( (offer/deserved)^\u03b1 - 1 ), \u03b1 produces smooth nonlinearity about the fairness norm, always differentiable, \u03b2 is sensitivity\n\n**But with only one global parameter required**, the log-ratio power transform is an excellent candidate (option 2), as \u03b1 directly tunes convexity/concavity (loss aversion or gain sensitivity) while being strictly monotonic and smoothly recovering the identity when \u03b1=1.\n\nBut to stay even more minimal (and as log-ratio models with a single \u03b2 appear empirically best), perhaps the \"classic\" log-ratio \u00d7 \u03b2 is in fact optimal for identifiability, given that \u03b2 always pushes in one direction (acceptance) and the logarithm ensures monotonicity and global effect. Let's also avoid redundancies in parameterization.\n\n- **utility = \u03b2 \u00d7 log(split_self / deserved_share)**\n\nWhere:\n- split_self: actual money or share offered to participant\n- deserved_share: a computed fairness reference (proportional to participant's contribution)\n\nBoth split_self and deserved_share normalized by combined_earning for psychological interpretability.\n\nThus, the model:\n- No intercept, PURE \u03b2.\n- Loss aversion and nonlinearity absorbed into \u03b2 via the directness of log-ratio curve.\n- Only learnable parameter is \u03b2, with wide plausible bounds.\n- Identifiability is maximized\u2014variation in \u03b2 changes the gradient and location of the accept/reject boundary everywhere in observation space.\n\n---\n\n**Implementation**  \n- **split_self**: amount offered to responder (from data)\n- **deserved_share**: share proportional to responder's contribution: (token_self / (token_self + token_opp)) \u00d7 combined_earning, but since split_self is in \u00a3, best to keep units matched.\n\nThus,\ndeserved_share = [token_self / (token_self + token_opp)] \u00d7 combined_earning\n\n- **split_self / deserved_share** is the \"relative share\"\u2014> 1 = fair, <1 = unfair to responder, >1 = advantageous\n\nThus:\n<MODEL>\nutility = beta * log(split_self / ( (token_self / (token_self + token_opp)) * combined_earning ) )\n</MODEL>\n\n---\n\n**Explicit variable names for the JSON:**\n- beta: main learnable parameter (fairness sensitivity). Bounded generously (~ -10 to 10).\n- split_self: \u00a3 offered to participant (data).\n- token_self, token_opp: tokens found by participant and opponent, both data.\n- combined_earning: total \u00a3 in pot for this trial (data).\n- Utility: calculated.\n\n---\n\n**Formatting the variable JSON:**\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Predicted utility for accepting the proposed offer, before sigmoid transform.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Fairness sensitivity parameter. Positive values: more likely to accept offers above fairness norm, negative: less likely.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount of money offered to the participant as responder (in \u00a3) for this trial.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant, determining fairness norm.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money in pot to be divided (in \u00a3) for this trial.\",\n      \"range\": {\n        \"min\": 1.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA fairness log-ratio model: The utility of accepting a proposed offer is proportional to the log of the ratio between the amount offered to the responder and their normative share, scaled by a single fairness sensitivity parameter. The model is smooth, monotonic, and parameter-lean, with all inputs normalized for psychological interpretability and maximal parameter recovery. No discontinuities or bias terms; all effects flow through the globally-active \u03b2 parameter.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                utility = beta * log(split_self / ( (token_self / (token_self + token_opp)) * combined_earning ) )\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Predicted utility for accepting the proposed offer, before sigmoid transform.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Fairness sensitivity parameter. Positive values: more likely to accept offers above fairness norm, negative: less likely.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount of money offered to the participant as responder (in \\u00a3) for this trial.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant, determining fairness norm.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money in pot to be divided (in \\u00a3) for this trial.\",\n      \"range\": {\n        \"min\": 1.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0.0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1.0)\n\n        # Calculate deserved share\n        if (token_self + token_opp) == 0:\n            deserved_share = combined_earning / 2.0  # Split evenly if both are zero\n        else:\n            deserved_share = (token_self / (token_self + token_opp)) * combined_earning\n\n        # Calculate utility\n        if deserved_share == 0:\n            utility = -float('inf')  # Or handle as appropriate, -inf is extreme disutility\n        else:\n            utility = beta * math.log(split_self / deserved_share)\n\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 1, \"token_self\": 0, \"combined_earning\": 5, \"split_opp\": 4.5, \"split_self\": 0.5, \"splitperc_opp\": 90, \"splitperc_self\": 10, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 10.0, \"proposed_amount\": 0.5}, {\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 1, \"token_self\": 0, \"combined_earning\": 5, \"split_opp\": 4.5, \"split_self\": 0.5, \"splitperc_opp\": 90, \"splitperc_self\": 10, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 10.0, \"proposed_amount\": 0.5}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744714712.390593
    }
  ],
  "learnable_parameters": {
    "beta": {
      "description": "Fairness sensitivity parameter. Positive values: more likely to accept offers above fairness norm, negative: less likely.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "utility = beta * log(split_self / ( (token_self / (token_self + token_opp)) * combined_earning ) )",
  "variable_descriptions": {
    "utility": {
      "description": "Predicted utility for accepting the proposed offer, before sigmoid transform.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta": {
      "description": "Fairness sensitivity parameter. Positive values: more likely to accept offers above fairness norm, negative: less likely.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Amount of money offered to the participant as responder (in \u00a3) for this trial.",
      "range": {
        "min": 0.0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by participant, determining fairness norm.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total money in pot to be divided (in \u00a3) for this trial.",
      "range": {
        "min": 1.0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A fairness log-ratio model: The utility of accepting a proposed offer is proportional to the log of the ratio between the amount offered to the responder and their normative share, scaled by a single fairness sensitivity parameter. The model is smooth, monotonic, and parameter-lean, with all inputs normalized for psychological interpretability and maximal parameter recovery. No discontinuities or bias terms; all effects flow through the globally-active \u03b2 parameter.",
  "target_variable": "accept",
  "full_reasoning": "Let me proceed step by step according to the instructions, aiming for optimal fit, interpretability, smoothness, and parameter recovery.\n\n---\n\n**Step 1: Choice of Model Structure**  \n- Log-ratio form most favored: utility depends on log(offer/deserved).  \n- A single, strictly global, learnable parameter modulates sensitivity or nonlinearity, with no abrupt regime switches.  \n- All calculations should be in normalized space (e.g., share offered as a ratio of fairness norm or contributed share).  \n- No intercept, no max, no if-then, and no additive bias.\n- Reject piecewise/prospect-like approaches in favor of smooth monotonic variants.\n\n---\n\n**Option Exploration**  \nThe following options fulfill all criteria:\n\n1. **\u03b2 \u00d7 log(offer/deserved)** (log-ratio, sensitivity parameter \u03b2)\n2. **sign-preserving power transform:** \u03b2 \u00d7 sign(log(offer/deserved)) \u00d7 |log(offer/deserved)|^\u03b1 (single \u03b1 exponent governs steepness/sensitivity, still smooth & monotonic, \u03b2 removed to avoid redundancy)\n3. **Generalized exponent on offer/deserved ratio:**  \n   - utility = \u03b2 \u00d7 ( (offer/deserved)^\u03b1 - 1 ), \u03b1 produces smooth nonlinearity about the fairness norm, always differentiable, \u03b2 is sensitivity\n\n**But with only one global parameter required**, the log-ratio power transform is an excellent candidate (option 2), as \u03b1 directly tunes convexity/concavity (loss aversion or gain sensitivity) while being strictly monotonic and smoothly recovering the identity when \u03b1=1.\n\nBut to stay even more minimal (and as log-ratio models with a single \u03b2 appear empirically best), perhaps the \"classic\" log-ratio \u00d7 \u03b2 is in fact optimal for identifiability, given that \u03b2 always pushes in one direction (acceptance) and the logarithm ensures monotonicity and global effect. Let's also avoid redundancies in parameterization.\n\n- **utility = \u03b2 \u00d7 log(split_self / deserved_share)**\n\nWhere:\n- split_self: actual money or share offered to participant\n- deserved_share: a computed fairness reference (proportional to participant's contribution)\n\nBoth split_self and deserved_share normalized by combined_earning for psychological interpretability.\n\nThus, the model:\n- No intercept, PURE \u03b2.\n- Loss aversion and nonlinearity absorbed into \u03b2 via the directness of log-ratio curve.\n- Only learnable parameter is \u03b2, with wide plausible bounds.\n- Identifiability is maximized\u2014variation in \u03b2 changes the gradient and location of the accept/reject boundary everywhere in observation space.\n\n---\n\n**Implementation**  \n- **split_self**: amount offered to responder (from data)\n- **deserved_share**: share proportional to responder's contribution: (token_self / (token_self + token_opp)) \u00d7 combined_earning, but since split_self is in \u00a3, best to keep units matched.\n\nThus,\ndeserved_share = [token_self / (token_self + token_opp)] \u00d7 combined_earning\n\n- **split_self / deserved_share** is the \"relative share\"\u2014> 1 = fair, <1 = unfair to responder, >1 = advantageous\n\nThus:\n<MODEL>\nutility = beta * log(split_self / ( (token_self / (token_self + token_opp)) * combined_earning ) )\n</MODEL>\n\n---\n\n**Explicit variable names for the JSON:**\n- beta: main learnable parameter (fairness sensitivity). Bounded generously (~ -10 to 10).\n- split_self: \u00a3 offered to participant (data).\n- token_self, token_opp: tokens found by participant and opponent, both data.\n- combined_earning: total \u00a3 in pot for this trial (data).\n- Utility: calculated.\n\n---\n\n**Formatting the variable JSON:**\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Predicted utility for accepting the proposed offer, before sigmoid transform.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Fairness sensitivity parameter. Positive values: more likely to accept offers above fairness norm, negative: less likely.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount of money offered to the participant as responder (in \u00a3) for this trial.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant, determining fairness norm.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money in pot to be divided (in \u00a3) for this trial.\",\n      \"range\": {\n        \"min\": 1.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA fairness log-ratio model: The utility of accepting a proposed offer is proportional to the log of the ratio between the amount offered to the responder and their normative share, scaled by a single fairness sensitivity parameter. The model is smooth, monotonic, and parameter-lean, with all inputs normalized for psychological interpretability and maximal parameter recovery. No discontinuities or bias terms; all effects flow through the globally-active \u03b2 parameter.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: utility = beta * log(split_self / ( (token_self / (token_self + token_opp)) * combined_earning ) )\nSummary: A fairness log-ratio model: The utility of accepting a proposed offer is proportional to the log of the ratio between the amount offered to the responder and their normative share, scaled by a single fairness sensitivity parameter. The model is smooth, monotonic, and parameter-lean, with all inputs normalized for psychological interpretability and maximal parameter recovery. No discontinuities or bias terms; all effects flow through the globally-active \u03b2 parameter.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0.0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1.0)\n\n        # Calculate deserved share\n        if (token_self + token_opp) == 0:\n            deserved_share = combined_earning / 2.0  # Split evenly if both are zero\n        else:\n            deserved_share = (token_self / (token_self + token_opp)) * combined_earning\n\n        # Calculate utility\n        if deserved_share == 0:\n            utility = -float('inf')  # Or handle as appropriate, -inf is extreme disutility\n        else:\n            utility = beta * math.log(split_self / deserved_share)\n\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6514041514041514,
  "fitting_results": [
    {
      "beta": 7.600763392417133,
      "success": true,
      "log_likelihood": -7.476604232144655,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.3174247535423553,
      "success": true,
      "log_likelihood": -21.74257679316358,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4456889403832927,
      "success": true,
      "log_likelihood": -21.249537831181325,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.005291496776843,
      "success": true,
      "log_likelihood": -19.09530161015949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.0850515475413505,
      "success": true,
      "log_likelihood": -18.796849661824854,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.6085504423802423,
      "success": true,
      "log_likelihood": -24.1179128286541,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.784887046685492,
      "success": true,
      "log_likelihood": -8.321334631422495,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.47585610405673767,
      "success": true,
      "log_likelihood": -24.429563740919427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.784886828484298,
      "success": true,
      "log_likelihood": -8.321334631422523,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.609559273940064,
      "success": true,
      "log_likelihood": -16.933802526083642,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.354116798646478,
      "success": true,
      "log_likelihood": -17.81782760046741,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.692859324333783,
      "success": true,
      "log_likelihood": -8.427456460082613,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.4059557380172643,
      "success": true,
      "log_likelihood": -17.63466820906813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.784881637697174,
      "success": true,
      "log_likelihood": -8.321334631425641,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.7848937246200345,
      "success": true,
      "log_likelihood": -8.32133463142539,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.784878227935432,
      "success": true,
      "log_likelihood": -8.321334631430153,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.784887631081884,
      "success": true,
      "log_likelihood": -8.32133463142245,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6863295086224561,
      "success": true,
      "log_likelihood": -23.908571098666656,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.06935238043272,
      "success": true,
      "log_likelihood": -22.664791144041953,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.7848891459265595,
      "success": true,
      "log_likelihood": -8.321334631422596,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.0754955027852404,
      "success": true,
      "log_likelihood": -22.64272213198498,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.798304878661922,
      "success": true,
      "log_likelihood": -23.577503156839633,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.0756215010158434,
      "success": true,
      "log_likelihood": -18.83195914649459,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.070860231454265,
      "success": true,
      "log_likelihood": -22.659377570486907,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4141614101712174,
      "success": true,
      "log_likelihood": -21.371302719406064,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.9246913194992681,
      "success": true,
      "log_likelihood": -23.16856261069951,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.1499589452172436,
      "success": true,
      "log_likelihood": -22.37154623940829,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 5.127244522763639,
      "success": true,
      "log_likelihood": -10.669796062914726,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.3525885000380324,
      "success": true,
      "log_likelihood": -21.608123974566098,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.4602205089468424,
      "success": true,
      "log_likelihood": -24.462137517417013,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.784870253991479,
      "success": true,
      "log_likelihood": -8.321334631448332,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.600774060147127,
      "success": true,
      "log_likelihood": -7.476604232146572,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4229636092591362,
      "success": true,
      "log_likelihood": -21.33733516198238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.3220933364672707,
      "success": true,
      "log_likelihood": -17.931901529406034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -6.784877087678202,
      "success": true,
      "log_likelihood": -8.3213346314321,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.4996805990856203,
      "success": true,
      "log_likelihood": -24.37817392847886,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.38582353008488984,
      "success": true,
      "log_likelihood": -24.60417029111804,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.396372797133937,
      "success": true,
      "log_likelihood": -21.439865119301025,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.24267199050422877,
      "success": true,
      "log_likelihood": -24.812876620432082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.9045637458886546,
      "success": true,
      "log_likelihood": -19.476721946623066,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5125019165764703,
      "success": true,
      "log_likelihood": -24.349660094177377,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.806378427613968,
      "success": true,
      "log_likelihood": -11.254328471137383,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -4.82614656694972,
      "success": true,
      "log_likelihood": -11.216857110741756,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.945975088370683,
      "success": true,
      "log_likelihood": -23.09657999665082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.7396804834586963,
      "success": true,
      "log_likelihood": -23.75490544174552,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.17501071377520777,
      "success": true,
      "log_likelihood": -24.879877207594458,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.1499587915800422,
      "success": true,
      "log_likelihood": -22.371546239381857,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.680220208971812,
      "success": true,
      "log_likelihood": -20.339796648023462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 2.085051371367181,
      "success": true,
      "log_likelihood": -18.796849661661152,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.2134510323961153,
      "success": true,
      "log_likelihood": -24.844387082080907,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.10641171909736485,
      "success": true,
      "log_likelihood": -24.926055592714224,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.510649134089846,
      "success": true,
      "log_likelihood": -11.839698803673855,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.9538908290528214,
      "success": true,
      "log_likelihood": -23.06960248133619,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.1853409863173382,
      "success": true,
      "log_likelihood": -24.871011402894034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.5817203369520305,
      "success": true,
      "log_likelihood": -20.72203719054049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.784207918472023,
      "success": true,
      "log_likelihood": -13.493070957115503,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.059863134818411,
      "success": true,
      "log_likelihood": -12.827288810938992,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.531872140261626,
      "success": true,
      "log_likelihood": -14.14733220676408,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 6.225369867111233,
      "success": true,
      "log_likelihood": -9.005611708116364,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.6982916985786337,
      "success": true,
      "log_likelihood": -23.874793435197727,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.2875413778639239,
      "success": true,
      "log_likelihood": -24.75702011506683,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.3744030110432466,
      "success": true,
      "log_likelihood": -21.524406284036694,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.600764415518931,
      "success": true,
      "log_likelihood": -7.47660423214423,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.1637986083085892,
      "success": true,
      "log_likelihood": -22.320472975464522,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.954474134646801,
      "success": true,
      "log_likelihood": -10.978289642536504,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.0587300618300994,
      "success": true,
      "log_likelihood": -22.70284433712516,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.8467555545995737,
      "success": true,
      "log_likelihood": -19.697621374482576,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -1.0076625506676244,
      "success": true,
      "log_likelihood": -22.8835887920164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.9113215677483143,
      "success": true,
      "log_likelihood": -23.21335189100142,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.337456757212744,
      "success": true,
      "log_likelihood": -17.877085609134724,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 10.0,
      "success": true,
      "log_likelihood": -3.051338510244217,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.573304128336341,
      "success": true,
      "log_likelihood": -11.711751833428234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.9720087416027171,
      "success": true,
      "log_likelihood": -23.007456086012713,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.5347621692561326,
      "success": true,
      "log_likelihood": -24.298762176484544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.5125540160650988,
      "success": true,
      "log_likelihood": -24.3495429313177,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.21443053934328674,
      "success": true,
      "log_likelihood": -24.843393897202475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.660186514422269,
      "success": true,
      "log_likelihood": -16.764255374092087,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.9895602498547587,
      "success": true,
      "log_likelihood": -12.992332379907726,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.16812370645483798,
      "success": true,
      "log_likelihood": -24.885513789983964,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 7.600769250200954,
      "success": true,
      "log_likelihood": -7.476604232143967,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 0.46842247488469974,
      "success": true,
      "log_likelihood": -24.445164016352052,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -3.1655605840717436,
      "success": true,
      "log_likelihood": -15.177822702949259,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 4.510651023365304,
      "success": true,
      "log_likelihood": -11.839698804066806,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4995814533930882,
      "success": true,
      "log_likelihood": -21.040845475576653,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.11329523596896957,
      "success": true,
      "log_likelihood": -24.922425844780847,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 9.656146330879144,
      "success": true,
      "log_likelihood": -5.924581022126984,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.06259152541451968,
      "success": true,
      "log_likelihood": -24.94385971529048,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 3.6714825125178616,
      "success": true,
      "log_likelihood": -13.779926216370344,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -2.2956590982139407,
      "success": true,
      "log_likelihood": -18.02658696060203,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": 1.4546704865061806,
      "success": true,
      "log_likelihood": -21.214813231543832,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta": -0.48392129754741303,
      "success": true,
      "log_likelihood": -24.412401525049443,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta": {
        "r": 0.9587517761606432,
        "p": 2.426499372496207e-55
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 39.808349881314065,
  "bic_results": {
    "average_bic": 39.808349881314065,
    "individual_bics": [
      18.53672740274542,
      47.06867252478327,
      46.08259460081876,
      41.774122158775086,
      41.17721826210582,
      51.819344595764306,
      20.2261882013011,
      52.44264642029496,
      20.226188201301156,
      37.451123990623394,
      39.21917413939093,
      20.438431858621335,
      38.85285535659237,
      20.22618820130739,
      20.22618820130689,
      20.226188201316415,
      20.22618820130101,
      51.40066113578942,
      48.913101226540014,
      20.2261882013013,
      48.868963202426066,
      50.738525252135375,
      41.24743723144529,
      48.90227407942992,
      46.326124377268236,
      49.92064415985513,
      48.32661141727269,
      24.92311106428556,
      46.799766887588305,
      52.507793973290134,
      20.226188201352773,
      18.536727402749253,
      46.25818926242087,
      39.447321997268176,
      20.22618820132031,
      52.339866795413826,
      52.79185952069219,
      46.46324917705816,
      53.20927217932027,
      42.53696283170224,
      52.28283912681086,
      26.092175880730874,
      26.01723315993962,
      49.77667893175775,
      51.09332982194715,
      53.343273353645024,
      48.32661141721982,
      44.26311223450303,
      41.177218261778414,
      53.27229310261792,
      53.43563012388456,
      27.26291654580382,
      49.72272390112849,
      53.32554174424418,
      45.02759331953709,
      30.569660852687115,
      29.238096560334093,
      31.87818335198427,
      21.594742354688837,
      51.33310580885156,
      53.09755916858977,
      46.632331506529496,
      18.53672740274457,
      48.22446488938515,
      25.540098223529117,
      48.98920761270643,
      42.97876168742126,
      49.35069652248891,
      50.01022272045895,
      39.33769015672556,
      9.686195958944545,
      27.007022605312578,
      49.598431110481535,
      52.1810432914252,
      52.28260480109151,
      53.27030673286106,
      37.112029686640284,
      29.56818369827156,
      53.35454651842404,
      18.536727402744045,
      52.473846971160214,
      33.93916434435463,
      27.26291654658972,
      45.665209889609415,
      53.4283706280178,
      15.432680982710078,
      53.47123836903707,
      31.143371371196796,
      39.63669285966017,
      46.013145401543774,
      52.408321988554995
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 1,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta: r = 0.959",
  "previous_models": [
    "Specification: utility = beta * log(split_self / ( (token_self / (token_self + token_opp)) * combined_earning ) )\nSummary: A fairness log-ratio model: The utility of accepting a proposed offer is proportional to the log of the ratio between the amount offered to the responder and their normative share, scaled by a single fairness sensitivity parameter. The model is smooth, monotonic, and parameter-lean, with all inputs normalized for psychological interpretability and maximal parameter recovery. No discontinuities or bias terms; all effects flow through the globally-active \u03b2 parameter.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 39.808349881314065\nOverall Accuracy: 0.6514\n\nParameter Recovery:\n- beta: r = 0.959"
  ]
}