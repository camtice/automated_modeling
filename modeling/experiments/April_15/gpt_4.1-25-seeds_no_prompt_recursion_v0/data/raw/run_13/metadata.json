{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Reasoning Step-by-Step\n\n**1. Key Psychological Mechanisms**\n\nIn this class of social bargaining tasks, especially with responder decisions (accept/reject offers), well-established mechanisms include:\n\n- **Self-interest**: The incentive to accept more money (split_self).\n- **Fairness or Inequity Aversion**: Dislike of unequal offers - people tend to reject offers perceived as \"unfair\", even at personal cost. Here \"fairness\" is contextually determined by the ratio of contributions (token_self vs. token_opp) and the *divided share* of the pot.\n- **Proportional Fairness**: People compare their share not only to the other person's share but to what is \"deserved\" based on relative contribution.\n- **Possible Offer Sensitivity**: Some models additionally weight the *absolute* amount being offered, versus only the relative share.\n- **Noise/Stochasticity**: Responder choices are not deterministic even with known variables.\n\n**2. Mechanism Interactions**\n\n- The *utility* of an offer can be thought of as a weighted combination of (a) the money the responder will receive, and (b) positive or negative valuation of the offer's fairness (possibly evaluated as the distance between the responder's share and either the partner's, or \"deserved\" share reflecting tokens found).\n\n- *Inequity aversion* can be modeled as the (dis)utility arising from deviations between received share and either equal split, or \"deserved\" split (based on token_self vs token_opp).\n\n**3. Mathematical Mapping of These Interactions**\n\nGiven the constraint on parameter count, and need for parameter identifiability (low covariance), we should minimize over-parameterization. Prior research suggests models like Fehr-Schmidt or proportional fairness utility functions fit well here.\n\n**Candidate Model:**\n- Utility = \u03b21 \u00d7 (amount received by responder)  \n  \u2212 \u03b22 \u00d7 max[0, (deserved_self - actual_share_of_self)]  \n  \u2212 \u03b23 \u00d7 max[0, (actual_share_of_self - deserved_self)]\n\nBut with *deserved* share calculated as:  \ndeserved_self = token_self / (token_self + token_opp)\n\nBut to limit parameter covariance, we can use a single inequity aversion parameter for both directions of inequity, or allow only aversion to *unfavorable* inequity (respondent getting less than deserved).\n\nAlternatively, a *single* fairness parameter penalizing (deserved_self \u2212 actual_share_self) positive differences.\n\n**4. Parameter Set**\n\n- *beta_self* (weight on own payoff):  [0, 5]  \n- *alpha_fairness* (inequity aversion w.r.t. deserved share): [0, 5]  \nTo minimize covariance, we avoid including explicit intercept or multiple fairness weights unless necessary. All variables are defined by task.\n\n**5. Observable Variables**\n\n- *split_self* (amount offered to responder)  \n- *combined_earning* (total to divide, function of token_self + token_opp)  \n- *token_self*, *token_opp* (determine deserved share)\n\n---\n\n**Model Formalization**\n\nLet:\n- actual_share_self = split_self / combined_earning\n- deserved_share_self = token_self / (token_self + token_opp)\n\nUtility:\nU = beta_self * split_self  \u2212  alpha_fairness * max[0, (deserved_share_self \u2212 actual_share_self)]\n\nPredicted acceptance probability:  \nP(accept) = logistic(U)\n\n---\n\nNow, specifying in required format:\n\n---\n\n<MODEL>\nU = beta_self * split_self - alpha_fairness * max(0, (token_self / (token_self + token_opp) - split_self / combined_earning))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer on this trial. Values above 0 have >50% acceptance probability after logistic transform.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_self\": {\n      \"description\": \"Weight placed on the monetary value the responder would receive.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.0,\n          \"high\": 5.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_fairness\": {\n      \"description\": \"Aversion to being offered less than one's deserved share based on relative contribution.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.0,\n          \"high\": 5.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount (in \u00a3) offered to the responder/participant in current proposal.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 108,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Total tokens found by the responder in this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Total tokens found by the opponent in this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount (in \u00a3) available for division between participant and opponent on this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 216,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA two-parameter utility model for responder behavior that combines the value of the offered amount (split_self) and a penalty for receiving less than one's deserved share (proportional to one's own contribution). The model predicts acceptance using a weighted sum of the offer and fairness penalty, with parameters for monetary reward weighting and fairness aversion, both bounded between 0 and 5.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_self', 'alpha_fairness']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = beta_self * split_self - alpha_fairness * max(0, (token_self / (token_self + token_opp) - split_self / combined_earning))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer on this trial. Values above 0 have >50% acceptance probability after logistic transform.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_self\": {\n      \"description\": \"Weight placed on the monetary value the responder would receive.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.0,\n          \"high\": 5.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_fairness\": {\n      \"description\": \"Aversion to being offered less than one's deserved share based on relative contribution.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.0,\n          \"high\": 5.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount (in \\u00a3) offered to the responder/participant in current proposal.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 108,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Total tokens found by the responder in this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Total tokens found by the opponent in this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount (in \\u00a3) available for division between participant and opponent on this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 216,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n</JSON_DATA>\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_self=1, alpha_fairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        # Avoid division by zero\n        if (token_self + token_opp) == 0 or combined_earning == 0:\n            deserved_share_self = 0\n            actual_share_self = 0\n        else:\n            deserved_share_self = token_self / (token_self + token_opp)\n            actual_share_self = split_self / combined_earning\n\n        fairness_term = max(0, (deserved_share_self - actual_share_self))\n        U = beta_self * split_self - alpha_fairness * fairness_term\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '''\n[\n  {\n    \"ID\": 0,\n    \"group\": \"treatment\",\n    \"trial_number\": 1,\n    \"trial_type\": 1,\n    \"trial_role\": 1,\n    \"token_opp\": 13,\n    \"token_self\": 23,\n    \"combined_earning\": 108,\n    \"split_opp\": 42.12,\n    \"split_self\": 65.88,\n    \"splitperc_opp\": 39,\n    \"splitperc_self\": 61,\n    \"accept\": 1.0,\n    \"accepted_amount\": 65.88,\n    \"accepted_perc\": 61,\n    \"proposed_perc\": 61,\n    \"proposed_amount\": 65.88\n  },\n  {\n    \"ID\": 1,\n    \"group\": \"treatment\",\n    \"trial_number\": 2,\n    \"trial_type\": 1,\n    \"trial_role\": 1,\n    \"token_opp\": 13,\n    \"token_self\": 23,\n    \"combined_earning\": 108,\n    \"split_opp\": 71.28,\n    \"split_self\": 36.72,\n    \"splitperc_opp\": 66,\n    \"splitperc_self\": 34,\n    \"accept\": 0.0,\n    \"accepted_amount\": 0.0,\n    \"accepted_perc\": 0.0,\n    \"proposed_perc\": 34,\n    \"proposed_amount\": 36.72\n  }\n]\n'''\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744728772.794728
    }
  ],
  "learnable_parameters": {
    "beta_self": {
      "description": "Weight placed on the monetary value the responder would receive.",
      "range": {
        "min": 0.0,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.0,
          "high": 5.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "alpha_fairness": {
      "description": "Aversion to being offered less than one's deserved share based on relative contribution.",
      "range": {
        "min": 0.0,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.0,
          "high": 5.0
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = beta_self * split_self - alpha_fairness * max(0, (token_self / (token_self + token_opp) - split_self / combined_earning))",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer on this trial. Values above 0 have >50% acceptance probability after logistic transform.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_self": {
      "description": "Weight placed on the monetary value the responder would receive.",
      "range": {
        "min": 0.0,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.0,
          "high": 5.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "alpha_fairness": {
      "description": "Aversion to being offered less than one's deserved share based on relative contribution.",
      "range": {
        "min": 0.0,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.0,
          "high": 5.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Amount (in \u00a3) offered to the responder/participant in current proposal.",
      "range": {
        "min": 0,
        "max": 108,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Total tokens found by the responder in this trial.",
      "range": {
        "min": 0,
        "max": 36,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Total tokens found by the opponent in this trial.",
      "range": {
        "min": 0,
        "max": 36,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount (in \u00a3) available for division between participant and opponent on this trial.",
      "range": {
        "min": 0,
        "max": 216,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A two-parameter utility model for responder behavior that combines the value of the offered amount (split_self) and a penalty for receiving less than one's deserved share (proportional to one's own contribution). The model predicts acceptance using a weighted sum of the offer and fairness penalty, with parameters for monetary reward weighting and fairness aversion, both bounded between 0 and 5.",
  "target_variable": "accept",
  "full_reasoning": "Reasoning Step-by-Step\n\n**1. Key Psychological Mechanisms**\n\nIn this class of social bargaining tasks, especially with responder decisions (accept/reject offers), well-established mechanisms include:\n\n- **Self-interest**: The incentive to accept more money (split_self).\n- **Fairness or Inequity Aversion**: Dislike of unequal offers - people tend to reject offers perceived as \"unfair\", even at personal cost. Here \"fairness\" is contextually determined by the ratio of contributions (token_self vs. token_opp) and the *divided share* of the pot.\n- **Proportional Fairness**: People compare their share not only to the other person's share but to what is \"deserved\" based on relative contribution.\n- **Possible Offer Sensitivity**: Some models additionally weight the *absolute* amount being offered, versus only the relative share.\n- **Noise/Stochasticity**: Responder choices are not deterministic even with known variables.\n\n**2. Mechanism Interactions**\n\n- The *utility* of an offer can be thought of as a weighted combination of (a) the money the responder will receive, and (b) positive or negative valuation of the offer's fairness (possibly evaluated as the distance between the responder's share and either the partner's, or \"deserved\" share reflecting tokens found).\n\n- *Inequity aversion* can be modeled as the (dis)utility arising from deviations between received share and either equal split, or \"deserved\" split (based on token_self vs token_opp).\n\n**3. Mathematical Mapping of These Interactions**\n\nGiven the constraint on parameter count, and need for parameter identifiability (low covariance), we should minimize over-parameterization. Prior research suggests models like Fehr-Schmidt or proportional fairness utility functions fit well here.\n\n**Candidate Model:**\n- Utility = \u03b21 \u00d7 (amount received by responder)  \n  \u2212 \u03b22 \u00d7 max[0, (deserved_self - actual_share_of_self)]  \n  \u2212 \u03b23 \u00d7 max[0, (actual_share_of_self - deserved_self)]\n\nBut with *deserved* share calculated as:  \ndeserved_self = token_self / (token_self + token_opp)\n\nBut to limit parameter covariance, we can use a single inequity aversion parameter for both directions of inequity, or allow only aversion to *unfavorable* inequity (respondent getting less than deserved).\n\nAlternatively, a *single* fairness parameter penalizing (deserved_self \u2212 actual_share_self) positive differences.\n\n**4. Parameter Set**\n\n- *beta_self* (weight on own payoff):  [0, 5]  \n- *alpha_fairness* (inequity aversion w.r.t. deserved share): [0, 5]  \nTo minimize covariance, we avoid including explicit intercept or multiple fairness weights unless necessary. All variables are defined by task.\n\n**5. Observable Variables**\n\n- *split_self* (amount offered to responder)  \n- *combined_earning* (total to divide, function of token_self + token_opp)  \n- *token_self*, *token_opp* (determine deserved share)\n\n---\n\n**Model Formalization**\n\nLet:\n- actual_share_self = split_self / combined_earning\n- deserved_share_self = token_self / (token_self + token_opp)\n\nUtility:\nU = beta_self * split_self  \u2212  alpha_fairness * max[0, (deserved_share_self \u2212 actual_share_self)]\n\nPredicted acceptance probability:  \nP(accept) = logistic(U)\n\n---\n\nNow, specifying in required format:\n\n---\n\n<MODEL>\nU = beta_self * split_self - alpha_fairness * max(0, (token_self / (token_self + token_opp) - split_self / combined_earning))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer on this trial. Values above 0 have >50% acceptance probability after logistic transform.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_self\": {\n      \"description\": \"Weight placed on the monetary value the responder would receive.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.0,\n          \"high\": 5.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_fairness\": {\n      \"description\": \"Aversion to being offered less than one's deserved share based on relative contribution.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.0,\n          \"high\": 5.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount (in \u00a3) offered to the responder/participant in current proposal.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 108,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Total tokens found by the responder in this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Total tokens found by the opponent in this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount (in \u00a3) available for division between participant and opponent on this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 216,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA two-parameter utility model for responder behavior that combines the value of the offered amount (split_self) and a penalty for receiving less than one's deserved share (proportional to one's own contribution). The model predicts acceptance using a weighted sum of the offer and fairness penalty, with parameters for monetary reward weighting and fairness aversion, both bounded between 0 and 5.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = beta_self * split_self - alpha_fairness * max(0, (token_self / (token_self + token_opp) - split_self / combined_earning))\nSummary: A two-parameter utility model for responder behavior that combines the value of the offered amount (split_self) and a penalty for receiving less than one's deserved share (proportional to one's own contribution). The model predicts acceptance using a weighted sum of the offer and fairness penalty, with parameters for monetary reward weighting and fairness aversion, both bounded between 0 and 5.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_self=1, alpha_fairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        # Avoid division by zero\n        if (token_self + token_opp) == 0 or combined_earning == 0:\n            deserved_share_self = 0\n            actual_share_self = 0\n        else:\n            deserved_share_self = token_self / (token_self + token_opp)\n            actual_share_self = split_self / combined_earning\n\n        fairness_term = max(0, (deserved_share_self - actual_share_self))\n        U = beta_self * split_self - alpha_fairness * fairness_term\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7213064713064713,
  "group_accuracies": {
    "Control": 0.7622739018087855,
    "Cocaine": 0.6846064814814815
  },
  "group_parameter_averages": {
    "Control": {
      "beta_self": 1.3922730600168753,
      "alpha_fairness": 3.6480184407148717
    },
    "Cocaine": {
      "beta_self": 0.3514465644475341,
      "alpha_fairness": 3.913989684511627
    }
  },
  "fitting_results": [
    {
      "beta_self": 0.0,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -13.473219937159067,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.2986542697249336,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -18.40112786196093,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.34623897582834273,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -15.438125692413266,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.2447160407881555,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -16.821974488919906,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.20800862968627837,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -16.272203629546752,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.5222043889672373,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -15.694138889374269,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 5.0,
      "alpha_fairness": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228865,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.5446033246732073,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -15.894171741252725,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 5.0,
      "alpha_fairness": 0.0,
      "success": true,
      "log_likelihood": -0.0064721874752288674,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.1700170336181624,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -16.372325003392138,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.25548253823049977,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -15.105202274677382,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -13.723219937108544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.19394090695527436,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -16.770454566225983,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 5.0,
      "alpha_fairness": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228864,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 5.0,
      "alpha_fairness": 1.7067996168457805e-17,
      "success": true,
      "log_likelihood": -0.006472187475228864,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 5.0,
      "alpha_fairness": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228867,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 5.0,
      "alpha_fairness": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228865,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 1.3839596848472628,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -5.197742616410024,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 1.2973541352989004,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -7.854220018333801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 5.0,
      "alpha_fairness": 2.1956790732806275e-17,
      "success": true,
      "log_likelihood": -0.006472187475228866,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.3400913555105718,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -17.977355202977403,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 1.1405609338903457,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -9.770234598008562,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.182554469250229,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -18.774577199653887,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.3634817422097313,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -18.186008497818523,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.24337977834777616,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -18.441914988961848,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.43475008731478465,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -15.926571581403799,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.41513560997518023,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -16.627623539393028,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.04523279743152165,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -14.68309506931038,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 1.0510893586602685,
      "alpha_fairness": 3.706115750138637,
      "success": true,
      "log_likelihood": -10.191956206060057,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.5976721838717325,
      "alpha_fairness": 3.4592356745497677,
      "success": true,
      "log_likelihood": -16.73005849434743,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 5.0,
      "alpha_fairness": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228866,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -13.473219937159067,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.22356894721140055,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -21.050485883760157,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.18507586542111032,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -17.71943279720874,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 5.0,
      "alpha_fairness": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228865,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.6221991279630255,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -13.853305233312144,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.6714146141828456,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -12.288462225826603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.2760631405750573,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -18.09064745168732,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.4564300598957414,
      "alpha_fairness": 4.470167429677286,
      "success": true,
      "log_likelihood": -19.450713968660324,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.8581636636168319,
      "alpha_fairness": 0.8652339596921667,
      "success": true,
      "log_likelihood": -9.746569601294311,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.3608303035734988,
      "alpha_fairness": 4.364040136681627,
      "success": true,
      "log_likelihood": -20.871740043151465,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -14.973219936793885,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.9348676132057352,
      "alpha_fairness": 0.0,
      "success": true,
      "log_likelihood": -7.745036530352257,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.4064614247647678,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -18.26904679676432,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.4864757849436574,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -15.97961959475259,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.6654329451332347,
      "alpha_fairness": 4.359529616158082,
      "success": true,
      "log_likelihood": -15.985267941215875,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.34009147047125554,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -19.060688536005433,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.19394095834544783,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -19.103787898990937,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.15263777674437692,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -17.46108048381229,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.21232299444730912,
      "alpha_fairness": 2.620771825259618,
      "success": true,
      "log_likelihood": -23.220522412751457,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.4965601343042708,
      "alpha_fairness": 3.483532821824364,
      "success": true,
      "log_likelihood": -18.611405951912268,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -15.223219936734466,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.3796170400551118,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -18.878741399409762,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.3355098596714566,
      "alpha_fairness": 3.0447630285869565,
      "success": true,
      "log_likelihood": -21.42132510864182,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.1231972070627778,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -18.62414070998986,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.11710296065140723,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -15.130919326855498,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.048919004608383644,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -15.745243957926679,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.5688290716510456,
      "alpha_fairness": 0.0,
      "success": true,
      "log_likelihood": -13.680488206348318,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -13.97321993705485,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.7363384086183642,
      "alpha_fairness": 2.9990380782872084,
      "success": true,
      "log_likelihood": -13.962319176481655,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.36511236480657805,
      "alpha_fairness": 3.8720894530204624,
      "success": true,
      "log_likelihood": -20.920798802183075,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.2732874114559472,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -18.75638312351098,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -13.47321993715907,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.26092041708628555,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -19.95028366069151,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.006572108637683395,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -15.220672784175076,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.4186464144470628,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -16.669223474282227,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.9705865403507384,
      "alpha_fairness": 1.4580094537843533,
      "success": true,
      "log_likelihood": -8.94518368146094,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.8485112611887943,
      "alpha_fairness": 3.2031823455590236,
      "success": true,
      "log_likelihood": -12.38257551401429,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.4647301460885501,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -16.097561226109026,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.678023300427246,
      "alpha_fairness": 0.0,
      "success": true,
      "log_likelihood": -11.540124489363471,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -12.639886604012373,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -15.306553270035177,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.3555815742591446,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -17.87231723336508,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.7469567706319017,
      "alpha_fairness": 3.9369526772265404,
      "success": true,
      "log_likelihood": -14.470258476617639,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.20433356922691304,
      "alpha_fairness": 3.3701435345650785,
      "success": true,
      "log_likelihood": -22.974152561670934,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.5599584499046367,
      "alpha_fairness": 4.793396431261326,
      "success": true,
      "log_likelihood": -17.801152322395364,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 1.0304000709054508,
      "alpha_fairness": 1.0705993496924258,
      "success": true,
      "log_likelihood": -7.828699223446578,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -14.139886603586518,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.2979948990796185,
      "alpha_fairness": 2.33560070776045,
      "success": true,
      "log_likelihood": -21.96119509943263,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -13.473219937159069,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.18646593118379934,
      "alpha_fairness": 2.521103524335454,
      "success": true,
      "log_likelihood": -23.514499465472756,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.666946516487071,
      "alpha_fairness": 0.0,
      "success": true,
      "log_likelihood": -11.74186065422018,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -14.223219937004327,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.40132480723289243,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -14.617463509486761,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.16153190779196402,
      "alpha_fairness": 1.0709614096929405,
      "success": true,
      "log_likelihood": -23.867465275679137,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -13.47321993715907,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.45831940229113655,
      "alpha_fairness": 3.6009205405570723,
      "success": true,
      "log_likelihood": -19.346855418782106,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -15.139886603438203,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 1.5614681977770786,
      "alpha_fairness": 3.9061749407894206,
      "success": true,
      "log_likelihood": -6.022845580494852,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.37961770091632435,
      "alpha_fairness": 5.0,
      "success": true,
      "log_likelihood": -15.712074733923652,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.30870828983195236,
      "alpha_fairness": 1.2247351181973127,
      "success": true,
      "log_likelihood": -21.17882680313585,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_self": {
        "r": 0.8324750752472463,
        "p": 7.107262767350741e-27
      },
      "alpha_fairness": {
        "r": 0.23553023748520902,
        "p": 0.018325249662317973
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 35.72178971538055,
  "bic_Control": 31.05767068301422,
  "bic_Cocaine": 39.900063015208715,
  "bic_results": {
    "average_bic": 35.72178971538055,
    "individual_bics": [
      34.113477751230356,
      43.96929360083408,
      38.04328926173875,
      40.81098685475203,
      39.71144513600572,
      38.555315655660756,
      7.179982251862677,
      38.95538135941767,
      7.179982251862677,
      39.911687883696494,
      37.37744242626698,
      34.61347775112931,
      40.70794700936418,
      7.179982251862677,
      7.179982251862677,
      7.179982251862677,
      7.179982251862677,
      17.56252310973227,
      22.87547791357982,
      7.179982251862677,
      43.121748282867024,
      26.707507072929346,
      44.71619227621999,
      43.539054872549265,
      44.050867854835914,
      39.020181039719816,
      40.422284955698274,
      36.53322801553298,
      27.550950289032336,
      40.627154865607075,
      7.179982251862677,
      34.113477751230356,
      49.26800964443253,
      42.6059034713297,
      7.179982251862677,
      34.87364834353651,
      31.743962328565424,
      43.34833278028686,
      46.068465814232866,
      26.66017707950084,
      48.91051796321515,
      37.11347775049999,
      22.657110937616736,
      43.70513147044086,
      39.1262770664174,
      39.13757375934397,
      45.288414948923084,
      45.37461367489409,
      42.089198844536796,
      53.60808270241513,
      44.38984978073675,
      37.61347775038115,
      44.92452067573174,
      50.00968809419586,
      44.41531929689194,
      37.428876530623214,
      38.657525792765576,
      34.528014289608855,
      35.11347775102192,
      35.09167622987553,
      49.00863548127837,
      44.679804123934176,
      34.11347775123036,
      47.06760519829524,
      37.60838344526237,
      40.50548482547667,
      25.057405239834097,
      31.9321889049408,
      39.36216032913027,
      30.24728685563916,
      32.44681108493697,
      37.78014441698257,
      42.91167234364238,
      36.1075548301475,
      53.115343000254086,
      42.769342521702946,
      22.824436323805376,
      35.446811084085255,
      51.08942807577748,
      34.113477751230356,
      54.19603680785773,
      30.650759185352577,
      35.61347775092087,
      36.40196489588574,
      54.90196842827049,
      34.11347775123036,
      45.86074871447643,
      37.446811083788624,
      19.212729037901923,
      38.591187344759526,
      49.524691483183915
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        34.113477751230356,
        43.96929360083408,
        38.04328926173875,
        40.81098685475203,
        39.71144513600572,
        38.555315655660756,
        7.179982251862677,
        38.95538135941767,
        7.179982251862677,
        39.911687883696494,
        37.37744242626698,
        34.61347775112931,
        40.70794700936418,
        7.179982251862677,
        7.179982251862677,
        7.179982251862677,
        7.179982251862677,
        17.56252310973227,
        22.87547791357982,
        7.179982251862677,
        43.121748282867024,
        26.707507072929346,
        44.71619227621999,
        43.539054872549265,
        44.050867854835914,
        39.020181039719816,
        40.422284955698274,
        36.53322801553298,
        27.550950289032336,
        40.627154865607075,
        7.179982251862677,
        34.113477751230356,
        49.26800964443253,
        42.6059034713297,
        7.179982251862677,
        34.87364834353651,
        31.743962328565424,
        43.34833278028686,
        46.068465814232866,
        26.66017707950084,
        48.91051796321515,
        37.11347775049999,
        22.657110937616736
      ],
      "Cocaine": [
        43.70513147044086,
        39.1262770664174,
        39.13757375934397,
        45.288414948923084,
        45.37461367489409,
        42.089198844536796,
        53.60808270241513,
        44.38984978073675,
        37.61347775038115,
        44.92452067573174,
        50.00968809419586,
        44.41531929689194,
        37.428876530623214,
        38.657525792765576,
        34.528014289608855,
        35.11347775102192,
        35.09167622987553,
        49.00863548127837,
        44.679804123934176,
        34.11347775123036,
        47.06760519829524,
        37.60838344526237,
        40.50548482547667,
        25.057405239834097,
        31.9321889049408,
        39.36216032913027,
        30.24728685563916,
        32.44681108493697,
        37.78014441698257,
        42.91167234364238,
        36.1075548301475,
        53.115343000254086,
        42.769342521702946,
        22.824436323805376,
        35.446811084085255,
        51.08942807577748,
        34.113477751230356,
        54.19603680785773,
        30.650759185352577,
        35.61347775092087,
        36.40196489588574,
        54.90196842827049,
        34.11347775123036,
        45.86074871447643,
        37.446811083788624,
        19.212729037901923,
        38.591187344759526,
        49.524691483183915
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_self: r = 0.832\n- alpha_fairness: r = 0.236",
  "previous_models": [
    "Specification: U = beta_self * split_self - alpha_fairness * max(0, (token_self / (token_self + token_opp) - split_self / combined_earning))\nSummary: A two-parameter utility model for responder behavior that combines the value of the offered amount (split_self) and a penalty for receiving less than one's deserved share (proportional to one's own contribution). The model predicts acceptance using a weighted sum of the offer and fairness penalty, with parameters for monetary reward weighting and fairness aversion, both bounded between 0 and 5.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 35.72178971538055\nOverall Accuracy: 0.7213\nGroup Accuracies:\n- Control: 0.7623\n- Cocaine: 0.6846\n\nParameter Recovery:\n- beta_self: r = 0.832\n- alpha_fairness: r = 0.236"
  ]
}