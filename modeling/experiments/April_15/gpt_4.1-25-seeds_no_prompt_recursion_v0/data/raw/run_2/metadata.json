{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let me reason step by step to ensure a sound, compact, and interpretable computational model, considerate of parameter identifiability and the need for successful parameter recovery.\n\n---\n\n### 1. **Key psychological mechanisms involved**\n\nIn this responder role, the participant decides to accept or reject a proposed split of a shared pot, which is determined by both the participant\u2019s and the opponent\u2019s prior contributions (\"token_self\", \"token_opp\"). There are several well-established psychological determinants that govern such decisions:\n\n- **Self-Interest**: Participants want to maximize their own monetary gain.\n- **Fairness and Inequity Aversion**: There is an aversion to unequal outcomes, particularly where the participant gets less than what is \"fair\" relative to their contribution.\n- **Contribution-based entitlement**: \"Fairness\" may consider not just equal splits but proportionality to tokens found by each party (i.e., the participant may compare \"split_self\" to how much they 'deserved' given token_self/(token_self+token_opp)).\n\n### 2. **How these mechanisms interact**\n\n- The participant evaluates the offer both in raw monetary terms and relative to a fairness norm (often the proportional contribution).\n- There might be asymmetric sensitivity to disadvantages (getting less than deserved) versus advantageous inequity (getting more than deserved).\n- For this model, to minimize parameter number and maximize identifiability, I will assume a single general sensitivity to inequity (absolute difference from the fair share).\n\n### 3. **Mathematical form**\n\n- **Fair Share**: The perceived \u201cdeserved\u201d (proportion) is token_self / (token_self + token_opp)\n- **Inequity**: The absolute difference between the proposed percentage to the participant (splitperc_self) and their deserved proportion (in %) quantifies fairness violation\n- **Utility**: A linear combination of self-gain (absolute amount in \u00a3), and the size of the fairness violation.\n- The larger the utility, the more likely the response will be \"accept\"; utility below 0 \u2192 <50% acceptance likelihood.\n\n### 4. **Model parameters**\n\n- **beta_self**: Weight for monetary gain (favoring acceptance with higher amount)\n- **beta_fairness**: Sensitivity (negative) to deviation from deserved share\n- **bias**: Overall acceptance bias (captures unmodeled preferences/noise/constant)\n  \nI will not include separate positive/negative inequity aversion for maximal recovery reliability and identifiability.\n\n### 5. **Mapping variables to behavior**\n\n- For each decision, compute utility: U = (beta_self \u00d7 split_self) + (beta_fairness \u00d7 |splitperc_self \u2212 fairness_perc|) + bias\n- Probability(accept) = sigmoid(U)\n\n---\n\n## Model Specification\n\n<MODEL>\nfairness_perc = 100 * token_self / (token_self + token_opp)\ninequity = abs(splitperc_self - fairness_perc)\nU = beta_self * split_self + beta_fairness * inequity + bias\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"fairness_perc\": {\n      \"description\": \"Fair (deserved) share for the participant, as a percentage based on contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed share for the participant, in percentage of combined earnings.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 216,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"inequity\": {\n      \"description\": \"Absolute deviation (in percentage points) between proposed share and fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_self\": {\n      \"description\": \"Weight for own monetary gain (sensitivity to split_self, in per-\u00a3 units).\",\n      \"range\": {\n        \"min\": -2,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_fairness\": {\n      \"description\": \"Weight for inequity aversion (negative: more negative means more averse).\",\n      \"range\": {\n        \"min\": -2,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"bias\": {\n      \"description\": \"General acceptance bias (intercept).\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility for accepting the offer (higher means more likely to accept).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility-based model for responder choices, combining linear sensitivity to monetary self-gain and absolute deviation from a contribution-based fair share. The model has three learnable parameters: one for self-gain, one for fairness aversion, and a general acceptance bias. The offer's utility is converted to an acceptance probability via a sigmoid, targeting binary accept/reject decisions.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_self', 'beta_fairness', 'bias']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                fairness_perc = 100 * token_self / (token_self + token_opp)\ninequity = abs(splitperc_self - fairness_perc)\nU = beta_self * split_self + beta_fairness * inequity + bias\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"fairness_perc\": {\n      \"description\": \"Fair (deserved) share for the participant, as a percentage based on contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed share for the participant, in percentage of combined earnings.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 216,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"inequity\": {\n      \"description\": \"Absolute deviation (in percentage points) between proposed share and fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_self\": {\n      \"description\": \"Weight for own monetary gain (sensitivity to split_self, in per-\\u00a3 units).\",\n      \"range\": {\n        \"min\": -2,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_fairness\": {\n      \"description\": \"Weight for inequity aversion (negative: more negative means more averse).\",\n      \"range\": {\n        \"min\": -2,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"bias\": {\n      \"description\": \"General acceptance bias (intercept).\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility for accepting the offer (higher means more likely to accept).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_self=0, beta_fairness=0, bias=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        # Compute fairness_perc\n        if (token_self + token_opp) == 0:\n            fairness_perc = 50  # or 0, or 100; arbitrarily set to 50 when denominator is zero\n        else:\n            fairness_perc = 100 * token_self / (token_self + token_opp)\n\n        # Compute inequity\n        inequity = abs(splitperc_self - fairness_perc)\n\n        # Compute utility\n        U = beta_self * split_self + beta_fairness * inequity + bias\n\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744728332.75738
    }
  ],
  "learnable_parameters": {
    "beta_self": {
      "description": "Weight for own monetary gain (sensitivity to split_self, in per-\u00a3 units).",
      "range": {
        "min": -2,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_fairness": {
      "description": "Weight for inequity aversion (negative: more negative means more averse).",
      "range": {
        "min": -2,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "bias": {
      "description": "General acceptance bias (intercept).",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "fairness_perc = 100 * token_self / (token_self + token_opp)\ninequity = abs(splitperc_self - fairness_perc)\nU = beta_self * split_self + beta_fairness * inequity + bias",
  "variable_descriptions": {
    "fairness_perc": {
      "description": "Fair (deserved) share for the participant, as a percentage based on contribution.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": 36,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": 36,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "splitperc_self": {
      "description": "Proposed share for the participant, in percentage of combined earnings.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3).",
      "range": {
        "min": 0,
        "max": 216,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "inequity": {
      "description": "Absolute deviation (in percentage points) between proposed share and fair share.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_self": {
      "description": "Weight for own monetary gain (sensitivity to split_self, in per-\u00a3 units).",
      "range": {
        "min": -2,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_fairness": {
      "description": "Weight for inequity aversion (negative: more negative means more averse).",
      "range": {
        "min": -2,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "bias": {
      "description": "General acceptance bias (intercept).",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Utility for accepting the offer (higher means more likely to accept).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A utility-based model for responder choices, combining linear sensitivity to monetary self-gain and absolute deviation from a contribution-based fair share. The model has three learnable parameters: one for self-gain, one for fairness aversion, and a general acceptance bias. The offer's utility is converted to an acceptance probability via a sigmoid, targeting binary accept/reject decisions.",
  "target_variable": "accept",
  "full_reasoning": "Let me reason step by step to ensure a sound, compact, and interpretable computational model, considerate of parameter identifiability and the need for successful parameter recovery.\n\n---\n\n### 1. **Key psychological mechanisms involved**\n\nIn this responder role, the participant decides to accept or reject a proposed split of a shared pot, which is determined by both the participant\u2019s and the opponent\u2019s prior contributions (\"token_self\", \"token_opp\"). There are several well-established psychological determinants that govern such decisions:\n\n- **Self-Interest**: Participants want to maximize their own monetary gain.\n- **Fairness and Inequity Aversion**: There is an aversion to unequal outcomes, particularly where the participant gets less than what is \"fair\" relative to their contribution.\n- **Contribution-based entitlement**: \"Fairness\" may consider not just equal splits but proportionality to tokens found by each party (i.e., the participant may compare \"split_self\" to how much they 'deserved' given token_self/(token_self+token_opp)).\n\n### 2. **How these mechanisms interact**\n\n- The participant evaluates the offer both in raw monetary terms and relative to a fairness norm (often the proportional contribution).\n- There might be asymmetric sensitivity to disadvantages (getting less than deserved) versus advantageous inequity (getting more than deserved).\n- For this model, to minimize parameter number and maximize identifiability, I will assume a single general sensitivity to inequity (absolute difference from the fair share).\n\n### 3. **Mathematical form**\n\n- **Fair Share**: The perceived \u201cdeserved\u201d (proportion) is token_self / (token_self + token_opp)\n- **Inequity**: The absolute difference between the proposed percentage to the participant (splitperc_self) and their deserved proportion (in %) quantifies fairness violation\n- **Utility**: A linear combination of self-gain (absolute amount in \u00a3), and the size of the fairness violation.\n- The larger the utility, the more likely the response will be \"accept\"; utility below 0 \u2192 <50% acceptance likelihood.\n\n### 4. **Model parameters**\n\n- **beta_self**: Weight for monetary gain (favoring acceptance with higher amount)\n- **beta_fairness**: Sensitivity (negative) to deviation from deserved share\n- **bias**: Overall acceptance bias (captures unmodeled preferences/noise/constant)\n  \nI will not include separate positive/negative inequity aversion for maximal recovery reliability and identifiability.\n\n### 5. **Mapping variables to behavior**\n\n- For each decision, compute utility: U = (beta_self \u00d7 split_self) + (beta_fairness \u00d7 |splitperc_self \u2212 fairness_perc|) + bias\n- Probability(accept) = sigmoid(U)\n\n---\n\n## Model Specification\n\n<MODEL>\nfairness_perc = 100 * token_self / (token_self + token_opp)\ninequity = abs(splitperc_self - fairness_perc)\nU = beta_self * split_self + beta_fairness * inequity + bias\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"fairness_perc\": {\n      \"description\": \"Fair (deserved) share for the participant, as a percentage based on contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed share for the participant, in percentage of combined earnings.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 216,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"inequity\": {\n      \"description\": \"Absolute deviation (in percentage points) between proposed share and fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_self\": {\n      \"description\": \"Weight for own monetary gain (sensitivity to split_self, in per-\u00a3 units).\",\n      \"range\": {\n        \"min\": -2,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_fairness\": {\n      \"description\": \"Weight for inequity aversion (negative: more negative means more averse).\",\n      \"range\": {\n        \"min\": -2,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"bias\": {\n      \"description\": \"General acceptance bias (intercept).\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility for accepting the offer (higher means more likely to accept).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility-based model for responder choices, combining linear sensitivity to monetary self-gain and absolute deviation from a contribution-based fair share. The model has three learnable parameters: one for self-gain, one for fairness aversion, and a general acceptance bias. The offer's utility is converted to an acceptance probability via a sigmoid, targeting binary accept/reject decisions.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: fairness_perc = 100 * token_self / (token_self + token_opp)\ninequity = abs(splitperc_self - fairness_perc)\nU = beta_self * split_self + beta_fairness * inequity + bias\nSummary: A utility-based model for responder choices, combining linear sensitivity to monetary self-gain and absolute deviation from a contribution-based fair share. The model has three learnable parameters: one for self-gain, one for fairness aversion, and a general acceptance bias. The offer's utility is converted to an acceptance probability via a sigmoid, targeting binary accept/reject decisions.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_self=0, beta_fairness=0, bias=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        # Compute fairness_perc\n        if (token_self + token_opp) == 0:\n            fairness_perc = 50  # or 0, or 100; arbitrarily set to 50 when denominator is zero\n        else:\n            fairness_perc = 100 * token_self / (token_self + token_opp)\n\n        # Compute inequity\n        inequity = abs(splitperc_self - fairness_perc)\n\n        # Compute utility\n        U = beta_self * split_self + beta_fairness * inequity + bias\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.78998778998779,
  "group_accuracies": {
    "Control": 0.8397932816537468,
    "Cocaine": 0.7453703703703703
  },
  "group_parameter_averages": {
    "Control": {
      "beta_self": 0.9266874490325705,
      "beta_fairness": 0.4575378556298029,
      "bias": 3.7618735948239337
    },
    "Cocaine": {
      "beta_self": 0.6776280737592633,
      "beta_fairness": 0.012293799382831474,
      "bias": 0.03883284302867561
    }
  },
  "fitting_results": [
    {
      "beta_self": 0.8598814281718087,
      "beta_fairness": -0.008616606458602936,
      "bias": -6.1271297524349615,
      "success": true,
      "log_likelihood": -7.324116239837383,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.2393312588215141,
      "beta_fairness": -0.11234624813859036,
      "bias": 1.4711916041610997,
      "success": true,
      "log_likelihood": -17.437311598428618,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.33273802871875185,
      "beta_fairness": -0.3667280554557284,
      "bias": 6.5322287146028435,
      "success": true,
      "log_likelihood": -7.7372757641542345,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.8730365591911324,
      "beta_fairness": -0.13509141434997496,
      "bias": -1.0601741756383534,
      "success": true,
      "log_likelihood": -13.832334735328244,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": -0.25716474745844936,
      "beta_fairness": -0.4965160072191237,
      "bias": 10.0,
      "success": true,
      "log_likelihood": -5.27849945191579,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.4469367551096339,
      "beta_fairness": -0.12102160274979389,
      "bias": 1.912828036559686,
      "success": true,
      "log_likelihood": -14.409226084675195,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 2.0,
      "beta_fairness": 2.0,
      "bias": 10.0,
      "success": true,
      "log_likelihood": 2.798250519979402e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.16852911092713355,
      "beta_fairness": -0.14468044293997484,
      "bias": 3.6360933253494085,
      "success": true,
      "log_likelihood": -13.846032739217582,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 1.5040962329945196,
      "beta_fairness": 0.3261844944349798,
      "bias": 9.111617075292664,
      "success": true,
      "log_likelihood": -1.845808342919417e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.3070905197268711,
      "beta_fairness": -0.23433749916018606,
      "bias": 2.52710706142519,
      "success": true,
      "log_likelihood": -11.584401121703982,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 2.0,
      "beta_fairness": -1.0443639629950507,
      "bias": 9.956616346366935,
      "success": true,
      "log_likelihood": -2.1534497496164717,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.804509776224554,
      "beta_fairness": -0.05059523273322451,
      "bias": -4.81951094396748,
      "success": true,
      "log_likelihood": -8.554591318914232,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.13535988194713877,
      "beta_fairness": -0.21935330642759537,
      "bias": 3.207884040535627,
      "success": true,
      "log_likelihood": -12.236513599011483,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 2.0,
      "beta_fairness": 2.0,
      "bias": 10.0,
      "success": true,
      "log_likelihood": 2.7982505199794017e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 2.0,
      "beta_fairness": 2.0,
      "bias": 10.0,
      "success": true,
      "log_likelihood": 2.7982505199794017e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 2.0,
      "beta_fairness": 2.0,
      "bias": 5.353919377009861,
      "success": true,
      "log_likelihood": -7.992300492379174e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 1.4746040764971813,
      "beta_fairness": 1.8913402888707214,
      "bias": 5.283692009904654,
      "success": true,
      "log_likelihood": -1.0809310202328207e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 2.0,
      "beta_fairness": 2.0,
      "bias": 0.906834962753759,
      "success": true,
      "log_likelihood": -115.12926177759228,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.20735073185301603,
      "beta_fairness": -0.25511667376897895,
      "bias": 10.0,
      "success": true,
      "log_likelihood": -5.076339570861525,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 2.0,
      "beta_fairness": 2.0,
      "bias": 10.0,
      "success": true,
      "log_likelihood": 2.7982505199794017e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": -0.22259712068993018,
      "beta_fairness": -0.19251968202557723,
      "bias": 5.260356839179258,
      "success": true,
      "log_likelihood": -13.764186044494588,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 2.0,
      "beta_fairness": 2.0,
      "bias": 10.0,
      "success": true,
      "log_likelihood": -115.129254647404,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.8940537535180418,
      "beta_fairness": -0.03845348294670027,
      "bias": -3.1912866010756953,
      "success": true,
      "log_likelihood": -16.48923081305119,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.5787446365555773,
      "beta_fairness": -0.07496255918811183,
      "bias": -0.31289732212148585,
      "success": true,
      "log_likelihood": -17.81012398667401,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": -0.7242599167038659,
      "beta_fairness": -0.2731856346776343,
      "bias": 8.377151699394114,
      "success": true,
      "log_likelihood": -11.07400409454118,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.41611511056671513,
      "beta_fairness": -0.1529715314538006,
      "bias": 2.2967382772593106,
      "success": true,
      "log_likelihood": -13.509943736812128,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.6992850932899564,
      "beta_fairness": -0.09847947317850275,
      "bias": -0.054590901374434564,
      "success": true,
      "log_likelihood": -15.4758411822561,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.5064071224705636,
      "beta_fairness": -0.3322438217093751,
      "bias": 1.8920290873286587,
      "success": true,
      "log_likelihood": -8.197711872882055,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 2.0,
      "beta_fairness": 2.0,
      "bias": 6.036907074381471,
      "success": true,
      "log_likelihood": -92.10340375874974,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": -0.17686358053008996,
      "beta_fairness": -0.12122732067665169,
      "bias": 4.9908308011751465,
      "success": true,
      "log_likelihood": -14.216950626043648,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 2.0,
      "beta_fairness": 2.0,
      "bias": 10.0,
      "success": true,
      "log_likelihood": 2.7982505199794017e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.8599819477223827,
      "beta_fairness": -0.008594442348223862,
      "bias": -6.127893509233755,
      "success": true,
      "log_likelihood": -7.32411625742367,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.6834329848582962,
      "beta_fairness": -0.011433334936350122,
      "bias": -2.5816590552048515,
      "success": true,
      "log_likelihood": -19.980153596430394,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.4506636401488849,
      "beta_fairness": -0.11250779419925992,
      "bias": -0.024818577758456122,
      "success": true,
      "log_likelihood": -16.34393352378184,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 2.0,
      "beta_fairness": 2.0,
      "bias": 9.48357868970806,
      "success": true,
      "log_likelihood": 2.2562522957605056e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 2.0,
      "beta_fairness": -0.04730981869000947,
      "bias": -4.356639145586282,
      "success": true,
      "log_likelihood": -10.309639122608449,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.9026172396223464,
      "beta_fairness": -0.1562135467455496,
      "bias": 1.9703644589406515,
      "success": true,
      "log_likelihood": -9.763859083960076,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": -0.08588704641497245,
      "beta_fairness": -0.1704321711820033,
      "bias": 3.8409221971850562,
      "success": true,
      "log_likelihood": -14.866724529761814,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": -0.09007088944241157,
      "beta_fairness": -0.10601896764027789,
      "bias": 3.5128670423597432,
      "success": true,
      "log_likelihood": -17.644372939694865,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 2.0,
      "beta_fairness": 2.0,
      "bias": 10.0,
      "success": true,
      "log_likelihood": -69.0775527873231,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": -0.08877219302025416,
      "beta_fairness": -0.0931554734077148,
      "bias": 2.870240961289516,
      "success": true,
      "log_likelihood": -19.50961617767397,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.2918175907786018,
      "beta_fairness": -0.13515873656575042,
      "bias": -0.2959357637594218,
      "success": true,
      "log_likelihood": -12.951970918064365,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 1.8565923229458827,
      "beta_fairness": 0.7702378527441431,
      "bias": 0.2811006434216169,
      "success": true,
      "log_likelihood": -22.960706542824344,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.6653338140945915,
      "beta_fairness": -0.05861540045846335,
      "bias": -0.7774637236927461,
      "success": true,
      "log_likelihood": -18.04271721886492,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.5588681290983336,
      "beta_fairness": -0.11075503348202786,
      "bias": 1.0914994683780952,
      "success": true,
      "log_likelihood": -14.872823319609124,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 1.0271636922126681,
      "beta_fairness": -0.01795514303666743,
      "bias": -1.7337682075309886,
      "success": true,
      "log_likelihood": -15.577367622705898,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.35825432586287664,
      "beta_fairness": -0.07868356938692707,
      "bias": 0.5277226125133775,
      "success": true,
      "log_likelihood": -18.98481273850584,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.5967873196595841,
      "beta_fairness": -0.054640724890977675,
      "bias": -1.5861953107824343,
      "success": true,
      "log_likelihood": -18.388182629638475,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": -0.6577504929573844,
      "beta_fairness": -0.2886621174633539,
      "bias": 7.49703637643965,
      "success": true,
      "log_likelihood": -10.255107637406836,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.46961362227069064,
      "beta_fairness": -0.0014822387346027596,
      "bias": -1.4981915751419954,
      "success": true,
      "log_likelihood": -22.68161061120378,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.5228731201096105,
      "beta_fairness": -0.032082312771938716,
      "bias": -0.13362593882682983,
      "success": true,
      "log_likelihood": -18.716483806648682,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.5486168250194937,
      "beta_fairness": -0.018442342985612904,
      "bias": -3.7553126628320532,
      "success": true,
      "log_likelihood": -12.137358210817476,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.8165722012980108,
      "beta_fairness": -0.03774017365749229,
      "bias": -1.8865051311381724,
      "success": true,
      "log_likelihood": -18.166753721783238,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.8566471797345565,
      "beta_fairness": 0.012365272649954871,
      "bias": -2.805222305029647,
      "success": true,
      "log_likelihood": -19.69848018374219,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": -0.24369133100307003,
      "beta_fairness": -0.14749475730279032,
      "bias": 3.2273649392984227,
      "success": true,
      "log_likelihood": -16.401190334235448,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 2.0,
      "beta_fairness": -0.7629624066571771,
      "bias": 3.0696023367714287,
      "success": true,
      "log_likelihood": -5.835096482463076,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.34729845963649925,
      "beta_fairness": -0.16407008143512208,
      "bias": 0.33306656434776055,
      "success": true,
      "log_likelihood": -12.989661347990042,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.42676314755364814,
      "beta_fairness": 0.11418467081914768,
      "bias": -1.2773619841399466,
      "success": true,
      "log_likelihood": -10.280219597273257,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.7552687523290188,
      "beta_fairness": -0.03296236071365128,
      "bias": -4.824866537838467,
      "success": true,
      "log_likelihood": -9.112286857728071,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 1.9990754895440377,
      "beta_fairness": 1.1110759291987051,
      "bias": 9.484947131618213,
      "success": true,
      "log_likelihood": -161.1733251783102,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.2544261065916924,
      "beta_fairness": -0.048652026557636355,
      "bias": 0.6636925430608085,
      "success": true,
      "log_likelihood": -21.01548301340307,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": -0.05000627313474313,
      "beta_fairness": -0.14047709288457694,
      "bias": 3.0999490915205996,
      "success": true,
      "log_likelihood": -16.650791333353183,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.8598862380208829,
      "beta_fairness": -0.008607977118775253,
      "bias": -6.127217222067868,
      "success": true,
      "log_likelihood": -7.324116229697713,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.6613903118482294,
      "beta_fairness": -0.03531052644043057,
      "bias": -1.8746591214592963,
      "success": true,
      "log_likelihood": -19.34783654912863,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.7697444852552952,
      "beta_fairness": -0.12146042978309257,
      "bias": -2.450137663204816,
      "success": true,
      "log_likelihood": -11.889500125280525,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.7456213641789953,
      "beta_fairness": -0.0918447114325213,
      "bias": -0.34764680448821483,
      "success": true,
      "log_likelihood": -15.576250868648085,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 2.0,
      "beta_fairness": 2.0,
      "bias": 3.3731320780644625,
      "success": true,
      "log_likelihood": -69.07755339193339,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 2.0,
      "beta_fairness": 2.0,
      "bias": 10.0,
      "success": true,
      "log_likelihood": -115.12925464740404,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 1.4847206754858773,
      "beta_fairness": -0.05076973886575946,
      "bias": -3.5729994109632113,
      "success": true,
      "log_likelihood": -13.08221328661296,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": -0.5591902106807551,
      "beta_fairness": -0.11814038350352567,
      "bias": 7.545240242384471,
      "success": true,
      "log_likelihood": -8.801510949079848,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.6429134366649161,
      "beta_fairness": -0.14470739176867436,
      "bias": -2.995006381013442,
      "success": true,
      "log_likelihood": -7.262053204206061,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.6779781526724716,
      "beta_fairness": -0.006001486477815557,
      "bias": -4.547916276944546,
      "success": true,
      "log_likelihood": -11.699400407008842,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.4709026262022101,
      "beta_fairness": -0.09519129807036733,
      "bias": 0.47424446018989236,
      "success": true,
      "log_likelihood": -17.213697500603807,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.891567470569724,
      "beta_fairness": -0.029152421712540642,
      "bias": -0.6794629379300893,
      "success": true,
      "log_likelihood": -14.454799350516936,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.25971022221881523,
      "beta_fairness": -0.034991984754140865,
      "bias": -0.17977284638230043,
      "success": true,
      "log_likelihood": -22.65184444650204,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.20717023663353512,
      "beta_fairness": -0.08416684531818731,
      "bias": 2.149887169711182,
      "success": true,
      "log_likelihood": -17.18058698403054,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 2.0,
      "beta_fairness": 1.1019433733880295,
      "bias": 7.898583971792014,
      "success": true,
      "log_likelihood": -46.05170194468087,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 1.363872735204399,
      "beta_fairness": -2.0,
      "bias": -10.0,
      "success": true,
      "log_likelihood": -23.274340698754898,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.5220708743070035,
      "beta_fairness": -0.00023132337625346314,
      "bias": -1.3126029410505597,
      "success": true,
      "log_likelihood": -21.682967235309345,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.8598732350943334,
      "beta_fairness": -0.008611040835644068,
      "bias": -6.127087823301318,
      "success": true,
      "log_likelihood": -7.3241162285741845,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.2783317887013146,
      "beta_fairness": -0.012655625942186194,
      "bias": -0.5985126392095749,
      "success": true,
      "log_likelihood": -23.617003818193492,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.15272076598336493,
      "beta_fairness": 0.03160419159117983,
      "bias": 1.2340562809202362,
      "success": true,
      "log_likelihood": -10.141577804042312,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.35687739626017445,
      "beta_fairness": -0.10378903158891205,
      "bias": -2.084341030846707,
      "success": true,
      "log_likelihood": -9.213036223636124,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 2.0,
      "beta_fairness": -0.16249907268688668,
      "bias": -3.8230326927795137,
      "success": true,
      "log_likelihood": -7.477673973171066,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": -0.09479459636043563,
      "beta_fairness": -0.03603289950769229,
      "bias": 1.5773359561414673,
      "success": true,
      "log_likelihood": -23.321707832726997,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.49722763099234146,
      "beta_fairness": -0.06020058143014559,
      "bias": -3.234028139634737,
      "success": true,
      "log_likelihood": -9.697975512914908,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.07575461505040736,
      "beta_fairness": -0.07534251306872418,
      "bias": 2.3470088169500856,
      "success": true,
      "log_likelihood": -18.512509601352605,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.023473539624957736,
      "beta_fairness": -0.2026186340410025,
      "bias": 1.5538640140115243,
      "success": true,
      "log_likelihood": -11.06097004983608,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": -0.0847757642112734,
      "beta_fairness": -0.20536215379433886,
      "bias": 10.0,
      "success": true,
      "log_likelihood": -4.385263355962678,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 2.0,
      "beta_fairness": -0.07799579085601341,
      "bias": -5.593426996100698,
      "success": true,
      "log_likelihood": -7.412059673082727,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.2109862228077348,
      "beta_fairness": -0.019709422478458048,
      "bias": 0.5421067155929115,
      "success": true,
      "log_likelihood": -21.174056034369613,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_self": {
        "r": 0.5459632309411973,
        "p": 4.2323250399887295e-09
      },
      "beta_fairness": {
        "r": 0.8836942169684964,
        "p": 4.443047461249156e-34
      },
      "bias": {
        "r": 0.7486821403146444,
        "p": 3.399042725724317e-19
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 50.51143555728199,
  "bic_Control": 46.70881974486263,
  "bic_Cocaine": 53.91794555590767,
  "bic_results": {
    "average_bic": 50.51143555728199,
    "individual_bics": [
      25.398789295043095,
      45.62518001222557,
      26.2251083436768,
      38.41522628602482,
      21.30755571919991,
      39.56900898471872,
      10.75055680977183,
      38.442622293803495,
      10.750560506985016,
      33.919359058776294,
      15.057456314601275,
      27.859739453196795,
      35.223584013391296,
      10.75055680977183,
      10.75055680977183,
      10.75055697521434,
      10.750558977230371,
      241.00908037055288,
      20.903235957091383,
      10.75055680977183,
      38.27892890435751,
      241.00906611017632,
      43.729018441470714,
      46.370804788716356,
      32.89856500445069,
      37.770444288992586,
      41.702239179880536,
      27.14598056113244,
      194.9573643328678,
      39.18445806745562,
      10.75055680977183,
      25.39878933021567,
      50.71086400822912,
      43.43842386293201,
      10.750556810855826,
      31.369835060585228,
      30.278274983288483,
      40.48400587489196,
      46.039302694758064,
      148.90566239001453,
      49.769789170716265,
      36.654498651497065,
      56.67196990101702,
      46.83599125309817,
      40.49620345458658,
      41.90529206078013,
      48.72018229238002,
      47.526922074645285,
      31.260772090182,
      56.11377803777589,
      48.18352442866569,
      35.02527323700328,
      47.0840642589348,
      50.14751718285271,
      43.55293748383923,
      22.420749780294482,
      36.729879511348415,
      31.310996009914845,
      28.975130530824472,
      333.0972071719887,
      52.78152284217447,
      44.05213948207469,
      25.398789274763757,
      49.44622991362559,
      34.52955706592938,
      41.903058552664504,
      148.9056635992351,
      241.0090661101764,
      36.91498338859425,
      28.353578713528027,
      25.27466322378045,
      34.14935762938602,
      45.17795181657594,
      39.6601555164022,
      56.054245708372406,
      45.11173078342941,
      102.85396070473007,
      57.29923821287812,
      54.116491285987024,
      25.3987892725167,
      57.98456445175532,
      31.033712423452954,
      29.176629262640578,
      25.705904761710464,
      57.39397248082233,
      30.146507841198147,
      47.77557601807354,
      32.872496915040486,
      19.521083527293687,
      25.574676161533784,
      53.09866888410755
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        25.398789295043095,
        45.62518001222557,
        26.2251083436768,
        38.41522628602482,
        21.30755571919991,
        39.56900898471872,
        10.75055680977183,
        38.442622293803495,
        10.750560506985016,
        33.919359058776294,
        15.057456314601275,
        27.859739453196795,
        35.223584013391296,
        10.75055680977183,
        10.75055680977183,
        10.75055697521434,
        10.750558977230371,
        241.00908037055288,
        20.903235957091383,
        10.75055680977183,
        38.27892890435751,
        241.00906611017632,
        43.729018441470714,
        46.370804788716356,
        32.89856500445069,
        37.770444288992586,
        41.702239179880536,
        27.14598056113244,
        194.9573643328678,
        39.18445806745562,
        10.75055680977183,
        25.39878933021567,
        50.71086400822912,
        43.43842386293201,
        10.750556810855826,
        31.369835060585228,
        30.278274983288483,
        40.48400587489196,
        46.039302694758064,
        148.90566239001453,
        49.769789170716265,
        36.654498651497065,
        56.67196990101702
      ],
      "Cocaine": [
        46.83599125309817,
        40.49620345458658,
        41.90529206078013,
        48.72018229238002,
        47.526922074645285,
        31.260772090182,
        56.11377803777589,
        48.18352442866569,
        35.02527323700328,
        47.0840642589348,
        50.14751718285271,
        43.55293748383923,
        22.420749780294482,
        36.729879511348415,
        31.310996009914845,
        28.975130530824472,
        333.0972071719887,
        52.78152284217447,
        44.05213948207469,
        25.398789274763757,
        49.44622991362559,
        34.52955706592938,
        41.903058552664504,
        148.9056635992351,
        241.0090661101764,
        36.91498338859425,
        28.353578713528027,
        25.27466322378045,
        34.14935762938602,
        45.17795181657594,
        39.6601555164022,
        56.054245708372406,
        45.11173078342941,
        102.85396070473007,
        57.29923821287812,
        54.116491285987024,
        25.3987892725167,
        57.98456445175532,
        31.033712423452954,
        29.176629262640578,
        25.705904761710464,
        57.39397248082233,
        30.146507841198147,
        47.77557601807354,
        32.872496915040486,
        19.521083527293687,
        25.574676161533784,
        53.09866888410755
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_self: r = 0.546\n- beta_fairness: r = 0.884\n- bias: r = 0.749",
  "previous_models": [
    "Specification: fairness_perc = 100 * token_self / (token_self + token_opp)\ninequity = abs(splitperc_self - fairness_perc)\nU = beta_self * split_self + beta_fairness * inequity + bias\nSummary: A utility-based model for responder choices, combining linear sensitivity to monetary self-gain and absolute deviation from a contribution-based fair share. The model has three learnable parameters: one for self-gain, one for fairness aversion, and a general acceptance bias. The offer's utility is converted to an acceptance probability via a sigmoid, targeting binary accept/reject decisions.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 50.51143555728199\nOverall Accuracy: 0.7900\nGroup Accuracies:\n- Control: 0.8398\n- Cocaine: 0.7454\n\nParameter Recovery:\n- beta_self: r = 0.546\n- beta_fairness: r = 0.884\n- bias: r = 0.749"
  ]
}