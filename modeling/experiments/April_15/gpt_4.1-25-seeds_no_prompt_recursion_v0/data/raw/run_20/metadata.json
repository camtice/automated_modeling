{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step-by-Step Reasoning\n\n**1. Key Psychological Mechanisms**\n- Inequity Aversion: Responders may reject offers that deviate too much from what they perceive as a fair split, showing dislike for unequal outcomes (Fehr & Schmidt, 1999; Bolton & Ockenfels, 2000).\n- Self-interest: Responders gain utility from monetary gain\u2014the more they get, the more likely they are to accept.\n- Merit-based Fairness: Here, \"fairness\" should depend not just on 50/50 splitting, but on token contributions (as these are the basis for merit). So the notion of a \"fair\" share is relative to the share found by each participant.\n- Baseline bias: Even after controlling for perceived fairness, participants could have a general tendency to accept or reject offers.\n- Noise/Stochasticity: There is always some randomness in human acceptance decisions.\n\n**2. How These Mechanisms Interact**\n- The difference between the offer to self and the merit-based fair share triggers aversion if it is negative (envy for disadvantageous inequality), but participants may be less sensitive when they\u2019re advantaged.\n- Both self-interest (size of split_self) and (dis)advantageous inequality (relative to the merit-based share) likely matter.\n- All utility terms should be additive to keep model simple and minimize identifiability issues.\n\n**3. Mathematical Formulation**\nA classical social preferences utility function (Fehr-Schmidt, 1999; Charness-Rabin, 2002) fits well:\n- Utility = baseline + (weight_self \u00d7 split_self) + (penalty_ineq \u00d7 disadvantageous_inequity)\n- Disadvantageous Inequity = max(merit_share - split_self, 0)\n\nWhere merit_share = combined_earning \u00d7 (token_self) / (token_self + token_opp)\n\n**4. Parameterization**\n- weight_self: Sensitivity to amount offered (self-interest), plausible range [0, 2]\n- penalty_ineq: Strength of negative response to disadvantageous inequity, should be \u22640, e.g. [-5, 0]\n- intercept: Baseline response tendency, e.g. [-10, 10]\n- No temperature parameter included as instructed (as temperature=1 for mapping utility to probability).\n- Avoid using both advantageous and disadvantageous inequity (or both self-gain and share-gain) to avoid collinearity and identifiability problems in small datasets.\n\n**5. Variable Mapping**\n- All necessary variables are provided in data: split_self, combined_earning, token_self, token_opp.\n\n----\n\n<Model and Variable Definitions as Requested:>\n\n<MODEL>\nutility = intercept + (weight_self * split_self) + (penalty_ineq * max(merit_share - split_self, 0))\nmerit_share = combined_earning * token_self / (token_self + token_opp)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Latent utility of accepting the offer on this trial. Utility is mapped to probability of acceptance via a logistic function.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"intercept\": {\n      \"description\": \"Baseline bias in acceptance tendency; positive means a general bias to accept.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"weight_self\": {\n      \"description\": \"Sensitivity to the amount offered to self; higher values mean the participant favors higher personal gain.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 2\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"penalty_ineq\": {\n      \"description\": \"Negative weight on disadvantageous inequity (accepting less than merit_share); must be negative or zero. Larger negative values mean a stronger aversion to unfair disadvantage.\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -5,\n          \"high\": 0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Share of money (in \u00a3) proposed for the participant (responder) in this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned by both participants as a result of the token finding phase in this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant in this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent in this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"merit_share\": {\n      \"description\": \"Amount corresponding to the 'fair' share for the participant, proportional to their relative token contribution in this round.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts a responder's decision to accept or reject a proposed division of money based on three mechanisms: the absolute amount offered to self (self-interest), the deviation below a merit-based fair share (inequity aversion), and a baseline bias to accept. The perceived fair share is computed from the responder's relative token contribution. The utility for each trial is the sum of these influences and is transformed to acceptance probability by the logistic function.\n</SUMMARY>\n"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['intercept', 'weight_self', 'penalty_ineq']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                utility = intercept + (weight_self * split_self) + (penalty_ineq * max(merit_share - split_self, 0))\nmerit_share = combined_earning * token_self / (token_self + token_opp)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Latent utility of accepting the offer on this trial. Utility is mapped to probability of acceptance via a logistic function.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"intercept\": {\n      \"description\": \"Baseline bias in acceptance tendency; positive means a general bias to accept.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"weight_self\": {\n      \"description\": \"Sensitivity to the amount offered to self; higher values mean the participant favors higher personal gain.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 2\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"penalty_ineq\": {\n      \"description\": \"Negative weight on disadvantageous inequity (accepting less than merit_share); must be negative or zero. Larger negative values mean a stronger aversion to unfair disadvantage.\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -5,\n          \"high\": 0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Share of money (in \\u00a3) proposed for the participant (responder) in this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned by both participants as a result of the token finding phase in this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant in this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent in this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"merit_share\": {\n      \"description\": \"Amount corresponding to the 'fair' share for the participant, proportional to their relative token contribution in this round.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, intercept=0, weight_self=1, penalty_ineq=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate merit share\n        if (token_self + token_opp) == 0:\n            merit_share = combined_earning * 0.5  # Default to 50/50 if no tokens\n        else:\n            merit_share = combined_earning * token_self / (token_self + token_opp)\n\n        # Calculate disadvantageous inequity\n        disadvantageous_inequity = max(merit_share - split_self, 0)\n\n        # Calculate utility\n        utility = intercept + (weight_self * split_self) + (penalty_ineq * disadvantageous_inequity)\n\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 6, \"token_self\": 6, \"combined_earning\": 54, \"split_opp\": 26.99, \"split_self\": 27.01, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 27.01, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 27.01}, {\"ID\": 1, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 7, \"combined_earning\": 64, \"split_opp\": 41.59, \"split_self\": 22.41, \"splitperc_opp\": 65, \"splitperc_self\": 35, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 35.0, \"proposed_amount\": 22.41}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744729064.876228
    }
  ],
  "learnable_parameters": {
    "intercept": {
      "description": "Baseline bias in acceptance tendency; positive means a general bias to accept.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "weight_self": {
      "description": "Sensitivity to the amount offered to self; higher values mean the participant favors higher personal gain.",
      "range": {
        "min": 0,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 2
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "penalty_ineq": {
      "description": "Negative weight on disadvantageous inequity (accepting less than merit_share); must be negative or zero. Larger negative values mean a stronger aversion to unfair disadvantage.",
      "range": {
        "min": -5,
        "max": 0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -5,
          "high": 0
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "utility = intercept + (weight_self * split_self) + (penalty_ineq * max(merit_share - split_self, 0))\nmerit_share = combined_earning * token_self / (token_self + token_opp)",
  "variable_descriptions": {
    "utility": {
      "description": "Latent utility of accepting the offer on this trial. Utility is mapped to probability of acceptance via a logistic function.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "intercept": {
      "description": "Baseline bias in acceptance tendency; positive means a general bias to accept.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "weight_self": {
      "description": "Sensitivity to the amount offered to self; higher values mean the participant favors higher personal gain.",
      "range": {
        "min": 0,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 2
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "penalty_ineq": {
      "description": "Negative weight on disadvantageous inequity (accepting less than merit_share); must be negative or zero. Larger negative values mean a stronger aversion to unfair disadvantage.",
      "range": {
        "min": -5,
        "max": 0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -5,
          "high": 0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Share of money (in \u00a3) proposed for the participant (responder) in this trial.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total money earned by both participants as a result of the token finding phase in this trial.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant in this trial.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent in this trial.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "merit_share": {
      "description": "Amount corresponding to the 'fair' share for the participant, proportional to their relative token contribution in this round.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "This model predicts a responder's decision to accept or reject a proposed division of money based on three mechanisms: the absolute amount offered to self (self-interest), the deviation below a merit-based fair share (inequity aversion), and a baseline bias to accept. The perceived fair share is computed from the responder's relative token contribution. The utility for each trial is the sum of these influences and is transformed to acceptance probability by the logistic function.",
  "target_variable": "accept",
  "full_reasoning": "Step-by-Step Reasoning\n\n**1. Key Psychological Mechanisms**\n- Inequity Aversion: Responders may reject offers that deviate too much from what they perceive as a fair split, showing dislike for unequal outcomes (Fehr & Schmidt, 1999; Bolton & Ockenfels, 2000).\n- Self-interest: Responders gain utility from monetary gain\u2014the more they get, the more likely they are to accept.\n- Merit-based Fairness: Here, \"fairness\" should depend not just on 50/50 splitting, but on token contributions (as these are the basis for merit). So the notion of a \"fair\" share is relative to the share found by each participant.\n- Baseline bias: Even after controlling for perceived fairness, participants could have a general tendency to accept or reject offers.\n- Noise/Stochasticity: There is always some randomness in human acceptance decisions.\n\n**2. How These Mechanisms Interact**\n- The difference between the offer to self and the merit-based fair share triggers aversion if it is negative (envy for disadvantageous inequality), but participants may be less sensitive when they\u2019re advantaged.\n- Both self-interest (size of split_self) and (dis)advantageous inequality (relative to the merit-based share) likely matter.\n- All utility terms should be additive to keep model simple and minimize identifiability issues.\n\n**3. Mathematical Formulation**\nA classical social preferences utility function (Fehr-Schmidt, 1999; Charness-Rabin, 2002) fits well:\n- Utility = baseline + (weight_self \u00d7 split_self) + (penalty_ineq \u00d7 disadvantageous_inequity)\n- Disadvantageous Inequity = max(merit_share - split_self, 0)\n\nWhere merit_share = combined_earning \u00d7 (token_self) / (token_self + token_opp)\n\n**4. Parameterization**\n- weight_self: Sensitivity to amount offered (self-interest), plausible range [0, 2]\n- penalty_ineq: Strength of negative response to disadvantageous inequity, should be \u22640, e.g. [-5, 0]\n- intercept: Baseline response tendency, e.g. [-10, 10]\n- No temperature parameter included as instructed (as temperature=1 for mapping utility to probability).\n- Avoid using both advantageous and disadvantageous inequity (or both self-gain and share-gain) to avoid collinearity and identifiability problems in small datasets.\n\n**5. Variable Mapping**\n- All necessary variables are provided in data: split_self, combined_earning, token_self, token_opp.\n\n----\n\n<Model and Variable Definitions as Requested:>\n\n<MODEL>\nutility = intercept + (weight_self * split_self) + (penalty_ineq * max(merit_share - split_self, 0))\nmerit_share = combined_earning * token_self / (token_self + token_opp)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Latent utility of accepting the offer on this trial. Utility is mapped to probability of acceptance via a logistic function.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"intercept\": {\n      \"description\": \"Baseline bias in acceptance tendency; positive means a general bias to accept.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"weight_self\": {\n      \"description\": \"Sensitivity to the amount offered to self; higher values mean the participant favors higher personal gain.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 2\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"penalty_ineq\": {\n      \"description\": \"Negative weight on disadvantageous inequity (accepting less than merit_share); must be negative or zero. Larger negative values mean a stronger aversion to unfair disadvantage.\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -5,\n          \"high\": 0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Share of money (in \u00a3) proposed for the participant (responder) in this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money earned by both participants as a result of the token finding phase in this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant in this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent in this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"merit_share\": {\n      \"description\": \"Amount corresponding to the 'fair' share for the participant, proportional to their relative token contribution in this round.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts a responder's decision to accept or reject a proposed division of money based on three mechanisms: the absolute amount offered to self (self-interest), the deviation below a merit-based fair share (inequity aversion), and a baseline bias to accept. The perceived fair share is computed from the responder's relative token contribution. The utility for each trial is the sum of these influences and is transformed to acceptance probability by the logistic function.\n</SUMMARY>\n",
  "prediction_type": "utility",
  "current_model": "Specification: utility = intercept + (weight_self * split_self) + (penalty_ineq * max(merit_share - split_self, 0))\nmerit_share = combined_earning * token_self / (token_self + token_opp)\nSummary: This model predicts a responder's decision to accept or reject a proposed division of money based on three mechanisms: the absolute amount offered to self (self-interest), the deviation below a merit-based fair share (inequity aversion), and a baseline bias to accept. The perceived fair share is computed from the responder's relative token contribution. The utility for each trial is the sum of these influences and is transformed to acceptance probability by the logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, intercept=0, weight_self=1, penalty_ineq=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate merit share\n        if (token_self + token_opp) == 0:\n            merit_share = combined_earning * 0.5  # Default to 50/50 if no tokens\n        else:\n            merit_share = combined_earning * token_self / (token_self + token_opp)\n\n        # Calculate disadvantageous inequity\n        disadvantageous_inequity = max(merit_share - split_self, 0)\n\n        # Calculate utility\n        utility = intercept + (weight_self * split_self) + (penalty_ineq * disadvantageous_inequity)\n\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.8113553113553112,
  "group_accuracies": {
    "Control": 0.8540051679586563,
    "Cocaine": 0.7731481481481481
  },
  "group_parameter_averages": {
    "Control": {
      "intercept": 2.6049514484299015,
      "weight_self": 1.1162159608041875,
      "penalty_ineq": -1.0310989797098271
    },
    "Cocaine": {
      "intercept": -0.6538055160586559,
      "weight_self": 0.6489711307716497,
      "penalty_ineq": -0.8264904266251257
    }
  },
  "fitting_results": [
    {
      "intercept": -4.225620622255638,
      "weight_self": 0.7066822942006232,
      "penalty_ineq": -0.9557225304098488,
      "success": true,
      "log_likelihood": -6.077184892973653,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 0.24950961243804076,
      "weight_self": 0.5422752266495902,
      "penalty_ineq": -0.9055582988780695,
      "success": true,
      "log_likelihood": -16.262501906614762,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 0.8716337684218408,
      "weight_self": 1.0923519551372678,
      "penalty_ineq": -1.8771149231446054,
      "success": true,
      "log_likelihood": -9.89346523834295,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": -2.465732394898405,
      "weight_self": 1.277820982522988,
      "penalty_ineq": -1.177002428787504,
      "success": true,
      "log_likelihood": -12.257923131560863,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 2.592822809274807,
      "weight_self": 0.5308527446213438,
      "penalty_ineq": -2.2209232100417045,
      "success": true,
      "log_likelihood": -8.650322013360215,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 1.053121603934966,
      "weight_self": 1.0299178022004016,
      "penalty_ineq": -1.4023270049162926,
      "success": true,
      "log_likelihood": -10.831116523819903,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "weight_self": 2.0,
      "penalty_ineq": 0.0,
      "success": true,
      "log_likelihood": -1.955426353632175e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 2.8973773673930716,
      "weight_self": 0.8064355097420028,
      "penalty_ineq": -1.6719689300753995,
      "success": true,
      "log_likelihood": -9.823428217568413,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "weight_self": 2.0,
      "penalty_ineq": 0.0,
      "success": true,
      "log_likelihood": -1.9554263536321742e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 0.06644341006658903,
      "weight_self": 0.7574449334363293,
      "penalty_ineq": -1.6411435293075411,
      "success": true,
      "log_likelihood": -11.165569400229828,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 0.04467977092661186,
      "weight_self": 2.0,
      "penalty_ineq": -3.5281904637443318,
      "success": true,
      "log_likelihood": -3.0718783418352125,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": -4.417064191111104,
      "weight_self": 0.8708449538201201,
      "penalty_ineq": -1.0045392560796835,
      "success": true,
      "log_likelihood": -6.993487397624389,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 1.0487125530137424,
      "weight_self": 0.8943945659905729,
      "penalty_ineq": -2.2728093797078177,
      "success": true,
      "log_likelihood": -8.618546896897424,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "weight_self": 2.0,
      "penalty_ineq": 0.0,
      "success": true,
      "log_likelihood": -1.955426353632174e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "weight_self": 2.0,
      "penalty_ineq": 0.0,
      "success": true,
      "log_likelihood": -1.9554263536321735e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "weight_self": 2.0,
      "penalty_ineq": 0.0,
      "success": true,
      "log_likelihood": -1.955426353632174e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "weight_self": 2.0,
      "penalty_ineq": 0.0,
      "success": true,
      "log_likelihood": -1.9554263536321742e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": -0.8051351847821636,
      "weight_self": 2.0,
      "penalty_ineq": -0.7160386632703892,
      "success": true,
      "log_likelihood": -3.558010217855461,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 5.27966782869222,
      "weight_self": 0.9477237506996771,
      "penalty_ineq": -1.4929655655037246,
      "success": true,
      "log_likelihood": -5.272536463965076,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "weight_self": 2.0,
      "penalty_ineq": 0.0,
      "success": true,
      "log_likelihood": -1.9554263536321742e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 2.2766740853174197,
      "weight_self": 0.3116012574000923,
      "penalty_ineq": -1.2358786531981902,
      "success": true,
      "log_likelihood": -13.966380313591385,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 3.416766520965519,
      "weight_self": 0.9353388212242051,
      "penalty_ineq": -1.1793815335834408,
      "success": true,
      "log_likelihood": -7.026153778107544,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": -3.294230641760519,
      "weight_self": 1.0073318311958772,
      "penalty_ineq": -0.48159470135759935,
      "success": true,
      "log_likelihood": -15.459488814220633,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": -0.998937434582549,
      "weight_self": 0.7949860868832247,
      "penalty_ineq": -0.6674439936576736,
      "success": true,
      "log_likelihood": -16.687262571069887,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 4.237564348305889,
      "weight_self": 0.0,
      "penalty_ineq": -1.791460201969953,
      "success": true,
      "log_likelihood": -10.409785807478874,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": -0.14843803586338952,
      "weight_self": 0.8140815705158171,
      "penalty_ineq": -0.8810050845014893,
      "success": true,
      "log_likelihood": -14.888736953110897,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": -0.7598634008675033,
      "weight_self": 1.2481059597398614,
      "penalty_ineq": -1.308850009971981,
      "success": true,
      "log_likelihood": -11.493028639531499,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 0.3870365444284551,
      "weight_self": 1.3447403408334226,
      "penalty_ineq": -5.0,
      "success": true,
      "log_likelihood": -3.9287388880681724,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 4.428476761706124,
      "weight_self": 0.38884051329452557,
      "penalty_ineq": -0.9746528593103767,
      "success": true,
      "log_likelihood": -7.7010583255227925,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 2.9776597104929805,
      "weight_self": 0.1709921554814227,
      "penalty_ineq": -0.7475675002820881,
      "success": true,
      "log_likelihood": -14.144819521274728,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "weight_self": 2.0,
      "penalty_ineq": 0.0,
      "success": true,
      "log_likelihood": -1.9554263536321745e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": -4.225593625790439,
      "weight_self": 0.7066701792000769,
      "penalty_ineq": -0.9557495153401591,
      "success": true,
      "log_likelihood": -6.077184894383602,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": -2.215395798364998,
      "weight_self": 0.6848048114863815,
      "penalty_ineq": -0.25674271982425706,
      "success": true,
      "log_likelihood": -19.421223776263687,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": -1.1196378380978618,
      "weight_self": 0.7255472735145565,
      "penalty_ineq": -0.9364056301414754,
      "success": true,
      "log_likelihood": -15.062416061243876,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "weight_self": 2.0,
      "penalty_ineq": 0.0,
      "success": true,
      "log_likelihood": -1.955426353632174e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": -4.174638107570315,
      "weight_self": 2.0,
      "penalty_ineq": -0.49843414263073715,
      "success": true,
      "log_likelihood": -9.645635612454287,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 0.01584081029168395,
      "weight_self": 2.0,
      "penalty_ineq": -1.7796336140921218,
      "success": true,
      "log_likelihood": -7.0139532934203555,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 1.7927840178724335,
      "weight_self": 0.3828354620213337,
      "penalty_ineq": -1.3282361402233782,
      "success": true,
      "log_likelihood": -13.418036861664222,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 2.485074727098624,
      "weight_self": 0.17239489024482366,
      "penalty_ineq": -0.848351872777095,
      "success": true,
      "log_likelihood": -16.16485029696683,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 3.1583386664688615,
      "weight_self": 0.28886567229997545,
      "penalty_ineq": -0.5017343710111368,
      "success": true,
      "log_likelihood": -8.535353519463662,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 2.8704485810337452,
      "weight_self": 0.08840188403079671,
      "penalty_ineq": -1.012553407849443,
      "success": true,
      "log_likelihood": -15.691135821170958,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": -1.2874339397129775,
      "weight_self": 0.47500288619275344,
      "penalty_ineq": -1.0852759919330597,
      "success": true,
      "log_likelihood": -12.071796913313397,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "weight_self": 2.0,
      "penalty_ineq": 0.0,
      "success": true,
      "log_likelihood": -20.69748504352484,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": -0.9669697649075751,
      "weight_self": 0.8723099011221241,
      "penalty_ineq": -0.7102153635735471,
      "success": true,
      "log_likelihood": -15.868597925104195,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -0.1133311551753572,
      "weight_self": 0.9716168381327007,
      "penalty_ineq": -1.0052504432744067,
      "success": true,
      "log_likelihood": -13.25446872818665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -1.5358616596347752,
      "weight_self": 1.0461284465622542,
      "penalty_ineq": -0.25086878872783636,
      "success": true,
      "log_likelihood": -15.179148398731384,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 0.3087568731849794,
      "weight_self": 0.6412621018221923,
      "penalty_ineq": -0.9943662855678824,
      "success": true,
      "log_likelihood": -15.213175209448547,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -2.02530783059696,
      "weight_self": 0.7202488590088112,
      "penalty_ineq": -0.4769188654555187,
      "success": true,
      "log_likelihood": -17.715917431003252,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 4.209132933348013,
      "weight_self": 0.0,
      "penalty_ineq": -2.3194651043280037,
      "success": true,
      "log_likelihood": -8.245801044819677,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -1.5378351181776135,
      "weight_self": 0.47463670398489805,
      "penalty_ineq": -0.0038764198570842598,
      "success": true,
      "log_likelihood": -22.682605515607154,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 0.20773953375986226,
      "weight_self": 0.5685504087298864,
      "penalty_ineq": -0.44868900501565107,
      "success": true,
      "log_likelihood": -17.32549339189225,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -3.0794571363166607,
      "weight_self": 0.5114038884774708,
      "penalty_ineq": -0.44979373828513963,
      "success": true,
      "log_likelihood": -11.409180008839964,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -2.125843647693411,
      "weight_self": 0.9075552589628177,
      "penalty_ineq": -0.35382515153173927,
      "success": true,
      "log_likelihood": -17.687628488372038,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -2.345790976419466,
      "weight_self": 0.8003998058602605,
      "penalty_ineq": 0.0,
      "success": true,
      "log_likelihood": -19.772884683584408,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 0.9314564363058366,
      "weight_self": 0.05805958903185307,
      "penalty_ineq": -0.732182489549744,
      "success": true,
      "log_likelihood": -18.848102194550247,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -1.267843619368349,
      "weight_self": 2.0,
      "penalty_ineq": -4.210419309896735,
      "success": true,
      "log_likelihood": -4.111843497804987,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -0.8688289973316419,
      "weight_self": 0.6929654713236808,
      "penalty_ineq": -1.6465224159681362,
      "success": true,
      "log_likelihood": -10.252027472099387,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 1.8405376072827686,
      "weight_self": 0.06822636742512482,
      "penalty_ineq": 0.0,
      "success": true,
      "log_likelihood": -12.536077975485712,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -4.023408410250017,
      "weight_self": 0.7471177495405911,
      "penalty_ineq": -0.8294286540107664,
      "success": true,
      "log_likelihood": -7.766224019305462,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -1.0075043380130773,
      "weight_self": 0.9537572355782058,
      "penalty_ineq": -0.13202337731011737,
      "success": true,
      "log_likelihood": -13.85763315109274,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 0.5661960286602105,
      "weight_self": 0.34617558881475385,
      "penalty_ineq": -0.4967922284556078,
      "success": true,
      "log_likelihood": -19.659790024042756,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 1.8160504363908392,
      "weight_self": 0.33514740275532956,
      "penalty_ineq": -1.2658213797001576,
      "success": true,
      "log_likelihood": -13.914497001146051,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -4.226322473626455,
      "weight_self": 0.706776573669066,
      "penalty_ineq": -0.9556363969070228,
      "success": true,
      "log_likelihood": -6.07718494091818,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -2.1846308903695473,
      "weight_self": 0.7362623537593566,
      "penalty_ineq": -0.28429396414776825,
      "success": true,
      "log_likelihood": -19.125225031116113,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -3.679703072386286,
      "weight_self": 1.1649384964152016,
      "penalty_ineq": -1.3826609375196321,
      "success": true,
      "log_likelihood": -9.182541300942427,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -1.2496356482830568,
      "weight_self": 1.0750885571894344,
      "penalty_ineq": -0.8689881990728338,
      "success": true,
      "log_likelihood": -14.02870017279089,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 2.8545225798411065,
      "weight_self": 0.5190434380825091,
      "penalty_ineq": -0.5752665998052583,
      "success": true,
      "log_likelihood": -7.694984889094245,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 3.2946947159963593,
      "weight_self": 0.3202975325851227,
      "penalty_ineq": -0.7413966750187819,
      "success": true,
      "log_likelihood": -10.373167057755213,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -4.01989959237189,
      "weight_self": 1.655313588751487,
      "penalty_ineq": -0.4777942691933118,
      "success": true,
      "log_likelihood": -12.567591882127081,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 3.3640432362942763,
      "weight_self": 0.0,
      "penalty_ineq": -0.32537323001841983,
      "success": true,
      "log_likelihood": -9.773742409328984,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -3.228176679895158,
      "weight_self": 1.026825398080799,
      "penalty_ineq": -5.0,
      "success": true,
      "log_likelihood": -1.4490604682706676,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -3.297133136147124,
      "weight_self": 0.595779421298645,
      "penalty_ineq": -0.5578245615272661,
      "success": true,
      "log_likelihood": -10.619230448696253,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -0.4331625990708642,
      "weight_self": 0.7703813021564286,
      "penalty_ineq": -0.8702479555537574,
      "success": true,
      "log_likelihood": -15.551664670616427,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -1.1602206947354798,
      "weight_self": 0.9702230191355711,
      "penalty_ineq": -0.16843483477538113,
      "success": true,
      "log_likelihood": -14.54114111454978,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -0.5480254902684613,
      "weight_self": 0.3291253408993801,
      "penalty_ineq": -0.2504450483729065,
      "success": true,
      "log_likelihood": -22.54585196525146,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 3.0722045880243494,
      "weight_self": 0.47382722549974815,
      "penalty_ineq": -1.285086000457367,
      "success": true,
      "log_likelihood": -11.832866660859027,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 4.772534957756063,
      "weight_self": 0.07126019110607752,
      "penalty_ineq": -0.6202717785142101,
      "success": true,
      "log_likelihood": -6.302963274488537,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -3.1083355295831674,
      "weight_self": 0.29443715716230545,
      "penalty_ineq": -0.5879911125677169,
      "success": true,
      "log_likelihood": -6.456591937046385,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -1.3209201858141906,
      "weight_self": 0.523040066177062,
      "penalty_ineq": 0.0,
      "success": true,
      "log_likelihood": -21.68299474443562,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -4.225554182259617,
      "weight_self": 0.7066671635035073,
      "penalty_ineq": -0.9557268453476442,
      "success": true,
      "log_likelihood": -6.077184892745011,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -0.10831655855855389,
      "weight_self": 0.2535814772900425,
      "penalty_ineq": -0.2709219507060242,
      "success": true,
      "log_likelihood": -22.804479799175635,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 2.292040729037987,
      "weight_self": 0.02989734675841155,
      "penalty_ineq": 0.0,
      "success": true,
      "log_likelihood": -10.322752603726018,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -2.720092998786836,
      "weight_self": 0.4579490796623453,
      "penalty_ineq": -0.8238210159223521,
      "success": true,
      "log_likelihood": -8.86095864604486,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -4.007690589966408,
      "weight_self": 2.0,
      "penalty_ineq": -1.2507924925505656,
      "success": true,
      "log_likelihood": -5.827368215495859,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 1.0304568379544017,
      "weight_self": 0.0,
      "penalty_ineq": -0.22625571275768744,
      "success": true,
      "log_likelihood": -23.315179335737405,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -2.2250867134267454,
      "weight_self": 0.4652914898452675,
      "penalty_ineq": -1.5219646090067918,
      "success": true,
      "log_likelihood": -7.154354833202827,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 1.8742079891690953,
      "weight_self": 0.24214573941172188,
      "penalty_ineq": -0.6626852523374932,
      "success": true,
      "log_likelihood": -17.02230535079789,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -0.5552553265486149,
      "weight_self": 0.2598623860347162,
      "penalty_ineq": -0.9968459787710787,
      "success": true,
      "log_likelihood": -13.240537252522678,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 4.2055074382131385,
      "weight_self": 0.573858256006848,
      "penalty_ineq": -0.7788952040225345,
      "success": true,
      "log_likelihood": -4.980463197719297,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -5.590854056361473,
      "weight_self": 2.0,
      "penalty_ineq": -0.653549751699251,
      "success": true,
      "log_likelihood": -6.735387142673842,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 0.7642513803100617,
      "weight_self": 0.2131800594251735,
      "penalty_ineq": -0.2519110809249065,
      "success": true,
      "log_likelihood": -20.63683864407241,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "intercept": {
        "r": 0.8756294287947155,
        "p": 9.704113028062114e-33
      },
      "weight_self": {
        "r": 0.6482504859870498,
        "p": 3.070813756584973e-13
      },
      "penalty_ineq": {
        "r": 0.7315750898917976,
        "p": 5.410141217152564e-18
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 32.598141021526224,
  "bic_Control": 28.051983435687685,
  "bic_Cocaine": 36.670740525506574,
  "bic_results": {
    "average_bic": 32.598141021526224,
    "individual_bics": [
      22.904926601315637,
      43.27556062859786,
      30.53748729205423,
      35.26640307849006,
      28.05120084208876,
      32.412789863008136,
      10.750595923895403,
      30.397413250505156,
      10.750595923895403,
      33.08169561582798,
      16.894313499038756,
      24.73753161061711,
      27.98765060916318,
      10.750595923895403,
      10.750595923895403,
      10.750595923895403,
      10.750595923895403,
      17.866577251079253,
      21.295629743298484,
      10.750595923895403,
      38.6833174425511,
      24.802864371583418,
      41.669534443809596,
      44.1250819575081,
      31.57012843032608,
      40.52803072159013,
      33.73661409443133,
      18.608034591504676,
      26.152673466413916,
      39.04019585791779,
      10.750595923895403,
      22.904926604135532,
      49.5930043678957,
      40.87538893785609,
      10.750595923895403,
      30.041828040276904,
      24.77846340220904,
      37.586630538696774,
      43.08025740930199,
      27.821263854295655,
      42.13282845771025,
      34.894150641995125,
      52.14552690241801,
      42.48775266557672,
      37.25949427174163,
      41.1088536128311,
      41.17690723426543,
      46.18239167737484,
      27.242158905007685,
      56.11576784658264,
      45.40154359915283,
      33.56891683304826,
      46.12581379211241,
      50.29632618253714,
      48.44676120446883,
      18.974243810978304,
      31.254611759567105,
      35.822712766339755,
      26.283004853979257,
      38.46582311755381,
      50.07013686345384,
      38.57955081766043,
      22.90492669720469,
      49.00100687760056,
      29.115639417253185,
      38.80795716095011,
      26.14052659355682,
      31.496890930878756,
      35.88574057962249,
      30.298041634026298,
      13.648677751909666,
      31.989017712760837,
      41.853886156601185,
      39.83283904446789,
      55.84226074587126,
      34.416290137086385,
      23.356483364345404,
      23.6637406894611,
      54.11654630423958,
      22.904926600858353,
      56.359516413719604,
      31.396062022820367,
      28.47247410745805,
      22.40529324636005,
      57.380915486843136,
      25.059266481773985,
      44.79516751696411,
      37.23163132041368,
      20.711483210806925,
      24.221331100716014,
      52.02423410351315
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        22.904926601315637,
        43.27556062859786,
        30.53748729205423,
        35.26640307849006,
        28.05120084208876,
        32.412789863008136,
        10.750595923895403,
        30.397413250505156,
        10.750595923895403,
        33.08169561582798,
        16.894313499038756,
        24.73753161061711,
        27.98765060916318,
        10.750595923895403,
        10.750595923895403,
        10.750595923895403,
        10.750595923895403,
        17.866577251079253,
        21.295629743298484,
        10.750595923895403,
        38.6833174425511,
        24.802864371583418,
        41.669534443809596,
        44.1250819575081,
        31.57012843032608,
        40.52803072159013,
        33.73661409443133,
        18.608034591504676,
        26.152673466413916,
        39.04019585791779,
        10.750595923895403,
        22.904926604135532,
        49.5930043678957,
        40.87538893785609,
        10.750595923895403,
        30.041828040276904,
        24.77846340220904,
        37.586630538696774,
        43.08025740930199,
        27.821263854295655,
        42.13282845771025,
        34.894150641995125,
        52.14552690241801
      ],
      "Cocaine": [
        42.48775266557672,
        37.25949427174163,
        41.1088536128311,
        41.17690723426543,
        46.18239167737484,
        27.242158905007685,
        56.11576784658264,
        45.40154359915283,
        33.56891683304826,
        46.12581379211241,
        50.29632618253714,
        48.44676120446883,
        18.974243810978304,
        31.254611759567105,
        35.822712766339755,
        26.283004853979257,
        38.46582311755381,
        50.07013686345384,
        38.57955081766043,
        22.90492669720469,
        49.00100687760056,
        29.115639417253185,
        38.80795716095011,
        26.14052659355682,
        31.496890930878756,
        35.88574057962249,
        30.298041634026298,
        13.648677751909666,
        31.989017712760837,
        41.853886156601185,
        39.83283904446789,
        55.84226074587126,
        34.416290137086385,
        23.356483364345404,
        23.6637406894611,
        54.11654630423958,
        22.904926600858353,
        56.359516413719604,
        31.396062022820367,
        28.47247410745805,
        22.40529324636005,
        57.380915486843136,
        25.059266481773985,
        44.79516751696411,
        37.23163132041368,
        20.711483210806925,
        24.221331100716014,
        52.02423410351315
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- intercept: r = 0.876\n- weight_self: r = 0.648\n- penalty_ineq: r = 0.732",
  "previous_models": [
    "Specification: utility = intercept + (weight_self * split_self) + (penalty_ineq * max(merit_share - split_self, 0))\nmerit_share = combined_earning * token_self / (token_self + token_opp)\nSummary: This model predicts a responder's decision to accept or reject a proposed division of money based on three mechanisms: the absolute amount offered to self (self-interest), the deviation below a merit-based fair share (inequity aversion), and a baseline bias to accept. The perceived fair share is computed from the responder's relative token contribution. The utility for each trial is the sum of these influences and is transformed to acceptance probability by the logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 32.598141021526224\nOverall Accuracy: 0.8114\nGroup Accuracies:\n- Control: 0.8540\n- Cocaine: 0.7731\n\nParameter Recovery:\n- intercept: r = 0.876\n- weight_self: r = 0.648\n- penalty_ineq: r = 0.732"
  ]
}