{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "\n\n---\n\n**INSTRUCTIONS \u2013 RUN 10**\n\nYour task is to design a computational model of responder (accept/reject) choices using the provided dataset. Your overriding goals are: (1) maximize the *unique recoverability* and *interpretability* of all learnable parameters, (2) further improve model fit (BIC/accuracy), and (3) ensure your model embodies psychologically plausible, highly *nonlinear*, and context/fairness-sensitive mechanisms\u2014moving beyond any model previously used.\n\nPlease strictly adhere to the following guidelines:\n\n1. **Demand Full Nonoverlap of Parameter Effects:**\n   - Each of the model\u2019s up to three learnable parameters must govern a *wholly distinct* mathematical and psychological process:\n     - One (and *only* one) parameter may determine the threshold for fairness (e.g., personalized fairness point).\n     - One parameter should govern *penalty strength or shape* for unfair (below-threshold) offers.\n     - One parameter must govern *bonus strength, steepness, or sensitivity* for generous (above-threshold) offers (distinct from threshold and penalty parameters).\n   - No two learnable parameters may co-modulate any region of the equation (e.g., bonus, penalty, or threshold)\u2014each must have its *own* region/function.\n   - The *contextual effect* must be implemented only by a *separate, mathematically and psychologically interpretable* parameter\u2014e.g., as a continuous bonus for higher combined_earning, or by modulating the generosity bonus only.\n\n2. **Mandate Explicit Loss/Gain Asymmetry and Nonlinearities:**\n   - The model *must* use *distinct* (not just sign-switched) nonlinear functions for below- versus above-threshold offers (e.g., log penalty for loss, softplus or tanh bonus for gain).\n   - Include at least one nonlinear or saturating function (log, tanh, softplus, softmax, etc.) with a learnable magnitude or steepness.\n   - Loss/gain regions *must* be handled explicitly and asymmetrically.\n\n3. **Parameter Recovery and Theoretical Interpretation:**\n   - In your reasoning, explicitly theorize how changes in *each* parameter\u2014holding the others fixed\u2014would uniquely and visibly alter the predicted acceptance curve (e.g., horizontal shift, sharpness of drop, boost for generosity).\n   - For at least two hypothetical responder profiles (e.g., \"strict egalitarian,\" \"pragmatic maximizer,\" \"generosity-rewarding altruist\"), explain how the *fit* values would differ for each parameter.\n\n4. **Threshold as a Flexible, Learnable Scaling:**\n   - Threshold must be a *bounded, learnable* proportional scaling of entitlement, NOT simply the literal proportional split.\n   - Entitlement must be directly computed from data; threshold must be explicit in the model.\n\n5. **Parameter Count and Ranges:**\n   - You may use *at most three* learnable parameters.\n   - Each must map to only one region or mechanism, with *broad, non-overlapping* bounds (expand range if justified for psychological realism).\n   - Describe *all* mathematical variables in <VARIABLES> JSON. Select *clear, Python-safe* parameter names.\n\n6. **Strict Prohibitions:**\n   - Purely linear additive models are NOT permissible.\n   - NO parameter may appear in more than one equation part (e.g., cannot both set threshold and scale penalty).\n   - Do NOT allow context to scale the penalty region directly; it may influence only its own additive or multiplicative bonus, or a separate reward process.\n\n7. **Model Output and Format:**\n   - First, provide clear step-by-step reasoning, especially regarding identifiability and psychological mapping.\n   - The mathematical model should appear *only* between <MODEL> and </MODEL> tags\u2014no interleaved prose.\n   - All variables and parameters must be described in <VARIABLES> JSON.\n   - Explicitly indicate the prediction target (<target_variable> tags).\n   - Give a concise, interpretation-focused summary inside <SUMMARY> tags only.\n\n**MANDATORY CREATIVE CHALLENGE:**  \nThis run, your model MUST incorporate BOTH:\n- (A) A *distinct, parameterized nonlinear penalty* for sub-threshold (unfair) offers.\n- (B) A *distinct, parameterized nonlinear bonus* for supra-threshold (generous) offers.\n\nYou should use *different* nonlinear functions for these two regions. Bonus points for contextual sensitivity that acts through the generosity/reward region ONLY, not through threshold or penalty.\n\nBe creative, rigorous, and innovative. Consider less common nonlinearities and ensure every parameter\u2019s functional role can be disentangled in simulations and toy data.\n\n---",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: \n\n---\n\n**INSTRUCTIONS \u2013 RUN 10**\n\nYour task is to design a computational model of responder (accept/reject) choices using the provided dataset. Your overriding goals are: (1) maximize the *unique recoverability* and *interpretability* of all learnable parameters, (2) further improve model fit (BIC/accuracy), and (3) ensure your model embodies psychologically plausible, highly *nonlinear*, and context/fairness-sensitive mechanisms\u2014moving beyond any model previously used.\n\nPlease strictly adhere to the following guidelines:\n\n1. **Demand Full Nonoverlap of Parameter Effects:**\n   - Each of the model\u2019s up to three learnable parameters must govern a *wholly distinct* mathematical and psychological process:\n     - One (and *only* one) parameter may determine the threshold for fairness (e.g., personalized fairness point).\n     - One parameter should govern *penalty strength or shape* for unfair (below-threshold) offers.\n     - One parameter must govern *bonus strength, steepness, or sensitivity* for generous (above-threshold) offers (distinct from threshold and penalty parameters).\n   - No two learnable parameters may co-modulate any region of the equation (e.g., bonus, penalty, or threshold)\u2014each must have its *own* region/function.\n   - The *contextual effect* must be implemented only by a *separate, mathematically and psychologically interpretable* parameter\u2014e.g., as a continuous bonus for higher combined_earning, or by modulating the generosity bonus only.\n\n2. **Mandate Explicit Loss/Gain Asymmetry and Nonlinearities:**\n   - The model *must* use *distinct* (not just sign-switched) nonlinear functions for below- versus above-threshold offers (e.g., log penalty for loss, softplus or tanh bonus for gain).\n   - Include at least one nonlinear or saturating function (log, tanh, softplus, softmax, etc.) with a learnable magnitude or steepness.\n   - Loss/gain regions *must* be handled explicitly and asymmetrically.\n\n3. **Parameter Recovery and Theoretical Interpretation:**\n   - In your reasoning, explicitly theorize how changes in *each* parameter\u2014holding the others fixed\u2014would uniquely and visibly alter the predicted acceptance curve (e.g., horizontal shift, sharpness of drop, boost for generosity).\n   - For at least two hypothetical responder profiles (e.g., \"strict egalitarian,\" \"pragmatic maximizer,\" \"generosity-rewarding altruist\"), explain how the *fit* values would differ for each parameter.\n\n4. **Threshold as a Flexible, Learnable Scaling:**\n   - Threshold must be a *bounded, learnable* proportional scaling of entitlement, NOT simply the literal proportional split.\n   - Entitlement must be directly computed from data; threshold must be explicit in the model.\n\n5. **Parameter Count and Ranges:**\n   - You may use *at most three* learnable parameters.\n   - Each must map to only one region or mechanism, with *broad, non-overlapping* bounds (expand range if justified for psychological realism).\n   - Describe *all* mathematical variables in <VARIABLES> JSON. Select *clear, Python-safe* parameter names.\n\n6. **Strict Prohibitions:**\n   - Purely linear additive models are NOT permissible.\n   - NO parameter may appear in more than one equation part (e.g., cannot both set threshold and scale penalty).\n   - Do NOT allow context to scale the penalty region directly; it may influence only its own additive or multiplicative bonus, or a separate reward process.\n\n7. **Model Output and Format:**\n   - First, provide clear step-by-step reasoning, especially regarding identifiability and psychological mapping.\n   - The mathematical model should appear *only* between <MODEL> and </MODEL> tags\u2014no interleaved prose.\n   - All variables and parameters must be described in <VARIABLES> JSON.\n   - Explicitly indicate the prediction target (<target_variable> tags).\n   - Give a concise, interpretation-focused summary inside <SUMMARY> tags only.\n\n**MANDATORY CREATIVE CHALLENGE:**  \nThis run, your model MUST incorporate BOTH:\n- (A) A *distinct, parameterized nonlinear penalty* for sub-threshold (unfair) offers.\n- (B) A *distinct, parameterized nonlinear bonus* for supra-threshold (generous) offers.\n\nYou should use *different* nonlinear functions for these two regions. Bonus points for contextual sensitivity that acts through the generosity/reward region ONLY, not through threshold or penalty.\n\nBe creative, rigorous, and innovative. Consider less common nonlinearities and ensure every parameter\u2019s functional role can be disentangled in simulations and toy data.\n\n---\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Sure! Let's proceed step by step as requested:\n\n---\n\n## Step 1: Identify the Distinct Mechanisms and Map Hypothetical Responder Types\n\n**Distinct Mechanisms:**\n1. **Threshold for Fairness** (psychological judge of 'deservedness'): *unique, learnable, bounded scaling* of entitlement.\n2. **Penalty for Unfairness** (response to perceived under-offer): Uses *one* nonlinear function with *unique, learnable penalty sensitivity/shape.*\n3. **Bonus for Generosity (Super-Fair Offers and/or Contextual Reward):** Uses *different* nonlinear function, with *unique, learnable generosity bonus scaling or sensitivity*; can be context-modulated solely in this region.\n\nCrucially, *no parameter overlaps* regions. Each is uniquely tied to its region:\n\n| Mechanism           | Parameter      | Psychological role         | Mathematical role                  |\n|---------------------|---------------|---------------------------|------------------------------------|\n| Fairness threshold  | threshold_scaling | How high is \"deserved\" fairness? | Sets personalized fairness split   |\n| Penalty             | penalty_steepness | How intolerant to unfairness? | Nonlinearity steepness below threshold (e.g., log) |\n| Generosity bonus    | generosity_weight | How much are rewards for generous offers/context? | Bonus nonlinearity above threshold (e.g., tanh, modulated by context) |\n\n**Two Hypothetical Profiles:**\n\n- *Strict Egalitarian:* \n    - threshold_scaling \u2248 1.0 (wants exactly their own proportional entitlement)\n    - penalty_steepness: high (sharp drop in utility below threshold)\n    - generosity_weight: low (no special reward for generous offers)\n- *Altruistic Generosity-Reinforcer:*\n    - threshold_scaling: moderate (willing to accept less than deserved)\n    - penalty_steepness: low (gentle drop; tolerant)\n    - generosity_weight: high (strong nonlinear boost for over-fair offers and/or context)\n\n---\n\n## Step 2: Data Calculations\n\n- **Entitlement:** participant's share if split strictly by contribution = `entitlement = combined_earning * (token_self / (token_self + token_opp))`\n- **Threshold:** participant expects at least `threshold = threshold_scaling * entitlement`\n- **Penalty vs. Bonus:** \n    - Sub-threshold: `split_self < threshold` \u2192 Penalty region.\n    - Supra-threshold: `split_self > threshold` \u2192 Generosity bonus region (may also be context-modulated).\n\n---\n\n## Step 3: Nonlinear Functions (Unique Per Region)\n\n- *Penalty region:* Negative log penalty.\n- *Bonus region:* Positive tanh bonus, *modulated by generosity_weight* and (optionally) context, e.g., combined_earning as a motivational amplifier.\n\n---\n\n## Step 4: No Parameter Overlap\n\n- Only *threshold_scaling* (bounded [0.5, 1.5]) affects threshold.\n- Only *penalty_steepness* (bounded [0.5, 20]) affects penalty shape/scale.\n- Only *generosity_weight* (bounded [0, 10]) amplifies reward in bonus region.\n\n---\n\n## Step 5: The Model Equation (U_responder)\n\nLet me assemble the model in proper mathematical form using these principles.\n\nLet:  \n- `entitlement = combined_earning * (token_self / (token_self + token_opp))`\n- `threshold = threshold_scaling * entitlement`\n- If `split_self < threshold` (Penalty):  \n    `U = - penalty_steepness * log( threshold / max(split_self, 1e-6) )`  \n- If `split_self >= threshold` (Generosity):  \n    `U = generosity_weight * tanh( (split_self - threshold) * (1 + 0.3 * combined_earning / combined_earning.max) )`  \n\nWhere `combined_earning.max` is maximum observed in the data and normalizes for context.\n\n---\n\n## Step 6: Describe Parameter Effects\n\n- **threshold_scaling**: *Horizontal shift* of fairness point. Increasing shifts acceptance cutoff to higher offers.\n- **penalty_steepness**: *Sharpness* of utility drop for under-offers. Higher values make acceptance curve drop more suddenly at threshold.\n- **generosity_weight**: *Height/steepness* of utility boost for generous offers, and amplifies with higher context (combined earnings).\n\n---\n\n## Step 7: Explicit Mapping to Code-Safe Names\n\nLet's choose parameter/variable names:  \n- threshold_scaling  \n- penalty_steepness  \n- generosity_weight  \n\nAll are learnable with clearly separate mathematical roles.\n\n---\n\n## Step 8: Complete Variables List\n\nAll dataset fields and intermediate variables to be included in the JSON variable list.\n\n---\n\n# Output\n\n<MODEL>\nentitlement = combined_earning * (token_self / (token_self + token_opp))\nthreshold = threshold_scaling * entitlement\ncontext_multiplier = 1 + 0.3 * (combined_earning / max_combined_earning)\nU = \n    - penalty_steepness * log( threshold / max(split_self, 1e-6) )      if split_self < threshold\n    generosity_weight * tanh( (split_self - threshold) * context_multiplier ) if split_self >= threshold\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Amount in \u00a3 offered to participant by proposer\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total \u00a3 earned in the trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"max_combined_earning\": {\n      \"description\": \"Maximum combined_earning observed in the dataset, for normalization\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"threshold_scaling\": {\n      \"description\": \"Personal fairness threshold as a multiplier of strict entitlement (participant's share); sets where fairness cutoff lies\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"penalty_steepness\": {\n      \"description\": \"Controls steepness/sensitivity of penalty for offers below fairness threshold; higher value means steeper negative utility for unfair offers\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 20.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"generosity_weight\": {\n      \"description\": \"Scales nonlinear utility boost for offers exceeding fairness threshold; modulates the value of generosity and is amplified by context\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"entitlement\": {\n      \"description\": \"Strictly proportional deservedness based on tokens found; participant's share of the combined earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"threshold\": {\n      \"description\": \"Participant's personalized fairness threshold\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"context_multiplier\": {\n      \"description\": \"Linear contextual sensitivity to combined_earning, amplifies generosity bonus only\",\n      \"range\": {\n        \"min\": 1.0,\n        \"max\": 1.3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the current offer; determines probability of acceptance via a logistic function\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA context-sensitive asymmetric nonlinear utility model with strictly non-overlapping parameter effects: threshold_scaling sets the fairness cutoff according to personal entitlement, penalty_steepness governs the sharpness of log-based penalty for sub-threshold (unfair) offers, and generosity_weight sets the tanh-based reward for generous offers, which is amplified by context (total possible earnings) but does not affect the penalty or threshold. Each parameter is interpretable, dissociable, and recovers distinct psychological mechanisms underlying responder choices.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['threshold_scaling', 'penalty_steepness', 'generosity_weight']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                entitlement = combined_earning * (token_self / (token_self + token_opp))\nthreshold = threshold_scaling * entitlement\ncontext_multiplier = 1 + 0.3 * (combined_earning / max_combined_earning)\nU = \n    - penalty_steepness * log( threshold / max(split_self, 1e-6) )      if split_self < threshold\n    generosity_weight * tanh( (split_self - threshold) * context_multiplier ) if split_self >= threshold\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Amount in \\u00a3 offered to participant by proposer\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total \\u00a3 earned in the trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"max_combined_earning\": {\n      \"description\": \"Maximum combined_earning observed in the dataset, for normalization\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"threshold_scaling\": {\n      \"description\": \"Personal fairness threshold as a multiplier of strict entitlement (participant's share); sets where fairness cutoff lies\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"penalty_steepness\": {\n      \"description\": \"Controls steepness/sensitivity of penalty for offers below fairness threshold; higher value means steeper negative utility for unfair offers\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 20.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"generosity_weight\": {\n      \"description\": \"Scales nonlinear utility boost for offers exceeding fairness threshold; modulates the value of generosity and is amplified by context\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"entitlement\": {\n      \"description\": \"Strictly proportional deservedness based on tokens found; participant's share of the combined earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"threshold\": {\n      \"description\": \"Participant's personalized fairness threshold\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"context_multiplier\": {\n      \"description\": \"Linear contextual sensitivity to combined_earning, amplifies generosity bonus only\",\n      \"range\": {\n        \"min\": 1.0,\n        \"max\": 1.3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the current offer; determines probability of acceptance via a logistic function\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, threshold_scaling=1, penalty_steepness=1, generosity_weight=1):\n    model_predictions = []\n    max_combined_earning = max(trial.get(\"combined_earning\", 0) for trial in trial_data)\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        # Ensure token_self + token_opp is not zero to avoid division by zero\n        if token_self + token_opp == 0:\n            entitlement = 0  # Or some other appropriate default value\n        else:\n            entitlement = combined_earning * (token_self / (token_self + token_opp))\n\n        threshold = threshold_scaling * entitlement\n        context_multiplier = 1 + 0.3 * (combined_earning / max_combined_earning)\n\n        if split_self < threshold:\n            U = - penalty_steepness * math.log(threshold / max(split_self, 1e-6))\n        else:\n            U = generosity_weight * math.tanh((split_self - threshold) * context_multiplier)\n\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\":1,\"group\":\"control\",\"trial_number\":1,\"trial_type\":2,\"trial_role\":0,\"token_opp\":0,\"token_self\":0,\"combined_earning\":10,\"split_opp\":0.0,\"split_self\":10.0,\"splitperc_opp\":0,\"splitperc_self\":100,\"accept\":1.0,\"accepted_amount\":10.0,\"accepted_perc\":100.0,\"proposed_perc\":100.0,\"proposed_amount\":10.0},{\"ID\":2,\"group\":\"control\",\"trial_number\":2,\"trial_type\":2,\"trial_role\":1,\"token_opp\":0,\"token_self\":0,\"combined_earning\":10,\"split_opp\":10.0,\"split_self\":0.0,\"splitperc_opp\":100,\"splitperc_self\":0,\"accept\":0.0,\"accepted_amount\":0.0,\"accepted_perc\":0.0,\"proposed_perc\":0.0,\"proposed_amount\":0.0},{\"ID\":3,\"group\":\"control\",\"trial_number\":3,\"trial_type\":2,\"trial_role\":0,\"token_opp\":4,\"token_self\":3,\"combined_earning\":10,\"split_opp\":5.0,\"split_self\":5.0,\"splitperc_opp\":50,\"splitperc_self\":50,\"accept\":1.0,\"accepted_amount\":5.0,\"accepted_perc\":50.0,\"proposed_perc\":50.0,\"proposed_amount\":5.0},{\"ID\":4,\"group\":\"control\",\"trial_number\":4,\"trial_type\":2,\"trial_role\":1,\"token_opp\":2,\"token_self\":2,\"combined_earning\":10,\"split_opp\":5.0,\"split_self\":5.0,\"splitperc_opp\":50,\"splitperc_self\":50,\"accept\":1.0,\"accepted_amount\":5.0,\"accepted_perc\":50.0,\"proposed_perc\":50.0,\"proposed_amount\":5.0},{\"ID\":5,\"group\":\"control\",\"trial_number\":5,\"trial_type\":2,\"trial_role\":0,\"token_opp\":2,\"token_self\":1,\"combined_earning\":10,\"split_opp\":8.0,\"split_self\":2.0,\"splitperc_opp\":80,\"splitperc_self\":20,\"accept\":0.0,\"accepted_amount\":0.0,\"accepted_perc\":0.0,\"proposed_perc\":20.0,\"proposed_amount\":2.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744726252.594213
    }
  ],
  "learnable_parameters": {
    "threshold_scaling": {
      "description": "Personal fairness threshold as a multiplier of strict entitlement (participant's share); sets where fairness cutoff lies",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "penalty_steepness": {
      "description": "Controls steepness/sensitivity of penalty for offers below fairness threshold; higher value means steeper negative utility for unfair offers",
      "range": {
        "min": 0.5,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "generosity_weight": {
      "description": "Scales nonlinear utility boost for offers exceeding fairness threshold; modulates the value of generosity and is amplified by context",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "entitlement = combined_earning * (token_self / (token_self + token_opp))\nthreshold = threshold_scaling * entitlement\ncontext_multiplier = 1 + 0.3 * (combined_earning / max_combined_earning)\nU = \n    - penalty_steepness * log( threshold / max(split_self, 1e-6) )      if split_self < threshold\n    generosity_weight * tanh( (split_self - threshold) * context_multiplier ) if split_self >= threshold",
  "variable_descriptions": {
    "split_self": {
      "description": "Amount in \u00a3 offered to participant by proposer",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total \u00a3 earned in the trial",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "max_combined_earning": {
      "description": "Maximum combined_earning observed in the dataset, for normalization",
      "range": {
        "min": 1,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "threshold_scaling": {
      "description": "Personal fairness threshold as a multiplier of strict entitlement (participant's share); sets where fairness cutoff lies",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "penalty_steepness": {
      "description": "Controls steepness/sensitivity of penalty for offers below fairness threshold; higher value means steeper negative utility for unfair offers",
      "range": {
        "min": 0.5,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "generosity_weight": {
      "description": "Scales nonlinear utility boost for offers exceeding fairness threshold; modulates the value of generosity and is amplified by context",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "entitlement": {
      "description": "Strictly proportional deservedness based on tokens found; participant's share of the combined earning",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "threshold": {
      "description": "Participant's personalized fairness threshold",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "context_multiplier": {
      "description": "Linear contextual sensitivity to combined_earning, amplifies generosity bonus only",
      "range": {
        "min": 1.0,
        "max": 1.3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Utility of accepting the current offer; determines probability of acceptance via a logistic function",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A context-sensitive asymmetric nonlinear utility model with strictly non-overlapping parameter effects: threshold_scaling sets the fairness cutoff according to personal entitlement, penalty_steepness governs the sharpness of log-based penalty for sub-threshold (unfair) offers, and generosity_weight sets the tanh-based reward for generous offers, which is amplified by context (total possible earnings) but does not affect the penalty or threshold. Each parameter is interpretable, dissociable, and recovers distinct psychological mechanisms underlying responder choices.",
  "target_variable": "accept",
  "full_reasoning": "Sure! Let's proceed step by step as requested:\n\n---\n\n## Step 1: Identify the Distinct Mechanisms and Map Hypothetical Responder Types\n\n**Distinct Mechanisms:**\n1. **Threshold for Fairness** (psychological judge of 'deservedness'): *unique, learnable, bounded scaling* of entitlement.\n2. **Penalty for Unfairness** (response to perceived under-offer): Uses *one* nonlinear function with *unique, learnable penalty sensitivity/shape.*\n3. **Bonus for Generosity (Super-Fair Offers and/or Contextual Reward):** Uses *different* nonlinear function, with *unique, learnable generosity bonus scaling or sensitivity*; can be context-modulated solely in this region.\n\nCrucially, *no parameter overlaps* regions. Each is uniquely tied to its region:\n\n| Mechanism           | Parameter      | Psychological role         | Mathematical role                  |\n|---------------------|---------------|---------------------------|------------------------------------|\n| Fairness threshold  | threshold_scaling | How high is \"deserved\" fairness? | Sets personalized fairness split   |\n| Penalty             | penalty_steepness | How intolerant to unfairness? | Nonlinearity steepness below threshold (e.g., log) |\n| Generosity bonus    | generosity_weight | How much are rewards for generous offers/context? | Bonus nonlinearity above threshold (e.g., tanh, modulated by context) |\n\n**Two Hypothetical Profiles:**\n\n- *Strict Egalitarian:* \n    - threshold_scaling \u2248 1.0 (wants exactly their own proportional entitlement)\n    - penalty_steepness: high (sharp drop in utility below threshold)\n    - generosity_weight: low (no special reward for generous offers)\n- *Altruistic Generosity-Reinforcer:*\n    - threshold_scaling: moderate (willing to accept less than deserved)\n    - penalty_steepness: low (gentle drop; tolerant)\n    - generosity_weight: high (strong nonlinear boost for over-fair offers and/or context)\n\n---\n\n## Step 2: Data Calculations\n\n- **Entitlement:** participant's share if split strictly by contribution = `entitlement = combined_earning * (token_self / (token_self + token_opp))`\n- **Threshold:** participant expects at least `threshold = threshold_scaling * entitlement`\n- **Penalty vs. Bonus:** \n    - Sub-threshold: `split_self < threshold` \u2192 Penalty region.\n    - Supra-threshold: `split_self > threshold` \u2192 Generosity bonus region (may also be context-modulated).\n\n---\n\n## Step 3: Nonlinear Functions (Unique Per Region)\n\n- *Penalty region:* Negative log penalty.\n- *Bonus region:* Positive tanh bonus, *modulated by generosity_weight* and (optionally) context, e.g., combined_earning as a motivational amplifier.\n\n---\n\n## Step 4: No Parameter Overlap\n\n- Only *threshold_scaling* (bounded [0.5, 1.5]) affects threshold.\n- Only *penalty_steepness* (bounded [0.5, 20]) affects penalty shape/scale.\n- Only *generosity_weight* (bounded [0, 10]) amplifies reward in bonus region.\n\n---\n\n## Step 5: The Model Equation (U_responder)\n\nLet me assemble the model in proper mathematical form using these principles.\n\nLet:  \n- `entitlement = combined_earning * (token_self / (token_self + token_opp))`\n- `threshold = threshold_scaling * entitlement`\n- If `split_self < threshold` (Penalty):  \n    `U = - penalty_steepness * log( threshold / max(split_self, 1e-6) )`  \n- If `split_self >= threshold` (Generosity):  \n    `U = generosity_weight * tanh( (split_self - threshold) * (1 + 0.3 * combined_earning / combined_earning.max) )`  \n\nWhere `combined_earning.max` is maximum observed in the data and normalizes for context.\n\n---\n\n## Step 6: Describe Parameter Effects\n\n- **threshold_scaling**: *Horizontal shift* of fairness point. Increasing shifts acceptance cutoff to higher offers.\n- **penalty_steepness**: *Sharpness* of utility drop for under-offers. Higher values make acceptance curve drop more suddenly at threshold.\n- **generosity_weight**: *Height/steepness* of utility boost for generous offers, and amplifies with higher context (combined earnings).\n\n---\n\n## Step 7: Explicit Mapping to Code-Safe Names\n\nLet's choose parameter/variable names:  \n- threshold_scaling  \n- penalty_steepness  \n- generosity_weight  \n\nAll are learnable with clearly separate mathematical roles.\n\n---\n\n## Step 8: Complete Variables List\n\nAll dataset fields and intermediate variables to be included in the JSON variable list.\n\n---\n\n# Output\n\n<MODEL>\nentitlement = combined_earning * (token_self / (token_self + token_opp))\nthreshold = threshold_scaling * entitlement\ncontext_multiplier = 1 + 0.3 * (combined_earning / max_combined_earning)\nU = \n    - penalty_steepness * log( threshold / max(split_self, 1e-6) )      if split_self < threshold\n    generosity_weight * tanh( (split_self - threshold) * context_multiplier ) if split_self >= threshold\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Amount in \u00a3 offered to participant by proposer\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total \u00a3 earned in the trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"max_combined_earning\": {\n      \"description\": \"Maximum combined_earning observed in the dataset, for normalization\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"threshold_scaling\": {\n      \"description\": \"Personal fairness threshold as a multiplier of strict entitlement (participant's share); sets where fairness cutoff lies\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"penalty_steepness\": {\n      \"description\": \"Controls steepness/sensitivity of penalty for offers below fairness threshold; higher value means steeper negative utility for unfair offers\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 20.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"generosity_weight\": {\n      \"description\": \"Scales nonlinear utility boost for offers exceeding fairness threshold; modulates the value of generosity and is amplified by context\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"entitlement\": {\n      \"description\": \"Strictly proportional deservedness based on tokens found; participant's share of the combined earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"threshold\": {\n      \"description\": \"Participant's personalized fairness threshold\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"context_multiplier\": {\n      \"description\": \"Linear contextual sensitivity to combined_earning, amplifies generosity bonus only\",\n      \"range\": {\n        \"min\": 1.0,\n        \"max\": 1.3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the current offer; determines probability of acceptance via a logistic function\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA context-sensitive asymmetric nonlinear utility model with strictly non-overlapping parameter effects: threshold_scaling sets the fairness cutoff according to personal entitlement, penalty_steepness governs the sharpness of log-based penalty for sub-threshold (unfair) offers, and generosity_weight sets the tanh-based reward for generous offers, which is amplified by context (total possible earnings) but does not affect the penalty or threshold. Each parameter is interpretable, dissociable, and recovers distinct psychological mechanisms underlying responder choices.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: entitlement = combined_earning * (token_self / (token_self + token_opp))\nthreshold = threshold_scaling * entitlement\ncontext_multiplier = 1 + 0.3 * (combined_earning / max_combined_earning)\nU = \n    - penalty_steepness * log( threshold / max(split_self, 1e-6) )      if split_self < threshold\n    generosity_weight * tanh( (split_self - threshold) * context_multiplier ) if split_self >= threshold\nSummary: A context-sensitive asymmetric nonlinear utility model with strictly non-overlapping parameter effects: threshold_scaling sets the fairness cutoff according to personal entitlement, penalty_steepness governs the sharpness of log-based penalty for sub-threshold (unfair) offers, and generosity_weight sets the tanh-based reward for generous offers, which is amplified by context (total possible earnings) but does not affect the penalty or threshold. Each parameter is interpretable, dissociable, and recovers distinct psychological mechanisms underlying responder choices.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, threshold_scaling=1, penalty_steepness=1, generosity_weight=1):\n    model_predictions = []\n    max_combined_earning = max(trial.get(\"combined_earning\", 0) for trial in trial_data)\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        # Ensure token_self + token_opp is not zero to avoid division by zero\n        if token_self + token_opp == 0:\n            entitlement = 0  # Or some other appropriate default value\n        else:\n            entitlement = combined_earning * (token_self / (token_self + token_opp))\n\n        threshold = threshold_scaling * entitlement\n        context_multiplier = 1 + 0.3 * (combined_earning / max_combined_earning)\n\n        if split_self < threshold:\n            U = - penalty_steepness * math.log(threshold / max(split_self, 1e-6))\n        else:\n            U = generosity_weight * math.tanh((split_self - threshold) * context_multiplier)\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7625152625152625,
  "group_accuracies": {
    "Control": 0.7997416020671835,
    "Cocaine": 0.7291666666666666
  },
  "group_parameter_averages": {
    "Control": {
      "threshold_scaling": 0.6498200796627428,
      "penalty_steepness": 3.891188076749848,
      "generosity_weight": 8.17367900894635
    },
    "Cocaine": {
      "threshold_scaling": 0.7473000127103876,
      "penalty_steepness": 4.29514956707249,
      "generosity_weight": 5.68529733503843
    }
  },
  "fitting_results": [
    {
      "threshold_scaling": 1.338196618731191,
      "penalty_steepness": 4.5232081288908335,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -6.199838177571627,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.7000000138266772,
      "penalty_steepness": 2.655552262983531,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -12.937326954544458,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.6666666655998241,
      "penalty_steepness": 4.064807920958912,
      "generosity_weight": 6.8506571725405925,
      "success": true,
      "log_likelihood": -9.411184895485368,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.6506253246531132,
      "penalty_steepness": 6.818531348188768,
      "generosity_weight": 2.351600387684091,
      "success": true,
      "log_likelihood": -13.769126801435418,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.6972752791565782,
      "penalty_steepness": 6.000730125743704,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -8.796535609424923,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5546792549922068,
      "penalty_steepness": 3.440624509194092,
      "generosity_weight": 4.555979153558474,
      "success": true,
      "log_likelihood": -11.625749167785731,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 0.5,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -11.074110749882715,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.59999998741573,
      "penalty_steepness": 2.6583552802574375,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -11.371150771907136,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 0.5,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -11.074110749882717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.800000020324587,
      "penalty_steepness": 4.84339311804526,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -10.307251050332125,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.6442530513723455,
      "penalty_steepness": 20.0,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -2.351088910216298,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 1.2000043627090131,
      "penalty_steepness": 5.652287397884573,
      "generosity_weight": 3.5121391194139506,
      "success": true,
      "log_likelihood": -8.140567609022503,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.6739073388159498,
      "penalty_steepness": 7.607101829974333,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -6.994386683628249,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 0.5,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -11.074110749882715,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 0.5,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -11.074110749882717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 0.5,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -11.074110749882719,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 0.5,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -11.074110749882715,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 1.5263641379152009,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -9.027284498024168,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 0.5,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -9.720085649611846,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 0.5,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -11.074110749882719,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.6666666614365561,
      "penalty_steepness": 3.049199682864011,
      "generosity_weight": 6.522085949144036,
      "success": true,
      "log_likelihood": -12.066468650824003,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 0.8100840015366865,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -9.541391383916038,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5776564114973209,
      "penalty_steepness": 20.0,
      "generosity_weight": 0.5375644601564876,
      "success": true,
      "log_likelihood": -15.036636525957023,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.6666664670415076,
      "penalty_steepness": 2.6936964411934587,
      "generosity_weight": 3.6911637667847637,
      "success": true,
      "log_likelihood": -15.916314599932498,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.6971269833799698,
      "penalty_steepness": 3.2021209254846235,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -12.129927469832664,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.6666666729103101,
      "penalty_steepness": 2.6941911984797957,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -11.983585840918403,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.625000049054527,
      "penalty_steepness": 4.049111778499329,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -9.965522702453073,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.7999999935175854,
      "penalty_steepness": 19.144536999081023,
      "generosity_weight": 9.904425465492741,
      "success": true,
      "log_likelihood": -3.428321770293906,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 0.5,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -10.15782001819776,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5625583119338927,
      "penalty_steepness": 0.5,
      "generosity_weight": 5.678526558931498,
      "success": true,
      "log_likelihood": -13.930013973202033,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 0.5,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -11.074110749882717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 1.3382000905437137,
      "penalty_steepness": 4.523147440775609,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -6.199838177745513,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.582669153563317,
      "penalty_steepness": 4.603964290738135,
      "generosity_weight": 0.7706312443381212,
      "success": true,
      "log_likelihood": -19.7469545183617,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.8667780121731317,
      "penalty_steepness": 3.149747473348531,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -14.077383302284689,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 0.5,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -11.074110749882717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 5.213866388759532,
      "generosity_weight": 2.4124144981772333,
      "success": true,
      "log_likelihood": -14.489726190281928,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 5.971991680003471,
      "generosity_weight": 5.071759665650987,
      "success": true,
      "log_likelihood": -8.29711596225225,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.7000000090486803,
      "penalty_steepness": 3.045001651536067,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -12.294773693571175,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.666666675687355,
      "penalty_steepness": 0.9332874543920835,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -14.802856381742128,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 0.5,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -10.472124347842101,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.6250000036690486,
      "penalty_steepness": 1.276868104404823,
      "generosity_weight": 9.681411813183752,
      "success": true,
      "log_likelihood": -13.518214210523627,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.8750000124438081,
      "penalty_steepness": 6.169315729109635,
      "generosity_weight": 6.214709094028968,
      "success": true,
      "log_likelihood": -9.20373042798237,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 0.5,
      "generosity_weight": 3.713129035607324,
      "success": true,
      "log_likelihood": -15.423047948641267,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5018384622324662,
      "penalty_steepness": 7.956649787453075,
      "generosity_weight": 1.6487448170358285,
      "success": true,
      "log_likelihood": -16.265806782736128,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5331869286962447,
      "penalty_steepness": 4.831356644656014,
      "generosity_weight": 2.790707697904502,
      "success": true,
      "log_likelihood": -13.713747266261597,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5455472478121035,
      "penalty_steepness": 0.8809446701017901,
      "generosity_weight": 2.8709174343040216,
      "success": true,
      "log_likelihood": -17.250849317171035,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.666667126284964,
      "penalty_steepness": 2.834737883398677,
      "generosity_weight": 5.611175965812082,
      "success": true,
      "log_likelihood": -13.974129595499788,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.8301659289202387,
      "penalty_steepness": 2.13651940004465,
      "generosity_weight": 5.25526327779384,
      "success": true,
      "log_likelihood": -17.201076241408217,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.7999999952152165,
      "penalty_steepness": 3.3852581261940515,
      "generosity_weight": 9.84908077025681,
      "success": true,
      "log_likelihood": -12.650609918459994,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.6051271651114294,
      "penalty_steepness": 0.5,
      "generosity_weight": 1.1847417186846174,
      "success": true,
      "log_likelihood": -23.36150963787118,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.6957363549549072,
      "penalty_steepness": 0.5,
      "generosity_weight": 4.696452051286698,
      "success": true,
      "log_likelihood": -19.168218140753286,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 1.3387407361159562,
      "penalty_steepness": 2.8754475755602056,
      "generosity_weight": 9.715447200199824,
      "success": true,
      "log_likelihood": -10.974000935043986,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.6180416541182782,
      "penalty_steepness": 2.7746527835541674,
      "generosity_weight": 2.4624512028145986,
      "success": true,
      "log_likelihood": -17.41551213705543,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 1.8690232413343055,
      "generosity_weight": 0.9122455350255946,
      "success": true,
      "log_likelihood": -22.39669968681879,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.8692570722005077,
      "penalty_steepness": 1.8304605384375614,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -17.565265070451904,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.7170474012358605,
      "penalty_steepness": 20.0,
      "generosity_weight": 5.346340363931025,
      "success": true,
      "log_likelihood": -4.404110820787275,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.8714430962052009,
      "penalty_steepness": 5.90390721185945,
      "generosity_weight": 5.643841687670343,
      "success": true,
      "log_likelihood": -10.09937251701206,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 0.5,
      "generosity_weight": 1.9040290489565928,
      "success": true,
      "log_likelihood": -21.065304756991175,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 1.2578901276396657,
      "penalty_steepness": 4.061042538619917,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -8.267060172787662,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.580395313335853,
      "penalty_steepness": 0.5,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -13.324524814621062,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.6249999902792495,
      "penalty_steepness": 0.7830350399877728,
      "generosity_weight": 3.5450715398795523,
      "success": true,
      "log_likelihood": -18.087826808394265,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.6666666664974161,
      "penalty_steepness": 3.1341563325640207,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -11.325837465434487,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 1.3382056980853105,
      "penalty_steepness": 4.523192704306378,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -6.199838178709858,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5618914692528088,
      "penalty_steepness": 3.5353475489173656,
      "generosity_weight": 1.1040922642319042,
      "success": true,
      "log_likelihood": -20.137202655262385,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.9193587171181852,
      "penalty_steepness": 5.811968891273388,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -9.039707014684193,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.6309476481913153,
      "penalty_steepness": 3.0743430012931205,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -11.024077803744726,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 0.5,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -10.413232830025457,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5583148447152857,
      "penalty_steepness": 0.5,
      "generosity_weight": 5.379684089714004,
      "success": true,
      "log_likelihood": -14.154336695644782,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5302121632055881,
      "penalty_steepness": 5.26420701205772,
      "generosity_weight": 1.9939771486687472,
      "success": true,
      "log_likelihood": -16.044337133642994,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 0.5,
      "generosity_weight": 3.5054063821271804,
      "success": true,
      "log_likelihood": -15.524099546552026,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.9724228489247498,
      "penalty_steepness": 20.0,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -0.8361284957367272,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 1.330571655035727,
      "penalty_steepness": 2.9208413000597595,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -10.891464307072187,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.6250000073495842,
      "penalty_steepness": 2.305799453574332,
      "generosity_weight": 3.5559772152598357,
      "success": true,
      "log_likelihood": -16.0134438578715,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 0.5599838836953895,
      "generosity_weight": 2.767780351125524,
      "success": true,
      "log_likelihood": -16.534427908445643,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.6666669311228693,
      "penalty_steepness": 0.9134759250690304,
      "generosity_weight": 1.8058696708570043,
      "success": true,
      "log_likelihood": -21.928617907179436,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 3.1018788141020135,
      "generosity_weight": 2.8508757458917584,
      "success": true,
      "log_likelihood": -14.334490477519065,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 0.5,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -10.727537159672641,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 1.5,
      "penalty_steepness": 3.1028547733268037,
      "generosity_weight": 0.0,
      "success": true,
      "log_likelihood": -9.046040455073255,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.7847618587705206,
      "penalty_steepness": 0.5,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -20.10506180224723,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 1.3381907388564585,
      "penalty_steepness": 4.523205434641978,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -6.19983817764438,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.8969911450524399,
      "penalty_steepness": 0.5,
      "generosity_weight": 7.348793058473706,
      "success": true,
      "log_likelihood": -21.760061038091408,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 0.5,
      "generosity_weight": 2.691961415919865,
      "success": true,
      "log_likelihood": -18.07712621620924,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.7753007518410939,
      "penalty_steepness": 20.0,
      "generosity_weight": 0.0,
      "success": true,
      "log_likelihood": -8.761550951238869,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5527539326425407,
      "penalty_steepness": 20.0,
      "generosity_weight": 2.701197699204274,
      "success": true,
      "log_likelihood": -9.049674968359156,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.8671241561946932,
      "penalty_steepness": 0.5,
      "generosity_weight": 9.17021289574318,
      "success": true,
      "log_likelihood": -22.19861191937783,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 1.0786102396254593,
      "penalty_steepness": 7.260704777937339,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -5.575078749417529,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.6964229047540111,
      "penalty_steepness": 0.5,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -16.863861361241398,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.8749997291402952,
      "penalty_steepness": 6.512183925459215,
      "generosity_weight": 0.11506221876479877,
      "success": true,
      "log_likelihood": -11.976629282854491,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5,
      "penalty_steepness": 0.5,
      "generosity_weight": 10.0,
      "success": true,
      "log_likelihood": -10.47212434784576,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.5239019153756349,
      "penalty_steepness": 20.0,
      "generosity_weight": 1.6301141012773728,
      "success": true,
      "log_likelihood": -13.524319727357613,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "threshold_scaling": 0.624999987988473,
      "penalty_steepness": 0.5,
      "generosity_weight": 2.836757513029544,
      "success": true,
      "log_likelihood": -20.450002564725906,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "threshold_scaling": {
        "r": 0.8999236540635501,
        "p": 4.210285231358799e-37
      },
      "penalty_steepness": {
        "r": 0.6674526142216373,
        "p": 3.365063552867961e-14
      },
      "generosity_weight": {
        "r": 0.38415866122212783,
        "p": 7.953028116683782e-05
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 36.01153983171333,
  "bic_Control": 32.75057270488882,
  "bic_Cocaine": 38.932822882826954,
  "bic_results": {
    "average_bic": 36.01153983171333,
    "individual_bics": [
      23.150233170511584,
      36.62521072445725,
      29.572926606339067,
      38.288810418239166,
      28.343628034218177,
      34.002055150939796,
      32.89877831513376,
      33.492858359182605,
      32.89877831513377,
      31.36505891603258,
      15.452734635800926,
      27.031692033413336,
      24.739330182624826,
      32.89877831513376,
      32.89877831513377,
      32.89877831513377,
      32.89877831513376,
      28.805125811416666,
      30.190728114592023,
      32.89877831513377,
      34.88349411701634,
      29.833339583200406,
      40.82382986728238,
      42.58318601523332,
      35.01041175503366,
      34.71772849720514,
      30.681602220274478,
      17.60720035595614,
      31.066196851763852,
      38.6105847617724,
      32.89877831513377,
      23.15023317085936,
      50.244465852091736,
      38.90532341993771,
      32.89877831513377,
      39.73000919593218,
      27.34478873987283,
      35.34010420251068,
      40.35626957885259,
      31.694805511052532,
      37.78698523641559,
      29.15801767133307,
      41.596652712650865,
      43.28217038084058,
      38.178051347891525,
      45.252255449710404,
      38.698816006367906,
      45.15270929818476,
      36.05177665228832,
      57.47357609111069,
      49.086993096874906,
      32.698558685456305,
      45.58158108947919,
      55.54395618900591,
      45.88108695627214,
      19.558778456942882,
      30.94930184939245,
      52.88116632935068,
      27.284677160943655,
      37.399606444610455,
      46.926210432156864,
      33.402231746237305,
      23.15023317278805,
      51.0249621258931,
      28.829970844736717,
      32.79871242285778,
      31.577022475419245,
      39.059230206657894,
      42.83923108265432,
      41.79875590847239,
      12.422813806841784,
      32.53348542951271,
      42.77744453111133,
      43.81941263225961,
      54.6077926297272,
      39.419537770406464,
      32.20563113471361,
      28.84263772551484,
      50.9606804198628,
      23.15023317065709,
      54.27067889155114,
      46.904809247786815,
      28.273658717846068,
      28.849906752086643,
      55.14778065412399,
      21.90071431420339,
      44.47827953785112,
      34.70381538107731,
      31.69480551105985,
      37.799196270083556,
      51.65056194482014
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        23.150233170511584,
        36.62521072445725,
        29.572926606339067,
        38.288810418239166,
        28.343628034218177,
        34.002055150939796,
        32.89877831513376,
        33.492858359182605,
        32.89877831513377,
        31.36505891603258,
        15.452734635800926,
        27.031692033413336,
        24.739330182624826,
        32.89877831513376,
        32.89877831513377,
        32.89877831513377,
        32.89877831513376,
        28.805125811416666,
        30.190728114592023,
        32.89877831513377,
        34.88349411701634,
        29.833339583200406,
        40.82382986728238,
        42.58318601523332,
        35.01041175503366,
        34.71772849720514,
        30.681602220274478,
        17.60720035595614,
        31.066196851763852,
        38.6105847617724,
        32.89877831513377,
        23.15023317085936,
        50.244465852091736,
        38.90532341993771,
        32.89877831513377,
        39.73000919593218,
        27.34478873987283,
        35.34010420251068,
        40.35626957885259,
        31.694805511052532,
        37.78698523641559,
        29.15801767133307,
        41.596652712650865
      ],
      "Cocaine": [
        43.28217038084058,
        38.178051347891525,
        45.252255449710404,
        38.698816006367906,
        45.15270929818476,
        36.05177665228832,
        57.47357609111069,
        49.086993096874906,
        32.698558685456305,
        45.58158108947919,
        55.54395618900591,
        45.88108695627214,
        19.558778456942882,
        30.94930184939245,
        52.88116632935068,
        27.284677160943655,
        37.399606444610455,
        46.926210432156864,
        33.402231746237305,
        23.15023317278805,
        51.0249621258931,
        28.829970844736717,
        32.79871242285778,
        31.577022475419245,
        39.059230206657894,
        42.83923108265432,
        41.79875590847239,
        12.422813806841784,
        32.53348542951271,
        42.77744453111133,
        43.81941263225961,
        54.6077926297272,
        39.419537770406464,
        32.20563113471361,
        28.84263772551484,
        50.9606804198628,
        23.15023317065709,
        54.27067889155114,
        46.904809247786815,
        28.273658717846068,
        28.849906752086643,
        55.14778065412399,
        21.90071431420339,
        44.47827953785112,
        34.70381538107731,
        31.69480551105985,
        37.799196270083556,
        51.65056194482014
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- threshold_scaling: r = 0.900\n- penalty_steepness: r = 0.667\n- generosity_weight: r = 0.384",
  "previous_models": [
    "Specification: entitlement = combined_earning * (token_self / (token_self + token_opp))\nthreshold = threshold_scaling * entitlement\ncontext_multiplier = 1 + 0.3 * (combined_earning / max_combined_earning)\nU = \n    - penalty_steepness * log( threshold / max(split_self, 1e-6) )      if split_self < threshold\n    generosity_weight * tanh( (split_self - threshold) * context_multiplier ) if split_self >= threshold\nSummary: A context-sensitive asymmetric nonlinear utility model with strictly non-overlapping parameter effects: threshold_scaling sets the fairness cutoff according to personal entitlement, penalty_steepness governs the sharpness of log-based penalty for sub-threshold (unfair) offers, and generosity_weight sets the tanh-based reward for generous offers, which is amplified by context (total possible earnings) but does not affect the penalty or threshold. Each parameter is interpretable, dissociable, and recovers distinct psychological mechanisms underlying responder choices.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 36.01153983171333\nOverall Accuracy: 0.7625\nGroup Accuracies:\n- Control: 0.7997\n- Cocaine: 0.7292\n\nParameter Recovery:\n- threshold_scaling: r = 0.900\n- penalty_steepness: r = 0.667\n- generosity_weight: r = 0.384"
  ]
}