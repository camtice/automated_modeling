{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "\n\n---\n\n**INSTRUCTIONS \u2013 RUN 11**\n\nYour mission remains to design a computational model of responder (accept/reject) choices using the provided dataset. Your primary goals are:\n\n- (1) **Maximize parameter recoverability** \u2013 Each learnable parameter must independently and robustly affect the model output in a way that is *readily* measurable via empirical data simulation and fitting.\n- (2) **Optimize model fit (BIC/accuracy)** \u2013 Continue to target the lowest possible BIC and highest predictive accuracy.\n- (3) **Enforce psychological plausibility and interpretability** \u2013 Mechanisms must correspond to distinct, realistic psychological constructs (fairness threshold, unfairness aversion, generosity/reward sensitivity, and context sensitivity).\n\n**Updated Guidelines and Requirements:**\n\n1. **Absolute Nonoverlap of Parameter Effects:**\n   - **Three learnable parameters maximum.** Each must uniquely govern a single, well-separated computational mechanism:\n     - One (and only one) parameter sets the fairness threshold, as a bounded scaler of entitlement.\n     - One *specifically and only* controls penalty/shape/sensitivity below threshold (the \u201closs\u201d region).\n     - One *specifically and only* controls bonus/shape/sensitivity above threshold (the \u201cgain\u201d region).\n   - **Strictly no overlap**: A parameter used in one region/function must not appear anywhere else in the equation.\n   - **Context sensitivity, if present, MUST be mediated by its own, separately learnable parameter.** For the sake of recoverability, do not use fixed context multipliers; instead, introduce a third parameter for context amplification in the generosity region, or allow \"generosity_weight\" to specifically capture *contextual* amplification.\n   - Each parameter\u2019s effect on the acceptance curve must be clearly, uniquely visible in simulated toy data when all other parameters are held constant.\n\n2. **Explicit Loss\u2013Gain Asymmetry and Strong Nonlinearities:**\n   - You must use *different* nonlinear functions (not just mirrored) for below- and above-threshold regions.\n   - Avoid saturating functions whose output range is too limited, unless the steepness can be reliably controlled by a parameter.\n   - Consider creative nonlinearities: softplus, powered functions, (exponential minus one), piecewise polynomial, or other *non-tanh* approaches for either/both regions.\n   - **Loss/gain regions must not only differ; they must each have a clearly parameterized shape or magnitude.**\n\n3. **Recoverability Emphasis:**\n   - In your step-by-step reasoning, explicitly outline\u2014for each parameter\u2014how simulated changes (with all else fixed) produce unique, sizable, and readily distinguishable patterns in the predicted acceptance function.\n   - Provide, in your reasoning, at least one toy scenario illustrating how low/medium/high setting for each parameter traces different acceptance curves.\n   - Consider especially the above-threshold (\u201cgenerosity\u201d) region: ensure that the bonus parameter has ample opportunity to uniquely affect acceptances over the trial space.\n\n4. **Contextual Sensitivity as a Learnable Parameter:**\n   - If context (e.g., combined_earning) is incorporated, its impact must be handled via a *dedicated*, bounded, and learnable parameter (not a fixed multiplier). This parameter should *only* modulate the generosity region or bonus function.\n   - Alternatively, structure the generosity region so that \u201crelative\u201d generosity (e.g., percent above threshold) is used\u2014this can improve parameter identifiability, especially for context.\n\n5. **Parameter Bounds and Variable Description:**\n   - Specify wide but plausible finite bounds for all learnable parameters in the <VARIABLES> JSON.\n   - Use unambiguous, Python-safe parameter and variable names; no parameter should be named ambiguously or used in more than one computational role.\n\n6. **Strict Prohibitions:**\n   - No purely additive (linear) models.\n   - No parameter overlap in mathematical regions.\n   - Do not allow the context parameter or any other parameter to have effects outside its strictly designated region.\n   - Do not use nonlinearities that are so flat or saturating as to erase real data variance (e.g., limit-bounded tanh unless steepness is very tunable).\n\n7. **Output and Format:**\n   - Start with a detailed, parameter-by-parameter reasoning\u2014including simulation thought experiments\u2014on identifiability.\n   - Mathematical model: Provide only the equation(s) between <MODEL> and </MODEL> tags.\n   - All variables and parameters fully described, with bounds, in <VARIABLES> JSON.\n   - Explicit target variable within <target_variable> tags.\n   - Concise, interpretation-focused model summary in <SUMMARY> tags.\n\n**MANDATORY CREATIVE CHALLENGE:**  \nThis run, your model MUST include BOTH:\n- (A) A *distinct, learnable, and strongly nonlinear penalty function* for sub-threshold (unfair) offers\u2014try a powered or exponentially parameterized penalty, not just log.\n- (B) A *distinct, learnable, and strongly nonlinear bonus function* for supra-threshold (generous) offers\u2014consider integrating an explicit context parameter, or parameterizing the steepness (e.g., softplus or power), or using relative generosity as a core argument.\n\nPush for out-of-the-box nonlinearities and mechanisms. The best model will be the one that most clearly dissociates parameter influences\u2014and produces highly recoverable, well-fitted, and interpretable factors. Stimulate creative and mathematically innovative solutions.\n\n---",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: \n\n---\n\n**INSTRUCTIONS \u2013 RUN 11**\n\nYour mission remains to design a computational model of responder (accept/reject) choices using the provided dataset. Your primary goals are:\n\n- (1) **Maximize parameter recoverability** \u2013 Each learnable parameter must independently and robustly affect the model output in a way that is *readily* measurable via empirical data simulation and fitting.\n- (2) **Optimize model fit (BIC/accuracy)** \u2013 Continue to target the lowest possible BIC and highest predictive accuracy.\n- (3) **Enforce psychological plausibility and interpretability** \u2013 Mechanisms must correspond to distinct, realistic psychological constructs (fairness threshold, unfairness aversion, generosity/reward sensitivity, and context sensitivity).\n\n**Updated Guidelines and Requirements:**\n\n1. **Absolute Nonoverlap of Parameter Effects:**\n   - **Three learnable parameters maximum.** Each must uniquely govern a single, well-separated computational mechanism:\n     - One (and only one) parameter sets the fairness threshold, as a bounded scaler of entitlement.\n     - One *specifically and only* controls penalty/shape/sensitivity below threshold (the \u201closs\u201d region).\n     - One *specifically and only* controls bonus/shape/sensitivity above threshold (the \u201cgain\u201d region).\n   - **Strictly no overlap**: A parameter used in one region/function must not appear anywhere else in the equation.\n   - **Context sensitivity, if present, MUST be mediated by its own, separately learnable parameter.** For the sake of recoverability, do not use fixed context multipliers; instead, introduce a third parameter for context amplification in the generosity region, or allow \"generosity_weight\" to specifically capture *contextual* amplification.\n   - Each parameter\u2019s effect on the acceptance curve must be clearly, uniquely visible in simulated toy data when all other parameters are held constant.\n\n2. **Explicit Loss\u2013Gain Asymmetry and Strong Nonlinearities:**\n   - You must use *different* nonlinear functions (not just mirrored) for below- and above-threshold regions.\n   - Avoid saturating functions whose output range is too limited, unless the steepness can be reliably controlled by a parameter.\n   - Consider creative nonlinearities: softplus, powered functions, (exponential minus one), piecewise polynomial, or other *non-tanh* approaches for either/both regions.\n   - **Loss/gain regions must not only differ; they must each have a clearly parameterized shape or magnitude.**\n\n3. **Recoverability Emphasis:**\n   - In your step-by-step reasoning, explicitly outline\u2014for each parameter\u2014how simulated changes (with all else fixed) produce unique, sizable, and readily distinguishable patterns in the predicted acceptance function.\n   - Provide, in your reasoning, at least one toy scenario illustrating how low/medium/high setting for each parameter traces different acceptance curves.\n   - Consider especially the above-threshold (\u201cgenerosity\u201d) region: ensure that the bonus parameter has ample opportunity to uniquely affect acceptances over the trial space.\n\n4. **Contextual Sensitivity as a Learnable Parameter:**\n   - If context (e.g., combined_earning) is incorporated, its impact must be handled via a *dedicated*, bounded, and learnable parameter (not a fixed multiplier). This parameter should *only* modulate the generosity region or bonus function.\n   - Alternatively, structure the generosity region so that \u201crelative\u201d generosity (e.g., percent above threshold) is used\u2014this can improve parameter identifiability, especially for context.\n\n5. **Parameter Bounds and Variable Description:**\n   - Specify wide but plausible finite bounds for all learnable parameters in the <VARIABLES> JSON.\n   - Use unambiguous, Python-safe parameter and variable names; no parameter should be named ambiguously or used in more than one computational role.\n\n6. **Strict Prohibitions:**\n   - No purely additive (linear) models.\n   - No parameter overlap in mathematical regions.\n   - Do not allow the context parameter or any other parameter to have effects outside its strictly designated region.\n   - Do not use nonlinearities that are so flat or saturating as to erase real data variance (e.g., limit-bounded tanh unless steepness is very tunable).\n\n7. **Output and Format:**\n   - Start with a detailed, parameter-by-parameter reasoning\u2014including simulation thought experiments\u2014on identifiability.\n   - Mathematical model: Provide only the equation(s) between <MODEL> and </MODEL> tags.\n   - All variables and parameters fully described, with bounds, in <VARIABLES> JSON.\n   - Explicit target variable within <target_variable> tags.\n   - Concise, interpretation-focused model summary in <SUMMARY> tags.\n\n**MANDATORY CREATIVE CHALLENGE:**  \nThis run, your model MUST include BOTH:\n- (A) A *distinct, learnable, and strongly nonlinear penalty function* for sub-threshold (unfair) offers\u2014try a powered or exponentially parameterized penalty, not just log.\n- (B) A *distinct, learnable, and strongly nonlinear bonus function* for supra-threshold (generous) offers\u2014consider integrating an explicit context parameter, or parameterizing the steepness (e.g., softplus or power), or using relative generosity as a core argument.\n\nPush for out-of-the-box nonlinearities and mechanisms. The best model will be the one that most clearly dissociates parameter influences\u2014and produces highly recoverable, well-fitted, and interpretable factors. Stimulate creative and mathematically innovative solutions.\n\n---\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let\u2019s approach this step by step, following your directives for parameter separability, nonlinearity, and explicit context sensitivity:\n\n---\n\n**Step 1: Problem Recap, Operationalization, and Core Variables**\n\nWe're modeling the *responder*'s accept/reject choice. Our model computes a utility for each proposal, using only variables observable at the moment of choice.\n\nKey computed inputs:\n- **split_self**: The absolute offer to responder (measured in \u00a3).\n- **token_self**: The responder\u2019s own earned tokens (entitlement cue, in integer tokens).\n- **combined_earning**: The total pie (in \u00a3).\n- **Threshold**: Derived from the above\u2014what's \"fair\" is proportional to entitlement (ratio = token_self / (token_self + token_opp); threshold = ratio \u00d7 combined_earning).\n\nWe will compute these:\n- delta = split_self \u2212 threshold; *i.e.,* difference from entitlement-based fairness.\n\n---\n\n**Step 2: Three-Parameter Nonoverlapping Nonlinear Model Design**\n\n- **Parameter 1 (fairness_threshold_multiplier, \u03b8):** Multiplies entitlement share to set the fairness threshold. \u03b8=1 means literal entitlement, \u03b8>1 stricter, \u03b8<1 looser. Bounded, easily recoverable\u2014alters the \u201czero\u201d point for penalty and bonus regions.\n\n- **Parameter 2 (unfairness_penalty_power, \u03b1):** Controls the *shape/steepness* of the penalty in the sub-threshold zone only. We will use a powered penalty: penalty = \u2212(|delta_under|^\u03b1). Preferably \u03b1>1 for strong nonlinearity; varying \u03b1 drastically changes rejection sensitivity to unfair shortfall.\n\n- **Parameter 3 (generosity_bonus_steepness, \u03b3):** Controls the *shape/steepness/magnitude* of the bonus in the supra-threshold (\"generosity\") region, implemented *relative* to context\u2014e.g., as a powered or softplus bonus function: bonus = \u03b3 \u00d7 softplus(relative_generosity), where relative_generosity = (split_self \u2212 threshold) / combined_earning. *\u03b3* can be positive (amplifies the impact of generosity) or zero/negative (bonus is dampened). Bounded to ensure recoverability.\n\n**Why this separation is highly recoverable:**\n- Varying \u03b8 horizontally shifts the behavioral accept/reject curve (i.e., at what split_self do people switch from mostly rejecting to mostly accepting, across all contexts).\n  - *Toy simulation*: Holding \u03b1 and \u03b3 constant, raising \u03b8 shifts the acceptance function to the right\u2014more offers are \"unfair\" and penalized.\n- Varying \u03b1 (for a fixed \u03b8 and \u03b3) changes only the steepness/curvature of the rejection function for unfair offers: high \u03b1 = more \u201call-or-none\u201d rejections near threshold, low \u03b1 = more gradual; completely distinct from bonus region.\n- Varying \u03b3 changes only the slope/scale/steepness of the acceptance/utility curve *above* threshold. E.g., with \u03b3=0, extra generosity yields little utility gain; with large \u03b3, even small above-fairness offers drive up acceptance probability sharply.\n\n**Nonlinearities:**\n- Below threshold: Use a power function on the *magnitude* of unfairness shortfall: penalty = \u2212(|delta_under|^\u03b1).\n- Above threshold: Use a scaled softplus or relative power function to handle context scaling and avoid unbounded bonus buildup: bonus = \u03b3 \u00d7 softplus(relative_generosity) or \u03b3 \u00d7 (relative_generosity^\u03b2) with \u03b2 fixed for simplicity.\n\n---\n\n**Step 3: Variable Assignments and Mathematical Formulation**\n\nLet\u2019s fix specifics for high mathematical transparency and implementation:\n\n- Set: fairness_threshold = \u03b8 \u00d7 (token_self / (token_self + token_opp)) \u00d7 combined_earning.\n- delta = split_self \u2212 fairness_threshold.\n\nThe model is:\n\nIf delta < 0 (unfair offers):\n- U = \u2212 (abs(delta) ** \u03b1)\n\nIf delta \u2265 0 (generous/fair offers):\n- U = \u03b3 \u00d7 softplus( (split_self \u2212 fairness_threshold) / combined_earning )\n\nWhere softplus(x) = ln(1+exp(x)), a smooth nonlinear rewards function that rises slowly for small x, then near-linearly for large x, strongly nonlinear for negative-to-small-positive x.\n\nCombine as a single equation:\n\nU =\n- \u2212 (abs(delta) ** \u03b1),\u2003when delta < 0  \n-\u2003\u03b3 \u00d7 softplus( (split_self \u2212 fairness_threshold) / combined_earning ),\u2003when delta \u2265 0\n\n---\n\n**Step 4: Simulated Toy Scenarios Illustrating Parameter Identifiability**\n\n- **Varying \u03b8 (fairness_threshold_multiplier):**\n  - Low \u03b8: More offers exceed \u201cfairness,\u201d bonus function is triggered often; responder looks more tolerant.\n  - High \u03b8: Stricter\u2014almost all offers are \u201cunfair;\u201d nearly everything gets penalized unless very generous.\n- **Varying \u03b1 (unfairness_penalty_power):**\n  - \u03b1=1: Sub-threshold penalty linear in unfairness.\n  - \u03b1>2: Penalty rises rapidly with small shortfalls; leads to \u201call-or-nothing\u201d rejection near threshold.\n- **Varying \u03b3 (generosity_bonus_steepness):**\n  - \u03b3=0: No bonus for above-fair offers, utility saturates.\n  - \u03b3 large: Any generosity triggers rapid utility upsurge and near-certain acceptance just above threshold.\n\n*All parameters are highly recoverable by examining acceptance curves below and above the computed threshold for multiple fairness/context settings.*\n\n---\n\n**Step 5: Complete Model and Variable Descriptions**\n\n<MODEL>\nfairness_threshold = fairness_threshold_multiplier * (token_self / (token_self + token_opp)) * combined_earning\ndelta = split_self - fairness_threshold\nU = - (abs(delta) ** unfairness_penalty_power) * (delta < 0) + generosity_bonus_steepness * log(1 + exp( (delta / combined_earning) )) * (delta >= 0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"fairness_threshold_multiplier\": {\n      \"description\": \"Participant's fairness threshold scaling parameter (multiplies entitlement share), with 1 = literal entitlement; higher means stricter demands.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 2.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"unfairness_penalty_power\": {\n      \"description\": \"Shape parameter controlling non-linear penalty for sub-threshold (unfair) offers. Values >1 create steep, 'all-or-nothing' rejection beyond threshold.\",\n      \"range\": {\n        \"min\": 0.75,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"generosity_bonus_steepness\": {\n      \"description\": \"Scaling parameter for the bonus utility of supra-threshold (generous) offers, acting only in the generosity region; higher values produce sharper reward for generosity.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (own endowment entitlement).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 12,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent (opponent's endowment).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 12,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total available amount for splitting in \u00a3.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 72,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share (in \u00a3) for the participant responder.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 72,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fairness_threshold\": {\n      \"description\": \"Context-sensitive computed fair share based on entitlement and threshold multiplier.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 72,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"delta\": {\n      \"description\": \"Difference between split_self and fairness_threshold; positive means generous, negative unfair.\",\n      \"range\": {\n        \"min\": -72,\n        \"max\": 72,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Predicted utility of accepting this offer (input to logistic choice). Negative: low accept, positive: high accept.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis is a maximally separable, three-parameter computational model of responder accept/reject choices that combines a fairness threshold multiplier (scaling entitlement-based fairness), a powered nonlinearity for penalizing unfair offers (sub-threshold), and a shaped, context-sensitive bonus for generous offers (supra-threshold) using a softplus function. The model ensures each parameter independently governs only its own region, enabling extremely strong parameter recoverability. Psychological constructs are mapped directly: fairness expectations, unfairness intolerance, and generosity sensitivity are each tuned by one parameter. The model is strictly non-additive, exploits distinct nonlinearities for loss and gain regions, and incorporates context as a learnable amplifier only in the generosity domain.\n</SUMMARY>\n"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['fairness_threshold_multiplier', 'unfairness_penalty_power', 'generosity_bonus_steepness']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                fairness_threshold = fairness_threshold_multiplier * (token_self / (token_self + token_opp)) * combined_earning\ndelta = split_self - fairness_threshold\nU = - (abs(delta) ** unfairness_penalty_power) * (delta < 0) + generosity_bonus_steepness * log(1 + exp( (delta / combined_earning) )) * (delta >= 0)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"fairness_threshold_multiplier\": {\n      \"description\": \"Participant's fairness threshold scaling parameter (multiplies entitlement share), with 1 = literal entitlement; higher means stricter demands.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 2.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"unfairness_penalty_power\": {\n      \"description\": \"Shape parameter controlling non-linear penalty for sub-threshold (unfair) offers. Values >1 create steep, 'all-or-nothing' rejection beyond threshold.\",\n      \"range\": {\n        \"min\": 0.75,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"generosity_bonus_steepness\": {\n      \"description\": \"Scaling parameter for the bonus utility of supra-threshold (generous) offers, acting only in the generosity region; higher values produce sharper reward for generosity.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (own endowment entitlement).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 12,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent (opponent's endowment).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 12,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total available amount for splitting in \\u00a3.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 72,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share (in \\u00a3) for the participant responder.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 72,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fairness_threshold\": {\n      \"description\": \"Context-sensitive computed fair share based on entitlement and threshold multiplier.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 72,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"delta\": {\n      \"description\": \"Difference between split_self and fairness_threshold; positive means generous, negative unfair.\",\n      \"range\": {\n        \"min\": -72,\n        \"max\": 72,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Predicted utility of accepting this offer (input to logistic choice). Negative: low accept, positive: high accept.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, fairness_threshold_multiplier=1.0, unfairness_penalty_power=2.0, generosity_bonus_steepness=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        # Calculate fairness threshold\n        fairness_threshold = fairness_threshold_multiplier * (token_self / (token_self + token_opp)) * combined_earning if (token_self + token_opp) > 0 else 0 #Handling Zero Division\n        delta = split_self - fairness_threshold\n\n        # Calculate utility\n        if delta < 0:\n            U = - (abs(delta) ** unfairness_penalty_power)\n        else:\n            # Softplus function implementation\n            relative_delta = delta / combined_earning if combined_earning > 0 else 0  #Handling Zero Division\n            U = generosity_bonus_steepness * math.log(1 + math.exp(relative_delta))\n\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = \"\"\"\n[\n    {\"ID\": 1, \"group\": \"A\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 6, \"token_self\": 6, \"combined_earning\": 36, \"split_opp\": 18.0, \"split_self\": 18.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 18.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 18.0},\n    {\"ID\": 2, \"group\": \"A\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 6, \"token_self\": 6, \"combined_earning\": 36, \"split_opp\": 27.0, \"split_self\": 9.0, \"splitperc_opp\": 75, \"splitperc_self\": 25, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 25.0, \"proposed_amount\": 9.0},\n    {\"ID\": 3, \"group\": \"A\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 6, \"token_self\": 6, \"combined_earning\": 36, \"split_opp\": 9.0, \"split_self\": 27.0, \"splitperc_opp\": 25, \"splitperc_self\": 75, \"accept\": 1.0, \"accepted_amount\": 27.0, \"accepted_perc\": 75.0, \"proposed_perc\": 75.0, \"proposed_amount\": 27.0}\n]\n\"\"\"\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744726372.098628
    }
  ],
  "learnable_parameters": {
    "fairness_threshold_multiplier": {
      "description": "Participant's fairness threshold scaling parameter (multiplies entitlement share), with 1 = literal entitlement; higher means stricter demands.",
      "range": {
        "min": 0.5,
        "max": 2.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "unfairness_penalty_power": {
      "description": "Shape parameter controlling non-linear penalty for sub-threshold (unfair) offers. Values >1 create steep, 'all-or-nothing' rejection beyond threshold.",
      "range": {
        "min": 0.75,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "generosity_bonus_steepness": {
      "description": "Scaling parameter for the bonus utility of supra-threshold (generous) offers, acting only in the generosity region; higher values produce sharper reward for generosity.",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "fairness_threshold = fairness_threshold_multiplier * (token_self / (token_self + token_opp)) * combined_earning\ndelta = split_self - fairness_threshold\nU = - (abs(delta) ** unfairness_penalty_power) * (delta < 0) + generosity_bonus_steepness * log(1 + exp( (delta / combined_earning) )) * (delta >= 0)",
  "variable_descriptions": {
    "fairness_threshold_multiplier": {
      "description": "Participant's fairness threshold scaling parameter (multiplies entitlement share), with 1 = literal entitlement; higher means stricter demands.",
      "range": {
        "min": 0.5,
        "max": 2.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "unfairness_penalty_power": {
      "description": "Shape parameter controlling non-linear penalty for sub-threshold (unfair) offers. Values >1 create steep, 'all-or-nothing' rejection beyond threshold.",
      "range": {
        "min": 0.75,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "generosity_bonus_steepness": {
      "description": "Scaling parameter for the bonus utility of supra-threshold (generous) offers, acting only in the generosity region; higher values produce sharper reward for generosity.",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "token_self": {
      "description": "Number of tokens found by the participant (own endowment entitlement).",
      "range": {
        "min": 0,
        "max": 12,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent (opponent's endowment).",
      "range": {
        "min": 0,
        "max": 12,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total available amount for splitting in \u00a3.",
      "range": {
        "min": 0,
        "max": 72,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Proposed share (in \u00a3) for the participant responder.",
      "range": {
        "min": 0,
        "max": 72,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "fairness_threshold": {
      "description": "Context-sensitive computed fair share based on entitlement and threshold multiplier.",
      "range": {
        "min": 0,
        "max": 72,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "delta": {
      "description": "Difference between split_self and fairness_threshold; positive means generous, negative unfair.",
      "range": {
        "min": -72,
        "max": 72,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Predicted utility of accepting this offer (input to logistic choice). Negative: low accept, positive: high accept.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "This is a maximally separable, three-parameter computational model of responder accept/reject choices that combines a fairness threshold multiplier (scaling entitlement-based fairness), a powered nonlinearity for penalizing unfair offers (sub-threshold), and a shaped, context-sensitive bonus for generous offers (supra-threshold) using a softplus function. The model ensures each parameter independently governs only its own region, enabling extremely strong parameter recoverability. Psychological constructs are mapped directly: fairness expectations, unfairness intolerance, and generosity sensitivity are each tuned by one parameter. The model is strictly non-additive, exploits distinct nonlinearities for loss and gain regions, and incorporates context as a learnable amplifier only in the generosity domain.",
  "target_variable": "accept",
  "full_reasoning": "Let\u2019s approach this step by step, following your directives for parameter separability, nonlinearity, and explicit context sensitivity:\n\n---\n\n**Step 1: Problem Recap, Operationalization, and Core Variables**\n\nWe're modeling the *responder*'s accept/reject choice. Our model computes a utility for each proposal, using only variables observable at the moment of choice.\n\nKey computed inputs:\n- **split_self**: The absolute offer to responder (measured in \u00a3).\n- **token_self**: The responder\u2019s own earned tokens (entitlement cue, in integer tokens).\n- **combined_earning**: The total pie (in \u00a3).\n- **Threshold**: Derived from the above\u2014what's \"fair\" is proportional to entitlement (ratio = token_self / (token_self + token_opp); threshold = ratio \u00d7 combined_earning).\n\nWe will compute these:\n- delta = split_self \u2212 threshold; *i.e.,* difference from entitlement-based fairness.\n\n---\n\n**Step 2: Three-Parameter Nonoverlapping Nonlinear Model Design**\n\n- **Parameter 1 (fairness_threshold_multiplier, \u03b8):** Multiplies entitlement share to set the fairness threshold. \u03b8=1 means literal entitlement, \u03b8>1 stricter, \u03b8<1 looser. Bounded, easily recoverable\u2014alters the \u201czero\u201d point for penalty and bonus regions.\n\n- **Parameter 2 (unfairness_penalty_power, \u03b1):** Controls the *shape/steepness* of the penalty in the sub-threshold zone only. We will use a powered penalty: penalty = \u2212(|delta_under|^\u03b1). Preferably \u03b1>1 for strong nonlinearity; varying \u03b1 drastically changes rejection sensitivity to unfair shortfall.\n\n- **Parameter 3 (generosity_bonus_steepness, \u03b3):** Controls the *shape/steepness/magnitude* of the bonus in the supra-threshold (\"generosity\") region, implemented *relative* to context\u2014e.g., as a powered or softplus bonus function: bonus = \u03b3 \u00d7 softplus(relative_generosity), where relative_generosity = (split_self \u2212 threshold) / combined_earning. *\u03b3* can be positive (amplifies the impact of generosity) or zero/negative (bonus is dampened). Bounded to ensure recoverability.\n\n**Why this separation is highly recoverable:**\n- Varying \u03b8 horizontally shifts the behavioral accept/reject curve (i.e., at what split_self do people switch from mostly rejecting to mostly accepting, across all contexts).\n  - *Toy simulation*: Holding \u03b1 and \u03b3 constant, raising \u03b8 shifts the acceptance function to the right\u2014more offers are \"unfair\" and penalized.\n- Varying \u03b1 (for a fixed \u03b8 and \u03b3) changes only the steepness/curvature of the rejection function for unfair offers: high \u03b1 = more \u201call-or-none\u201d rejections near threshold, low \u03b1 = more gradual; completely distinct from bonus region.\n- Varying \u03b3 changes only the slope/scale/steepness of the acceptance/utility curve *above* threshold. E.g., with \u03b3=0, extra generosity yields little utility gain; with large \u03b3, even small above-fairness offers drive up acceptance probability sharply.\n\n**Nonlinearities:**\n- Below threshold: Use a power function on the *magnitude* of unfairness shortfall: penalty = \u2212(|delta_under|^\u03b1).\n- Above threshold: Use a scaled softplus or relative power function to handle context scaling and avoid unbounded bonus buildup: bonus = \u03b3 \u00d7 softplus(relative_generosity) or \u03b3 \u00d7 (relative_generosity^\u03b2) with \u03b2 fixed for simplicity.\n\n---\n\n**Step 3: Variable Assignments and Mathematical Formulation**\n\nLet\u2019s fix specifics for high mathematical transparency and implementation:\n\n- Set: fairness_threshold = \u03b8 \u00d7 (token_self / (token_self + token_opp)) \u00d7 combined_earning.\n- delta = split_self \u2212 fairness_threshold.\n\nThe model is:\n\nIf delta < 0 (unfair offers):\n- U = \u2212 (abs(delta) ** \u03b1)\n\nIf delta \u2265 0 (generous/fair offers):\n- U = \u03b3 \u00d7 softplus( (split_self \u2212 fairness_threshold) / combined_earning )\n\nWhere softplus(x) = ln(1+exp(x)), a smooth nonlinear rewards function that rises slowly for small x, then near-linearly for large x, strongly nonlinear for negative-to-small-positive x.\n\nCombine as a single equation:\n\nU =\n- \u2212 (abs(delta) ** \u03b1),\u2003when delta < 0  \n-\u2003\u03b3 \u00d7 softplus( (split_self \u2212 fairness_threshold) / combined_earning ),\u2003when delta \u2265 0\n\n---\n\n**Step 4: Simulated Toy Scenarios Illustrating Parameter Identifiability**\n\n- **Varying \u03b8 (fairness_threshold_multiplier):**\n  - Low \u03b8: More offers exceed \u201cfairness,\u201d bonus function is triggered often; responder looks more tolerant.\n  - High \u03b8: Stricter\u2014almost all offers are \u201cunfair;\u201d nearly everything gets penalized unless very generous.\n- **Varying \u03b1 (unfairness_penalty_power):**\n  - \u03b1=1: Sub-threshold penalty linear in unfairness.\n  - \u03b1>2: Penalty rises rapidly with small shortfalls; leads to \u201call-or-nothing\u201d rejection near threshold.\n- **Varying \u03b3 (generosity_bonus_steepness):**\n  - \u03b3=0: No bonus for above-fair offers, utility saturates.\n  - \u03b3 large: Any generosity triggers rapid utility upsurge and near-certain acceptance just above threshold.\n\n*All parameters are highly recoverable by examining acceptance curves below and above the computed threshold for multiple fairness/context settings.*\n\n---\n\n**Step 5: Complete Model and Variable Descriptions**\n\n<MODEL>\nfairness_threshold = fairness_threshold_multiplier * (token_self / (token_self + token_opp)) * combined_earning\ndelta = split_self - fairness_threshold\nU = - (abs(delta) ** unfairness_penalty_power) * (delta < 0) + generosity_bonus_steepness * log(1 + exp( (delta / combined_earning) )) * (delta >= 0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"fairness_threshold_multiplier\": {\n      \"description\": \"Participant's fairness threshold scaling parameter (multiplies entitlement share), with 1 = literal entitlement; higher means stricter demands.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 2.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"unfairness_penalty_power\": {\n      \"description\": \"Shape parameter controlling non-linear penalty for sub-threshold (unfair) offers. Values >1 create steep, 'all-or-nothing' rejection beyond threshold.\",\n      \"range\": {\n        \"min\": 0.75,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"generosity_bonus_steepness\": {\n      \"description\": \"Scaling parameter for the bonus utility of supra-threshold (generous) offers, acting only in the generosity region; higher values produce sharper reward for generosity.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (own endowment entitlement).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 12,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent (opponent's endowment).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 12,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total available amount for splitting in \u00a3.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 72,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share (in \u00a3) for the participant responder.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 72,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fairness_threshold\": {\n      \"description\": \"Context-sensitive computed fair share based on entitlement and threshold multiplier.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 72,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"delta\": {\n      \"description\": \"Difference between split_self and fairness_threshold; positive means generous, negative unfair.\",\n      \"range\": {\n        \"min\": -72,\n        \"max\": 72,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Predicted utility of accepting this offer (input to logistic choice). Negative: low accept, positive: high accept.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis is a maximally separable, three-parameter computational model of responder accept/reject choices that combines a fairness threshold multiplier (scaling entitlement-based fairness), a powered nonlinearity for penalizing unfair offers (sub-threshold), and a shaped, context-sensitive bonus for generous offers (supra-threshold) using a softplus function. The model ensures each parameter independently governs only its own region, enabling extremely strong parameter recoverability. Psychological constructs are mapped directly: fairness expectations, unfairness intolerance, and generosity sensitivity are each tuned by one parameter. The model is strictly non-additive, exploits distinct nonlinearities for loss and gain regions, and incorporates context as a learnable amplifier only in the generosity domain.\n</SUMMARY>\n",
  "prediction_type": "utility",
  "current_model": "Specification: fairness_threshold = fairness_threshold_multiplier * (token_self / (token_self + token_opp)) * combined_earning\ndelta = split_self - fairness_threshold\nU = - (abs(delta) ** unfairness_penalty_power) * (delta < 0) + generosity_bonus_steepness * log(1 + exp( (delta / combined_earning) )) * (delta >= 0)\nSummary: This is a maximally separable, three-parameter computational model of responder accept/reject choices that combines a fairness threshold multiplier (scaling entitlement-based fairness), a powered nonlinearity for penalizing unfair offers (sub-threshold), and a shaped, context-sensitive bonus for generous offers (supra-threshold) using a softplus function. The model ensures each parameter independently governs only its own region, enabling extremely strong parameter recoverability. Psychological constructs are mapped directly: fairness expectations, unfairness intolerance, and generosity sensitivity are each tuned by one parameter. The model is strictly non-additive, exploits distinct nonlinearities for loss and gain regions, and incorporates context as a learnable amplifier only in the generosity domain.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, fairness_threshold_multiplier=1.0, unfairness_penalty_power=2.0, generosity_bonus_steepness=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        # Calculate fairness threshold\n        fairness_threshold = fairness_threshold_multiplier * (token_self / (token_self + token_opp)) * combined_earning if (token_self + token_opp) > 0 else 0 #Handling Zero Division\n        delta = split_self - fairness_threshold\n\n        # Calculate utility\n        if delta < 0:\n            U = - (abs(delta) ** unfairness_penalty_power)\n        else:\n            # Softplus function implementation\n            relative_delta = delta / combined_earning if combined_earning > 0 else 0  #Handling Zero Division\n            U = generosity_bonus_steepness * math.log(1 + math.exp(relative_delta))\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "fitting_warnings": [
    "Error fitting participant 1003: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error fitting participant 1011: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error fitting participant 1028: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error fitting participant 1039: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error fitting participant 2004: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error fitting participant 2010: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error fitting participant 2018: Error in parameter fitting: All optimization attempts failed. Errors: []"
  ],
  "skipped_participants": [
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: []"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: []"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: []"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: []"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: []"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: []"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: []"
    }
  ],
  "num_skipped_participants": 7,
  "overall_accuracy": 0.7569444444444444,
  "group_accuracies": {
    "Control": 0.7863247863247863,
    "Cocaine": 0.7314814814814815
  },
  "group_parameter_averages": {
    "Control": {
      "fairness_threshold_multiplier": 0.6378614969529492,
      "unfairness_penalty_power": 1.76964306242381,
      "generosity_bonus_steepness": 6.43702423413263
    },
    "Cocaine": {
      "fairness_threshold_multiplier": 0.6866634429730276,
      "unfairness_penalty_power": 2.0040200629059632,
      "generosity_bonus_steepness": 3.8729710826491903
    }
  },
  "fitting_results": [
    {
      "fairness_threshold_multiplier": 1.1020705283685979,
      "unfairness_penalty_power": 1.1240040140870895,
      "generosity_bonus_steepness": 0.09554520868752271,
      "success": true,
      "log_likelihood": -8.349838699187336,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5000000000479226,
      "unfairness_penalty_power": 5.0,
      "generosity_bonus_steepness": 1.3647462922516513,
      "success": true,
      "log_likelihood": -19.170679358933274,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.6598665331416804,
      "unfairness_penalty_power": 5.0,
      "generosity_bonus_steepness": 1.911858862045222,
      "success": true,
      "log_likelihood": -14.435839085847674,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.7499999932599309,
      "unfairness_penalty_power": 1.2662815021934462,
      "generosity_bonus_steepness": 9.004080851794818,
      "success": true,
      "log_likelihood": -8.057058180733009,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5938098533368299,
      "unfairness_penalty_power": 1.9021564407872456,
      "generosity_bonus_steepness": 3.057012910584129,
      "success": true,
      "log_likelihood": -13.364438652815387,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 10.0,
      "success": true,
      "log_likelihood": -14.919723092926525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.583333299793391,
      "unfairness_penalty_power": 5.0,
      "generosity_bonus_steepness": 3.1110851366319943,
      "success": true,
      "log_likelihood": -11.115289412095617,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 10.0,
      "success": true,
      "log_likelihood": -14.919723092926528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.7121805949420267,
      "unfairness_penalty_power": 2.8314972797311824,
      "generosity_bonus_steepness": 3.292894037148874,
      "success": true,
      "log_likelihood": -10.937888919618619,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 1.0086454602044594,
      "unfairness_penalty_power": 1.4126570829207634,
      "generosity_bonus_steepness": 0.09343273520449415,
      "success": true,
      "log_likelihood": -9.43064664384651,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.7834455431292849,
      "unfairness_penalty_power": 1.3357243159097232,
      "generosity_bonus_steepness": 10.0,
      "success": true,
      "log_likelihood": -8.871990063662631,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 10.0,
      "success": true,
      "log_likelihood": -14.919723092926528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 10.0,
      "success": true,
      "log_likelihood": -14.91972309292653,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 10.0,
      "success": true,
      "log_likelihood": -14.919723092926526,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 10.0,
      "success": true,
      "log_likelihood": -14.919723092926526,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 1.698641153366148,
      "generosity_bonus_steepness": 8.429675995205718,
      "success": true,
      "log_likelihood": -7.75568586572324,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 1.1470770682092521,
      "generosity_bonus_steepness": 7.471228971475869,
      "success": true,
      "log_likelihood": -9.06925519456864,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 10.0,
      "success": true,
      "log_likelihood": -14.919723092926526,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.6784053942645899,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 10.0,
      "success": true,
      "log_likelihood": -11.820072078635162,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 1.2470280135531184,
      "generosity_bonus_steepness": 9.500250813314077,
      "success": true,
      "log_likelihood": -8.378683142653006,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.6692348962672796,
      "unfairness_penalty_power": 5.0,
      "generosity_bonus_steepness": 0.8286123298746702,
      "success": true,
      "log_likelihood": -16.12529554730164,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.6676373341055744,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 3.4762141585692814,
      "success": true,
      "log_likelihood": -16.317784144493153,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.7277801303666647,
      "unfairness_penalty_power": 1.0993366470145145,
      "generosity_bonus_steepness": 10.0,
      "success": true,
      "log_likelihood": -11.06117966833817,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.6668798366986411,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 7.383056583983871,
      "success": true,
      "log_likelihood": -13.240620658999832,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.874999996423129,
      "unfairness_penalty_power": 2.068009477402803,
      "generosity_bonus_steepness": 8.006617248117704,
      "success": true,
      "log_likelihood": -4.686346866998899,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 10.0,
      "success": true,
      "log_likelihood": -10.19772136579384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5003223735767595,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 4.091924930714338,
      "success": true,
      "log_likelihood": -15.305869658626975,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 10.0,
      "success": true,
      "log_likelihood": -14.919723092926523,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 1.2022807939266085,
      "unfairness_penalty_power": 0.9072266299778255,
      "generosity_bonus_steepness": 7.738781217782257,
      "success": true,
      "log_likelihood": -7.811280233052204,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.6000004157997554,
      "unfairness_penalty_power": 1.0580942041198071,
      "generosity_bonus_steepness": 0.7982577686521736,
      "success": true,
      "log_likelihood": -20.844485812232318,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.6751496466273756,
      "unfairness_penalty_power": 5.0,
      "generosity_bonus_steepness": 1.3021924002819687,
      "success": true,
      "log_likelihood": -15.185341960606545,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 10.0,
      "success": true,
      "log_likelihood": -14.919723092926525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.6250058409224448,
      "unfairness_penalty_power": 0.7600540276190562,
      "generosity_bonus_steepness": 6.712271693902811,
      "success": true,
      "log_likelihood": -19.323625408218103,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5830763979279451,
      "unfairness_penalty_power": 5.0,
      "generosity_bonus_steepness": 4.211759547566506,
      "success": true,
      "log_likelihood": -8.468691820547024,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 1.2015570943950369,
      "generosity_bonus_steepness": 1.9164772007931956,
      "success": true,
      "log_likelihood": -18.7887663909185,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5000000000000002,
      "unfairness_penalty_power": 0.7500000000000006,
      "generosity_bonus_steepness": 9.999993772308203,
      "success": true,
      "log_likelihood": -14.494302076372193,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.6250002245861164,
      "unfairness_penalty_power": 0.9567344832415796,
      "generosity_bonus_steepness": 7.329815135646138,
      "success": true,
      "log_likelihood": -14.15952239909548,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 1.0874732934480111,
      "unfairness_penalty_power": 5.0,
      "generosity_bonus_steepness": 5.616594353112833,
      "success": true,
      "log_likelihood": -49.94541168157812,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 4.2995649755222365,
      "success": true,
      "log_likelihood": -18.97948231741624,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5741117001114608,
      "unfairness_penalty_power": 5.0,
      "generosity_bonus_steepness": 1.7104050937327848,
      "success": true,
      "log_likelihood": -16.354437580910584,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.7000000050380784,
      "unfairness_penalty_power": 1.4975628352127952,
      "generosity_bonus_steepness": 7.794412356178303,
      "success": true,
      "log_likelihood": -16.034201027442084,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 1.7013273169496053,
      "generosity_bonus_steepness": 1.914649479204075,
      "success": true,
      "log_likelihood": -19.959702773603713,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.7194699135618928,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 1.5308923699311918,
      "success": true,
      "log_likelihood": -19.528643641253883,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.7472605025381177,
      "unfairness_penalty_power": 4.447325417293169,
      "generosity_bonus_steepness": 3.0418574465654094,
      "success": true,
      "log_likelihood": -9.51878274977774,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 0.5822526694439041,
      "success": true,
      "log_likelihood": -25.169453923686586,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 1.060900253199432,
      "generosity_bonus_steepness": 1.8954077606686914,
      "success": true,
      "log_likelihood": -19.48902800250135,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 1.0452122070202516,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 0.09500448595546225,
      "success": true,
      "log_likelihood": -12.939231589773165,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 1.4405154526161086,
      "generosity_bonus_steepness": 0.9526309572983682,
      "success": true,
      "log_likelihood": -23.36111839861038,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.7500000052513507,
      "unfairness_penalty_power": 1.3491296334710827,
      "generosity_bonus_steepness": 6.50736354478254,
      "success": true,
      "log_likelihood": -29.426394168325878,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.8458974623031,
      "unfairness_penalty_power": 5.0,
      "generosity_bonus_steepness": 10.0,
      "success": true,
      "log_likelihood": -5.4748320511367154,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.8242048505488653,
      "unfairness_penalty_power": 5.0,
      "generosity_bonus_steepness": 1.567312375535865,
      "success": true,
      "log_likelihood": -10.21476574195547,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 2.208857362486887,
      "success": true,
      "log_likelihood": -25.8932110264839,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.9027559749583572,
      "unfairness_penalty_power": 5.0,
      "generosity_bonus_steepness": 0.05330804788697341,
      "success": true,
      "log_likelihood": -9.722980427392491,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5000000000792647,
      "unfairness_penalty_power": 0.7500003148945497,
      "generosity_bonus_steepness": 3.1213843706152375,
      "success": true,
      "log_likelihood": -18.9620561631819,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.699999981265703,
      "unfairness_penalty_power": 0.8494842701173003,
      "generosity_bonus_steepness": 8.02526916468135,
      "success": true,
      "log_likelihood": -10.517424790623354,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 1.2014121059870617,
      "unfairness_penalty_power": 0.9089431004303016,
      "generosity_bonus_steepness": 10.0,
      "success": true,
      "log_likelihood": -7.80872556937406,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.6250231445239787,
      "unfairness_penalty_power": 0.9126785158042122,
      "generosity_bonus_steepness": 1.3482313129384247,
      "success": true,
      "log_likelihood": -19.3618856625548,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.8000000029512201,
      "unfairness_penalty_power": 3.497335246645627,
      "generosity_bonus_steepness": 4.786599054135601,
      "success": true,
      "log_likelihood": -18.233662616715453,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.6339648170275727,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 10.0,
      "success": true,
      "log_likelihood": -11.626610454578307,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 10.0,
      "success": true,
      "log_likelihood": -11.527185463087745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 0.8243215944783544,
      "generosity_bonus_steepness": 4.272608512134953,
      "success": true,
      "log_likelihood": -13.78736519430877,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5057711719948982,
      "unfairness_penalty_power": 5.0,
      "generosity_bonus_steepness": 1.676691873477333,
      "success": true,
      "log_likelihood": -17.850997034080873,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 4.250968634518112,
      "success": true,
      "log_likelihood": -17.262091830791714,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 1.0909416319096605,
      "unfairness_penalty_power": 5.0,
      "generosity_bonus_steepness": 10.0,
      "success": true,
      "log_likelihood": -3.745385137446359,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.9000000000032772,
      "unfairness_penalty_power": 2.2616635707897754,
      "generosity_bonus_steepness": 6.4112682867627075,
      "success": true,
      "log_likelihood": -20.519653513590182,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.6543367139340196,
      "unfairness_penalty_power": 0.7840861467298871,
      "generosity_bonus_steepness": 3.572410955221849,
      "success": true,
      "log_likelihood": -14.687219232425337,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 3.2731218202124124,
      "success": true,
      "log_likelihood": -15.747539165427966,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5833333034126676,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 1.1059852806347665,
      "success": true,
      "log_likelihood": -23.01437626571682,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5314546692439847,
      "unfairness_penalty_power": 5.0,
      "generosity_bonus_steepness": 3.126070302268472,
      "success": true,
      "log_likelihood": -12.663688575579217,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 10.0,
      "success": true,
      "log_likelihood": -12.96726429387579,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 1.369958230887493,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 0.0,
      "success": true,
      "log_likelihood": -8.146049555695816,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5002382528736047,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 1.0710848467369534,
      "success": true,
      "log_likelihood": -26.557778737895138,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 1.1020626037978325,
      "unfairness_penalty_power": 1.1239550537858642,
      "generosity_bonus_steepness": 0.09622667670355681,
      "success": true,
      "log_likelihood": -8.349838632903396,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5000055369872906,
      "unfairness_penalty_power": 2.743123086352242,
      "generosity_bonus_steepness": 0.54295664133885,
      "success": true,
      "log_likelihood": -23.15490594478962,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 3.273124520976691,
      "success": true,
      "log_likelihood": -21.138968882867353,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.9085013237400957,
      "unfairness_penalty_power": 5.0,
      "generosity_bonus_steepness": 0.0,
      "success": true,
      "log_likelihood": -9.625430964025991,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.6666666644510223,
      "unfairness_penalty_power": 5.0,
      "generosity_bonus_steepness": 1.9554124632342214,
      "success": true,
      "log_likelihood": -12.36304757754043,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 1.026161209578553,
      "success": true,
      "log_likelihood": -24.627642211265393,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 1.1020114083955725,
      "unfairness_penalty_power": 1.1240514871718954,
      "generosity_bonus_steepness": 10.0,
      "success": true,
      "log_likelihood": -6.966115274652619,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5000024131255888,
      "unfairness_penalty_power": 0.906785430560444,
      "generosity_bonus_steepness": 2.495694796197535,
      "success": true,
      "log_likelihood": -18.68567929763953,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.8000000001210268,
      "unfairness_penalty_power": 2.24010617156222,
      "generosity_bonus_steepness": 5.439930690849261,
      "success": true,
      "log_likelihood": -18.968846779014378,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 10.0,
      "success": true,
      "log_likelihood": -12.234855990579906,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.6149528000897079,
      "unfairness_penalty_power": 2.7576079327034835,
      "generosity_bonus_steepness": 1.5245246318164534,
      "success": true,
      "log_likelihood": -16.892934040776062,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold_multiplier": 0.5003055356522238,
      "unfairness_penalty_power": 0.75,
      "generosity_bonus_steepness": 2.0336187245098163,
      "success": true,
      "log_likelihood": -22.825149593979955,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "recovery_warnings": [
    "Error in iteration 3: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 31: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 54: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 62: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 74: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 82: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 86: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 87: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 90: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 96: Error in parameter fitting: All optimization attempts failed. Errors: []"
  ],
  "parameter_recovery": {
    "correlations": {
      "fairness_threshold_multiplier": {
        "r": 0.9233389018231545,
        "p": 2.410075470915008e-38
      },
      "unfairness_penalty_power": {
        "r": 0.4955093914118308,
        "p": 6.853515766363506e-07
      },
      "generosity_bonus_steepness": {
        "r": 0.524906096909423,
        "p": 1.090148832650645e-07
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 41.080979641441814,
  "bic_Control": 38.95417738691951,
  "bic_Cocaine": 42.924208262027804,
  "bic_results": {
    "average_bic": 41.080979641441814,
    "individual_bics": [
      27.450234213743002,
      49.09191553323488,
      39.62223498706368,
      26.864673176834348,
      37.4794341209991,
      40.590003001221376,
      32.98113563955957,
      40.59000300122139,
      32.62633465460557,
      29.61185010306135,
      28.494536942693593,
      40.59000300122139,
      40.59000300122139,
      40.59000300122138,
      40.59000300122138,
      26.26192854681481,
      28.88906720450561,
      40.59000300122138,
      34.390700972638655,
      27.507923100674343,
      43.00114790997161,
      43.38612510435463,
      32.87291615204467,
      37.231798133367995,
      20.123250549366126,
      31.14599954695601,
      41.362296132622276,
      40.590003001221376,
      26.373117281472737,
      52.43952843983297,
      41.12124073658142,
      40.590003001221376,
      49.39780763180454,
      27.68794045646238,
      48.328089597205334,
      39.739160968112714,
      39.069601613559286,
      110.64138017852457,
      48.70952145020081,
      43.459431977189496,
      42.8189588702525,
      50.66996236257576,
      49.8078440978761,
      29.78812231492381,
      61.089464662741506,
      49.728612820371026,
      36.62901999491466,
      57.472793612589086,
      69.60334515202008,
      21.70022091764176,
      31.18008829927927,
      62.536978868336135,
      30.196517670153312,
      48.674669141732124,
      31.785406396615038,
      26.36800795411645,
      49.47432814047794,
      47.21788204879924,
      34.003777724524944,
      33.80492774154382,
      38.325287203985866,
      46.45255088353008,
      45.27474047695176,
      18.24132709026105,
      51.7898638425487,
      40.124995280219004,
      42.24563514622426,
      56.779309346801966,
      36.077933966526764,
      36.68508540311991,
      27.042655926759963,
      63.86611429115861,
      27.45023408117512,
      57.060368704947564,
      53.02849458110303,
      30.001418743420313,
      35.47665197044919,
      60.00584123789912,
      24.68278736467357,
      48.12191541064739,
      48.68825037339708,
      35.220268796528146,
      44.53642489692045,
      56.400856003328244
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        27.450234213743002,
        49.09191553323488,
        39.62223498706368,
        26.864673176834348,
        37.4794341209991,
        40.590003001221376,
        32.98113563955957,
        40.59000300122139,
        32.62633465460557,
        29.61185010306135,
        28.494536942693593,
        40.59000300122139,
        40.59000300122139,
        40.59000300122138,
        40.59000300122138,
        26.26192854681481,
        28.88906720450561,
        40.59000300122138,
        34.390700972638655,
        27.507923100674343,
        43.00114790997161,
        43.38612510435463,
        32.87291615204467,
        37.231798133367995,
        20.123250549366126,
        31.14599954695601,
        41.362296132622276,
        40.590003001221376,
        26.373117281472737,
        52.43952843983297,
        41.12124073658142,
        40.590003001221376,
        49.39780763180454,
        27.68794045646238,
        48.328089597205334,
        39.739160968112714,
        39.069601613559286,
        110.64138017852457,
        48.70952145020081
      ],
      "Cocaine": [
        43.459431977189496,
        42.8189588702525,
        50.66996236257576,
        49.8078440978761,
        29.78812231492381,
        61.089464662741506,
        49.728612820371026,
        36.62901999491466,
        57.472793612589086,
        69.60334515202008,
        21.70022091764176,
        31.18008829927927,
        62.536978868336135,
        30.196517670153312,
        48.674669141732124,
        31.785406396615038,
        26.36800795411645,
        49.47432814047794,
        47.21788204879924,
        34.003777724524944,
        33.80492774154382,
        38.325287203985866,
        46.45255088353008,
        45.27474047695176,
        18.24132709026105,
        51.7898638425487,
        40.124995280219004,
        42.24563514622426,
        56.779309346801966,
        36.077933966526764,
        36.68508540311991,
        27.042655926759963,
        63.86611429115861,
        27.45023408117512,
        57.060368704947564,
        53.02849458110303,
        30.001418743420313,
        35.47665197044919,
        60.00584123789912,
        24.68278736467357,
        48.12191541064739,
        48.68825037339708,
        35.220268796528146,
        44.53642489692045,
        56.400856003328244
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- fairness_threshold_multiplier: r = 0.923\n- unfairness_penalty_power: r = 0.496\n- generosity_bonus_steepness: r = 0.525",
  "previous_models": [
    "Specification: fairness_threshold = fairness_threshold_multiplier * (token_self / (token_self + token_opp)) * combined_earning\ndelta = split_self - fairness_threshold\nU = - (abs(delta) ** unfairness_penalty_power) * (delta < 0) + generosity_bonus_steepness * log(1 + exp( (delta / combined_earning) )) * (delta >= 0)\nSummary: This is a maximally separable, three-parameter computational model of responder accept/reject choices that combines a fairness threshold multiplier (scaling entitlement-based fairness), a powered nonlinearity for penalizing unfair offers (sub-threshold), and a shaped, context-sensitive bonus for generous offers (supra-threshold) using a softplus function. The model ensures each parameter independently governs only its own region, enabling extremely strong parameter recoverability. Psychological constructs are mapped directly: fairness expectations, unfairness intolerance, and generosity sensitivity are each tuned by one parameter. The model is strictly non-additive, exploits distinct nonlinearities for loss and gain regions, and incorporates context as a learnable amplifier only in the generosity domain.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 41.080979641441814\nOverall Accuracy: 0.7569\nGroup Accuracies:\n- Control: 0.7863\n- Cocaine: 0.7315\n\nParameter Recovery:\n- fairness_threshold_multiplier: r = 0.923\n- unfairness_penalty_power: r = 0.496\n- generosity_bonus_steepness: r = 0.525"
  ]
}