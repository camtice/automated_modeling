{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "\n\n---\n\n**INSTRUCTIONS \u2013 RUN 12**\n\nYour task is to design an advanced computational model of responder (accept/reject) decisions for the provided dataset. Your primary targets are:\n\n- **(1) Maximize parameter recoverability:** Each learnable parameter must independently and robustly affect model predictions, such that it can be confidently recovered from realistic simulated data.\n- **(2) Optimize fit (low BIC, high accuracy):** Select nonlinearities and mechanisms that allow your model to fit the real data distribution as well as, or better than, previous best approaches.\n- **(3) Guarantee psychological interpretability:** Every parameter and computation must correspond to a clear psychological construct: fairness, unfairness aversion, generosity/reward, or context-based modulation.\n\n**Updated Guidelines and Requirements:**\n\n1. **Maximal Parameter Separability & Influence:**  \n   - Only up to three learnable parameters, each *exclusively* governing one model region (threshold, below-threshold penalty, above-threshold bonus).\n   - *No parameter overlap*: A given parameter must appear in one, and only one, mathematical region.\n   - The loss and gain (unfair/fair) regions must be governed by strictly distinct, explicitly parameterized mechanisms.\n   - Ensure your penalty and bonus region functions are *powerfully* influential throughout the real trial range. Demonstrate that varied parameter settings *clearly and predictably* affect acceptance patterns, not just in a narrow band.\n   - Whenever possible, *normalize* penalty or bonus (e.g., by context variable, such as combined_earning, or by a percent/relative measure), so parameter effects generalize across different pot sizes and proposal types.\n\n2. **Strong, Recoverable Nonlinearities (Avoid Overly Smooth or Flat Functions):**  \n   - Move beyond simple powered penalties or softplus bonuses.\n     - For unfair penalty: Try exponential (e.g., -A * (exp(B * abs(delta/scale)) - 1)), nonlinear polynomials, or custom piecewise functions. Consider normalizing \"delta\" by fairness_threshold or combined_earning for stability.\n     - For generosity bonus: Use steep polynomials, exponential, or context-scaled sigmoid; or a combination (e.g., context-sensitive power for supra-threshold, or a sharper nonlinearity than softplus).\n   - Explicitly exclude functions that saturate quickly unless steepness is directly and robustly tunable (with a learnable parameter).\n   - *Creativity is strongly encouraged*: hybrid/conditional functions, context-weighted polynomials, or even \"hinged\" mixtures.\n\n3. **Contextual Sensitivity:**\n   - If you incorporate \"context\" (e.g., combined_earning), you must introduce it via its *own, strictly bounded and learnable* parameter that appears only in a single region.\n   - You may alternatively use percent/relative delta (e.g., (split_self \u2212 threshold) / threshold), or a hybrid, to help with identifiability.\n   - Avoid fixed multipliers: if context matters, make its impact parameterizable and localized.\n\n4. **Expanded Simulation-based Justification:**\n   - You must provide, before the model specification, simulation reasoning where you:\n     - For *each* parameter, explicitly lay out\u2014using at least two realistic example scenarios (for both small and large stakes)\u2014how changing only that parameter affects model output, keeping the rest constant.\n     - Highlight how the penalty/bonus shape changes are robust and recoverable, and not redundant with threshold shifts.\n\n5. **Parameter Bounds and Documentation:**\n   - List all learnable parameters in the <VARIABLES> section with generous but finite bounds, using Python-safe names.\n   - Use clear, unambiguous mathematical notation in <MODEL>.\n   - Every variable and parameter must be described in the JSON, indicating learnable/calculated/data; default inclusive bounds unless otherwise stated.\n\n6. **Format and Output:**\n   - Begin with simulation-based parameter reasoning as outlined above.\n   - Give model equations only between <MODEL> and </MODEL>, strictly mathematical expressions.\n   - Give variable and parameter descriptions (with bounds) as JSON in <VARIABLES>.\n   - Specify the model\u2019s prediction target using <target_variable>.\n   - Insert a concise, mechanism-focused model description between <SUMMARY> tags.\n\n**MANDATORY CREATIVE CHALLENGE:**  \n_For this run, you are required to:_\n- (A) Use a *parameterized exponential or \"exponential-minus-one\" nonlinearity* for the unfair (sub-threshold) penalty, with a learnable shape/steepness parameter acting only in the penalty region; consider context normalization.\n- (B) Use a *parameterized power, exponential, or sharply nonlinear function* for the generosity (above-threshold) bonus, with explicit context or proportionality if possible.\n- (C) Ensure, via simulation reasoning, that both penalty and bonus parameters create sharply distinct acceptance curve changes\u2014especially in heavy-tailed, large context, and edge-case scenarios.\n\nPush for creative, hybrid, and sharply separated model mechanisms. The best models will empower strong recovery, low BIC, and high accuracy by ensuring *every parameter is both interpretable and easily \u201cvisible\u201d to the data during fitting*.\n\n---",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: \n\n---\n\n**INSTRUCTIONS \u2013 RUN 12**\n\nYour task is to design an advanced computational model of responder (accept/reject) decisions for the provided dataset. Your primary targets are:\n\n- **(1) Maximize parameter recoverability:** Each learnable parameter must independently and robustly affect model predictions, such that it can be confidently recovered from realistic simulated data.\n- **(2) Optimize fit (low BIC, high accuracy):** Select nonlinearities and mechanisms that allow your model to fit the real data distribution as well as, or better than, previous best approaches.\n- **(3) Guarantee psychological interpretability:** Every parameter and computation must correspond to a clear psychological construct: fairness, unfairness aversion, generosity/reward, or context-based modulation.\n\n**Updated Guidelines and Requirements:**\n\n1. **Maximal Parameter Separability & Influence:**  \n   - Only up to three learnable parameters, each *exclusively* governing one model region (threshold, below-threshold penalty, above-threshold bonus).\n   - *No parameter overlap*: A given parameter must appear in one, and only one, mathematical region.\n   - The loss and gain (unfair/fair) regions must be governed by strictly distinct, explicitly parameterized mechanisms.\n   - Ensure your penalty and bonus region functions are *powerfully* influential throughout the real trial range. Demonstrate that varied parameter settings *clearly and predictably* affect acceptance patterns, not just in a narrow band.\n   - Whenever possible, *normalize* penalty or bonus (e.g., by context variable, such as combined_earning, or by a percent/relative measure), so parameter effects generalize across different pot sizes and proposal types.\n\n2. **Strong, Recoverable Nonlinearities (Avoid Overly Smooth or Flat Functions):**  \n   - Move beyond simple powered penalties or softplus bonuses.\n     - For unfair penalty: Try exponential (e.g., -A * (exp(B * abs(delta/scale)) - 1)), nonlinear polynomials, or custom piecewise functions. Consider normalizing \"delta\" by fairness_threshold or combined_earning for stability.\n     - For generosity bonus: Use steep polynomials, exponential, or context-scaled sigmoid; or a combination (e.g., context-sensitive power for supra-threshold, or a sharper nonlinearity than softplus).\n   - Explicitly exclude functions that saturate quickly unless steepness is directly and robustly tunable (with a learnable parameter).\n   - *Creativity is strongly encouraged*: hybrid/conditional functions, context-weighted polynomials, or even \"hinged\" mixtures.\n\n3. **Contextual Sensitivity:**\n   - If you incorporate \"context\" (e.g., combined_earning), you must introduce it via its *own, strictly bounded and learnable* parameter that appears only in a single region.\n   - You may alternatively use percent/relative delta (e.g., (split_self \u2212 threshold) / threshold), or a hybrid, to help with identifiability.\n   - Avoid fixed multipliers: if context matters, make its impact parameterizable and localized.\n\n4. **Expanded Simulation-based Justification:**\n   - You must provide, before the model specification, simulation reasoning where you:\n     - For *each* parameter, explicitly lay out\u2014using at least two realistic example scenarios (for both small and large stakes)\u2014how changing only that parameter affects model output, keeping the rest constant.\n     - Highlight how the penalty/bonus shape changes are robust and recoverable, and not redundant with threshold shifts.\n\n5. **Parameter Bounds and Documentation:**\n   - List all learnable parameters in the <VARIABLES> section with generous but finite bounds, using Python-safe names.\n   - Use clear, unambiguous mathematical notation in <MODEL>.\n   - Every variable and parameter must be described in the JSON, indicating learnable/calculated/data; default inclusive bounds unless otherwise stated.\n\n6. **Format and Output:**\n   - Begin with simulation-based parameter reasoning as outlined above.\n   - Give model equations only between <MODEL> and </MODEL>, strictly mathematical expressions.\n   - Give variable and parameter descriptions (with bounds) as JSON in <VARIABLES>.\n   - Specify the model\u2019s prediction target using <target_variable>.\n   - Insert a concise, mechanism-focused model description between <SUMMARY> tags.\n\n**MANDATORY CREATIVE CHALLENGE:**  \n_For this run, you are required to:_\n- (A) Use a *parameterized exponential or \"exponential-minus-one\" nonlinearity* for the unfair (sub-threshold) penalty, with a learnable shape/steepness parameter acting only in the penalty region; consider context normalization.\n- (B) Use a *parameterized power, exponential, or sharply nonlinear function* for the generosity (above-threshold) bonus, with explicit context or proportionality if possible.\n- (C) Ensure, via simulation reasoning, that both penalty and bonus parameters create sharply distinct acceptance curve changes\u2014especially in heavy-tailed, large context, and edge-case scenarios.\n\nPush for creative, hybrid, and sharply separated model mechanisms. The best models will empower strong recovery, low BIC, and high accuracy by ensuring *every parameter is both interpretable and easily \u201cvisible\u201d to the data during fitting*.\n\n---\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let\u2019s tackle this systematically as instructed:\n\n## Step 1: Simulation-Based Parameter Reasoning\n\nOur model will have three **independent, recoverable, non-overlapping parameters**:\n\n- **\u03b8_threshold**: The \u201cfairness\u201d threshold ratio (e.g., 0.5 for 50% offer, but learnable).\n- **alpha_penalty**: Steepness/strength parameter for the *exponential-minus-one* (exp(x) \u2013 1) penalty when the offer is below the threshold.\n- **beta_bonus**: Strength/shape parameter for a nonlinearly rising, sharply influential generosity bonus when the offer is above the threshold, parameterized as a power function.\n\nOur core variable is **splitperc_self** (participant\u2019s % of pot). We recommend contextual normalization by **combined_earning**, but since the offer is always a proportion (splitperc_self), we can directly compare to thresholds.\n\n\n### Parameter 1: \u03b8_threshold (Fairness Threshold, Learnable, [0.1, 0.9], default 0.5)\n\n- **Role**: Sets tipping point between \u201cunfair\u201d and \u201cfair/generous.\u201d\n- **Effect**:\n    - Low \u03b8_threshold (~0.3): Accepts lower offers as fair; upward shift of acceptance curve.\n    - High \u03b8_threshold (~0.7): Only high offers are \"fair\"; curve shifts right.\n- **Simulation Examples**:\n    - **Small Pot (\u00a312, 4 tokens):**\n        - *Offer = 30%* (\u03b8=0.3): With \u03b8_threshold=0.3, just at threshold; increasing \u03b8 to 0.5 makes this deep in penalty zone \u2192 sharp drop in U.\n    - **Large Pot (\u00a336, 12 tokens):**\n        - *Offer = 50%*: \u03b8_threshold=0.3: above threshold, so bonus applies. \u03b8=0.7, in strong penalty regime \u2014 U drops.\n    - **Parameter Recovery**: Changing \u03b8_threshold robustly slides the transition point without flattening penalty/bonus shapes.\n\n---\n\n### Parameter 2: alpha_penalty (Penalty Steepness, [0.5, 10.0], Only Sub-Threshold Region)\n\n- **Mechanism**:  \n    When offer < \u03b8_threshold, calculate normalized deficit:\n        \u03b4 = \u03b8_threshold \u2013 splitperc_self / 100  \n    Penalty = \u2013 alpha_penalty * [exp(\u03b4 / \u03b8_threshold) \u2013 1]\n- **Interpretation**: Exponential sensitivity: greater or steeper aversion to violations.\n- **Simulation**:\n    - **Small Deficit Ex:** Offer = 40%, \u03b8=50% (\u03b4=0.1):  \n        - \u03b1=1 \u21d2 Penalty: \u2013(exp(0.2)\u20131) \u2248 \u20130.22  \n        - \u03b1=5 \u21d2 Penalty: \u20135*(exp(0.2)\u20131) \u2248 \u20131.1\n    - **Large Deficit Ex:** Offer = 10%, \u03b8=50% (\u03b4=0.4):  \n        - \u03b1=1 \u21d2 \u2013(exp(0.8)\u20131) \u2248 \u20131.23  \n        - \u03b1=4 \u21d2 \u20134*(exp(0.8)\u20131) \u2248 \u20134.91\n    - **Insight**: Raising alpha_penalty creates a steep dropoff in acceptance for unfair offers, with negligible interaction with threshold.\n    - **Parameter Recovery**: Changing only alpha_penalty strongly deepens or flattens aversion for unfair offers; no effect above threshold.\n\n---\n\n### Parameter 3: beta_bonus (Generosity/Bonus Strength, [0.2, 5.0], Only Supra-Threshold)\n\n- **Mechanism**:  \n    When offer > \u03b8_threshold, calculate normalized surplus:  \n        \u03b5 = (splitperc_self / 100) \u2013 \u03b8_threshold  \n    Bonus = beta_bonus * [\u03b5 / (1 \u2013 \u03b8_threshold)]^{1.5}\n          (use power 1.5 for sharp suprathreshold rise, but allow beta_bonus to scale effect)\n- **Interpretation**: Nonlinear, context-sensitive acceptance boost for very generous offers.\n- **Simulation:**\n    - **Modest Surplus:** Offer 60%, \u03b8=50% (\u03b5=0.1):  \n        - \u03b2=1 \u21d2 (0.1/0.5)^{1.5} \u2248 0.045; \u00d71 \u2248 0.045  \n        - \u03b2=5 \u21d2 \u2248 0.225\n    - **Large Surplus:** Offer 90%, \u03b8=50% (\u03b5=0.4):  \n        - (0.4/0.5)^{1.5} \u2248 0.716; \u00d71 \u2248 0.716  \n        - \u00d75 \u2248 3.58\n    - **Parameter Recovery**: Varying beta_bonus only sharpens/extends supra-threshold \u201cbonus\u201d region \u2014 does not affect penalty.\n\n---\n\n**Recap of Separability:**  \n- Changing \u03b8_threshold **shifts** the fairness cutoff (all else constant).\n- Changing alpha_penalty **steepens or flattens** the unfair penalty (only below threshold).\n- Changing beta_bonus **sharpens generosity acceptance** only for truly generous offers.\n\n**No overlap** in region of effect; mathematically robust; each effect is visually \u201crecoverable\u201d in simulated acceptance curves, even with extreme combined_earning, so they\u2019re not redundant.\n\n---\n\n## Step 2: Model Specification\n\n(Only mathematical formula between <MODEL> tags, as requested)\n\n<MODEL>\nU = \n\u2003\u2003\u2003\u2003\u2013 alpha_penalty * (exp((\u03b8_threshold \u2013 splitperc_self/100) / \u03b8_threshold) \u2013 1),\u2003if splitperc_self/100 < \u03b8_threshold\n\u2003\u2003\u2003\u20030,\u2003if splitperc_self/100 = \u03b8_threshold\n\u2003\u2003\u2003\u2003+ beta_bonus * ((splitperc_self/100 \u2013 \u03b8_threshold)/(1 \u2013 \u03b8_threshold))^{1.5},\u2003if splitperc_self/100 > \u03b8_threshold\n</MODEL>\n\n## Step 3: Variable & Parameter Descriptions\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Decision utility for accepting the offer on a given trial. Negative values (U < 0) mean probability of accepting is less than 50%.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"The proposed share for the participant in percentage of the combined earning (e.g., 50 means 50%).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"theta_threshold\": {\n      \"description\": \"Fairness threshold parameter (proportion; e.g., 0.5 = 50%). Below this threshold, penalty applies. Learnable; purely governs cutoff point.\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 0.9,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.1,\n          \"high\": 0.9\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_penalty\": {\n      \"description\": \"Penalty steepness/strength parameter for unfair (sub-threshold) offers. Controls the exponential-minus-one penalty magnitude ONLY when splitperc_self/100 < theta_threshold.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_bonus\": {\n      \"description\": \"Generosity/bonus strength parameter for supra-threshold (generous) offers. Scales the bonus magnitude ONLY for splitperc_self/100 > theta_threshold. Nonlinear bonus depends on surplus generosity.\",\n      \"range\": {\n        \"min\": 0.2,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.2,\n          \"high\": 5.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA sharply context-sensitive, regionally-separable model of responder acceptance. A learned fairness threshold sets the cutoff; sub-threshold offers incur a parameterized, exponential-minus-one penalty sharply reducing acceptance, while supra-threshold offers earn a nonlinear bonus governed by a distinct learnable parameter. Each mechanism is isolated to its decision region for maximal parameter recovery; nonlinearities ensure detectable effects even at high or low stakes.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['theta_threshold', 'alpha_penalty', 'beta_bonus']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                tags, as requested)\n\n<MODEL>\nU = \n\u2003\u2003\u2003\u2003\u2013 alpha_penalty * (exp((\u03b8_threshold \u2013 splitperc_self/100) / \u03b8_threshold) \u2013 1),\u2003if splitperc_self/100 < \u03b8_threshold\n\u2003\u2003\u2003\u20030,\u2003if splitperc_self/100 = \u03b8_threshold\n\u2003\u2003\u2003\u2003+ beta_bonus * ((splitperc_self/100 \u2013 \u03b8_threshold)/(1 \u2013 \u03b8_threshold))^{1.5},\u2003if splitperc_self/100 > \u03b8_threshold\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Decision utility for accepting the offer on a given trial. Negative values (U < 0) mean probability of accepting is less than 50%.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"The proposed share for the participant in percentage of the combined earning (e.g., 50 means 50%).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"theta_threshold\": {\n      \"description\": \"Fairness threshold parameter (proportion; e.g., 0.5 = 50%). Below this threshold, penalty applies. Learnable; purely governs cutoff point.\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 0.9,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.1,\n          \"high\": 0.9\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_penalty\": {\n      \"description\": \"Penalty steepness/strength parameter for unfair (sub-threshold) offers. Controls the exponential-minus-one penalty magnitude ONLY when splitperc_self/100 < theta_threshold.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_bonus\": {\n      \"description\": \"Generosity/bonus strength parameter for supra-threshold (generous) offers. Scales the bonus magnitude ONLY for splitperc_self/100 > theta_threshold. Nonlinear bonus depends on surplus generosity.\",\n      \"range\": {\n        \"min\": 0.2,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.2,\n          \"high\": 5.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, theta_threshold=0.5, alpha_penalty=1.0, beta_bonus=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        splitperc_self = trial.get(\"splitperc_self\", 0)  # Default to 0 if missing\n\n        splitperc_self_prop = splitperc_self / 100.0\n\n        if splitperc_self_prop < theta_threshold:\n            U = - alpha_penalty * (math.exp((theta_threshold - splitperc_self_prop) / theta_threshold) - 1)\n        elif splitperc_self_prop == theta_threshold:\n            U = 0\n        else:  # splitperc_self_prop > theta_threshold\n            U = beta_bonus * ((splitperc_self_prop - theta_threshold) / (1 - theta_threshold))**1.5\n\n        model_predictions.append(U)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"Group1\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 6, \"token_self\": 6, \"combined_earning\": 12, \"split_opp\": 6.0, \"split_self\": 6.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 6.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 6.0}, {\"ID\": 2, \"group\": \"Group1\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 8, \"token_self\": 4, \"combined_earning\": 12, \"split_opp\": 8.0, \"split_self\": 4.0, \"splitperc_opp\": 67, \"splitperc_self\": 33, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 33.0, \"proposed_amount\": 4.0}, {\"ID\": 3, \"group\": \"Group1\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 10, \"token_self\": 2, \"combined_earning\": 12, \"split_opp\": 10.0, \"split_self\": 2.0, \"splitperc_opp\": 83, \"splitperc_self\": 17, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 17.0, \"proposed_amount\": 2.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744726502.348588
    }
  ],
  "learnable_parameters": {
    "theta_threshold": {
      "description": "Fairness threshold parameter (proportion; e.g., 0.5 = 50%). Below this threshold, penalty applies. Learnable; purely governs cutoff point.",
      "range": {
        "min": 0.1,
        "max": 0.9,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.1,
          "high": 0.9
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "alpha_penalty": {
      "description": "Penalty steepness/strength parameter for unfair (sub-threshold) offers. Controls the exponential-minus-one penalty magnitude ONLY when splitperc_self/100 < theta_threshold.",
      "range": {
        "min": 0.5,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta_bonus": {
      "description": "Generosity/bonus strength parameter for supra-threshold (generous) offers. Scales the bonus magnitude ONLY for splitperc_self/100 > theta_threshold. Nonlinear bonus depends on surplus generosity.",
      "range": {
        "min": 0.2,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.2,
          "high": 5.0
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "tags, as requested)\n\n<MODEL>\nU = \n\u2003\u2003\u2003\u2003\u2013 alpha_penalty * (exp((\u03b8_threshold \u2013 splitperc_self/100) / \u03b8_threshold) \u2013 1),\u2003if splitperc_self/100 < \u03b8_threshold\n\u2003\u2003\u2003\u20030,\u2003if splitperc_self/100 = \u03b8_threshold\n\u2003\u2003\u2003\u2003+ beta_bonus * ((splitperc_self/100 \u2013 \u03b8_threshold)/(1 \u2013 \u03b8_threshold))^{1.5},\u2003if splitperc_self/100 > \u03b8_threshold",
  "variable_descriptions": {
    "U": {
      "description": "Decision utility for accepting the offer on a given trial. Negative values (U < 0) mean probability of accepting is less than 50%.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "splitperc_self": {
      "description": "The proposed share for the participant in percentage of the combined earning (e.g., 50 means 50%).",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "theta_threshold": {
      "description": "Fairness threshold parameter (proportion; e.g., 0.5 = 50%). Below this threshold, penalty applies. Learnable; purely governs cutoff point.",
      "range": {
        "min": 0.1,
        "max": 0.9,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.1,
          "high": 0.9
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "alpha_penalty": {
      "description": "Penalty steepness/strength parameter for unfair (sub-threshold) offers. Controls the exponential-minus-one penalty magnitude ONLY when splitperc_self/100 < theta_threshold.",
      "range": {
        "min": 0.5,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta_bonus": {
      "description": "Generosity/bonus strength parameter for supra-threshold (generous) offers. Scales the bonus magnitude ONLY for splitperc_self/100 > theta_threshold. Nonlinear bonus depends on surplus generosity.",
      "range": {
        "min": 0.2,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.2,
          "high": 5.0
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A sharply context-sensitive, regionally-separable model of responder acceptance. A learned fairness threshold sets the cutoff; sub-threshold offers incur a parameterized, exponential-minus-one penalty sharply reducing acceptance, while supra-threshold offers earn a nonlinear bonus governed by a distinct learnable parameter. Each mechanism is isolated to its decision region for maximal parameter recovery; nonlinearities ensure detectable effects even at high or low stakes.",
  "target_variable": "accept",
  "full_reasoning": "Let\u2019s tackle this systematically as instructed:\n\n## Step 1: Simulation-Based Parameter Reasoning\n\nOur model will have three **independent, recoverable, non-overlapping parameters**:\n\n- **\u03b8_threshold**: The \u201cfairness\u201d threshold ratio (e.g., 0.5 for 50% offer, but learnable).\n- **alpha_penalty**: Steepness/strength parameter for the *exponential-minus-one* (exp(x) \u2013 1) penalty when the offer is below the threshold.\n- **beta_bonus**: Strength/shape parameter for a nonlinearly rising, sharply influential generosity bonus when the offer is above the threshold, parameterized as a power function.\n\nOur core variable is **splitperc_self** (participant\u2019s % of pot). We recommend contextual normalization by **combined_earning**, but since the offer is always a proportion (splitperc_self), we can directly compare to thresholds.\n\n\n### Parameter 1: \u03b8_threshold (Fairness Threshold, Learnable, [0.1, 0.9], default 0.5)\n\n- **Role**: Sets tipping point between \u201cunfair\u201d and \u201cfair/generous.\u201d\n- **Effect**:\n    - Low \u03b8_threshold (~0.3): Accepts lower offers as fair; upward shift of acceptance curve.\n    - High \u03b8_threshold (~0.7): Only high offers are \"fair\"; curve shifts right.\n- **Simulation Examples**:\n    - **Small Pot (\u00a312, 4 tokens):**\n        - *Offer = 30%* (\u03b8=0.3): With \u03b8_threshold=0.3, just at threshold; increasing \u03b8 to 0.5 makes this deep in penalty zone \u2192 sharp drop in U.\n    - **Large Pot (\u00a336, 12 tokens):**\n        - *Offer = 50%*: \u03b8_threshold=0.3: above threshold, so bonus applies. \u03b8=0.7, in strong penalty regime \u2014 U drops.\n    - **Parameter Recovery**: Changing \u03b8_threshold robustly slides the transition point without flattening penalty/bonus shapes.\n\n---\n\n### Parameter 2: alpha_penalty (Penalty Steepness, [0.5, 10.0], Only Sub-Threshold Region)\n\n- **Mechanism**:  \n    When offer < \u03b8_threshold, calculate normalized deficit:\n        \u03b4 = \u03b8_threshold \u2013 splitperc_self / 100  \n    Penalty = \u2013 alpha_penalty * [exp(\u03b4 / \u03b8_threshold) \u2013 1]\n- **Interpretation**: Exponential sensitivity: greater or steeper aversion to violations.\n- **Simulation**:\n    - **Small Deficit Ex:** Offer = 40%, \u03b8=50% (\u03b4=0.1):  \n        - \u03b1=1 \u21d2 Penalty: \u2013(exp(0.2)\u20131) \u2248 \u20130.22  \n        - \u03b1=5 \u21d2 Penalty: \u20135*(exp(0.2)\u20131) \u2248 \u20131.1\n    - **Large Deficit Ex:** Offer = 10%, \u03b8=50% (\u03b4=0.4):  \n        - \u03b1=1 \u21d2 \u2013(exp(0.8)\u20131) \u2248 \u20131.23  \n        - \u03b1=4 \u21d2 \u20134*(exp(0.8)\u20131) \u2248 \u20134.91\n    - **Insight**: Raising alpha_penalty creates a steep dropoff in acceptance for unfair offers, with negligible interaction with threshold.\n    - **Parameter Recovery**: Changing only alpha_penalty strongly deepens or flattens aversion for unfair offers; no effect above threshold.\n\n---\n\n### Parameter 3: beta_bonus (Generosity/Bonus Strength, [0.2, 5.0], Only Supra-Threshold)\n\n- **Mechanism**:  \n    When offer > \u03b8_threshold, calculate normalized surplus:  \n        \u03b5 = (splitperc_self / 100) \u2013 \u03b8_threshold  \n    Bonus = beta_bonus * [\u03b5 / (1 \u2013 \u03b8_threshold)]^{1.5}\n          (use power 1.5 for sharp suprathreshold rise, but allow beta_bonus to scale effect)\n- **Interpretation**: Nonlinear, context-sensitive acceptance boost for very generous offers.\n- **Simulation:**\n    - **Modest Surplus:** Offer 60%, \u03b8=50% (\u03b5=0.1):  \n        - \u03b2=1 \u21d2 (0.1/0.5)^{1.5} \u2248 0.045; \u00d71 \u2248 0.045  \n        - \u03b2=5 \u21d2 \u2248 0.225\n    - **Large Surplus:** Offer 90%, \u03b8=50% (\u03b5=0.4):  \n        - (0.4/0.5)^{1.5} \u2248 0.716; \u00d71 \u2248 0.716  \n        - \u00d75 \u2248 3.58\n    - **Parameter Recovery**: Varying beta_bonus only sharpens/extends supra-threshold \u201cbonus\u201d region \u2014 does not affect penalty.\n\n---\n\n**Recap of Separability:**  \n- Changing \u03b8_threshold **shifts** the fairness cutoff (all else constant).\n- Changing alpha_penalty **steepens or flattens** the unfair penalty (only below threshold).\n- Changing beta_bonus **sharpens generosity acceptance** only for truly generous offers.\n\n**No overlap** in region of effect; mathematically robust; each effect is visually \u201crecoverable\u201d in simulated acceptance curves, even with extreme combined_earning, so they\u2019re not redundant.\n\n---\n\n## Step 2: Model Specification\n\n(Only mathematical formula between <MODEL> tags, as requested)\n\n<MODEL>\nU = \n\u2003\u2003\u2003\u2003\u2013 alpha_penalty * (exp((\u03b8_threshold \u2013 splitperc_self/100) / \u03b8_threshold) \u2013 1),\u2003if splitperc_self/100 < \u03b8_threshold\n\u2003\u2003\u2003\u20030,\u2003if splitperc_self/100 = \u03b8_threshold\n\u2003\u2003\u2003\u2003+ beta_bonus * ((splitperc_self/100 \u2013 \u03b8_threshold)/(1 \u2013 \u03b8_threshold))^{1.5},\u2003if splitperc_self/100 > \u03b8_threshold\n</MODEL>\n\n## Step 3: Variable & Parameter Descriptions\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Decision utility for accepting the offer on a given trial. Negative values (U < 0) mean probability of accepting is less than 50%.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"The proposed share for the participant in percentage of the combined earning (e.g., 50 means 50%).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"theta_threshold\": {\n      \"description\": \"Fairness threshold parameter (proportion; e.g., 0.5 = 50%). Below this threshold, penalty applies. Learnable; purely governs cutoff point.\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 0.9,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.1,\n          \"high\": 0.9\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_penalty\": {\n      \"description\": \"Penalty steepness/strength parameter for unfair (sub-threshold) offers. Controls the exponential-minus-one penalty magnitude ONLY when splitperc_self/100 < theta_threshold.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_bonus\": {\n      \"description\": \"Generosity/bonus strength parameter for supra-threshold (generous) offers. Scales the bonus magnitude ONLY for splitperc_self/100 > theta_threshold. Nonlinear bonus depends on surplus generosity.\",\n      \"range\": {\n        \"min\": 0.2,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.2,\n          \"high\": 5.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA sharply context-sensitive, regionally-separable model of responder acceptance. A learned fairness threshold sets the cutoff; sub-threshold offers incur a parameterized, exponential-minus-one penalty sharply reducing acceptance, while supra-threshold offers earn a nonlinear bonus governed by a distinct learnable parameter. Each mechanism is isolated to its decision region for maximal parameter recovery; nonlinearities ensure detectable effects even at high or low stakes.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: tags, as requested)\n\n<MODEL>\nU = \n\u2003\u2003\u2003\u2003\u2013 alpha_penalty * (exp((\u03b8_threshold \u2013 splitperc_self/100) / \u03b8_threshold) \u2013 1),\u2003if splitperc_self/100 < \u03b8_threshold\n\u2003\u2003\u2003\u20030,\u2003if splitperc_self/100 = \u03b8_threshold\n\u2003\u2003\u2003\u2003+ beta_bonus * ((splitperc_self/100 \u2013 \u03b8_threshold)/(1 \u2013 \u03b8_threshold))^{1.5},\u2003if splitperc_self/100 > \u03b8_threshold\nSummary: A sharply context-sensitive, regionally-separable model of responder acceptance. A learned fairness threshold sets the cutoff; sub-threshold offers incur a parameterized, exponential-minus-one penalty sharply reducing acceptance, while supra-threshold offers earn a nonlinear bonus governed by a distinct learnable parameter. Each mechanism is isolated to its decision region for maximal parameter recovery; nonlinearities ensure detectable effects even at high or low stakes.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, theta_threshold=0.5, alpha_penalty=1.0, beta_bonus=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        splitperc_self = trial.get(\"splitperc_self\", 0)  # Default to 0 if missing\n\n        splitperc_self_prop = splitperc_self / 100.0\n\n        if splitperc_self_prop < theta_threshold:\n            U = - alpha_penalty * (math.exp((theta_threshold - splitperc_self_prop) / theta_threshold) - 1)\n        elif splitperc_self_prop == theta_threshold:\n            U = 0\n        else:  # splitperc_self_prop > theta_threshold\n            U = beta_bonus * ((splitperc_self_prop - theta_threshold) / (1 - theta_threshold))**1.5\n\n        model_predictions.append(U)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6733821733821734,
  "group_accuracies": {
    "Control": 0.6718346253229974,
    "Cocaine": 0.6747685185185185
  },
  "group_parameter_averages": {
    "Control": {
      "theta_threshold": 0.20861629916985475,
      "alpha_penalty": 6.63693970855438,
      "beta_bonus": 4.740408794197873
    },
    "Cocaine": {
      "theta_threshold": 0.2639748437657873,
      "alpha_penalty": 5.845589746694562,
      "beta_bonus": 4.523991927109963
    }
  },
  "fitting_results": [
    {
      "theta_threshold": 0.4999999939467341,
      "alpha_penalty": 10.0,
      "beta_bonus": 2.3590028524337634,
      "success": true,
      "log_likelihood": -2.9348190352681263,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.23151919726029685,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -19.304325975906494,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.2300955661605502,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -19.420948892646194,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.34509090445269425,
      "alpha_penalty": 4.43557168036116,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -18.258608948413894,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.2712292581999541,
      "alpha_penalty": 3.6410516162483253,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -21.28184511533856,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.13593739155852308,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -18.139379131588587,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 0.5,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -16.635942739404427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.13353991767183937,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -18.03573950349736,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 1.5647814350639737,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -16.635942739404427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.32752821954250844,
      "alpha_penalty": 4.485839696243543,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -18.925948813829677,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.26918265101406097,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -16.879618626995395,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.49999999530459294,
      "alpha_penalty": 8.44138277060598,
      "beta_bonus": 2.111123574815359,
      "success": true,
      "log_likelihood": -6.323399748167367,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.29072137309694956,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -16.105317938686866,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 0.5,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -16.635942739404424,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 1.3653709630701596,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -16.63594273940443,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 0.5,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -16.635942739404427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 0.5,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -16.635942739404427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.12159188589774422,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -15.96844998104419,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.10206085023341262,
      "alpha_penalty": 7.673796999028674,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -17.15117991619674,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 0.5,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -16.635942739404435,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.21168662302492458,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -20.038044125325413,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.12208796987887366,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -16.438589369507916,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.3472000288655703,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -12.421688976274444,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.2287589066410611,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -18.7511126796714,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.21416982202821055,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -21.11379683177889,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.14763648266858545,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -19.53740280038863,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.28087033747565476,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -15.179365201017552,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.3302652642600157,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -13.921286328158763,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 2.4104206938515684,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -17.530095910469615,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 0.5,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -19.072890144161345,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 0.5,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -16.635942739404424,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.5000000227123725,
      "alpha_penalty": 9.614089794495841,
      "beta_bonus": 1.6573818790562034,
      "success": true,
      "log_likelihood": -3.0250093569866445,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.3091126173147793,
      "alpha_penalty": 9.54141267487296,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -15.80293739721484,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.3108440431557937,
      "alpha_penalty": 9.346054360259695,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -15.872817660494459,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 0.5,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -16.635942739404427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.2234440410204175,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -17.775027801026518,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.13037441829185528,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -17.468605673563587,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.2138377544055748,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -20.503469732153878,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.13529966950602645,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -19.158782920006345,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 0.5,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -17.161334833202886,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.14187980300735423,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -19.55255137116437,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.3645358557068232,
      "alpha_penalty": 7.868634783736463,
      "beta_bonus": 2.7100698442032094,
      "success": true,
      "log_likelihood": -14.7015787076785,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 0.5,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -17.15972554017374,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.29999988699478175,
      "alpha_penalty": 10.0,
      "beta_bonus": 3.5967734918031473,
      "success": true,
      "log_likelihood": -16.115192904380482,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.13989975644688502,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -18.576526703947323,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 0.5,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -19.696542976965794,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.28308126237025344,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -15.512621720820558,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.3472458640206308,
      "alpha_penalty": 3.4180353766426665,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -19.73258779091037,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.28402162208438847,
      "alpha_penalty": 3.2644874345123465,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -21.632160026710984,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.21741341919044666,
      "alpha_penalty": 0.5,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -22.97937622651287,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 0.5,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -20.091563371845297,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.4440224091050161,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -7.762280927836626,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.2528934151389252,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -16.875532782888236,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.15247656219524494,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -20.46375950326246,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.5295875413968173,
      "alpha_penalty": 0.8137360226408753,
      "beta_bonus": 0.2,
      "success": true,
      "log_likelihood": -23.769293458075946,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.31717688475625433,
      "alpha_penalty": 8.62989302162075,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -16.31830575381163,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.35191454985975096,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -12.634179523357975,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 0.5,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -19.247395807921666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.4801648831981865,
      "alpha_penalty": 10.0,
      "beta_bonus": 3.9966653949531707,
      "success": true,
      "log_likelihood": -5.094273339279431,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 0.5,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -18.108692197467914,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.10707377133061646,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -21.05700941875618,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.2307376628364422,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -19.230304748043096,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.4999999966879959,
      "alpha_penalty": 10.0,
      "beta_bonus": 3.3466219721363806,
      "success": true,
      "log_likelihood": -2.9348189918724357,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.35000000055386965,
      "alpha_penalty": 3.0692168104617075,
      "beta_bonus": 4.204219536571509,
      "success": true,
      "log_likelihood": -20.239041044804726,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.39999999798468744,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -8.921644109861685,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.27259514288225417,
      "alpha_penalty": 6.86189819462488,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -18.057221790206565,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 2.259258662026948,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -17.006313109700304,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 0.5,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -17.868693526090986,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.2520235898961347,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -16.592589410574618,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 0.5,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -17.968563558126117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.44796475226576904,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -6.599292390014162,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.44657287832035925,
      "alpha_penalty": 10.0,
      "beta_bonus": 2.4135850584017815,
      "success": true,
      "log_likelihood": -6.560028323632518,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.17011305068710844,
      "alpha_penalty": 1.3589156909133808,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -21.41134076393149,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1044225449531469,
      "alpha_penalty": 9.64793126112816,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -18.484265066573247,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.297315323895169,
      "alpha_penalty": 1.7569418764328788,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -23.21279362480588,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.13036793282424847,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -17.46860564601843,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 0.5,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -17.16133483320289,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.9,
      "alpha_penalty": 3.1080409786032597,
      "beta_bonus": 1.8956071428259051,
      "success": true,
      "log_likelihood": -7.586653459992218,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 1.614128671163508,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -22.655325684224408,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.5000001010618397,
      "alpha_penalty": 10.0,
      "beta_bonus": 3.7071966051945524,
      "success": true,
      "log_likelihood": -2.934820371361181,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1999999059194138,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -21.203024552801942,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 0.9580289812822529,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -17.86869352609099,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.4550638207738643,
      "alpha_penalty": 9.233985465502787,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -7.906762346077286,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.28283681101999325,
      "alpha_penalty": 10.0,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -15.219526815028155,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 0.5,
      "beta_bonus": 4.213004866824313,
      "success": true,
      "log_likelihood": -23.516438998541904,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.4794032163699335,
      "alpha_penalty": 10.0,
      "beta_bonus": 4.377938432567455,
      "success": true,
      "log_likelihood": -5.089968777182554,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 0.5,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -20.175269231928954,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.32228348557898695,
      "alpha_penalty": 8.087012362540515,
      "beta_bonus": 0.2,
      "success": true,
      "log_likelihood": -17.168760109523216,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 0.5,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -17.15972554017374,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.3221204581583748,
      "alpha_penalty": 9.192599696105981,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -15.005223519487254,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "theta_threshold": 0.1,
      "alpha_penalty": 1.8141973351360647,
      "beta_bonus": 5.0,
      "success": true,
      "log_likelihood": -20.125283624787414,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "theta_threshold": {
        "r": 0.7326848714643924,
        "p": 4.5503382389155334e-18
      },
      "alpha_penalty": {
        "r": 0.6652021436498508,
        "p": 4.3972855054766654e-14
      },
      "beta_bonus": {
        "r": 0.15604577581365003,
        "p": 0.12105690341654844
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 43.48987113563319,
  "bic_Control": 43.80354191502596,
  "bic_Cocaine": 43.2088743957605,
  "bic_results": {
    "average_bic": 43.48987113563319,
    "individual_bics": [
      16.62019488590458,
      49.359208767181315,
      49.592454600660716,
      47.267774712196115,
      53.31424704604545,
      47.02931507854551,
      44.02244229417718,
      46.82203582236305,
      44.02244229417718,
      48.60245444302768,
      44.50979406935912,
      23.397356311703064,
      42.96119269274206,
      44.02244229417718,
      44.022442294177196,
      44.02244229417718,
      44.02244229417718,
      42.68745677745671,
      45.052916647761805,
      44.022442294177196,
      50.826645066019154,
      43.62773555438416,
      35.59393476791722,
      48.25278217471113,
      52.97815047892611,
      49.825362416145595,
      41.109287217403434,
      38.593129471685856,
      45.810748636307565,
      48.896337103691025,
      44.02244229417718,
      16.80057552934162,
      42.35643160979801,
      42.49619213635725,
      44.02244229417718,
      46.30061241742136,
      45.6877681624955,
      51.75749627967609,
      49.06812265538102,
      45.0732264817741,
      49.85565955769707,
      40.15371423072533,
      45.070007895715804,
      42.9809426241293,
      47.90361022326297,
      50.143642769299916,
      41.77580025700945,
      50.21573239718907,
      54.014876868790296,
      56.709309268394065,
      50.93368355905892,
      26.275118671041582,
      44.5016223811448,
      51.678075821893245,
      58.28914373152023,
      43.387168322991585,
      36.018915862084285,
      49.24534843121167,
      20.939103493927192,
      46.96794121030416,
      52.86457565288069,
      49.21116631145452,
      16.6201947991132,
      51.228638904977785,
      28.5938450350917,
      46.865000395781465,
      44.76318303476894,
      46.4879438675503,
      43.93573563651756,
      46.68768393162057,
      23.949141595396654,
      23.870613462633365,
      53.57323834323131,
      47.71908694851483,
      57.17614406498009,
      45.68776810740519,
      45.073226481774114,
      25.923863735352768,
      56.06120818381714,
      16.620197558090695,
      53.15660592097221,
      46.487943867550314,
      26.5640815075229,
      41.18961044542464,
      57.78343481245214,
      20.930494369733438,
      51.10109527922624,
      45.088077034414766,
      45.070007895715804,
      40.76100385434284,
      51.001124064943156
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        16.62019488590458,
        49.359208767181315,
        49.592454600660716,
        47.267774712196115,
        53.31424704604545,
        47.02931507854551,
        44.02244229417718,
        46.82203582236305,
        44.02244229417718,
        48.60245444302768,
        44.50979406935912,
        23.397356311703064,
        42.96119269274206,
        44.02244229417718,
        44.022442294177196,
        44.02244229417718,
        44.02244229417718,
        42.68745677745671,
        45.052916647761805,
        44.022442294177196,
        50.826645066019154,
        43.62773555438416,
        35.59393476791722,
        48.25278217471113,
        52.97815047892611,
        49.825362416145595,
        41.109287217403434,
        38.593129471685856,
        45.810748636307565,
        48.896337103691025,
        44.02244229417718,
        16.80057552934162,
        42.35643160979801,
        42.49619213635725,
        44.02244229417718,
        46.30061241742136,
        45.6877681624955,
        51.75749627967609,
        49.06812265538102,
        45.0732264817741,
        49.85565955769707,
        40.15371423072533,
        45.070007895715804
      ],
      "Cocaine": [
        42.9809426241293,
        47.90361022326297,
        50.143642769299916,
        41.77580025700945,
        50.21573239718907,
        54.014876868790296,
        56.709309268394065,
        50.93368355905892,
        26.275118671041582,
        44.5016223811448,
        51.678075821893245,
        58.28914373152023,
        43.387168322991585,
        36.018915862084285,
        49.24534843121167,
        20.939103493927192,
        46.96794121030416,
        52.86457565288069,
        49.21116631145452,
        16.6201947991132,
        51.228638904977785,
        28.5938450350917,
        46.865000395781465,
        44.76318303476894,
        46.4879438675503,
        43.93573563651756,
        46.68768393162057,
        23.949141595396654,
        23.870613462633365,
        53.57323834323131,
        47.71908694851483,
        57.17614406498009,
        45.68776810740519,
        45.073226481774114,
        25.923863735352768,
        56.06120818381714,
        16.620197558090695,
        53.15660592097221,
        46.487943867550314,
        26.5640815075229,
        41.18961044542464,
        57.78343481245214,
        20.930494369733438,
        51.10109527922624,
        45.088077034414766,
        45.070007895715804,
        40.76100385434284,
        51.001124064943156
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- theta_threshold: r = 0.733\n- alpha_penalty: r = 0.665\n- beta_bonus: r = 0.156",
  "previous_models": [
    "Specification: tags, as requested)\n\n<MODEL>\nU = \n\u2003\u2003\u2003\u2003\u2013 alpha_penalty * (exp((\u03b8_threshold \u2013 splitperc_self/100) / \u03b8_threshold) \u2013 1),\u2003if splitperc_self/100 < \u03b8_threshold\n\u2003\u2003\u2003\u20030,\u2003if splitperc_self/100 = \u03b8_threshold\n\u2003\u2003\u2003\u2003+ beta_bonus * ((splitperc_self/100 \u2013 \u03b8_threshold)/(1 \u2013 \u03b8_threshold))^{1.5},\u2003if splitperc_self/100 > \u03b8_threshold\nSummary: A sharply context-sensitive, regionally-separable model of responder acceptance. A learned fairness threshold sets the cutoff; sub-threshold offers incur a parameterized, exponential-minus-one penalty sharply reducing acceptance, while supra-threshold offers earn a nonlinear bonus governed by a distinct learnable parameter. Each mechanism is isolated to its decision region for maximal parameter recovery; nonlinearities ensure detectable effects even at high or low stakes.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 43.48987113563319\nOverall Accuracy: 0.6734\nGroup Accuracies:\n- Control: 0.6718\n- Cocaine: 0.6748\n\nParameter Recovery:\n- theta_threshold: r = 0.733\n- alpha_penalty: r = 0.665\n- beta_bonus: r = 0.156"
  ]
}