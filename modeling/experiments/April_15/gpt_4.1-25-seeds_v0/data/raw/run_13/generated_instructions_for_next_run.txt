

---

**INSTRUCTIONS – RUN 14**

Your task is to design an innovative, high-performance model to predict responder (accept/reject) decisions in this dataset. The priorities for this round are:

### **1. Maximize Parameter Recovery and Coverage**
- **Strong, Non-Redundant, and Broad Parameter Influence:** You must *demonstrate via quantitative simulation or edge-case analysis* that each learnable parameter powerfully, monotonicly, and *exclusively* controls model output across a broad range of realistic trial data (not just toy values).
    - The effect of sweeping each parameter should be visually and numerically obvious for both small and large offers/pots.
    - Each model region (penalty, threshold, bonus) must be robustly occupied in *actual* trial data—not just in principle.
    - Provide explicit reasoning about parameter identifiability and recoverability, e.g., "with this parameter at low/high, here are example utility outputs for low/high token trials, and here is why effects are not redundant with other parameters."

### **2. Flexible, Powerful Nonlinearities and Region-Exclusive Effects**
- **Exactly three learnable parameters—one per region (fairness threshold, penalty, generosity/bonus):**
    - At least one parameter in penalty or bonus *must* modulate both strength and curvature (e.g., a single parameter multiplies both exponent and coefficient, or the bonus is K * exp(steepness * surplus)).
    - The **penalty region** (offers below threshold): Use a parameterized, steep, and strictly negative (monotonically decreasing) function; exponential-minus-one or power nonlinearity is preferred, but you *may* combine a shape and scaling effect into a single parameter if justified.
    - The **bonus region** (offers above threshold): Use a function that does *not* saturate too quickly—consider log(1 + amp * surplus), context-weighted exponential, or flexible power, ideally with a *parameter* that impacts both slope and height.
    - Each function should be **normalized, bounded, or amplified** by context only if such normalization demonstrably preserves parameter recoverability (do NOT normalize if it flattens or vanishes parameter impact).

### **3. Fairness Threshold Flexibility**
- You may construct threshold as:
    - a function of token ratio (with a scaling and/or additive shift)
    - a function directly involving money splits (if more robust),
    - or another creative entitlement approach.
- Explicitly justify your threshold formula and simulation; show that it divides trials so that both penalty and bonus are meaningfully covered in data.

### **4. Simulation-Based Reasoning—MANDATORY**
- For *each* parameter, you MUST provide (i) at least two full, quantitative trial examples—one for high-pot, one for low-pot (or disparate token configurations)—demonstrating how changes in that parameter affect U, all else fixed; and (ii) edge-case reasoning for both typical and rare trials.
- Clearly cross-compare the effect directions and magnitude between parameters, and confirm—by explicit examples—that parameter effects are clearly distinguishable and *not redundant or vanishing* under any plausible data distribution.
- If possible, discuss the actual prevalence of penalty and bonus region coverage in the expected data (e.g., "In X% of trials, offers fall above/below threshold, ensuring recoverability").
- If your region separation is at risk of being too narrow (e.g., only penalty region is ever observed), consider introducing an offset, soft threshold, or mixed-region function.

### **5. Non-Saturation and Context Sensitivity in Bonus**
- Strongly prefer bonus functions that (even at parameter extremes) produce a range of output, rather than always saturating at 0 or some fixed max.
- Context dependence in the generosity region can be multiplicative (bonus ∝ surplus × pot size) or use context as an explicit input, so long as it is fully parameterized and affects only bonus.
- Consider creative hybrids, such as log(1 + amp * surplus * context), exp or sigmoid-of-surplus, or even regionally adaptive forms (bonus is linear for small surplus, exponential for large).

### **6. Formatting and Output Requirements**
- Start with detailed simulation-based parameter reasoning and edge-case analysis before presenting the model.
- Strictly enclose only the model’s equations between <MODEL> and </MODEL> tags; no explanations inside these tags.
- Provide variable/parameter JSON between <VARIABLES> tags, carefully indicate which are learnable, and ensure parameter names are unambiguous and not Python-reserved.
- Include the name of the model’s predicted variable in <target_variable> tags.
- Write a sharply focused, concise summary (1–2 lines) in <SUMMARY> tags.

### **7. Additional Challenge**
- Allow (or even require) the bonus region to multiply surplus or generosity by the actual combined_earning variable or by another context factor, with the bonus function’s output being flexible and non-saturating.

### **8. Explicit Prohibitions**
- No parameter may influence more than one region.
- No identical or mirrored mathematical forms in different regions.
- No excessive normalization that eliminates parameter impact.
- Do not design penalty/bonus forms that are always flat or always saturating except at parameter extremes.

**Remember:** Only models that show, in detailed simulation, that all parameters are recoverable and non-redundant will be considered valid. Optimizing parameter recovery is your *prime goal*—prioritize this over tradition or convention.

Seek creative, robust, and well-justified solutions!