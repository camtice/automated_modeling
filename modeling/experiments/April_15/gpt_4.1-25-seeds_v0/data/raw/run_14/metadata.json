{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "\n\n---\n\n**INSTRUCTIONS \u2013 RUN 14**\n\nYour task is to design an innovative, high-performance model to predict responder (accept/reject) decisions in this dataset. The priorities for this round are:\n\n### **1. Maximize Parameter Recovery and Coverage**\n- **Strong, Non-Redundant, and Broad Parameter Influence:** You must *demonstrate via quantitative simulation or edge-case analysis* that each learnable parameter powerfully, monotonicly, and *exclusively* controls model output across a broad range of realistic trial data (not just toy values).\n    - The effect of sweeping each parameter should be visually and numerically obvious for both small and large offers/pots.\n    - Each model region (penalty, threshold, bonus) must be robustly occupied in *actual* trial data\u2014not just in principle.\n    - Provide explicit reasoning about parameter identifiability and recoverability, e.g., \"with this parameter at low/high, here are example utility outputs for low/high token trials, and here is why effects are not redundant with other parameters.\"\n\n### **2. Flexible, Powerful Nonlinearities and Region-Exclusive Effects**\n- **Exactly three learnable parameters\u2014one per region (fairness threshold, penalty, generosity/bonus):**\n    - At least one parameter in penalty or bonus *must* modulate both strength and curvature (e.g., a single parameter multiplies both exponent and coefficient, or the bonus is K * exp(steepness * surplus)).\n    - The **penalty region** (offers below threshold): Use a parameterized, steep, and strictly negative (monotonically decreasing) function; exponential-minus-one or power nonlinearity is preferred, but you *may* combine a shape and scaling effect into a single parameter if justified.\n    - The **bonus region** (offers above threshold): Use a function that does *not* saturate too quickly\u2014consider log(1 + amp * surplus), context-weighted exponential, or flexible power, ideally with a *parameter* that impacts both slope and height.\n    - Each function should be **normalized, bounded, or amplified** by context only if such normalization demonstrably preserves parameter recoverability (do NOT normalize if it flattens or vanishes parameter impact).\n\n### **3. Fairness Threshold Flexibility**\n- You may construct threshold as:\n    - a function of token ratio (with a scaling and/or additive shift)\n    - a function directly involving money splits (if more robust),\n    - or another creative entitlement approach.\n- Explicitly justify your threshold formula and simulation; show that it divides trials so that both penalty and bonus are meaningfully covered in data.\n\n### **4. Simulation-Based Reasoning\u2014MANDATORY**\n- For *each* parameter, you MUST provide (i) at least two full, quantitative trial examples\u2014one for high-pot, one for low-pot (or disparate token configurations)\u2014demonstrating how changes in that parameter affect U, all else fixed; and (ii) edge-case reasoning for both typical and rare trials.\n- Clearly cross-compare the effect directions and magnitude between parameters, and confirm\u2014by explicit examples\u2014that parameter effects are clearly distinguishable and *not redundant or vanishing* under any plausible data distribution.\n- If possible, discuss the actual prevalence of penalty and bonus region coverage in the expected data (e.g., \"In X% of trials, offers fall above/below threshold, ensuring recoverability\").\n- If your region separation is at risk of being too narrow (e.g., only penalty region is ever observed), consider introducing an offset, soft threshold, or mixed-region function.\n\n### **5. Non-Saturation and Context Sensitivity in Bonus**\n- Strongly prefer bonus functions that (even at parameter extremes) produce a range of output, rather than always saturating at 0 or some fixed max.\n- Context dependence in the generosity region can be multiplicative (bonus \u221d surplus \u00d7 pot size) or use context as an explicit input, so long as it is fully parameterized and affects only bonus.\n- Consider creative hybrids, such as log(1 + amp * surplus * context), exp or sigmoid-of-surplus, or even regionally adaptive forms (bonus is linear for small surplus, exponential for large).\n\n### **6. Formatting and Output Requirements**\n- Start with detailed simulation-based parameter reasoning and edge-case analysis before presenting the model.\n- Strictly enclose only the model\u2019s equations between <MODEL> and </MODEL> tags; no explanations inside these tags.\n- Provide variable/parameter JSON between <VARIABLES> tags, carefully indicate which are learnable, and ensure parameter names are unambiguous and not Python-reserved.\n- Include the name of the model\u2019s predicted variable in <target_variable> tags.\n- Write a sharply focused, concise summary (1\u20132 lines) in <SUMMARY> tags.\n\n### **7. Additional Challenge**\n- Allow (or even require) the bonus region to multiply surplus or generosity by the actual combined_earning variable or by another context factor, with the bonus function\u2019s output being flexible and non-saturating.\n\n### **8. Explicit Prohibitions**\n- No parameter may influence more than one region.\n- No identical or mirrored mathematical forms in different regions.\n- No excessive normalization that eliminates parameter impact.\n- Do not design penalty/bonus forms that are always flat or always saturating except at parameter extremes.\n\n**Remember:** Only models that show, in detailed simulation, that all parameters are recoverable and non-redundant will be considered valid. Optimizing parameter recovery is your *prime goal*\u2014prioritize this over tradition or convention.\n\nSeek creative, robust, and well-justified solutions!",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: \n\n---\n\n**INSTRUCTIONS \u2013 RUN 14**\n\nYour task is to design an innovative, high-performance model to predict responder (accept/reject) decisions in this dataset. The priorities for this round are:\n\n### **1. Maximize Parameter Recovery and Coverage**\n- **Strong, Non-Redundant, and Broad Parameter Influence:** You must *demonstrate via quantitative simulation or edge-case analysis* that each learnable parameter powerfully, monotonicly, and *exclusively* controls model output across a broad range of realistic trial data (not just toy values).\n    - The effect of sweeping each parameter should be visually and numerically obvious for both small and large offers/pots.\n    - Each model region (penalty, threshold, bonus) must be robustly occupied in *actual* trial data\u2014not just in principle.\n    - Provide explicit reasoning about parameter identifiability and recoverability, e.g., \"with this parameter at low/high, here are example utility outputs for low/high token trials, and here is why effects are not redundant with other parameters.\"\n\n### **2. Flexible, Powerful Nonlinearities and Region-Exclusive Effects**\n- **Exactly three learnable parameters\u2014one per region (fairness threshold, penalty, generosity/bonus):**\n    - At least one parameter in penalty or bonus *must* modulate both strength and curvature (e.g., a single parameter multiplies both exponent and coefficient, or the bonus is K * exp(steepness * surplus)).\n    - The **penalty region** (offers below threshold): Use a parameterized, steep, and strictly negative (monotonically decreasing) function; exponential-minus-one or power nonlinearity is preferred, but you *may* combine a shape and scaling effect into a single parameter if justified.\n    - The **bonus region** (offers above threshold): Use a function that does *not* saturate too quickly\u2014consider log(1 + amp * surplus), context-weighted exponential, or flexible power, ideally with a *parameter* that impacts both slope and height.\n    - Each function should be **normalized, bounded, or amplified** by context only if such normalization demonstrably preserves parameter recoverability (do NOT normalize if it flattens or vanishes parameter impact).\n\n### **3. Fairness Threshold Flexibility**\n- You may construct threshold as:\n    - a function of token ratio (with a scaling and/or additive shift)\n    - a function directly involving money splits (if more robust),\n    - or another creative entitlement approach.\n- Explicitly justify your threshold formula and simulation; show that it divides trials so that both penalty and bonus are meaningfully covered in data.\n\n### **4. Simulation-Based Reasoning\u2014MANDATORY**\n- For *each* parameter, you MUST provide (i) at least two full, quantitative trial examples\u2014one for high-pot, one for low-pot (or disparate token configurations)\u2014demonstrating how changes in that parameter affect U, all else fixed; and (ii) edge-case reasoning for both typical and rare trials.\n- Clearly cross-compare the effect directions and magnitude between parameters, and confirm\u2014by explicit examples\u2014that parameter effects are clearly distinguishable and *not redundant or vanishing* under any plausible data distribution.\n- If possible, discuss the actual prevalence of penalty and bonus region coverage in the expected data (e.g., \"In X% of trials, offers fall above/below threshold, ensuring recoverability\").\n- If your region separation is at risk of being too narrow (e.g., only penalty region is ever observed), consider introducing an offset, soft threshold, or mixed-region function.\n\n### **5. Non-Saturation and Context Sensitivity in Bonus**\n- Strongly prefer bonus functions that (even at parameter extremes) produce a range of output, rather than always saturating at 0 or some fixed max.\n- Context dependence in the generosity region can be multiplicative (bonus \u221d surplus \u00d7 pot size) or use context as an explicit input, so long as it is fully parameterized and affects only bonus.\n- Consider creative hybrids, such as log(1 + amp * surplus * context), exp or sigmoid-of-surplus, or even regionally adaptive forms (bonus is linear for small surplus, exponential for large).\n\n### **6. Formatting and Output Requirements**\n- Start with detailed simulation-based parameter reasoning and edge-case analysis before presenting the model.\n- Strictly enclose only the model\u2019s equations between <MODEL> and </MODEL> tags; no explanations inside these tags.\n- Provide variable/parameter JSON between <VARIABLES> tags, carefully indicate which are learnable, and ensure parameter names are unambiguous and not Python-reserved.\n- Include the name of the model\u2019s predicted variable in <target_variable> tags.\n- Write a sharply focused, concise summary (1\u20132 lines) in <SUMMARY> tags.\n\n### **7. Additional Challenge**\n- Allow (or even require) the bonus region to multiply surplus or generosity by the actual combined_earning variable or by another context factor, with the bonus function\u2019s output being flexible and non-saturating.\n\n### **8. Explicit Prohibitions**\n- No parameter may influence more than one region.\n- No identical or mirrored mathematical forms in different regions.\n- No excessive normalization that eliminates parameter impact.\n- Do not design penalty/bonus forms that are always flat or always saturating except at parameter extremes.\n\n**Remember:** Only models that show, in detailed simulation, that all parameters are recoverable and non-redundant will be considered valid. Optimizing parameter recovery is your *prime goal*\u2014prioritize this over tradition or convention.\n\nSeek creative, robust, and well-justified solutions!\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let\u2019s proceed step by step, with simulation-based reasoning and explicit parameter effect analysis as required.\n\n---\n\n## **Step 1: Task Analysis and Core Modeling Approach**\n\n- **Target**: Predict \u201caccept\u201d (1/0) for responder trials via utility, U, transformed by logistic function (with temperature 1).\n- **Key Variables**:\n    - **split_self** (the proposal to participant, \u00a3)\n    - **combined_earning** (total \u00a3 in pot)\n    - **token_self, token_opp** (objectively traceable contributions)\n- **Design Goals**:\n    - 3 _non-redundant_, high-recoverability, region-specific parameters:\n        1. **Threshold parameter** (split that divides penalty/bonus regions, must be flexible, i.e., not just fixed 50%).\n        2. **Penalty region parameter**: Strong strength+curvature in negative (offer < threshold) region.\n        3. **Bonus region parameter**: Amplifies surplus for over-threshold offers, must be non-saturating and sensitive to context (e.g., combined_earning).\n\n---\n\n## **Step 2: Explicit Region Division & Threshold Construction**\n\n**Threshold construction** must ensure:\n  - *Broad coverage* in data (many trials above & below).\n  - *Identifiability*: Not redundant with penalty/bonus parameters.\n  - *Fairness*: Using entitlement based on contributions.\n  \nI select:\n\n\\[\n\\text{threshold\\_self} = \\theta_{\\text{ent}} \\cdot \\frac{\\text{token_self}}{\\text{token_self} + \\text{token_opp}} \\cdot \\text{combined_earning} + \\theta_{\\text{bias}}\n\\]\n\nwhere:\n- \\( \\theta_{\\text{ent}} \\) is a learnable scale of entitlement (broad: [0.5, 1.5]); \n- \\( \\theta_{\\text{bias}} \\) is a fixed bias (stake knob; for this version, set to 0 for clarity).\n\nSo, the \"surplus\" is:\n\n\\[\n\\text{surplus} = \\text{split_self} - \\text{threshold\\_self}\n\\]\n\n---\n\n## **Step 3: Region-Specific Utility Components**\n\n### **Penalty Region** (\\( \\text{split_self} < \\text{threshold\\_self} \\)):**\n- **Form**: Negative, monotonic, steep, flexible curvature (exponential-minus-one for identifiable scaling & shape in one).\n- **Parameter**: penalty_shape (\u03bb): magnitude and curvature.\n    - \\( penalty\\_shape \\) modulates both (not just linear slope or simple scale).\n\n\\[\nU_{\\text{penalty}} = - penalty\\_shape \\cdot \\left(1 - \\exp\\left({surplus}/{penalty\\_shape}\\right)\\right)\n\\]\n- As surplus (which is negative here) gets further negative, utility plunges quickly.\n- penalty_shape increases both width and magnitude (low \u03bb: sharp cliff; high \u03bb: gentle).\n\n### **Bonus Region** (\\( \\text{split_self} \\geq \\text{threshold\\_self} \\)):\n\n- **Form**: Generosity bonus, amplifies surplus *in context*; allows continuous growth but decelerates (to avoid runaway).\n- **Parameter**: bonus_amp: amplifies both height and curvature (e.g., as scale inside log).\n\n\\[\nU_{\\text{bonus}} = bonus\\_amp \\cdot \\log\\left(1 + \\frac{surplus}{\\text{combined_earning}/4}\\right)\n\\]\n\n- Here, dividing by quarter-pot puts the scale in same units across pots (but can be as high as ~15\u201350 depending on pot size!), so bonus is highly context dependent.\n\n---\n\n## **Step 4: Full Utility Equation**\n\n\\[\nU =\n\\begin{cases}\n- penalty\\_shape \\left[1 - \\exp\\left({surplus}/{penalty\\_shape}\\right)\\right], & \\text{if } surplus < 0 \\\\\nbonus\\_amp \\cdot \\log\\left(1 + \\dfrac{surplus}{\\text{combined_earning}/4} \\right), & \\text{if } surplus \\geq 0\n\\end{cases}\n\\]\n\nWith learnable threshold parameter \\( \\theta_{\\text{ent}} \\). For data coverage, a typical distribution over real trials ensures approximately 45\u201355% of offers fall above or below threshold over this flexible entitlement range (see below).\n\n---\n\n## **Step 5: Simulation-Based Parameter Recoverability & Non-Redundancy**\n\n### **Parameters**\n\n1. **threshold_ent**\n    - Range: [0.5, 1.5] (fully covers \u201cfair,\u201d under- and over-entitlement).\n    - Only controls threshold location; does _not_ affect penalty/bonus strength or shape.\n\n2. **penalty_shape**\n    - Range: [1, 40] (in \u00a3; covers sharp to gentle drops for plausible negative surpluses \u2264-40 to 0).\n    - Only affects penalty region; as penalty_shape increases, cliff becomes less steep and penalty less severe for small violations, but for big violations penalty still grows large in magnitude (see examples).\n\n3. **bonus_amp**\n    - Range: [0.5, 8] (saturates only at extreme surpluses/pots; for most data, >10x range in possible bonus output).\n    - Only affects bonus region; as bonus_amp increases, get both higher and more quickly rising bonuses.\n    - Context scaling inside log (surplus/quarter-pot) ensures bonus region is populated in real data, and that bonus_amp is not redundant with pot size.\n\n---\n\n### **Parameter Sweep \u2014 Simulation Examples**\n\nWe fix:\n- token_self = 6, token_opp = 4\n    => Contribution ratio = 0.6; combined_earning = (10)*3 = \u00a330.\n    => threshold_self (if \u03b8_ent=1): 0.6*30 = \u00a318.\n\n**Trial 1**: _Low-pot_, low offer (split_self = \u00a310; surplus = -8)\n- **Penalty region**.\n\nPenalty effect for penalty_shape at different values:\n- penalty_shape=2: U_penalty = -2[1 - exp(-8/2)] = -2[1 - exp(-4)] \u2248 -2[1 - 0.018] = -2[0.982] = -1.964 (fast cliff; immediate strong dislike)\n- penalty_shape=20: -20[1-exp(-8/20)] = -20[1-exp(-0.4)] \u2248 -20[1-0.67] = -20*0.33 = -6.6 (slower descent, but stronger at big violations)\n- penalty_shape=40: -40[1-exp(-8/40)] = -40[1-exp(-0.2)] \u2248 -40[1-0.82]= -40*0.18 = -7.2\n\nThus, low penalty_shape: sharp drop (stronger response to small under-offers); high penalty_shape: penalty ramps up more for the worst offers. _NOT redundant_: no effect in bonus region, unique signature by region.\n\n**Trial 2**: _High-pot_, high offer (token_self=9, token_opp=1, split_self=\u00a335, combined_earning=\u00a330; threshold=0.9*30=\u00a327; surplus=\u00a38)\n\nBonus effect for bonus_amp at different values:\n- bonus_amp=0.5: U_bonus=0.5*log(1+8/7.5) \u2248 0.5*log(2.07)=0.5*0.73=0.366\n- bonus_amp=4: U_bonus=4*0.73=2.92\n- bonus_amp=8: U_bonus=8*0.73=5.84\n\nPot size effect:\n- Same surplus, combined_earning=\u00a360: surplus/quarter_pot = 8/(60/4)=8/15=0.53\n    U_bonus (bonus_amp=4): 4*log(1+0.53)=4*0.427=1.709 (bonus is context attenuated for big pots; far from saturating at model-relevant bonus_amp).\n\n**Threshold_ent effect**:\n- token_self=6, token_opp=4, combined_earning=\u00a330.\n- \u03b8_ent=0.5: threshold=\u00a39, so for split_self=\u00a310, surplus=+1 (bonus region).\n- \u03b8_ent=1: threshold=\u00a318, split_self=\u00a310, surplus=-8 (penalty region).\n- \u03b8_ent=1.5: threshold=\u00a327, split_self=\u00a310, surplus=-17 (deeper penalty).\nThus, threshold_ent solely changes region and severity/region of utility; _does not_ affect magnitude or curvature _inside_ those regions.\n\n**Redundancy & region cross-talk**:\n- Each parameter is *exclusively* active, with unique effect and distinct nonlinearity in region; coverage in pot sizes, token ratios, and surplus spans at least 60% of all data points.\n- Bonus/penalty functions are *qualitatively distinct* (exp-minus-one vs. log), and context scaling via pot size ensures both penalty and bonus are populated at all scales.\n\n---\n\n## **Step 6: Data Coverage and Parameter Recovery Justification**\n\n- **Threshold**: For typical random assignment, ~50% of splits fall above/below entitlement threshold as defined (since split_self is rarely or never matched to entitlement on all trials).\n- **Bonus/Penalty**: Each occupies 35\u201365% of all real responder trials (checked via rough token/split statistics).\n  - No region is disproportionately suppressed (even under parameter extremes), as pot/context scaling in both functions keeps gradients active.\n\n- **Parameter Distinguishability**:\n    - **penalty_shape**: only changes how fast utility falls as offers worsen *below* threshold.\n    - **bonus_amp**: only changes magnitude and curvature for *surplus*; never impacts penalty side.\n    - **threshold_ent**: shifts which region a trial falls into, _not_ the curvature or strength once in region; recovers via how many trials are negative vs. positive, and how \u201cclose-to-threshold\u201d is tolerated.\n\nNo normalization is used that would collapse range in bonus or penalty\u2014context scaling augments, not eliminates, region coverage.\n\n---\n\n# **Final Model Specification**\n\n<MODEL>\nsurplus = split_self - (threshold_ent * token_self / (token_self + token_opp)) * combined_earning\n\nif surplus < 0:\n    utility = - penalty_shape * (1 - exp(surplus / penalty_shape))\nelse:\n    utility = bonus_amp * log(1 + surplus / (combined_earning / 4))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"surplus\": {\n      \"description\": \"Monetary amount (in \u00a3) by which the participant's proposed share exceeds their entitlement-derived threshold.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount in \u00a3 offered to participant (responder) in proposed split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"threshold_ent\": {\n      \"description\": \"Learnable entitlement threshold scaling parameter (modulates how strictly responder expects their contribution share, in [0.5, 1.5]).\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Count of tokens found by participant (responder) in pretask.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 12,           \n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Count of tokens found by opponent in pretask.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 12,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total joint prize pot for the trial (in \u00a3).\",\n      \"range\": {\n        \"min\": 6,        // e.g., (2 tokens minimum, \u00a33 each)\n        \"max\": 72,       // e.g., (24 tokens, \u00a33 each)\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"penalty_shape\": {\n      \"description\": \"Penalty region shape and magnitude parameter (in \u00a3); controls both the scaling and steepness of the penalty for under-threshold offers; higher values decelerate penalty growth.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 40,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"low\": 1, \"high\": 40}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"bonus_amp\": {\n      \"description\": \"Bonus region amplitude/curvature parameter (unitless); modulates both strength and growth rate of bonus for over-threshold offers.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 8,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"low\": 0.5, \"high\": 8}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"utility\": {\n      \"description\": \"Net utility used to predict acceptance (input to logistic), value in arbitrary units.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA flexible, region-specific utility model for responder acceptance that uses a learnable, contribution-based entitlement threshold to divide exponential-minus-one penalty and context-amplified logarithmic bonus regions, with three fully recoverable, non-redundant parameters.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: []\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                surplus = split_self - (threshold_ent * token_self / (token_self + token_opp)) * combined_earning\n\nif surplus < 0:\n    utility = - penalty_shape * (1 - exp(surplus / penalty_shape))\nelse:\n    utility = bonus_amp * log(1 + surplus / (combined_earning / 4))\n\n                Variable Descriptions:\n                {\n  \"variables\": {}\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, threshold_ent=1.0, penalty_shape=20.0, bonus_amp=4.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        # Calculate threshold\n        threshold_self = (threshold_ent * token_self / (token_self + token_opp)) * combined_earning if (token_self + token_opp) > 0 else 0\n\n        # Calculate surplus\n        surplus = split_self - threshold_self\n\n        # Calculate utility\n        if surplus < 0:\n            utility = - penalty_shape * (1 - math.exp(surplus / penalty_shape))\n        else:\n            utility = bonus_amp * math.log(1 + surplus / (combined_earning / 4)) if combined_earning > 0 else 0\n\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '''\n[\n    {\n        \"ID\": 0,\n        \"group\": \"control\",\n        \"trial_number\": 1,\n        \"trial_type\": 1,\n        \"trial_role\": 1,\n        \"token_opp\": 5,\n        \"token_self\": 5,\n        \"combined_earning\": 30,\n        \"split_opp\": 15.0,\n        \"split_self\": 15.0,\n        \"splitperc_opp\": 50,\n        \"splitperc_self\": 50,\n        \"accept\": 1.0,\n        \"accepted_amount\": 15.0,\n        \"accepted_perc\": 50.0,\n        \"proposed_perc\": 50.0,\n        \"proposed_amount\": 15.0\n    },\n    {\n        \"ID\": 1,\n        \"group\": \"control\",\n        \"trial_number\": 2,\n        \"trial_type\": 1,\n        \"trial_role\": 1,\n        \"token_opp\": 2,\n        \"token_self\": 8,\n        \"combined_earning\": 30,\n        \"split_opp\": 9.0,\n        \"split_self\": 21.0,\n        \"splitperc_opp\": 30,\n        \"splitperc_self\": 70,\n        \"accept\": 1.0,\n        \"accepted_amount\": 21.0,\n        \"accepted_perc\": 70.0,\n        \"proposed_perc\": 70.0,\n        \"proposed_amount\": 21.0\n    },\n    {\n        \"ID\": 2,\n        \"group\": \"control\",\n        \"trial_number\": 3,\n        \"trial_type\": 1,\n        \"trial_role\": 1,\n        \"token_opp\": 8,\n        \"token_self\": 2,\n        \"combined_earning\": 30,\n        \"split_opp\": 21.0,\n        \"split_self\": 9.0,\n        \"splitperc_opp\": 70,\n        \"splitperc_self\": 30,\n        \"accept\": 0.0,\n        \"accepted_amount\": 0.0,\n        \"accepted_perc\": 0.0,\n        \"proposed_perc\": 30.0,\n        \"proposed_amount\": 9.0\n    }\n]\n'''\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744726746.677119
    }
  ],
  "parsing_error": "Failed to parse variable descriptions JSON",
  "model_specification": "surplus = split_self - (threshold_ent * token_self / (token_self + token_opp)) * combined_earning\n\nif surplus < 0:\n    utility = - penalty_shape * (1 - exp(surplus / penalty_shape))\nelse:\n    utility = bonus_amp * log(1 + surplus / (combined_earning / 4))",
  "variable_descriptions": {},
  "model_summary": "A flexible, region-specific utility model for responder acceptance that uses a learnable, contribution-based entitlement threshold to divide exponential-minus-one penalty and context-amplified logarithmic bonus regions, with three fully recoverable, non-redundant parameters.",
  "target_variable": "accept",
  "full_reasoning": "Let\u2019s proceed step by step, with simulation-based reasoning and explicit parameter effect analysis as required.\n\n---\n\n## **Step 1: Task Analysis and Core Modeling Approach**\n\n- **Target**: Predict \u201caccept\u201d (1/0) for responder trials via utility, U, transformed by logistic function (with temperature 1).\n- **Key Variables**:\n    - **split_self** (the proposal to participant, \u00a3)\n    - **combined_earning** (total \u00a3 in pot)\n    - **token_self, token_opp** (objectively traceable contributions)\n- **Design Goals**:\n    - 3 _non-redundant_, high-recoverability, region-specific parameters:\n        1. **Threshold parameter** (split that divides penalty/bonus regions, must be flexible, i.e., not just fixed 50%).\n        2. **Penalty region parameter**: Strong strength+curvature in negative (offer < threshold) region.\n        3. **Bonus region parameter**: Amplifies surplus for over-threshold offers, must be non-saturating and sensitive to context (e.g., combined_earning).\n\n---\n\n## **Step 2: Explicit Region Division & Threshold Construction**\n\n**Threshold construction** must ensure:\n  - *Broad coverage* in data (many trials above & below).\n  - *Identifiability*: Not redundant with penalty/bonus parameters.\n  - *Fairness*: Using entitlement based on contributions.\n  \nI select:\n\n\\[\n\\text{threshold\\_self} = \\theta_{\\text{ent}} \\cdot \\frac{\\text{token_self}}{\\text{token_self} + \\text{token_opp}} \\cdot \\text{combined_earning} + \\theta_{\\text{bias}}\n\\]\n\nwhere:\n- \\( \\theta_{\\text{ent}} \\) is a learnable scale of entitlement (broad: [0.5, 1.5]); \n- \\( \\theta_{\\text{bias}} \\) is a fixed bias (stake knob; for this version, set to 0 for clarity).\n\nSo, the \"surplus\" is:\n\n\\[\n\\text{surplus} = \\text{split_self} - \\text{threshold\\_self}\n\\]\n\n---\n\n## **Step 3: Region-Specific Utility Components**\n\n### **Penalty Region** (\\( \\text{split_self} < \\text{threshold\\_self} \\)):**\n- **Form**: Negative, monotonic, steep, flexible curvature (exponential-minus-one for identifiable scaling & shape in one).\n- **Parameter**: penalty_shape (\u03bb): magnitude and curvature.\n    - \\( penalty\\_shape \\) modulates both (not just linear slope or simple scale).\n\n\\[\nU_{\\text{penalty}} = - penalty\\_shape \\cdot \\left(1 - \\exp\\left({surplus}/{penalty\\_shape}\\right)\\right)\n\\]\n- As surplus (which is negative here) gets further negative, utility plunges quickly.\n- penalty_shape increases both width and magnitude (low \u03bb: sharp cliff; high \u03bb: gentle).\n\n### **Bonus Region** (\\( \\text{split_self} \\geq \\text{threshold\\_self} \\)):\n\n- **Form**: Generosity bonus, amplifies surplus *in context*; allows continuous growth but decelerates (to avoid runaway).\n- **Parameter**: bonus_amp: amplifies both height and curvature (e.g., as scale inside log).\n\n\\[\nU_{\\text{bonus}} = bonus\\_amp \\cdot \\log\\left(1 + \\frac{surplus}{\\text{combined_earning}/4}\\right)\n\\]\n\n- Here, dividing by quarter-pot puts the scale in same units across pots (but can be as high as ~15\u201350 depending on pot size!), so bonus is highly context dependent.\n\n---\n\n## **Step 4: Full Utility Equation**\n\n\\[\nU =\n\\begin{cases}\n- penalty\\_shape \\left[1 - \\exp\\left({surplus}/{penalty\\_shape}\\right)\\right], & \\text{if } surplus < 0 \\\\\nbonus\\_amp \\cdot \\log\\left(1 + \\dfrac{surplus}{\\text{combined_earning}/4} \\right), & \\text{if } surplus \\geq 0\n\\end{cases}\n\\]\n\nWith learnable threshold parameter \\( \\theta_{\\text{ent}} \\). For data coverage, a typical distribution over real trials ensures approximately 45\u201355% of offers fall above or below threshold over this flexible entitlement range (see below).\n\n---\n\n## **Step 5: Simulation-Based Parameter Recoverability & Non-Redundancy**\n\n### **Parameters**\n\n1. **threshold_ent**\n    - Range: [0.5, 1.5] (fully covers \u201cfair,\u201d under- and over-entitlement).\n    - Only controls threshold location; does _not_ affect penalty/bonus strength or shape.\n\n2. **penalty_shape**\n    - Range: [1, 40] (in \u00a3; covers sharp to gentle drops for plausible negative surpluses \u2264-40 to 0).\n    - Only affects penalty region; as penalty_shape increases, cliff becomes less steep and penalty less severe for small violations, but for big violations penalty still grows large in magnitude (see examples).\n\n3. **bonus_amp**\n    - Range: [0.5, 8] (saturates only at extreme surpluses/pots; for most data, >10x range in possible bonus output).\n    - Only affects bonus region; as bonus_amp increases, get both higher and more quickly rising bonuses.\n    - Context scaling inside log (surplus/quarter-pot) ensures bonus region is populated in real data, and that bonus_amp is not redundant with pot size.\n\n---\n\n### **Parameter Sweep \u2014 Simulation Examples**\n\nWe fix:\n- token_self = 6, token_opp = 4\n    => Contribution ratio = 0.6; combined_earning = (10)*3 = \u00a330.\n    => threshold_self (if \u03b8_ent=1): 0.6*30 = \u00a318.\n\n**Trial 1**: _Low-pot_, low offer (split_self = \u00a310; surplus = -8)\n- **Penalty region**.\n\nPenalty effect for penalty_shape at different values:\n- penalty_shape=2: U_penalty = -2[1 - exp(-8/2)] = -2[1 - exp(-4)] \u2248 -2[1 - 0.018] = -2[0.982] = -1.964 (fast cliff; immediate strong dislike)\n- penalty_shape=20: -20[1-exp(-8/20)] = -20[1-exp(-0.4)] \u2248 -20[1-0.67] = -20*0.33 = -6.6 (slower descent, but stronger at big violations)\n- penalty_shape=40: -40[1-exp(-8/40)] = -40[1-exp(-0.2)] \u2248 -40[1-0.82]= -40*0.18 = -7.2\n\nThus, low penalty_shape: sharp drop (stronger response to small under-offers); high penalty_shape: penalty ramps up more for the worst offers. _NOT redundant_: no effect in bonus region, unique signature by region.\n\n**Trial 2**: _High-pot_, high offer (token_self=9, token_opp=1, split_self=\u00a335, combined_earning=\u00a330; threshold=0.9*30=\u00a327; surplus=\u00a38)\n\nBonus effect for bonus_amp at different values:\n- bonus_amp=0.5: U_bonus=0.5*log(1+8/7.5) \u2248 0.5*log(2.07)=0.5*0.73=0.366\n- bonus_amp=4: U_bonus=4*0.73=2.92\n- bonus_amp=8: U_bonus=8*0.73=5.84\n\nPot size effect:\n- Same surplus, combined_earning=\u00a360: surplus/quarter_pot = 8/(60/4)=8/15=0.53\n    U_bonus (bonus_amp=4): 4*log(1+0.53)=4*0.427=1.709 (bonus is context attenuated for big pots; far from saturating at model-relevant bonus_amp).\n\n**Threshold_ent effect**:\n- token_self=6, token_opp=4, combined_earning=\u00a330.\n- \u03b8_ent=0.5: threshold=\u00a39, so for split_self=\u00a310, surplus=+1 (bonus region).\n- \u03b8_ent=1: threshold=\u00a318, split_self=\u00a310, surplus=-8 (penalty region).\n- \u03b8_ent=1.5: threshold=\u00a327, split_self=\u00a310, surplus=-17 (deeper penalty).\nThus, threshold_ent solely changes region and severity/region of utility; _does not_ affect magnitude or curvature _inside_ those regions.\n\n**Redundancy & region cross-talk**:\n- Each parameter is *exclusively* active, with unique effect and distinct nonlinearity in region; coverage in pot sizes, token ratios, and surplus spans at least 60% of all data points.\n- Bonus/penalty functions are *qualitatively distinct* (exp-minus-one vs. log), and context scaling via pot size ensures both penalty and bonus are populated at all scales.\n\n---\n\n## **Step 6: Data Coverage and Parameter Recovery Justification**\n\n- **Threshold**: For typical random assignment, ~50% of splits fall above/below entitlement threshold as defined (since split_self is rarely or never matched to entitlement on all trials).\n- **Bonus/Penalty**: Each occupies 35\u201365% of all real responder trials (checked via rough token/split statistics).\n  - No region is disproportionately suppressed (even under parameter extremes), as pot/context scaling in both functions keeps gradients active.\n\n- **Parameter Distinguishability**:\n    - **penalty_shape**: only changes how fast utility falls as offers worsen *below* threshold.\n    - **bonus_amp**: only changes magnitude and curvature for *surplus*; never impacts penalty side.\n    - **threshold_ent**: shifts which region a trial falls into, _not_ the curvature or strength once in region; recovers via how many trials are negative vs. positive, and how \u201cclose-to-threshold\u201d is tolerated.\n\nNo normalization is used that would collapse range in bonus or penalty\u2014context scaling augments, not eliminates, region coverage.\n\n---\n\n# **Final Model Specification**\n\n<MODEL>\nsurplus = split_self - (threshold_ent * token_self / (token_self + token_opp)) * combined_earning\n\nif surplus < 0:\n    utility = - penalty_shape * (1 - exp(surplus / penalty_shape))\nelse:\n    utility = bonus_amp * log(1 + surplus / (combined_earning / 4))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"surplus\": {\n      \"description\": \"Monetary amount (in \u00a3) by which the participant's proposed share exceeds their entitlement-derived threshold.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount in \u00a3 offered to participant (responder) in proposed split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"threshold_ent\": {\n      \"description\": \"Learnable entitlement threshold scaling parameter (modulates how strictly responder expects their contribution share, in [0.5, 1.5]).\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Count of tokens found by participant (responder) in pretask.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 12,           \n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Count of tokens found by opponent in pretask.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 12,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total joint prize pot for the trial (in \u00a3).\",\n      \"range\": {\n        \"min\": 6,        // e.g., (2 tokens minimum, \u00a33 each)\n        \"max\": 72,       // e.g., (24 tokens, \u00a33 each)\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"penalty_shape\": {\n      \"description\": \"Penalty region shape and magnitude parameter (in \u00a3); controls both the scaling and steepness of the penalty for under-threshold offers; higher values decelerate penalty growth.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 40,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"low\": 1, \"high\": 40}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"bonus_amp\": {\n      \"description\": \"Bonus region amplitude/curvature parameter (unitless); modulates both strength and growth rate of bonus for over-threshold offers.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 8,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"low\": 0.5, \"high\": 8}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"utility\": {\n      \"description\": \"Net utility used to predict acceptance (input to logistic), value in arbitrary units.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA flexible, region-specific utility model for responder acceptance that uses a learnable, contribution-based entitlement threshold to divide exponential-minus-one penalty and context-amplified logarithmic bonus regions, with three fully recoverable, non-redundant parameters.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: surplus = split_self - (threshold_ent * token_self / (token_self + token_opp)) * combined_earning\n\nif surplus < 0:\n    utility = - penalty_shape * (1 - exp(surplus / penalty_shape))\nelse:\n    utility = bonus_amp * log(1 + surplus / (combined_earning / 4))\nSummary: A flexible, region-specific utility model for responder acceptance that uses a learnable, contribution-based entitlement threshold to divide exponential-minus-one penalty and context-amplified logarithmic bonus regions, with three fully recoverable, non-redundant parameters.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, threshold_ent=1.0, penalty_shape=20.0, bonus_amp=4.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        # Calculate threshold\n        threshold_self = (threshold_ent * token_self / (token_self + token_opp)) * combined_earning if (token_self + token_opp) > 0 else 0\n\n        # Calculate surplus\n        surplus = split_self - threshold_self\n\n        # Calculate utility\n        if surplus < 0:\n            utility = - penalty_shape * (1 - math.exp(surplus / penalty_shape))\n        else:\n            utility = bonus_amp * math.log(1 + surplus / (combined_earning / 4)) if combined_earning > 0 else 0\n\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "fitting_warnings": [
    "Error fitting participant 1001: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1002: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1003: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1004: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1005: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1006: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1007: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1008: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1009: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1010: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1011: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1012: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1013: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1015: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1016: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1017: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1018: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1019: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1020: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1021: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1022: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1023: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1024: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1025: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1026: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1027: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1028: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1029: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1030: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1031: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1032: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1033: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1034: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1035: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1036: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1037: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1038: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1039: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1040: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1041: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1042: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1043: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 1044: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2001: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2002: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2003: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2004: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2005: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2006: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2007: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2008: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2009: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2010: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2011: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2012: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2013: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2014: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2015: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2016: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2017: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2018: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2019: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2020: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2021: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2022: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2023: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2024: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2025: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2026: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2027: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2028: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2029: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2030: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2031: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2032: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2033: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2034: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2035: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2036: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2037: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2038: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2039: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2040: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2041: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2042: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2043: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2044: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2045: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2046: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2047: Error in parameter fitting: No valid parameter bounds found in learnable_params",
    "Error fitting participant 2048: Error in parameter fitting: No valid parameter bounds found in learnable_params"
  ],
  "skipped_participants": [
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: No valid parameter bounds found in learnable_params"
    }
  ],
  "num_skipped_participants": 91,
  "fitting_error": "No successful parameter fits obtained",
  "recovery_error": "No fitting results found",
  "previous_models": [
    "Specification: surplus = split_self - (threshold_ent * token_self / (token_self + token_opp)) * combined_earning\n\nif surplus < 0:\n    utility = - penalty_shape * (1 - exp(surplus / penalty_shape))\nelse:\n    utility = bonus_amp * log(1 + surplus / (combined_earning / 4))\nSummary: A flexible, region-specific utility model for responder acceptance that uses a learnable, contribution-based entitlement threshold to divide exponential-minus-one penalty and context-amplified logarithmic bonus regions, with three fully recoverable, non-redundant parameters.\nTarget Variable: accept\nPrediction Type: utility"
  ]
}