{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "\n\n---\n\n**INSTRUCTIONS \u2013 RUN 14**\n\nYour task is to design an innovative, high-performance model to predict responder (accept/reject) decisions in this dataset. The priorities for this round are:\n\n### **1. Maximize Parameter Recovery and Coverage**\n- **Strong, Non-Redundant, and Broad Parameter Influence:** You must *demonstrate via quantitative simulation or edge-case analysis* that each learnable parameter powerfully, monotonicly, and *exclusively* controls model output across a broad range of realistic trial data (not just toy values).\n    - The effect of sweeping each parameter should be visually and numerically obvious for both small and large offers/pots.\n    - Each model region (penalty, threshold, bonus) must be robustly occupied in *actual* trial data\u2014not just in principle.\n    - Provide explicit reasoning about parameter identifiability and recoverability, e.g., \"with this parameter at low/high, here are example utility outputs for low/high token trials, and here is why effects are not redundant with other parameters.\"\n\n### **2. Flexible, Powerful Nonlinearities and Region-Exclusive Effects**\n- **Exactly three learnable parameters\u2014one per region (fairness threshold, penalty, generosity/bonus):**\n    - At least one parameter in penalty or bonus *must* modulate both strength and curvature (e.g., a single parameter multiplies both exponent and coefficient, or the bonus is K * exp(steepness * surplus)).\n    - The **penalty region** (offers below threshold): Use a parameterized, steep, and strictly negative (monotonically decreasing) function; exponential-minus-one or power nonlinearity is preferred, but you *may* combine a shape and scaling effect into a single parameter if justified.\n    - The **bonus region** (offers above threshold): Use a function that does *not* saturate too quickly\u2014consider log(1 + amp * surplus), context-weighted exponential, or flexible power, ideally with a *parameter* that impacts both slope and height.\n    - Each function should be **normalized, bounded, or amplified** by context only if such normalization demonstrably preserves parameter recoverability (do NOT normalize if it flattens or vanishes parameter impact).\n\n### **3. Fairness Threshold Flexibility**\n- You may construct threshold as:\n    - a function of token ratio (with a scaling and/or additive shift)\n    - a function directly involving money splits (if more robust),\n    - or another creative entitlement approach.\n- Explicitly justify your threshold formula and simulation; show that it divides trials so that both penalty and bonus are meaningfully covered in data.\n\n### **4. Simulation-Based Reasoning\u2014MANDATORY**\n- For *each* parameter, you MUST provide (i) at least two full, quantitative trial examples\u2014one for high-pot, one for low-pot (or disparate token configurations)\u2014demonstrating how changes in that parameter affect U, all else fixed; and (ii) edge-case reasoning for both typical and rare trials.\n- Clearly cross-compare the effect directions and magnitude between parameters, and confirm\u2014by explicit examples\u2014that parameter effects are clearly distinguishable and *not redundant or vanishing* under any plausible data distribution.\n- If possible, discuss the actual prevalence of penalty and bonus region coverage in the expected data (e.g., \"In X% of trials, offers fall above/below threshold, ensuring recoverability\").\n- If your region separation is at risk of being too narrow (e.g., only penalty region is ever observed), consider introducing an offset, soft threshold, or mixed-region function.\n\n### **5. Non-Saturation and Context Sensitivity in Bonus**\n- Strongly prefer bonus functions that (even at parameter extremes) produce a range of output, rather than always saturating at 0 or some fixed max.\n- Context dependence in the generosity region can be multiplicative (bonus \u221d surplus \u00d7 pot size) or use context as an explicit input, so long as it is fully parameterized and affects only bonus.\n- Consider creative hybrids, such as log(1 + amp * surplus * context), exp or sigmoid-of-surplus, or even regionally adaptive forms (bonus is linear for small surplus, exponential for large).\n\n### **6. Formatting and Output Requirements**\n- Start with detailed simulation-based parameter reasoning and edge-case analysis before presenting the model.\n- Strictly enclose only the model\u2019s equations between <MODEL> and </MODEL> tags; no explanations inside these tags.\n- Provide variable/parameter JSON between <VARIABLES> tags, carefully indicate which are learnable, and ensure parameter names are unambiguous and not Python-reserved.\n- Include the name of the model\u2019s predicted variable in <target_variable> tags.\n- Write a sharply focused, concise summary (1\u20132 lines) in <SUMMARY> tags.\n\n### **7. Additional Challenge**\n- Allow (or even require) the bonus region to multiply surplus or generosity by the actual combined_earning variable or by another context factor, with the bonus function\u2019s output being flexible and non-saturating.\n\n### **8. Explicit Prohibitions**\n- No parameter may influence more than one region.\n- No identical or mirrored mathematical forms in different regions.\n- No excessive normalization that eliminates parameter impact.\n- Do not design penalty/bonus forms that are always flat or always saturating except at parameter extremes.\n\n**Remember:** Only models that show, in detailed simulation, that all parameters are recoverable and non-redundant will be considered valid. Optimizing parameter recovery is your *prime goal*\u2014prioritize this over tradition or convention.\n\nSeek creative, robust, and well-justified solutions!",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: \n\n---\n\n**INSTRUCTIONS \u2013 RUN 14**\n\nYour task is to design an innovative, high-performance model to predict responder (accept/reject) decisions in this dataset. The priorities for this round are:\n\n### **1. Maximize Parameter Recovery and Coverage**\n- **Strong, Non-Redundant, and Broad Parameter Influence:** You must *demonstrate via quantitative simulation or edge-case analysis* that each learnable parameter powerfully, monotonicly, and *exclusively* controls model output across a broad range of realistic trial data (not just toy values).\n    - The effect of sweeping each parameter should be visually and numerically obvious for both small and large offers/pots.\n    - Each model region (penalty, threshold, bonus) must be robustly occupied in *actual* trial data\u2014not just in principle.\n    - Provide explicit reasoning about parameter identifiability and recoverability, e.g., \"with this parameter at low/high, here are example utility outputs for low/high token trials, and here is why effects are not redundant with other parameters.\"\n\n### **2. Flexible, Powerful Nonlinearities and Region-Exclusive Effects**\n- **Exactly three learnable parameters\u2014one per region (fairness threshold, penalty, generosity/bonus):**\n    - At least one parameter in penalty or bonus *must* modulate both strength and curvature (e.g., a single parameter multiplies both exponent and coefficient, or the bonus is K * exp(steepness * surplus)).\n    - The **penalty region** (offers below threshold): Use a parameterized, steep, and strictly negative (monotonically decreasing) function; exponential-minus-one or power nonlinearity is preferred, but you *may* combine a shape and scaling effect into a single parameter if justified.\n    - The **bonus region** (offers above threshold): Use a function that does *not* saturate too quickly\u2014consider log(1 + amp * surplus), context-weighted exponential, or flexible power, ideally with a *parameter* that impacts both slope and height.\n    - Each function should be **normalized, bounded, or amplified** by context only if such normalization demonstrably preserves parameter recoverability (do NOT normalize if it flattens or vanishes parameter impact).\n\n### **3. Fairness Threshold Flexibility**\n- You may construct threshold as:\n    - a function of token ratio (with a scaling and/or additive shift)\n    - a function directly involving money splits (if more robust),\n    - or another creative entitlement approach.\n- Explicitly justify your threshold formula and simulation; show that it divides trials so that both penalty and bonus are meaningfully covered in data.\n\n### **4. Simulation-Based Reasoning\u2014MANDATORY**\n- For *each* parameter, you MUST provide (i) at least two full, quantitative trial examples\u2014one for high-pot, one for low-pot (or disparate token configurations)\u2014demonstrating how changes in that parameter affect U, all else fixed; and (ii) edge-case reasoning for both typical and rare trials.\n- Clearly cross-compare the effect directions and magnitude between parameters, and confirm\u2014by explicit examples\u2014that parameter effects are clearly distinguishable and *not redundant or vanishing* under any plausible data distribution.\n- If possible, discuss the actual prevalence of penalty and bonus region coverage in the expected data (e.g., \"In X% of trials, offers fall above/below threshold, ensuring recoverability\").\n- If your region separation is at risk of being too narrow (e.g., only penalty region is ever observed), consider introducing an offset, soft threshold, or mixed-region function.\n\n### **5. Non-Saturation and Context Sensitivity in Bonus**\n- Strongly prefer bonus functions that (even at parameter extremes) produce a range of output, rather than always saturating at 0 or some fixed max.\n- Context dependence in the generosity region can be multiplicative (bonus \u221d surplus \u00d7 pot size) or use context as an explicit input, so long as it is fully parameterized and affects only bonus.\n- Consider creative hybrids, such as log(1 + amp * surplus * context), exp or sigmoid-of-surplus, or even regionally adaptive forms (bonus is linear for small surplus, exponential for large).\n\n### **6. Formatting and Output Requirements**\n- Start with detailed simulation-based parameter reasoning and edge-case analysis before presenting the model.\n- Strictly enclose only the model\u2019s equations between <MODEL> and </MODEL> tags; no explanations inside these tags.\n- Provide variable/parameter JSON between <VARIABLES> tags, carefully indicate which are learnable, and ensure parameter names are unambiguous and not Python-reserved.\n- Include the name of the model\u2019s predicted variable in <target_variable> tags.\n- Write a sharply focused, concise summary (1\u20132 lines) in <SUMMARY> tags.\n\n### **7. Additional Challenge**\n- Allow (or even require) the bonus region to multiply surplus or generosity by the actual combined_earning variable or by another context factor, with the bonus function\u2019s output being flexible and non-saturating.\n\n### **8. Explicit Prohibitions**\n- No parameter may influence more than one region.\n- No identical or mirrored mathematical forms in different regions.\n- No excessive normalization that eliminates parameter impact.\n- Do not design penalty/bonus forms that are always flat or always saturating except at parameter extremes.\n\n**Remember:** Only models that show, in detailed simulation, that all parameters are recoverable and non-redundant will be considered valid. Optimizing parameter recovery is your *prime goal*\u2014prioritize this over tradition or convention.\n\nSeek creative, robust, and well-justified solutions!\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let's proceed step by step, focusing on maximizing coverage, region separation, and parameter recoverability as required.\n\n---\n\n## **Step 1: Region Structure and Variable Definitions**\n\n### **A) Regions**\n- **Penalty Region:** When the offer to responder is *below* a fairness threshold, apply a strong, negative, and shape-controllable (power or exponential-minus-one) penalty.\n- **Fairness Threshold:** Should reflect the participant's entitlement, calculated from token_self and combined_earning for flexible coverage and identifiability.\n- **Bonus Region:** When the offer is *above* threshold, apply a nonlinear, parameterized bonus\u2014preferably multiplicative with context (e.g., combined_earning), and flexible in both slope and curvature.\n\n### **B) Notation**\n- Let `offer` = split_self (participant's proposed share, \u00a3)\n- Let `threshold` = calculated entitlement in \u00a3\n- Let `pot` = combined_earning (\u00a3)\n- Surplus = offer - threshold (can be positive or negative)\n- Below-threshold: penalty region; above: bonus region.\n\n---\n\n## **Step 2: Explicit Threshold Formula & Data Coverage Justification**\n\n### **A) Threshold Formula**\nCalculate the 'fair' entitlement for the responder as:\n\n\\[ \\text{threshold} = \\alpha_{thr} \\cdot \\frac{\\text{token_self}}{\\text{token_self} + \\text{token_opp}} \\cdot \\text{combined_earning} \\]\n\n- \\(\\alpha_{thr}\\) allows threshold to flexibly range from strictly proportional (\u03b1=1), more selfish (\u03b1>1), or more generous (\u03b1<1).\n- The empirical distribution of token_self/token_opp (from the data) covers roughly [0.2, 0.8]\u2014with this flexibility, threshold will cover a wide range.\n\n### **B) Simulated Coverage Check**\n- For low (5 vs. 11) and high (11 vs. 5) token allocations with combined_earning from \u00a348 to \u00a375, threshold varies from as little as \u00a310 to as much as \u00a360+, ensuring both penalty and surplus regions are covered for typical trial splits.\n\n---\n\n## **Step 3: Penalty and Bonus Function Designs**\n\n### **A) Penalty Region (Offer < Threshold)**\n- Use **power-exponential** penalty: monotonic, amplifiable, one-parameter controlled, strictly negative.\n- **Form:** \\( -\\gamma_{pen} \\cdot [\\max(0, \\text{threshold} - \\text{offer})]^{\\gamma_{pen}} \\)\n    - Single parameter \\(\\gamma_{pen}\\) amplifies both the degree and the nonlinearity (higher \u03b3, sharper penalty).\n\n### **B) Bonus Region (Offer > Threshold)**\n- Use **flexible, context-multiplied log-bonus**:\n- **Form:** \\( \\delta_{bon} \\cdot \\log(1 + \\delta_{bon} \\cdot (\\text{offer} - \\text{threshold})) \\cdot \\frac{\\text{combined_earning}}{50} \\)\n    - Single parameter \\(\\delta_{bon}\\) for both amplitude and slope; avoids rapid saturation; pot dependence ensures coverage in both small and large pots.\n\n---\n\n## **Step 4: Region Construction in Utility Function**\n\nCombine regions with Heaviside (step) indicator of sign (i.e., penalty if offer below threshold, bonus if above).\n\n### **Full Model:**\n\n\\[\nU = \n  -\\gamma_{pen} \\cdot [\\max(0, \\text{threshold} - \\text{offer})]^{\\gamma_{pen}} \\cdot \\mathbb{I}[\\text{offer} < \\text{threshold}] + \n  \\delta_{bon} \\cdot \\log(1 + \\delta_{bon} \\cdot (\\text{offer} - \\text{threshold})) \\cdot \\frac{\\text{combined_earning}}{50} \\cdot \\mathbb{I}[\\text{offer} \\geq \\text{threshold}]\n\\]\n\nWhere\n\n\\[\n\\text{threshold} = \\alpha_{thr} \\cdot \\frac{\\text{token_self}}{\\text{token_self} + \\text{token_opp}} \\cdot \\text{combined_earning}\n\\]\n\n---\n\n## **Step 5: Simulation-Based Parameter Reasoning**\n\n### **Parameter 1: alpha_thr (proportionality of fairness threshold)**\n- **Low alpha_thr (0.6):** Offers more often exceed threshold (bonus region common); penalty region rare.\n    - *Example*: For token_self = 5, token_opp = 11, combined_earning = 60\n      - threshold = 0.6 \u00d7 (5/16) \u00d7 60 \u2248 \u00a311.25\n      - Offer = \u00a317, so always in bonus region.\n- **High alpha_thr (1.2):** Threshold much higher; many offers fall below, strong penalty.\n    - *Example*: Same as above, threshold = 1.2 \u00d7 (5/16) \u00d7 60 \u2248 \u00a322.5, so even \u00a317 offer is penalized.\n\n**Effect is *exclusive*: only changes where region boundary occurs; does not change penalty/bonus impact within regions.**\n\n### **Parameter 2: gamma_pen (power penalty)**\n- **Low gamma_pen (0.7):** Penalty increases sub-linearly: forgiving, shallow penalty for small deficits.\n    - *Example*: threshold = 25, offer = 20 \u2192 deficit = 5; penalty = -0.7 \u00d7 (5^0.7) \u2248 -2.38\n    - threshold = 25, offer = 10 \u2192 deficit = 15; penalty = -0.7 \u00d7 (15^0.7) \u2248 -4.59\n- **High gamma_pen (3):** Strong, rapidly accelerating penalty for any shortfall.\n    - penalty = -3 \u00d7 (5^3) = -3 \u00d7 125 = -375 (!); small infractions are harshly punished.\n\n**Effect is *exclusive* to penalty region: not present in bonus; does not move threshold.**\n\n### **Parameter 3: delta_bon (bonus amplitude/slope for generosity)**\n- **Low delta_bon (0.3):** Flat, almost no bonus for surplus.\n    - surplus = 4, log(1 + 0.3\u00d74) \u2248 log(2.2) \u2248 0.789; bonus \u2248 0.3 \u00d7 0.789 \u00d7 (pot/50)\n- **High delta_bon (3):** Steep, potentially super-linear bonus in high-surplus cases.\n    - surplus = 4, log(1 + 3\u00d74) = log(13) \u2248 2.56; bonus \u2248 3 \u00d7 2.56 \u00d7 (pot/50)\n- **Effect** is *exclusive* to positive-surplus/bonus region and its shape is non-saturating with increasing surplus/pot.\n\n---\n\n### **Examples (Full Trials for Each Parameter at Extremes):**\n\n#### **(A) High-pot, self disadvantaged (token_self=5, token_opp=11, pot=75)**\n- Fair threshold with alpha_thr=0.9: 0.9\u00d7(5/16)\u00d775 \u2248 \u00a321.1\n- Offer = \u00a318, Surplus = -3.1 \u2192 penalty region; Offer = \u00a330, Surplus = +8.9 \u2192 bonus region.\n\n**Vary alpha_thr:**\n- At alpha_thr=0.6, threshold=\u00a314.1 (bonus more common)\n- At alpha_thr=1.2, threshold=\u00a328.2 (penalty more likely, even for \u00a318 and \u00a330 offers)\n\n**Vary gamma_pen:**\n- At gamma_pen=0.7, deficit=3.1, penalty \u2248 -0.7\u00d7(3.1^0.7)=~ -1.7\n- At gamma_pen=3, penalty = -3\u00d7(3.1^3) \u2248 -3\u00d729.8=~ -89.3\n\n**Vary delta_bon:** \n- For \u00a330 offer (surplus=8.9), with delta_bon=0.3: bonus \u2248 0.3\u00d7log(1+0.3\u00d78.9)\u00d71.5 \u2248 0.3\u00d7log(3.67)\u00d71.5 \u2248 0.3\u00d71.3\u00d71.5 \u2248 0.59\n- With delta_bon=3: bonus \u2248 3\u00d7log(1+3\u00d78.9)\u00d71.5 \u2248 3\u00d7log(27.7)\u00d71.5 \u2248 3\u00d73.32\u00d71.5 \u2248 14.94\n\n#### **(B) Low-pot, self advantaged (token_self=11, token_opp=5, pot=48)**\n- threshold (alpha_thr=0.9): 0.9\u00d7(11/16)\u00d748 \u2248 \u00a329.7\n- Offer \u00a320 (penalty), Offer \u00a340 (bonus).\n\n**Parameter variations modulate output analogously, in all contexts. The coverage of penalty/bonus (by checking actual dataset splits) is robust (substantial trial counts land in regions above/below entitlement for both high/low pots).**\n\n---\n\n### **Parameter Recovery and Model Region Assurance**\n- Each parameter is *non-redundant*: threshold adjusts coverage (regionality); penalty/bonus shape and scale are independently controlled and not mirrored.\n- No parameter influences another's region.\n- In real data, offers span both above/below entitlement, so regions are empirically well sampled.\n\n---\n\n## **Step 6: Variable Specification**\n\n---\n\n<MODEL>\nthreshold = alpha_thr * (token_self / (token_self + token_opp)) * combined_earning\n\nU = -gamma_pen * (max(0, threshold - split_self))**gamma_pen * (split_self < threshold) + delta_bon * log(1 + delta_bon * (split_self - threshold)) * (combined_earning / 50) * (split_self >= threshold)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"threshold\": {\n      \"description\": \"Participant's subjective entitlement threshold (\u00a3), based on tokens found and scaling parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha_thr\": {\n      \"description\": \"Scaling parameter for fairness threshold; controls what proportion of earned pot is considered 'fair' for participant\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant in pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent in pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money in the pot for this round (\u00a3)\",\n      \"range\": {\n        \"min\": 6,\n        \"max\": 75,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed split (unbounded, logistic function is applied to produce probability of accept)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount (\u00a3) offered to participant by proposer\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"gamma_pen\": {\n      \"description\": \"Penalty parameter: controls both the nonlinearity and scale of negative utility for unfair offers (single parameter for power and amplitude)\",\n      \"range\": {\n        \"min\": 0.3,\n        \"max\": 4,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.3,\n          \"high\": 4.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta_bon\": {\n      \"description\": \"Bonus parameter for generosity region: controls slope and amplitude of bonus for amounts above entitlement, and interacts multiplicatively with context (pot size)\",\n      \"range\": {\n        \"min\": 0.2,\n        \"max\": 6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.2,\n          \"high\": 6.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA three-parameter, region-exclusive utility model: threshold (proportional to token share), an exponentiated penalty for unfair offers, and a context-amplified logarithmic bonus for generous splits; each parameter is uniquely recoverable by its distinct effect on boundary, shape, or scaling in real trial data.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha_thr', 'gamma_pen', 'delta_bon']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                threshold = alpha_thr * (token_self / (token_self + token_opp)) * combined_earning\n\nU = -gamma_pen * (max(0, threshold - split_self))**gamma_pen * (split_self < threshold) + delta_bon * log(1 + delta_bon * (split_self - threshold)) * (combined_earning / 50) * (split_self >= threshold)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"threshold\": {\n      \"description\": \"Participant's subjective entitlement threshold (\\u00a3), based on tokens found and scaling parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha_thr\": {\n      \"description\": \"Scaling parameter for fairness threshold; controls what proportion of earned pot is considered 'fair' for participant\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant in pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent in pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money in the pot for this round (\\u00a3)\",\n      \"range\": {\n        \"min\": 6,\n        \"max\": 75,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed split (unbounded, logistic function is applied to produce probability of accept)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount (\\u00a3) offered to participant by proposer\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"gamma_pen\": {\n      \"description\": \"Penalty parameter: controls both the nonlinearity and scale of negative utility for unfair offers (single parameter for power and amplitude)\",\n      \"range\": {\n        \"min\": 0.3,\n        \"max\": 4,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.3,\n          \"high\": 4.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta_bon\": {\n      \"description\": \"Bonus parameter for generosity region: controls slope and amplitude of bonus for amounts above entitlement, and interacts multiplicatively with context (pot size)\",\n      \"range\": {\n        \"min\": 0.2,\n        \"max\": 6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.2,\n          \"high\": 6.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha_thr=1, gamma_pen=1, delta_bon=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        threshold = alpha_thr * (token_self / (token_self + token_opp)) * combined_earning\n\n        U = -gamma_pen * (max(0, threshold - split_self))**gamma_pen * (split_self < threshold) + delta_bon * math.log(1 + delta_bon * (split_self - threshold)) * (combined_earning / 50) * (split_self >= threshold)\n\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = \"\"\"\n[\n  {\n    \"ID\": 1,\n    \"group\": \"group1\",\n    \"trial_number\": 1,\n    \"trial_type\": 1,\n    \"trial_role\": 1,\n    \"token_opp\": 5,\n    \"token_self\": 11,\n    \"combined_earning\": 48,\n    \"split_opp\": 28.8,\n    \"split_self\": 19.2,\n    \"splitperc_opp\": 60,\n    \"splitperc_self\": 40,\n    \"accept\": 1.0,\n    \"accepted_amount\": 19.2,\n    \"accepted_perc\": 40.0,\n    \"proposed_perc\": 40.0,\n    \"proposed_amount\": 19.2\n  },\n  {\n    \"ID\": 2,\n    \"group\": \"group1\",\n    \"trial_number\": 2,\n    \"trial_type\": 1,\n    \"trial_role\": 1,\n    \"token_opp\": 5,\n    \"token_self\": 11,\n    \"combined_earning\": 48,\n    \"split_opp\": 24.0,\n    \"split_self\": 24.0,\n    \"splitperc_opp\": 50,\n    \"splitperc_self\": 50,\n    \"accept\": 1.0,\n    \"accepted_amount\": 24.0,\n    \"accepted_perc\": 50.0,\n    \"proposed_perc\": 50.0,\n    \"proposed_amount\": 24.0\n  }\n]\n\"\"\"\n\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744726813.339634
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha_thr', 'gamma_pen', 'delta_bon']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                threshold = alpha_thr * (token_self / (token_self + token_opp)) * combined_earning\n\nU = -gamma_pen * (max(0, threshold - split_self))**gamma_pen * (split_self < threshold) + delta_bon * log(1 + delta_bon * (split_self - threshold)) * (combined_earning / 50) * (split_self >= threshold)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"threshold\": {\n      \"description\": \"Participant's subjective entitlement threshold (\\u00a3), based on tokens found and scaling parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha_thr\": {\n      \"description\": \"Scaling parameter for fairness threshold; controls what proportion of earned pot is considered 'fair' for participant\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant in pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent in pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money in the pot for this round (\\u00a3)\",\n      \"range\": {\n        \"min\": 6,\n        \"max\": 75,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed split (unbounded, logistic function is applied to produce probability of accept)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount (\\u00a3) offered to participant by proposer\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"gamma_pen\": {\n      \"description\": \"Penalty parameter: controls both the nonlinearity and scale of negative utility for unfair offers (single parameter for power and amplitude)\",\n      \"range\": {\n        \"min\": 0.3,\n        \"max\": 4,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.3,\n          \"high\": 4.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta_bon\": {\n      \"description\": \"Bonus parameter for generosity region: controls slope and amplitude of bonus for amounts above entitlement, and interacts multiplicatively with context (pot size)\",\n      \"range\": {\n        \"min\": 0.2,\n        \"max\": 6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.2,\n          \"high\": 6.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha_thr=0.5, gamma_pen=0.5, delta_bon=0.5):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        # Calculate threshold\n        threshold = alpha_thr * (token_self / (token_self + token_opp)) * combined_earning if (token_self + token_opp) > 0 else 0\n\n        # Calculate utility\n        penalty = -gamma_pen * (max(0, threshold - split_self))**gamma_pen if split_self < threshold else 0\n        bonus = delta_bon * math.log(1 + delta_bon * (split_self - threshold)) * (combined_earning / 50) if split_self >= threshold and (1 + delta_bon * (split_self - threshold)) > 0 else 0  #Added a check for logarithm domain\n        U = penalty + bonus\n\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"group1\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 11, \"combined_earning\": 48, \"split_opp\": 28.79, \"split_self\": 19.21, \"splitperc_opp\": 60, \"splitperc_self\": 40, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 40.0, \"proposed_amount\": 19.21}, {\"ID\": 2, \"group\": \"group1\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 11, \"token_self\": 5, \"combined_earning\": 48, \"split_opp\": 19.21, \"split_self\": 28.79, \"splitperc_opp\": 40, \"splitperc_self\": 60, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 60.0, \"proposed_amount\": 28.79}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data, alpha_thr=0.5, gamma_pen=0.5, delta_bon=0.5)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1744726816.933662
    }
  ],
  "learnable_parameters": {
    "alpha_thr": {
      "description": "Scaling parameter for fairness threshold; controls what proportion of earned pot is considered 'fair' for participant",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma_pen": {
      "description": "Penalty parameter: controls both the nonlinearity and scale of negative utility for unfair offers (single parameter for power and amplitude)",
      "range": {
        "min": 0.3,
        "max": 4,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.3,
          "high": 4.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "delta_bon": {
      "description": "Bonus parameter for generosity region: controls slope and amplitude of bonus for amounts above entitlement, and interacts multiplicatively with context (pot size)",
      "range": {
        "min": 0.2,
        "max": 6,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.2,
          "high": 6.0
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "threshold = alpha_thr * (token_self / (token_self + token_opp)) * combined_earning\n\nU = -gamma_pen * (max(0, threshold - split_self))**gamma_pen * (split_self < threshold) + delta_bon * log(1 + delta_bon * (split_self - threshold)) * (combined_earning / 50) * (split_self >= threshold)",
  "variable_descriptions": {
    "threshold": {
      "description": "Participant's subjective entitlement threshold (\u00a3), based on tokens found and scaling parameter",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha_thr": {
      "description": "Scaling parameter for fairness threshold; controls what proportion of earned pot is considered 'fair' for participant",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "token_self": {
      "description": "Number of tokens found by participant in pretask",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by opponent in pretask",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money in the pot for this round (\u00a3)",
      "range": {
        "min": 6,
        "max": 75,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "U": {
      "description": "Utility of accepting the proposed split (unbounded, logistic function is applied to produce probability of accept)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "Amount (\u00a3) offered to participant by proposer",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "gamma_pen": {
      "description": "Penalty parameter: controls both the nonlinearity and scale of negative utility for unfair offers (single parameter for power and amplitude)",
      "range": {
        "min": 0.3,
        "max": 4,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.3,
          "high": 4.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "delta_bon": {
      "description": "Bonus parameter for generosity region: controls slope and amplitude of bonus for amounts above entitlement, and interacts multiplicatively with context (pot size)",
      "range": {
        "min": 0.2,
        "max": 6,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.2,
          "high": 6.0
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A three-parameter, region-exclusive utility model: threshold (proportional to token share), an exponentiated penalty for unfair offers, and a context-amplified logarithmic bonus for generous splits; each parameter is uniquely recoverable by its distinct effect on boundary, shape, or scaling in real trial data.",
  "target_variable": "accept",
  "full_reasoning": "Let's proceed step by step, focusing on maximizing coverage, region separation, and parameter recoverability as required.\n\n---\n\n## **Step 1: Region Structure and Variable Definitions**\n\n### **A) Regions**\n- **Penalty Region:** When the offer to responder is *below* a fairness threshold, apply a strong, negative, and shape-controllable (power or exponential-minus-one) penalty.\n- **Fairness Threshold:** Should reflect the participant's entitlement, calculated from token_self and combined_earning for flexible coverage and identifiability.\n- **Bonus Region:** When the offer is *above* threshold, apply a nonlinear, parameterized bonus\u2014preferably multiplicative with context (e.g., combined_earning), and flexible in both slope and curvature.\n\n### **B) Notation**\n- Let `offer` = split_self (participant's proposed share, \u00a3)\n- Let `threshold` = calculated entitlement in \u00a3\n- Let `pot` = combined_earning (\u00a3)\n- Surplus = offer - threshold (can be positive or negative)\n- Below-threshold: penalty region; above: bonus region.\n\n---\n\n## **Step 2: Explicit Threshold Formula & Data Coverage Justification**\n\n### **A) Threshold Formula**\nCalculate the 'fair' entitlement for the responder as:\n\n\\[ \\text{threshold} = \\alpha_{thr} \\cdot \\frac{\\text{token_self}}{\\text{token_self} + \\text{token_opp}} \\cdot \\text{combined_earning} \\]\n\n- \\(\\alpha_{thr}\\) allows threshold to flexibly range from strictly proportional (\u03b1=1), more selfish (\u03b1>1), or more generous (\u03b1<1).\n- The empirical distribution of token_self/token_opp (from the data) covers roughly [0.2, 0.8]\u2014with this flexibility, threshold will cover a wide range.\n\n### **B) Simulated Coverage Check**\n- For low (5 vs. 11) and high (11 vs. 5) token allocations with combined_earning from \u00a348 to \u00a375, threshold varies from as little as \u00a310 to as much as \u00a360+, ensuring both penalty and surplus regions are covered for typical trial splits.\n\n---\n\n## **Step 3: Penalty and Bonus Function Designs**\n\n### **A) Penalty Region (Offer < Threshold)**\n- Use **power-exponential** penalty: monotonic, amplifiable, one-parameter controlled, strictly negative.\n- **Form:** \\( -\\gamma_{pen} \\cdot [\\max(0, \\text{threshold} - \\text{offer})]^{\\gamma_{pen}} \\)\n    - Single parameter \\(\\gamma_{pen}\\) amplifies both the degree and the nonlinearity (higher \u03b3, sharper penalty).\n\n### **B) Bonus Region (Offer > Threshold)**\n- Use **flexible, context-multiplied log-bonus**:\n- **Form:** \\( \\delta_{bon} \\cdot \\log(1 + \\delta_{bon} \\cdot (\\text{offer} - \\text{threshold})) \\cdot \\frac{\\text{combined_earning}}{50} \\)\n    - Single parameter \\(\\delta_{bon}\\) for both amplitude and slope; avoids rapid saturation; pot dependence ensures coverage in both small and large pots.\n\n---\n\n## **Step 4: Region Construction in Utility Function**\n\nCombine regions with Heaviside (step) indicator of sign (i.e., penalty if offer below threshold, bonus if above).\n\n### **Full Model:**\n\n\\[\nU = \n  -\\gamma_{pen} \\cdot [\\max(0, \\text{threshold} - \\text{offer})]^{\\gamma_{pen}} \\cdot \\mathbb{I}[\\text{offer} < \\text{threshold}] + \n  \\delta_{bon} \\cdot \\log(1 + \\delta_{bon} \\cdot (\\text{offer} - \\text{threshold})) \\cdot \\frac{\\text{combined_earning}}{50} \\cdot \\mathbb{I}[\\text{offer} \\geq \\text{threshold}]\n\\]\n\nWhere\n\n\\[\n\\text{threshold} = \\alpha_{thr} \\cdot \\frac{\\text{token_self}}{\\text{token_self} + \\text{token_opp}} \\cdot \\text{combined_earning}\n\\]\n\n---\n\n## **Step 5: Simulation-Based Parameter Reasoning**\n\n### **Parameter 1: alpha_thr (proportionality of fairness threshold)**\n- **Low alpha_thr (0.6):** Offers more often exceed threshold (bonus region common); penalty region rare.\n    - *Example*: For token_self = 5, token_opp = 11, combined_earning = 60\n      - threshold = 0.6 \u00d7 (5/16) \u00d7 60 \u2248 \u00a311.25\n      - Offer = \u00a317, so always in bonus region.\n- **High alpha_thr (1.2):** Threshold much higher; many offers fall below, strong penalty.\n    - *Example*: Same as above, threshold = 1.2 \u00d7 (5/16) \u00d7 60 \u2248 \u00a322.5, so even \u00a317 offer is penalized.\n\n**Effect is *exclusive*: only changes where region boundary occurs; does not change penalty/bonus impact within regions.**\n\n### **Parameter 2: gamma_pen (power penalty)**\n- **Low gamma_pen (0.7):** Penalty increases sub-linearly: forgiving, shallow penalty for small deficits.\n    - *Example*: threshold = 25, offer = 20 \u2192 deficit = 5; penalty = -0.7 \u00d7 (5^0.7) \u2248 -2.38\n    - threshold = 25, offer = 10 \u2192 deficit = 15; penalty = -0.7 \u00d7 (15^0.7) \u2248 -4.59\n- **High gamma_pen (3):** Strong, rapidly accelerating penalty for any shortfall.\n    - penalty = -3 \u00d7 (5^3) = -3 \u00d7 125 = -375 (!); small infractions are harshly punished.\n\n**Effect is *exclusive* to penalty region: not present in bonus; does not move threshold.**\n\n### **Parameter 3: delta_bon (bonus amplitude/slope for generosity)**\n- **Low delta_bon (0.3):** Flat, almost no bonus for surplus.\n    - surplus = 4, log(1 + 0.3\u00d74) \u2248 log(2.2) \u2248 0.789; bonus \u2248 0.3 \u00d7 0.789 \u00d7 (pot/50)\n- **High delta_bon (3):** Steep, potentially super-linear bonus in high-surplus cases.\n    - surplus = 4, log(1 + 3\u00d74) = log(13) \u2248 2.56; bonus \u2248 3 \u00d7 2.56 \u00d7 (pot/50)\n- **Effect** is *exclusive* to positive-surplus/bonus region and its shape is non-saturating with increasing surplus/pot.\n\n---\n\n### **Examples (Full Trials for Each Parameter at Extremes):**\n\n#### **(A) High-pot, self disadvantaged (token_self=5, token_opp=11, pot=75)**\n- Fair threshold with alpha_thr=0.9: 0.9\u00d7(5/16)\u00d775 \u2248 \u00a321.1\n- Offer = \u00a318, Surplus = -3.1 \u2192 penalty region; Offer = \u00a330, Surplus = +8.9 \u2192 bonus region.\n\n**Vary alpha_thr:**\n- At alpha_thr=0.6, threshold=\u00a314.1 (bonus more common)\n- At alpha_thr=1.2, threshold=\u00a328.2 (penalty more likely, even for \u00a318 and \u00a330 offers)\n\n**Vary gamma_pen:**\n- At gamma_pen=0.7, deficit=3.1, penalty \u2248 -0.7\u00d7(3.1^0.7)=~ -1.7\n- At gamma_pen=3, penalty = -3\u00d7(3.1^3) \u2248 -3\u00d729.8=~ -89.3\n\n**Vary delta_bon:** \n- For \u00a330 offer (surplus=8.9), with delta_bon=0.3: bonus \u2248 0.3\u00d7log(1+0.3\u00d78.9)\u00d71.5 \u2248 0.3\u00d7log(3.67)\u00d71.5 \u2248 0.3\u00d71.3\u00d71.5 \u2248 0.59\n- With delta_bon=3: bonus \u2248 3\u00d7log(1+3\u00d78.9)\u00d71.5 \u2248 3\u00d7log(27.7)\u00d71.5 \u2248 3\u00d73.32\u00d71.5 \u2248 14.94\n\n#### **(B) Low-pot, self advantaged (token_self=11, token_opp=5, pot=48)**\n- threshold (alpha_thr=0.9): 0.9\u00d7(11/16)\u00d748 \u2248 \u00a329.7\n- Offer \u00a320 (penalty), Offer \u00a340 (bonus).\n\n**Parameter variations modulate output analogously, in all contexts. The coverage of penalty/bonus (by checking actual dataset splits) is robust (substantial trial counts land in regions above/below entitlement for both high/low pots).**\n\n---\n\n### **Parameter Recovery and Model Region Assurance**\n- Each parameter is *non-redundant*: threshold adjusts coverage (regionality); penalty/bonus shape and scale are independently controlled and not mirrored.\n- No parameter influences another's region.\n- In real data, offers span both above/below entitlement, so regions are empirically well sampled.\n\n---\n\n## **Step 6: Variable Specification**\n\n---\n\n<MODEL>\nthreshold = alpha_thr * (token_self / (token_self + token_opp)) * combined_earning\n\nU = -gamma_pen * (max(0, threshold - split_self))**gamma_pen * (split_self < threshold) + delta_bon * log(1 + delta_bon * (split_self - threshold)) * (combined_earning / 50) * (split_self >= threshold)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"threshold\": {\n      \"description\": \"Participant's subjective entitlement threshold (\u00a3), based on tokens found and scaling parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha_thr\": {\n      \"description\": \"Scaling parameter for fairness threshold; controls what proportion of earned pot is considered 'fair' for participant\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant in pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent in pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money in the pot for this round (\u00a3)\",\n      \"range\": {\n        \"min\": 6,\n        \"max\": 75,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed split (unbounded, logistic function is applied to produce probability of accept)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount (\u00a3) offered to participant by proposer\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"gamma_pen\": {\n      \"description\": \"Penalty parameter: controls both the nonlinearity and scale of negative utility for unfair offers (single parameter for power and amplitude)\",\n      \"range\": {\n        \"min\": 0.3,\n        \"max\": 4,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.3,\n          \"high\": 4.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta_bon\": {\n      \"description\": \"Bonus parameter for generosity region: controls slope and amplitude of bonus for amounts above entitlement, and interacts multiplicatively with context (pot size)\",\n      \"range\": {\n        \"min\": 0.2,\n        \"max\": 6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.2,\n          \"high\": 6.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA three-parameter, region-exclusive utility model: threshold (proportional to token share), an exponentiated penalty for unfair offers, and a context-amplified logarithmic bonus for generous splits; each parameter is uniquely recoverable by its distinct effect on boundary, shape, or scaling in real trial data.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: threshold = alpha_thr * (token_self / (token_self + token_opp)) * combined_earning\n\nU = -gamma_pen * (max(0, threshold - split_self))**gamma_pen * (split_self < threshold) + delta_bon * log(1 + delta_bon * (split_self - threshold)) * (combined_earning / 50) * (split_self >= threshold)\nSummary: A three-parameter, region-exclusive utility model: threshold (proportional to token share), an exponentiated penalty for unfair offers, and a context-amplified logarithmic bonus for generous splits; each parameter is uniquely recoverable by its distinct effect on boundary, shape, or scaling in real trial data.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [
    {
      "retry_number": 0,
      "error": "Traceback (most recent call last):\n  File \"<string>\", line 25, in <module>\n    results = simulate_model(data, alpha_thr=0.5, gamma_pen=0.5, delta_bon=0.5)\n  File \"<string>\", line 16, in simulate_model\n    U = -gamma_pen * (max(0, threshold - split_self))**gamma_pen * (split_self < threshold) + delta_bon * math.log(1 + delta_bon * (split_self - threshold)) * (combined_earning / 50) * (split_self >= threshold)\n                                                                                                          ~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nValueError: math domain error\n",
      "timestamp": 1744726813.393826
    }
  ],
  "current_retry": 1,
  "simulation_error": "Traceback (most recent call last):\n  File \"<string>\", line 25, in <module>\n    results = simulate_model(data, alpha_thr=0.5, gamma_pen=0.5, delta_bon=0.5)\n  File \"<string>\", line 16, in simulate_model\n    U = -gamma_pen * (max(0, threshold - split_self))**gamma_pen * (split_self < threshold) + delta_bon * math.log(1 + delta_bon * (split_self - threshold)) * (combined_earning / 50) * (split_self >= threshold)\n                                                                                                          ~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nValueError: math domain error\n",
  "simulation_code": "def simulate_model(trial_data, alpha_thr=0.5, gamma_pen=0.5, delta_bon=0.5):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        # Calculate threshold\n        threshold = alpha_thr * (token_self / (token_self + token_opp)) * combined_earning if (token_self + token_opp) > 0 else 0\n\n        # Calculate utility\n        penalty = -gamma_pen * (max(0, threshold - split_self))**gamma_pen if split_self < threshold else 0\n        bonus = delta_bon * math.log(1 + delta_bon * (split_self - threshold)) * (combined_earning / 50) if split_self >= threshold and (1 + delta_bon * (split_self - threshold)) > 0 else 0  #Added a check for logarithm domain\n        U = penalty + bonus\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 1,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.735042735042735,
  "group_accuracies": {
    "Control": 0.7629198966408268,
    "Cocaine": 0.7100694444444444
  },
  "group_parameter_averages": {
    "Control": {
      "alpha_thr": 0.6276114310791107,
      "gamma_pen": 1.426911557589171,
      "delta_bon": 5.446002025346376
    },
    "Cocaine": {
      "alpha_thr": 0.6996413476986678,
      "gamma_pen": 1.3015840526523819,
      "delta_bon": 4.46609616346285
    }
  },
  "fitting_results": [
    {
      "alpha_thr": 1.083497096803199,
      "gamma_pen": 1.1337551169372346,
      "delta_bon": 2.924111473528065,
      "success": true,
      "log_likelihood": -8.129859977855354,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.7000679967536935,
      "gamma_pen": 0.8199150235768116,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -14.958928070869339,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.6124954703651411,
      "gamma_pen": 4.0,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -10.526667945218378,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.6249999865172277,
      "gamma_pen": 4.0,
      "delta_bon": 4.637727106813935,
      "success": true,
      "log_likelihood": -13.001308177904544,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.6961809884424525,
      "gamma_pen": 1.5789983946030282,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -9.721348208350987,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5576555893907611,
      "gamma_pen": 1.4397863458092706,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -11.653245824941358,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -13.348120784696901,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5461978074673878,
      "gamma_pen": 4.0,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -10.80723939502914,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -13.348120784696903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.7000000136968004,
      "gamma_pen": 1.7710366763458145,
      "delta_bon": 5.903683964562669,
      "success": true,
      "log_likelihood": -11.269650336497634,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.6851275049646081,
      "gamma_pen": 4.0,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -6.259197878942792,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.8588930297056847,
      "gamma_pen": 4.0,
      "delta_bon": 1.115320789392632,
      "success": true,
      "log_likelihood": -9.136669299296655,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.6765283708691632,
      "gamma_pen": 1.3624865813028604,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -9.327175746480522,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -13.348120784696905,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -13.348120784696903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -13.348120784696905,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -13.348120784696903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -11.708428736829541,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -11.981091981599214,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -13.348120784696903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.666667488004467,
      "gamma_pen": 0.8623690509988754,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -13.83131616111534,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -11.750100300959893,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.6371916736662185,
      "gamma_pen": 4.0,
      "delta_bon": 1.763220606176674,
      "success": true,
      "log_likelihood": -15.60028196564531,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.6666824141102516,
      "gamma_pen": 0.7775367168852825,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -16.390060421564556,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.6938549486279317,
      "gamma_pen": 1.0684581902685708,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -12.841622699633332,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.6666724908567048,
      "gamma_pen": 0.7623463332879056,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -14.94232240451717,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.624999993939441,
      "gamma_pen": 1.3072196374662095,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -11.615837308471567,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.8380417976196839,
      "gamma_pen": 4.0,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -5.152072738576984,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -12.125771202500149,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.559692378479653,
      "gamma_pen": 0.3,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -15.36821624642963,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -13.348120784696901,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 1.1999968827246514,
      "gamma_pen": 0.9722300347896119,
      "delta_bon": 5.232929465182507,
      "success": true,
      "log_likelihood": -8.007170058085249,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5857184018213865,
      "gamma_pen": 1.111631954893787,
      "delta_bon": 1.6854850979020657,
      "success": true,
      "log_likelihood": -20.75686476664934,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.6406281618946416,
      "gamma_pen": 4.0,
      "delta_bon": 2.820353387787013,
      "success": true,
      "log_likelihood": -14.473744070436874,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -13.348120784696901,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 2.6306199594118955,
      "delta_bon": 4.506689786903297,
      "success": true,
      "log_likelihood": -14.322179951556155,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5323808281317018,
      "gamma_pen": 4.0,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -7.66412838744992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.7000000110176625,
      "gamma_pen": 1.0379891978887001,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -13.477290868239123,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.6670778110398523,
      "gamma_pen": 0.331677335656964,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -17.10057438098191,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -12.692450713661572,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.6262309207724961,
      "gamma_pen": 0.6351110671359687,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -15.067585774529842,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.9398114787188968,
      "gamma_pen": 0.9540293590755632,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -11.204784885179464,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 5.588565411645283,
      "success": true,
      "log_likelihood": -17.319355715138002,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.537117129149216,
      "gamma_pen": 4.0,
      "delta_bon": 3.448682098443956,
      "success": true,
      "log_likelihood": -15.887272558326876,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5347722627987959,
      "gamma_pen": 1.8889638279592151,
      "delta_bon": 4.803616277333099,
      "success": true,
      "log_likelihood": -13.971826741879154,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 4.657952052994548,
      "success": true,
      "log_likelihood": -17.393518126154277,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.6666667090692642,
      "gamma_pen": 0.9555492034891525,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -14.733235216582111,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.8070315369171494,
      "gamma_pen": 0.6867879348471922,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -17.623166968835555,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.7200758826668711,
      "gamma_pen": 1.8944889560783726,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -10.861163513867442,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.33085959429853035,
      "delta_bon": 1.8290545305391326,
      "success": true,
      "log_likelihood": -23.627393252849842,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.789261989529564,
      "delta_bon": 4.081033377616843,
      "success": true,
      "log_likelihood": -18.247370979349892,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 1.217953928637825,
      "gamma_pen": 0.763841754513695,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -12.649021486946912,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.6250055503150941,
      "gamma_pen": 0.8030232813418673,
      "delta_bon": 4.195235365119286,
      "success": true,
      "log_likelihood": -19.40519289348841,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.8414092457229402,
      "delta_bon": 2.481451763651706,
      "success": true,
      "log_likelihood": -22.261412640150507,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.8686684775964113,
      "gamma_pen": 0.6990460116387707,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -17.67073650328944,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.7824181626475,
      "gamma_pen": 3.5153818246456354,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -5.916602639213625,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.7930746610500291,
      "gamma_pen": 4.0,
      "delta_bon": 3.7791123025788984,
      "success": true,
      "log_likelihood": -9.488668782903021,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 3.7411620599045228,
      "success": true,
      "log_likelihood": -21.579896382900827,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.8555562186511484,
      "gamma_pen": 4.0,
      "delta_bon": 0.7378741631294365,
      "success": true,
      "log_likelihood": -9.218852772871879,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 5.433235970396468,
      "success": true,
      "log_likelihood": -16.22753273433999,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.6262609754602756,
      "gamma_pen": 0.4150723466101582,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -17.56180002678764,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.6666678592635317,
      "gamma_pen": 0.9285764058734776,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -12.864769884901337,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 1.200000028103772,
      "gamma_pen": 0.9677920865413746,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -7.955554025572912,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.57311123314197,
      "gamma_pen": 1.0153233781126803,
      "delta_bon": 2.280533100657449,
      "success": true,
      "log_likelihood": -20.044181785672258,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.8999999926527361,
      "gamma_pen": 1.1175857533812696,
      "delta_bon": 4.247375903766078,
      "success": true,
      "log_likelihood": -11.001703815937677,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.6250018629362494,
      "gamma_pen": 0.8479631794714678,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -13.288508573292008,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -12.413137463479735,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 5.588571941392138,
      "success": true,
      "log_likelihood": -16.037515302539926,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 2.077593684766806,
      "delta_bon": 3.7223257702281196,
      "success": true,
      "log_likelihood": -16.199147891616995,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 5.604445471973747,
      "success": true,
      "log_likelihood": -16.883950906434396,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 1.0538591518820382,
      "gamma_pen": 4.0,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -3.3510695166835527,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 1.006793284967095,
      "gamma_pen": 0.9623987918052208,
      "delta_bon": 1.9534002834941164,
      "success": true,
      "log_likelihood": -12.528843473253133,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.6250000259396207,
      "gamma_pen": 0.953193882321795,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -14.622391157957777,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 5.024066823133192,
      "success": true,
      "log_likelihood": -16.655609152844956,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.6789931809379316,
      "gamma_pen": 0.47211635787189316,
      "delta_bon": 4.0429934478874126,
      "success": true,
      "log_likelihood": -21.221611975645672,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 4.0,
      "delta_bon": 4.834925555623498,
      "success": true,
      "log_likelihood": -13.811719821855243,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -12.756060367892578,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 1.5,
      "gamma_pen": 0.804275521489187,
      "delta_bon": 1.5153004527172422,
      "success": true,
      "log_likelihood": -8.223279529792437,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.607915053194511,
      "gamma_pen": 0.3,
      "delta_bon": 4.849464873126677,
      "success": true,
      "log_likelihood": -20.216189202434485,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 1.083510092037596,
      "gamma_pen": 1.1337436862774362,
      "delta_bon": 2.924440272120759,
      "success": true,
      "log_likelihood": -8.129859982451437,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.8808105393330433,
      "gamma_pen": 0.3,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -22.43957862032166,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 4.714964267878877,
      "success": true,
      "log_likelihood": -18.875318709858746,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.8579431385427564,
      "gamma_pen": 4.0,
      "delta_bon": 0.2,
      "success": true,
      "log_likelihood": -9.193685739246641,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.632572763951674,
      "gamma_pen": 4.0,
      "delta_bon": 5.655379553190847,
      "success": true,
      "log_likelihood": -10.518329427729922,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 1.5639079312260387,
      "success": true,
      "log_likelihood": -24.238151127396623,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 1.0486728585862881,
      "gamma_pen": 1.1988298517032074,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -7.169640359842745,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.6000353431051598,
      "gamma_pen": 0.3,
      "delta_bon": 5.443479729449683,
      "success": true,
      "log_likelihood": -17.80487663798663,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.884340337033795,
      "gamma_pen": 1.0594201584279013,
      "delta_bon": 0.8467095824625751,
      "success": true,
      "log_likelihood": -13.3243639116281,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5,
      "gamma_pen": 0.3,
      "delta_bon": 6.0,
      "success": true,
      "log_likelihood": -12.721950443149323,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5618940711710935,
      "gamma_pen": 2.85353581859552,
      "delta_bon": 4.0091545438745015,
      "success": true,
      "log_likelihood": -14.138259422218699,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_thr": 0.5610623777956156,
      "gamma_pen": 0.3,
      "delta_bon": 4.162766380305952,
      "success": true,
      "log_likelihood": -20.208039842771925,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha_thr": {
        "r": 0.8491016486673809,
        "p": 6.474601382920752e-29
      },
      "gamma_pen": {
        "r": 0.6605408039977165,
        "p": 7.597926879097786e-14
      },
      "delta_bon": {
        "r": 0.4017088710600817,
        "p": 3.435739741492769e-05
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 38.29955883639154,
  "bic_Control": 35.88160935785247,
  "bic_Cocaine": 40.46563857758279,
  "bic_results": {
    "average_bic": 38.29955883639154,
    "individual_bics": [
      27.010276771079038,
      40.66841295710701,
      31.803892705805087,
      36.75317317117742,
      30.193253232070305,
      34.05704846525104,
      37.44679838476213,
      32.36503560542661,
      37.44679838476213,
      33.289857488363594,
      23.268952573253912,
      29.02389541396164,
      29.404908308329375,
      37.44679838476214,
      37.44679838476213,
      37.44679838476214,
      37.44679838476213,
      34.16741428902741,
      34.712740778566754,
      37.44679838476213,
      38.41318913759901,
      34.25075741728811,
      41.95112074665895,
      43.53067765849744,
      36.433802214634994,
      40.63520162440267,
      33.982231432311465,
      21.0547022925223,
      35.00209922036863,
      41.48698930822759,
      37.44679838476213,
      26.76489693153883,
      52.264286348667014,
      39.69804495624208,
      37.44679838476213,
      39.394916718480644,
      26.07881359026817,
      37.705138551846574,
      44.95170557733215,
      36.13545824269147,
      40.88572836442802,
      33.160126585727255,
      45.38926824564433,
      42.52510193202208,
      38.69421029912664,
      45.53759306767688,
      40.21702724853255,
      45.99689075303944,
      32.47288384310322,
      58.00534332106801,
      47.24529877406812,
      36.048599789262155,
      49.56094260234515,
      55.27338209566935,
      46.09202982194721,
      22.58376209379558,
      29.727894381174373,
      53.91034958116998,
      29.188262361112088,
      43.20562228404832,
      45.874156868943615,
      36.480096585171005,
      26.661664866514155,
      50.83892038671284,
      32.75396444724369,
      37.327573961952346,
      35.5768317423278,
      42.82558742044819,
      43.14885259860232,
      44.51845862823713,
      17.452695848735438,
      35.80824376187459,
      39.995339131283885,
      44.06177512105825,
      53.19378076665967,
      38.37399645907882,
      36.26267755115349,
      27.197115874953205,
      51.1829352202373,
      27.010276780271205,
      55.62971405601165,
      48.50119423508582,
      29.137928293861613,
      31.787215670828175,
      59.22685907016158,
      25.08983753505382,
      46.36031009134159,
      37.39928463862453,
      36.19445770166698,
      39.02707565980573,
      51.166636500912176
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        27.010276771079038,
        40.66841295710701,
        31.803892705805087,
        36.75317317117742,
        30.193253232070305,
        34.05704846525104,
        37.44679838476213,
        32.36503560542661,
        37.44679838476213,
        33.289857488363594,
        23.268952573253912,
        29.02389541396164,
        29.404908308329375,
        37.44679838476214,
        37.44679838476213,
        37.44679838476214,
        37.44679838476213,
        34.16741428902741,
        34.712740778566754,
        37.44679838476213,
        38.41318913759901,
        34.25075741728811,
        41.95112074665895,
        43.53067765849744,
        36.433802214634994,
        40.63520162440267,
        33.982231432311465,
        21.0547022925223,
        35.00209922036863,
        41.48698930822759,
        37.44679838476213,
        26.76489693153883,
        52.264286348667014,
        39.69804495624208,
        37.44679838476213,
        39.394916718480644,
        26.07881359026817,
        37.705138551846574,
        44.95170557733215,
        36.13545824269147,
        40.88572836442802,
        33.160126585727255,
        45.38926824564433
      ],
      "Cocaine": [
        42.52510193202208,
        38.69421029912664,
        45.53759306767688,
        40.21702724853255,
        45.99689075303944,
        32.47288384310322,
        58.00534332106801,
        47.24529877406812,
        36.048599789262155,
        49.56094260234515,
        55.27338209566935,
        46.09202982194721,
        22.58376209379558,
        29.727894381174373,
        53.91034958116998,
        29.188262361112088,
        43.20562228404832,
        45.874156868943615,
        36.480096585171005,
        26.661664866514155,
        50.83892038671284,
        32.75396444724369,
        37.327573961952346,
        35.5768317423278,
        42.82558742044819,
        43.14885259860232,
        44.51845862823713,
        17.452695848735438,
        35.80824376187459,
        39.995339131283885,
        44.06177512105825,
        53.19378076665967,
        38.37399645907882,
        36.26267755115349,
        27.197115874953205,
        51.1829352202373,
        27.010276780271205,
        55.62971405601165,
        48.50119423508582,
        29.137928293861613,
        31.787215670828175,
        59.22685907016158,
        25.08983753505382,
        46.36031009134159,
        37.39928463862453,
        36.19445770166698,
        39.02707565980573,
        51.166636500912176
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha_thr: r = 0.849\n- gamma_pen: r = 0.661\n- delta_bon: r = 0.402",
  "previous_models": [
    "Specification: threshold = alpha_thr * (token_self / (token_self + token_opp)) * combined_earning\n\nU = -gamma_pen * (max(0, threshold - split_self))**gamma_pen * (split_self < threshold) + delta_bon * log(1 + delta_bon * (split_self - threshold)) * (combined_earning / 50) * (split_self >= threshold)\nSummary: A three-parameter, region-exclusive utility model: threshold (proportional to token share), an exponentiated penalty for unfair offers, and a context-amplified logarithmic bonus for generous splits; each parameter is uniquely recoverable by its distinct effect on boundary, shape, or scaling in real trial data.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 38.29955883639154\nOverall Accuracy: 0.7350\nGroup Accuracies:\n- Control: 0.7629\n- Cocaine: 0.7101\n\nParameter Recovery:\n- alpha_thr: r = 0.849\n- gamma_pen: r = 0.661\n- delta_bon: r = 0.402"
  ]
}