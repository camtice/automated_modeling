{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let's think through this step by step.\n\n**Key Psychological Mechanisms**\nParticipants act as responders in a sequential bargaining (ultimatum/proposer-responder) setting. Their key behavioral dynamics likely include:\n- **Self-interest:** Responders prefer offers where their own share is larger (or, at minimum, nonzero).\n- **Fairness/Social Comparison:** Responders may reject offers that are considered \"unfair\" relative to either (a) equal split, or (b) relative to contributions (token_self vs token_opp).\n- **Inequity Aversion:** Classic models (e.g., Fehr & Schmidt) address aversion to disadvantageous (others get more) and possibly advantageous (one gets more) inequality.\n- **Contribution Consideration:** Responder's and opponent's tokens signal their respective contributions and possibly their entitlements.\n- **Noise/Stochasticity:** Not all choices are deterministic; some noise or idiosyncratic variability exists in individual choices.\n\n**How These Mechanisms Interact**\n- Responders may integrate: their own payoff, the fairness of the offer with respect to possible splits (especially in light of contributions), and possibly penalize the proposer if a perceived injustice is committed.\n- The effect of self-interest and fairness can be of similar or different scale for each person.\n\n**Mathematical Form**\nAn appropriate model (with low covariance among parameters and few in number) is a linear utility function with:\n- A self-interest term (how much money the participant gets in a split)\n- A fairness/inequity aversion term: the absolute or signed difference between what the responder gets and (a) what the proposer gets, or (b) what would be \"fair\" given the contribution\n- Possibly a \"baseline\" or \"bias\" term to account for general tendency to accept/reject\n\nCovariance consideration: Including both self-interest and fairness terms is usually sufficient and interpretable, and, especially if we structure the fairness term to account for proportional contributions, this reduces collinearity between self-interest and inequity.\n\nLet's formalize:\n\n1. **Utility of accepting, U_accept:**\n   - Linear combination of:\n     - Own share (split_self)\n     - Disadvantageous Inequity: max(split_opp - split_self, 0) AND/OR deviation from proportional share (i.e., what would be \"fair\" given relative contribution)\n     - (Optionally) Advantageous Inequity: max(split_self - split_opp, 0)\n     - (Optionally) a bias/intercept\n\n2. **Probability of acceptance:**\n   - Use logistic function: p_accept = sigmoid(utility)\n   - Utility less than zero means p < 0.5, as instructed.\n\n3. **Parameters:**\n   - \u03b1_self: weight on own payoff (split_self)\n   - \u03b2_ineq: weight on inequity (can focus on disadvantageous, as responder typically dislikes getting less)\n   - \u03b3_baseline: baseline bias parameter\n\nTo minimize parameter count and covariance:\n- Since split_self already embodies the self-interest, and fairness can be handled with a single difference term, separate inequity aversion (\u03b2_ineq) and baseline bias (\u03b3_baseline) keeps things interpretable and minimally covaried.\n\n**Contribution-based Fairness**\nGiven variable token contributions, \"fairness\" might mean \"proportional to contribution\":\n\n- Fair share for self = combined_earning * (token_self) / (token_self + token_opp)\n- Deviation from proportional share = split_self - fair_share_self\n\nAlternatively, can use proportion of self's tokens as entitlement, and penalize deviation from this.\n\nLet's use both own payoff and deviation from contribution-proportional share.\n\nSo,\n\nU = \u03b1_self * split_self + \u03b2_fairness * (split_self - fair_share_self) + \u03b3_baseline\n\nBut split_self - fair_share_self is centered, while split_self and split_self - fair_share_self can be highly collinear.\n\nTo reduce covariance:\n- Use normalized offer: (split_self / combined_earning) = actual percentage offered to self (from data: splitperc_self / 100)\n- Use fairness deviation: proportion offered to self - entitlement (i.e., proportional to token_self / total_tokens)\n- So the deviation: (splitperc_self / 100) - (token_self / (token_self + token_opp))\n\nLet\u2019s define:\n\n- offered_perc_self = splitperc_self / 100\n- entitlement = token_self / (token_self + token_opp)\n- fairness_deviation = offered_perc_self - entitlement\n\n**Final Model:**\n\nU = \u03b1_self * offered_perc_self + \u03b2_fairness * fairness_deviation + \u03b3_baseline\n\n--- But both terms use offered_perc_self, so expand:\n\nU = \u03b1_self * offered_perc_self + \u03b2_fairness * (offered_perc_self - entitlement) + \u03b3_baseline  \n  = (\u03b1_self + \u03b2_fairness) * offered_perc_self - \u03b2_fairness * entitlement + \u03b3_baseline\n\nIf desired to reduce collinearity, can just keep \u03b2_fairness (on deviation), or \u03b1_self (on offered_perc_self) and not both. For interpretability and identifiability, let's use just the fairness deviation, which integrates both components and reduces parameter covariance:\n\n**Most parsimonious model:**\n\nU = \u03b2_fairness * (offered_perc_self - entitlement) + \u03b3_baseline\n\nSo only two free parameters.\n\n**Variable mapping:**\n- offered_perc_self = splitperc_self / 100 [directly from data]\n- entitlement = token_self / (token_self + token_opp) [calculated from data]\n\n**Target variable:** accept\n\n---\n\n**Now, format according to the instructions.**\n\n---\n\n<MODEL>\nutility = beta_fairness * (splitperc_self / 100 - token_self / (token_self + token_opp)) + gamma_baseline\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Latent utility of accepting the proposal. Converted to probability of acceptance using the logistic function.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_fairness\": {\n      \"description\": \"Participant's weight on fairness (difference between proportion offered and entitlement). Positive values indicate increased probability of accepting fair (or generous) offers; negative values the opposite.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"The proposed share for the participant, as a percentage of the combined earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant in pretest (contribution of participant).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 12,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent in pretest (contribution of opponent).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 12,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"gamma_baseline\": {\n      \"description\": \"Baseline acceptance bias. Positive values reflect a general tendency to accept, negative values to reject.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA parsimonious inequity aversion model predicting responder acceptance. The model computes the utility of accepting as a weighted sum of the deviation between the proportion offered to the responder and their contribution-based entitlement, plus a baseline bias. The model contains only two learnable parameters (fairness sensitivity and baseline bias), permitting both interpretable individual differences and robust parameter recovery.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_fairness', 'gamma_baseline']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                utility = beta_fairness * (splitperc_self / 100 - token_self / (token_self + token_opp)) + gamma_baseline\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Latent utility of accepting the proposal. Converted to probability of acceptance using the logistic function.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_fairness\": {\n      \"description\": \"Participant's weight on fairness (difference between proportion offered and entitlement). Positive values indicate increased probability of accepting fair (or generous) offers; negative values the opposite.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"The proposed share for the participant, as a percentage of the combined earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant in pretest (contribution of participant).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 12,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent in pretest (contribution of opponent).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 12,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"gamma_baseline\": {\n      \"description\": \"Baseline acceptance bias. Positive values reflect a general tendency to accept, negative values to reject.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_fairness=0, gamma_baseline=0):\n    model_predictions = []\n    for trial in trial_data:\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate entitlement\n        total_tokens = token_self + token_opp\n        if total_tokens == 0:\n            entitlement = 0.5  # Handle case where both are zero to avoid division by zero\n        else:\n            entitlement = token_self / total_tokens\n\n        # Calculate utility\n        utility = beta_fairness * (splitperc_self / 100 - entitlement) + gamma_baseline\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 2, \"token_self\": 6, \"combined_earning\": 10, \"split_opp\": 7.0, \"split_self\": 3.0, \"splitperc_opp\": 70, \"splitperc_self\": 30, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 0.3, \"proposed_amount\": 3.0}, {\"ID\": 2, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 6, \"token_self\": 6, \"combined_earning\": 14, \"split_opp\": 4.0, \"split_self\": 10.0, \"splitperc_opp\": 29, \"splitperc_self\": 71, \"accept\": 1.0, \"accepted_amount\": 10.0, \"accepted_perc\": 0.714, \"proposed_perc\": 0.714, \"proposed_amount\": 10.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744725579.412106
    }
  ],
  "learnable_parameters": {
    "beta_fairness": {
      "description": "Participant's weight on fairness (difference between proportion offered and entitlement). Positive values indicate increased probability of accepting fair (or generous) offers; negative values the opposite.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma_baseline": {
      "description": "Baseline acceptance bias. Positive values reflect a general tendency to accept, negative values to reject.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "utility = beta_fairness * (splitperc_self / 100 - token_self / (token_self + token_opp)) + gamma_baseline",
  "variable_descriptions": {
    "utility": {
      "description": "Latent utility of accepting the proposal. Converted to probability of acceptance using the logistic function.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_fairness": {
      "description": "Participant's weight on fairness (difference between proportion offered and entitlement). Positive values indicate increased probability of accepting fair (or generous) offers; negative values the opposite.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "splitperc_self": {
      "description": "The proposed share for the participant, as a percentage of the combined earning.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant in pretest (contribution of participant).",
      "range": {
        "min": 0,
        "max": 12,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent in pretest (contribution of opponent).",
      "range": {
        "min": 0,
        "max": 12,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "gamma_baseline": {
      "description": "Baseline acceptance bias. Positive values reflect a general tendency to accept, negative values to reject.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A parsimonious inequity aversion model predicting responder acceptance. The model computes the utility of accepting as a weighted sum of the deviation between the proportion offered to the responder and their contribution-based entitlement, plus a baseline bias. The model contains only two learnable parameters (fairness sensitivity and baseline bias), permitting both interpretable individual differences and robust parameter recovery.",
  "target_variable": "accept",
  "full_reasoning": "Let's think through this step by step.\n\n**Key Psychological Mechanisms**\nParticipants act as responders in a sequential bargaining (ultimatum/proposer-responder) setting. Their key behavioral dynamics likely include:\n- **Self-interest:** Responders prefer offers where their own share is larger (or, at minimum, nonzero).\n- **Fairness/Social Comparison:** Responders may reject offers that are considered \"unfair\" relative to either (a) equal split, or (b) relative to contributions (token_self vs token_opp).\n- **Inequity Aversion:** Classic models (e.g., Fehr & Schmidt) address aversion to disadvantageous (others get more) and possibly advantageous (one gets more) inequality.\n- **Contribution Consideration:** Responder's and opponent's tokens signal their respective contributions and possibly their entitlements.\n- **Noise/Stochasticity:** Not all choices are deterministic; some noise or idiosyncratic variability exists in individual choices.\n\n**How These Mechanisms Interact**\n- Responders may integrate: their own payoff, the fairness of the offer with respect to possible splits (especially in light of contributions), and possibly penalize the proposer if a perceived injustice is committed.\n- The effect of self-interest and fairness can be of similar or different scale for each person.\n\n**Mathematical Form**\nAn appropriate model (with low covariance among parameters and few in number) is a linear utility function with:\n- A self-interest term (how much money the participant gets in a split)\n- A fairness/inequity aversion term: the absolute or signed difference between what the responder gets and (a) what the proposer gets, or (b) what would be \"fair\" given the contribution\n- Possibly a \"baseline\" or \"bias\" term to account for general tendency to accept/reject\n\nCovariance consideration: Including both self-interest and fairness terms is usually sufficient and interpretable, and, especially if we structure the fairness term to account for proportional contributions, this reduces collinearity between self-interest and inequity.\n\nLet's formalize:\n\n1. **Utility of accepting, U_accept:**\n   - Linear combination of:\n     - Own share (split_self)\n     - Disadvantageous Inequity: max(split_opp - split_self, 0) AND/OR deviation from proportional share (i.e., what would be \"fair\" given relative contribution)\n     - (Optionally) Advantageous Inequity: max(split_self - split_opp, 0)\n     - (Optionally) a bias/intercept\n\n2. **Probability of acceptance:**\n   - Use logistic function: p_accept = sigmoid(utility)\n   - Utility less than zero means p < 0.5, as instructed.\n\n3. **Parameters:**\n   - \u03b1_self: weight on own payoff (split_self)\n   - \u03b2_ineq: weight on inequity (can focus on disadvantageous, as responder typically dislikes getting less)\n   - \u03b3_baseline: baseline bias parameter\n\nTo minimize parameter count and covariance:\n- Since split_self already embodies the self-interest, and fairness can be handled with a single difference term, separate inequity aversion (\u03b2_ineq) and baseline bias (\u03b3_baseline) keeps things interpretable and minimally covaried.\n\n**Contribution-based Fairness**\nGiven variable token contributions, \"fairness\" might mean \"proportional to contribution\":\n\n- Fair share for self = combined_earning * (token_self) / (token_self + token_opp)\n- Deviation from proportional share = split_self - fair_share_self\n\nAlternatively, can use proportion of self's tokens as entitlement, and penalize deviation from this.\n\nLet's use both own payoff and deviation from contribution-proportional share.\n\nSo,\n\nU = \u03b1_self * split_self + \u03b2_fairness * (split_self - fair_share_self) + \u03b3_baseline\n\nBut split_self - fair_share_self is centered, while split_self and split_self - fair_share_self can be highly collinear.\n\nTo reduce covariance:\n- Use normalized offer: (split_self / combined_earning) = actual percentage offered to self (from data: splitperc_self / 100)\n- Use fairness deviation: proportion offered to self - entitlement (i.e., proportional to token_self / total_tokens)\n- So the deviation: (splitperc_self / 100) - (token_self / (token_self + token_opp))\n\nLet\u2019s define:\n\n- offered_perc_self = splitperc_self / 100\n- entitlement = token_self / (token_self + token_opp)\n- fairness_deviation = offered_perc_self - entitlement\n\n**Final Model:**\n\nU = \u03b1_self * offered_perc_self + \u03b2_fairness * fairness_deviation + \u03b3_baseline\n\n--- But both terms use offered_perc_self, so expand:\n\nU = \u03b1_self * offered_perc_self + \u03b2_fairness * (offered_perc_self - entitlement) + \u03b3_baseline  \n  = (\u03b1_self + \u03b2_fairness) * offered_perc_self - \u03b2_fairness * entitlement + \u03b3_baseline\n\nIf desired to reduce collinearity, can just keep \u03b2_fairness (on deviation), or \u03b1_self (on offered_perc_self) and not both. For interpretability and identifiability, let's use just the fairness deviation, which integrates both components and reduces parameter covariance:\n\n**Most parsimonious model:**\n\nU = \u03b2_fairness * (offered_perc_self - entitlement) + \u03b3_baseline\n\nSo only two free parameters.\n\n**Variable mapping:**\n- offered_perc_self = splitperc_self / 100 [directly from data]\n- entitlement = token_self / (token_self + token_opp) [calculated from data]\n\n**Target variable:** accept\n\n---\n\n**Now, format according to the instructions.**\n\n---\n\n<MODEL>\nutility = beta_fairness * (splitperc_self / 100 - token_self / (token_self + token_opp)) + gamma_baseline\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Latent utility of accepting the proposal. Converted to probability of acceptance using the logistic function.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_fairness\": {\n      \"description\": \"Participant's weight on fairness (difference between proportion offered and entitlement). Positive values indicate increased probability of accepting fair (or generous) offers; negative values the opposite.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"The proposed share for the participant, as a percentage of the combined earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant in pretest (contribution of participant).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 12,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent in pretest (contribution of opponent).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 12,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"gamma_baseline\": {\n      \"description\": \"Baseline acceptance bias. Positive values reflect a general tendency to accept, negative values to reject.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA parsimonious inequity aversion model predicting responder acceptance. The model computes the utility of accepting as a weighted sum of the deviation between the proportion offered to the responder and their contribution-based entitlement, plus a baseline bias. The model contains only two learnable parameters (fairness sensitivity and baseline bias), permitting both interpretable individual differences and robust parameter recovery.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: utility = beta_fairness * (splitperc_self / 100 - token_self / (token_self + token_opp)) + gamma_baseline\nSummary: A parsimonious inequity aversion model predicting responder acceptance. The model computes the utility of accepting as a weighted sum of the deviation between the proportion offered to the responder and their contribution-based entitlement, plus a baseline bias. The model contains only two learnable parameters (fairness sensitivity and baseline bias), permitting both interpretable individual differences and robust parameter recovery.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_fairness=0, gamma_baseline=0):\n    model_predictions = []\n    for trial in trial_data:\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate entitlement\n        total_tokens = token_self + token_opp\n        if total_tokens == 0:\n            entitlement = 0.5  # Handle case where both are zero to avoid division by zero\n        else:\n            entitlement = token_self / total_tokens\n\n        # Calculate utility\n        utility = beta_fairness * (splitperc_self / 100 - entitlement) + gamma_baseline\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7542735042735043,
  "group_accuracies": {
    "Control": 0.7945736434108527,
    "Cocaine": 0.7181712962962963
  },
  "group_parameter_averages": {
    "Control": {
      "beta_fairness": 5.5405939147120975,
      "gamma_baseline": 3.7896742546293716
    },
    "Cocaine": {
      "beta_fairness": 7.249743170848802,
      "gamma_baseline": 1.4510101342304764
    }
  },
  "fitting_results": [
    {
      "beta_fairness": 10.0,
      "gamma_baseline": -1.2463257882204843,
      "success": true,
      "log_likelihood": -7.293433404639749,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 2.0105962327326226,
      "success": true,
      "log_likelihood": -17.2511872926374,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 2.172393160022786,
      "success": true,
      "log_likelihood": -12.326393065276857,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 1.5220584119514315,
      "success": true,
      "log_likelihood": -16.219532653676136,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 1.686240050342039,
      "success": true,
      "log_likelihood": -11.615213332370477,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 2.836063416263665,
      "success": true,
      "log_likelihood": -15.322888486266878,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": -8.873314291128345,
      "gamma_baseline": 10.0,
      "success": true,
      "log_likelihood": -0.0006919781603861358,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 3.010737804769744,
      "success": true,
      "log_likelihood": -14.399914782356298,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": -8.737209947150022,
      "gamma_baseline": 10.0,
      "success": true,
      "log_likelihood": -0.0006921315347255274,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 1.3553758087313696,
      "success": true,
      "log_likelihood": -13.158497606750373,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 1.6862400393521848,
      "success": true,
      "log_likelihood": -11.781879999002552,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": -0.8506718642991753,
      "success": true,
      "log_likelihood": -8.83444378006976,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 1.522058471709023,
      "success": true,
      "log_likelihood": -13.552865987287898,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": -8.708196204187608,
      "gamma_baseline": 10.0,
      "success": true,
      "log_likelihood": -0.0006921961499513034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": -8.712566325860324,
      "gamma_baseline": 10.0,
      "success": true,
      "log_likelihood": -0.0006921856971754925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": -8.75350960923998,
      "gamma_baseline": 10.0,
      "success": true,
      "log_likelihood": -0.0006921001693691446,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": -8.78321684721204,
      "gamma_baseline": 10.0,
      "success": true,
      "log_likelihood": -0.0006920521195622213,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 4.527374936538081,
      "success": true,
      "log_likelihood": -9.111265864618337,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 4.841304987734015,
      "success": true,
      "log_likelihood": -6.931091589013582,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": -8.59825020925672,
      "gamma_baseline": 10.0,
      "success": true,
      "log_likelihood": -0.0006925434727421659,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 2.3349930694781738,
      "success": true,
      "log_likelihood": -14.739466852622156,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 4.5273749837201755,
      "success": true,
      "log_likelihood": -9.61126586459151,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 7.557865356034923,
      "gamma_baseline": 0.7895480946839568,
      "success": true,
      "log_likelihood": -19.481846750730824,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 9.473172142061046,
      "gamma_baseline": 2.0619784505185486,
      "success": true,
      "log_likelihood": -18.98132253335652,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 2.0105961648237316,
      "success": true,
      "log_likelihood": -14.084520626745666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 2.4992116293922733,
      "success": true,
      "log_likelihood": -14.822534402346628,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 2.334993256422393,
      "success": true,
      "log_likelihood": -17.23946685209012,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 0.6411195716346663,
      "success": true,
      "log_likelihood": -10.517323836810347,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 4.841309140870677,
      "success": true,
      "log_likelihood": -8.431091588523584,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 3.785208604054213,
      "success": true,
      "log_likelihood": -14.192035603753476,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": -8.86916051110865,
      "gamma_baseline": 10.0,
      "success": true,
      "log_likelihood": -0.0006919792027108269,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": -1.2463247665859816,
      "success": true,
      "log_likelihood": -7.293433404641054,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 5.167816505968269,
      "gamma_baseline": 0.6526061260958703,
      "success": true,
      "log_likelihood": -22.13238872539454,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 1.3553758187435128,
      "success": true,
      "log_likelihood": -16.49183093926014,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": -8.794433776235072,
      "gamma_baseline": 10.0,
      "success": true,
      "log_likelihood": -0.0006920370343937278,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 8.749738254841038,
      "gamma_baseline": 2.5326526590713,
      "success": true,
      "log_likelihood": -18.589364687072027,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 3.191216447370516,
      "success": true,
      "log_likelihood": -12.79948104331576,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 2.0105961470284384,
      "success": true,
      "log_likelihood": -15.251187293164886,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 9.705860414613621,
      "gamma_baseline": 2.9364464796466216,
      "success": true,
      "log_likelihood": -17.396586207160052,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 7.8914277453856565,
      "gamma_baseline": 4.514639657566463,
      "success": true,
      "log_likelihood": -8.830178870355839,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 8.529651480087038,
      "gamma_baseline": 2.3217786099662474,
      "success": true,
      "log_likelihood": -19.14383962028724,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 0.23190919648136063,
      "success": true,
      "log_likelihood": -11.732125825863275,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": -0.00013584499263590282,
      "gamma_baseline": 3.555317940452513,
      "success": true,
      "log_likelihood": -4.569499625304875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_fairness": 8.362977586794468,
      "gamma_baseline": 1.9788884205598418,
      "success": true,
      "log_likelihood": -19.781564508006426,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 2.665916920746136,
      "success": true,
      "log_likelihood": -16.07354892643929,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 5.925712934736376,
      "gamma_baseline": 2.308635500027606,
      "success": true,
      "log_likelihood": -18.87709343642735,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 9.283452764759591,
      "gamma_baseline": 2.022206679240018,
      "success": true,
      "log_likelihood": -19.137618612335967,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 8.060743530564435,
      "gamma_baseline": 1.0267021615558904,
      "success": true,
      "log_likelihood": -19.4854369633731,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 1.5220584236944694,
      "success": true,
      "log_likelihood": -13.219532654309889,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 2.625167687567996,
      "gamma_baseline": 0.6412153875987845,
      "success": true,
      "log_likelihood": -24.20936304148142,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 5.794738287042179,
      "gamma_baseline": 2.121325681134444,
      "success": true,
      "log_likelihood": -19.723806334410398,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 7.295793341395034,
      "gamma_baseline": -0.7702565453522713,
      "success": true,
      "log_likelihood": -12.30333529777501,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 7.029039362869593,
      "gamma_baseline": 1.550895034448952,
      "success": true,
      "log_likelihood": -21.027704609344507,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 2.7021009186237115,
      "gamma_baseline": 0.8913573736639441,
      "success": true,
      "log_likelihood": -23.743444178627,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 1.3553757794244852,
      "success": true,
      "log_likelihood": -15.991830939325038,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 1.0103937152434248,
      "success": true,
      "log_likelihood": -11.194025049001159,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 0.6411196370321005,
      "success": true,
      "log_likelihood": -12.683990502998842,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": -4.545595655873405,
      "gamma_baseline": 1.3527552805846572,
      "success": true,
      "log_likelihood": -11.74282237132318,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": -0.8506720271014504,
      "success": true,
      "log_likelihood": -9.334443779809128,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 5.596277032895699,
      "gamma_baseline": 2.748057288834269,
      "success": true,
      "log_likelihood": -16.02165902142259,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 6.257613245928212,
      "gamma_baseline": 1.798366672218127,
      "success": true,
      "log_likelihood": -20.978819145174946,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 2.010596149625939,
      "success": true,
      "log_likelihood": -16.417853959123295,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": -1.246325536841639,
      "success": true,
      "log_likelihood": -7.293433404639854,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 6.662624588274903,
      "gamma_baseline": 1.0646565089570101,
      "success": true,
      "log_likelihood": -21.181022890495207,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 0.23190931269506743,
      "success": true,
      "log_likelihood": -12.23212582599856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 2.3349931754340565,
      "success": true,
      "log_likelihood": -17.572800185266132,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 7.4556766839806095,
      "gamma_baseline": 4.374440293419262,
      "success": true,
      "log_likelihood": -8.958043595747776,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 4.527373650412216,
      "success": true,
      "log_likelihood": -10.444599197065788,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 8.531806672341288,
      "gamma_baseline": 2.0155420205263694,
      "success": true,
      "log_likelihood": -19.64078051568636,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 6.639593186900618,
      "gamma_baseline": 4.117731786405208,
      "success": true,
      "log_likelihood": -9.192775803742947,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": -0.850672375530954,
      "success": true,
      "log_likelihood": -6.001110448099749,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 7.044915061498899,
      "gamma_baseline": -0.7957010479412137,
      "success": true,
      "log_likelihood": -12.42283064238107,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 2.172393034716841,
      "success": true,
      "log_likelihood": -17.826393063857633,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 6.6395828604068035,
      "gamma_baseline": 2.8390930980343927,
      "success": true,
      "log_likelihood": -16.571080018429974,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 3.2378106125098256,
      "gamma_baseline": 0.6486161332964069,
      "success": true,
      "log_likelihood": -23.926682984118603,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 9.355898586090245,
      "gamma_baseline": 3.023107964506613,
      "success": true,
      "log_likelihood": -17.117012821654658,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 5.717166417027906,
      "success": true,
      "log_likelihood": -5.452390343695336,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 2.246028317532448,
      "gamma_baseline": -2.436674121743772,
      "success": true,
      "log_likelihood": -7.6118378982327135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 3.245068686629301,
      "gamma_baseline": 1.128300100034651,
      "success": true,
      "log_likelihood": -23.081731400121438,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": -1.2463257662146463,
      "success": true,
      "log_likelihood": -7.293433404639756,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 3.438883424514287,
      "gamma_baseline": 0.8075857513027744,
      "success": true,
      "log_likelihood": -23.755220893603052,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": -1.0295541258563328,
      "gamma_baseline": 2.2023591316874036,
      "success": true,
      "log_likelihood": -10.291735639792662,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 6.259438859726433,
      "gamma_baseline": -1.1618838476630644,
      "success": true,
      "log_likelihood": -11.114984300592731,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 2.0105961772271015,
      "success": true,
      "log_likelihood": -16.584520626403734,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 3.342167618780746,
      "gamma_baseline": 1.149330244233156,
      "success": true,
      "log_likelihood": -23.02683898704418,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": -0.8506720007030524,
      "success": true,
      "log_likelihood": -7.667777113726147,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 7.812484378939245,
      "gamma_baseline": 2.625878387663699,
      "success": true,
      "log_likelihood": -18.258273576150167,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 0.2319095499537946,
      "success": true,
      "log_likelihood": -13.73212582525514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 10.0,
      "gamma_baseline": 5.717166518599027,
      "success": true,
      "log_likelihood": -4.952390343933114,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 9.25246034088107,
      "gamma_baseline": 1.704417200754862,
      "success": true,
      "log_likelihood": -19.156872603693,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_fairness": 3.4647654102882375,
      "gamma_baseline": 1.567237149634021,
      "success": true,
      "log_likelihood": -21.175865781567534,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_fairness": {
        "r": 0.4830755488705036,
        "p": 3.571588512570077e-07
      },
      "gamma_baseline": {
        "r": 0.9133194934559425,
        "p": 5.122417913742837e-40
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 33.31253703443401,
  "bic_Control": 28.289625235093514,
  "bic_Cocaine": 37.81222885467653,
  "bic_results": {
    "average_bic": 33.31253703443401,
    "individual_bics": [
      21.753904686191717,
      41.66941246218702,
      31.819824007465932,
      39.60610318426449,
      30.39746454165317,
      37.81281484944598,
      7.168421833232992,
      35.966867441624814,
      7.168422139981671,
      33.484033090412964,
      30.73079787491732,
      24.835925437051742,
      34.272769851488015,
      7.168422269212122,
      7.1684222483065705,
      7.168422077250958,
      7.1684219811513445,
      25.389569606148896,
      21.029221054939384,
      7.168422963857704,
      36.645971582156534,
      26.389569606095243,
      46.130731378373866,
      45.129682943625255,
      35.336079130403554,
      36.81210668160548,
      41.64597158109246,
      28.201685550532915,
      24.02922105395939,
      35.551109084419174,
      7.168421835317641,
      21.75390468619433,
      51.4318153277013,
      40.1506997554325,
      7.168421950981007,
      44.34576725105627,
      32.76599996354374,
      37.66941246324199,
      41.96021029123232,
      24.8273956176239,
      45.454717117486695,
      30.631289528638767,
      16.306037127521968,
      46.73016689292507,
      39.3141357297908,
      44.92122474976692,
      45.44227510158415,
      46.13791180365842,
      33.606103185532,
      55.58576395987506,
      46.614650545733014,
      31.77370847246224,
      49.22244709560123,
      54.65392623416622,
      39.15069975556229,
      29.555087974914535,
      32.5350188829099,
      30.652682619558583,
      25.835925436530474,
      39.2103559197574,
      49.12467616726211,
      40.00274579515881,
      21.75390468619193,
      49.52908365790263,
      31.631289528909342,
      42.31263824744448,
      25.083125068407774,
      28.056236271043794,
      46.448598908284936,
      25.552589484398112,
      19.169258773111718,
      32.01269916167436,
      42.819824004627485,
      40.30919791377217,
      55.020403845149424,
      41.401063520221534,
      18.07181856430289,
      22.390713673377647,
      53.330500677155094,
      21.75390468619173,
      54.67747966411832,
      27.750509156497543,
      29.39700647809768,
      40.336079129719685,
      53.22071585100058,
      22.502592104364513,
      43.68358502921255,
      34.6312895274225,
      17.071818564778447,
      45.48078308429822,
      49.518769440047286
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        21.753904686191717,
        41.66941246218702,
        31.819824007465932,
        39.60610318426449,
        30.39746454165317,
        37.81281484944598,
        7.168421833232992,
        35.966867441624814,
        7.168422139981671,
        33.484033090412964,
        30.73079787491732,
        24.835925437051742,
        34.272769851488015,
        7.168422269212122,
        7.1684222483065705,
        7.168422077250958,
        7.1684219811513445,
        25.389569606148896,
        21.029221054939384,
        7.168422963857704,
        36.645971582156534,
        26.389569606095243,
        46.130731378373866,
        45.129682943625255,
        35.336079130403554,
        36.81210668160548,
        41.64597158109246,
        28.201685550532915,
        24.02922105395939,
        35.551109084419174,
        7.168421835317641,
        21.75390468619433,
        51.4318153277013,
        40.1506997554325,
        7.168421950981007,
        44.34576725105627,
        32.76599996354374,
        37.66941246324199,
        41.96021029123232,
        24.8273956176239,
        45.454717117486695,
        30.631289528638767,
        16.306037127521968
      ],
      "Cocaine": [
        46.73016689292507,
        39.3141357297908,
        44.92122474976692,
        45.44227510158415,
        46.13791180365842,
        33.606103185532,
        55.58576395987506,
        46.614650545733014,
        31.77370847246224,
        49.22244709560123,
        54.65392623416622,
        39.15069975556229,
        29.555087974914535,
        32.5350188829099,
        30.652682619558583,
        25.835925436530474,
        39.2103559197574,
        49.12467616726211,
        40.00274579515881,
        21.75390468619193,
        49.52908365790263,
        31.631289528909342,
        42.31263824744448,
        25.083125068407774,
        28.056236271043794,
        46.448598908284936,
        25.552589484398112,
        19.169258773111718,
        32.01269916167436,
        42.819824004627485,
        40.30919791377217,
        55.020403845149424,
        41.401063520221534,
        18.07181856430289,
        22.390713673377647,
        53.330500677155094,
        21.75390468619173,
        54.67747966411832,
        27.750509156497543,
        29.39700647809768,
        40.336079129719685,
        53.22071585100058,
        22.502592104364513,
        43.68358502921255,
        34.6312895274225,
        17.071818564778447,
        45.48078308429822,
        49.518769440047286
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_fairness: r = 0.483\n- gamma_baseline: r = 0.913",
  "previous_models": [
    "Specification: utility = beta_fairness * (splitperc_self / 100 - token_self / (token_self + token_opp)) + gamma_baseline\nSummary: A parsimonious inequity aversion model predicting responder acceptance. The model computes the utility of accepting as a weighted sum of the deviation between the proportion offered to the responder and their contribution-based entitlement, plus a baseline bias. The model contains only two learnable parameters (fairness sensitivity and baseline bias), permitting both interpretable individual differences and robust parameter recovery.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 33.31253703443401\nOverall Accuracy: 0.7543\nGroup Accuracies:\n- Control: 0.7946\n- Cocaine: 0.7182\n\nParameter Recovery:\n- beta_fairness: r = 0.483\n- gamma_baseline: r = 0.913"
  ]
}