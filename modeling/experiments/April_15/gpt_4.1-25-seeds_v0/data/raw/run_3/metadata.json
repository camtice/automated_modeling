{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "\n\nFor this run, use the following instructions:\n\n---\n\nBefore proposing your computational model, systematically address the following steps in your reasoning:\n\n1. **Identify Psychological Mechanisms:** Consider not only basic self-interest and fairness, but also possibilities such as loss aversion, nonlinear responses to unfairness (e.g., stronger reactions to disadvantage than to advantage), or thresholds for rejection.\n\n2. **Map Interactions and Functional Forms:** Carefully consider how these mechanisms may interact. To improve both model fit and parameter recoverability, think beyond linear additive terms\u2014could nonlinear functions (e.g., piecewise, thresholds, or squared fairness deviations), interaction terms, or alternative representations (e.g., difference vs. ratio) better dissociate influences?\n\n3. **Parameter Selection to Enhance Recovery:** If you include multiple learnable parameters, explain how your model formulation reduces covariance between them (e.g., using orthogonal terms, normalization, or functional differentiation of parameters). You may include up to three learnable parameters if each is justified and expected to be recoverable.\n\n4. **Variable Mapping:** Ensure that every term used in your model is explicitly derivable from the provided dataset, and that all variables in your formula are well-defined and documented.\n\n5. **Innovate Beyond Standard Models:** While parsimony is valued, do not default to the most obvious models. Consider psychological realism and test innovative ideas: e.g., include asymmetric fairness aversion, multiplicative interactions between self-interest and fairness, or stepwise/threshold utilities.\n\n**Formalization and Output Requirements:**\n- Write your complete step-by-step reasoning before providing the model.\n- Ensure your mathematical model is enclosed in <MODEL> tags and contains only the formula.\n- Fully document all variables and parameters (including explicit, finite bounds for all learnable parameters) in JSON between <VARIABLES> tags.\n- Specify the exact target variable you are predicting.\n- Provide a brief, descriptive <SUMMARY> of your model without referencing task names.\n- Use parameter names that are Python-compatible and not reserved words.\n\nRemember: Your goal is to maximize predictive performance, parameter recoverability, and interpretability. Out-of-the-box ideas are encouraged if well-justified.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: \n\nFor this run, use the following instructions:\n\n---\n\nBefore proposing your computational model, systematically address the following steps in your reasoning:\n\n1. **Identify Psychological Mechanisms:** Consider not only basic self-interest and fairness, but also possibilities such as loss aversion, nonlinear responses to unfairness (e.g., stronger reactions to disadvantage than to advantage), or thresholds for rejection.\n\n2. **Map Interactions and Functional Forms:** Carefully consider how these mechanisms may interact. To improve both model fit and parameter recoverability, think beyond linear additive terms\u2014could nonlinear functions (e.g., piecewise, thresholds, or squared fairness deviations), interaction terms, or alternative representations (e.g., difference vs. ratio) better dissociate influences?\n\n3. **Parameter Selection to Enhance Recovery:** If you include multiple learnable parameters, explain how your model formulation reduces covariance between them (e.g., using orthogonal terms, normalization, or functional differentiation of parameters). You may include up to three learnable parameters if each is justified and expected to be recoverable.\n\n4. **Variable Mapping:** Ensure that every term used in your model is explicitly derivable from the provided dataset, and that all variables in your formula are well-defined and documented.\n\n5. **Innovate Beyond Standard Models:** While parsimony is valued, do not default to the most obvious models. Consider psychological realism and test innovative ideas: e.g., include asymmetric fairness aversion, multiplicative interactions between self-interest and fairness, or stepwise/threshold utilities.\n\n**Formalization and Output Requirements:**\n- Write your complete step-by-step reasoning before providing the model.\n- Ensure your mathematical model is enclosed in <MODEL> tags and contains only the formula.\n- Fully document all variables and parameters (including explicit, finite bounds for all learnable parameters) in JSON between <VARIABLES> tags.\n- Specify the exact target variable you are predicting.\n- Provide a brief, descriptive <SUMMARY> of your model without referencing task names.\n- Use parameter names that are Python-compatible and not reserved words.\n\nRemember: Your goal is to maximize predictive performance, parameter recoverability, and interpretability. Out-of-the-box ideas are encouraged if well-justified.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let's work step by step.\n\n---\n\n### 1. Identify Psychological Mechanisms\n\n**A. Self-interest:** Participants care about their share (`split_self`).\n\n**B. Fairness aversion (inequity aversion):** People dislike unfair splits, but sensitivity is often asymmetric: they are more upset when offered less than the fair share (disadvantageous inequality) than when offered more (advantageous inequality).\n\n**C. Social reference:** Here, what\u2019s \u201cfair\u201d is ambiguous because both parties contributed variable tokens. Thus, *proportional fairness* (i.e., did I get more or less than my \u201cdeserved\u201d share based on tokens I contributed?) is psychologically meaningful.\n\n**D. Nonlinear/Threshold Responses:** People may only reject offers when unfairness exceeds a threshold, or show stronger reactions as unfairness gets more extreme (e.g., quadratic or stepwise, not just linear).\n\n**E. Loss aversion:** Rejection can mean forgoing a certain gain, so loss aversion may temper rejection rates unless the unfairness is strong.\n\n---\n\n### 2. Map Interactions and Functional Forms\n\n- **Fair share:** Compute \u201cdeserved share\u201d as proportion: deserved_pct = token_self / (token_self + token_opp)\n- **Offer vs. fair share:** Compute deviation: offer_dev = splitperc_self / 100 \u2013 deserved_pct\n    - *Negative values*: Disadvantageous\n    - *Positive values*: Advantageous\n- **Asymmetry:** Use separate (or differently weighted) parameters for disadvantageous and advantageous unfairness. Option 1: Two different weights. Option 2: A single term but with an *asymmetry* (e.g., multiply disadvantage by (1+alpha)). Option 3: Only penalize negative deviations.\n- **Nonlinearity:** Could be quadratic (stronger effect for large deviations) or use a step/threshold (e.g., only when disadvantage exceeds some threshold).\n- **Self-interest:** Include the absolute value of the offer for the self, perhaps as an additive term.\n- **Interactions:** Explore multiplicative interactions between self-interest and unfairness: e.g., unfairness is less tolerated at lower absolute payoffs.\n\n**Model Options:**\n- Option 1: Classic additive linear (\u03b21*self_amount + \u03b22*fairness_deviation)\n- Option 2: Add asymmetry (\u03b21*self_amount + \u03b22*min(0, fairness_deviation) + \u03b23*max(0, fairness_deviation))\n- Option 3: Add nonlinearity (e.g., quadratic for unfairness term)\n- Option 4: Multiplicative term - e.g. \u03b24*unfairness*self_amount\n\nLet\u2019s select an approach that allows both asymmetry and nonlinearity, but retains recoverability. Here\u2019s my proposal:\n\n---\n\n### 3. Parameter Selection to Enhance Recovery\n\n- Use: \n  - **\u03b2_self:** Sensitivity to own share (additive).\n  - **\u03b2_unfairness:** Sensitivity to *disadvantageous* unfairness (quadratic penalty).\n  - **\u03b2_advantage:** Sensitivity to *advantageous* unfairness (separate, possibly weaker, quadratic penalty).\n- The quadratic term ensures that for recoverability, the self-interest and fairness parameters do not simply act as mirrors.\n- By separating the advantage/disadvantage terms, we minimize covariance.\n- All derived variables are normalized (in percentages), aiding parameter interpretation.\n\n---\n\n### 4. Variable Mapping\n\nAll terms are fully computable from the dataset:\n\n- `splitperc_self`, `token_self`, `token_opp`, etc.\n- For \u201cfair share,\u201d all information is present.\n\n---\n\n### 5. Innovate Beyond Standard Models\n\n- We use both **asymmetric** (two fairness terms) and **quadratic** (nonlinear) penalties for unfairness, which advances over classic linear models.\n- Explicit proportional fairness reference, not just \"equality.\"\n- All terms are normalized (perceptually meaningful).\n\n---\n\n## Variable Definitions\n\nLet:\n- **deserved_pct** = token_self / (token_self + token_opp)\n- **offer_pct** = splitperc_self / 100\n- **fairness_deviation** = offer_pct \u2013 deserved_pct\n- For the quadratic and asymmetric effect:\n    - disadv_dev = min(0, fairness_deviation)\n    - adv_dev = max(0, fairness_deviation)\n\n---\n\n## Formal Model\n\nWe compute utility as:\n\n    U = \u03b2_self * offer_pct \n      + \u03b2_unfairness * (disadv_dev)^2 \n      + \u03b2_advantage * (adv_dev)^2\n\nWith constraints:\n\n- \u03b2_self: [0, 10]    (assume money is desirable)\n- \u03b2_unfairness: [-10, 0] (strong negative weight for disadvantage, i.e. punishments)\n- \u03b2_advantage: [-5, 5]   (could be small positive or negative\u2014some people dislike greed, others don\u2019t)\n- All variables explicit, no unbounded parameters except for U.\n\n---\n\n## Formal Tags\n\n<MODEL>\nU = beta_self * offer_pct + beta_unfairness * (disadv_dev) ** 2 + beta_advantage * (adv_dev) ** 2\n</MODEL>\n\n---\n\n## Variables (JSON)\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_self\": {\n      \"description\": \"Sensitivity to self-gain (how much participant values their own share, per 1-percent point of combined pot).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity to disadvantageous (below-fair) offers, quadratic penalty (more negative = more loss averse).\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_advantage\": {\n      \"description\": \"Sensitivity to advantageous (above-fair) offers, quadratic penalty (can be positive or negative).\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"offer_pct\": {\n      \"description\": \"Proposed share for participant as a proportion of the total pot.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 12,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 12,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"deserved_pct\": {\n      \"description\": \"Deserved share for participant, based on proportional contribution (tokens).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_deviation\": {\n      \"description\": \"Deviation of proposed share from deserved share (offer_pct - deserved_pct).\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"disadv_dev\": {\n      \"description\": \"If fairness_deviation<0, set equal to fairness_deviation; else 0. Captures unfair offers against the participant.\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"adv_dev\": {\n      \"description\": \"If fairness_deviation>0, set equal to fairness_deviation; else 0. Captures offers exceeding participant's fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n---\n\n<target_variable>accept</target_variable>\n\n---\n\n<SUMMARY>\nA utility-based model where acceptance depends on own payoff, nonlinear and asymmetric aversion to advantageous and disadvantageous unfairness relative to proportional entitlement. Utility is computed as a sum of self-interest and separate quadratic penalties for receiving less or more than the deserved share, with three bounded, recoverable parameters.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_self', 'beta_unfairness', 'beta_advantage']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = beta_self * offer_pct + beta_unfairness * (disadv_dev) ** 2 + beta_advantage * (adv_dev) ** 2\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_self\": {\n      \"description\": \"Sensitivity to self-gain (how much participant values their own share, per 1-percent point of combined pot).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity to disadvantageous (below-fair) offers, quadratic penalty (more negative = more loss averse).\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_advantage\": {\n      \"description\": \"Sensitivity to advantageous (above-fair) offers, quadratic penalty (can be positive or negative).\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"offer_pct\": {\n      \"description\": \"Proposed share for participant as a proportion of the total pot.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 12,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 12,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"deserved_pct\": {\n      \"description\": \"Deserved share for participant, based on proportional contribution (tokens).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_deviation\": {\n      \"description\": \"Deviation of proposed share from deserved share (offer_pct - deserved_pct).\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"disadv_dev\": {\n      \"description\": \"If fairness_deviation<0, set equal to fairness_deviation; else 0. Captures unfair offers against the participant.\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"adv_dev\": {\n      \"description\": \"If fairness_deviation>0, set equal to fairness_deviation; else 0. Captures offers exceeding participant's fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_self=1, beta_unfairness=-1, beta_advantage=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        splitperc_self = trial.get(\"splitperc_self\", 0) / 100.0\n\n        deserved_pct = 0.0\n        if token_self + token_opp > 0:\n            deserved_pct = token_self / (token_self + token_opp)\n\n        offer_pct = splitperc_self\n\n        fairness_deviation = offer_pct - deserved_pct\n        disadv_dev = min(0, fairness_deviation)\n        adv_dev = max(0, fairness_deviation)\n\n        U = beta_self * offer_pct + beta_unfairness * (disadv_dev ** 2) + beta_advantage * (adv_dev ** 2)\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"Group1\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 7, \"combined_earning\": 12, \"split_opp\": 5.0, \"split_self\": 7.0, \"splitperc_opp\": 42, \"splitperc_self\": 58, \"accept\": 1.0, \"accepted_amount\": 7.0, \"accepted_perc\": 58.0, \"proposed_perc\": 58.0, \"proposed_amount\": 7.0}, {\"ID\": 1, \"group\": \"Group1\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 4, \"token_self\": 8, \"combined_earning\": 12, \"split_opp\": 5.0, \"split_self\": 7.0, \"splitperc_opp\": 42, \"splitperc_self\": 58, \"accept\": 1.0, \"accepted_amount\": 7.0, \"accepted_perc\": 58.0, \"proposed_perc\": 58.0, \"proposed_amount\": 7.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744725645.461503
    }
  ],
  "learnable_parameters": {
    "beta_self": {
      "description": "Sensitivity to self-gain (how much participant values their own share, per 1-percent point of combined pot).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity to disadvantageous (below-fair) offers, quadratic penalty (more negative = more loss averse).",
      "range": {
        "min": -10,
        "max": 0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_advantage": {
      "description": "Sensitivity to advantageous (above-fair) offers, quadratic penalty (can be positive or negative).",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = beta_self * offer_pct + beta_unfairness * (disadv_dev) ** 2 + beta_advantage * (adv_dev) ** 2",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the proposed offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_self": {
      "description": "Sensitivity to self-gain (how much participant values their own share, per 1-percent point of combined pot).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfairness": {
      "description": "Sensitivity to disadvantageous (below-fair) offers, quadratic penalty (more negative = more loss averse).",
      "range": {
        "min": -10,
        "max": 0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_advantage": {
      "description": "Sensitivity to advantageous (above-fair) offers, quadratic penalty (can be positive or negative).",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "offer_pct": {
      "description": "Proposed share for participant as a proportion of the total pot.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": 12,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": 12,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "deserved_pct": {
      "description": "Deserved share for participant, based on proportional contribution (tokens).",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fairness_deviation": {
      "description": "Deviation of proposed share from deserved share (offer_pct - deserved_pct).",
      "range": {
        "min": -1,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "disadv_dev": {
      "description": "If fairness_deviation<0, set equal to fairness_deviation; else 0. Captures unfair offers against the participant.",
      "range": {
        "min": -1,
        "max": 0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "adv_dev": {
      "description": "If fairness_deviation>0, set equal to fairness_deviation; else 0. Captures offers exceeding participant's fair share.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A utility-based model where acceptance depends on own payoff, nonlinear and asymmetric aversion to advantageous and disadvantageous unfairness relative to proportional entitlement. Utility is computed as a sum of self-interest and separate quadratic penalties for receiving less or more than the deserved share, with three bounded, recoverable parameters.",
  "target_variable": "accept",
  "full_reasoning": "Let's work step by step.\n\n---\n\n### 1. Identify Psychological Mechanisms\n\n**A. Self-interest:** Participants care about their share (`split_self`).\n\n**B. Fairness aversion (inequity aversion):** People dislike unfair splits, but sensitivity is often asymmetric: they are more upset when offered less than the fair share (disadvantageous inequality) than when offered more (advantageous inequality).\n\n**C. Social reference:** Here, what\u2019s \u201cfair\u201d is ambiguous because both parties contributed variable tokens. Thus, *proportional fairness* (i.e., did I get more or less than my \u201cdeserved\u201d share based on tokens I contributed?) is psychologically meaningful.\n\n**D. Nonlinear/Threshold Responses:** People may only reject offers when unfairness exceeds a threshold, or show stronger reactions as unfairness gets more extreme (e.g., quadratic or stepwise, not just linear).\n\n**E. Loss aversion:** Rejection can mean forgoing a certain gain, so loss aversion may temper rejection rates unless the unfairness is strong.\n\n---\n\n### 2. Map Interactions and Functional Forms\n\n- **Fair share:** Compute \u201cdeserved share\u201d as proportion: deserved_pct = token_self / (token_self + token_opp)\n- **Offer vs. fair share:** Compute deviation: offer_dev = splitperc_self / 100 \u2013 deserved_pct\n    - *Negative values*: Disadvantageous\n    - *Positive values*: Advantageous\n- **Asymmetry:** Use separate (or differently weighted) parameters for disadvantageous and advantageous unfairness. Option 1: Two different weights. Option 2: A single term but with an *asymmetry* (e.g., multiply disadvantage by (1+alpha)). Option 3: Only penalize negative deviations.\n- **Nonlinearity:** Could be quadratic (stronger effect for large deviations) or use a step/threshold (e.g., only when disadvantage exceeds some threshold).\n- **Self-interest:** Include the absolute value of the offer for the self, perhaps as an additive term.\n- **Interactions:** Explore multiplicative interactions between self-interest and unfairness: e.g., unfairness is less tolerated at lower absolute payoffs.\n\n**Model Options:**\n- Option 1: Classic additive linear (\u03b21*self_amount + \u03b22*fairness_deviation)\n- Option 2: Add asymmetry (\u03b21*self_amount + \u03b22*min(0, fairness_deviation) + \u03b23*max(0, fairness_deviation))\n- Option 3: Add nonlinearity (e.g., quadratic for unfairness term)\n- Option 4: Multiplicative term - e.g. \u03b24*unfairness*self_amount\n\nLet\u2019s select an approach that allows both asymmetry and nonlinearity, but retains recoverability. Here\u2019s my proposal:\n\n---\n\n### 3. Parameter Selection to Enhance Recovery\n\n- Use: \n  - **\u03b2_self:** Sensitivity to own share (additive).\n  - **\u03b2_unfairness:** Sensitivity to *disadvantageous* unfairness (quadratic penalty).\n  - **\u03b2_advantage:** Sensitivity to *advantageous* unfairness (separate, possibly weaker, quadratic penalty).\n- The quadratic term ensures that for recoverability, the self-interest and fairness parameters do not simply act as mirrors.\n- By separating the advantage/disadvantage terms, we minimize covariance.\n- All derived variables are normalized (in percentages), aiding parameter interpretation.\n\n---\n\n### 4. Variable Mapping\n\nAll terms are fully computable from the dataset:\n\n- `splitperc_self`, `token_self`, `token_opp`, etc.\n- For \u201cfair share,\u201d all information is present.\n\n---\n\n### 5. Innovate Beyond Standard Models\n\n- We use both **asymmetric** (two fairness terms) and **quadratic** (nonlinear) penalties for unfairness, which advances over classic linear models.\n- Explicit proportional fairness reference, not just \"equality.\"\n- All terms are normalized (perceptually meaningful).\n\n---\n\n## Variable Definitions\n\nLet:\n- **deserved_pct** = token_self / (token_self + token_opp)\n- **offer_pct** = splitperc_self / 100\n- **fairness_deviation** = offer_pct \u2013 deserved_pct\n- For the quadratic and asymmetric effect:\n    - disadv_dev = min(0, fairness_deviation)\n    - adv_dev = max(0, fairness_deviation)\n\n---\n\n## Formal Model\n\nWe compute utility as:\n\n    U = \u03b2_self * offer_pct \n      + \u03b2_unfairness * (disadv_dev)^2 \n      + \u03b2_advantage * (adv_dev)^2\n\nWith constraints:\n\n- \u03b2_self: [0, 10]    (assume money is desirable)\n- \u03b2_unfairness: [-10, 0] (strong negative weight for disadvantage, i.e. punishments)\n- \u03b2_advantage: [-5, 5]   (could be small positive or negative\u2014some people dislike greed, others don\u2019t)\n- All variables explicit, no unbounded parameters except for U.\n\n---\n\n## Formal Tags\n\n<MODEL>\nU = beta_self * offer_pct + beta_unfairness * (disadv_dev) ** 2 + beta_advantage * (adv_dev) ** 2\n</MODEL>\n\n---\n\n## Variables (JSON)\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_self\": {\n      \"description\": \"Sensitivity to self-gain (how much participant values their own share, per 1-percent point of combined pot).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfairness\": {\n      \"description\": \"Sensitivity to disadvantageous (below-fair) offers, quadratic penalty (more negative = more loss averse).\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_advantage\": {\n      \"description\": \"Sensitivity to advantageous (above-fair) offers, quadratic penalty (can be positive or negative).\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"offer_pct\": {\n      \"description\": \"Proposed share for participant as a proportion of the total pot.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 12,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 12,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"deserved_pct\": {\n      \"description\": \"Deserved share for participant, based on proportional contribution (tokens).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_deviation\": {\n      \"description\": \"Deviation of proposed share from deserved share (offer_pct - deserved_pct).\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"disadv_dev\": {\n      \"description\": \"If fairness_deviation<0, set equal to fairness_deviation; else 0. Captures unfair offers against the participant.\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"adv_dev\": {\n      \"description\": \"If fairness_deviation>0, set equal to fairness_deviation; else 0. Captures offers exceeding participant's fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n---\n\n<target_variable>accept</target_variable>\n\n---\n\n<SUMMARY>\nA utility-based model where acceptance depends on own payoff, nonlinear and asymmetric aversion to advantageous and disadvantageous unfairness relative to proportional entitlement. Utility is computed as a sum of self-interest and separate quadratic penalties for receiving less or more than the deserved share, with three bounded, recoverable parameters.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = beta_self * offer_pct + beta_unfairness * (disadv_dev) ** 2 + beta_advantage * (adv_dev) ** 2\nSummary: A utility-based model where acceptance depends on own payoff, nonlinear and asymmetric aversion to advantageous and disadvantageous unfairness relative to proportional entitlement. Utility is computed as a sum of self-interest and separate quadratic penalties for receiving less or more than the deserved share, with three bounded, recoverable parameters.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_self=1, beta_unfairness=-1, beta_advantage=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        splitperc_self = trial.get(\"splitperc_self\", 0) / 100.0\n\n        deserved_pct = 0.0\n        if token_self + token_opp > 0:\n            deserved_pct = token_self / (token_self + token_opp)\n\n        offer_pct = splitperc_self\n\n        fairness_deviation = offer_pct - deserved_pct\n        disadv_dev = min(0, fairness_deviation)\n        adv_dev = max(0, fairness_deviation)\n\n        U = beta_self * offer_pct + beta_unfairness * (disadv_dev ** 2) + beta_advantage * (adv_dev ** 2)\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6993284493284493,
  "group_accuracies": {
    "Control": 0.7364341085271318,
    "Cocaine": 0.666087962962963
  },
  "group_parameter_averages": {
    "Control": {
      "beta_self": 5.270493789810555,
      "beta_unfairness": -7.453906317466447,
      "beta_advantage": 4.8621431471419125
    },
    "Cocaine": {
      "beta_self": 3.3701213141107407,
      "beta_unfairness": -7.9018664969871555,
      "beta_advantage": 3.768511153440398
    }
  },
  "fitting_results": [
    {
      "beta_self": 0.0,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -17.238957058542006,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 2.636398714713938,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -19.378733737198747,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 2.9716078571709197,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -16.530784799419173,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 1.6332843800759118,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -18.68081255367543,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 1.6332840760343845,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -17.45859033170698,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 5.221851642455984,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -15.03278992745051,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 10.0,
      "beta_unfairness": 0.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -2.7725001252233814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 5.626527613822414,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -14.504011693015235,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 10.0,
      "beta_unfairness": 0.0,
      "beta_advantage": 4.999999999999999,
      "success": true,
      "log_likelihood": -2.7725001252233814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 1.0977107259003327,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -18.14758495710833,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 2.061630209740774,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -16.859587442848486,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -17.26395705853701,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 1.6332793965202366,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -18.225256998211172,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 10.0,
      "beta_unfairness": 0.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -2.7725001252233805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 10.0,
      "beta_unfairness": 0.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -2.7725001252233814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 10.0,
      "beta_unfairness": 0.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -2.7725001252233814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 10.0,
      "beta_unfairness": 0.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -2.7725001252233814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 10.0,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -6.606375007132994,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 10.0,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -6.681375007090229,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 10.0,
      "beta_unfairness": 0.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -2.7725001252233814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 3.393315817458603,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -17.437743698074243,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 10.0,
      "beta_unfairness": -10.0,
      "beta_advantage": 4.999999999999999,
      "success": true,
      "log_likelihood": -8.614708339863288,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 1.097710074204898,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -19.714251623456683,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 3.250108399244064,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -18.97544702866899,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 2.3131517885132458,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -18.511092604818614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 3.919021631741439,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -16.834273285215506,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 4.077247234220709,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -16.89560345828595,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -17.388957058511973,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 10.0,
      "beta_unfairness": -7.875564687157658,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -9.21687103842398,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 7.356180074548627,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -14.766263991292599,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 10.0,
      "beta_unfairness": 0.0,
      "beta_advantage": 4.999999999999999,
      "success": true,
      "log_likelihood": -2.7725001252233823,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -17.23895705854201,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 1.7543599283109412,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -21.3114381128354,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 1.3341880116131972,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -19.03776163213361,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 10.0,
      "beta_unfairness": 0.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -2.7725001252233823,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 5.420395256380172,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -15.934070430775026,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 6.424389795028293,
      "beta_unfairness": -10.0,
      "beta_advantage": -0.07707571951605323,
      "success": true,
      "log_likelihood": -12.309075775251614,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 2.5058008295977126,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -18.635828669143628,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 5.030219992525899,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -17.8675604212744,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 10.0,
      "beta_unfairness": -2.6424069638995373,
      "beta_advantage": 4.149231046618281,
      "success": true,
      "log_likelihood": -8.12975105219351,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 4.23956951203115,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -19.079797614387473,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -17.811179280641824,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 10.0,
      "beta_unfairness": 0.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -5.772500123219809,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_self": 3.9189700327182333,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -18.150939952427365,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 4.6654935279369125,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -15.897853763980242,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 5.909286493445783,
      "beta_unfairness": -8.323596817209655,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -17.303653028652324,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 3.4659976991474304,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -18.72459729713289,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 1.038870694699851,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -20.842665759676787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 1.156649502794222,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -18.41622638380579,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 1.968530196943355,
      "beta_unfairness": -5.860107282780899,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -23.485557913972244,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 5.241110619476042,
      "beta_unfairness": -8.188492692714142,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -18.474017373583752,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -17.96395705838868,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 3.3213600908911096,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -19.569496508656673,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 3.0310881518141026,
      "beta_unfairness": -6.827778116294529,
      "beta_advantage": 2.7727960680805244,
      "success": true,
      "log_likelihood": -22.162034840460866,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.21814564977746437,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -19.58824504634551,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.3944053609649073,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -17.617294805956334,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -17.802845947317323,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 6.3268289121931405,
      "beta_unfairness": 0.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -14.152786372122872,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -17.33895705852198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 7.527489667888074,
      "beta_unfairness": -5.454783190723429,
      "beta_advantage": 3.061056340275414,
      "success": true,
      "log_likelihood": -13.897118633846572,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 4.081716222748167,
      "beta_unfairness": -9.56699046561891,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -20.34455141041555,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 2.7024095597776463,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -18.959154334774578,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -17.23895705854201,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 1.9378656321273013,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -20.048440650312827,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -17.741734836217052,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 3.9190223482313122,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -17.550939951771404,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 10.0,
      "beta_unfairness": -1.9356448242285922,
      "beta_advantage": 3.880577023895174,
      "success": true,
      "log_likelihood": -7.699223197652505,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 10.0,
      "beta_unfairness": -9.676029098910965,
      "beta_advantage": 4.584061100926476,
      "success": true,
      "log_likelihood": -10.359104209172559,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 3.8413413516093455,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -18.158834210501276,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 8.382167446150559,
      "beta_unfairness": -0.25496829373299684,
      "beta_advantage": 4.027372669055482,
      "success": true,
      "log_likelihood": -10.534318084556848,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "beta_unfairness": -10.0,
      "beta_advantage": 4.999999999999999,
      "success": true,
      "log_likelihood": -16.938957058602732,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -18.050068169478575,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 3.1795309555012854,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -18.166740794918223,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 7.440522662253244,
      "beta_unfairness": -8.622330994206227,
      "beta_advantage": -1.4088403961999527,
      "success": true,
      "log_likelihood": -14.742191119812272,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 1.5393126393674144,
      "beta_unfairness": -5.515391911866575,
      "beta_advantage": -5.0,
      "success": true,
      "log_likelihood": -23.86501807025855,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 6.4187642415889155,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -14.691254579931464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 10.0,
      "beta_unfairness": -1.9422878643894768,
      "beta_advantage": 2.6112582417500527,
      "success": true,
      "log_likelihood": -7.199000373903788,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "beta_unfairness": -10.0,
      "beta_advantage": -5.0,
      "success": true,
      "log_likelihood": -17.838957058397423,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 2.206970768626204,
      "beta_unfairness": -2.1566475788870787,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -23.254568034553657,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -17.238957058542013,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 2.068302731219734,
      "beta_unfairness": -6.122060004819007,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -23.334130198401986,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 8.31432465084933,
      "beta_unfairness": 0.0,
      "beta_advantage": 2.3063014879016195,
      "success": true,
      "log_likelihood": -10.536164333765372,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "beta_unfairness": -10.0,
      "beta_advantage": -5.0,
      "success": true,
      "log_likelihood": -17.3417348362992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 3.179530853648082,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -16.922296350728924,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 2.0849493702900572,
      "beta_unfairness": -2.587492005044016,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -23.46639613700438,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -17.216734836324232,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 5.5176690478455725,
      "beta_unfairness": -9.977392941169626,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -18.02994127458916,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 0.0,
      "beta_unfairness": -10.0,
      "beta_advantage": -5.0,
      "success": true,
      "log_likelihood": -17.727845947325527,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 10.0,
      "beta_unfairness": -2.959628646396033,
      "beta_advantage": 4.05395282945431,
      "success": true,
      "log_likelihood": -6.590084402272678,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 2.7689141426471053,
      "beta_unfairness": -10.0,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -18.20292891515252,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_self": 3.9982818521436423,
      "beta_unfairness": -3.3179691263913242,
      "beta_advantage": 5.0,
      "success": true,
      "log_likelihood": -20.237571155004446,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_self": {
        "r": 0.897327240154865,
        "p": 1.3851606684577326e-36
      },
      "beta_unfairness": {
        "r": 0.5870705092763744,
        "p": 1.366965492813702e-10
      },
      "beta_advantage": {
        "r": -0.10464061270108001,
        "p": 0.3001565064453953
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 41.31450179097248,
  "bic_Control": 36.75262425704074,
  "bic_Cocaine": 45.40118374845299,
  "bic_results": {
    "average_bic": 41.31450179097248,
    "individual_bics": [
      45.22847093245234,
      49.50802428976583,
      43.81212641420667,
      48.11218192271919,
      45.667737478782286,
      40.81613667026935,
      16.295557065815093,
      39.7585802013988,
      16.295557065815093,
      47.045726729584985,
      44.4697317010653,
      45.278470932442346,
      47.20107081179067,
      16.295557065815093,
      16.295557065815093,
      16.295557065815093,
      16.295557065815093,
      23.96330682963432,
      24.11330682954879,
      16.295557065815093,
      45.62604421151681,
      27.979973495094907,
      50.17906006228169,
      48.70145087270632,
      47.772742025005556,
      44.419103385799346,
      44.541763731940236,
      45.52847093239228,
      29.18429889221629,
      40.28308479795353,
      16.295557065815096,
      45.22847093245235,
      53.373433041039135,
      48.826080079635545,
      16.295557065815096,
      42.61869767691839,
      35.368708365871555,
      48.02221415365558,
      46.48567765791714,
      27.010058919755352,
      48.910152044143274,
      46.372915376651974,
      22.295557061807948,
      47.05243672022306,
      42.546264343328815,
      45.35786287267298,
      48.1997514096341,
      52.43588833472191,
      47.58300958297991,
      57.721672643312814,
      47.69859156253584,
      46.678470932145686,
      49.88954983268168,
      55.074626496290065,
      49.92704690805935,
      45.985146427280995,
      46.35624871000297,
      39.05612955961408,
      45.428470932412296,
      38.544794083061475,
      51.43965963619944,
      48.66886548491749,
      45.22847093245235,
      50.84743811599398,
      46.23402648780244,
      45.852436718911136,
      26.149003210673342,
      31.468765233713448,
      47.06822523637088,
      31.819192984482026,
      44.62847093257379,
      46.850693154325484,
      47.08403840520478,
      40.23493905499288,
      58.48059295588543,
      40.13306597523126,
      25.148557563175906,
      46.42847093216318,
      57.25969288447564,
      45.22847093245235,
      57.4188172121723,
      31.822885482899075,
      45.43402648796673,
      44.59514951682618,
      57.68334908937709,
      45.1840264880168,
      46.81043936454665,
      46.20624871001938,
      23.930725619913687,
      47.156414645673365,
      51.22569912537722
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        45.22847093245234,
        49.50802428976583,
        43.81212641420667,
        48.11218192271919,
        45.667737478782286,
        40.81613667026935,
        16.295557065815093,
        39.7585802013988,
        16.295557065815093,
        47.045726729584985,
        44.4697317010653,
        45.278470932442346,
        47.20107081179067,
        16.295557065815093,
        16.295557065815093,
        16.295557065815093,
        16.295557065815093,
        23.96330682963432,
        24.11330682954879,
        16.295557065815093,
        45.62604421151681,
        27.979973495094907,
        50.17906006228169,
        48.70145087270632,
        47.772742025005556,
        44.419103385799346,
        44.541763731940236,
        45.52847093239228,
        29.18429889221629,
        40.28308479795353,
        16.295557065815096,
        45.22847093245235,
        53.373433041039135,
        48.826080079635545,
        16.295557065815096,
        42.61869767691839,
        35.368708365871555,
        48.02221415365558,
        46.48567765791714,
        27.010058919755352,
        48.910152044143274,
        46.372915376651974,
        22.295557061807948
      ],
      "Cocaine": [
        47.05243672022306,
        42.546264343328815,
        45.35786287267298,
        48.1997514096341,
        52.43588833472191,
        47.58300958297991,
        57.721672643312814,
        47.69859156253584,
        46.678470932145686,
        49.88954983268168,
        55.074626496290065,
        49.92704690805935,
        45.985146427280995,
        46.35624871000297,
        39.05612955961408,
        45.428470932412296,
        38.544794083061475,
        51.43965963619944,
        48.66886548491749,
        45.22847093245235,
        50.84743811599398,
        46.23402648780244,
        45.852436718911136,
        26.149003210673342,
        31.468765233713448,
        47.06822523637088,
        31.819192984482026,
        44.62847093257379,
        46.850693154325484,
        47.08403840520478,
        40.23493905499288,
        58.48059295588543,
        40.13306597523126,
        25.148557563175906,
        46.42847093216318,
        57.25969288447564,
        45.22847093245235,
        57.4188172121723,
        31.822885482899075,
        45.43402648796673,
        44.59514951682618,
        57.68334908937709,
        45.1840264880168,
        46.81043936454665,
        46.20624871001938,
        23.930725619913687,
        47.156414645673365,
        51.22569912537722
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_self: r = 0.897\n- beta_unfairness: r = 0.587\n- beta_advantage: r = -0.105",
  "previous_models": [
    "Specification: U = beta_self * offer_pct + beta_unfairness * (disadv_dev) ** 2 + beta_advantage * (adv_dev) ** 2\nSummary: A utility-based model where acceptance depends on own payoff, nonlinear and asymmetric aversion to advantageous and disadvantageous unfairness relative to proportional entitlement. Utility is computed as a sum of self-interest and separate quadratic penalties for receiving less or more than the deserved share, with three bounded, recoverable parameters.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 41.31450179097248\nOverall Accuracy: 0.6993\nGroup Accuracies:\n- Control: 0.7364\n- Cocaine: 0.6661\n\nParameter Recovery:\n- beta_self: r = 0.897\n- beta_unfairness: r = 0.587\n- beta_advantage: r = -0.105"
  ]
}