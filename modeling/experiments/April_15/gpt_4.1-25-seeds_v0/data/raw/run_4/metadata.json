{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "\n\n---\n\nBefore designing your computational model, carefully address the following steps:\n\n1. **Identify Psychological and Behavioral Mechanisms:**\n   - Go beyond basic self-interest and fairness\u2014explicitly consider mechanisms like biased fairness perception, loss aversion, *thresholds* for rejection, nonlinear or discontinuous (stepwise) responses, or diminishing sensitivity to unfairness at extremes.\n   - Consider if fairness deviations are felt more acutely depending on the *context* (e.g., only when stakes are sufficiently high, or proportional to minimum possible share).\n\n2. **Explicitly Distinguish Parameter Roles for Identifiability:**\n   - For each learnable parameter, ensure it governs a unique, orthogonal psychological function (e.g., distinct nonlinear, stepwise, or multiplicative effects).\n   - Avoid using multiple parameters to capture similar types of fairness aversion unless you can guarantee non-overlapping effects (e.g., use max/min, threshold indicators, or non-monotonic functions).\n   - Briefly justify how your model structure reduces parameter redundancy and enhances recoverability in simulation.\n\n3. **Innovate in Functional Forms and Interactions:**\n   - Move beyond linear additive combinations\u2014consider discontinuous or threshold utilities, interaction terms, or nonlinear (ratio, piecewise, exponential/logit, etc.) transformations.\n   - Explore if an explicit *rejection cutoff* (e.g., a fairness threshold, or minimal acceptable offer) or contextual modulation (e.g., unfairness aversion increases as own share decreases) might better fit responder behavior.\n   - If you introduce nonlinearities, clearly specify and justify them in your reasoning.\n\n4. **Variable Usage and Mapping:**\n   - Ensure every term in your model is directly computable from the provided dataset.\n   - Define each derived variable and parameter clearly, strictly following the output format, and ensure no two variables/parameters are functionally redundant.\n\n5. **Parsimony and Psychological Interpretability:**\n   - Strive for the simplest model capable of capturing key patterns without sacrificing parameter recoverability.\n   - Avoid excessive parameterization; two or three well-identified learnable parameters are preferred.\n\n6. **Formalization and Output Requirements:**\n   - Provide your detailed reasoning before your formal model.\n   - Place your complete mathematical model in <MODEL> tags.\n   - List and fully document all variables and parameters (with explicit, finite bounds for all learnable parameters) in JSON format between <VARIABLES> tags.\n   - Specify the exact predicted target variable between <target_variable> tags.\n   - Offer a concise, descriptive <SUMMARY> of your model (without referencing task names).\n   - Use parameter names that are Python-compatible and not reserved words.\n\n*Remember:* Out-of-the-box approaches are encouraged, especially those that boost predictive fit and parameter identifiability in simulation, even if they are not the most obvious or standard solution. Consider, for example, threshold logic, ratio-based functions, explicit discontinuities, or interaction terms, if they enhance psychological realism and recoverability.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: \n\n---\n\nBefore designing your computational model, carefully address the following steps:\n\n1. **Identify Psychological and Behavioral Mechanisms:**\n   - Go beyond basic self-interest and fairness\u2014explicitly consider mechanisms like biased fairness perception, loss aversion, *thresholds* for rejection, nonlinear or discontinuous (stepwise) responses, or diminishing sensitivity to unfairness at extremes.\n   - Consider if fairness deviations are felt more acutely depending on the *context* (e.g., only when stakes are sufficiently high, or proportional to minimum possible share).\n\n2. **Explicitly Distinguish Parameter Roles for Identifiability:**\n   - For each learnable parameter, ensure it governs a unique, orthogonal psychological function (e.g., distinct nonlinear, stepwise, or multiplicative effects).\n   - Avoid using multiple parameters to capture similar types of fairness aversion unless you can guarantee non-overlapping effects (e.g., use max/min, threshold indicators, or non-monotonic functions).\n   - Briefly justify how your model structure reduces parameter redundancy and enhances recoverability in simulation.\n\n3. **Innovate in Functional Forms and Interactions:**\n   - Move beyond linear additive combinations\u2014consider discontinuous or threshold utilities, interaction terms, or nonlinear (ratio, piecewise, exponential/logit, etc.) transformations.\n   - Explore if an explicit *rejection cutoff* (e.g., a fairness threshold, or minimal acceptable offer) or contextual modulation (e.g., unfairness aversion increases as own share decreases) might better fit responder behavior.\n   - If you introduce nonlinearities, clearly specify and justify them in your reasoning.\n\n4. **Variable Usage and Mapping:**\n   - Ensure every term in your model is directly computable from the provided dataset.\n   - Define each derived variable and parameter clearly, strictly following the output format, and ensure no two variables/parameters are functionally redundant.\n\n5. **Parsimony and Psychological Interpretability:**\n   - Strive for the simplest model capable of capturing key patterns without sacrificing parameter recoverability.\n   - Avoid excessive parameterization; two or three well-identified learnable parameters are preferred.\n\n6. **Formalization and Output Requirements:**\n   - Provide your detailed reasoning before your formal model.\n   - Place your complete mathematical model in <MODEL> tags.\n   - List and fully document all variables and parameters (with explicit, finite bounds for all learnable parameters) in JSON format between <VARIABLES> tags.\n   - Specify the exact predicted target variable between <target_variable> tags.\n   - Offer a concise, descriptive <SUMMARY> of your model (without referencing task names).\n   - Use parameter names that are Python-compatible and not reserved words.\n\n*Remember:* Out-of-the-box approaches are encouraged, especially those that boost predictive fit and parameter identifiability in simulation, even if they are not the most obvious or standard solution. Consider, for example, threshold logic, ratio-based functions, explicit discontinuities, or interaction terms, if they enhance psychological realism and recoverability.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Absolutely! Let's work through the modeling challenge step by step before formalizing a model.\n\n## 1. Key Psychological and Behavioral Mechanisms\n\n- **Fairness Sensitivity:** Participants likely compare their own proposed share (`split_self`) to some fairness reference (possibly 50% of `combined_earning`, or proportional to their contribution via `token_self / (token_self + token_opp)`).\n- **Nonlinear Cutoff:** Responder choices may exhibit a threshold: offers below a certain fairness level are predominantly rejected. This suggests a **stepwise (threshold) utility** function. \n- **Context Sensitivity:** The \u201creference fairness\u201d could itself be modulated by the relative contribution, i.e., responders may feel entitled to a share proportional to their own `token_self` relative to total tokens, not merely 50%.\n- **Diminishing Sensitivity:** Extreme unfair offers might not decrease utility further than a certain point\u2014implying a \u201csaturation\u201d at the unfair end.\n- **Loss Aversion / Aversion to \u201cBeing Treated Worse\u201d:** Rejection probability may sharply increase once offer drops even slightly below a psychological threshold.\n- **Distinct, Non-redundant Parameters:** We want one parameter to govern subjective fairness threshold, another to control how sharply probability drops around this threshold (i.e., \u2018sensitivity\u2019), and possibly a parameter for overall acceptance rate bias.\n\n## 2. Parameter Identifiability\n\n- **Fairness Threshold Parameter:** (`fairness_threshold`) \u2014 shifts the reference point for what is \u201cminimally acceptable\u201d, tied to contribution.\n- **Sensitivity (Slope) Parameter:** (`sensitivity`) \u2014 governs how sharply rejections go from rare to frequent at threshold; analogous to an inverse temperature.\n- **Acceptance Bias (Optional):** (`accept_bias`) \u2014 captures idiosyncratic bias to accept or reject offers above threshold, uncorrelated with threshold or slope.\n\nThese three are well-identified: threshold anchors the fairness \u201cline,\u201d sensitivity governs transition steepness, and bias allows general leniency/strictness, with their influences being functionally non-redundant.\n\n## 3. Functional Form and Interactions\n\n- **Nonlinear Step:** Utility is modeled as a function of the deviation of `split_self` from a threshold, with a steep, possibly sigmoidal/logistic or rectified linear (step) form.\n- **Threshold Based On Contribution Ratio:** Set the \"threshold\" proportional to `token_self / (token_self + token_opp) * combined_earning` (i.e., tokens found / total tokens * total money).\n- **Rectified/Clipped Utility:** To introduce \u201csaturation\u201d below/above the threshold.\n- **Logistic Response:** Probability of acceptance via sigmoid.\n\n## 4. Variables Used from Dataset\n\n- **split_self:** Offer amount to responder (participant).\n- **token_self:** Participant\u2019s contribution, and\n- **token_opp:** Opponent\u2019s contribution; used to compute relative entitlement.\n- **combined_earning:** Total money to divide.\n\n## 5. Parsimony and Interpretability\n\n- **Three total learnable parameters:** All have direct psychological interpretation, are orthogonal, and have clearly defined, broad numeric bounds.\n\n---\n\n# Final Model Structure\n\n## Variables Definition\n\nLet:\n- `contribution_ratio = token_self / (token_self + token_opp)`\n- `entitlement_threshold = fairness_threshold * contribution_ratio * combined_earning`\n  \nDefine utility as:\n```\nU = sensitivity * (split_self - entitlement_threshold) + accept_bias\n```\n- If `split_self` < threshold, utility rapidly drops.\n- Probability of acceptance: `P(accept=1) = sigmoid(U)`\n\n---\n\n## Model Specification\n\n<MODEL>\ncontribution_ratio = token_self / (token_self + token_opp)\nentitlement_threshold = fairness_threshold * contribution_ratio * combined_earning\nU = sensitivity * (split_self - entitlement_threshold) + accept_bias\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant in this trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent in this trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share (in \u00a3) allocated to the participant (responder) in this trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 60,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money (in \u00a3) available to be shared in this trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 60,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"contribution_ratio\": {\n      \"description\": \"Participant's share of total tokens, indicating their contribution proportion\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_threshold\": {\n      \"description\": \"Threshold (scaling entitlement): the minimum proportion (relative to exact proportional entitlement) of the total for which the responder will reliably accept offers. 1 indicates literal proportional entitlement; <1 means responder is lenient; >1 means more demanding than mere proportionality.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"entitlement_threshold\": {\n      \"description\": \"Threshold offer (in \u00a3) below which offers are likely rejected, computed as fairness_threshold times contribution_ratio times combined_earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 90,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Sharpness parameter (inverse temperature), governing how rapidly acceptance transitions from unlikely to likely as split_self crosses the threshold.\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"accept_bias\": {\n      \"description\": \"Global bias parameter for baseline tendency to accept or reject, regardless of fairness (in utility units).\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility for accepting the current offer; passed through a sigmoid to yield acceptance probability.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA thresholded utility model where the minimum acceptable offer is proportional to the responder's contribution, scaled by a learnable fairness threshold parameter. Utility increases linearly as the offer to the responder exceeds this threshold, with acceptance probability governed by a nonlinear sigmoid and modulated by sensitivity (sharpness) and global accept/reject bias. The model captures stepwise fairness aversion, personalized entitlement, and individual differences in baseline choosiness.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['fairness_threshold', 'sensitivity', 'accept_bias']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                contribution_ratio = token_self / (token_self + token_opp)\nentitlement_threshold = fairness_threshold * contribution_ratio * combined_earning\nU = sensitivity * (split_self - entitlement_threshold) + accept_bias\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant in this trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent in this trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share (in \\u00a3) allocated to the participant (responder) in this trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 60,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money (in \\u00a3) available to be shared in this trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 60,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"contribution_ratio\": {\n      \"description\": \"Participant's share of total tokens, indicating their contribution proportion\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_threshold\": {\n      \"description\": \"Threshold (scaling entitlement): the minimum proportion (relative to exact proportional entitlement) of the total for which the responder will reliably accept offers. 1 indicates literal proportional entitlement; <1 means responder is lenient; >1 means more demanding than mere proportionality.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"entitlement_threshold\": {\n      \"description\": \"Threshold offer (in \\u00a3) below which offers are likely rejected, computed as fairness_threshold times contribution_ratio times combined_earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 90,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Sharpness parameter (inverse temperature), governing how rapidly acceptance transitions from unlikely to likely as split_self crosses the threshold.\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"accept_bias\": {\n      \"description\": \"Global bias parameter for baseline tendency to accept or reject, regardless of fairness (in utility units).\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility for accepting the current offer; passed through a sigmoid to yield acceptance probability.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, fairness_threshold=1, sensitivity=1, accept_bias=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        # Calculate contribution ratio\n        contribution_ratio = token_self / (token_self + token_opp) if (token_self + token_opp) > 0 else 0\n\n        # Calculate entitlement threshold\n        entitlement_threshold = fairness_threshold * contribution_ratio * combined_earning\n\n        # Calculate utility\n        U = sensitivity * (split_self - entitlement_threshold) + accept_bias\n\n        #Sigmoid Function\n        probability_of_acceptance = 1 / (1 + math.exp(-U))\n        \n        model_predictions.append(probability_of_acceptance)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744725711.508276
    }
  ],
  "learnable_parameters": {
    "fairness_threshold": {
      "description": "Threshold (scaling entitlement): the minimum proportion (relative to exact proportional entitlement) of the total for which the responder will reliably accept offers. 1 indicates literal proportional entitlement; <1 means responder is lenient; >1 means more demanding than mere proportionality.",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "sensitivity": {
      "description": "Sharpness parameter (inverse temperature), governing how rapidly acceptance transitions from unlikely to likely as split_self crosses the threshold.",
      "range": {
        "min": 0.1,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "accept_bias": {
      "description": "Global bias parameter for baseline tendency to accept or reject, regardless of fairness (in utility units).",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "contribution_ratio = token_self / (token_self + token_opp)\nentitlement_threshold = fairness_threshold * contribution_ratio * combined_earning\nU = sensitivity * (split_self - entitlement_threshold) + accept_bias",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant in this trial",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent in this trial",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Proposed share (in \u00a3) allocated to the participant (responder) in this trial",
      "range": {
        "min": 0,
        "max": 60,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total money (in \u00a3) available to be shared in this trial",
      "range": {
        "min": 0,
        "max": 60,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "contribution_ratio": {
      "description": "Participant's share of total tokens, indicating their contribution proportion",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fairness_threshold": {
      "description": "Threshold (scaling entitlement): the minimum proportion (relative to exact proportional entitlement) of the total for which the responder will reliably accept offers. 1 indicates literal proportional entitlement; <1 means responder is lenient; >1 means more demanding than mere proportionality.",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "entitlement_threshold": {
      "description": "Threshold offer (in \u00a3) below which offers are likely rejected, computed as fairness_threshold times contribution_ratio times combined_earning.",
      "range": {
        "min": 0,
        "max": 90,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "sensitivity": {
      "description": "Sharpness parameter (inverse temperature), governing how rapidly acceptance transitions from unlikely to likely as split_self crosses the threshold.",
      "range": {
        "min": 0.1,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "accept_bias": {
      "description": "Global bias parameter for baseline tendency to accept or reject, regardless of fairness (in utility units).",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Utility for accepting the current offer; passed through a sigmoid to yield acceptance probability.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A thresholded utility model where the minimum acceptable offer is proportional to the responder's contribution, scaled by a learnable fairness threshold parameter. Utility increases linearly as the offer to the responder exceeds this threshold, with acceptance probability governed by a nonlinear sigmoid and modulated by sensitivity (sharpness) and global accept/reject bias. The model captures stepwise fairness aversion, personalized entitlement, and individual differences in baseline choosiness.",
  "target_variable": "accept",
  "full_reasoning": "Absolutely! Let's work through the modeling challenge step by step before formalizing a model.\n\n## 1. Key Psychological and Behavioral Mechanisms\n\n- **Fairness Sensitivity:** Participants likely compare their own proposed share (`split_self`) to some fairness reference (possibly 50% of `combined_earning`, or proportional to their contribution via `token_self / (token_self + token_opp)`).\n- **Nonlinear Cutoff:** Responder choices may exhibit a threshold: offers below a certain fairness level are predominantly rejected. This suggests a **stepwise (threshold) utility** function. \n- **Context Sensitivity:** The \u201creference fairness\u201d could itself be modulated by the relative contribution, i.e., responders may feel entitled to a share proportional to their own `token_self` relative to total tokens, not merely 50%.\n- **Diminishing Sensitivity:** Extreme unfair offers might not decrease utility further than a certain point\u2014implying a \u201csaturation\u201d at the unfair end.\n- **Loss Aversion / Aversion to \u201cBeing Treated Worse\u201d:** Rejection probability may sharply increase once offer drops even slightly below a psychological threshold.\n- **Distinct, Non-redundant Parameters:** We want one parameter to govern subjective fairness threshold, another to control how sharply probability drops around this threshold (i.e., \u2018sensitivity\u2019), and possibly a parameter for overall acceptance rate bias.\n\n## 2. Parameter Identifiability\n\n- **Fairness Threshold Parameter:** (`fairness_threshold`) \u2014 shifts the reference point for what is \u201cminimally acceptable\u201d, tied to contribution.\n- **Sensitivity (Slope) Parameter:** (`sensitivity`) \u2014 governs how sharply rejections go from rare to frequent at threshold; analogous to an inverse temperature.\n- **Acceptance Bias (Optional):** (`accept_bias`) \u2014 captures idiosyncratic bias to accept or reject offers above threshold, uncorrelated with threshold or slope.\n\nThese three are well-identified: threshold anchors the fairness \u201cline,\u201d sensitivity governs transition steepness, and bias allows general leniency/strictness, with their influences being functionally non-redundant.\n\n## 3. Functional Form and Interactions\n\n- **Nonlinear Step:** Utility is modeled as a function of the deviation of `split_self` from a threshold, with a steep, possibly sigmoidal/logistic or rectified linear (step) form.\n- **Threshold Based On Contribution Ratio:** Set the \"threshold\" proportional to `token_self / (token_self + token_opp) * combined_earning` (i.e., tokens found / total tokens * total money).\n- **Rectified/Clipped Utility:** To introduce \u201csaturation\u201d below/above the threshold.\n- **Logistic Response:** Probability of acceptance via sigmoid.\n\n## 4. Variables Used from Dataset\n\n- **split_self:** Offer amount to responder (participant).\n- **token_self:** Participant\u2019s contribution, and\n- **token_opp:** Opponent\u2019s contribution; used to compute relative entitlement.\n- **combined_earning:** Total money to divide.\n\n## 5. Parsimony and Interpretability\n\n- **Three total learnable parameters:** All have direct psychological interpretation, are orthogonal, and have clearly defined, broad numeric bounds.\n\n---\n\n# Final Model Structure\n\n## Variables Definition\n\nLet:\n- `contribution_ratio = token_self / (token_self + token_opp)`\n- `entitlement_threshold = fairness_threshold * contribution_ratio * combined_earning`\n  \nDefine utility as:\n```\nU = sensitivity * (split_self - entitlement_threshold) + accept_bias\n```\n- If `split_self` < threshold, utility rapidly drops.\n- Probability of acceptance: `P(accept=1) = sigmoid(U)`\n\n---\n\n## Model Specification\n\n<MODEL>\ncontribution_ratio = token_self / (token_self + token_opp)\nentitlement_threshold = fairness_threshold * contribution_ratio * combined_earning\nU = sensitivity * (split_self - entitlement_threshold) + accept_bias\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant in this trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent in this trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share (in \u00a3) allocated to the participant (responder) in this trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 60,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money (in \u00a3) available to be shared in this trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 60,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"contribution_ratio\": {\n      \"description\": \"Participant's share of total tokens, indicating their contribution proportion\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_threshold\": {\n      \"description\": \"Threshold (scaling entitlement): the minimum proportion (relative to exact proportional entitlement) of the total for which the responder will reliably accept offers. 1 indicates literal proportional entitlement; <1 means responder is lenient; >1 means more demanding than mere proportionality.\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"entitlement_threshold\": {\n      \"description\": \"Threshold offer (in \u00a3) below which offers are likely rejected, computed as fairness_threshold times contribution_ratio times combined_earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 90,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Sharpness parameter (inverse temperature), governing how rapidly acceptance transitions from unlikely to likely as split_self crosses the threshold.\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"accept_bias\": {\n      \"description\": \"Global bias parameter for baseline tendency to accept or reject, regardless of fairness (in utility units).\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility for accepting the current offer; passed through a sigmoid to yield acceptance probability.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA thresholded utility model where the minimum acceptable offer is proportional to the responder's contribution, scaled by a learnable fairness threshold parameter. Utility increases linearly as the offer to the responder exceeds this threshold, with acceptance probability governed by a nonlinear sigmoid and modulated by sensitivity (sharpness) and global accept/reject bias. The model captures stepwise fairness aversion, personalized entitlement, and individual differences in baseline choosiness.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: contribution_ratio = token_self / (token_self + token_opp)\nentitlement_threshold = fairness_threshold * contribution_ratio * combined_earning\nU = sensitivity * (split_self - entitlement_threshold) + accept_bias\nSummary: A thresholded utility model where the minimum acceptable offer is proportional to the responder's contribution, scaled by a learnable fairness threshold parameter. Utility increases linearly as the offer to the responder exceeds this threshold, with acceptance probability governed by a nonlinear sigmoid and modulated by sensitivity (sharpness) and global accept/reject bias. The model captures stepwise fairness aversion, personalized entitlement, and individual differences in baseline choosiness.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, fairness_threshold=1, sensitivity=1, accept_bias=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        # Calculate contribution ratio\n        contribution_ratio = token_self / (token_self + token_opp) if (token_self + token_opp) > 0 else 0\n\n        # Calculate entitlement threshold\n        entitlement_threshold = fairness_threshold * contribution_ratio * combined_earning\n\n        # Calculate utility\n        U = sensitivity * (split_self - entitlement_threshold) + accept_bias\n\n        #Sigmoid Function\n        probability_of_acceptance = 1 / (1 + math.exp(-U))\n        \n        model_predictions.append(probability_of_acceptance)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6092796092796092,
  "group_accuracies": {
    "Control": 0.6408268733850129,
    "Cocaine": 0.5810185185185185
  },
  "group_parameter_averages": {
    "Control": {
      "fairness_threshold": 0.6811301488344599,
      "sensitivity": 11.331729759765242,
      "accept_bias": 4.267088337886134
    },
    "Cocaine": {
      "fairness_threshold": 0.7343702662952569,
      "sensitivity": 14.535594061184318,
      "accept_bias": -0.9595215255293083
    }
  },
  "fitting_results": [
    {
      "fairness_threshold": 1.3817318472973916,
      "sensitivity": 20.0,
      "accept_bias": 1.5763781859289712,
      "success": true,
      "log_likelihood": -24.573503515195362,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.8095638318190347,
      "sensitivity": 20.0,
      "accept_bias": 9.450786724973165,
      "success": true,
      "log_likelihood": -20.445582784859955,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.6901619038602621,
      "sensitivity": 20.0,
      "accept_bias": 1.373966195848591,
      "success": true,
      "log_likelihood": -19.703644288027668,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.6202904862806141,
      "sensitivity": 20.0,
      "accept_bias": -4.549607528482744,
      "success": true,
      "log_likelihood": -22.278808334963095,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.7825048711146564,
      "sensitivity": 20.0,
      "accept_bias": 7.802589102684118,
      "success": true,
      "log_likelihood": -20.40426277763077,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5816161821646564,
      "sensitivity": 16.566110788175518,
      "accept_bias": 6.7236421639524515,
      "success": true,
      "log_likelihood": -18.56555823463063,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 0.1768049924146349,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -11.277831480326421,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5153924039437141,
      "sensitivity": 13.925696500428277,
      "accept_bias": -4.084252123283585,
      "success": true,
      "log_likelihood": -18.41109677156405,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 0.27505841882179066,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -11.277827933472764,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.9520285995752475,
      "sensitivity": 13.693711329416516,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -21.256603067205763,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5949127694686801,
      "sensitivity": 20.0,
      "accept_bias": -3.575189649303274,
      "success": true,
      "log_likelihood": -19.13211702320695,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 1.3093663526114552,
      "sensitivity": 20.0,
      "accept_bias": -2.688474587768368,
      "success": true,
      "log_likelihood": -24.57350366240273,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.694599284851789,
      "sensitivity": 20.0,
      "accept_bias": 1.8517859437974855,
      "success": true,
      "log_likelihood": -19.72101044172284,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 0.16129168014588907,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -11.277832819560263,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 0.17662475859741084,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -11.277831494645607,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 0.1280027897931419,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -11.277836431134096,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 0.26958111396741485,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -11.277827909572075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 10.427943183019588,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -14.277936956125806,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5942941930964091,
      "sensitivity": 7.206178182641779,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -13.860929539530428,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 0.12261791658254283,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -11.277837111359535,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.7731653207418454,
      "sensitivity": 14.571883358433736,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -18.966893503823552,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.7755997753288252,
      "sensitivity": 2.9122934850537554,
      "accept_bias": 8.158185038238438,
      "success": true,
      "log_likelihood": -14.886751718667973,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.8626170523942481,
      "sensitivity": 20.0,
      "accept_bias": -10.0,
      "success": true,
      "log_likelihood": -23.434803539898937,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 20.0,
      "accept_bias": -9.59652461260167,
      "success": true,
      "log_likelihood": -20.410262172150475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.8850445879802978,
      "sensitivity": 9.318795482684104,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -19.776806689726968,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 19.807697690908224,
      "accept_bias": -7.903431974044016,
      "success": true,
      "log_likelihood": -19.365542169739903,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.6202450032232024,
      "sensitivity": 20.0,
      "accept_bias": -4.292358295474381,
      "success": true,
      "log_likelihood": -19.28624456907862,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.9011520482015007,
      "sensitivity": 16.50987611177692,
      "accept_bias": 6.000691847675234,
      "success": true,
      "log_likelihood": -21.738926301268066,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.8065243516648426,
      "sensitivity": 2.4744075731959008,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -14.459547091225952,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.6482411301759617,
      "sensitivity": 11.906602463956222,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -17.355306308347153,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 0.1766244102613051,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -11.277831494673316,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.7837013689225951,
      "sensitivity": 6.003234569867942,
      "accept_bias": -10.0,
      "success": true,
      "log_likelihood": -24.34320984994497,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 7.933735258314887,
      "accept_bias": -10.0,
      "success": true,
      "log_likelihood": -23.682986359046392,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 1.0608463290718133,
      "sensitivity": 9.718823149147504,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -22.08356391010541,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 0.176805690731417,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -11.277831480270995,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 20.0,
      "accept_bias": -9.813717956079014,
      "success": true,
      "log_likelihood": -19.400467925348064,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5401124219149757,
      "sensitivity": 19.732257679380446,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -17.161494406135294,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.7641150149562471,
      "sensitivity": 16.601559675631535,
      "accept_bias": 3.3162600163712774,
      "success": true,
      "log_likelihood": -20.49661172807378,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.6985480181824351,
      "sensitivity": 5.507095407659169,
      "accept_bias": 7.298795806480728,
      "success": true,
      "log_likelihood": -19.701334112020444,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 0.5375511139369775,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -14.277627210328923,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.6255179248586412,
      "sensitivity": 20.0,
      "accept_bias": -3.5647257698096197,
      "success": true,
      "log_likelihood": -19.282689092311667,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 1.0167033261804324,
      "sensitivity": 20.0,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -22.72641847342905,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 0.24551489496083018,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -12.277791715124993,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 6.460595698582564,
      "accept_bias": -5.23385704410175,
      "success": true,
      "log_likelihood": -21.190056082414046,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 13.315460802726044,
      "accept_bias": -5.267808761854643,
      "success": true,
      "log_likelihood": -19.388475531480612,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 6.698209659483432,
      "accept_bias": 6.572957221777316,
      "success": true,
      "log_likelihood": -19.395252371701673,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.6289934536450427,
      "sensitivity": 20.0,
      "accept_bias": -8.18192871068233,
      "success": true,
      "log_likelihood": -20.562712303182053,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.7584865776797903,
      "sensitivity": 20.0,
      "accept_bias": -10.0,
      "success": true,
      "log_likelihood": -22.695109680666192,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.952091765654956,
      "sensitivity": 13.688494392541003,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -21.256577459368998,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5723664976311278,
      "sensitivity": 16.734948874298283,
      "accept_bias": -10.0,
      "success": true,
      "log_likelihood": -22.865343367185442,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5037528734452085,
      "sensitivity": 20.0,
      "accept_bias": 9.548313283373114,
      "success": true,
      "log_likelihood": -19.37565918551319,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 1.1440730568449287,
      "sensitivity": 14.847905083379851,
      "accept_bias": -9.482612472164783,
      "success": true,
      "log_likelihood": -24.574331747088497,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5997684836822353,
      "sensitivity": 20.0,
      "accept_bias": -9.285552273118398,
      "success": true,
      "log_likelihood": -20.942099248874758,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.8210262547921369,
      "sensitivity": 19.182848367379822,
      "accept_bias": -3.505308666614943,
      "success": true,
      "log_likelihood": -23.83901387674875,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.9913258237398305,
      "sensitivity": 20.0,
      "accept_bias": 8.554186324971262,
      "success": true,
      "log_likelihood": -22.722612043294248,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.7476831514758846,
      "sensitivity": 20.0,
      "accept_bias": 3.619237167000285,
      "success": true,
      "log_likelihood": -21.413656512140243,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.8915707566677492,
      "sensitivity": 19.032608268996547,
      "accept_bias": -4.538315089835269,
      "success": true,
      "log_likelihood": -23.43390883834277,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 0.1,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -15.277678202638027,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.7835940911616714,
      "sensitivity": 6.0007873390194115,
      "accept_bias": -10.0,
      "success": true,
      "log_likelihood": -24.343128079754155,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 10.428049381566725,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -17.277889551162442,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.6256946474079219,
      "sensitivity": 20.0,
      "accept_bias": -3.487532755330801,
      "success": true,
      "log_likelihood": -20.281312514815497,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.7261223589823981,
      "sensitivity": 19.746671782740634,
      "accept_bias": 6.258529892933735,
      "success": true,
      "log_likelihood": -19.678519604511553,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 1.4328157857839485,
      "sensitivity": 16.84189749362626,
      "accept_bias": 3.8164705128966006,
      "success": true,
      "log_likelihood": -24.573788363993486,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5119638369981835,
      "sensitivity": 14.539753193122905,
      "accept_bias": -5.940808884761828,
      "success": true,
      "log_likelihood": -22.51915459940452,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.8588065529224722,
      "sensitivity": 20.0,
      "accept_bias": -10.0,
      "success": true,
      "log_likelihood": -23.43456040383816,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.6200223284613843,
      "sensitivity": 20.0,
      "accept_bias": -4.306823289593975,
      "success": true,
      "log_likelihood": -19.286242199511896,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5281073898281341,
      "sensitivity": 5.90456074440892,
      "accept_bias": 8.011811839232188,
      "success": true,
      "log_likelihood": -14.099932235238358,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 10.424165796430486,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -15.277781169554203,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 20.0,
      "accept_bias": -9.689744989094947,
      "success": true,
      "log_likelihood": -20.405743026621906,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 0.5287643152141734,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -14.277690121060333,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.8626217119252554,
      "sensitivity": 20.0,
      "accept_bias": -10.0,
      "success": true,
      "log_likelihood": -23.43480462485428,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.7835926669947586,
      "sensitivity": 6.000938370561438,
      "accept_bias": -10.0,
      "success": true,
      "log_likelihood": -24.34312801398134,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.648640631645171,
      "sensitivity": 16.927704551799444,
      "accept_bias": -0.5378427675067686,
      "success": true,
      "log_likelihood": -20.361611363289775,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 16.62660726642091,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -17.17347792569431,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.7824297228357805,
      "sensitivity": 20.0,
      "accept_bias": 7.789084229833849,
      "success": true,
      "log_likelihood": -22.404277698929974,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.7523018059228098,
      "sensitivity": 5.223772558755134,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -18.058791997182013,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5962004631320678,
      "sensitivity": 7.1310521661565,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -13.860017554151117,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 1.5,
      "sensitivity": 20.0,
      "accept_bias": -10.0,
      "success": true,
      "log_likelihood": -24.953321192150327,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5570662427911889,
      "sensitivity": 11.63431511000107,
      "accept_bias": -10.0,
      "success": true,
      "log_likelihood": -21.077543745667082,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.7843860788706842,
      "sensitivity": 5.745950168390141,
      "accept_bias": -9.12740606713088,
      "success": true,
      "log_likelihood": -24.38446193755131,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.9795169945329869,
      "sensitivity": 15.372091789316057,
      "accept_bias": 2.225538249870956,
      "success": true,
      "log_likelihood": -23.44788758427651,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5067217120169666,
      "sensitivity": 20.0,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -16.37174393606688,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 1.5,
      "sensitivity": 20.0,
      "accept_bias": -10.0,
      "success": true,
      "log_likelihood": -24.953321192150327,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 20.0,
      "accept_bias": -9.69112637979263,
      "success": true,
      "log_likelihood": -19.40580565895388,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.8599055665817732,
      "sensitivity": 20.0,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -21.819411440725354,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.8744721503148504,
      "sensitivity": 11.466530183170782,
      "accept_bias": -9.979260222663259,
      "success": true,
      "log_likelihood": -24.002605605311054,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 20.0,
      "accept_bias": -8.037417136414781,
      "success": true,
      "log_likelihood": -19.365122537204094,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 1.5,
      "sensitivity": 9.612896435928988,
      "accept_bias": -10.0,
      "success": true,
      "log_likelihood": -24.953321188179633,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 4.320415453380268,
      "accept_bias": 10.0,
      "success": true,
      "log_likelihood": -12.72804081909465,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5,
      "sensitivity": 13.170519689449481,
      "accept_bias": -10.0,
      "success": true,
      "log_likelihood": -21.387256434336216,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "fairness_threshold": 0.5636513478030328,
      "sensitivity": 20.0,
      "accept_bias": 3.840183563365883,
      "success": true,
      "log_likelihood": -20.59907025328089,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "fairness_threshold": {
        "r": 0.05300945157025539,
        "p": 0.600418751603986
      },
      "sensitivity": {
        "r": 0.047715940814532835,
        "p": 0.6373344048998487
      },
      "accept_bias": {
        "r": 0.2972875883575967,
        "p": 0.002666997724720667
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 49.372393637808216,
  "bic_Control": 46.27708353154869,
  "bic_Cocaine": 52.14527560799904,
  "bic_results": {
    "average_bic": 49.372393637808216,
    "individual_bics": [
      59.89756384575905,
      51.641722385088244,
      50.15784539142366,
      55.30817348529452,
      51.559082370629866,
      47.881673284629585,
      33.30621977602117,
      47.572750358496435,
      33.306212682313856,
      53.26376294977986,
      49.01479086178223,
      59.897564140173785,
      50.192577698814006,
      33.30622245448886,
      33.30621980465955,
      33.30622967763652,
      33.30621263451248,
      39.30643072761994,
      38.47241589442919,
      33.306231038087404,
      48.68434382301544,
      40.524060252704274,
      57.6201638951662,
      51.571081159669276,
      50.30417019482226,
      49.481641154848134,
      49.323045953525565,
      54.22840941790446,
      39.669650997820234,
      45.46116943206263,
      33.306219804714964,
      59.436976515258266,
      58.11652953346112,
      54.91768463557915,
      33.30621977591032,
      49.55149266606446,
      45.07354562763892,
      51.74378027151589,
      50.15322503940922,
      39.30581123602617,
      49.31593499999167,
      56.203393762226426,
      35.306140245618316,
      53.13066898019642,
      49.52750787832956,
      49.54106155877167,
      51.87598142173243,
      56.14077617670071,
      53.26371173410632,
      56.48124354973922,
      49.50187518639471,
      59.89922030954533,
      52.63475531311785,
      58.42858456886583,
      56.19578090195682,
      53.57786983964881,
      57.618374492053874,
      41.305913220644385,
      59.436812974876645,
      45.30633591769322,
      51.31318184499932,
      50.10759602439144,
      59.8981335433553,
      55.78886601417737,
      57.61967762304465,
      49.32304121439212,
      38.950421285845046,
      41.30611915447673,
      51.56204286861214,
      39.305937057489,
      57.62016606507689,
      59.43681284333101,
      51.47377954194788,
      45.097512666756955,
      55.559112213228275,
      46.86814080973235,
      38.47059192367057,
      60.65719919966898,
      52.9056443067025,
      59.51948069047096,
      57.64633198392136,
      43.4940446875021,
      60.65719919966898,
      49.56216813327609,
      54.389379696819034,
      58.755768025990434,
      49.480801889776515,
      60.6571991917276,
      36.20663845355763,
      53.52506968404076,
      51.94869732193011
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        59.89756384575905,
        51.641722385088244,
        50.15784539142366,
        55.30817348529452,
        51.559082370629866,
        47.881673284629585,
        33.30621977602117,
        47.572750358496435,
        33.306212682313856,
        53.26376294977986,
        49.01479086178223,
        59.897564140173785,
        50.192577698814006,
        33.30622245448886,
        33.30621980465955,
        33.30622967763652,
        33.30621263451248,
        39.30643072761994,
        38.47241589442919,
        33.306231038087404,
        48.68434382301544,
        40.524060252704274,
        57.6201638951662,
        51.571081159669276,
        50.30417019482226,
        49.481641154848134,
        49.323045953525565,
        54.22840941790446,
        39.669650997820234,
        45.46116943206263,
        33.306219804714964,
        59.436976515258266,
        58.11652953346112,
        54.91768463557915,
        33.30621977591032,
        49.55149266606446,
        45.07354562763892,
        51.74378027151589,
        50.15322503940922,
        39.30581123602617,
        49.31593499999167,
        56.203393762226426,
        35.306140245618316
      ],
      "Cocaine": [
        53.13066898019642,
        49.52750787832956,
        49.54106155877167,
        51.87598142173243,
        56.14077617670071,
        53.26371173410632,
        56.48124354973922,
        49.50187518639471,
        59.89922030954533,
        52.63475531311785,
        58.42858456886583,
        56.19578090195682,
        53.57786983964881,
        57.618374492053874,
        41.305913220644385,
        59.436812974876645,
        45.30633591769322,
        51.31318184499932,
        50.10759602439144,
        59.8981335433553,
        55.78886601417737,
        57.61967762304465,
        49.32304121439212,
        38.950421285845046,
        41.30611915447673,
        51.56204286861214,
        39.305937057489,
        57.62016606507689,
        59.43681284333101,
        51.47377954194788,
        45.097512666756955,
        55.559112213228275,
        46.86814080973235,
        38.47059192367057,
        60.65719919966898,
        52.9056443067025,
        59.51948069047096,
        57.64633198392136,
        43.4940446875021,
        60.65719919966898,
        49.56216813327609,
        54.389379696819034,
        58.755768025990434,
        49.480801889776515,
        60.6571991917276,
        36.20663845355763,
        53.52506968404076,
        51.94869732193011
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- fairness_threshold: r = 0.053\n- sensitivity: r = 0.048\n- accept_bias: r = 0.297",
  "previous_models": [
    "Specification: contribution_ratio = token_self / (token_self + token_opp)\nentitlement_threshold = fairness_threshold * contribution_ratio * combined_earning\nU = sensitivity * (split_self - entitlement_threshold) + accept_bias\nSummary: A thresholded utility model where the minimum acceptable offer is proportional to the responder's contribution, scaled by a learnable fairness threshold parameter. Utility increases linearly as the offer to the responder exceeds this threshold, with acceptance probability governed by a nonlinear sigmoid and modulated by sensitivity (sharpness) and global accept/reject bias. The model captures stepwise fairness aversion, personalized entitlement, and individual differences in baseline choosiness.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 49.372393637808216\nOverall Accuracy: 0.6093\nGroup Accuracies:\n- Control: 0.6408\n- Cocaine: 0.5810\n\nParameter Recovery:\n- fairness_threshold: r = 0.053\n- sensitivity: r = 0.048\n- accept_bias: r = 0.297"
  ]
}