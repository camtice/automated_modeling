{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "\n\n---\n\nNew Instructions:\n\n---\n\nBefore designing your computational model, address each step below carefully and creatively:\n\n1. **Pinpoint Key Nonlinear and Contextual Mechanisms:**\n   - Go beyond linear or basic threshold models. Explicitly identify if discontinuities (e.g., step changes, indicator functions), saturation, or asymmetric aversion to unfairness (e.g., rejection is much more likely for disadvantageous unfairness than advantageous) are plausible.\n   - Consider mechanisms like: utility \u201cplateaus\u201d (accepts everything above a cutoff, rejects below), or risk aversion tied to context (offers from a larger pot might provoke stronger reactions to unfairness).\n   - If loss/gain asymmetry is relevant, distinguish between reactions to offers below versus above a fairness reference point.\n\n2. **Achieve Orthogonal, Unique Parameter Effects and Identifiability:**\n   - For each learnable parameter, justify in advance how you ensure that it cannot be substituted by others\u2014describe how each parameter modulates distinct psychological processes.\n   - Avoid using multiple \u201cslope\u201d or \u201cthreshold\u201d parameters unless they operate on fully distinct regions (\u201cone for self-interest, one only for severe unfairness,\u201d for example).\n   - Explicitly anticipate and prevent parameter tradeoff or redundancy through your model structure and provide reasoning for how your functional form supports parameter recovery.\n\n3. **Innovate with Functional Forms:**\n   - Shun purely additive combinations; instead, consider forms such as:\n        - Piecewise functions\n        - max(0, x) or min logic (cutoffs, floors, ceilings)\n        - Quadratic, exponential, or log transformations of core variables\n        - Interaction terms (e.g., unfairness aversion rises with pot size, or with absolute deviation)\n        - Explicit \u201czones\u201d (e.g., utility = very low for offers < threshold, increases rapidly after)\n   - If using a threshold or cutoff, consider a *hard* or sigmoidal switch, not just linear utility.\n\n4. **Exploit Both Absolute and Proportional Fairness:**\n   - Model may include terms for both absolute offer size and fairness relative to entitlement or contribution.\n   - Map all model terms directly to available data fields; define and justify every derived variable.\n\n5. **Prioritize Parsimony and Psychological Interpretability:**\n   - Prefer models with two or three learnable, non-overlapping parameters\u2014each with a clear, unique psychological meaning.\n   - Unless strongly justified, avoid \u201cextra\u201d parameters; focus on quality, not quantity, of effects.\n   - Describe in your reasoning how these parameters can be meaningfully recovered from observable behavior.\n\n6. **Formalization and Output Requirements:**\n   - Provide thorough, stepwise reasoning before formalizing your model.\n   - Place the full mathematical model in <MODEL> tags\u2014do not add text or explanation inside these tags.\n   - List and document all variables and parameters (with explicit, finite numeric bounds for learnable parameters) in JSON format between <VARIABLES> tags.\n   - Specify the exact predicted target variable between <target_variable> tags.\n   - Give a concise, purely descriptive <SUMMARY> (no mention of task names).\n   - Use Python-safe, non-reserved names for all parameters and variables.\n\n**Challenge yourself to try formulations with clear discontinuity, nonlinearity, or asymmetric effects. Favor compact, well-identified parameters over \u201cmore is better.\u201d Be bold in exploring threshold, zone-based, or interactional mechanisms. If you use a fairness threshold, ensure its effect is direct and does not blend with other parameters.**\n\n---",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: \n\n---\n\nNew Instructions:\n\n---\n\nBefore designing your computational model, address each step below carefully and creatively:\n\n1. **Pinpoint Key Nonlinear and Contextual Mechanisms:**\n   - Go beyond linear or basic threshold models. Explicitly identify if discontinuities (e.g., step changes, indicator functions), saturation, or asymmetric aversion to unfairness (e.g., rejection is much more likely for disadvantageous unfairness than advantageous) are plausible.\n   - Consider mechanisms like: utility \u201cplateaus\u201d (accepts everything above a cutoff, rejects below), or risk aversion tied to context (offers from a larger pot might provoke stronger reactions to unfairness).\n   - If loss/gain asymmetry is relevant, distinguish between reactions to offers below versus above a fairness reference point.\n\n2. **Achieve Orthogonal, Unique Parameter Effects and Identifiability:**\n   - For each learnable parameter, justify in advance how you ensure that it cannot be substituted by others\u2014describe how each parameter modulates distinct psychological processes.\n   - Avoid using multiple \u201cslope\u201d or \u201cthreshold\u201d parameters unless they operate on fully distinct regions (\u201cone for self-interest, one only for severe unfairness,\u201d for example).\n   - Explicitly anticipate and prevent parameter tradeoff or redundancy through your model structure and provide reasoning for how your functional form supports parameter recovery.\n\n3. **Innovate with Functional Forms:**\n   - Shun purely additive combinations; instead, consider forms such as:\n        - Piecewise functions\n        - max(0, x) or min logic (cutoffs, floors, ceilings)\n        - Quadratic, exponential, or log transformations of core variables\n        - Interaction terms (e.g., unfairness aversion rises with pot size, or with absolute deviation)\n        - Explicit \u201czones\u201d (e.g., utility = very low for offers < threshold, increases rapidly after)\n   - If using a threshold or cutoff, consider a *hard* or sigmoidal switch, not just linear utility.\n\n4. **Exploit Both Absolute and Proportional Fairness:**\n   - Model may include terms for both absolute offer size and fairness relative to entitlement or contribution.\n   - Map all model terms directly to available data fields; define and justify every derived variable.\n\n5. **Prioritize Parsimony and Psychological Interpretability:**\n   - Prefer models with two or three learnable, non-overlapping parameters\u2014each with a clear, unique psychological meaning.\n   - Unless strongly justified, avoid \u201cextra\u201d parameters; focus on quality, not quantity, of effects.\n   - Describe in your reasoning how these parameters can be meaningfully recovered from observable behavior.\n\n6. **Formalization and Output Requirements:**\n   - Provide thorough, stepwise reasoning before formalizing your model.\n   - Place the full mathematical model in <MODEL> tags\u2014do not add text or explanation inside these tags.\n   - List and document all variables and parameters (with explicit, finite numeric bounds for learnable parameters) in JSON format between <VARIABLES> tags.\n   - Specify the exact predicted target variable between <target_variable> tags.\n   - Give a concise, purely descriptive <SUMMARY> (no mention of task names).\n   - Use Python-safe, non-reserved names for all parameters and variables.\n\n**Challenge yourself to try formulations with clear discontinuity, nonlinearity, or asymmetric effects. Favor compact, well-identified parameters over \u201cmore is better.\u201d Be bold in exploring threshold, zone-based, or interactional mechanisms. If you use a fairness threshold, ensure its effect is direct and does not blend with other parameters.**\n\n---\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let\u2019s proceed step by step as requested. I will make my entire conceptual and mathematical reasoning explicit before giving the formal model and all required tags.\n\n---\n\n### 1. Pinpoint Key Nonlinear and Contextual Mechanisms\n\n**Utility Discontinuity & Nonlinearity:**\n- Behavioral evidence on responder choice in such tasks strongly supports a *nonlinear, threshold-like* (discontinuous) process: responders are much more likely to reject offers perceived as \u201cunfair,\u201d especially when those are below what they deem as their \u201centitlement\u201d given their own contribution.\n- *Asymmetric aversion*: Responders care much more about \u201cdisadvantageous inequality\u201d (offer less than earned/fair share) than \u201cadvantageous\u201d (offer more than earned share).\n- *Interaction of context and fairness*: For a given proportional unfairness, the *absolute* offer (raw amount) can modulate the likelihood of rejection (considering \u201cit\u2019s a lot, even if unfair!\u201d vs \u201cit\u2019s not much, but at least it\u2019s over nothing\u201d).\n- *Zone/plateau logic*: Offers above a personal fairness threshold are reliably accepted; below, rejection probability rises nonlinearly.\n\n**Crucially, simple additivity (linear sums of absolute/proportional fairness) smooths these effects and is less psychologically plausible than introducing:\n- Explicit cutoff/threshold logic,\n- Different slopes above/below the threshold,\n- Nonlinear (e.g., step/sigmoid, rectifier) transitions.\n**\n\n---\n\n### 2. Ensure Orthogonal, Unique Parameter Effects & Identifiability\n\n*I seek exactly three learnable parameters, each with unique, separable psychological effects:*\n  - A \u201cfairness threshold\u201d (\u03c4): personal reference point, likely tracking one's own contribution or expected share.\n  - A \u201cstrictness\u201d parameter (\u03b1): how sharply rejection likelihood rises below threshold (a steeper \u2018slope\u2019 yields threshold-like, categorical rejections; a shallow slope means gradual softening).\n  - An \u201cabsolute offer sensitivity\u201d parameter (\u03b4): modulates impact of the raw offered amount, orthogonal to proportional fairness (accepting \u201cbig\u201d offers even if unfair).\n\n*Separability/identifiability:*\n  - \u03c4 operates as a movable reference point, shifting the \u201ctipping zone.\u201d\n  - \u03b1 controls shape/abruptness of the acceptance region; only modulates below \u03c4, not above.\n  - \u03b4 adds utility in proportion to pure offer size, independent of fairness computation; thus, even for the same proportional offer, high \u03b4 means big offers are more tempting.\n*No two parameters act identically or are substitutable: tuning any one can\u2019t exactly replicate the other\u2019s effect across the relevant input space.*\n\n---\n\n### 3. Innovate with Functional Forms\n\n**Structure (incorporating the above insights):**\n- *Reference point* (personal fairness threshold, \u03c4): This can be \u03c4 \u00d7 combined_earning, with \u03c4 in [0,1], or *directly* tied to one\u2019s proportional contribution (token_self/(token_self+token_opp)), possibly shifted to absorb idiosyncratic \u201cfairness\u201d standards.\n- *Piecewise/rectifier logic:* Below \u03c4, utility drops nonlinearly (via a negative exponential or steep sigmoid\u2014e.g., using softplus or logistic form with \u03b1).\n- *Absolute offer modulation:* \u03b4 \u00d7 split_self term added, affecting only the absolute amount received.\n- *Hard switch/plateau for offers above threshold:* Above the threshold, acceptance is nearly certain (utility plateau), but still modulated by overall offer size (\u03b4 parameter).\n\n*To elegantly capture this, I\u2019ll use a two-zone model, with a soft threshold to ensure differentiability and parameter recovery. I use the \u201csoftplus\u201d or piecewise-sigmoidal function for nonlinear transition:*\n```\nutility = \u03b4 \u00d7 split_self + \n        \u03b1 \u00d7 max(0, (splitperc_self - fairness_threshold))\n```\nBut to ensure a psychologically realistic, sharply nonlinear rejection below the threshold, I prefer:\n```\nutility = \u03b4 \u00d7 split_self \n          - \u03b1 \u00d7 max(0, (fairness_threshold - splitperc_self))\n```\nSo utility falls for \u201cunfair\u201d (< threshold) offers and is raised by higher absolute amounts.\n\n*Where fairness_threshold is:*\n```\nfairness_threshold = \u03c4_contrib \u00d7 (token_self/(token_self + token_opp)) \u00d7 100  + \u03c4_offset\n```\nwith \u03c4_contrib \u2208 [0.5, 1.5] and \u03c4_offset \u2208 [-30, 30]. (So fairness expectations can be idiosyncratic: stricter/lenient than pure contribution.)\n\nBut three learnables is best; so I set:\n```\nfairness_threshold = \u03c4 \u00d7 (token_self/(token_self + token_opp)) \u00d7 100\n```\nwith \u03c4 \u2208 [0.5, 1.5]. Offset is not formally required; individual differences absorbed by \u03c4.\n\n**Final functional structure:**\nPiecewise, but with a smooth max(0, ...), so for offers above the personal fairness threshold, utility = \u03b4 \u00d7 split_self (all \u201cabove-threshold\u201d utility comes from total amount).\nFor offers below, a penalty proportional to \u201cunfairness\u201d (scaled by aversion parameter \u03b1) reduces utility.\n\n---\n\n### 4. Both Absolute and Proportional Fairness\n\n- **split_self:** The \u00a3 being offered to the responder (absolute size).\n- **splitperc_self:** Proportion (%) being offered to responder.\n- **token_self/(token_self+token_opp):** Proportional entitlement (from contributions); fairness threshold set here, flexible via \u03c4.\n- Both variable types used directly and in modulated fashion.\n\n---\n\n### 5. Parsimony & Interpretability\n\n- \u03c4 is the personal fairness threshold factor (psychological reference).\n- \u03b1 is the \u201cstrictness\u201d parameter\u2014unfairness aversion below threshold.\n- \u03b4 is the absolute-offer \u201ctemptation\u201d parameter\u2014willingness to accept due to greed/need.\n\nEach recovers cleanly: only \u03c4 moves the fairness reference, only \u03b1 determines penalty slope below threshold, and only \u03b4 modulates raw amount.\n\n---\n\n### 6. Formalization\n\n*All together:*\n\nLet:\n  - fair_prop = token_self/(token_self + token_opp)\n  - fairness_threshold = \u03c4 \u00d7 fair_prop \u00d7 100\n\nUtility:\n```\nU = \u03b4 \u00d7 split_self - \u03b1 \u00d7 max(0, fairness_threshold - splitperc_self)\n```\nDecision probability:\n```\nP(accept) = sigmoid(U)\n```\n(But only utility U is produced here; mapping to probability done elsewhere.)\n\n---\n\n## Model Specification\n\n<MODEL>\nfair_prop = token_self / (token_self + token_opp)\nfairness_threshold = tau * fair_prop * 100\nU = delta * split_self - alpha * max(0, fairness_threshold - splitperc_self)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"fair_prop\": {\n      \"description\": \"Proportional share based on participant's contribution; participant's entitlement\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_threshold\": {\n      \"description\": \"Individualized percentage fairness threshold relative to contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 150,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share of the responder in \u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 108,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed share for the responder in percent (%) of combined earnings\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"tau\": {\n      \"description\": \"Participant's fairness threshold multiplier (personal reference scale); higher = expects more proportional fairness\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Strictness parameter; penalty slope for unfair offers below threshold; higher = more likely to reject unfair offers\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 15,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.01,\n          \"high\": 15\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta\": {\n      \"description\": \"Sensitivity to absolute amount offered; how tempting large sums are regardless of fairness\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.01,\n          \"high\": 2\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility for accepting this offer (before conversion to acceptance probability)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear threshold model that predicts responder behavior using three psychologically distinct parameters: a personal fairness threshold (\u03c4) scaling the proportional entitlement from own contribution; a strictness parameter (\u03b1) penalizing offers falling below this fairness threshold; and an absolute offer sensitivity parameter (\u03b4) that increases utility with large absolute offers regardless of fairness. Utility drops sharply when offers fall below the individualized threshold, and rises with higher amounts, supporting flexible, identifiable parameter recovery and capturing both context and nonlinearity.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['tau', 'alpha', 'delta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                fair_prop = token_self / (token_self + token_opp)\nfairness_threshold = tau * fair_prop * 100\nU = delta * split_self - alpha * max(0, fairness_threshold - splitperc_self)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"fair_prop\": {\n      \"description\": \"Proportional share based on participant's contribution; participant's entitlement\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_threshold\": {\n      \"description\": \"Individualized percentage fairness threshold relative to contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 150,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share of the responder in \\u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 108,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed share for the responder in percent (%) of combined earnings\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"tau\": {\n      \"description\": \"Participant's fairness threshold multiplier (personal reference scale); higher = expects more proportional fairness\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Strictness parameter; penalty slope for unfair offers below threshold; higher = more likely to reject unfair offers\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 15,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.01,\n          \"high\": 15\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta\": {\n      \"description\": \"Sensitivity to absolute amount offered; how tempting large sums are regardless of fairness\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.01,\n          \"high\": 2\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility for accepting this offer (before conversion to acceptance probability)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, tau=1, alpha=1, delta=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n\n        # Calculations\n        fair_prop = token_self / (token_self + token_opp) if (token_self + token_opp) > 0 else 0\n        fairness_threshold = tau * fair_prop * 100\n\n        # Utility\n        U = delta * split_self - alpha * max(0, fairness_threshold - splitperc_self)\n\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744725794.757198
    }
  ],
  "learnable_parameters": {
    "tau": {
      "description": "Participant's fairness threshold multiplier (personal reference scale); higher = expects more proportional fairness",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "alpha": {
      "description": "Strictness parameter; penalty slope for unfair offers below threshold; higher = more likely to reject unfair offers",
      "range": {
        "min": 0.01,
        "max": 15,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.01,
          "high": 15
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "delta": {
      "description": "Sensitivity to absolute amount offered; how tempting large sums are regardless of fairness",
      "range": {
        "min": 0.01,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.01,
          "high": 2
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "fair_prop = token_self / (token_self + token_opp)\nfairness_threshold = tau * fair_prop * 100\nU = delta * split_self - alpha * max(0, fairness_threshold - splitperc_self)",
  "variable_descriptions": {
    "fair_prop": {
      "description": "Proportional share based on participant's contribution; participant's entitlement",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fairness_threshold": {
      "description": "Individualized percentage fairness threshold relative to contribution",
      "range": {
        "min": 0,
        "max": 150,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "Proposed share of the responder in \u00a3",
      "range": {
        "min": 0,
        "max": 108,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "splitperc_self": {
      "description": "Proposed share for the responder in percent (%) of combined earnings",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 36,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by opponent",
      "range": {
        "min": 0,
        "max": 36,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "tau": {
      "description": "Participant's fairness threshold multiplier (personal reference scale); higher = expects more proportional fairness",
      "range": {
        "min": 0.5,
        "max": 1.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 1.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "alpha": {
      "description": "Strictness parameter; penalty slope for unfair offers below threshold; higher = more likely to reject unfair offers",
      "range": {
        "min": 0.01,
        "max": 15,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.01,
          "high": 15
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "delta": {
      "description": "Sensitivity to absolute amount offered; how tempting large sums are regardless of fairness",
      "range": {
        "min": 0.01,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.01,
          "high": 2
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Utility for accepting this offer (before conversion to acceptance probability)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A nonlinear threshold model that predicts responder behavior using three psychologically distinct parameters: a personal fairness threshold (\u03c4) scaling the proportional entitlement from own contribution; a strictness parameter (\u03b1) penalizing offers falling below this fairness threshold; and an absolute offer sensitivity parameter (\u03b4) that increases utility with large absolute offers regardless of fairness. Utility drops sharply when offers fall below the individualized threshold, and rises with higher amounts, supporting flexible, identifiable parameter recovery and capturing both context and nonlinearity.",
  "target_variable": "accept",
  "full_reasoning": "Let\u2019s proceed step by step as requested. I will make my entire conceptual and mathematical reasoning explicit before giving the formal model and all required tags.\n\n---\n\n### 1. Pinpoint Key Nonlinear and Contextual Mechanisms\n\n**Utility Discontinuity & Nonlinearity:**\n- Behavioral evidence on responder choice in such tasks strongly supports a *nonlinear, threshold-like* (discontinuous) process: responders are much more likely to reject offers perceived as \u201cunfair,\u201d especially when those are below what they deem as their \u201centitlement\u201d given their own contribution.\n- *Asymmetric aversion*: Responders care much more about \u201cdisadvantageous inequality\u201d (offer less than earned/fair share) than \u201cadvantageous\u201d (offer more than earned share).\n- *Interaction of context and fairness*: For a given proportional unfairness, the *absolute* offer (raw amount) can modulate the likelihood of rejection (considering \u201cit\u2019s a lot, even if unfair!\u201d vs \u201cit\u2019s not much, but at least it\u2019s over nothing\u201d).\n- *Zone/plateau logic*: Offers above a personal fairness threshold are reliably accepted; below, rejection probability rises nonlinearly.\n\n**Crucially, simple additivity (linear sums of absolute/proportional fairness) smooths these effects and is less psychologically plausible than introducing:\n- Explicit cutoff/threshold logic,\n- Different slopes above/below the threshold,\n- Nonlinear (e.g., step/sigmoid, rectifier) transitions.\n**\n\n---\n\n### 2. Ensure Orthogonal, Unique Parameter Effects & Identifiability\n\n*I seek exactly three learnable parameters, each with unique, separable psychological effects:*\n  - A \u201cfairness threshold\u201d (\u03c4): personal reference point, likely tracking one's own contribution or expected share.\n  - A \u201cstrictness\u201d parameter (\u03b1): how sharply rejection likelihood rises below threshold (a steeper \u2018slope\u2019 yields threshold-like, categorical rejections; a shallow slope means gradual softening).\n  - An \u201cabsolute offer sensitivity\u201d parameter (\u03b4): modulates impact of the raw offered amount, orthogonal to proportional fairness (accepting \u201cbig\u201d offers even if unfair).\n\n*Separability/identifiability:*\n  - \u03c4 operates as a movable reference point, shifting the \u201ctipping zone.\u201d\n  - \u03b1 controls shape/abruptness of the acceptance region; only modulates below \u03c4, not above.\n  - \u03b4 adds utility in proportion to pure offer size, independent of fairness computation; thus, even for the same proportional offer, high \u03b4 means big offers are more tempting.\n*No two parameters act identically or are substitutable: tuning any one can\u2019t exactly replicate the other\u2019s effect across the relevant input space.*\n\n---\n\n### 3. Innovate with Functional Forms\n\n**Structure (incorporating the above insights):**\n- *Reference point* (personal fairness threshold, \u03c4): This can be \u03c4 \u00d7 combined_earning, with \u03c4 in [0,1], or *directly* tied to one\u2019s proportional contribution (token_self/(token_self+token_opp)), possibly shifted to absorb idiosyncratic \u201cfairness\u201d standards.\n- *Piecewise/rectifier logic:* Below \u03c4, utility drops nonlinearly (via a negative exponential or steep sigmoid\u2014e.g., using softplus or logistic form with \u03b1).\n- *Absolute offer modulation:* \u03b4 \u00d7 split_self term added, affecting only the absolute amount received.\n- *Hard switch/plateau for offers above threshold:* Above the threshold, acceptance is nearly certain (utility plateau), but still modulated by overall offer size (\u03b4 parameter).\n\n*To elegantly capture this, I\u2019ll use a two-zone model, with a soft threshold to ensure differentiability and parameter recovery. I use the \u201csoftplus\u201d or piecewise-sigmoidal function for nonlinear transition:*\n```\nutility = \u03b4 \u00d7 split_self + \n        \u03b1 \u00d7 max(0, (splitperc_self - fairness_threshold))\n```\nBut to ensure a psychologically realistic, sharply nonlinear rejection below the threshold, I prefer:\n```\nutility = \u03b4 \u00d7 split_self \n          - \u03b1 \u00d7 max(0, (fairness_threshold - splitperc_self))\n```\nSo utility falls for \u201cunfair\u201d (< threshold) offers and is raised by higher absolute amounts.\n\n*Where fairness_threshold is:*\n```\nfairness_threshold = \u03c4_contrib \u00d7 (token_self/(token_self + token_opp)) \u00d7 100  + \u03c4_offset\n```\nwith \u03c4_contrib \u2208 [0.5, 1.5] and \u03c4_offset \u2208 [-30, 30]. (So fairness expectations can be idiosyncratic: stricter/lenient than pure contribution.)\n\nBut three learnables is best; so I set:\n```\nfairness_threshold = \u03c4 \u00d7 (token_self/(token_self + token_opp)) \u00d7 100\n```\nwith \u03c4 \u2208 [0.5, 1.5]. Offset is not formally required; individual differences absorbed by \u03c4.\n\n**Final functional structure:**\nPiecewise, but with a smooth max(0, ...), so for offers above the personal fairness threshold, utility = \u03b4 \u00d7 split_self (all \u201cabove-threshold\u201d utility comes from total amount).\nFor offers below, a penalty proportional to \u201cunfairness\u201d (scaled by aversion parameter \u03b1) reduces utility.\n\n---\n\n### 4. Both Absolute and Proportional Fairness\n\n- **split_self:** The \u00a3 being offered to the responder (absolute size).\n- **splitperc_self:** Proportion (%) being offered to responder.\n- **token_self/(token_self+token_opp):** Proportional entitlement (from contributions); fairness threshold set here, flexible via \u03c4.\n- Both variable types used directly and in modulated fashion.\n\n---\n\n### 5. Parsimony & Interpretability\n\n- \u03c4 is the personal fairness threshold factor (psychological reference).\n- \u03b1 is the \u201cstrictness\u201d parameter\u2014unfairness aversion below threshold.\n- \u03b4 is the absolute-offer \u201ctemptation\u201d parameter\u2014willingness to accept due to greed/need.\n\nEach recovers cleanly: only \u03c4 moves the fairness reference, only \u03b1 determines penalty slope below threshold, and only \u03b4 modulates raw amount.\n\n---\n\n### 6. Formalization\n\n*All together:*\n\nLet:\n  - fair_prop = token_self/(token_self + token_opp)\n  - fairness_threshold = \u03c4 \u00d7 fair_prop \u00d7 100\n\nUtility:\n```\nU = \u03b4 \u00d7 split_self - \u03b1 \u00d7 max(0, fairness_threshold - splitperc_self)\n```\nDecision probability:\n```\nP(accept) = sigmoid(U)\n```\n(But only utility U is produced here; mapping to probability done elsewhere.)\n\n---\n\n## Model Specification\n\n<MODEL>\nfair_prop = token_self / (token_self + token_opp)\nfairness_threshold = tau * fair_prop * 100\nU = delta * split_self - alpha * max(0, fairness_threshold - splitperc_self)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"fair_prop\": {\n      \"description\": \"Proportional share based on participant's contribution; participant's entitlement\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_threshold\": {\n      \"description\": \"Individualized percentage fairness threshold relative to contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 150,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share of the responder in \u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 108,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Proposed share for the responder in percent (%) of combined earnings\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"tau\": {\n      \"description\": \"Participant's fairness threshold multiplier (personal reference scale); higher = expects more proportional fairness\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 1.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 1.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Strictness parameter; penalty slope for unfair offers below threshold; higher = more likely to reject unfair offers\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 15,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.01,\n          \"high\": 15\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta\": {\n      \"description\": \"Sensitivity to absolute amount offered; how tempting large sums are regardless of fairness\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.01,\n          \"high\": 2\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility for accepting this offer (before conversion to acceptance probability)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA nonlinear threshold model that predicts responder behavior using three psychologically distinct parameters: a personal fairness threshold (\u03c4) scaling the proportional entitlement from own contribution; a strictness parameter (\u03b1) penalizing offers falling below this fairness threshold; and an absolute offer sensitivity parameter (\u03b4) that increases utility with large absolute offers regardless of fairness. Utility drops sharply when offers fall below the individualized threshold, and rises with higher amounts, supporting flexible, identifiable parameter recovery and capturing both context and nonlinearity.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: fair_prop = token_self / (token_self + token_opp)\nfairness_threshold = tau * fair_prop * 100\nU = delta * split_self - alpha * max(0, fairness_threshold - splitperc_self)\nSummary: A nonlinear threshold model that predicts responder behavior using three psychologically distinct parameters: a personal fairness threshold (\u03c4) scaling the proportional entitlement from own contribution; a strictness parameter (\u03b1) penalizing offers falling below this fairness threshold; and an absolute offer sensitivity parameter (\u03b4) that increases utility with large absolute offers regardless of fairness. Utility drops sharply when offers fall below the individualized threshold, and rises with higher amounts, supporting flexible, identifiable parameter recovery and capturing both context and nonlinearity.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, tau=1, alpha=1, delta=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n\n        # Calculations\n        fair_prop = token_self / (token_self + token_opp) if (token_self + token_opp) > 0 else 0\n        fairness_threshold = tau * fair_prop * 100\n\n        # Utility\n        U = delta * split_self - alpha * max(0, fairness_threshold - splitperc_self)\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7838827838827839,
  "group_accuracies": {
    "Control": 0.8301033591731266,
    "Cocaine": 0.7424768518518519
  },
  "group_parameter_averages": {
    "Control": {
      "tau": 0.6763957173462323,
      "alpha": 1.7649266639615246,
      "delta": 0.8859907566374166
    },
    "Cocaine": {
      "tau": 0.7944459836633168,
      "alpha": 2.2144928214889585,
      "delta": 0.45041435312262595
    }
  },
  "fitting_results": [
    {
      "tau": 1.5,
      "alpha": 0.09913670936453106,
      "delta": 0.2532655471082251,
      "success": true,
      "log_likelihood": -7.892333284629597,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.8817919374959923,
      "alpha": 0.10701275249566,
      "delta": 0.40696511347893183,
      "success": true,
      "log_likelihood": -17.255667891379822,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.7999999947249754,
      "alpha": 0.2863360991003248,
      "delta": 0.7657387475502521,
      "success": true,
      "log_likelihood": -9.935842581800479,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.9999952533250185,
      "alpha": 0.14856647798572842,
      "delta": 0.650682956197596,
      "success": true,
      "log_likelihood": -13.483394022324433,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.801799830300359,
      "alpha": 0.330630795480723,
      "delta": 0.5700486938803784,
      "success": true,
      "log_likelihood": -10.270113622568594,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.7497116255756181,
      "alpha": 0.14295096150037528,
      "delta": 0.6100470279768418,
      "success": true,
      "log_likelihood": -13.98862917353972,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.5,
      "alpha": 0.01,
      "delta": 2.0,
      "success": true,
      "log_likelihood": -0.4580864260965221,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.7000000465471747,
      "alpha": 0.146692026370556,
      "delta": 0.5669951283862664,
      "success": true,
      "log_likelihood": -14.400458806581833,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.5,
      "alpha": 0.01,
      "delta": 2.0,
      "success": true,
      "log_likelihood": -0.45808642609652217,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.530506482356649,
      "alpha": 13.466576404009198,
      "delta": 0.12719253836160863,
      "success": true,
      "log_likelihood": -14.371930230697895,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.6250026386810743,
      "alpha": 15.0,
      "delta": 2.0,
      "success": true,
      "log_likelihood": -0.030876721598741746,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.7499999771358334,
      "alpha": 2.906690575856444,
      "delta": 0.01,
      "success": true,
      "log_likelihood": -8.354898629577452,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.8000000433155747,
      "alpha": 0.2737259950522735,
      "delta": 0.4524179158127078,
      "success": true,
      "log_likelihood": -11.906689670371648,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.5,
      "alpha": 0.01,
      "delta": 2.0,
      "success": true,
      "log_likelihood": -0.45808642609652206,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.5,
      "alpha": 0.01,
      "delta": 2.0,
      "success": true,
      "log_likelihood": -0.45808642609652195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.5,
      "alpha": 0.01,
      "delta": 2.0,
      "success": true,
      "log_likelihood": -0.45808642609652206,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.5,
      "alpha": 0.01,
      "delta": 2.0,
      "success": true,
      "log_likelihood": -0.458086426096522,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.5,
      "alpha": 0.46205411462157586,
      "delta": 2.0,
      "success": true,
      "log_likelihood": -1.8684272015623973,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.5056448595820422,
      "alpha": 0.20951214435713886,
      "delta": 1.2212500476401817,
      "success": true,
      "log_likelihood": -6.90322594499314,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.5,
      "alpha": 0.01,
      "delta": 2.0,
      "success": true,
      "log_likelihood": -0.45808642609652195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.7999996719457667,
      "alpha": 0.1344350192045201,
      "delta": 0.42599628760713987,
      "success": true,
      "log_likelihood": -16.243261006959507,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.6000003325815791,
      "alpha": 0.12481450616658288,
      "delta": 1.025388184971542,
      "success": true,
      "log_likelihood": -9.220705099514351,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.5362232621823834,
      "alpha": 7.181128524175607,
      "delta": 0.14208396884966262,
      "success": true,
      "log_likelihood": -14.170029089507048,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.7999999957129672,
      "alpha": 0.11601361794832363,
      "delta": 0.41183676530211377,
      "success": true,
      "log_likelihood": -17.134754829827287,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.8129142263829203,
      "alpha": 0.13938037076291396,
      "delta": 0.3313616119371568,
      "success": true,
      "log_likelihood": -16.70771182072956,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.8223447755833926,
      "alpha": 0.14760473915395828,
      "delta": 0.6250041332533974,
      "success": true,
      "log_likelihood": -13.76149001303619,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.7500009136440228,
      "alpha": 0.16659604764740085,
      "delta": 0.5160655971613258,
      "success": true,
      "log_likelihood": -14.38671950829092,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.8350662564481264,
      "alpha": 0.6940973760708596,
      "delta": 0.6311577933811798,
      "success": true,
      "log_likelihood": -5.28664701408696,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.7000058398270798,
      "alpha": 0.06103589186389673,
      "delta": 0.9618855230882326,
      "success": true,
      "log_likelihood": -10.057775675872954,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.7829849461823645,
      "alpha": 0.0507373196740412,
      "delta": 0.5521209467658076,
      "success": true,
      "log_likelihood": -16.54055840971992,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.5,
      "alpha": 0.01,
      "delta": 2.0,
      "success": true,
      "log_likelihood": -0.45808642609652206,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.6848752414129657,
      "alpha": 14.313666299494813,
      "delta": 0.01,
      "success": true,
      "log_likelihood": -9.8346764299525,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.5833332058950039,
      "alpha": 0.1889887748763579,
      "delta": 0.12043714603450688,
      "success": true,
      "log_likelihood": -20.242698422815298,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.5796855456080454,
      "alpha": 7.253408336370379,
      "delta": 0.1452061511486366,
      "success": true,
      "log_likelihood": -14.126870737329218,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.5,
      "alpha": 0.01,
      "delta": 2.0,
      "success": true,
      "log_likelihood": -0.45808642609652206,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.9787074381148425,
      "alpha": 0.09832922934735805,
      "delta": 0.9346083041470413,
      "success": true,
      "log_likelihood": -12.649192973525452,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.6527110842031897,
      "alpha": 0.25513972352571196,
      "delta": 0.911109300442327,
      "success": true,
      "log_likelihood": -9.083864868836384,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.8495950830396563,
      "alpha": 0.13016850681615252,
      "delta": 0.40166177430875893,
      "success": true,
      "log_likelihood": -16.354128741324832,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.5171254128836409,
      "alpha": 0.1339256522574382,
      "delta": 0.29599233834067734,
      "success": true,
      "log_likelihood": -19.77400964096611,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.6000163236996527,
      "alpha": 0.026308979240214265,
      "delta": 0.8512293494302078,
      "success": true,
      "log_likelihood": -9.677927759812906,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.5,
      "alpha": 0.1383718679340814,
      "delta": 0.20772699276769102,
      "success": true,
      "log_likelihood": -21.438384754792988,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.5549736015000757,
      "alpha": 10.857810711620424,
      "delta": 0.01,
      "success": true,
      "log_likelihood": -15.346525834774901,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.5,
      "alpha": 0.01,
      "delta": 0.9521266500785174,
      "success": true,
      "log_likelihood": -7.9069348521442535,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "tau": 0.5101167982933719,
      "alpha": 0.3771090019071877,
      "delta": 0.29103234183573057,
      "success": true,
      "log_likelihood": -16.790264292979053,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.587505710581519,
      "alpha": 0.24864083782842206,
      "delta": 0.43195482927066503,
      "success": true,
      "log_likelihood": -14.521429855032546,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.5021927963249146,
      "alpha": 10.045931722179077,
      "delta": 0.4637334610481763,
      "success": true,
      "log_likelihood": -148.47788355318684,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 1.0372986441855385,
      "alpha": 0.1331425618166482,
      "delta": 0.7943320609893768,
      "success": true,
      "log_likelihood": -21.260649876763125,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 1.2639168791110977,
      "alpha": 0.06318703872512449,
      "delta": 0.4316701597349852,
      "success": true,
      "log_likelihood": -18.15675530211297,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.8750019344212405,
      "alpha": 0.16198560612220894,
      "delta": 0.3398313474139133,
      "success": true,
      "log_likelihood": -14.6508585599387,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.8000002172449229,
      "alpha": 0.03744995539419714,
      "delta": 0.18423096155429797,
      "success": true,
      "log_likelihood": -23.15601533596706,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.7499999971802945,
      "alpha": 0.05208732460540404,
      "delta": 0.4376540941510436,
      "success": true,
      "log_likelihood": -18.65617419942388,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.5724321516573991,
      "alpha": 14.029266245119912,
      "delta": 0.01,
      "success": true,
      "log_likelihood": -15.469525834706017,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.7999996656006778,
      "alpha": 0.09691109736632901,
      "delta": 0.3791820453063273,
      "success": true,
      "log_likelihood": -18.081290729184325,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.5,
      "alpha": 0.12623544961460095,
      "delta": 0.24170286803473104,
      "success": true,
      "log_likelihood": -21.003364814539424,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 1.4256585744211723,
      "alpha": 0.05878049175910956,
      "delta": 0.4212562298125433,
      "success": true,
      "log_likelihood": -17.34643988049624,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.7087206017649009,
      "alpha": 7.027339493945076,
      "delta": 0.7295544630681267,
      "success": true,
      "log_likelihood": -3.9655463631168266,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.6999184389603406,
      "alpha": 8.94975397168327,
      "delta": 0.2339226030465626,
      "success": true,
      "log_likelihood": -8.000232463186245,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.5,
      "alpha": 0.01,
      "delta": 0.5779422667159342,
      "success": true,
      "log_likelihood": -13.94343037281875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.7376926282231688,
      "alpha": 9.075538218194188,
      "delta": 0.01,
      "success": true,
      "log_likelihood": -8.357941007641804,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.8000002087442356,
      "alpha": 0.03984078005079826,
      "delta": 0.6889935961672103,
      "success": true,
      "log_likelihood": -13.910904516787097,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.8000000074220754,
      "alpha": 0.05513158201353544,
      "delta": 0.31998525398042604,
      "success": true,
      "log_likelihood": -20.755463084716244,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.8000001864144494,
      "alpha": 0.1283071548068458,
      "delta": 0.3244727291346027,
      "success": true,
      "log_likelihood": -17.354954667848236,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.9907319963316242,
      "alpha": 7.867292864700706,
      "delta": 0.052593661160676465,
      "success": true,
      "log_likelihood": -25.747486984768035,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 1.1342883120102727,
      "alpha": 0.05744641838686292,
      "delta": 0.3823911644441833,
      "success": true,
      "log_likelihood": -19.683577169962113,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 1.0460585755288432,
      "alpha": 0.16468399373063772,
      "delta": 0.3719023438409919,
      "success": true,
      "log_likelihood": -11.069947000819651,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.8000000532731065,
      "alpha": 0.1375988840323242,
      "delta": 0.5360392441410662,
      "success": true,
      "log_likelihood": -14.924840462942926,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.5999999997077003,
      "alpha": 0.03703474202568064,
      "delta": 0.9479894567343523,
      "success": true,
      "log_likelihood": -8.84024029706853,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.6999995199825793,
      "alpha": 0.056019116287466884,
      "delta": 0.7852932004935076,
      "success": true,
      "log_likelihood": -12.179719111994082,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 1.1120599995605787,
      "alpha": 0.0843632048079589,
      "delta": 0.788510040477152,
      "success": true,
      "log_likelihood": -14.819563563943685,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.5,
      "alpha": 0.01,
      "delta": 0.6892795592795578,
      "success": true,
      "log_likelihood": -11.584882603544118,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.9854261288509745,
      "alpha": 7.2159505258810235,
      "delta": 2.0,
      "success": true,
      "log_likelihood": -0.0008763941116433627,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.9919862653730503,
      "alpha": 5.983768061593645,
      "delta": 0.05259515135365919,
      "success": true,
      "log_likelihood": -71.79918886949929,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.7832510151579056,
      "alpha": 0.13354959166875063,
      "delta": 0.42082973810084917,
      "success": true,
      "log_likelihood": -16.42979739369097,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.6836828638357314,
      "alpha": 0.07057824730600976,
      "delta": 0.6568843794734759,
      "success": true,
      "log_likelihood": -14.228367949221893,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.8749985320045615,
      "alpha": 0.04085848359728097,
      "delta": 0.18282691873766307,
      "success": true,
      "log_likelihood": -22.901832192515318,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.5413504993559105,
      "alpha": 0.17947053126072327,
      "delta": 0.4243467617535071,
      "success": true,
      "log_likelihood": -16.503973834973117,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.7499726326505832,
      "alpha": 0.018163585920993215,
      "delta": 1.0237943661965099,
      "success": true,
      "log_likelihood": -7.8017742573690185,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.8721815696020923,
      "alpha": 11.45927547779692,
      "delta": 0.01,
      "success": true,
      "log_likelihood": -28.678776783822475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 1.5,
      "alpha": 0.016667483571193038,
      "delta": 0.3699192030181843,
      "success": true,
      "log_likelihood": -21.725043824439048,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 1.0047930936120655,
      "alpha": 3.660114171609036,
      "delta": 0.13339841036380853,
      "success": true,
      "log_likelihood": -25.713210744534344,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.5,
      "alpha": 0.08422775505624451,
      "delta": 0.10965620604109366,
      "success": true,
      "log_likelihood": -23.65250277449937,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.5,
      "alpha": 0.01,
      "delta": 0.6779751596068637,
      "success": true,
      "log_likelihood": -11.92329429155153,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.7499999809201351,
      "alpha": 2.9192950592174003,
      "delta": 0.01,
      "success": true,
      "log_likelihood": -8.375853381279857,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.623268462418315,
      "alpha": 1.0242465134048933,
      "delta": 0.6938806903588085,
      "success": true,
      "log_likelihood": -7.264753655648927,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.5,
      "alpha": 0.029337613309819304,
      "delta": 0.1270162857704171,
      "success": true,
      "log_likelihood": -23.936680086823834,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.718847174032547,
      "alpha": 13.682070852942983,
      "delta": 0.01,
      "success": true,
      "log_likelihood": -8.369946174625884,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.8305426215910597,
      "alpha": 0.047664300647119316,
      "delta": 0.4219108493869865,
      "success": true,
      "log_likelihood": -19.229623099301417,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.8999999878969457,
      "alpha": 0.19005720755481104,
      "delta": 0.15173938936981612,
      "success": true,
      "log_likelihood": -11.65250182983402,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.7999999879717844,
      "alpha": 0.049646360704267485,
      "delta": 1.4753891861005528,
      "success": true,
      "log_likelihood": -6.006072595993487,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.6695121192368649,
      "alpha": 0.3315468049126181,
      "delta": 0.5052759152841882,
      "success": true,
      "log_likelihood": -11.873276049615761,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "tau": 0.8000003843826539,
      "alpha": 0.018089046410706317,
      "delta": 0.29700035713352196,
      "success": true,
      "log_likelihood": -21.14413320195783,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "tau": {
        "r": 0.923567173983905,
        "p": 1.3835079691516676e-42
      },
      "alpha": {
        "r": 0.18992526283518474,
        "p": 0.05840582521714338
      },
      "delta": {
        "r": 0.3460213026471734,
        "p": 0.0004214149665346521
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 40.567062186601554,
  "bic_Control": 30.505446727010842,
  "bic_Cocaine": 49.58059270248489,
  "bic_results": {
    "average_bic": 40.567062186601554,
    "individual_bics": [
      26.535223384627525,
      45.26189259812797,
      30.62224197896929,
      37.71734486001719,
      31.29078406050552,
      38.72781516244777,
      11.666729667561375,
      39.551474428531996,
      11.666729667561375,
      39.494417276764125,
      10.812310258565814,
      27.460354074523234,
      34.56393615611162,
      11.666729667561375,
      11.666729667561375,
      11.666729667561375,
      11.666729667561375,
      14.487411218493126,
      24.557008705354612,
      11.666729667561375,
      43.23707882928734,
      29.191967014397033,
      39.09061499438243,
      45.0200664750229,
      44.165980456827455,
      38.27353684144071,
      39.523995831950174,
      21.323850843542253,
      30.866108167114238,
      43.83167363480817,
      11.666729667561375,
      30.41990967527333,
      51.23595366099893,
      39.00429829002677,
      11.666729667561375,
      36.04894276241923,
      28.9182865530411,
      43.458814298018,
      50.298576097300554,
      30.106412334994143,
      53.62732632495431,
      41.44360848491813,
      26.564426519656838,
      44.33108540132643,
      39.79341652543342,
      307.706323921742,
      53.27185656889458,
      47.06406741959427,
      40.05227393524573,
      57.06258748730245,
      48.06290521421609,
      41.689608484780365,
      46.913138273736976,
      52.757286444447175,
      45.44343657636081,
      18.681649541601985,
      26.75102174174082,
      38.63741756100583,
      27.46643883065194,
      38.572365848942525,
      52.26148298480082,
      45.46046615106481,
      62.2455307849044,
      50.117711155292554,
      32.89045081700763,
      40.60023774125418,
      28.43103740950539,
      35.10999503935649,
      40.389683943255704,
      33.92032202245657,
      10.752309603591618,
      154.3489345543669,
      43.610151602750264,
      39.207292713812116,
      56.55422120039897,
      43.75850448531456,
      26.354105330106368,
      68.10811038301328,
      54.20064446424642,
      62.176978304437014,
      58.05556236436708,
      34.59714539847139,
      27.502263577928044,
      25.280064126666183,
      58.623916989015996,
      27.4904491646201,
      49.20980301397117,
      34.05556047503637,
      22.762702007355305,
      34.49710891459985,
      53.038823219283984
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        26.535223384627525,
        45.26189259812797,
        30.62224197896929,
        37.71734486001719,
        31.29078406050552,
        38.72781516244777,
        11.666729667561375,
        39.551474428531996,
        11.666729667561375,
        39.494417276764125,
        10.812310258565814,
        27.460354074523234,
        34.56393615611162,
        11.666729667561375,
        11.666729667561375,
        11.666729667561375,
        11.666729667561375,
        14.487411218493126,
        24.557008705354612,
        11.666729667561375,
        43.23707882928734,
        29.191967014397033,
        39.09061499438243,
        45.0200664750229,
        44.165980456827455,
        38.27353684144071,
        39.523995831950174,
        21.323850843542253,
        30.866108167114238,
        43.83167363480817,
        11.666729667561375,
        30.41990967527333,
        51.23595366099893,
        39.00429829002677,
        11.666729667561375,
        36.04894276241923,
        28.9182865530411,
        43.458814298018,
        50.298576097300554,
        30.106412334994143,
        53.62732632495431,
        41.44360848491813,
        26.564426519656838
      ],
      "Cocaine": [
        44.33108540132643,
        39.79341652543342,
        307.706323921742,
        53.27185656889458,
        47.06406741959427,
        40.05227393524573,
        57.06258748730245,
        48.06290521421609,
        41.689608484780365,
        46.913138273736976,
        52.757286444447175,
        45.44343657636081,
        18.681649541601985,
        26.75102174174082,
        38.63741756100583,
        27.46643883065194,
        38.572365848942525,
        52.26148298480082,
        45.46046615106481,
        62.2455307849044,
        50.117711155292554,
        32.89045081700763,
        40.60023774125418,
        28.43103740950539,
        35.10999503935649,
        40.389683943255704,
        33.92032202245657,
        10.752309603591618,
        154.3489345543669,
        43.610151602750264,
        39.207292713812116,
        56.55422120039897,
        43.75850448531456,
        26.354105330106368,
        68.10811038301328,
        54.20064446424642,
        62.176978304437014,
        58.05556236436708,
        34.59714539847139,
        27.502263577928044,
        25.280064126666183,
        58.623916989015996,
        27.4904491646201,
        49.20980301397117,
        34.05556047503637,
        22.762702007355305,
        34.49710891459985,
        53.038823219283984
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- tau: r = 0.924\n- alpha: r = 0.190\n- delta: r = 0.346",
  "previous_models": [
    "Specification: fair_prop = token_self / (token_self + token_opp)\nfairness_threshold = tau * fair_prop * 100\nU = delta * split_self - alpha * max(0, fairness_threshold - splitperc_self)\nSummary: A nonlinear threshold model that predicts responder behavior using three psychologically distinct parameters: a personal fairness threshold (\u03c4) scaling the proportional entitlement from own contribution; a strictness parameter (\u03b1) penalizing offers falling below this fairness threshold; and an absolute offer sensitivity parameter (\u03b4) that increases utility with large absolute offers regardless of fairness. Utility drops sharply when offers fall below the individualized threshold, and rises with higher amounts, supporting flexible, identifiable parameter recovery and capturing both context and nonlinearity.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 40.567062186601554\nOverall Accuracy: 0.7839\nGroup Accuracies:\n- Control: 0.8301\n- Cocaine: 0.7425\n\nParameter Recovery:\n- tau: r = 0.924\n- alpha: r = 0.190\n- delta: r = 0.346"
  ]
}