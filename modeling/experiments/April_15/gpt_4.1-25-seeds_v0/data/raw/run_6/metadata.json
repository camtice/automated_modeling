{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "\n\n---\n\n**UPDATED INSTRUCTIONS**\n\nBefore formalizing your computational model, follow these expanded and more rigorous steps. Your goal is to maximize parameter recoverability, avoid parameter tradeoff/redundancy, and capture nonlinear, psychologically plausible responder mechanisms beyond linear or simple threshold models.\n\n1. **Carefully Delineate Nonlinear and Context-Sensitive Mechanisms:**\n   - Explicitly map where discontinuous, thresholded, or sigmoid-like changes in utility are plausible.\n   - Consider forms that sharply distinguish \u201cbelow threshold\u201d (unfair) from \u201cabove threshold\u201d (fair or generous), including hard indicator functions, step switches, or nonlinear penalties (e.g., quadratic, exponential, or log penalty for unfairness).\n   - Probe the idea of *asymmetric sensitivity*: Rejection due to offers *below* entitlement is stronger\u2014build different parameterized penalties or bonus regions for each.\n   - Examine whether absolute (split_self) and proportional (relative to entitlement) offer effects interact in a way that explains observed behavior (e.g., unfairness only matters for small offers, or large pots amplify perceived unfairness).\n\n2. **Ensure Orthogonal, Distinct, and Recoverable Parameter Roles:**\n   - For each learnable parameter, pre-commit in your reasoning to how you will make it uniquely impactful\u2014even if tau and alpha both affect acceptance, describe how their effects will be behaviorally separable and why.\n   - Avoid multiple parameters in the same zone unless they work on non-overlapping regions (e.g., one governs \u201cbelow threshold\u201d penalty, one \u201cabove threshold\u201d bonus, or one controls nonlinear growth, the other threshold placement).\n   - Strongly consider models with s-shaped, piecewise, or multiplicative transformations so each parameter modulates a non-redundant mechanism.\n   - *REQUIRED: In your reasoning section, conceptually visualize or describe the predicted shape or parameter effects (e.g., \u201cA change in alpha only steepens rejection when offers are unfair, but does not affect offers above threshold,\u201d etc).*\n\n3. **Evolve Beyond Additive and Linear Models:**\n   - *Mandatory*: Include at least one interaction or nonlinear (quadratic, multiplicative, or exponentiated) component. Purely additive models are discouraged unless justified by compelling parsimony and recoverability.\n   - Explore hard or soft threshold logics, such as \u201cutility = very negative if (offer < fairness_threshold), quickly rising near threshold,\u201d or exponential penalty for large unfairness.\n   - If using \u201cpenalty below threshold,\u201d consider non-linear growth (e.g., quadratic, log, or saturating) so that alpha does not simply mimic tau.\n   - Consider \u201closs aversion\u201d analogs (different parameterizations for negative vs. positive deviation from the threshold) or \u201cstepwise\u201d utility regions.\n\n4. **Exploit Both Offer Amount and Fairness Contextually:**\n   - Derive model terms that leverage both absolute and proportional offer information, or that contextualize unfairness by pot size, entitlement, or other variables in the dataset.\n\n5. **Prioritize Parameter Identifiability and Psychological Interpretability:**\n   - Use a maximum of three well-separated, non-overlapping learnable parameters. Each should be maximally recoverable, as supported by the distinct functional role in the model.\n   - In stepwise reasoning, propose simulations or analytic checks for parameter identifiability and describe how the model can be tested for tradeoffs.\n   - Suggest briefly (in your reasoning) how the model will discriminate between, e.g., a very strict unfairness-averse participant and a generous but greedy one\u2014i.e., what parameter patterns would look like for the two.\n\n6. **Formalization and Output Format:**\n   - After your reasoning, supply the full mathematical model in <MODEL> tags. No explanatory text in those tags.\n   - List and clearly document all variables and parameters, specifying explicit numerical bounds (finite, inclusive) for each learnable parameter, in JSON between <VARIABLES> tags.\n   - Specify the target variable in <target_variable> tags.\n   - Provide a purely descriptive <SUMMARY> (do not mention the task name).\n   - Use Python-safe, non-reserved variable/parameter names.\n\n**Additional Creative Challenge:**  \nAttempt a model structure that uses at least one of the following: a non-additive or saturating penalty, a loss/gain asymmetry, or an explicit discrete switch (indicator or step function), justified by data structure and psychological plausibility.\n\nBe bold and innovative in structure, while always grounding parameters in uniquely identifiable psychological processes.\n\n---",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: \n\n---\n\n**UPDATED INSTRUCTIONS**\n\nBefore formalizing your computational model, follow these expanded and more rigorous steps. Your goal is to maximize parameter recoverability, avoid parameter tradeoff/redundancy, and capture nonlinear, psychologically plausible responder mechanisms beyond linear or simple threshold models.\n\n1. **Carefully Delineate Nonlinear and Context-Sensitive Mechanisms:**\n   - Explicitly map where discontinuous, thresholded, or sigmoid-like changes in utility are plausible.\n   - Consider forms that sharply distinguish \u201cbelow threshold\u201d (unfair) from \u201cabove threshold\u201d (fair or generous), including hard indicator functions, step switches, or nonlinear penalties (e.g., quadratic, exponential, or log penalty for unfairness).\n   - Probe the idea of *asymmetric sensitivity*: Rejection due to offers *below* entitlement is stronger\u2014build different parameterized penalties or bonus regions for each.\n   - Examine whether absolute (split_self) and proportional (relative to entitlement) offer effects interact in a way that explains observed behavior (e.g., unfairness only matters for small offers, or large pots amplify perceived unfairness).\n\n2. **Ensure Orthogonal, Distinct, and Recoverable Parameter Roles:**\n   - For each learnable parameter, pre-commit in your reasoning to how you will make it uniquely impactful\u2014even if tau and alpha both affect acceptance, describe how their effects will be behaviorally separable and why.\n   - Avoid multiple parameters in the same zone unless they work on non-overlapping regions (e.g., one governs \u201cbelow threshold\u201d penalty, one \u201cabove threshold\u201d bonus, or one controls nonlinear growth, the other threshold placement).\n   - Strongly consider models with s-shaped, piecewise, or multiplicative transformations so each parameter modulates a non-redundant mechanism.\n   - *REQUIRED: In your reasoning section, conceptually visualize or describe the predicted shape or parameter effects (e.g., \u201cA change in alpha only steepens rejection when offers are unfair, but does not affect offers above threshold,\u201d etc).*\n\n3. **Evolve Beyond Additive and Linear Models:**\n   - *Mandatory*: Include at least one interaction or nonlinear (quadratic, multiplicative, or exponentiated) component. Purely additive models are discouraged unless justified by compelling parsimony and recoverability.\n   - Explore hard or soft threshold logics, such as \u201cutility = very negative if (offer < fairness_threshold), quickly rising near threshold,\u201d or exponential penalty for large unfairness.\n   - If using \u201cpenalty below threshold,\u201d consider non-linear growth (e.g., quadratic, log, or saturating) so that alpha does not simply mimic tau.\n   - Consider \u201closs aversion\u201d analogs (different parameterizations for negative vs. positive deviation from the threshold) or \u201cstepwise\u201d utility regions.\n\n4. **Exploit Both Offer Amount and Fairness Contextually:**\n   - Derive model terms that leverage both absolute and proportional offer information, or that contextualize unfairness by pot size, entitlement, or other variables in the dataset.\n\n5. **Prioritize Parameter Identifiability and Psychological Interpretability:**\n   - Use a maximum of three well-separated, non-overlapping learnable parameters. Each should be maximally recoverable, as supported by the distinct functional role in the model.\n   - In stepwise reasoning, propose simulations or analytic checks for parameter identifiability and describe how the model can be tested for tradeoffs.\n   - Suggest briefly (in your reasoning) how the model will discriminate between, e.g., a very strict unfairness-averse participant and a generous but greedy one\u2014i.e., what parameter patterns would look like for the two.\n\n6. **Formalization and Output Format:**\n   - After your reasoning, supply the full mathematical model in <MODEL> tags. No explanatory text in those tags.\n   - List and clearly document all variables and parameters, specifying explicit numerical bounds (finite, inclusive) for each learnable parameter, in JSON between <VARIABLES> tags.\n   - Specify the target variable in <target_variable> tags.\n   - Provide a purely descriptive <SUMMARY> (do not mention the task name).\n   - Use Python-safe, non-reserved variable/parameter names.\n\n**Additional Creative Challenge:**  \nAttempt a model structure that uses at least one of the following: a non-additive or saturating penalty, a loss/gain asymmetry, or an explicit discrete switch (indicator or step function), justified by data structure and psychological plausibility.\n\nBe bold and innovative in structure, while always grounding parameters in uniquely identifiable psychological processes.\n\n---\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let\u2019s proceed step by step as required:\n\n---\n### **STEP 1: Map Nonlinear and Context-Sensitive Mechanisms**\n\nResponder behavior in ultimatum/offer tasks is typically:\n- Highly sensitive to *unfairness*, i.e., when the offer is below perceived entitlement.\n- Much less sensitive to additional money once the share is above a fairness threshold.\n- Behavioral evidence, as well as prior models, shows that *below-threshold offers* can trigger steep\u2014sometimes nearly step-like\u2014drops in acceptance (with either hard or soft thresholds).\n\n#### Contextual Entitlement\nIn this dataset, *token_self* and *token_opp* encode entitlements. Let:\n- **entitlement_participant = combined_earning \u00d7 (token_self) / (token_self + token_opp)**\nThis is psychologically plausible: \u201cI found x% of tokens, so my fair share is x% of the pot.\u201d\n\n#### Offer Contextualization\n- Received (proposed) share = **split_self**\n- Proportional offer = **splitperc_self** (but we can define this directly within the formula using entitlements above).\n\n#### Nonlinear Mechanisms\nI will:\n- Implement a soft threshold around \u201centitlement\u201d\u2014i.e., how much below the entitlement the offer is\u2014using a *steep sigmoid* or, equivalently, an S-shaped penalty function.\n- Impose an *asymmetric penalty* for below-entitlement offers (steep penalty) and a milder, saturating reward for above-entitlement offers (to capture aversion to unfairness, but not \u201cover-favoring\u201d generosity).\n- Let *alpha_unfair* control steepness of below-threshold penalty.  \n- Let *beta_reward* control the reward strength for above-entitlement offers.\n- Let *threshold_softness* or *tau* control how soft/steep the s-shaped transition is.\n\n---\n### **STEP 2: Orthogonal, Distinct, Recoverable Parameters**\n\n- **alpha_unfair** \u2013 steepness/strength of rejection below entitlement; only affects unfair offers.\n- **beta_reward** \u2013 degree of reward/sweetening for generous offers; only active when offered above entitlement.\n- **tau_threshold** \u2013 controls softness of transition: for large tau, response becomes more step-like at the entitlement threshold; if tau is small, smoother transition.\n\n**Parameter roles are orthogonal:**\n- *alpha_unfair* does not influence above-entitlement trials.\n- *beta_reward* only affects \u201cgenerous\u201d offers.\n- *tau_threshold* governs steepness, shaping curve around the entitlement boundary.\n\nThis should allow good recoverability; changing one does not simply mimic effects of the others.\n\n---\n### **STEP 3: Non-additive, Nonlinear, Interaction Effects**\n\n- I will implement a model in which:\n    - If **split_self < entitlement_participant**: penalty = -alpha_unfair \u00d7 (entitlement_participant - split_self) **tau_threshold**  (superlinear penalty)\n    - If **split_self >= entitlement_participant**: reward = beta_reward \u00d7 log(1 + (split_self - entitlement_participant))  (saturating bonus)\n\n- This structure provides:\n    - **Superlinear, nonlinear penalty** for unfairness (capturing \u201csharp rejection\u201d effect\u2014penalty grows rapidly as the offer gets more unfair).\n    - **Saturating gain** for generous offers\u2014less change for additional generosity (matches human behavior; people do not become vastly more likely to accept for hyper-generous offers).\n    - A *hard switch* to distinguish the regions, with different mechanisms operating on either side of the entitlement boundary\u2014resulting in a piecewise, nonlinear, asymmetric model.\n\n---\n### **STEP 4: Use Both Offer and Contextual Fairness**\n\n- All terms depend on **split_self** (absolute amount) and *entitlement_participant* (relative fairness).\n- This allows poverty-rejection (\u201cI won\u2019t take a low offer just because the pot is small\u201d) and unfairness-rejection (\u201cThat\u2019s not my share!\u201d).\n\n---\n### **STEP 5: Identifiability & Interpretability**\n\n- *alpha_unfair* is only \u201cactive\u201d on unfair offers and only modulates steepness and depth of rejection.\n- *beta_reward* only matters when offers are in the generous region (above fairness); increasing it increases probability of acceptance for generous offers, but does nothing for unfair offers.\n- *tau_threshold* sets *how steeply* the disutility below entitlement grows\u2014even if alpha is large, a smooth tau means \u201cgradually increasing penalty,\u201d while a large tau gives \u201cstep-like\u201d behavior.\n- Simulations: If alpha_unfair is huge and beta_reward is low, participant is \u201cfairness stickler\u201d\u2014will accept only above threshold, and extra generosity isn\u2019t sweetened much. If beta_reward is high, participant is \u201cresponsive to generosity.\u201d\n\n---\n### **STEP 6: Parameter Bounds**\n\n- For *alpha_unfair*: [0.01, 10] (must not be negative; large alpha gives steep penalty)\n- For *beta_reward*: [0.01, 10] (must not be negative)\n- For *tau_threshold*: [1, 5] (1 = modestly superlinear; 5 = close to quadratic/cubic/step-like)\n\nAll can be comfortably recovered in the dataset scale, with \u00a3 values from 0\u201390.\n\n---\n### **Parameter Recovery Reasoning and Model Discrimination**\n\n- A high *alpha_unfair* and high *tau_threshold* yields nearly step-like hard rejection for any offer below entitlement.\n- Increasing *beta_reward* increases acceptance rates only for offers > entitlement, letting us tell apart \u201cuncompromising\u201d and \u201csweetened-by-generosity\u201d participants.\n- If both are low, participant is mostly insensitive or random.\n\n---\n## **Mathematical Model Structure**\n\n**Let:**\n- ent_share = combined_earning \u00d7 (token_self)/(token_self + token_opp)\n\nThen:\n\n\\[\nU = \n\\begin{cases}\n   -\\alpha\\_unfair \\cdot (ent\\_share - split\\_self)^{\\tau\\_threshold} & \\text{if } split\\_self < ent\\_share \\\\\n   \\beta\\_reward \\cdot \\log\\left[1 + (split\\_self - ent\\_share)\\right] & \\text{if } split\\_self \\geq ent\\_share\n\\end{cases}\n\\]\n\n**The logistic function (with temperature 1) is then applied to \\( U \\) to get P(accept).**\n\n---\n\n### **Full Output, as per Instructions**\n\n<MODEL>\nent_share = combined_earning * token_self / (token_self + token_opp)\nU = (\n    -alpha_unfair * (ent_share - split_self) ** tau_threshold if split_self < ent_share\n    else\n    beta_reward * log(1 + (split_self - ent_share))\n)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"ent_share\": {\n      \"description\": \"Contextual entitlement share for participant, i.e., fair amount relative to token contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 90,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount to be divided in the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 90,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share of the pot for the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 90,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha_unfair\": {\n      \"description\": \"Penalty strength for accepting offers below entitlement; higher means sharper rejection of unfair offers.\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.01,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_reward\": {\n      \"description\": \"Reward sensitivity for generous (above entitlement) offers; higher means more boost for generous offers.\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.01,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"tau_threshold\": {\n      \"description\": \"Exponent controlling the nonlinearity/steepness of penalty for unfair offers; higher tau means steeper/stepper penalty.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 1,\n          \"high\": 5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility for accepting the offer, prior to logistic transformation.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA piecewise nonlinear utility model for response to offers, with superlinear penalty for unfair offers below contextual entitlement and saturating bonus for generosity above entitlement. The model uses three well-separated, recoverable parameters: one for unfairness aversion, one for generosity bonus, and one for steepness, ensuring high identifiability and psychological interpretability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha_unfair', 'beta_reward', 'tau_threshold']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                ent_share = combined_earning * token_self / (token_self + token_opp)\nU = (\n    -alpha_unfair * (ent_share - split_self) ** tau_threshold if split_self < ent_share\n    else\n    beta_reward * log(1 + (split_self - ent_share))\n)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"ent_share\": {\n      \"description\": \"Contextual entitlement share for participant, i.e., fair amount relative to token contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 90,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount to be divided in the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 90,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share of the pot for the participant (in \\u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 90,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha_unfair\": {\n      \"description\": \"Penalty strength for accepting offers below entitlement; higher means sharper rejection of unfair offers.\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.01,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_reward\": {\n      \"description\": \"Reward sensitivity for generous (above entitlement) offers; higher means more boost for generous offers.\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.01,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"tau_threshold\": {\n      \"description\": \"Exponent controlling the nonlinearity/steepness of penalty for unfair offers; higher tau means steeper/stepper penalty.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 1,\n          \"high\": 5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility for accepting the offer, prior to logistic transformation.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n</YOUR RESPONSE>\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha_unfair=1, beta_reward=1, tau_threshold=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        if (token_self + token_opp) == 0:\n          ent_share = combined_earning * 0.5  # Avoid division by zero, assume equal share when no tokens found\n        else:\n          ent_share = combined_earning * token_self / (token_self + token_opp)\n\n        if split_self < ent_share:\n            U = -alpha_unfair * (ent_share - split_self) ** tau_threshold\n        else:\n            U = beta_reward * math.log(1 + (split_self - ent_share))\n\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"group1\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 11, \"token_self\": 15, \"combined_earning\": 48, \"split_opp\": 24.0, \"split_self\": 24.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 24.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 24.0}, {\"ID\": 1, \"group\": \"group1\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 13, \"token_self\": 14, \"combined_earning\": 49, \"split_opp\": 24.5, \"split_self\": 24.5, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 24.5, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 24.5}]'\n\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744725881.75985
    }
  ],
  "learnable_parameters": {
    "alpha_unfair": {
      "description": "Penalty strength for accepting offers below entitlement; higher means sharper rejection of unfair offers.",
      "range": {
        "min": 0.01,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.01,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta_reward": {
      "description": "Reward sensitivity for generous (above entitlement) offers; higher means more boost for generous offers.",
      "range": {
        "min": 0.01,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.01,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "tau_threshold": {
      "description": "Exponent controlling the nonlinearity/steepness of penalty for unfair offers; higher tau means steeper/stepper penalty.",
      "range": {
        "min": 1,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 1,
          "high": 5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "ent_share = combined_earning * token_self / (token_self + token_opp)\nU = (\n    -alpha_unfair * (ent_share - split_self) ** tau_threshold if split_self < ent_share\n    else\n    beta_reward * log(1 + (split_self - ent_share))\n)",
  "variable_descriptions": {
    "ent_share": {
      "description": "Contextual entitlement share for participant, i.e., fair amount relative to token contribution.",
      "range": {
        "min": 0,
        "max": 90,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "combined_earning": {
      "description": "Total amount to be divided in the trial.",
      "range": {
        "min": 0,
        "max": 90,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": 30,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": 30,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Proposed share of the pot for the participant (in \u00a3).",
      "range": {
        "min": 0,
        "max": 90,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "alpha_unfair": {
      "description": "Penalty strength for accepting offers below entitlement; higher means sharper rejection of unfair offers.",
      "range": {
        "min": 0.01,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.01,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta_reward": {
      "description": "Reward sensitivity for generous (above entitlement) offers; higher means more boost for generous offers.",
      "range": {
        "min": 0.01,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.01,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "tau_threshold": {
      "description": "Exponent controlling the nonlinearity/steepness of penalty for unfair offers; higher tau means steeper/stepper penalty.",
      "range": {
        "min": 1,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 1,
          "high": 5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Utility for accepting the offer, prior to logistic transformation.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A piecewise nonlinear utility model for response to offers, with superlinear penalty for unfair offers below contextual entitlement and saturating bonus for generosity above entitlement. The model uses three well-separated, recoverable parameters: one for unfairness aversion, one for generosity bonus, and one for steepness, ensuring high identifiability and psychological interpretability.",
  "target_variable": "accept",
  "full_reasoning": "Let\u2019s proceed step by step as required:\n\n---\n### **STEP 1: Map Nonlinear and Context-Sensitive Mechanisms**\n\nResponder behavior in ultimatum/offer tasks is typically:\n- Highly sensitive to *unfairness*, i.e., when the offer is below perceived entitlement.\n- Much less sensitive to additional money once the share is above a fairness threshold.\n- Behavioral evidence, as well as prior models, shows that *below-threshold offers* can trigger steep\u2014sometimes nearly step-like\u2014drops in acceptance (with either hard or soft thresholds).\n\n#### Contextual Entitlement\nIn this dataset, *token_self* and *token_opp* encode entitlements. Let:\n- **entitlement_participant = combined_earning \u00d7 (token_self) / (token_self + token_opp)**\nThis is psychologically plausible: \u201cI found x% of tokens, so my fair share is x% of the pot.\u201d\n\n#### Offer Contextualization\n- Received (proposed) share = **split_self**\n- Proportional offer = **splitperc_self** (but we can define this directly within the formula using entitlements above).\n\n#### Nonlinear Mechanisms\nI will:\n- Implement a soft threshold around \u201centitlement\u201d\u2014i.e., how much below the entitlement the offer is\u2014using a *steep sigmoid* or, equivalently, an S-shaped penalty function.\n- Impose an *asymmetric penalty* for below-entitlement offers (steep penalty) and a milder, saturating reward for above-entitlement offers (to capture aversion to unfairness, but not \u201cover-favoring\u201d generosity).\n- Let *alpha_unfair* control steepness of below-threshold penalty.  \n- Let *beta_reward* control the reward strength for above-entitlement offers.\n- Let *threshold_softness* or *tau* control how soft/steep the s-shaped transition is.\n\n---\n### **STEP 2: Orthogonal, Distinct, Recoverable Parameters**\n\n- **alpha_unfair** \u2013 steepness/strength of rejection below entitlement; only affects unfair offers.\n- **beta_reward** \u2013 degree of reward/sweetening for generous offers; only active when offered above entitlement.\n- **tau_threshold** \u2013 controls softness of transition: for large tau, response becomes more step-like at the entitlement threshold; if tau is small, smoother transition.\n\n**Parameter roles are orthogonal:**\n- *alpha_unfair* does not influence above-entitlement trials.\n- *beta_reward* only affects \u201cgenerous\u201d offers.\n- *tau_threshold* governs steepness, shaping curve around the entitlement boundary.\n\nThis should allow good recoverability; changing one does not simply mimic effects of the others.\n\n---\n### **STEP 3: Non-additive, Nonlinear, Interaction Effects**\n\n- I will implement a model in which:\n    - If **split_self < entitlement_participant**: penalty = -alpha_unfair \u00d7 (entitlement_participant - split_self) **tau_threshold**  (superlinear penalty)\n    - If **split_self >= entitlement_participant**: reward = beta_reward \u00d7 log(1 + (split_self - entitlement_participant))  (saturating bonus)\n\n- This structure provides:\n    - **Superlinear, nonlinear penalty** for unfairness (capturing \u201csharp rejection\u201d effect\u2014penalty grows rapidly as the offer gets more unfair).\n    - **Saturating gain** for generous offers\u2014less change for additional generosity (matches human behavior; people do not become vastly more likely to accept for hyper-generous offers).\n    - A *hard switch* to distinguish the regions, with different mechanisms operating on either side of the entitlement boundary\u2014resulting in a piecewise, nonlinear, asymmetric model.\n\n---\n### **STEP 4: Use Both Offer and Contextual Fairness**\n\n- All terms depend on **split_self** (absolute amount) and *entitlement_participant* (relative fairness).\n- This allows poverty-rejection (\u201cI won\u2019t take a low offer just because the pot is small\u201d) and unfairness-rejection (\u201cThat\u2019s not my share!\u201d).\n\n---\n### **STEP 5: Identifiability & Interpretability**\n\n- *alpha_unfair* is only \u201cactive\u201d on unfair offers and only modulates steepness and depth of rejection.\n- *beta_reward* only matters when offers are in the generous region (above fairness); increasing it increases probability of acceptance for generous offers, but does nothing for unfair offers.\n- *tau_threshold* sets *how steeply* the disutility below entitlement grows\u2014even if alpha is large, a smooth tau means \u201cgradually increasing penalty,\u201d while a large tau gives \u201cstep-like\u201d behavior.\n- Simulations: If alpha_unfair is huge and beta_reward is low, participant is \u201cfairness stickler\u201d\u2014will accept only above threshold, and extra generosity isn\u2019t sweetened much. If beta_reward is high, participant is \u201cresponsive to generosity.\u201d\n\n---\n### **STEP 6: Parameter Bounds**\n\n- For *alpha_unfair*: [0.01, 10] (must not be negative; large alpha gives steep penalty)\n- For *beta_reward*: [0.01, 10] (must not be negative)\n- For *tau_threshold*: [1, 5] (1 = modestly superlinear; 5 = close to quadratic/cubic/step-like)\n\nAll can be comfortably recovered in the dataset scale, with \u00a3 values from 0\u201390.\n\n---\n### **Parameter Recovery Reasoning and Model Discrimination**\n\n- A high *alpha_unfair* and high *tau_threshold* yields nearly step-like hard rejection for any offer below entitlement.\n- Increasing *beta_reward* increases acceptance rates only for offers > entitlement, letting us tell apart \u201cuncompromising\u201d and \u201csweetened-by-generosity\u201d participants.\n- If both are low, participant is mostly insensitive or random.\n\n---\n## **Mathematical Model Structure**\n\n**Let:**\n- ent_share = combined_earning \u00d7 (token_self)/(token_self + token_opp)\n\nThen:\n\n\\[\nU = \n\\begin{cases}\n   -\\alpha\\_unfair \\cdot (ent\\_share - split\\_self)^{\\tau\\_threshold} & \\text{if } split\\_self < ent\\_share \\\\\n   \\beta\\_reward \\cdot \\log\\left[1 + (split\\_self - ent\\_share)\\right] & \\text{if } split\\_self \\geq ent\\_share\n\\end{cases}\n\\]\n\n**The logistic function (with temperature 1) is then applied to \\( U \\) to get P(accept).**\n\n---\n\n### **Full Output, as per Instructions**\n\n<MODEL>\nent_share = combined_earning * token_self / (token_self + token_opp)\nU = (\n    -alpha_unfair * (ent_share - split_self) ** tau_threshold if split_self < ent_share\n    else\n    beta_reward * log(1 + (split_self - ent_share))\n)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"ent_share\": {\n      \"description\": \"Contextual entitlement share for participant, i.e., fair amount relative to token contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 90,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount to be divided in the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 90,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share of the pot for the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 90,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha_unfair\": {\n      \"description\": \"Penalty strength for accepting offers below entitlement; higher means sharper rejection of unfair offers.\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.01,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_reward\": {\n      \"description\": \"Reward sensitivity for generous (above entitlement) offers; higher means more boost for generous offers.\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.01,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"tau_threshold\": {\n      \"description\": \"Exponent controlling the nonlinearity/steepness of penalty for unfair offers; higher tau means steeper/stepper penalty.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 1,\n          \"high\": 5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility for accepting the offer, prior to logistic transformation.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA piecewise nonlinear utility model for response to offers, with superlinear penalty for unfair offers below contextual entitlement and saturating bonus for generosity above entitlement. The model uses three well-separated, recoverable parameters: one for unfairness aversion, one for generosity bonus, and one for steepness, ensuring high identifiability and psychological interpretability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: ent_share = combined_earning * token_self / (token_self + token_opp)\nU = (\n    -alpha_unfair * (ent_share - split_self) ** tau_threshold if split_self < ent_share\n    else\n    beta_reward * log(1 + (split_self - ent_share))\n)\nSummary: A piecewise nonlinear utility model for response to offers, with superlinear penalty for unfair offers below contextual entitlement and saturating bonus for generosity above entitlement. The model uses three well-separated, recoverable parameters: one for unfairness aversion, one for generosity bonus, and one for steepness, ensuring high identifiability and psychological interpretability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha_unfair=1, beta_reward=1, tau_threshold=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        if (token_self + token_opp) == 0:\n          ent_share = combined_earning * 0.5  # Avoid division by zero, assume equal share when no tokens found\n        else:\n          ent_share = combined_earning * token_self / (token_self + token_opp)\n\n        if split_self < ent_share:\n            U = -alpha_unfair * (ent_share - split_self) ** tau_threshold\n        else:\n            U = beta_reward * math.log(1 + (split_self - ent_share))\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6144688644688644,
  "group_accuracies": {
    "Control": 0.6072351421188631,
    "Cocaine": 0.6209490740740741
  },
  "group_parameter_averages": {
    "Control": {
      "alpha_unfair": 0.17163637099020793,
      "beta_reward": 8.61253383297112,
      "tau_threshold": 2.0969815561096437
    },
    "Cocaine": {
      "alpha_unfair": 0.5075342515265768,
      "beta_reward": 7.530910640427402,
      "tau_threshold": 1.8884489505355044
    }
  },
  "fitting_results": [
    {
      "alpha_unfair": 1.9030050335990998,
      "beta_reward": 0.8796023676932552,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -7.835540050176789,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.08493223316511793,
      "beta_reward": 10.0,
      "tau_threshold": 1.8058451191090121,
      "success": true,
      "log_likelihood": -20.94789187274426,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.015548863343425262,
      "beta_reward": 7.101468477008993,
      "tau_threshold": 3.4324310067093418,
      "success": true,
      "log_likelihood": -18.627296467261182,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 7.472885374524767,
      "tau_threshold": 3.8821364223258588,
      "success": true,
      "log_likelihood": -17.840127026284577,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 4.6213772821992265,
      "success": true,
      "log_likelihood": -14.158005832343562,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 9.502629854383649,
      "tau_threshold": 3.2582382956360867,
      "success": true,
      "log_likelihood": -21.171252645934185,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -24.02750263402906,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 4.223336577148627,
      "tau_threshold": 3.3545820263418924,
      "success": true,
      "log_likelihood": -21.00997369117866,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -24.02750263402905,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.18713219132468856,
      "beta_reward": 10.0,
      "tau_threshold": 1.8892462503932084,
      "success": true,
      "log_likelihood": -16.0716253369636,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 4.603819770217011,
      "success": true,
      "log_likelihood": -14.285294602996979,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 1.529932913740365,
      "beta_reward": 0.8796630317608656,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -9.108868105787469,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.026921071865417444,
      "beta_reward": 10.0,
      "tau_threshold": 3.6664137938062273,
      "success": true,
      "log_likelihood": -14.643522654612418,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -24.02750263402905,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -24.02750263402906,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -24.027502634029055,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -24.02750263402905,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -23.79950263407467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -23.810002634072585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -24.02750263402905,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.07516681905850985,
      "beta_reward": 7.627777012607092,
      "tau_threshold": 1.8617189425971286,
      "success": true,
      "log_likelihood": -21.109826157771813,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -23.774002634079782,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 7.623832989778194,
      "tau_threshold": 3.5943858428684017,
      "success": true,
      "log_likelihood": -19.293288932577838,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.04568028551594195,
      "beta_reward": 10.0,
      "tau_threshold": 1.9646884755048717,
      "success": true,
      "log_likelihood": -22.089830246670736,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 8.384447022857808,
      "tau_threshold": 4.009140727191834,
      "success": true,
      "log_likelihood": -17.03844300034691,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.03801353325760861,
      "beta_reward": 10.0,
      "tau_threshold": 1.9507295726838436,
      "success": true,
      "log_likelihood": -22.514943247282094,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 8.857324018674657,
      "tau_threshold": 3.455773596109966,
      "success": true,
      "log_likelihood": -20.20389315676511,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.19405541354083392,
      "beta_reward": 10.0,
      "tau_threshold": 4.565466683210415,
      "success": true,
      "log_likelihood": -8.737456772758964,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -23.823502634069875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -23.68850263409688,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -24.027502634029055,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 1.9029986589638288,
      "beta_reward": 0.8796354478399044,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -7.8355400500865855,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.04463624434129297,
      "beta_reward": 10.0,
      "tau_threshold": 2.082706474212874,
      "success": true,
      "log_likelihood": -21.67385288805998,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.1544315157136097,
      "beta_reward": 10.0,
      "tau_threshold": 1.7487635650358497,
      "success": true,
      "log_likelihood": -18.441365466520484,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -24.02750263402905,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 2.507571295404372,
      "success": true,
      "log_likelihood": -23.27043515575923,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 2.9917053274543015,
      "success": true,
      "log_likelihood": -22.189115251601446,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 2.6039421703248316,
      "tau_threshold": 3.870375611710157,
      "success": true,
      "log_likelihood": -18.311148707592363,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 2.6215728750274674,
      "success": true,
      "log_likelihood": -22.935049238346036,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -23.895502634055465,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.02992504195079019,
      "beta_reward": 4.30241047315555,
      "tau_threshold": 2.431517956965332,
      "success": true,
      "log_likelihood": -21.87336968788569,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.8679841331984114,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -12.19311070746908,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -23.99150263403625,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 9.889806681481181,
      "tau_threshold": 3.112313013997388,
      "success": true,
      "log_likelihood": -21.586444410600098,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 3.1979097065565236,
      "success": true,
      "log_likelihood": -21.41930989595483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -23.687002634097183,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 3.4485117740462115,
      "success": true,
      "log_likelihood": -20.110696032895746,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.3043932010991964,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -20.391233065974355,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.013062975854727044,
      "beta_reward": 10.0,
      "tau_threshold": 5.0,
      "success": true,
      "log_likelihood": -12.17031005881878,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 0.8813176209647516,
      "tau_threshold": 1.2505293589693038,
      "success": true,
      "log_likelihood": -24.84822658989683,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 2.4551889282174186,
      "success": true,
      "log_likelihood": -23.43197621052496,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.8943959757678147,
      "beta_reward": 0.8796282988400755,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -13.209962865187597,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 9.47662294201535,
      "tau_threshold": 2.722614595836769,
      "success": true,
      "log_likelihood": -22.668786232599036,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 0.8796157087369847,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -24.89166613771893,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.21438001982780736,
      "beta_reward": 10.0,
      "tau_threshold": 1.4218954320630817,
      "success": true,
      "log_likelihood": -19.139073146750196,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.04584239136640889,
      "beta_reward": 10.0,
      "tau_threshold": 5.0,
      "success": true,
      "log_likelihood": -10.492310461393542,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.028570381143803714,
      "beta_reward": 10.0,
      "tau_threshold": 5.0,
      "success": true,
      "log_likelihood": -11.068484019911974,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -23.984002634037754,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 1.3851350448719413,
      "beta_reward": 0.879483774088765,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -9.763263135849481,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -23.795002634075566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 2.6059195057218654,
      "success": true,
      "log_likelihood": -22.996369438212426,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.07171908245356248,
      "beta_reward": 7.148469303877607,
      "tau_threshold": 2.1574239668882136,
      "success": true,
      "log_likelihood": -19.524158712351692,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 1.9029817968103058,
      "beta_reward": 0.8796284473280156,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -7.835540050325203,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.03916438760997293,
      "beta_reward": 4.407387474178696,
      "tau_threshold": 2.2663139263258225,
      "success": true,
      "log_likelihood": -21.638812697299404,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.8943960251252187,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -11.928799362857298,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.03872004089369902,
      "beta_reward": 9.834782557721763,
      "tau_threshold": 2.0217374225887417,
      "success": true,
      "log_likelihood": -22.258444865081966,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -23.886502634057265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -23.796502634075278,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 6.366631282288159,
      "tau_threshold": 2.669340329472561,
      "success": true,
      "log_likelihood": -22.877646450080835,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -23.919502634050655,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 10.0,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -1.4967810135636108,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.9695926347932866,
      "beta_reward": 0.8796522162926534,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -12.511872859591657,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 3.2882436080363,
      "success": true,
      "log_likelihood": -20.741490936699545,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -23.759002634082773,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.10588264635458004,
      "beta_reward": 0.01,
      "tau_threshold": 1.024576937987829,
      "success": true,
      "log_likelihood": -24.45123006547964,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 3.179800014721582,
      "success": true,
      "log_likelihood": -21.63492746488265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -23.933002634047956,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 1.7261037122359368,
      "beta_reward": 0.01,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -8.481631259104288,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -23.648002634104976,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 1.9030028331616817,
      "beta_reward": 0.8796263786440222,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -7.835540050085829,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 2.717857474508386,
      "success": true,
      "log_likelihood": -22.77268353049415,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -23.95250263404406,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.8551240723168841,
      "beta_reward": 0.01,
      "tau_threshold": 1.8344253594972686,
      "success": true,
      "log_likelihood": -9.892414850399586,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 3.497565182921681,
      "success": true,
      "log_likelihood": -19.95058001303144,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -23.613502634111867,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 1.9029997135838121,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -6.55437654649178,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 9.6052270274973,
      "tau_threshold": 2.553279017830569,
      "success": true,
      "log_likelihood": -23.24595767499012,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.7861771380050488,
      "beta_reward": 0.01,
      "tau_threshold": 1.05516065567481,
      "success": true,
      "log_likelihood": -13.948373901919597,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -23.91950263405067,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 8.555831026559986,
      "tau_threshold": 3.164943413841882,
      "success": true,
      "log_likelihood": -21.303522709959566,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_unfair": 0.01,
      "beta_reward": 10.0,
      "tau_threshold": 1.0,
      "success": true,
      "log_likelihood": -23.67500263409958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha_unfair": {
        "r": 0.6370901332780294,
        "p": 1.0341202642712839e-12
      },
      "beta_reward": {
        "r": 0.5391085235623334,
        "p": 7.1786017470431665e-09
      },
      "tau_threshold": {
        "r": 0.2378408992678272,
        "p": 0.017181214513783332
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 49.587524728740625,
  "bic_Control": 50.67800375018345,
  "bic_Cocaine": 48.610637272031425,
  "bic_results": {
    "average_bic": 49.587524728740625,
    "individual_bics": [
      26.42163691572191,
      52.646340560856856,
      48.00514974989069,
      46.43081086793748,
      39.06656848005545,
      53.093062107236705,
      58.80556208342645,
      52.77050419772566,
      58.80556208342644,
      42.893807489295526,
      39.32114602136229,
      28.968293026943268,
      40.037602124593164,
      58.80556208342644,
      58.80556208342645,
      58.80556208342644,
      58.80556208342644,
      58.34956208351767,
      58.370562083513505,
      58.80556208342644,
      52.970209130911954,
      58.2985620835279,
      49.337134680524,
      54.9302173087098,
      44.827442816062145,
      55.78044330993252,
      51.15834312889855,
      28.22547036088626,
      58.39756208350808,
      58.1275620835621,
      58.80556208342644,
      26.4216369155415,
      54.09826259148829,
      47.6332877484093,
      58.80556208342644,
      57.29142712688679,
      55.12878731857123,
      47.37285423055306,
      56.620655292060405,
      58.54156208347926,
      54.49729619113971,
      35.13677823030649,
      58.73356208344083,
      53.92344563656853,
      53.58917660727799,
      58.124562083562694,
      50.97194888115982,
      51.533022947317036,
      35.09117693300589,
      60.44700999516199,
      57.61450923641826,
      37.170482545743525,
      56.088129280566406,
      60.533889090806184,
      49.028703108868726,
      31.735177738155414,
      32.88752485519228,
      58.71856208344384,
      30.277083087067293,
      58.34056208351946,
      56.74329569179318,
      49.79887424007171,
      26.421636916018734,
      54.02818220996714,
      34.60815554108292,
      55.267446545532266,
      58.52356208348286,
      58.34356208351889,
      56.505849715530005,
      58.589562083469644,
      13.744118842495553,
      35.774302534551644,
      52.233538688767425,
      58.26856208353388,
      59.65301694632761,
      54.02041174513363,
      58.616562083464245,
      27.713819333576907,
      58.04656208357828,
      26.421636915539988,
      56.295923876356625,
      58.655562083456445,
      30.535386516167502,
      50.65171684143121,
      57.97756208359206,
      23.85930990835189,
      57.24247216534857,
      38.647304619207524,
      58.58956208346967,
      53.35760223528746,
      58.100562083567496
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        26.42163691572191,
        52.646340560856856,
        48.00514974989069,
        46.43081086793748,
        39.06656848005545,
        53.093062107236705,
        58.80556208342645,
        52.77050419772566,
        58.80556208342644,
        42.893807489295526,
        39.32114602136229,
        28.968293026943268,
        40.037602124593164,
        58.80556208342644,
        58.80556208342645,
        58.80556208342644,
        58.80556208342644,
        58.34956208351767,
        58.370562083513505,
        58.80556208342644,
        52.970209130911954,
        58.2985620835279,
        49.337134680524,
        54.9302173087098,
        44.827442816062145,
        55.78044330993252,
        51.15834312889855,
        28.22547036088626,
        58.39756208350808,
        58.1275620835621,
        58.80556208342644,
        26.4216369155415,
        54.09826259148829,
        47.6332877484093,
        58.80556208342644,
        57.29142712688679,
        55.12878731857123,
        47.37285423055306,
        56.620655292060405,
        58.54156208347926,
        54.49729619113971,
        35.13677823030649,
        58.73356208344083
      ],
      "Cocaine": [
        53.92344563656853,
        53.58917660727799,
        58.124562083562694,
        50.97194888115982,
        51.533022947317036,
        35.09117693300589,
        60.44700999516199,
        57.61450923641826,
        37.170482545743525,
        56.088129280566406,
        60.533889090806184,
        49.028703108868726,
        31.735177738155414,
        32.88752485519228,
        58.71856208344384,
        30.277083087067293,
        58.34056208351946,
        56.74329569179318,
        49.79887424007171,
        26.421636916018734,
        54.02818220996714,
        34.60815554108292,
        55.267446545532266,
        58.52356208348286,
        58.34356208351889,
        56.505849715530005,
        58.589562083469644,
        13.744118842495553,
        35.774302534551644,
        52.233538688767425,
        58.26856208353388,
        59.65301694632761,
        54.02041174513363,
        58.616562083464245,
        27.713819333576907,
        58.04656208357828,
        26.421636915539988,
        56.295923876356625,
        58.655562083456445,
        30.535386516167502,
        50.65171684143121,
        57.97756208359206,
        23.85930990835189,
        57.24247216534857,
        38.647304619207524,
        58.58956208346967,
        53.35760223528746,
        58.100562083567496
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha_unfair: r = 0.637\n- beta_reward: r = 0.539\n- tau_threshold: r = 0.238",
  "previous_models": [
    "Specification: ent_share = combined_earning * token_self / (token_self + token_opp)\nU = (\n    -alpha_unfair * (ent_share - split_self) ** tau_threshold if split_self < ent_share\n    else\n    beta_reward * log(1 + (split_self - ent_share))\n)\nSummary: A piecewise nonlinear utility model for response to offers, with superlinear penalty for unfair offers below contextual entitlement and saturating bonus for generosity above entitlement. The model uses three well-separated, recoverable parameters: one for unfairness aversion, one for generosity bonus, and one for steepness, ensuring high identifiability and psychological interpretability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 49.587524728740625\nOverall Accuracy: 0.6145\nGroup Accuracies:\n- Control: 0.6072\n- Cocaine: 0.6209\n\nParameter Recovery:\n- alpha_unfair: r = 0.637\n- beta_reward: r = 0.539\n- tau_threshold: r = 0.238"
  ]
}