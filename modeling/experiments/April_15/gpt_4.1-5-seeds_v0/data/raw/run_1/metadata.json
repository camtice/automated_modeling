{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let's reason through the psychological, mathematical, and modeling steps carefully:\n\n**Step 1: Psychological Mechanisms**\n- Classic responder behavior in allocation tasks is driven by:\n    1. **Self-interest:** Preference for monetary gain.\n    2. **Inequity Aversion / Fairness:** Negative utility for unequal or \"unfair\" splits (especially if responder gets less than the proposer).\n    3. **Contribution-based fairness:** Perception of fairness is not just about 50/50, but also relative to each person's contribution (using token_self and token_opp). \u201cA fair offer is one that matches the participant\u2019s relative contribution.\u201d\n- Less important in basic models: reputation, learning across time, or role-specific effects; not required unless prompted.\n\n**Step 2: Model Focus and Simplicity**\n- We only need to model responder decisions (accept/reject).\n- Model should map offer features to utility, then to probability of acceptance (via logistic).\n- Each \u201ctrial\u201d is a scenario with different contributions, splits, etc.\n\n**Step 3: Observables and Candidate Mathematical Structures**\n- Key inputs:\n    - split_self: What the responder would receive (\u00a3).\n    - combined_earning: How much is to be split (\u00a3).\n    - token_self and token_opp: Own and opponent\u2019s contribution.\n- Mechanism:\n    1. **Self-interest:** Value the amount offered (`split_self`).\n    2. **Relative Fairness:** Evaluate how much the offered amount deviates from \u201cfair share,\u201d where fair is defined as total pot \u00d7 own relative contribution.\n        - Fair share = combined_earning \u00d7 [token_self / (token_self + token_opp)]\n        - Fairness deviation = split_self \u2212 fair share\n    3. Each of these can be weighted.\n    4. (Optionally) Add a baseline threshold parameter.\n\n**Step 4: Parameterization**\n- Model with minimal, psychologically interpretable parameters. Avoid excessive colliniarity.\n    - Weight on self-interest (alpha_self)\n    - Weight on fairness deviation (alpha_fair)\n    - Decision bias / acceptance threshold (bias)\n- Parameters bounded to avoid identifiability issues.\n\n**Step 5: Map to Utility and Observable Behavior**\n- Utility formula (to be transformed by sigmoid/logistic for probability of acceptance).\n- For parameter recovery, clarity and identifiability matter; avoid redundant weights.\n\n**Step 6: Formalize the Model**\n- Final utility:\n    U = alpha_self \u00d7 (split_self) + alpha_fair \u00d7 (split_self \u2212 fair_share) + bias\n  or, since split_self is present in both terms, can be simplified, but for interpretability, keep both.\n\n## Model Specification\n\n<MODEL>\nutility = alpha_self * split_self + alpha_fair * (split_self - (combined_earning * token_self / (token_self + token_opp))) + bias\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Latent utility determining accept/reject decision; positive indicates higher degree of acceptance.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha_self\": {\n      \"description\": \"Weight parameter for the self-interest (direct gain) component in utility.\",\n      \"range\": {\n        \"min\": -5.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": { \"low\": -5.0, \"high\": 5.0 }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount offered to the participant/responder in the proposal (in \u00a3).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 36.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha_fair\": {\n      \"description\": \"Weight parameter for deviation from contribution-based fairness in utility (i.e., how much positive/negative deviation from fair share affects accept/reject probability).\",\n      \"range\": {\n        \"min\": -5.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": { \"low\": -5.0, \"high\": 5.0 }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money to be split in the trial; sum of both participants' token discoveries times \u00a33.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 108.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (self) in the pretask.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 12.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent (other participant) in the pretask.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 12.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"bias\": {\n      \"description\": \"Overall acceptance threshold; positive values indicate general tendency to accept more offers irrespective of amount or fairness.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": { \"low\": -10.0, \"high\": 10.0 }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA linear utility model for responder decisions that combines two psychological motives: self-interest (monetary gain) and aversion to deviation from contribution-based fairness. A bias parameter captures baseline acceptance tendency. The model\u2019s three learnable parameters (alpha_self, alpha_fair, bias) are generously but finitely bounded, minimizing parameter redundancy. Utility is mapped to acceptance probability via a logistic function, fitting to binary accept/reject responses.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha_self', 'alpha_fair', 'bias']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                utility = alpha_self * split_self + alpha_fair * (split_self - (combined_earning * token_self / (token_self + token_opp))) + bias\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Latent utility determining accept/reject decision; positive indicates higher degree of acceptance.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha_self\": {\n      \"description\": \"Weight parameter for the self-interest (direct gain) component in utility.\",\n      \"range\": {\n        \"min\": -5.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -5.0,\n          \"high\": 5.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount offered to the participant/responder in the proposal (in \\u00a3).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 36.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha_fair\": {\n      \"description\": \"Weight parameter for deviation from contribution-based fairness in utility (i.e., how much positive/negative deviation from fair share affects accept/reject probability).\",\n      \"range\": {\n        \"min\": -5.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -5.0,\n          \"high\": 5.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money to be split in the trial; sum of both participants' token discoveries times \\u00a33.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 108.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (self) in the pretask.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 12.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent (other participant) in the pretask.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 12.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"bias\": {\n      \"description\": \"Overall acceptance threshold; positive values indicate general tendency to accept more offers irrespective of amount or fairness.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha_self=0, alpha_fair=0, bias=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Avoid division by zero\n        if (token_self + token_opp) == 0:\n            fair_share = combined_earning / 2  # If both are 0, assume equal split\n        else:\n            fair_share = combined_earning * (token_self / (token_self + token_opp))\n\n        utility = alpha_self * split_self + alpha_fair * (split_self - fair_share) + bias\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\":1,\"group\":\"treatment\",\"trial_number\":1,\"trial_type\":1,\"trial_role\":2,\"token_opp\":6,\"token_self\":6,\"combined_earning\":36,\"split_opp\":14.0,\"split_self\":22.0,\"splitperc_opp\":39,\"splitperc_self\":61,\"accept\":1.0,\"accepted_amount\":22.0,\"accepted_perc\":61,\"proposed_perc\":61,\"proposed_amount\":22.0},{\"ID\":2,\"group\":\"treatment\",\"trial_number\":2,\"trial_type\":1,\"trial_role\":2,\"token_opp\":6,\"token_self\":6,\"combined_earning\":36,\"split_opp\":16.0,\"split_self\":20.0,\"splitperc_opp\":44,\"splitperc_self\":56,\"accept\":1.0,\"accepted_amount\":20.0,\"accepted_perc\":56,\"proposed_perc\":56,\"proposed_amount\":20.0},{\"ID\":3,\"group\":\"treatment\",\"trial_number\":3,\"trial_type\":1,\"trial_role\":2,\"token_opp\":6,\"token_self\":6,\"combined_earning\":36,\"split_opp\":22.0,\"split_self\":14.0,\"splitperc_opp\":61,\"splitperc_self\":39,\"accept\":0.0,\"accepted_amount\":null,\"accepted_perc\":null,\"proposed_perc\":39,\"proposed_amount\":14.0}]'\n\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744723582.305424
    }
  ],
  "learnable_parameters": {
    "alpha_self": {
      "description": "Weight parameter for the self-interest (direct gain) component in utility.",
      "range": {
        "min": -5.0,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -5.0,
          "high": 5.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "alpha_fair": {
      "description": "Weight parameter for deviation from contribution-based fairness in utility (i.e., how much positive/negative deviation from fair share affects accept/reject probability).",
      "range": {
        "min": -5.0,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -5.0,
          "high": 5.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "bias": {
      "description": "Overall acceptance threshold; positive values indicate general tendency to accept more offers irrespective of amount or fairness.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "utility = alpha_self * split_self + alpha_fair * (split_self - (combined_earning * token_self / (token_self + token_opp))) + bias",
  "variable_descriptions": {
    "utility": {
      "description": "Latent utility determining accept/reject decision; positive indicates higher degree of acceptance.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha_self": {
      "description": "Weight parameter for the self-interest (direct gain) component in utility.",
      "range": {
        "min": -5.0,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -5.0,
          "high": 5.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Amount offered to the participant/responder in the proposal (in \u00a3).",
      "range": {
        "min": 0.0,
        "max": 36.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "alpha_fair": {
      "description": "Weight parameter for deviation from contribution-based fairness in utility (i.e., how much positive/negative deviation from fair share affects accept/reject probability).",
      "range": {
        "min": -5.0,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -5.0,
          "high": 5.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "combined_earning": {
      "description": "Total money to be split in the trial; sum of both participants' token discoveries times \u00a33.",
      "range": {
        "min": 0.0,
        "max": 108.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant (self) in the pretask.",
      "range": {
        "min": 0.0,
        "max": 12.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent (other participant) in the pretask.",
      "range": {
        "min": 0.0,
        "max": 12.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "bias": {
      "description": "Overall acceptance threshold; positive values indicate general tendency to accept more offers irrespective of amount or fairness.",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A linear utility model for responder decisions that combines two psychological motives: self-interest (monetary gain) and aversion to deviation from contribution-based fairness. A bias parameter captures baseline acceptance tendency. The model\u2019s three learnable parameters (alpha_self, alpha_fair, bias) are generously but finitely bounded, minimizing parameter redundancy. Utility is mapped to acceptance probability via a logistic function, fitting to binary accept/reject responses.",
  "target_variable": "accept",
  "full_reasoning": "Let's reason through the psychological, mathematical, and modeling steps carefully:\n\n**Step 1: Psychological Mechanisms**\n- Classic responder behavior in allocation tasks is driven by:\n    1. **Self-interest:** Preference for monetary gain.\n    2. **Inequity Aversion / Fairness:** Negative utility for unequal or \"unfair\" splits (especially if responder gets less than the proposer).\n    3. **Contribution-based fairness:** Perception of fairness is not just about 50/50, but also relative to each person's contribution (using token_self and token_opp). \u201cA fair offer is one that matches the participant\u2019s relative contribution.\u201d\n- Less important in basic models: reputation, learning across time, or role-specific effects; not required unless prompted.\n\n**Step 2: Model Focus and Simplicity**\n- We only need to model responder decisions (accept/reject).\n- Model should map offer features to utility, then to probability of acceptance (via logistic).\n- Each \u201ctrial\u201d is a scenario with different contributions, splits, etc.\n\n**Step 3: Observables and Candidate Mathematical Structures**\n- Key inputs:\n    - split_self: What the responder would receive (\u00a3).\n    - combined_earning: How much is to be split (\u00a3).\n    - token_self and token_opp: Own and opponent\u2019s contribution.\n- Mechanism:\n    1. **Self-interest:** Value the amount offered (`split_self`).\n    2. **Relative Fairness:** Evaluate how much the offered amount deviates from \u201cfair share,\u201d where fair is defined as total pot \u00d7 own relative contribution.\n        - Fair share = combined_earning \u00d7 [token_self / (token_self + token_opp)]\n        - Fairness deviation = split_self \u2212 fair share\n    3. Each of these can be weighted.\n    4. (Optionally) Add a baseline threshold parameter.\n\n**Step 4: Parameterization**\n- Model with minimal, psychologically interpretable parameters. Avoid excessive colliniarity.\n    - Weight on self-interest (alpha_self)\n    - Weight on fairness deviation (alpha_fair)\n    - Decision bias / acceptance threshold (bias)\n- Parameters bounded to avoid identifiability issues.\n\n**Step 5: Map to Utility and Observable Behavior**\n- Utility formula (to be transformed by sigmoid/logistic for probability of acceptance).\n- For parameter recovery, clarity and identifiability matter; avoid redundant weights.\n\n**Step 6: Formalize the Model**\n- Final utility:\n    U = alpha_self \u00d7 (split_self) + alpha_fair \u00d7 (split_self \u2212 fair_share) + bias\n  or, since split_self is present in both terms, can be simplified, but for interpretability, keep both.\n\n## Model Specification\n\n<MODEL>\nutility = alpha_self * split_self + alpha_fair * (split_self - (combined_earning * token_self / (token_self + token_opp))) + bias\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Latent utility determining accept/reject decision; positive indicates higher degree of acceptance.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha_self\": {\n      \"description\": \"Weight parameter for the self-interest (direct gain) component in utility.\",\n      \"range\": {\n        \"min\": -5.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": { \"low\": -5.0, \"high\": 5.0 }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount offered to the participant/responder in the proposal (in \u00a3).\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 36.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha_fair\": {\n      \"description\": \"Weight parameter for deviation from contribution-based fairness in utility (i.e., how much positive/negative deviation from fair share affects accept/reject probability).\",\n      \"range\": {\n        \"min\": -5.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": { \"low\": -5.0, \"high\": 5.0 }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money to be split in the trial; sum of both participants' token discoveries times \u00a33.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 108.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (self) in the pretask.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 12.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent (other participant) in the pretask.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 12.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"bias\": {\n      \"description\": \"Overall acceptance threshold; positive values indicate general tendency to accept more offers irrespective of amount or fairness.\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": { \"low\": -10.0, \"high\": 10.0 }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA linear utility model for responder decisions that combines two psychological motives: self-interest (monetary gain) and aversion to deviation from contribution-based fairness. A bias parameter captures baseline acceptance tendency. The model\u2019s three learnable parameters (alpha_self, alpha_fair, bias) are generously but finitely bounded, minimizing parameter redundancy. Utility is mapped to acceptance probability via a logistic function, fitting to binary accept/reject responses.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: utility = alpha_self * split_self + alpha_fair * (split_self - (combined_earning * token_self / (token_self + token_opp))) + bias\nSummary: A linear utility model for responder decisions that combines two psychological motives: self-interest (monetary gain) and aversion to deviation from contribution-based fairness. A bias parameter captures baseline acceptance tendency. The model\u2019s three learnable parameters (alpha_self, alpha_fair, bias) are generously but finitely bounded, minimizing parameter redundancy. Utility is mapped to acceptance probability via a logistic function, fitting to binary accept/reject responses.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha_self=0, alpha_fair=0, bias=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Avoid division by zero\n        if (token_self + token_opp) == 0:\n            fair_share = combined_earning / 2  # If both are 0, assume equal split\n        else:\n            fair_share = combined_earning * (token_self / (token_self + token_opp))\n\n        utility = alpha_self * split_self + alpha_fair * (split_self - fair_share) + bias\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.8116605616605617,
  "group_accuracies": {
    "Control": 0.851421188630491,
    "Cocaine": 0.7760416666666666
  },
  "group_parameter_averages": {
    "Control": {
      "alpha_self": 1.7692304316190521,
      "alpha_fair": 0.06812306270619845,
      "bias": 2.24927013736106
    },
    "Cocaine": {
      "alpha_self": 0.8404193910382654,
      "alpha_fair": 0.7491732257954943,
      "bias": -0.8094959289768546
    }
  },
  "fitting_results": [
    {
      "alpha_self": 0.7614220326239091,
      "alpha_fair": 1.0667887651198014,
      "bias": -4.702453490170652,
      "success": true,
      "log_likelihood": -5.290766357395493,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 0.5332823974769594,
      "alpha_fair": 0.8891779542165051,
      "bias": 0.22657310618723078,
      "success": true,
      "log_likelihood": -16.169406162132272,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 1.087175902569004,
      "alpha_fair": 1.8678473227931371,
      "bias": 0.8644543661823686,
      "success": true,
      "log_likelihood": -9.88497287742022,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 1.256199304306345,
      "alpha_fair": 1.147003821422144,
      "bias": -2.467368605145744,
      "success": true,
      "log_likelihood": -12.169594410088136,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 0.5243655512376895,
      "alpha_fair": 2.203453761796201,
      "bias": 2.5753255445445946,
      "success": true,
      "log_likelihood": -8.63534039539898,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 1.0263639348623543,
      "alpha_fair": 1.3964954720754286,
      "bias": 1.045591549634289,
      "success": true,
      "log_likelihood": -10.823233645811351,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 5.0,
      "alpha_fair": -5.0,
      "bias": 10.0,
      "success": true,
      "log_likelihood": 3.475008280960198e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 0.8047739718525615,
      "alpha_fair": 1.667971149472331,
      "bias": 2.889363215420916,
      "success": true,
      "log_likelihood": -9.820149026154011,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 5.0,
      "alpha_fair": -5.0,
      "bias": 10.0,
      "success": true,
      "log_likelihood": 3.475008280960199e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 0.7395133292188915,
      "alpha_fair": 1.606131897325813,
      "bias": 0.04978006514172747,
      "success": true,
      "log_likelihood": -11.098420452173247,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 3.406406601141612,
      "alpha_fair": 5.0,
      "bias": -1.8209758604523156,
      "success": true,
      "log_likelihood": -1.9794170943862182,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 0.9235137067171174,
      "alpha_fair": 0.9710000738877669,
      "bias": -4.924450628358278,
      "success": true,
      "log_likelihood": -6.434409634099139,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 0.8844537902035322,
      "alpha_fair": 2.2516619749147324,
      "bias": 1.0382143063705016,
      "success": true,
      "log_likelihood": -8.601803837412723,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 5.0,
      "alpha_fair": -5.0,
      "bias": 10.0,
      "success": true,
      "log_likelihood": 3.4750082809601993e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 5.0,
      "alpha_fair": -5.0,
      "bias": 10.0,
      "success": true,
      "log_likelihood": 3.475008280960199e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 5.0,
      "alpha_fair": -5.0,
      "bias": 10.0,
      "success": true,
      "log_likelihood": 3.4750082809601993e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 5.0,
      "alpha_fair": -5.0,
      "bias": 10.0,
      "success": true,
      "log_likelihood": 3.475008280960199e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 5.0,
      "alpha_fair": 1.2289808247194876,
      "bias": -5.045592934622943,
      "success": true,
      "log_likelihood": -1.097006074450282,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 0.9474948800732426,
      "alpha_fair": 1.4925058809913303,
      "bias": 5.278053473770351,
      "success": true,
      "log_likelihood": -5.2723728957409355,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 4.038603412053728,
      "alpha_fair": -4.211549136557675,
      "bias": 3.7924995328517497,
      "success": true,
      "log_likelihood": -1.0376369081498843e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 0.30699124284056406,
      "alpha_fair": 1.2217827851990355,
      "bias": 2.247448028025795,
      "success": true,
      "log_likelihood": -13.927513269289452,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 0.9345343993741533,
      "alpha_fair": 1.178164778692952,
      "bias": 3.4132946732900558,
      "success": true,
      "log_likelihood": -7.025172843440082,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 1.0024579626470076,
      "alpha_fair": 0.48474440938274965,
      "bias": -3.3031850600911206,
      "success": true,
      "log_likelihood": -15.222858030058681,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 0.785798854776528,
      "alpha_fair": 0.6572139637366244,
      "bias": -1.0076443677102558,
      "success": true,
      "log_likelihood": -16.594838040642596,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": -0.08375119706399775,
      "alpha_fair": 1.7829999641448586,
      "bias": 4.508809827732193,
      "success": true,
      "log_likelihood": -10.366336452840162,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 0.8063473106228769,
      "alpha_fair": 0.8701971453336362,
      "bias": -0.16010402426242323,
      "success": true,
      "log_likelihood": -14.842333135760155,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 1.2401568266796845,
      "alpha_fair": 1.297956328156472,
      "bias": -0.7652686701786469,
      "success": true,
      "log_likelihood": -11.473279640667974,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 1.3429275703713814,
      "alpha_fair": 5.0,
      "bias": 0.3877183669625672,
      "success": true,
      "log_likelihood": -3.9220389042682875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 0.3880582034573376,
      "alpha_fair": 0.972234190551239,
      "bias": 4.418947718752758,
      "success": true,
      "log_likelihood": -7.69815046034892,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 0.1694572505645619,
      "alpha_fair": 0.7412560428682146,
      "bias": 2.9552762558159276,
      "success": true,
      "log_likelihood": -14.11915034828433,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 5.0,
      "alpha_fair": -5.0,
      "bias": 10.0,
      "success": true,
      "log_likelihood": 3.475008280960198e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 0.761416223148843,
      "alpha_fair": 1.066803102660155,
      "bias": -4.702423162914606,
      "success": true,
      "log_likelihood": -5.2907663572212495,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 0.6786990274867385,
      "alpha_fair": 0.27378840718501,
      "bias": -2.1723176707106693,
      "success": true,
      "log_likelihood": -19.253357048631784,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 0.710365024036515,
      "alpha_fair": 0.9109123877130421,
      "bias": -1.1438255830428183,
      "success": true,
      "log_likelihood": -14.892929145919855,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 5.0,
      "alpha_fair": -5.0,
      "bias": 10.0,
      "success": true,
      "log_likelihood": 3.475008280960199e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 2.5466771196686393,
      "alpha_fair": 0.5732327228659191,
      "bias": -5.483588171527355,
      "success": true,
      "log_likelihood": -9.453548071784489,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 2.1020049830944547,
      "alpha_fair": 1.8342155502253508,
      "bias": -0.10295637985550908,
      "success": true,
      "log_likelihood": -7.007710636573305,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 0.3757243978117298,
      "alpha_fair": 1.3100526522768985,
      "bias": 1.7641040907106953,
      "success": true,
      "log_likelihood": -13.369226065192024,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 0.1700659076636528,
      "alpha_fair": 0.8388043362236527,
      "bias": 2.455773056974274,
      "success": true,
      "log_likelihood": -16.119960101719194,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 0.28656943263757595,
      "alpha_fair": 0.49929533100490847,
      "bias": 3.150752872007606,
      "success": true,
      "log_likelihood": -8.525358820089327,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 0.0863955693388141,
      "alpha_fair": 1.0003504073183014,
      "bias": 2.8333713636482334,
      "success": true,
      "log_likelihood": -15.642986314553209,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 0.4617265056686472,
      "alpha_fair": 1.0523833819184234,
      "bias": -1.3745808984549284,
      "success": true,
      "log_likelihood": -11.564951828847155,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": -0.9292828695434094,
      "alpha_fair": 0.785434046732086,
      "bias": 10.0,
      "success": true,
      "log_likelihood": -3.2615126467681668,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_self": 0.8632118005463355,
      "alpha_fair": 0.7001482022694114,
      "bias": -0.9742417051744556,
      "success": true,
      "log_likelihood": -15.798544499903663,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.9648635659565608,
      "alpha_fair": 0.9962410613121404,
      "bias": -0.12176701954868051,
      "success": true,
      "log_likelihood": -13.228216456713538,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 1.0394895639005786,
      "alpha_fair": 0.2525240015888521,
      "bias": -1.5183136963215969,
      "success": true,
      "log_likelihood": -15.152597489745014,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.6326736675223202,
      "alpha_fair": 0.9790759852129005,
      "bias": 0.28927080078124423,
      "success": true,
      "log_likelihood": -15.14979581750965,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.7134879371660852,
      "alpha_fair": 0.4779744321107208,
      "bias": -2.0263107337512185,
      "success": true,
      "log_likelihood": -17.494709229205064,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": -0.11059541243469237,
      "alpha_fair": 2.305361821551648,
      "bias": 4.564073721850196,
      "success": true,
      "log_likelihood": -8.189586348541221,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.47200616676004464,
      "alpha_fair": 0.01105690329781934,
      "bias": -1.5114235799862161,
      "success": true,
      "log_likelihood": -22.681090226323754,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.5629550742646336,
      "alpha_fair": 0.4457488793986334,
      "bias": 0.2076157097213851,
      "success": true,
      "log_likelihood": -17.272976434228468,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.5094586165129699,
      "alpha_fair": 0.4910240895801826,
      "bias": -3.0799875409312234,
      "success": true,
      "log_likelihood": -11.053104773861678,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.8999587039466135,
      "alpha_fair": 0.35572515984354086,
      "bias": -2.1104980450445567,
      "success": true,
      "log_likelihood": -17.587055973114726,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.8071267716135214,
      "alpha_fair": -0.017757756060863637,
      "bias": -2.4118456722067845,
      "success": true,
      "log_likelihood": -19.769087439913974,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.05291189364916693,
      "alpha_fair": 0.7207190341364011,
      "bias": 0.893884127245353,
      "success": true,
      "log_likelihood": -18.584529262641343,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 2.6080019707122433,
      "alpha_fair": 5.0,
      "bias": -2.327066335965583,
      "success": true,
      "log_likelihood": -3.977455846479689,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.6613478484917842,
      "alpha_fair": 1.56996050329453,
      "bias": -0.9094064326760113,
      "success": true,
      "log_likelihood": -10.038291954104741,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.24617282213582725,
      "alpha_fair": -0.5446645722022355,
      "bias": 0.23987622706737893,
      "success": true,
      "log_likelihood": -11.136945884042738,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.7782765739919114,
      "alpha_fair": 0.8414339172075488,
      "bias": -4.3370892504185115,
      "success": true,
      "log_likelihood": -7.221587083876816,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 5.0,
      "alpha_fair": -5.0,
      "bias": 10.0,
      "success": true,
      "log_likelihood": -160.92086582744366,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.34099963839280983,
      "alpha_fair": 0.4923099622307809,
      "bias": 0.5583654869518356,
      "success": true,
      "log_likelihood": -19.564280390092172,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.3282413876596038,
      "alpha_fair": 1.2474013491189984,
      "bias": 1.784953935815021,
      "success": true,
      "log_likelihood": -13.858097576410943,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.7614119783519346,
      "alpha_fair": 1.066781075700737,
      "bias": -4.702417082037596,
      "success": true,
      "log_likelihood": -5.2907663577988835,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.7300957366536166,
      "alpha_fair": 0.29614097729812094,
      "bias": -2.1529097578205567,
      "success": true,
      "log_likelihood": -18.971720636454968,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 1.1393076319806812,
      "alpha_fair": 1.3028854051406313,
      "bias": -3.797834521654219,
      "success": true,
      "log_likelihood": -8.75261141764481,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 1.0651134160544813,
      "alpha_fair": 0.8575109295513184,
      "bias": -1.2550640448445511,
      "success": true,
      "log_likelihood": -13.98013693790805,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.5166666726534682,
      "alpha_fair": 0.5732585017530841,
      "bias": 2.8495294438449212,
      "success": true,
      "log_likelihood": -7.689167100657924,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.31906983533103417,
      "alpha_fair": 0.7377235125195216,
      "bias": 3.280426272984469,
      "success": true,
      "log_likelihood": -10.363068140701607,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 1.6426692400894742,
      "alpha_fair": 0.47389796203910634,
      "bias": -4.0012966214222345,
      "success": true,
      "log_likelihood": -12.519028689544696,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": -0.08587979316845379,
      "alpha_fair": 0.3511630941074024,
      "bias": 3.7349386252555115,
      "success": true,
      "log_likelihood": -9.73378975444246,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 1.4009033374166202,
      "alpha_fair": 5.0,
      "bias": -6.067874301239029,
      "success": true,
      "log_likelihood": -0.4427395765173759,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.6007649244436447,
      "alpha_fair": 0.579626300920242,
      "bias": -3.3799886509870554,
      "success": true,
      "log_likelihood": -10.23795929749757,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.760949336855496,
      "alpha_fair": 0.8562735998399393,
      "bias": -0.44768934039719765,
      "success": true,
      "log_likelihood": -15.4798166167974,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.9647201125077863,
      "alpha_fair": 0.17182848385758356,
      "bias": -1.1395683009692976,
      "success": true,
      "log_likelihood": -14.523694350297086,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.3357787348743999,
      "alpha_fair": 0.20174375002218797,
      "bias": -0.7011940315396852,
      "success": true,
      "log_likelihood": -22.74861318186935,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.4721581622832551,
      "alpha_fair": 1.279029897303721,
      "bias": 3.0556704414631675,
      "success": true,
      "log_likelihood": -11.82359833983412,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.07127423365596837,
      "alpha_fair": 0.6168850330814168,
      "bias": 4.75352472955999,
      "success": true,
      "log_likelihood": -6.297199825380119,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.34090936266527283,
      "alpha_fair": 0.4048254080785545,
      "bias": -3.5964669449178674,
      "success": true,
      "log_likelihood": -6.615074158778177,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.5202161457494616,
      "alpha_fair": 0.007540031261430182,
      "bias": -1.292715475794302,
      "success": true,
      "log_likelihood": -21.682231410553065,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.7614535787799088,
      "alpha_fair": 1.0668069143681553,
      "bias": -4.70260208636813,
      "success": true,
      "log_likelihood": -5.290766359578622,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.24726314580512967,
      "alpha_fair": 0.2796321920667634,
      "bias": -0.07820681405870682,
      "success": true,
      "log_likelihood": -22.66345615205601,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.02420948808126382,
      "alpha_fair": 0.014652834765961907,
      "bias": 2.3483098095445816,
      "success": true,
      "log_likelihood": -10.321738300277161,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.503391240039779,
      "alpha_fair": 0.5401584630156954,
      "bias": -3.3302426637905618,
      "success": true,
      "log_likelihood": -9.36081218334291,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 4.610281465881953,
      "alpha_fair": 2.5857521693276535,
      "bias": -9.966540059649223,
      "success": true,
      "log_likelihood": -4.346058613773557,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": -0.03016342122480306,
      "alpha_fair": 0.24213217395602288,
      "bias": 1.1678532680100406,
      "success": true,
      "log_likelihood": -23.19216969830654,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.4915768009449428,
      "alpha_fair": 1.602078870507097,
      "bias": -2.654754921700435,
      "success": true,
      "log_likelihood": -5.910497464025338,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.23901275986373155,
      "alpha_fair": 0.6554986306817451,
      "bias": 1.853651237158694,
      "success": true,
      "log_likelihood": -16.97027155060335,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.26903250806449674,
      "alpha_fair": 0.7662628310555217,
      "bias": -0.9634927816317138,
      "success": true,
      "log_likelihood": -14.00159126412372,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.5726913240223759,
      "alpha_fair": 0.7775722101622223,
      "bias": 4.200838993971518,
      "success": true,
      "log_likelihood": -4.978976351501329,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 3.516700100214759,
      "alpha_fair": 1.0722220856664813,
      "bias": -9.863842440498761,
      "success": true,
      "log_likelihood": -5.666315302540309,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_self": 0.20796412017674173,
      "alpha_fair": 0.25614852624439627,
      "bias": 0.7840634312316329,
      "success": true,
      "log_likelihood": -20.562156096912076,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha_self": {
        "r": 0.6804088535157281,
        "p": 6.8868715123920664e-15
      },
      "alpha_fair": {
        "r": 0.8548235424282945,
        "p": 1.1258936157214671e-29
      },
      "bias": {
        "r": 0.6866794970543559,
        "p": 3.102929631586169e-15
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 35.05705606106661,
  "bic_Control": 26.88315551468927,
  "bic_Cocaine": 42.379508633862976,
  "bic_results": {
    "average_bic": 35.05705606106661,
    "individual_bics": [
      21.332089530159315,
      43.08936913963288,
      30.52050257020877,
      35.0897456355446,
      28.02123760616629,
      32.39702410699103,
      10.750556808418315,
      30.390854867676353,
      10.750556808418315,
      32.94739771971483,
      14.709391004140766,
      23.619376083566607,
      27.954164490193776,
      10.750556808418315,
      10.750556808418315,
      10.750556808418315,
      10.750556808418315,
      12.944568964268894,
      21.2953026068502,
      10.750558890642147,
      38.60558335394724,
      24.800902502248494,
      41.19627287548569,
      43.94023289665353,
      31.483229721048655,
      40.43522308688864,
      33.69711609670428,
      18.594634623904906,
      26.14685773606617,
      38.98885751193699,
      10.750556808418315,
      21.33208952981083,
      49.257270912631895,
      40.53641510720804,
      10.750556808418315,
      29.65765295893731,
      24.76597808851494,
      37.489008945752374,
      42.990477018806715,
      27.801274455546984,
      42.03652944447475,
      33.88046047306264,
      17.273582108904662,
      42.34764581517565,
      37.206989728795406,
      41.05575179485836,
      41.05014845038763,
      45.739975273778455,
      27.129729512450773,
      56.112737268015835,
      45.29650968382526,
      32.85676636309169,
      45.924668761597786,
      50.288731695196276,
      47.91961534065102,
      18.70546850832771,
      30.827140723577813,
      33.024448583453804,
      25.193730983121963,
      332.59228847025565,
      49.87911759555267,
      38.466751968190216,
      21.332089530966098,
      48.69399808827826,
      28.25577965065795,
      38.71083069118443,
      26.12889101668418,
      31.476693096771545,
      35.78861419445772,
      30.21813632425325,
      11.636035968403082,
      31.22647541036347,
      41.71019004896313,
      39.7979455159625,
      56.24778317910703,
      34.39775349503657,
      23.34495646612857,
      23.980705132924683,
      54.11501963647446,
      21.332089534525572,
      56.077469119480355,
      31.394033415922653,
      29.47218118205415,
      19.442674042915442,
      57.13489621198141,
      22.571551743419008,
      44.69109991657503,
      38.75373934361577,
      20.708509518370988,
      22.08318742044895,
      51.87486900919248
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        21.332089530159315,
        43.08936913963288,
        30.52050257020877,
        35.0897456355446,
        28.02123760616629,
        32.39702410699103,
        10.750556808418315,
        30.390854867676353,
        10.750556808418315,
        32.94739771971483,
        14.709391004140766,
        23.619376083566607,
        27.954164490193776,
        10.750556808418315,
        10.750556808418315,
        10.750556808418315,
        10.750556808418315,
        12.944568964268894,
        21.2953026068502,
        10.750558890642147,
        38.60558335394724,
        24.800902502248494,
        41.19627287548569,
        43.94023289665353,
        31.483229721048655,
        40.43522308688864,
        33.69711609670428,
        18.594634623904906,
        26.14685773606617,
        38.98885751193699,
        10.750556808418315,
        21.33208952981083,
        49.257270912631895,
        40.53641510720804,
        10.750556808418315,
        29.65765295893731,
        24.76597808851494,
        37.489008945752374,
        42.990477018806715,
        27.801274455546984,
        42.03652944447475,
        33.88046047306264,
        17.273582108904662
      ],
      "Cocaine": [
        42.34764581517565,
        37.206989728795406,
        41.05575179485836,
        41.05014845038763,
        45.739975273778455,
        27.129729512450773,
        56.112737268015835,
        45.29650968382526,
        32.85676636309169,
        45.924668761597786,
        50.288731695196276,
        47.91961534065102,
        18.70546850832771,
        30.827140723577813,
        33.024448583453804,
        25.193730983121963,
        332.59228847025565,
        49.87911759555267,
        38.466751968190216,
        21.332089530966098,
        48.69399808827826,
        28.25577965065795,
        38.71083069118443,
        26.12889101668418,
        31.476693096771545,
        35.78861419445772,
        30.21813632425325,
        11.636035968403082,
        31.22647541036347,
        41.71019004896313,
        39.7979455159625,
        56.24778317910703,
        34.39775349503657,
        23.34495646612857,
        23.980705132924683,
        54.11501963647446,
        21.332089534525572,
        56.077469119480355,
        31.394033415922653,
        29.47218118205415,
        19.442674042915442,
        57.13489621198141,
        22.571551743419008,
        44.69109991657503,
        38.75373934361577,
        20.708509518370988,
        22.08318742044895,
        51.87486900919248
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha_self: r = 0.680\n- alpha_fair: r = 0.855\n- bias: r = 0.687",
  "previous_models": [
    "Specification: utility = alpha_self * split_self + alpha_fair * (split_self - (combined_earning * token_self / (token_self + token_opp))) + bias\nSummary: A linear utility model for responder decisions that combines two psychological motives: self-interest (monetary gain) and aversion to deviation from contribution-based fairness. A bias parameter captures baseline acceptance tendency. The model\u2019s three learnable parameters (alpha_self, alpha_fair, bias) are generously but finitely bounded, minimizing parameter redundancy. Utility is mapped to acceptance probability via a logistic function, fitting to binary accept/reject responses.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 35.05705606106661\nOverall Accuracy: 0.8117\nGroup Accuracies:\n- Control: 0.8514\n- Cocaine: 0.7760\n\nParameter Recovery:\n- alpha_self: r = 0.680\n- alpha_fair: r = 0.855\n- bias: r = 0.687"
  ]
}