{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "First, let me reason step by step.\n\n## 1. Key Psychological Mechanisms\n\nThis is a responder decision in a modified ultimatum-type task, where:\n- Participants know both their own and opponent's contribution (tokens).\n- The split is not always over a fixed sum, so \"fairness\" depends on relative contribution.\n- Decisions: accept (1) or reject (0).\n- Proposals can deviate from proportionality (i.e., \"I did X%, but only got Y%\").\n- Key motives likely include:\n    - **Proportionality/Fairness aversion**: Preference for getting at least what is \"deserved\" by own effort (token_self / (token_self + token_opp)).\n    - **Self-interest**: Preference for higher absolute payoffs, sometimes even if unfair.\n    - **Disadvantageous Inequality Aversion**: Dislike being offered less than the opponent (split_self < split_opp).\n- Yet, not too many parameters: want to limit risk of covariance.\n\n## 2. Interactions\n\n- **Fairness aversion** and **self-interest** can trade off: a participant might tolerate small deviations from fairness if the absolute payoff is high.\n- **Disadvantageous Inequality** is a special case: people especially dislike getting strictly less than their counterpart.\n- However, including both a fairness aversion term and a disadvantageous inequality term can cause parameter tradeoff/covariance if not handled carefully.\n\n## 3. Mathematical Formulation\n\n- Utility model is used to predict accept vs reject.\n- Logistic transformation will be applied to utility.\n- A **robust yet lean model** would thus be:\n\n    - A baseline intercept (\"acceptance bias\").\n    - A term for deviation from proportional fairness.\n    - A term for absolute gain (\"greediness\"/self-interest).\n    - Possibly a penalty/dummy for accepting when split_self < split_opp (disadvantageous inequality).\n\nTo minimize covariance and overfitting:\n- Use proportional deviation (how far from proportional is this offer for self?) as fairness.\n- Optionally, compress disadvantageous inequality and/or greed into one of these metrics.\n\n## 4. Learnable Parameters Needed\n\n- Intercept (acceptance bias): catch-all for response tendency.\n- Weight on proportional-deviation from fairness (can be positive or negative).\n- Weight on absolute amount received: should be positive.\n- Optionally, a penalty parameter for strictly disadvantageous offers (may overlap with fairness weight).\n\n## 5. Observed Variables Mapping\n\n- Own share: split_self (in \u00a3)\n- Own contribution: token_self\n- Total contribution: token_self + token_opp\n- Proportional \"deserved\" share: (token_self / (token_self + token_opp)) * combined_earning\n- Proportional deviation: split_self - proportional_share\n- Disadvantageous inequality: I(get less than opponent)? e.g., indicator(split_self < split_opp)\n- All variables are present in the data.\n\n## 6. Model Proposal\n\nTo balance parameter identifiability and meaningfulness, the **model form**:\n\n\\[\nU = intercept \\ + \\ unfairness\\_weight \\cdot (split\\_self - proportional\\_share) \\ + \\ self\\_interest\\_weight \\cdot split\\_self \\ + \\ disadvantage\\_penalty \\cdot I(split\\_self < split\\_opp)\n\\]\n\n- \"proportional_share\" = (token_self / (token_self + token_opp)) * combined_earning\n- I(split_self < split_opp): 1 if own share is strictly less than opponent's, else 0\n\n**However, the unfairness and self-interest weights may covary.** To reduce this, we can:\n- Either pick only one (preferably unfairness), or\n- Make unfairness weight on the *relative* deviation (percentage), not \u00a3, to help separate from self-interest.\n\nThus, **better/cleaner**:\n\n\\[\nU = intercept + unfairness\\_weight \\cdot unfairness\\_perc + disadvantage\\_penalty \\cdot I(split\\_self < split\\_opp)\n\\]\n\nWhere:\n- unfairness_perc = (splitperc_self - proportional_percent), with proportional_percent = 100 * (token_self / (token_self + token_opp))\n\nThus, only 3 learnable parameters: intercept, unfairness_weight, disadvantage_penalty.\n- This model can uniquely attribute effects, and minimizes covariance.\n\n## 7. Write Model and Variables\n\n### Model Formula (math):\n\n<MODEL>\nU = intercept + unfairness_weight * unfairness_perc + disadvantage_penalty * indicator_disadvantage\n</MODEL>\n\nWhere:\n- unfairness_perc = splitperc_self - proportional_percent\n- proportional_percent = 100 * (token_self / (token_self + token_opp))\n- indicator_disadvantage = 1 if split_self < split_opp, else 0\n\n## 8. Specials\n\n- Bounds on parameters:\n    - intercept: [-10, 10] (generous for bias term)\n    - unfairness_weight: [-1, 1] (large range; want to avoid insane scaling for percentage deviation)\n    - disadvantage_penalty: [-10, 10] (wide, allow for very strong penalty or even positive bias)\n    - Utility can be unbounded, as requested.\n\n## 9. Output Blocks\n\n### Target Variable\n\n<target_variable>accept</target_variable>\n\n(e.g., accept = 1 if responded accept, 0 for reject)\n\n### Variable Description (as requested)\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed split\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"intercept\": {\n      \"description\": \"Participant's baseline bias to accept or reject offers\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"unfairness_weight\": {\n      \"description\": \"Weight parameter for deviation from proportional fairness (as percent difference)\",\n      \"range\": {\n        \"min\": -1.0,\n        \"max\": 1.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -1.0,\n          \"high\": 1.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"unfairness_perc\": {\n      \"description\": \"The difference between participant's offered percentage of the combined earning and their proportional deserved share, in percentage points\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Percentage of combined earning offered to the participant in this proposal\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"proportional_percent\": {\n      \"description\": \"Participant's deserved share as a percentage of total, based on contribution\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"disadvantage_penalty\": {\n      \"description\": \"Penalty (or bonus) applied if participant is offered strictly less than the opponent\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant, in \u00a3\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 216.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share for the opponent, in \u00a3\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 216.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"indicator_disadvantage\": {\n      \"description\": \"Indicator variable: 1 if participant's proposed share is less than opponent's, else 0\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nThis model predicts responder acceptance using a linear sum of three factors: a baseline response bias, the deviation from proportional fairness (in percent points), and a penalty applied for being offered less than the opponent. Each variable is carefully defined to minimize parameter covariance and maximize interpretability while respecting the data structure of the task.\n</SUMMARY>\n\n<target_variable>accept</target_variable>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['intercept', 'unfairness_weight', 'disadvantage_penalty']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = intercept + unfairness_weight * unfairness_perc + disadvantage_penalty * indicator_disadvantage\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed split\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"intercept\": {\n      \"description\": \"Participant's baseline bias to accept or reject offers\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"unfairness_weight\": {\n      \"description\": \"Weight parameter for deviation from proportional fairness (as percent difference)\",\n      \"range\": {\n        \"min\": -1.0,\n        \"max\": 1.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -1.0,\n          \"high\": 1.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"unfairness_perc\": {\n      \"description\": \"The difference between participant's offered percentage of the combined earning and their proportional deserved share, in percentage points\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Percentage of combined earning offered to the participant in this proposal\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"proportional_percent\": {\n      \"description\": \"Participant's deserved share as a percentage of total, based on contribution\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"disadvantage_penalty\": {\n      \"description\": \"Penalty (or bonus) applied if participant is offered strictly less than the opponent\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant, in \\u00a3\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 216.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share for the opponent, in \\u00a3\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 216.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"indicator_disadvantage\": {\n      \"description\": \"Indicator variable: 1 if participant's proposed share is less than opponent's, else 0\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, intercept=0, unfairness_weight=0, disadvantage_penalty=0):\n    model_predictions = []\n    for trial in trial_data:\n        # Extract data\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        split_opp = trial.get(\"split_opp\", 0)\n\n        # Calculate proportional percent\n        total_tokens = token_self + token_opp\n        proportional_percent = 0.0\n        if total_tokens > 0:\n            proportional_percent = 100 * (token_self / total_tokens)\n\n        # Calculate unfairness percent\n        unfairness_perc = splitperc_self - proportional_percent\n\n        # Calculate indicator disadvantage\n        indicator_disadvantage = 1 if split_self < split_opp else 0\n\n        # Calculate utility\n        utility = intercept + (unfairness_weight * unfairness_perc) + (disadvantage_penalty * indicator_disadvantage)\n\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 17, \"token_self\": 19, \"combined_earning\": 216, \"split_opp\": 108.0, \"split_self\": 108.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 108.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 108.0}, {\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 17, \"token_self\": 19, \"combined_earning\": 216, \"split_opp\": 43.2, \"split_self\": 172.8, \"splitperc_opp\": 20, \"splitperc_self\": 80, \"accept\": 1.0, \"accepted_amount\": 172.8, \"accepted_perc\": 80.0, \"proposed_perc\": 80.0, \"proposed_amount\": 172.8}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744723917.213892
    }
  ],
  "learnable_parameters": {
    "intercept": {
      "description": "Participant's baseline bias to accept or reject offers",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "unfairness_weight": {
      "description": "Weight parameter for deviation from proportional fairness (as percent difference)",
      "range": {
        "min": -1.0,
        "max": 1.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -1.0,
          "high": 1.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "disadvantage_penalty": {
      "description": "Penalty (or bonus) applied if participant is offered strictly less than the opponent",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = intercept + unfairness_weight * unfairness_perc + disadvantage_penalty * indicator_disadvantage",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the proposed split",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "intercept": {
      "description": "Participant's baseline bias to accept or reject offers",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "unfairness_weight": {
      "description": "Weight parameter for deviation from proportional fairness (as percent difference)",
      "range": {
        "min": -1.0,
        "max": 1.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -1.0,
          "high": 1.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "unfairness_perc": {
      "description": "The difference between participant's offered percentage of the combined earning and their proportional deserved share, in percentage points",
      "range": {
        "min": -100.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "splitperc_self": {
      "description": "Percentage of combined earning offered to the participant in this proposal",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "proportional_percent": {
      "description": "Participant's deserved share as a percentage of total, based on contribution",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 36,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 36,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "disadvantage_penalty": {
      "description": "Penalty (or bonus) applied if participant is offered strictly less than the opponent",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share for the participant, in \u00a3",
      "range": {
        "min": 0.0,
        "max": 216.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_opp": {
      "description": "Proposed share for the opponent, in \u00a3",
      "range": {
        "min": 0.0,
        "max": 216.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "indicator_disadvantage": {
      "description": "Indicator variable: 1 if participant's proposed share is less than opponent's, else 0",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "This model predicts responder acceptance using a linear sum of three factors: a baseline response bias, the deviation from proportional fairness (in percent points), and a penalty applied for being offered less than the opponent. Each variable is carefully defined to minimize parameter covariance and maximize interpretability while respecting the data structure of the task.",
  "target_variable": "accept",
  "full_reasoning": "First, let me reason step by step.\n\n## 1. Key Psychological Mechanisms\n\nThis is a responder decision in a modified ultimatum-type task, where:\n- Participants know both their own and opponent's contribution (tokens).\n- The split is not always over a fixed sum, so \"fairness\" depends on relative contribution.\n- Decisions: accept (1) or reject (0).\n- Proposals can deviate from proportionality (i.e., \"I did X%, but only got Y%\").\n- Key motives likely include:\n    - **Proportionality/Fairness aversion**: Preference for getting at least what is \"deserved\" by own effort (token_self / (token_self + token_opp)).\n    - **Self-interest**: Preference for higher absolute payoffs, sometimes even if unfair.\n    - **Disadvantageous Inequality Aversion**: Dislike being offered less than the opponent (split_self < split_opp).\n- Yet, not too many parameters: want to limit risk of covariance.\n\n## 2. Interactions\n\n- **Fairness aversion** and **self-interest** can trade off: a participant might tolerate small deviations from fairness if the absolute payoff is high.\n- **Disadvantageous Inequality** is a special case: people especially dislike getting strictly less than their counterpart.\n- However, including both a fairness aversion term and a disadvantageous inequality term can cause parameter tradeoff/covariance if not handled carefully.\n\n## 3. Mathematical Formulation\n\n- Utility model is used to predict accept vs reject.\n- Logistic transformation will be applied to utility.\n- A **robust yet lean model** would thus be:\n\n    - A baseline intercept (\"acceptance bias\").\n    - A term for deviation from proportional fairness.\n    - A term for absolute gain (\"greediness\"/self-interest).\n    - Possibly a penalty/dummy for accepting when split_self < split_opp (disadvantageous inequality).\n\nTo minimize covariance and overfitting:\n- Use proportional deviation (how far from proportional is this offer for self?) as fairness.\n- Optionally, compress disadvantageous inequality and/or greed into one of these metrics.\n\n## 4. Learnable Parameters Needed\n\n- Intercept (acceptance bias): catch-all for response tendency.\n- Weight on proportional-deviation from fairness (can be positive or negative).\n- Weight on absolute amount received: should be positive.\n- Optionally, a penalty parameter for strictly disadvantageous offers (may overlap with fairness weight).\n\n## 5. Observed Variables Mapping\n\n- Own share: split_self (in \u00a3)\n- Own contribution: token_self\n- Total contribution: token_self + token_opp\n- Proportional \"deserved\" share: (token_self / (token_self + token_opp)) * combined_earning\n- Proportional deviation: split_self - proportional_share\n- Disadvantageous inequality: I(get less than opponent)? e.g., indicator(split_self < split_opp)\n- All variables are present in the data.\n\n## 6. Model Proposal\n\nTo balance parameter identifiability and meaningfulness, the **model form**:\n\n\\[\nU = intercept \\ + \\ unfairness\\_weight \\cdot (split\\_self - proportional\\_share) \\ + \\ self\\_interest\\_weight \\cdot split\\_self \\ + \\ disadvantage\\_penalty \\cdot I(split\\_self < split\\_opp)\n\\]\n\n- \"proportional_share\" = (token_self / (token_self + token_opp)) * combined_earning\n- I(split_self < split_opp): 1 if own share is strictly less than opponent's, else 0\n\n**However, the unfairness and self-interest weights may covary.** To reduce this, we can:\n- Either pick only one (preferably unfairness), or\n- Make unfairness weight on the *relative* deviation (percentage), not \u00a3, to help separate from self-interest.\n\nThus, **better/cleaner**:\n\n\\[\nU = intercept + unfairness\\_weight \\cdot unfairness\\_perc + disadvantage\\_penalty \\cdot I(split\\_self < split\\_opp)\n\\]\n\nWhere:\n- unfairness_perc = (splitperc_self - proportional_percent), with proportional_percent = 100 * (token_self / (token_self + token_opp))\n\nThus, only 3 learnable parameters: intercept, unfairness_weight, disadvantage_penalty.\n- This model can uniquely attribute effects, and minimizes covariance.\n\n## 7. Write Model and Variables\n\n### Model Formula (math):\n\n<MODEL>\nU = intercept + unfairness_weight * unfairness_perc + disadvantage_penalty * indicator_disadvantage\n</MODEL>\n\nWhere:\n- unfairness_perc = splitperc_self - proportional_percent\n- proportional_percent = 100 * (token_self / (token_self + token_opp))\n- indicator_disadvantage = 1 if split_self < split_opp, else 0\n\n## 8. Specials\n\n- Bounds on parameters:\n    - intercept: [-10, 10] (generous for bias term)\n    - unfairness_weight: [-1, 1] (large range; want to avoid insane scaling for percentage deviation)\n    - disadvantage_penalty: [-10, 10] (wide, allow for very strong penalty or even positive bias)\n    - Utility can be unbounded, as requested.\n\n## 9. Output Blocks\n\n### Target Variable\n\n<target_variable>accept</target_variable>\n\n(e.g., accept = 1 if responded accept, 0 for reject)\n\n### Variable Description (as requested)\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed split\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"intercept\": {\n      \"description\": \"Participant's baseline bias to accept or reject offers\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"unfairness_weight\": {\n      \"description\": \"Weight parameter for deviation from proportional fairness (as percent difference)\",\n      \"range\": {\n        \"min\": -1.0,\n        \"max\": 1.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -1.0,\n          \"high\": 1.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"unfairness_perc\": {\n      \"description\": \"The difference between participant's offered percentage of the combined earning and their proportional deserved share, in percentage points\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Percentage of combined earning offered to the participant in this proposal\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"proportional_percent\": {\n      \"description\": \"Participant's deserved share as a percentage of total, based on contribution\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"disadvantage_penalty\": {\n      \"description\": \"Penalty (or bonus) applied if participant is offered strictly less than the opponent\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant, in \u00a3\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 216.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed share for the opponent, in \u00a3\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 216.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"indicator_disadvantage\": {\n      \"description\": \"Indicator variable: 1 if participant's proposed share is less than opponent's, else 0\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nThis model predicts responder acceptance using a linear sum of three factors: a baseline response bias, the deviation from proportional fairness (in percent points), and a penalty applied for being offered less than the opponent. Each variable is carefully defined to minimize parameter covariance and maximize interpretability while respecting the data structure of the task.\n</SUMMARY>\n\n<target_variable>accept</target_variable>",
  "prediction_type": "utility",
  "current_model": "Specification: U = intercept + unfairness_weight * unfairness_perc + disadvantage_penalty * indicator_disadvantage\nSummary: This model predicts responder acceptance using a linear sum of three factors: a baseline response bias, the deviation from proportional fairness (in percent points), and a penalty applied for being offered less than the opponent. Each variable is carefully defined to minimize parameter covariance and maximize interpretability while respecting the data structure of the task.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, intercept=0, unfairness_weight=0, disadvantage_penalty=0):\n    model_predictions = []\n    for trial in trial_data:\n        # Extract data\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        split_opp = trial.get(\"split_opp\", 0)\n\n        # Calculate proportional percent\n        total_tokens = token_self + token_opp\n        proportional_percent = 0.0\n        if total_tokens > 0:\n            proportional_percent = 100 * (token_self / total_tokens)\n\n        # Calculate unfairness percent\n        unfairness_perc = splitperc_self - proportional_percent\n\n        # Calculate indicator disadvantage\n        indicator_disadvantage = 1 if split_self < split_opp else 0\n\n        # Calculate utility\n        utility = intercept + (unfairness_weight * unfairness_perc) + (disadvantage_penalty * indicator_disadvantage)\n\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7957875457875458,
  "group_accuracies": {
    "Control": 0.838501291989664,
    "Cocaine": 0.7575231481481481
  },
  "group_parameter_averages": {
    "Control": {
      "intercept": 9.403476373690436,
      "unfairness_weight": 0.12886619046185482,
      "disadvantage_penalty": -2.7354726036236947
    },
    "Cocaine": {
      "intercept": 8.270953795546781,
      "unfairness_weight": 0.1074510540783716,
      "disadvantage_penalty": -6.905758965802669
    }
  },
  "fitting_results": [
    {
      "intercept": 4.493667501555927,
      "unfairness_weight": 0.06624493237122711,
      "disadvantage_penalty": -10.0,
      "success": true,
      "log_likelihood": -0.09541754574629084,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.11263056824854474,
      "disadvantage_penalty": -7.830227376056544,
      "success": true,
      "log_likelihood": -16.486469427969745,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.3325078978899054,
      "disadvantage_penalty": -2.997775684495633,
      "success": true,
      "log_likelihood": -7.6233017620244174,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.12538895629827188,
      "disadvantage_penalty": -8.170686616203765,
      "success": true,
      "log_likelihood": -14.985218295751231,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.4631845139641103,
      "disadvantage_penalty": -2.00219805993283,
      "success": true,
      "log_likelihood": -4.682406535605181,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.13290317530152318,
      "disadvantage_penalty": -6.4000120580205175,
      "success": true,
      "log_likelihood": -14.682521694066882,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": -6.397741427141389e-05,
      "disadvantage_penalty": 10.0,
      "success": true,
      "log_likelihood": -0.0001362610724703925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 9.772323647989891,
      "unfairness_weight": 0.14605612936053516,
      "disadvantage_penalty": -5.615822539423202,
      "success": true,
      "log_likelihood": -13.598803545153114,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": -6.392740104265559e-05,
      "disadvantage_penalty": 10.0,
      "success": true,
      "log_likelihood": -0.0001362610724625026,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.22433992320687587,
      "disadvantage_penalty": -6.834728253176744,
      "success": true,
      "log_likelihood": -9.921645632475073,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.42733877224295136,
      "disadvantage_penalty": -2.630568419064098,
      "success": true,
      "log_likelihood": -5.424847860793034,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 8.018830062242715,
      "unfairness_weight": 0.11777500753506163,
      "disadvantage_penalty": -10.0,
      "success": true,
      "log_likelihood": -3.632758605146325,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.21024423985282964,
      "disadvantage_penalty": -6.746930630736347,
      "success": true,
      "log_likelihood": -10.690531419087199,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": -7.780518809920263e-05,
      "disadvantage_penalty": 10.0,
      "success": true,
      "log_likelihood": -0.00013626107671479935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": -3.2295498709813675e-05,
      "disadvantage_penalty": 10.0,
      "success": true,
      "log_likelihood": -0.00013626108095422245,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 8.747095608408564e-06,
      "disadvantage_penalty": 10.0,
      "success": true,
      "log_likelihood": -0.00013626112965415912,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": -5.662588357983714e-05,
      "disadvantage_penalty": 10.0,
      "success": true,
      "log_likelihood": -0.00013626107217849898,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.16971043012002485,
      "disadvantage_penalty": -3.114930870946876,
      "success": true,
      "log_likelihood": -8.436131446065511,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.2954606959716021,
      "disadvantage_penalty": 2.0697589434193313,
      "success": true,
      "log_likelihood": -5.042717324001083,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.00011006606759594645,
      "disadvantage_penalty": 7.691111988020713,
      "success": true,
      "log_likelihood": -0.00013687937829546363,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 9.821094286050348,
      "unfairness_weight": 0.165070883388868,
      "disadvantage_penalty": -6.1272347885311875,
      "success": true,
      "log_likelihood": -13.287096579103983,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 9.524782217660732,
      "unfairness_weight": 0.14669645206257034,
      "disadvantage_penalty": -3.4471822780013075,
      "success": true,
      "log_likelihood": -9.224162418072412,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 9.695039645437141,
      "unfairness_weight": 0.06451534297669752,
      "disadvantage_penalty": -9.272586815759931,
      "success": true,
      "log_likelihood": -17.885344357274374,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.08829468832321125,
      "disadvantage_penalty": -8.161553010870035,
      "success": true,
      "log_likelihood": -18.315950289700982,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 8.218278114249589,
      "unfairness_weight": 0.19356581598518416,
      "disadvantage_penalty": -4.4241276679571415,
      "success": true,
      "log_likelihood": -11.8508808292924,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.1575488050667836,
      "disadvantage_penalty": -6.244203327736242,
      "success": true,
      "log_likelihood": -13.59319869052872,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.11087469263144029,
      "disadvantage_penalty": -7.501972973910377,
      "success": true,
      "log_likelihood": -16.658886083506392,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.49857156358472304,
      "disadvantage_penalty": -5.699361095895719,
      "success": true,
      "log_likelihood": -3.1241238785035153,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 9.509019241406987,
      "unfairness_weight": 0.14761255923362904,
      "disadvantage_penalty": -3.0227889331498967,
      "success": true,
      "log_likelihood": -8.095841021647335,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.10126360930325554,
      "disadvantage_penalty": -6.207416629055901,
      "success": true,
      "log_likelihood": -14.049613652435236,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.0002110609990905756,
      "disadvantage_penalty": 9.975805389037449,
      "success": true,
      "log_likelihood": -0.00013626366512128877,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 4.493670959169511,
      "unfairness_weight": 0.066244736896153,
      "disadvantage_penalty": -10.0,
      "success": true,
      "log_likelihood": -0.09541754574655421,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.03955562327456631,
      "disadvantage_penalty": -9.738630333033132,
      "success": true,
      "log_likelihood": -20.53791069552417,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 9.81720035255415,
      "unfairness_weight": 0.115457036646564,
      "disadvantage_penalty": -8.35764884074472,
      "success": true,
      "log_likelihood": -15.222779251711177,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": -6.045958477404213e-05,
      "disadvantage_penalty": 10.0,
      "success": true,
      "log_likelihood": -0.0001362610721602501,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.08212616627836092,
      "disadvantage_penalty": -7.656915784175868,
      "success": true,
      "log_likelihood": -18.17844134983455,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.18484041789973868,
      "disadvantage_penalty": -4.545951990292859,
      "success": true,
      "log_likelihood": -11.306892597516491,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.1540506061251961,
      "disadvantage_penalty": -6.997151589654154,
      "success": true,
      "log_likelihood": -13.855437635725048,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.09207304681533031,
      "disadvantage_penalty": -7.240292575394985,
      "success": true,
      "log_likelihood": -17.08197988223353,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 9.576588516593423,
      "unfairness_weight": 0.07582265669634727,
      "disadvantage_penalty": -5.184581071218881,
      "success": true,
      "log_likelihood": -8.774330605608368,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.07954723859622076,
      "disadvantage_penalty": -7.879495372948737,
      "success": true,
      "log_likelihood": -18.657934862469702,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 1.408989523778314,
      "unfairness_weight": 0.16323465498750384,
      "disadvantage_penalty": -0.5757776553524493,
      "success": true,
      "log_likelihood": -10.937679741267312,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": -0.009480432467867918,
      "disadvantage_penalty": -6.733245034556287,
      "success": true,
      "log_likelihood": -4.472743725860936,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.0771462503102724,
      "disadvantage_penalty": -8.24536571252291,
      "success": true,
      "log_likelihood": -19.13544557049275,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.12396831816772247,
      "disadvantage_penalty": -6.822402728112266,
      "success": true,
      "log_likelihood": -15.499764692798387,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 9.796636858123136,
      "unfairness_weight": 0.05367489665684914,
      "disadvantage_penalty": -7.6870021762078915,
      "success": true,
      "log_likelihood": -18.483894715651893,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.08634949480205986,
      "disadvantage_penalty": -8.202750033373626,
      "success": true,
      "log_likelihood": -18.461486910400275,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 9.985759728270823,
      "unfairness_weight": 0.07103274800487115,
      "disadvantage_penalty": -9.283643337658827,
      "success": true,
      "log_likelihood": -18.113715015980894,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.229683465220743,
      "disadvantage_penalty": -6.426652765185056,
      "success": true,
      "log_likelihood": -9.958364033020265,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 9.661902649013449,
      "unfairness_weight": 0.013805078394520727,
      "disadvantage_penalty": -9.42196641777598,
      "success": true,
      "log_likelihood": -22.70510852780913,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.05199968632379602,
      "disadvantage_penalty": -8.088573193305104,
      "success": true,
      "log_likelihood": -19.260645862194927,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 7.728605347862091,
      "unfairness_weight": 0.023706385060860237,
      "disadvantage_penalty": -10.0,
      "success": true,
      "log_likelihood": -7.445186981522733,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.06278281411996756,
      "disadvantage_penalty": -8.704639540689259,
      "success": true,
      "log_likelihood": -20.189113487468795,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.016128661773896602,
      "disadvantage_penalty": -9.46363873244565,
      "success": true,
      "log_likelihood": -22.52803372023455,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 1.2126123626379006,
      "unfairness_weight": 0.1357429886501854,
      "disadvantage_penalty": 0.7941728824341426,
      "success": true,
      "log_likelihood": -15.601251010246044,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.44508203576429095,
      "disadvantage_penalty": -4.8100602234217735,
      "success": true,
      "log_likelihood": -4.548729889801733,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.1876095657147705,
      "disadvantage_penalty": -8.5921424710501,
      "success": true,
      "log_likelihood": -9.68813928318693,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": -0.07386095646705208,
      "disadvantage_penalty": -9.255798227393454,
      "success": true,
      "log_likelihood": -10.691120759346491,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 7.53394255418405,
      "unfairness_weight": 0.07138482728732974,
      "disadvantage_penalty": -9.878250764824768,
      "success": true,
      "log_likelihood": -4.094700729920124,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.05100928545421759,
      "disadvantage_penalty": -7.431753958490354,
      "success": true,
      "log_likelihood": -15.76822183348287,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.055884812814630785,
      "disadvantage_penalty": -8.433137200260598,
      "success": true,
      "log_likelihood": -20.338090021757353,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.1273672745387962,
      "disadvantage_penalty": -7.532602611884546,
      "success": true,
      "log_likelihood": -15.488506055065574,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 4.493673672490362,
      "unfairness_weight": 0.0662452901078756,
      "disadvantage_penalty": -10.0,
      "success": true,
      "log_likelihood": -0.09541754574550589,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.05714544631126109,
      "disadvantage_penalty": -9.25036841350854,
      "success": true,
      "log_likelihood": -19.95514103079568,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.15530657498648695,
      "disadvantage_penalty": -9.576134021195793,
      "success": true,
      "log_likelihood": -9.221486502347041,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 8.740707457897658,
      "unfairness_weight": 0.10570122726890405,
      "disadvantage_penalty": -6.356755787207891,
      "success": true,
      "log_likelihood": -17.02074511531532,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.07147625680949347,
      "disadvantage_penalty": -5.747967556878109,
      "success": true,
      "log_likelihood": -8.896662643195432,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.11726444012311896,
      "disadvantage_penalty": -4.923370531882189,
      "success": true,
      "log_likelihood": -10.317834928187777,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.07892739775865243,
      "disadvantage_penalty": -8.20567757148487,
      "success": true,
      "log_likelihood": -19.00536861395723,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.06274580758867185,
      "disadvantage_penalty": -6.023970876712152,
      "success": true,
      "log_likelihood": -9.119796048507855,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 8.329331778637712,
      "unfairness_weight": 1.0,
      "disadvantage_penalty": -7.190036656330118,
      "success": true,
      "log_likelihood": -0.5326242013442789,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 7.6434839211941945,
      "unfairness_weight": 0.019015673734479575,
      "disadvantage_penalty": -10.0,
      "success": true,
      "log_likelihood": -7.480773946940577,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 9.865328944428143,
      "unfairness_weight": 0.10349911065612517,
      "disadvantage_penalty": -7.704682800257442,
      "success": true,
      "log_likelihood": -17.199898053680435,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 9.411763749258638,
      "unfairness_weight": 0.061683921982041985,
      "disadvantage_penalty": -6.745640410340289,
      "success": true,
      "log_likelihood": -16.318166233536413,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 0.7241992341360264,
      "unfairness_weight": 0.03176049002322115,
      "disadvantage_penalty": -0.09525416010613023,
      "success": true,
      "log_likelihood": -23.92432389303798,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.08883843319798827,
      "disadvantage_penalty": -7.146152325719324,
      "success": true,
      "log_likelihood": -16.83768170808922,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.14892691058319266,
      "disadvantage_penalty": -2.4526701383640597,
      "success": true,
      "log_likelihood": -5.264736749129514,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -0.7142390765402588,
      "unfairness_weight": -0.02616756410591575,
      "disadvantage_penalty": -3.3862314125994493,
      "success": true,
      "log_likelihood": -6.2844429309396395,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.022980197542133575,
      "disadvantage_penalty": -9.185664307658469,
      "success": true,
      "log_likelihood": -22.081635642593326,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 4.493684949772227,
      "unfairness_weight": 0.06624608687646973,
      "disadvantage_penalty": -10.0,
      "success": true,
      "log_likelihood": -0.0954175457506104,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 9.334367902696977,
      "unfairness_weight": 0.02332376703841744,
      "disadvantage_penalty": -8.890169340098845,
      "success": true,
      "log_likelihood": -22.42794577027498,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": -0.022839010024959285,
      "disadvantage_penalty": -8.153788736067767,
      "success": true,
      "log_likelihood": -9.916109897627795,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 0.711833609192361,
      "unfairness_weight": 0.02462210383967204,
      "disadvantage_penalty": -2.9677262098423465,
      "success": true,
      "log_likelihood": -9.308565020543647,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.12419069269552377,
      "disadvantage_penalty": -7.596570980023178,
      "success": true,
      "log_likelihood": -15.698118177534793,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 0.7347103056566858,
      "unfairness_weight": 0.03683520576027857,
      "disadvantage_penalty": 0.5270146905260932,
      "success": true,
      "log_likelihood": -22.95990248639805,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 8.51629273777223,
      "unfairness_weight": 0.40367616665457673,
      "disadvantage_penalty": -10.0,
      "success": true,
      "log_likelihood": -0.8137086277748506,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.07305231927932862,
      "disadvantage_penalty": -7.555873744518579,
      "success": true,
      "log_likelihood": -17.91396256052422,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -1.198816500438924,
      "unfairness_weight": 0.13372183565003554,
      "disadvantage_penalty": 2.0023831312910967,
      "success": true,
      "log_likelihood": -13.064950265500926,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.20671301130148842,
      "disadvantage_penalty": -0.12333338693703116,
      "success": true,
      "log_likelihood": -4.389857995883235,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.08543464030682818,
      "disadvantage_penalty": -8.54333767099507,
      "success": true,
      "log_likelihood": -18.279821802705364,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "unfairness_weight": 0.026826529223718327,
      "disadvantage_penalty": -8.698243929449609,
      "success": true,
      "log_likelihood": -20.496704459261295,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "intercept": {
        "r": 0.7076963398066795,
        "p": 1.8413847368032992e-16
      },
      "unfairness_weight": {
        "r": 0.7653321086596371,
        "p": 1.8410832682822926e-20
      },
      "disadvantage_penalty": {
        "r": 0.8641881045991242,
        "p": 5.433756276182685e-31
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 33.46334721658972,
  "bic_Control": 28.448726292487788,
  "bic_Cocaine": 37.95561179443103,
  "bic_results": {
    "average_bic": 33.46334721658972,
    "individual_bics": [
      10.941391906860913,
      43.723495671307816,
      25.997160339417164,
      40.72099340687079,
      20.11536988657869,
      40.1156002035021,
      10.750829337513272,
      37.94816390567456,
      10.750829337513256,
      30.593848080318477,
      21.6002525369544,
      18.01607402566098,
      32.13161965354273,
      10.75082933752176,
      10.75082933753024,
      10.75082933762764,
      10.750829337512688,
      27.622819707499353,
      20.835991463370497,
      10.750830574124922,
      37.324749973576296,
      29.198881651513155,
      46.52124552991708,
      47.3824573947703,
      34.45231847395313,
      37.93695419642577,
      44.06832898238112,
      16.998804572375363,
      26.942238858663,
      38.8497841202388,
      10.750829342698573,
      10.941391906861439,
      51.82637820641668,
      41.19611531879069,
      10.750829337512652,
      47.10743951503743,
      33.364342010401316,
      38.46143208681843,
      44.91451657983539,
      28.299218026585066,
      48.06642654030773,
      32.625916297902954,
      19.6960442670902,
      49.021447956353825,
      41.7500862009651,
      47.71834624667211,
      47.67353063616888,
      46.977986847330115,
      30.66728488140886,
      56.16077387098659,
      49.27184853975818,
      25.640930778413797,
      51.12878379030592,
      55.806624255837434,
      41.95305883586042,
      19.848016594971796,
      30.12683538174219,
      32.13279833406131,
      18.93995827520858,
      42.28700048233407,
      51.42673685888303,
      41.72756892549948,
      10.941391906859343,
      50.66083887695969,
      29.193529820062412,
      44.79204704599897,
      28.543882101759195,
      31.386226671743884,
      48.76129404328279,
      28.99014891238404,
      11.815805218056889,
      25.712104709249484,
      45.1503529227292,
      43.38688928244116,
      58.599204601444285,
      44.42592023154677,
      21.280030313627357,
      23.319442677247608,
      54.91382810055498,
      10.941391906869551,
      55.60644835591829,
      30.58277661062392,
      29.367686856455624,
      42.14679317043792,
      56.67036178816443,
      12.377974070918032,
      46.578481936416765,
      36.88045734637018,
      19.5302728071348,
      47.310200420779054,
      51.74396573389092
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        10.941391906860913,
        43.723495671307816,
        25.997160339417164,
        40.72099340687079,
        20.11536988657869,
        40.1156002035021,
        10.750829337513272,
        37.94816390567456,
        10.750829337513256,
        30.593848080318477,
        21.6002525369544,
        18.01607402566098,
        32.13161965354273,
        10.75082933752176,
        10.75082933753024,
        10.75082933762764,
        10.750829337512688,
        27.622819707499353,
        20.835991463370497,
        10.750830574124922,
        37.324749973576296,
        29.198881651513155,
        46.52124552991708,
        47.3824573947703,
        34.45231847395313,
        37.93695419642577,
        44.06832898238112,
        16.998804572375363,
        26.942238858663,
        38.8497841202388,
        10.750829342698573,
        10.941391906861439,
        51.82637820641668,
        41.19611531879069,
        10.750829337512652,
        47.10743951503743,
        33.364342010401316,
        38.46143208681843,
        44.91451657983539,
        28.299218026585066,
        48.06642654030773,
        32.625916297902954,
        19.6960442670902
      ],
      "Cocaine": [
        49.021447956353825,
        41.7500862009651,
        47.71834624667211,
        47.67353063616888,
        46.977986847330115,
        30.66728488140886,
        56.16077387098659,
        49.27184853975818,
        25.640930778413797,
        51.12878379030592,
        55.806624255837434,
        41.95305883586042,
        19.848016594971796,
        30.12683538174219,
        32.13279833406131,
        18.93995827520858,
        42.28700048233407,
        51.42673685888303,
        41.72756892549948,
        10.941391906859343,
        50.66083887695969,
        29.193529820062412,
        44.79204704599897,
        28.543882101759195,
        31.386226671743884,
        48.76129404328279,
        28.99014891238404,
        11.815805218056889,
        25.712104709249484,
        45.1503529227292,
        43.38688928244116,
        58.599204601444285,
        44.42592023154677,
        21.280030313627357,
        23.319442677247608,
        54.91382810055498,
        10.941391906869551,
        55.60644835591829,
        30.58277661062392,
        29.367686856455624,
        42.14679317043792,
        56.67036178816443,
        12.377974070918032,
        46.578481936416765,
        36.88045734637018,
        19.5302728071348,
        47.310200420779054,
        51.74396573389092
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- intercept: r = 0.708\n- unfairness_weight: r = 0.765\n- disadvantage_penalty: r = 0.864",
  "previous_models": [
    "Specification: U = intercept + unfairness_weight * unfairness_perc + disadvantage_penalty * indicator_disadvantage\nSummary: This model predicts responder acceptance using a linear sum of three factors: a baseline response bias, the deviation from proportional fairness (in percent points), and a penalty applied for being offered less than the opponent. Each variable is carefully defined to minimize parameter covariance and maximize interpretability while respecting the data structure of the task.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 33.46334721658972\nOverall Accuracy: 0.7958\nGroup Accuracies:\n- Control: 0.8385\n- Cocaine: 0.7575\n\nParameter Recovery:\n- intercept: r = 0.708\n- unfairness_weight: r = 0.765\n- disadvantage_penalty: r = 0.864"
  ]
}