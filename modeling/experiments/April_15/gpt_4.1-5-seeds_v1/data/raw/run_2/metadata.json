{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "\n\nUpdated instructions:\n\nPlease carefully design your computational model with the following steps and considerations. The goal is to maximize model fit (minimize BIC), improve predictive accuracy, and achieve high, dissociable parameter recovery for every learnable parameter.\n\n1. **Reason step by step** through:\n   - The central psychological mechanisms active in the task.\n   - How these mechanisms are likely to interact or trade off, including any possible **nonlinearities**, **thresholds**, or **interaction effects** in the behavioral response (e.g., sharply increased rejection once unfairness passes a certain point, or disadvantage aversion mattering only beyond threshold).\n   - What mathematical form best captures these processes, justifying every proposed term and making sure that each learnable parameter addresses a psychologically distinct process.\n   - The minimum number of learnable parameters needed\u2014**have a slight bias towards parsimony**, but if adding a parameter clearly improves interpretability, accuracy, or fit, justify and include it.\n\n2. **Model Structure**: \n   - You are encouraged to consider not only simple linear additive terms but also **nonlinear, thresholded, or interaction terms** between key variables, as long as their inclusion is justifiable and their parameter values are likely to be statistically identifiable (i.e., not highly covariant with existing parameters).\n   - Explicitly discuss whether absolute self-interest (magnitude of own offer) should be separated from fairness/unfairness, and consider whether gain framing or loss framing makes sense.\n   - Ensure that every parameter uniquely maps to a hypothesized cognitive or motivational process.\n\n3. **Parameter Covariance and Recovery**:\n   - Proactively seek to avoid high covariance or redundancy between learnable parameters. Where two variables could overlap, discuss and choose the mathematically or conceptually clearest approach.\n   - Consider parameter rescaling (e.g., using percent deviation vs. absolute income) to make parameters as orthogonal and recoverable as possible.\n\n4. **Variable Mapping**:\n   - Clearly define all variables, giving careful attention to how each calculated or derived variable relates to raw data and psychological process.\n   - For *every* learnable parameter, provide a generous but finite range for estimation.\n\n5. **Encourage out-of-the-box thinking**:\n   - At least one candidate model should include an interaction, threshold, or nonlinear (e.g., tanh, sigmoid, step, or quadratic) term in addition to or instead of simple linear effects, provided this supports psychological interpretability.\n   - If you reject such a term, provide a brief rationale for its exclusion.\n\n**Deliverable**:  \nProceed step by step, reasoning through these points as you build your model. Your model will be evaluated both for predictive performance and the dissociability of its parameters, so strive for both parsimony and innovation.\n\nBe meticulous and explicit at every stage, and do not simply default to the standard linear model. Show that you have considered and explored at least one *novel* or *creative* modeling possibility before selecting your final form.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: \n\nUpdated instructions:\n\nPlease carefully design your computational model with the following steps and considerations. The goal is to maximize model fit (minimize BIC), improve predictive accuracy, and achieve high, dissociable parameter recovery for every learnable parameter.\n\n1. **Reason step by step** through:\n   - The central psychological mechanisms active in the task.\n   - How these mechanisms are likely to interact or trade off, including any possible **nonlinearities**, **thresholds**, or **interaction effects** in the behavioral response (e.g., sharply increased rejection once unfairness passes a certain point, or disadvantage aversion mattering only beyond threshold).\n   - What mathematical form best captures these processes, justifying every proposed term and making sure that each learnable parameter addresses a psychologically distinct process.\n   - The minimum number of learnable parameters needed\u2014**have a slight bias towards parsimony**, but if adding a parameter clearly improves interpretability, accuracy, or fit, justify and include it.\n\n2. **Model Structure**: \n   - You are encouraged to consider not only simple linear additive terms but also **nonlinear, thresholded, or interaction terms** between key variables, as long as their inclusion is justifiable and their parameter values are likely to be statistically identifiable (i.e., not highly covariant with existing parameters).\n   - Explicitly discuss whether absolute self-interest (magnitude of own offer) should be separated from fairness/unfairness, and consider whether gain framing or loss framing makes sense.\n   - Ensure that every parameter uniquely maps to a hypothesized cognitive or motivational process.\n\n3. **Parameter Covariance and Recovery**:\n   - Proactively seek to avoid high covariance or redundancy between learnable parameters. Where two variables could overlap, discuss and choose the mathematically or conceptually clearest approach.\n   - Consider parameter rescaling (e.g., using percent deviation vs. absolute income) to make parameters as orthogonal and recoverable as possible.\n\n4. **Variable Mapping**:\n   - Clearly define all variables, giving careful attention to how each calculated or derived variable relates to raw data and psychological process.\n   - For *every* learnable parameter, provide a generous but finite range for estimation.\n\n5. **Encourage out-of-the-box thinking**:\n   - At least one candidate model should include an interaction, threshold, or nonlinear (e.g., tanh, sigmoid, step, or quadratic) term in addition to or instead of simple linear effects, provided this supports psychological interpretability.\n   - If you reject such a term, provide a brief rationale for its exclusion.\n\n**Deliverable**:  \nProceed step by step, reasoning through these points as you build your model. Your model will be evaluated both for predictive performance and the dissociability of its parameters, so strive for both parsimony and innovation.\n\nBe meticulous and explicit at every stage, and do not simply default to the standard linear model. Show that you have considered and explored at least one *novel* or *creative* modeling possibility before selecting your final form.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let\u2019s carefully reason through the task and modeling approach step by step.\n\n---\n\n## Step 1: Psychological Mechanisms and Variables\n\n- **Central Process:** This is a multi-proposal responder task, a form of the ultimatum game with varying contributions to a joint pot, and responders must accept/reject divisions as a function of perceived fairness and reward.\n- Participants care about at least two things:\n  1. **Self-interest:** The amount of reward they stand to gain by accepting (split_self or splitperc_self).\n  2. **Fairness:** The degree to which the offer matches their own and the opponent\u2019s contributions (i.e., is the division proportional to efforts, tokens found?).\n  3. **Disadvantageous Inequality Aversion:** People are especially sensitive when they are offered *less* than the opponent, especially if this is incommensurate with effort.\n  4. **\"Entitlement\":** Offers seen as especially unfair when the responder contributed disproportionately.\n\nKey variables:\n- split_self / splitperc_self: Direct self-interest.\n- split_opp / splitperc_opp: For fairness/inequality.\n- token_self, token_opp: Contribution amounts\u2014anchor \u201cdeserved\u201d fair shares.\n- combined_earning: Scaling factor; absolute/relative gains.\n- trial_type: Encodes relative contributions.\n\n---\n\n## Step 2: Key Model Dimensions\n\n- **Self-Interest:** Linear in offer (\u201cmore money \u2192 more likely accept\u201d).\n- **Relative Fairness / Proportionality:** How close the offer is to the *deserved* share, i.e., does splitperc_self \u224a deserved_share (based on proportion of tokens contributed)?  \n  - e.g., deserved_share = token_self / (token_self + token_opp) \u00d7 100%\n- **Inequality Aversion / Disadvantage:** Extra aversion to situations where participant gets *less* than deserved.\n- **Nonlinearities:**  \n  - *Empirical finding:* Humans\u2019 rejection rates are very low for offers > truly fair share, very high for offers < some threshold.  \n  - So, consider a **thresholded or nonlinear (sigmoid/tanh, etc)** function on unfairness.  \n  - Also, possible interaction: The further the participant is \u201ccheated\u201d below their deserved share\u2014especially after crossing a threshold\u2014the more punitive their response.\n\n---\n\n## Step 3: Mapping Parameters to Unique Processes\n\n- **Parameter for self-interest sensitivity** (\u03b2_self): How much does more money promote acceptance?\n- **Parameter for unfairness sensitivity** (\u03b2_ufair): How much does deviations below \u201cdeserved\u201d share hurt utility?\n- **Nonlinear \u2018harsh aversion\u2019 parameter** (\u03b8): At what unfairness threshold does rapid increase in rejection set in?\n- **Gain/loss asymmetry:** It might not be necessary, as the model already captures objective fairness.\n\n---\n\n## Step 4: Model Candidates and Justification of Chosen Form\n\n**Standard Linear Model (for comparison, not preferred):**  \nU = \u03b2\u2080 + \u03b2\u2081\u00b7splitperc_self + \u03b2\u2082\u00b7(splitperc_self - deserved_share)\n\n- *Limitation:* Misses nonlinear response to strong unfairness.\n\n**Thresholded/Nonlinear Model (Preferred):**\n\n- Use splitperc_self\n- Compute **deserved_share_perc = token_self / (token_self + token_opp) \u00d7 100**\n- Compute **unfairness = deserved_share_perc - splitperc_self**\n- Let negative unfairness (offered less than deserved) drive strong aversion, ideally with a sharp, but smooth, nonlinearity.\n\n**Novelty:**\n- Use a smooth thresholded function, e.g., `tanh` or a parametric sigmoid centered at participant-specific threshold \u03b8 (so that the more someone is under-offered, and especially when this passes their threshold, utility plummets).\n- This highly nonlinear response is both empirically grounded and dissociable from linear self-interest.\n\n---\n\n## Step 5: Final Model Formula\n\nLet:\n\n- deserved_share_perc = token_self / (token_self + token_opp) \u00d7 100\n- unfairness = deserved_share_perc - splitperc_self\n  - (So unfairness > 0 means *under-offered*, < 0 means *offered more than deserved*.)\n\n**Model:**\n```\nU = intercept + beta_self * splitperc_self / 100 \n    - beta_unfair * sigmoid((unfairness - thresh_unfair)/scale)\n```\n\nWhere:\n- **sigmoid(x) = 1/(1+exp(-x))** (maps threshold crossing smoothly)\n- The extra \"scale\" parameter makes the threshold sharper or smoother.\n- Only *under-offering* (unfairness > 0) drives significant negative effect; offers above \"deserved\" are not penalized.\n\n**Implement with Heaviside-like cutoff** using sigmoid for differentiability.\n\n---\n\n## Step 6: Final <MODEL> Section\n\n<MODEL>\ndeserved_share_perc = 100 * token_self / (token_self + token_opp)\nunfairness = deserved_share_perc - splitperc_self\n\nU = intercept \n    + beta_self * (splitperc_self / 100)\n    - beta_unfair * sigmoid( (unfairness - thresh_unfair) / scale )\n\nwhere \nsigmoid(x) = 1 / (1 + exp(-x))\n</MODEL>\n\n---\n\n## Step 7: Variable Descriptions in JSON\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"intercept\": {\n      \"description\": \"Baseline utility/acceptance bias\",\n      \"range\": {\"min\": -10.0, \"max\": 10.0, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"uniform\", \"parameters\": {\"low\": -1, \"high\": 1}},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Percentage of proposal assigned to participant (responder)\",\n      \"range\": {\"min\": 0.0, \"max\": 100.0, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"data\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens participant found (contribution by participant)\",\n      \"range\": {\"min\": 0, \"max\": 36, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"data\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\"min\": 0, \"max\": 36, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"data\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta_self\": {\n      \"description\": \"Sensitivity to offer size (self-interest weighting)\",\n      \"range\": {\"min\": 0.0, \"max\": 20.0, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"uniform\", \"parameters\": {\"low\": 0.5, \"high\": 5}},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfair\": {\n      \"description\": \"Sensitivity to perceived unfairness (how much being 'under-offered' reduces utility)\",\n      \"range\": {\"min\": 0.0, \"max\": 20.0, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"uniform\", \"parameters\": {\"low\": 0.5, \"high\": 5}},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"thresh_unfair\": {\n      \"description\": \"Threshold in percent deviation below deserved share where aversion to unfairness sharply increases\",\n      \"range\": {\"min\": -20.0, \"max\": 50.0, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"uniform\", \"parameters\": {\"low\": 0.0, \"high\": 25.0}},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"scale\": {\n      \"description\": \"Width of the unfairness-to-rejection transition (larger = more gradual, smaller = sharper cutoff)\",\n      \"range\": {\"min\": 0.1, \"max\": 20.0, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"uniform\", \"parameters\": {\"low\": 1.0, \"high\": 10.0}},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },      \n    \"deserved_share_perc\": {\n      \"description\": \"Percentage of total pot effort-contribution justified to the participant\",\n      \"range\": {\"min\": 0.0, \"max\": 100.0, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"calculated\"},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"unfairness\": {\n      \"description\": \"Deviation in percent between deserved share and proposed share (positive means under-offered)\",\n      \"range\": {\"min\": -100.0, \"max\": 100.0, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"calculated\"},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts responder acceptance as a function of (a) self-interested reward, and (b) nonlinear aversion to being under-offered compared to one\u2019s contribution. The model first computes the responder\u2019s deserved share from relative token contributions and penalizes utility by a thresholded sigmoid function of unfairness (the percent difference between deserved and offered share). Five learnable parameters dissociate baseline tendency, self-interest weighting, unfairness sensitivity, the unfairness threshold for sharp rejection, and the width of that transition, allowing nuanced prediction and interpretation of responder choice in joint-contribution bargaining.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['intercept', 'beta_self', 'beta_unfair', 'thresh_unfair', 'scale']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                Section\n\n<MODEL>\ndeserved_share_perc = 100 * token_self / (token_self + token_opp)\nunfairness = deserved_share_perc - splitperc_self\n\nU = intercept \n    + beta_self * (splitperc_self / 100)\n    - beta_unfair * sigmoid( (unfairness - thresh_unfair) / scale )\n\nwhere \nsigmoid(x) = 1 / (1 + exp(-x))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"intercept\": {\n      \"description\": \"Baseline utility/acceptance bias\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -1,\n          \"high\": 1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Percentage of proposal assigned to participant (responder)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens participant found (contribution by participant)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 36,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"data\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta_self\": {\n      \"description\": \"Sensitivity to offer size (self-interest weighting)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 20.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfair\": {\n      \"description\": \"Sensitivity to perceived unfairness (how much being 'under-offered' reduces utility)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 20.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"thresh_unfair\": {\n      \"description\": \"Threshold in percent deviation below deserved share where aversion to unfairness sharply increases\",\n      \"range\": {\n        \"min\": -20.0,\n        \"max\": 50.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.0,\n          \"high\": 25.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"scale\": {\n      \"description\": \"Width of the unfairness-to-rejection transition (larger = more gradual, smaller = sharper cutoff)\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 20.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 1.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"deserved_share_perc\": {\n      \"description\": \"Percentage of total pot effort-contribution justified to the participant\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculated\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"unfairness\": {\n      \"description\": \"Deviation in percent between deserved share and proposed share (positive means under-offered)\",\n      \"range\": {\n        \"min\": -100.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"calculated\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, intercept=0, beta_self=1, beta_unfair=1, thresh_unfair=0, scale=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n\n        if (token_self + token_opp) == 0:\n            deserved_share_perc = 50  # If both are zero, assume equal split as deserved\n        else:\n            deserved_share_perc = 100 * token_self / (token_self + token_opp)\n\n        unfairness = deserved_share_perc - splitperc_self\n\n        # Sigmoid function\n        def sigmoid(x):\n            try:\n                return 1 / (1 + math.exp(-x))\n            except OverflowError:\n                if x < 0:\n                    return 0.0\n                else:\n                    return 1.0\n\n        U = intercept + beta_self * (splitperc_self / 100) - beta_unfair * sigmoid((unfairness - thresh_unfair) / scale)\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"group1\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 12, \"token_self\": 24, \"combined_earning\": 48, \"split_opp\": 16.0, \"split_self\": 32.0, \"splitperc_opp\": 33, \"splitperc_self\": 67, \"accept\": 1.0, \"accepted_amount\": 32.0, \"accepted_perc\": 67.0, \"proposed_perc\": 67.0, \"proposed_amount\": 32.0}, {\"ID\": 2, \"group\": \"group1\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 12, \"token_self\": 24, \"combined_earning\": 48, \"split_opp\": 26.4, \"split_self\": 21.6, \"splitperc_opp\": 55, \"splitperc_self\": 45, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 45.0, \"proposed_amount\": 21.6}, {\"ID\": 3, \"group\": \"group1\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 12, \"token_self\": 24, \"combined_earning\": 48, \"split_opp\": 21.6, \"split_self\": 26.4, \"splitperc_opp\": 45, \"splitperc_self\": 55, \"accept\": 1.0, \"accepted_amount\": 26.4, \"accepted_perc\": 55.0, \"proposed_perc\": 55.0, \"proposed_amount\": 26.4}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744723988.872908
    }
  ],
  "learnable_parameters": {
    "intercept": {
      "description": "Baseline utility/acceptance bias",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -1,
          "high": 1
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta_self": {
      "description": "Sensitivity to offer size (self-interest weighting)",
      "range": {
        "min": 0.0,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfair": {
      "description": "Sensitivity to perceived unfairness (how much being 'under-offered' reduces utility)",
      "range": {
        "min": 0.0,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "thresh_unfair": {
      "description": "Threshold in percent deviation below deserved share where aversion to unfairness sharply increases",
      "range": {
        "min": -20.0,
        "max": 50.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.0,
          "high": 25.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "scale": {
      "description": "Width of the unfairness-to-rejection transition (larger = more gradual, smaller = sharper cutoff)",
      "range": {
        "min": 0.1,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 1.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "Section\n\n<MODEL>\ndeserved_share_perc = 100 * token_self / (token_self + token_opp)\nunfairness = deserved_share_perc - splitperc_self\n\nU = intercept \n    + beta_self * (splitperc_self / 100)\n    - beta_unfair * sigmoid( (unfairness - thresh_unfair) / scale )\n\nwhere \nsigmoid(x) = 1 / (1 + exp(-x))",
  "variable_descriptions": {
    "intercept": {
      "description": "Baseline utility/acceptance bias",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -1,
          "high": 1
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "splitperc_self": {
      "description": "Percentage of proposal assigned to participant (responder)",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data"
      },
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens participant found (contribution by participant)",
      "range": {
        "min": 0,
        "max": 36,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data"
      },
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 36,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "data"
      },
      "learnable": false,
      "source": "data"
    },
    "beta_self": {
      "description": "Sensitivity to offer size (self-interest weighting)",
      "range": {
        "min": 0.0,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfair": {
      "description": "Sensitivity to perceived unfairness (how much being 'under-offered' reduces utility)",
      "range": {
        "min": 0.0,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "thresh_unfair": {
      "description": "Threshold in percent deviation below deserved share where aversion to unfairness sharply increases",
      "range": {
        "min": -20.0,
        "max": 50.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.0,
          "high": 25.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "scale": {
      "description": "Width of the unfairness-to-rejection transition (larger = more gradual, smaller = sharper cutoff)",
      "range": {
        "min": 0.1,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 1.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "deserved_share_perc": {
      "description": "Percentage of total pot effort-contribution justified to the participant",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "calculated"
      },
      "learnable": false,
      "source": "calculated"
    },
    "unfairness": {
      "description": "Deviation in percent between deserved share and proposed share (positive means under-offered)",
      "range": {
        "min": -100.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "calculated"
      },
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "This model predicts responder acceptance as a function of (a) self-interested reward, and (b) nonlinear aversion to being under-offered compared to one\u2019s contribution. The model first computes the responder\u2019s deserved share from relative token contributions and penalizes utility by a thresholded sigmoid function of unfairness (the percent difference between deserved and offered share). Five learnable parameters dissociate baseline tendency, self-interest weighting, unfairness sensitivity, the unfairness threshold for sharp rejection, and the width of that transition, allowing nuanced prediction and interpretation of responder choice in joint-contribution bargaining.",
  "target_variable": "accept",
  "full_reasoning": "Let\u2019s carefully reason through the task and modeling approach step by step.\n\n---\n\n## Step 1: Psychological Mechanisms and Variables\n\n- **Central Process:** This is a multi-proposal responder task, a form of the ultimatum game with varying contributions to a joint pot, and responders must accept/reject divisions as a function of perceived fairness and reward.\n- Participants care about at least two things:\n  1. **Self-interest:** The amount of reward they stand to gain by accepting (split_self or splitperc_self).\n  2. **Fairness:** The degree to which the offer matches their own and the opponent\u2019s contributions (i.e., is the division proportional to efforts, tokens found?).\n  3. **Disadvantageous Inequality Aversion:** People are especially sensitive when they are offered *less* than the opponent, especially if this is incommensurate with effort.\n  4. **\"Entitlement\":** Offers seen as especially unfair when the responder contributed disproportionately.\n\nKey variables:\n- split_self / splitperc_self: Direct self-interest.\n- split_opp / splitperc_opp: For fairness/inequality.\n- token_self, token_opp: Contribution amounts\u2014anchor \u201cdeserved\u201d fair shares.\n- combined_earning: Scaling factor; absolute/relative gains.\n- trial_type: Encodes relative contributions.\n\n---\n\n## Step 2: Key Model Dimensions\n\n- **Self-Interest:** Linear in offer (\u201cmore money \u2192 more likely accept\u201d).\n- **Relative Fairness / Proportionality:** How close the offer is to the *deserved* share, i.e., does splitperc_self \u224a deserved_share (based on proportion of tokens contributed)?  \n  - e.g., deserved_share = token_self / (token_self + token_opp) \u00d7 100%\n- **Inequality Aversion / Disadvantage:** Extra aversion to situations where participant gets *less* than deserved.\n- **Nonlinearities:**  \n  - *Empirical finding:* Humans\u2019 rejection rates are very low for offers > truly fair share, very high for offers < some threshold.  \n  - So, consider a **thresholded or nonlinear (sigmoid/tanh, etc)** function on unfairness.  \n  - Also, possible interaction: The further the participant is \u201ccheated\u201d below their deserved share\u2014especially after crossing a threshold\u2014the more punitive their response.\n\n---\n\n## Step 3: Mapping Parameters to Unique Processes\n\n- **Parameter for self-interest sensitivity** (\u03b2_self): How much does more money promote acceptance?\n- **Parameter for unfairness sensitivity** (\u03b2_ufair): How much does deviations below \u201cdeserved\u201d share hurt utility?\n- **Nonlinear \u2018harsh aversion\u2019 parameter** (\u03b8): At what unfairness threshold does rapid increase in rejection set in?\n- **Gain/loss asymmetry:** It might not be necessary, as the model already captures objective fairness.\n\n---\n\n## Step 4: Model Candidates and Justification of Chosen Form\n\n**Standard Linear Model (for comparison, not preferred):**  \nU = \u03b2\u2080 + \u03b2\u2081\u00b7splitperc_self + \u03b2\u2082\u00b7(splitperc_self - deserved_share)\n\n- *Limitation:* Misses nonlinear response to strong unfairness.\n\n**Thresholded/Nonlinear Model (Preferred):**\n\n- Use splitperc_self\n- Compute **deserved_share_perc = token_self / (token_self + token_opp) \u00d7 100**\n- Compute **unfairness = deserved_share_perc - splitperc_self**\n- Let negative unfairness (offered less than deserved) drive strong aversion, ideally with a sharp, but smooth, nonlinearity.\n\n**Novelty:**\n- Use a smooth thresholded function, e.g., `tanh` or a parametric sigmoid centered at participant-specific threshold \u03b8 (so that the more someone is under-offered, and especially when this passes their threshold, utility plummets).\n- This highly nonlinear response is both empirically grounded and dissociable from linear self-interest.\n\n---\n\n## Step 5: Final Model Formula\n\nLet:\n\n- deserved_share_perc = token_self / (token_self + token_opp) \u00d7 100\n- unfairness = deserved_share_perc - splitperc_self\n  - (So unfairness > 0 means *under-offered*, < 0 means *offered more than deserved*.)\n\n**Model:**\n```\nU = intercept + beta_self * splitperc_self / 100 \n    - beta_unfair * sigmoid((unfairness - thresh_unfair)/scale)\n```\n\nWhere:\n- **sigmoid(x) = 1/(1+exp(-x))** (maps threshold crossing smoothly)\n- The extra \"scale\" parameter makes the threshold sharper or smoother.\n- Only *under-offering* (unfairness > 0) drives significant negative effect; offers above \"deserved\" are not penalized.\n\n**Implement with Heaviside-like cutoff** using sigmoid for differentiability.\n\n---\n\n## Step 6: Final <MODEL> Section\n\n<MODEL>\ndeserved_share_perc = 100 * token_self / (token_self + token_opp)\nunfairness = deserved_share_perc - splitperc_self\n\nU = intercept \n    + beta_self * (splitperc_self / 100)\n    - beta_unfair * sigmoid( (unfairness - thresh_unfair) / scale )\n\nwhere \nsigmoid(x) = 1 / (1 + exp(-x))\n</MODEL>\n\n---\n\n## Step 7: Variable Descriptions in JSON\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"intercept\": {\n      \"description\": \"Baseline utility/acceptance bias\",\n      \"range\": {\"min\": -10.0, \"max\": 10.0, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"uniform\", \"parameters\": {\"low\": -1, \"high\": 1}},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Percentage of proposal assigned to participant (responder)\",\n      \"range\": {\"min\": 0.0, \"max\": 100.0, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"data\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens participant found (contribution by participant)\",\n      \"range\": {\"min\": 0, \"max\": 36, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"data\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\"min\": 0, \"max\": 36, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"data\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta_self\": {\n      \"description\": \"Sensitivity to offer size (self-interest weighting)\",\n      \"range\": {\"min\": 0.0, \"max\": 20.0, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"uniform\", \"parameters\": {\"low\": 0.5, \"high\": 5}},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfair\": {\n      \"description\": \"Sensitivity to perceived unfairness (how much being 'under-offered' reduces utility)\",\n      \"range\": {\"min\": 0.0, \"max\": 20.0, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"uniform\", \"parameters\": {\"low\": 0.5, \"high\": 5}},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"thresh_unfair\": {\n      \"description\": \"Threshold in percent deviation below deserved share where aversion to unfairness sharply increases\",\n      \"range\": {\"min\": -20.0, \"max\": 50.0, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"uniform\", \"parameters\": {\"low\": 0.0, \"high\": 25.0}},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"scale\": {\n      \"description\": \"Width of the unfairness-to-rejection transition (larger = more gradual, smaller = sharper cutoff)\",\n      \"range\": {\"min\": 0.1, \"max\": 20.0, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"uniform\", \"parameters\": {\"low\": 1.0, \"high\": 10.0}},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },      \n    \"deserved_share_perc\": {\n      \"description\": \"Percentage of total pot effort-contribution justified to the participant\",\n      \"range\": {\"min\": 0.0, \"max\": 100.0, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"calculated\"},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"unfairness\": {\n      \"description\": \"Deviation in percent between deserved share and proposed share (positive means under-offered)\",\n      \"range\": {\"min\": -100.0, \"max\": 100.0, \"inclusive_min\": true, \"inclusive_max\": true},\n      \"distribution\": {\"type\": \"calculated\"},\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts responder acceptance as a function of (a) self-interested reward, and (b) nonlinear aversion to being under-offered compared to one\u2019s contribution. The model first computes the responder\u2019s deserved share from relative token contributions and penalizes utility by a thresholded sigmoid function of unfairness (the percent difference between deserved and offered share). Five learnable parameters dissociate baseline tendency, self-interest weighting, unfairness sensitivity, the unfairness threshold for sharp rejection, and the width of that transition, allowing nuanced prediction and interpretation of responder choice in joint-contribution bargaining.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: Section\n\n<MODEL>\ndeserved_share_perc = 100 * token_self / (token_self + token_opp)\nunfairness = deserved_share_perc - splitperc_self\n\nU = intercept \n    + beta_self * (splitperc_self / 100)\n    - beta_unfair * sigmoid( (unfairness - thresh_unfair) / scale )\n\nwhere \nsigmoid(x) = 1 / (1 + exp(-x))\nSummary: This model predicts responder acceptance as a function of (a) self-interested reward, and (b) nonlinear aversion to being under-offered compared to one\u2019s contribution. The model first computes the responder\u2019s deserved share from relative token contributions and penalizes utility by a thresholded sigmoid function of unfairness (the percent difference between deserved and offered share). Five learnable parameters dissociate baseline tendency, self-interest weighting, unfairness sensitivity, the unfairness threshold for sharp rejection, and the width of that transition, allowing nuanced prediction and interpretation of responder choice in joint-contribution bargaining.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, intercept=0, beta_self=1, beta_unfair=1, thresh_unfair=0, scale=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n\n        if (token_self + token_opp) == 0:\n            deserved_share_perc = 50  # If both are zero, assume equal split as deserved\n        else:\n            deserved_share_perc = 100 * token_self / (token_self + token_opp)\n\n        unfairness = deserved_share_perc - splitperc_self\n\n        # Sigmoid function\n        def sigmoid(x):\n            try:\n                return 1 / (1 + math.exp(-x))\n            except OverflowError:\n                if x < 0:\n                    return 0.0\n                else:\n                    return 1.0\n\n        U = intercept + beta_self * (splitperc_self / 100) - beta_unfair * sigmoid((unfairness - thresh_unfair) / scale)\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.8263125763125763,
  "group_accuracies": {
    "Control": 0.8624031007751938,
    "Cocaine": 0.7939814814814815
  },
  "group_parameter_averages": {
    "Control": {
      "intercept": 6.154885017255261,
      "beta_self": 14.713320048051061,
      "beta_unfair": 10.906440643380595,
      "thresh_unfair": 16.702126716135773,
      "scale": 5.409211854828939
    },
    "Cocaine": {
      "intercept": 2.5181267686732633,
      "beta_self": 11.842475972317166,
      "beta_unfair": 11.468021863108481,
      "thresh_unfair": 13.41031341133538,
      "scale": 3.776442654007898
    }
  },
  "fitting_results": [
    {
      "intercept": -9.491250366407067,
      "beta_self": 20.0,
      "beta_unfair": 10.407731098668831,
      "thresh_unfair": 19.777548061873507,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -2.6290916176327053,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 14.954176496506022,
      "beta_unfair": 15.523504546435758,
      "thresh_unfair": 13.587174860822147,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -10.379536283158265,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 3.8672730114653784,
      "beta_unfair": 15.620233061995997,
      "thresh_unfair": 12.716760229571026,
      "scale": 8.55724288821458,
      "success": true,
      "log_likelihood": -7.7268597853430965,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": -3.0172972895349526,
      "beta_self": 14.640047714318284,
      "beta_unfair": 15.156806550675869,
      "thresh_unfair": 50.0,
      "scale": 15.429938732759988,
      "success": true,
      "log_likelihood": -13.25120072790746,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 7.802819651964718,
      "beta_self": 0.0,
      "beta_unfair": 20.0,
      "thresh_unfair": 21.586715212955358,
      "scale": 8.183125751019913,
      "success": true,
      "log_likelihood": -5.032312547996474,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 20.0,
      "beta_unfair": 17.083498966693234,
      "thresh_unfair": -14.649655704045362,
      "scale": 18.381607698919346,
      "success": true,
      "log_likelihood": -10.934341012454551,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 20.0,
      "beta_unfair": 0.0,
      "thresh_unfair": 12.146567566350214,
      "scale": 11.069212872450908,
      "success": true,
      "log_likelihood": -2.6274734921805595e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 9.997287753241617,
      "beta_self": 20.0,
      "beta_unfair": 15.651935521077135,
      "thresh_unfair": 16.699840593596218,
      "scale": 0.1803317528240273,
      "success": true,
      "log_likelihood": -9.41227197034906,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 20.0,
      "beta_unfair": 0.0,
      "thresh_unfair": -16.202586699004765,
      "scale": 19.272794391749542,
      "success": true,
      "log_likelihood": -2.627473492180559e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 8.956193567903147,
      "beta_unfair": 15.630643772802086,
      "thresh_unfair": 0.6805220632124319,
      "scale": 8.054793593549878,
      "success": true,
      "log_likelihood": -10.076481446882209,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": -1.6325159769757014,
      "beta_self": 20.0,
      "beta_unfair": 20.0,
      "thresh_unfair": 24.504455877336255,
      "scale": 5.126375441224184,
      "success": true,
      "log_likelihood": -2.4971449846577376,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": -8.940000299156694,
      "beta_self": 20.0,
      "beta_unfair": 20.0,
      "thresh_unfair": 18.172761803920135,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -4.8372221009877485,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 3.779676761468727,
      "beta_self": 20.0,
      "beta_unfair": 12.919563848204815,
      "thresh_unfair": 11.669422173116201,
      "scale": 2.5314257209950783,
      "success": true,
      "log_likelihood": -5.971786110611837,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 20.0,
      "beta_unfair": 0.0,
      "thresh_unfair": 34.66244658560363,
      "scale": 10.298311057539491,
      "success": true,
      "log_likelihood": -2.627473492180559e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 20.0,
      "beta_unfair": 0.0,
      "thresh_unfair": -4.3006222582666815,
      "scale": 6.771004997492053,
      "success": true,
      "log_likelihood": -2.627473492180559e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 18.50739271765321,
      "beta_unfair": 0.0,
      "thresh_unfair": -7.938385089820725,
      "scale": 19.677201550223238,
      "success": true,
      "log_likelihood": -3.244094028687153e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 18.49680228708363,
      "beta_unfair": 0.0,
      "thresh_unfair": 28.961843845209156,
      "scale": 17.965367009123636,
      "success": true,
      "log_likelihood": -3.249063244576252e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 7.049885646866521,
      "beta_self": 20.0,
      "beta_unfair": 10.921236338671749,
      "thresh_unfair": 22.68355376654294,
      "scale": 2.095900303223989,
      "success": true,
      "log_likelihood": -4.132495405954052,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 9.08042017311535,
      "beta_self": 20.0,
      "beta_unfair": 13.425617557539736,
      "thresh_unfair": 30.468497507002,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -3.44041879108064,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 20.0,
      "beta_unfair": 0.0,
      "thresh_unfair": 14.894267068329196,
      "scale": 19.425794304553083,
      "success": true,
      "log_likelihood": -2.6274734921805584e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 7.857781543124305,
      "beta_unfair": 13.67629847679998,
      "thresh_unfair": 7.984894909156449,
      "scale": 5.003096473360146,
      "success": true,
      "log_likelihood": -12.02236589313681,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 8.116356502385413,
      "beta_self": 10.144427374144025,
      "beta_unfair": 10.33353821564805,
      "thresh_unfair": 22.174754368694895,
      "scale": 3.868767290233194,
      "success": true,
      "log_likelihood": -6.7340208077902375,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": -6.730867085982197,
      "beta_self": 20.0,
      "beta_unfair": 19.999995790709715,
      "thresh_unfair": 28.001341210864695,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -9.892889921497078,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": -4.102632793565877,
      "beta_self": 19.05234335551951,
      "beta_unfair": 2.3173592086944983,
      "thresh_unfair": 18.391756250808054,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -12.68062237882079,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 6.114762142030963,
      "beta_self": 0.0,
      "beta_unfair": 8.75460847895001,
      "thresh_unfair": 15.108563803806287,
      "scale": 4.1281501541727845,
      "success": true,
      "log_likelihood": -9.784410014843376,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 9.596912805002805,
      "beta_self": 2.796518355504707,
      "beta_unfair": 11.423517153018015,
      "thresh_unfair": 15.188002407408499,
      "scale": 1.2063014756867165,
      "success": true,
      "log_likelihood": -10.883842310731957,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 9.887699730273967,
      "beta_self": 20.0,
      "beta_unfair": 16.103118324864322,
      "thresh_unfair": 10.409270084749044,
      "scale": 0.21065425015455233,
      "success": true,
      "log_likelihood": -6.596179780425076,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 9.619667819340052,
      "beta_self": 20.0,
      "beta_unfair": 20.0,
      "thresh_unfair": 3.119399260806112,
      "scale": 3.3776831534758984,
      "success": true,
      "log_likelihood": -2.7586574839504974,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 3.3657046830682997,
      "beta_unfair": 10.43532862307348,
      "thresh_unfair": 22.87364426672971,
      "scale": 3.300397191207921,
      "success": true,
      "log_likelihood": -7.425914048594574,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 4.946598719350143,
      "beta_unfair": 10.912344121072943,
      "thresh_unfair": 18.736002168583106,
      "scale": 0.4327906656974248,
      "success": true,
      "log_likelihood": -12.818883390021773,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 18.59208573675583,
      "beta_unfair": 0.0,
      "thresh_unfair": 11.892203806864808,
      "scale": 2.2106191050604016,
      "success": true,
      "log_likelihood": -3.2046860416068395e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 9.891470556672457,
      "beta_self": 20.0,
      "beta_unfair": 19.99945561872408,
      "thresh_unfair": -8.225528618147196,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -2.595690696564602,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": -6.5779193196761465,
      "beta_self": 20.0,
      "beta_unfair": 0.0,
      "thresh_unfair": 33.0442754866802,
      "scale": 18.76713298486561,
      "success": true,
      "log_likelihood": -13.686038537115085,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 20.0,
      "beta_unfair": 17.28321797642207,
      "thresh_unfair": 4.591137159428219,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -10.650586856716808,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 20.0,
      "beta_unfair": 1.2747754464749852,
      "thresh_unfair": 50.0,
      "scale": 7.557277710298011,
      "success": true,
      "log_likelihood": -3.5408349404185825e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": -4.75160454595406,
      "beta_self": 20.0,
      "beta_unfair": 20.0,
      "thresh_unfair": 39.929848128447894,
      "scale": 0.19680230678630634,
      "success": true,
      "log_likelihood": -9.595911821684238,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": -2.9129502322291914,
      "beta_self": 20.0,
      "beta_unfair": 20.0,
      "thresh_unfair": 48.470101605269,
      "scale": 7.782189836592411,
      "success": true,
      "log_likelihood": -7.488119597917545,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 7.296876336949952,
      "beta_self": 10.388768950574994,
      "beta_unfair": 11.422649834757207,
      "thresh_unfair": 13.887509304783752,
      "scale": 0.23381909419008015,
      "success": true,
      "log_likelihood": -11.631530780233867,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 5.57164519935828,
      "beta_self": 8.16673557293848,
      "beta_unfair": 7.809778769016349,
      "thresh_unfair": 14.69887967701433,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -14.91485263826422,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 9.463931509110594,
      "beta_self": 9.508796191619812,
      "beta_unfair": 10.051767412294936,
      "thresh_unfair": 23.51820012439165,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -6.982652493831088,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 9.652687757906188,
      "beta_unfair": 12.846065506471298,
      "thresh_unfair": 12.0018674227928,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -15.04199353390797,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 9.547681063676702,
      "beta_self": 8.778428030759699,
      "beta_unfair": 14.937013459024449,
      "thresh_unfair": 3.7170025111739418,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -6.756931186020531,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 0.0,
      "beta_unfair": 7.05534398658401,
      "thresh_unfair": 18.55719598922905,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -3.9710343253106535,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept": -5.4557435684136815,
      "beta_self": 20.0,
      "beta_unfair": 11.172576295883065,
      "thresh_unfair": 39.428718334975876,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -11.260779230010925,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 2.695689066732624,
      "beta_self": 19.238480261445478,
      "beta_unfair": 9.848942035628601,
      "thresh_unfair": -4.198122495201821,
      "scale": 20.0,
      "success": true,
      "log_likelihood": -12.259290273352388,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 10.910828891754818,
      "beta_unfair": 12.34596825773969,
      "thresh_unfair": 8.629440040469612,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -15.035430259807786,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 7.195300080684938,
      "beta_self": 20.0,
      "beta_unfair": 13.396193821265982,
      "thresh_unfair": 6.9224943391674385,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -10.165847211235038,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 1.1558189438677269,
      "beta_self": 10.473323287956438,
      "beta_unfair": 5.349574069384185,
      "thresh_unfair": 1.9224530860491709,
      "scale": 2.567485940956965,
      "success": true,
      "log_likelihood": -16.403235750603688,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 0.0,
      "beta_unfair": 13.94554020422452,
      "thresh_unfair": 6.5245195357755925,
      "scale": 9.568878860429043,
      "success": true,
      "log_likelihood": -10.411882009038901,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -1.8163211114543405,
      "beta_self": 7.430771669747735,
      "beta_unfair": 0.9277391601608704,
      "thresh_unfair": 33.90757968287002,
      "scale": 0.7110490443140658,
      "success": true,
      "log_likelihood": -21.895258620219447,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 9.839580661889913,
      "beta_self": 9.78394738895934,
      "beta_unfair": 12.085458508308497,
      "thresh_unfair": 8.50763302269984,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -15.841035734125159,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -8.814939890882334,
      "beta_self": 20.0,
      "beta_unfair": 19.999722114871368,
      "thresh_unfair": 26.628580811026595,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -6.503939372575803,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -5.101091000813231,
      "beta_self": 20.0,
      "beta_unfair": 0.8453147716734818,
      "thresh_unfair": -10.192050098435782,
      "scale": 16.919827700397583,
      "success": true,
      "log_likelihood": -14.436592473233604,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -2.652428831786547,
      "beta_self": 10.231219997054819,
      "beta_unfair": 0.0,
      "thresh_unfair": -9.136348972214982,
      "scale": 6.347018696331087,
      "success": true,
      "log_likelihood": -20.748916399941734,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 0.0,
      "beta_unfair": 14.162468023866545,
      "thresh_unfair": -4.223240891458594,
      "scale": 20.0,
      "success": true,
      "log_likelihood": -15.762046151543741,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 6.802546432985176,
      "beta_self": 14.131476262860515,
      "beta_unfair": 20.0,
      "thresh_unfair": 9.07078641821322,
      "scale": 11.259036447993852,
      "success": true,
      "log_likelihood": -5.247612791718083,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -6.4460651800916065,
      "beta_self": 20.0,
      "beta_unfair": 19.99899182131334,
      "thresh_unfair": 17.85025450281032,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -6.717536551185871,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 2.079447753919782,
      "beta_self": 0.0,
      "beta_unfair": 0.0,
      "thresh_unfair": 37.411763958114186,
      "scale": 12.146454105564953,
      "success": true,
      "log_likelihood": -12.557955443217729,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -8.939953088893605,
      "beta_self": 20.0,
      "beta_unfair": 16.881635383069145,
      "thresh_unfair": 19.241810756960284,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -3.8372206823105386,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 9.99981896914765,
      "beta_self": 14.935981962749436,
      "beta_unfair": 12.661184176998633,
      "thresh_unfair": 10.255147789548788,
      "scale": 0.21090319134709853,
      "success": true,
      "log_likelihood": -11.558414204603933,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -0.9390760841027672,
      "beta_self": 10.04805069464041,
      "beta_unfair": 2.0265105331247795,
      "thresh_unfair": 14.842654090318222,
      "scale": 0.14469480960705772,
      "success": true,
      "log_likelihood": -17.28582409694478,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 12.656454258759563,
      "beta_unfair": 14.872570398360326,
      "thresh_unfair": 7.187604068352704,
      "scale": 2.9784920827806034,
      "success": true,
      "log_likelihood": -11.810064199165355,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -0.12034966526237038,
      "beta_self": 20.0,
      "beta_unfair": 9.987695180861866,
      "thresh_unfair": -16.028972378549078,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -2.5957424083057976,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -4.242879589777151,
      "beta_self": 14.247154047307417,
      "beta_unfair": 19.133435354909928,
      "thresh_unfair": 34.64881023311311,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -14.840869421875226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 6.395749904607094,
      "beta_self": 20.0,
      "beta_unfair": 17.621269480018118,
      "thresh_unfair": -20.0,
      "scale": 19.998361826482537,
      "success": true,
      "log_likelihood": -6.304814612008891,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 9.76431436477097,
      "beta_self": 20.0,
      "beta_unfair": 15.97973503898178,
      "thresh_unfair": 11.305477237213172,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -8.596178177349419,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 9.984476891360734,
      "beta_self": 9.538251388631311,
      "beta_unfair": 10.81256951904208,
      "thresh_unfair": 28.53976912409225,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -5.980304468239427,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -0.14677036717615882,
      "beta_self": 9.056696753927264,
      "beta_unfair": 10.309275916441067,
      "thresh_unfair": 45.96917635478175,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -9.163685478665558,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -5.389976869483873,
      "beta_self": 20.0,
      "beta_unfair": 15.104015928767437,
      "thresh_unfair": 37.17020507524084,
      "scale": 0.15908341091282308,
      "success": true,
      "log_likelihood": -12.178913257812548,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 0.007998930492555158,
      "beta_unfair": 8.326410007739273,
      "thresh_unfair": 14.992531901498408,
      "scale": 1.3791220032089755,
      "success": true,
      "log_likelihood": -8.583295258845927,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 1.0613924775100112,
      "beta_self": 20.0,
      "beta_unfair": 20.0,
      "thresh_unfair": 2.0090269542525454,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -0.0005267795963817095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 0.16807253820488055,
      "beta_self": 20.0,
      "beta_unfair": 9.25622001411067,
      "thresh_unfair": -7.992258669294954,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -5.701250795627326,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -4.07584350257412,
      "beta_self": 15.83285737656732,
      "beta_unfair": 20.0,
      "thresh_unfair": 34.125213035716904,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -13.074106040163349,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -0.7122372137584052,
      "beta_self": 9.95875319611502,
      "beta_unfair": 1.4890857759515013,
      "thresh_unfair": 27.71314802117426,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -13.420722020925176,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -0.06545351447117856,
      "beta_self": 4.244464530031467,
      "beta_unfair": 1.6608784836559858,
      "thresh_unfair": 11.002856488002974,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -21.006053706055642,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 20.0,
      "beta_unfair": 14.96692349386267,
      "thresh_unfair": -16.087207653087155,
      "scale": 9.307245906024194,
      "success": true,
      "log_likelihood": -11.35945131956263,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 0.0,
      "beta_unfair": 8.90138673840714,
      "thresh_unfair": 31.793303845998945,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -4.4999523217489426,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -3.531296264471303,
      "beta_self": 2.8706899021389045,
      "beta_unfair": 18.082108661279477,
      "thresh_unfair": 34.58902510580959,
      "scale": 0.1484089264357856,
      "success": true,
      "log_likelihood": -7.133696063847479,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 9.798004600390925,
      "beta_self": 1.5048980719712493,
      "beta_unfair": 10.211847583414148,
      "thresh_unfair": 6.993660098159705,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -19.333437638294374,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 2.9155246015346963,
      "beta_self": 20.0,
      "beta_unfair": 13.02365612900086,
      "thresh_unfair": -9.379879893838815,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -2.5956927991225083,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 3.559716929546246,
      "beta_self": 6.07532833080986,
      "beta_unfair": 5.4394868643819585,
      "thresh_unfair": -1.6081963277153704,
      "scale": 1.9168541916810296,
      "success": true,
      "log_likelihood": -20.97811854318723,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 1.4282948838048188,
      "beta_self": 3.4047183114218464,
      "beta_unfair": 0.0,
      "thresh_unfair": 18.065371690767094,
      "scale": 19.52561434178029,
      "success": true,
      "log_likelihood": -10.157069807487604,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -7.661062721380079,
      "beta_self": 16.869747843596368,
      "beta_unfair": 17.34978053153957,
      "thresh_unfair": 19.154257883722877,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -6.7877611049687845,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -5.235654079298126,
      "beta_self": 20.0,
      "beta_unfair": 19.201067293575477,
      "thresh_unfair": 35.16034829179915,
      "scale": 3.0484434037226014,
      "success": true,
      "log_likelihood": -7.35036807202012,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 2.302597781905209,
      "beta_self": 0.0,
      "beta_unfair": 2.3826404823960505,
      "thresh_unfair": 11.056944385501627,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -20.65968236971451,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 9.535117916952965,
      "beta_self": 20.0,
      "beta_unfair": 19.98113914449233,
      "thresh_unfair": -0.7526271704608458,
      "scale": 0.2950703076385111,
      "success": true,
      "log_likelihood": -2.193870728555432,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 7.282311956237722,
      "beta_unfair": 11.664633776991165,
      "thresh_unfair": 11.150261898626741,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -15.850963227742454,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 1.2527013880481508,
      "beta_self": 0.0,
      "beta_unfair": 4.510541637058115,
      "thresh_unfair": 9.22316194275851,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -9.044719577035618,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 0.0,
      "beta_unfair": 16.948131078202355,
      "thresh_unfair": 40.456102928572314,
      "scale": 20.0,
      "success": true,
      "log_likelihood": -4.4221284278537,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": -5.716938747456999,
      "beta_self": 20.0,
      "beta_unfair": 16.152762433384538,
      "thresh_unfair": 28.469912810596234,
      "scale": 0.13720219477004986,
      "success": true,
      "log_likelihood": -7.824972227799729,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept": 10.0,
      "beta_self": 7.704441356047133,
      "beta_unfair": 11.447963304868525,
      "thresh_unfair": 1.3739425496047786,
      "scale": 0.1,
      "success": true,
      "log_likelihood": -18.959150064036432,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "intercept": {
        "r": 0.8119424069712866,
        "p": 1.2100538342372627e-24
      },
      "beta_self": {
        "r": 0.4981540642850663,
        "p": 1.3358933223806182e-07
      },
      "beta_unfair": {
        "r": 0.5232920177882321,
        "p": 2.324705793256538e-08
      },
      "thresh_unfair": {
        "r": 0.20666556950460754,
        "p": 0.039112596600006475
      },
      "scale": {
        "r": 0.08492738503362399,
        "p": 0.40084356766164064
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 35.84223058714065,
  "bic_Control": 31.184318182645747,
  "bic_Cocaine": 40.014943782833996,
  "bic_results": {
    "average_bic": 35.84223058714065,
    "individual_bics": [
      23.17577792754596,
      38.67666725859708,
      33.37131426296674,
      44.419996148095464,
      27.982219788273497,
      39.78627671718965,
      17.91764724175039,
      36.742138632978666,
      17.91764724175039,
      38.07055758604497,
      22.911884661596023,
      27.592038894256046,
      29.86116691350422,
      17.91764724175039,
      17.91764724175039,
      17.91765957416112,
      17.91765967354544,
      26.18258550418865,
      24.79843227444183,
      17.91764724175039,
      41.96232647855417,
      31.385636307861024,
      37.703374535274705,
      43.27883944992213,
      37.4864147219673,
      39.68527931374446,
      31.109954253130702,
      23.434909660181543,
      32.7694227894697,
      43.555361472324094,
      17.917658786001383,
      23.10897608540975,
      45.28967176651072,
      39.218768405714165,
      17.917665508979358,
      37.109418335649025,
      32.89383388811564,
      41.18065625274828,
      47.74729996880899,
      31.882899679942724,
      48.001581760096485,
      31.431457064321613,
      25.859663342901854,
      40.439153152302396,
      42.43617523898533,
      47.988455211896124,
      38.249289114750624,
      50.72406619348793,
      38.741358710358355,
      61.70811193271945,
      49.599666160530866,
      30.925473437432153,
      46.79077963874776,
      59.415427492164014,
      49.44168699536803,
      28.412820275716715,
      31.35266779465229,
      43.033505578716,
      25.592036056901627,
      41.034423101488414,
      52.4892428861701,
      41.53772309061126,
      23.109079508892144,
      47.599333536031,
      30.527223916298333,
      35.10995104697939,
      29.8782036287594,
      36.244965649611665,
      42.275421207905644,
      35.084185209972404,
      17.91864825147331,
      29.3200962835352,
      44.065806772607246,
      44.7590387341309,
      59.929702104391836,
      40.636497331405806,
      26.917499335778434,
      32.18498681997551,
      56.5844699688693,
      23.108980290525565,
      59.873831778655,
      38.231734307255756,
      31.49311690221812,
      32.61833083632079,
      59.236959431709565,
      22.30533614939141,
      49.619521147765454,
      36.00703384635179,
      26.76185154798795,
      33.567539147880005,
      55.83589482035342
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        23.17577792754596,
        38.67666725859708,
        33.37131426296674,
        44.419996148095464,
        27.982219788273497,
        39.78627671718965,
        17.91764724175039,
        36.742138632978666,
        17.91764724175039,
        38.07055758604497,
        22.911884661596023,
        27.592038894256046,
        29.86116691350422,
        17.91764724175039,
        17.91764724175039,
        17.91765957416112,
        17.91765967354544,
        26.18258550418865,
        24.79843227444183,
        17.91764724175039,
        41.96232647855417,
        31.385636307861024,
        37.703374535274705,
        43.27883944992213,
        37.4864147219673,
        39.68527931374446,
        31.109954253130702,
        23.434909660181543,
        32.7694227894697,
        43.555361472324094,
        17.917658786001383,
        23.10897608540975,
        45.28967176651072,
        39.218768405714165,
        17.917665508979358,
        37.109418335649025,
        32.89383388811564,
        41.18065625274828,
        47.74729996880899,
        31.882899679942724,
        48.001581760096485,
        31.431457064321613,
        25.859663342901854
      ],
      "Cocaine": [
        40.439153152302396,
        42.43617523898533,
        47.988455211896124,
        38.249289114750624,
        50.72406619348793,
        38.741358710358355,
        61.70811193271945,
        49.599666160530866,
        30.925473437432153,
        46.79077963874776,
        59.415427492164014,
        49.44168699536803,
        28.412820275716715,
        31.35266779465229,
        43.033505578716,
        25.592036056901627,
        41.034423101488414,
        52.4892428861701,
        41.53772309061126,
        23.109079508892144,
        47.599333536031,
        30.527223916298333,
        35.10995104697939,
        29.8782036287594,
        36.244965649611665,
        42.275421207905644,
        35.084185209972404,
        17.91864825147331,
        29.3200962835352,
        44.065806772607246,
        44.7590387341309,
        59.929702104391836,
        40.636497331405806,
        26.917499335778434,
        32.18498681997551,
        56.5844699688693,
        23.108980290525565,
        59.873831778655,
        38.231734307255756,
        31.49311690221812,
        32.61833083632079,
        59.236959431709565,
        22.30533614939141,
        49.619521147765454,
        36.00703384635179,
        26.76185154798795,
        33.567539147880005,
        55.83589482035342
      ]
    },
    "num_parameters": 5,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- intercept: r = 0.812\n- beta_self: r = 0.498\n- beta_unfair: r = 0.523\n- thresh_unfair: r = 0.207\n- scale: r = 0.085",
  "previous_models": [
    "Specification: Section\n\n<MODEL>\ndeserved_share_perc = 100 * token_self / (token_self + token_opp)\nunfairness = deserved_share_perc - splitperc_self\n\nU = intercept \n    + beta_self * (splitperc_self / 100)\n    - beta_unfair * sigmoid( (unfairness - thresh_unfair) / scale )\n\nwhere \nsigmoid(x) = 1 / (1 + exp(-x))\nSummary: This model predicts responder acceptance as a function of (a) self-interested reward, and (b) nonlinear aversion to being under-offered compared to one\u2019s contribution. The model first computes the responder\u2019s deserved share from relative token contributions and penalizes utility by a thresholded sigmoid function of unfairness (the percent difference between deserved and offered share). Five learnable parameters dissociate baseline tendency, self-interest weighting, unfairness sensitivity, the unfairness threshold for sharp rejection, and the width of that transition, allowing nuanced prediction and interpretation of responder choice in joint-contribution bargaining.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 35.84223058714065\nOverall Accuracy: 0.8263\nGroup Accuracies:\n- Control: 0.8624\n- Cocaine: 0.7940\n\nParameter Recovery:\n- intercept: r = 0.812\n- beta_self: r = 0.498\n- beta_unfair: r = 0.523\n- thresh_unfair: r = 0.207\n- scale: r = 0.085"
  ]
}