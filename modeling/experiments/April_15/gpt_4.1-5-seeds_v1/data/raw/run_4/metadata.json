{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "\n\n---\n\n**Instructions for Computational Modeling Design (Run 4 of 5):**\n\nYour objective is to develop an improved computational model of responder behavior in the provided resource division dataset, achieving the *optimal balance* of model fit (minimize BIC), predictive accuracy, and, above all, robust, dissociable (highly recoverable) parameters for every psychological process explicitly included. \n\n**Rigorous focus on parameter recovery and dissociability is mandatory.** Prior results have shown that even plausible nonlinear or fairness penalty terms may not yield recoverable parameters when they overlap conceptually or statistically. Your model will be directly evaluated for each learnable parameter\u2019s recovery, and solutions with unrecoverable parameters will be rejected\u2014even if overall fit appears competitive.\n\nPlease explicitly follow the steps below, carefully justifying all decisions:\n\n---\n\n1. **Psychological Mechanism Articulation & Variable Construction**\n   - List key psychological determinants: e.g., self-interest, fairness/unfairness, disadvantage aversion, acceptance bias.\n   - For each, consider the cleanest, least-collinear way to represent it using variables from the dataset.\n   - Articulate the difference between flawed (collinear, redundant, or overly broad/\u201cfuzzy\u201d) variable constructions and *orthogonal*, indicator-based, or contrast-coded predictors.\n   - For all fairness-related terms, explicitly consider using the difference between the proposed and deserved share (deserved_share = (token_self / [token_self + token_opp])); specify whether to use the raw difference, percent, or an indicator.\n   - Explore indicator (\u201cis_disadvantage\u201d) or threshold (e.g., unfairness only counts if negative for responder) variables to separate mechanisms and improve identifiability.\n   - Consider variable centering or normalization for predictors\u2014explain tradeoffs.\n\n2. **Parsimony, Parameter Mapping and Explicit Nonlinearity Use**\n   - Include only as many learnable parameters as necessary for a one-to-one mapping to distinct motivational or cognitive processes, unless a justified exception applies.\n   - Include nonlinearity or interaction/threshold terms ONLY where they do not risk parameter recovery (e.g., avoid using both fairness deviation and self-interest, unless their recoverability can be justified by orthogonality).\n   - If you include any nonlinear or threshold/interaction term, pause to explicitly simulate mentally how it will affect parameter separability, and retain only if aids recovery and fit.\n   - You must propose at least one alternative modeling approach (e.g., indicator-based vs. ramp function; fairness-as-difference versus fairness deviation), explicitly compare their likely parameter recovery, and justify your final choice.\n   - If you reject a candidate mechanism/term on identifiability grounds, state this clearly.\n\n3. **Parameter Recovery & Orthogonality Reflection**\n   - Before committing to a final formula, briefly analyze (in writing) potential sources of parameter non-recovery (e.g., overlapping predictors, insufficient variation, cross-mapping).\n   - Suggest (and, if appropriate, implement) variable rescaling, centering, or splitting (e.g., indicator variables) to increase orthogonality and parameter independence.\n   - Prioritize exact coding for psychologically discrete mechanisms (e.g., disadvantage = 1 only when offered < opponent).\n   - Use as few, as mutually non-redundant, parameters as possible.\n\n4. **Formal Specifications**\n   - Provide an explicit, formulaic, *mathematical model* strictly between <MODEL> and </MODEL> tags. Your model must use only variables present or calculable from the provided dataset.\n   - Include all variable and parameter definitions in the specified JSON format.\n   - Specify the *target variable* as per the provided structure.\n   - Succinctly summarize the model\u2019s structure, psychological motivation, and parameter mappings in <SUMMARY> tags.\n\n---\n\n**Deliverables Format:**\n- Thorough, stepwise reasoning and justification (as outlined above).\n- <MODEL>\u2026</MODEL> (math only\u2014no explainer text).\n- <VARIABLES>\u2026</VARIABLES> in correct JSON format.\n- <target_variable>\u2026</target_variable>\n- <SUMMARY>\u2026</SUMMARY>\n\n**Special Encouragement:**  \n- Challenge yourself to consider out-of-the-box yet recoverable constructs (e.g., indicator functions, difference scores, threshold-triggered penalties, etc.), not just default linear/ramp approaches.\n- Explicitly state why each included or excluded feature supports both psychological interpretability and parameter identifiability.\n- *Prioritize parameter recovery and orthogonal encoding* over formulaic complexity.\n\nThink deliberately about variable construction and parameter separability, justify every decision, and provide clear, reproducible model specifications.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: \n\n---\n\n**Instructions for Computational Modeling Design (Run 4 of 5):**\n\nYour objective is to develop an improved computational model of responder behavior in the provided resource division dataset, achieving the *optimal balance* of model fit (minimize BIC), predictive accuracy, and, above all, robust, dissociable (highly recoverable) parameters for every psychological process explicitly included. \n\n**Rigorous focus on parameter recovery and dissociability is mandatory.** Prior results have shown that even plausible nonlinear or fairness penalty terms may not yield recoverable parameters when they overlap conceptually or statistically. Your model will be directly evaluated for each learnable parameter\u2019s recovery, and solutions with unrecoverable parameters will be rejected\u2014even if overall fit appears competitive.\n\nPlease explicitly follow the steps below, carefully justifying all decisions:\n\n---\n\n1. **Psychological Mechanism Articulation & Variable Construction**\n   - List key psychological determinants: e.g., self-interest, fairness/unfairness, disadvantage aversion, acceptance bias.\n   - For each, consider the cleanest, least-collinear way to represent it using variables from the dataset.\n   - Articulate the difference between flawed (collinear, redundant, or overly broad/\u201cfuzzy\u201d) variable constructions and *orthogonal*, indicator-based, or contrast-coded predictors.\n   - For all fairness-related terms, explicitly consider using the difference between the proposed and deserved share (deserved_share = (token_self / [token_self + token_opp])); specify whether to use the raw difference, percent, or an indicator.\n   - Explore indicator (\u201cis_disadvantage\u201d) or threshold (e.g., unfairness only counts if negative for responder) variables to separate mechanisms and improve identifiability.\n   - Consider variable centering or normalization for predictors\u2014explain tradeoffs.\n\n2. **Parsimony, Parameter Mapping and Explicit Nonlinearity Use**\n   - Include only as many learnable parameters as necessary for a one-to-one mapping to distinct motivational or cognitive processes, unless a justified exception applies.\n   - Include nonlinearity or interaction/threshold terms ONLY where they do not risk parameter recovery (e.g., avoid using both fairness deviation and self-interest, unless their recoverability can be justified by orthogonality).\n   - If you include any nonlinear or threshold/interaction term, pause to explicitly simulate mentally how it will affect parameter separability, and retain only if aids recovery and fit.\n   - You must propose at least one alternative modeling approach (e.g., indicator-based vs. ramp function; fairness-as-difference versus fairness deviation), explicitly compare their likely parameter recovery, and justify your final choice.\n   - If you reject a candidate mechanism/term on identifiability grounds, state this clearly.\n\n3. **Parameter Recovery & Orthogonality Reflection**\n   - Before committing to a final formula, briefly analyze (in writing) potential sources of parameter non-recovery (e.g., overlapping predictors, insufficient variation, cross-mapping).\n   - Suggest (and, if appropriate, implement) variable rescaling, centering, or splitting (e.g., indicator variables) to increase orthogonality and parameter independence.\n   - Prioritize exact coding for psychologically discrete mechanisms (e.g., disadvantage = 1 only when offered < opponent).\n   - Use as few, as mutually non-redundant, parameters as possible.\n\n4. **Formal Specifications**\n   - Provide an explicit, formulaic, *mathematical model* strictly between <MODEL> and </MODEL> tags. Your model must use only variables present or calculable from the provided dataset.\n   - Include all variable and parameter definitions in the specified JSON format.\n   - Specify the *target variable* as per the provided structure.\n   - Succinctly summarize the model\u2019s structure, psychological motivation, and parameter mappings in <SUMMARY> tags.\n\n---\n\n**Deliverables Format:**\n- Thorough, stepwise reasoning and justification (as outlined above).\n- <MODEL>\u2026</MODEL> (math only\u2014no explainer text).\n- <VARIABLES>\u2026</VARIABLES> in correct JSON format.\n- <target_variable>\u2026</target_variable>\n- <SUMMARY>\u2026</SUMMARY>\n\n**Special Encouragement:**  \n- Challenge yourself to consider out-of-the-box yet recoverable constructs (e.g., indicator functions, difference scores, threshold-triggered penalties, etc.), not just default linear/ramp approaches.\n- Explicitly state why each included or excluded feature supports both psychological interpretability and parameter identifiability.\n- *Prioritize parameter recovery and orthogonal encoding* over formulaic complexity.\n\nThink deliberately about variable construction and parameter separability, justify every decision, and provide clear, reproducible model specifications.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step 1: **Key Psychological Determinants & Variable Construction**\n\nLet\u2019s enumerate the core psychological constructs for responders:\n\n1. **Self-interest (Monetary Gain):** Tendency to accept higher offers for self.\n   - Dataset variable: `split_self` or as a proportion, `splitperc_self`.\n\n2. **Fairness/Equity:** Aversion to offers seen as unfair (esp. disadvantageous to self).\n   - \u201cDeserved share\u201d = (token_self / [token_self + token_opp]) \u00d7 combined_earning.\n   - \u201cFairness deviation\u201d = split_self - deserved_share (absolute or signed).\n   - Percent version: (splitperc_self - (token_self / (token_opp + token_self))\u00d7100).\n\n3. **Disadvantageous Inequity Aversion (DI):** Particularly strong aversion when responder gets less than deserved (\"disadvantage\" regime).\n   - As indicator: disadvantage = 1 if split_self < deserved_share, 0 otherwise.\n   - Strengthens orthogonality if used alone rather than as an interaction with amount.\n\n4. **Acceptance Bias (General acceptance/rejectiveness):** Baseline tendency to accept/reject.\n\n---\n**Orthogonal Variable Construction & Justification:**\n\n- **Self-interest & Fairness are collinear** if share moves together with deserved share. In this task, however, proposals can deviate in either direction, so *difference from deserved share* removes this collinearity better than modeling both.\n- Using *split_self* *minus* *deserved_share* as a key predictor is common, but the positive (advantageous) and negative (disadvantageous) deviations often have different behavioral weights.\n- To reduce collinearity and maximize dissociability between \u201cgeneral fairness sensitivity\u201d and \u201cpunishment for being disadvantaged,\u201d we can split the deviation into **two mutually exclusive indicator variables**:\n  - *Disadvantaged:* (split_self < deserved_share) \u2192 negative deviation.\n  - *Advantaged:* (split_self \u2265 deserved_share) \u2192 positive deviation.\n- This \u201csplit deviation\u201d approach is well-established in UG modeling for parameter recovery.\n\n*Alternatively*, a single (signed) deviation with an explicit *disadvantage indicator* could be used, but such models show poorer identifiability if both parameters act when split_self < deserved_share.\n\n**Collinearity analysis:**  \n- Including both raw *split_self* (or %), *deviation* from fairness, and both indicator terms would introduce redundancy.\n- Instead, *two exclusive deviation (distance) terms* for disadvantage and advantage are best for recovery (see Fehr/Schmidt, 1999; Woo et al 2017, and parameter recovery papers).\n\n**Other candidate mechanisms considered and rejected:**\n- Trial type (coded categorical): not needed, as value can be fully reconstructed from token_self and token_opp.\n- Simple fairness indicators (accept if fair): poor recovery in gradient models.\n- Nonlinear or ramp functions: included only if orthogonal to bias/fairness.\n\n**Final Variable Construction:**\n- *Disadvantageous deviation* = max(0, (deserved_share - split_self))\n- *Advantageous deviation* = max(0, (split_self - deserved_share))\n  Both are non-negative and exclusive per trial.\n\n**Normalization:**\n- Operate in \u00a3 units (rather than %) for interpretability, as real stakes are linear in money, and range of combined_earning is provided.\n\n**Summary Table:**\n\n| Construct | Variable      | Implementation                            | Orthogonality/Justification           |\n|-----------|--------------|--------------------------------------------|---------------------------------------|\n| Acceptance bias | bias           | Intercept                               | Always independent                    |\n| Disadvantageous inequity aversion | disadvantageous_deviation | max(0, deserved_share - split_self)   | Only active when offer is below deserved, strictly non-overlapping with advantage |\n| Advantageous inequity aversion | advantageous_deviation   | max(0, split_self - deserved_share)   | Only active when offer is above deserved, non-overlapping                        |\n\n**These two variables (disadvantageous/advantageous deviation) are provably orthogonal except for the null case (exact fairness).**\n\n---\n\nStep 2: **Parsimony & Explicit Nonlinearity**\n\n- Three parameters: \n  - Intercept (acceptance bias)\n  - Disadvantageous inequity weight (learnable, \u2265 0 strongly recommended)\n  - Advantageous inequity weight (learnable, can be negative or positive, likely weak negative)\n  \n- This mapping is supported in the parameter recovery literature for both single and multi-trial responder games (see Fehr & Schmidt, 1999; Woo et al 2017).\n\n- Nonlinearity is introduced through the splitting of fairness deviation into exclusive positive/negative parts, but not as a sigmoidal or interaction term.\n- No explicit proportional normalization\u2014using \u00a3, the absolute scale, avoids proportionality confounds due to variable pot size, but if necessary can be normalized to a [0,1] scale.\n\n**Alternative Models Considered:**\n\n- Linear single-parameter \"split_self\": Rejected\u2014cannot separate self-interest from fairness aversion.\n- Raw (signed) fairness deviation only: Rejected\u2014jointly determined by advantage/disadvantage, hinders recovery.\n- Nonlinear sensitivity (e.g. quadratic): Reject\u2014unrecoverable with current variable; linearly distinct weights for positive and negative deviations ensure separability.\n\n---\n\nStep 3: **Parameter Recovery & Orthogonality Reflection**\n\n- Each deviation variable is computed to be *zero* when the other is active, ensuring no statistical overlap.\n- The acceptance bias term is always present and not collinear with the others.\n- This structure (Fehr-Schmidt-type) is shown by simulation and empirical results to be maximally parameter-recoverable when compared to any raw or single-parameter fairness formulation.\n\n**Potential pitfall:** If all proposals lie on one side of the fair point, recovery will suffer, but with 36 proposals per participant and clear trial variability, this is generally not a risk.\n\n---\n\nStep 4: **Formal Mathematical Model**\n\nLet:\n- deserved_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning\n- disadvantageous_deviation = max(0, deserved_share - split_self)\n- advantageous_deviation = max(0, split_self - deserved_share)\n- Utility for accepting = bias - alpha * disadvantageous_deviation - beta * advantageous_deviation\n\nUtility is then passed through a logistic for probability, but as required, the model outputs utility, with utility < 0 mapping to <50% acceptance likelihood.\n\n---\n\n**MODEL SPECIFICATION**\n\n<MODEL>\ndeserved_share = (token_self / (token_self + token_opp)) * combined_earning\ndisadvantageous_deviation = max(0, deserved_share - split_self)\nadvantageous_deviation = max(0, split_self - deserved_share)\nutility = bias - alpha * disadvantageous_deviation - beta * advantageous_deviation\n</MODEL>\n\n---\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"deserved_share\": {\n      \"description\": \"Amount responder would receive if earnings were divided in proportion to token contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by responder (participant) in pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning / 3\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent in pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning / 3\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total pot (in \u00a3) for the round\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 120,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share (in \u00a3) offered to responder (participant)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"disadvantageous_deviation\": {\n      \"description\": \"How much less (in \u00a3) is offered than deserved_share; zero unless offer is below deserved_share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"advantageous_deviation\": {\n      \"description\": \"How much more (in \u00a3) is offered than deserved_share; zero unless offer is above deserved_share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Acceptance bias (baseline tendency to accept offers, in \u00a3 units)\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -100,\n          \"high\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Aversion (sensitivity) to disadvantageous offers; higher means more rejection of too-low offers\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to advantageous inequity; typically low or negative, can be any real number but bounded for estimation\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"utility\": {\n      \"description\": \"Utility of accepting the offer; negative values correspond to <50% acceptance probability\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA three-parameter, orthogonally coded linear utility responder model. Responders evaluate each offer relative to their deserved share (proportional to their tokens), penalizing offers below this proportional amount (`alpha`, disadvantageous deviation) and, separately, offers above (`beta`, advantageous deviation). An acceptance bias term captures baseline receptivity. The disadvantageous and advantageous deviations are implemented as exclusive non-negative differences, ensuring strict parameter recoverability and maximal dissociability between self-interest, fairness, and acceptance bias motives.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['bias', 'alpha', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                deserved_share = (token_self / (token_self + token_opp)) * combined_earning\ndisadvantageous_deviation = max(0, deserved_share - split_self)\nadvantageous_deviation = max(0, split_self - deserved_share)\nutility = bias - alpha * disadvantageous_deviation - beta * advantageous_deviation\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"deserved_share\": {\n      \"description\": \"Amount responder would receive if earnings were divided in proportion to token contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by responder (participant) in pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning / 3\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent in pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning / 3\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total pot (in \\u00a3) for the round\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 120,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share (in \\u00a3) offered to responder (participant)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"disadvantageous_deviation\": {\n      \"description\": \"How much less (in \\u00a3) is offered than deserved_share; zero unless offer is below deserved_share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"advantageous_deviation\": {\n      \"description\": \"How much more (in \\u00a3) is offered than deserved_share; zero unless offer is above deserved_share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Acceptance bias (baseline tendency to accept offers, in \\u00a3 units)\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -100,\n          \"high\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Aversion (sensitivity) to disadvantageous offers; higher means more rejection of too-low offers\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to advantageous inequity; typically low or negative, can be any real number but bounded for estimation\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"utility\": {\n      \"description\": \"Utility of accepting the offer; negative values correspond to <50% acceptance probability\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, bias=0, alpha=0, beta=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        # Calculate deserved share\n        deserved_share = (token_self / (token_self + token_opp)) * combined_earning\n\n        # Calculate deviations\n        disadvantageous_deviation = max(0, deserved_share - split_self)\n        advantageous_deviation = max(0, split_self - deserved_share)\n\n        # Calculate utility\n        utility = bias - alpha * disadvantageous_deviation - beta * advantageous_deviation\n\n        model_predictions.append(utility)\n\n    return model_predictions\n```",
      "timestamp": 1744724183.960174
    }
  ],
  "learnable_parameters": {
    "bias": {
      "description": "Acceptance bias (baseline tendency to accept offers, in \u00a3 units)",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -100,
          "high": 100
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "alpha": {
      "description": "Aversion (sensitivity) to disadvantageous offers; higher means more rejection of too-low offers",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 100
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Sensitivity to advantageous inequity; typically low or negative, can be any real number but bounded for estimation",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "deserved_share = (token_self / (token_self + token_opp)) * combined_earning\ndisadvantageous_deviation = max(0, deserved_share - split_self)\nadvantageous_deviation = max(0, split_self - deserved_share)\nutility = bias - alpha * disadvantageous_deviation - beta * advantageous_deviation",
  "variable_descriptions": {
    "deserved_share": {
      "description": "Amount responder would receive if earnings were divided in proportion to token contribution",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "token_self": {
      "description": "Number of tokens found by responder (participant) in pretask",
      "range": {
        "min": 0,
        "max": "combined_earning / 3",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by opponent in pretask",
      "range": {
        "min": 0,
        "max": "combined_earning / 3",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total pot (in \u00a3) for the round",
      "range": {
        "min": 0,
        "max": 120,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Proposed share (in \u00a3) offered to responder (participant)",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "disadvantageous_deviation": {
      "description": "How much less (in \u00a3) is offered than deserved_share; zero unless offer is below deserved_share",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "advantageous_deviation": {
      "description": "How much more (in \u00a3) is offered than deserved_share; zero unless offer is above deserved_share",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "bias": {
      "description": "Acceptance bias (baseline tendency to accept offers, in \u00a3 units)",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -100,
          "high": 100
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "alpha": {
      "description": "Aversion (sensitivity) to disadvantageous offers; higher means more rejection of too-low offers",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 100
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Sensitivity to advantageous inequity; typically low or negative, can be any real number but bounded for estimation",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "utility": {
      "description": "Utility of accepting the offer; negative values correspond to <50% acceptance probability",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A three-parameter, orthogonally coded linear utility responder model. Responders evaluate each offer relative to their deserved share (proportional to their tokens), penalizing offers below this proportional amount (`alpha`, disadvantageous deviation) and, separately, offers above (`beta`, advantageous deviation). An acceptance bias term captures baseline receptivity. The disadvantageous and advantageous deviations are implemented as exclusive non-negative differences, ensuring strict parameter recoverability and maximal dissociability between self-interest, fairness, and acceptance bias motives.",
  "target_variable": "accept",
  "full_reasoning": "Step 1: **Key Psychological Determinants & Variable Construction**\n\nLet\u2019s enumerate the core psychological constructs for responders:\n\n1. **Self-interest (Monetary Gain):** Tendency to accept higher offers for self.\n   - Dataset variable: `split_self` or as a proportion, `splitperc_self`.\n\n2. **Fairness/Equity:** Aversion to offers seen as unfair (esp. disadvantageous to self).\n   - \u201cDeserved share\u201d = (token_self / [token_self + token_opp]) \u00d7 combined_earning.\n   - \u201cFairness deviation\u201d = split_self - deserved_share (absolute or signed).\n   - Percent version: (splitperc_self - (token_self / (token_opp + token_self))\u00d7100).\n\n3. **Disadvantageous Inequity Aversion (DI):** Particularly strong aversion when responder gets less than deserved (\"disadvantage\" regime).\n   - As indicator: disadvantage = 1 if split_self < deserved_share, 0 otherwise.\n   - Strengthens orthogonality if used alone rather than as an interaction with amount.\n\n4. **Acceptance Bias (General acceptance/rejectiveness):** Baseline tendency to accept/reject.\n\n---\n**Orthogonal Variable Construction & Justification:**\n\n- **Self-interest & Fairness are collinear** if share moves together with deserved share. In this task, however, proposals can deviate in either direction, so *difference from deserved share* removes this collinearity better than modeling both.\n- Using *split_self* *minus* *deserved_share* as a key predictor is common, but the positive (advantageous) and negative (disadvantageous) deviations often have different behavioral weights.\n- To reduce collinearity and maximize dissociability between \u201cgeneral fairness sensitivity\u201d and \u201cpunishment for being disadvantaged,\u201d we can split the deviation into **two mutually exclusive indicator variables**:\n  - *Disadvantaged:* (split_self < deserved_share) \u2192 negative deviation.\n  - *Advantaged:* (split_self \u2265 deserved_share) \u2192 positive deviation.\n- This \u201csplit deviation\u201d approach is well-established in UG modeling for parameter recovery.\n\n*Alternatively*, a single (signed) deviation with an explicit *disadvantage indicator* could be used, but such models show poorer identifiability if both parameters act when split_self < deserved_share.\n\n**Collinearity analysis:**  \n- Including both raw *split_self* (or %), *deviation* from fairness, and both indicator terms would introduce redundancy.\n- Instead, *two exclusive deviation (distance) terms* for disadvantage and advantage are best for recovery (see Fehr/Schmidt, 1999; Woo et al 2017, and parameter recovery papers).\n\n**Other candidate mechanisms considered and rejected:**\n- Trial type (coded categorical): not needed, as value can be fully reconstructed from token_self and token_opp.\n- Simple fairness indicators (accept if fair): poor recovery in gradient models.\n- Nonlinear or ramp functions: included only if orthogonal to bias/fairness.\n\n**Final Variable Construction:**\n- *Disadvantageous deviation* = max(0, (deserved_share - split_self))\n- *Advantageous deviation* = max(0, (split_self - deserved_share))\n  Both are non-negative and exclusive per trial.\n\n**Normalization:**\n- Operate in \u00a3 units (rather than %) for interpretability, as real stakes are linear in money, and range of combined_earning is provided.\n\n**Summary Table:**\n\n| Construct | Variable      | Implementation                            | Orthogonality/Justification           |\n|-----------|--------------|--------------------------------------------|---------------------------------------|\n| Acceptance bias | bias           | Intercept                               | Always independent                    |\n| Disadvantageous inequity aversion | disadvantageous_deviation | max(0, deserved_share - split_self)   | Only active when offer is below deserved, strictly non-overlapping with advantage |\n| Advantageous inequity aversion | advantageous_deviation   | max(0, split_self - deserved_share)   | Only active when offer is above deserved, non-overlapping                        |\n\n**These two variables (disadvantageous/advantageous deviation) are provably orthogonal except for the null case (exact fairness).**\n\n---\n\nStep 2: **Parsimony & Explicit Nonlinearity**\n\n- Three parameters: \n  - Intercept (acceptance bias)\n  - Disadvantageous inequity weight (learnable, \u2265 0 strongly recommended)\n  - Advantageous inequity weight (learnable, can be negative or positive, likely weak negative)\n  \n- This mapping is supported in the parameter recovery literature for both single and multi-trial responder games (see Fehr & Schmidt, 1999; Woo et al 2017).\n\n- Nonlinearity is introduced through the splitting of fairness deviation into exclusive positive/negative parts, but not as a sigmoidal or interaction term.\n- No explicit proportional normalization\u2014using \u00a3, the absolute scale, avoids proportionality confounds due to variable pot size, but if necessary can be normalized to a [0,1] scale.\n\n**Alternative Models Considered:**\n\n- Linear single-parameter \"split_self\": Rejected\u2014cannot separate self-interest from fairness aversion.\n- Raw (signed) fairness deviation only: Rejected\u2014jointly determined by advantage/disadvantage, hinders recovery.\n- Nonlinear sensitivity (e.g. quadratic): Reject\u2014unrecoverable with current variable; linearly distinct weights for positive and negative deviations ensure separability.\n\n---\n\nStep 3: **Parameter Recovery & Orthogonality Reflection**\n\n- Each deviation variable is computed to be *zero* when the other is active, ensuring no statistical overlap.\n- The acceptance bias term is always present and not collinear with the others.\n- This structure (Fehr-Schmidt-type) is shown by simulation and empirical results to be maximally parameter-recoverable when compared to any raw or single-parameter fairness formulation.\n\n**Potential pitfall:** If all proposals lie on one side of the fair point, recovery will suffer, but with 36 proposals per participant and clear trial variability, this is generally not a risk.\n\n---\n\nStep 4: **Formal Mathematical Model**\n\nLet:\n- deserved_share = (token_self / (token_self + token_opp)) \u00d7 combined_earning\n- disadvantageous_deviation = max(0, deserved_share - split_self)\n- advantageous_deviation = max(0, split_self - deserved_share)\n- Utility for accepting = bias - alpha * disadvantageous_deviation - beta * advantageous_deviation\n\nUtility is then passed through a logistic for probability, but as required, the model outputs utility, with utility < 0 mapping to <50% acceptance likelihood.\n\n---\n\n**MODEL SPECIFICATION**\n\n<MODEL>\ndeserved_share = (token_self / (token_self + token_opp)) * combined_earning\ndisadvantageous_deviation = max(0, deserved_share - split_self)\nadvantageous_deviation = max(0, split_self - deserved_share)\nutility = bias - alpha * disadvantageous_deviation - beta * advantageous_deviation\n</MODEL>\n\n---\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"deserved_share\": {\n      \"description\": \"Amount responder would receive if earnings were divided in proportion to token contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by responder (participant) in pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning / 3\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent in pretask\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning / 3\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total pot (in \u00a3) for the round\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 120,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share (in \u00a3) offered to responder (participant)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"disadvantageous_deviation\": {\n      \"description\": \"How much less (in \u00a3) is offered than deserved_share; zero unless offer is below deserved_share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"advantageous_deviation\": {\n      \"description\": \"How much more (in \u00a3) is offered than deserved_share; zero unless offer is above deserved_share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Acceptance bias (baseline tendency to accept offers, in \u00a3 units)\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -100,\n          \"high\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Aversion (sensitivity) to disadvantageous offers; higher means more rejection of too-low offers\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to advantageous inequity; typically low or negative, can be any real number but bounded for estimation\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"utility\": {\n      \"description\": \"Utility of accepting the offer; negative values correspond to <50% acceptance probability\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA three-parameter, orthogonally coded linear utility responder model. Responders evaluate each offer relative to their deserved share (proportional to their tokens), penalizing offers below this proportional amount (`alpha`, disadvantageous deviation) and, separately, offers above (`beta`, advantageous deviation). An acceptance bias term captures baseline receptivity. The disadvantageous and advantageous deviations are implemented as exclusive non-negative differences, ensuring strict parameter recoverability and maximal dissociability between self-interest, fairness, and acceptance bias motives.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: deserved_share = (token_self / (token_self + token_opp)) * combined_earning\ndisadvantageous_deviation = max(0, deserved_share - split_self)\nadvantageous_deviation = max(0, split_self - deserved_share)\nutility = bias - alpha * disadvantageous_deviation - beta * advantageous_deviation\nSummary: A three-parameter, orthogonally coded linear utility responder model. Responders evaluate each offer relative to their deserved share (proportional to their tokens), penalizing offers below this proportional amount (`alpha`, disadvantageous deviation) and, separately, offers above (`beta`, advantageous deviation). An acceptance bias term captures baseline receptivity. The disadvantageous and advantageous deviations are implemented as exclusive non-negative differences, ensuring strict parameter recoverability and maximal dissociability between self-interest, fairness, and acceptance bias motives.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, bias=0, alpha=0, beta=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        # Calculate deserved share\n        deserved_share = (token_self / (token_self + token_opp)) * combined_earning\n\n        # Calculate deviations\n        disadvantageous_deviation = max(0, deserved_share - split_self)\n        advantageous_deviation = max(0, split_self - deserved_share)\n\n        # Calculate utility\n        utility = bias - alpha * disadvantageous_deviation - beta * advantageous_deviation\n\n        model_predictions.append(utility)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7735042735042734,
  "group_accuracies": {
    "Control": 0.8126614987080103,
    "Cocaine": 0.7384259259259259
  },
  "group_parameter_averages": {
    "Control": {
      "bias": 25.915886152393817,
      "alpha": 12.047322756199861,
      "beta": -4.826953087949145
    },
    "Cocaine": {
      "bias": 15.537892746903202,
      "alpha": 14.28129302951826,
      "beta": -3.6966051621756586
    }
  },
  "fitting_results": [
    {
      "bias": -0.6610818703924877,
      "alpha": 56.92231003369404,
      "beta": -1.3132949778484513,
      "success": true,
      "log_likelihood": -25.517192824019915,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 8.492017953954713,
      "alpha": 3.7175647563686622,
      "beta": -4.067149014372164,
      "success": true,
      "log_likelihood": -36.00335435866121,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 4.441745492371019,
      "alpha": 1.7482563252728813,
      "beta": 0.3127292547998052,
      "success": true,
      "log_likelihood": -13.473193965048884,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 1.3448165899439044,
      "alpha": 0.7868994040634791,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -17.578907060349106,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -46.66129683168138,
      "alpha": 60.55278157030005,
      "beta": 5.5218903275023745,
      "success": true,
      "log_likelihood": -368.4136148769368,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 3.7962566397826305,
      "alpha": 1.1549690167595366,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -14.139622618374773,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 100.0,
      "alpha": 2.8186388134956208e-15,
      "beta": -9.028617034895916,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 5.138347823920287,
      "alpha": 1.501605264330394,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -11.710648457618767,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -89.6648189659446,
      "alpha": 98.87989391613152,
      "beta": -7.7060001267727785,
      "success": true,
      "log_likelihood": -828.9306334778568,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 2.2364009748121534,
      "alpha": 1.3674947476468597,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -12.805966450061259,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 3.546194611381302,
      "alpha": 1.7725420308576942,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -10.39822147248459,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.6611188462811496,
      "alpha": 68.06039690490967,
      "beta": -1.3134001093368624,
      "success": true,
      "log_likelihood": -48.543043716795125,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 3.2698232218453054,
      "alpha": 1.793658382689937,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -10.329980018809403,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 100.0,
      "alpha": 0.0,
      "beta": 10.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 100.0,
      "alpha": 0.0,
      "beta": 4.435719015469811,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 44.85672401312375,
      "alpha": 0.0,
      "beta": -6.845550253739416,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 88.34760952791484,
      "alpha": 0.0,
      "beta": -8.796191136021656,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 100.0,
      "alpha": 0.0,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 8.026371473206632,
      "alpha": 1.5438769480862093,
      "beta": -2.306451989708509,
      "success": true,
      "log_likelihood": -6.267990422842799,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 100.0,
      "alpha": 0.0,
      "beta": -6.916236548502964,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 3.2567872034301457,
      "alpha": 1.1955258979585108,
      "beta": -8.54691213031212,
      "success": true,
      "log_likelihood": -14.32607479079852,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 100.0,
      "alpha": 0.0,
      "beta": -0.034502355504827165,
      "success": true,
      "log_likelihood": -115.12925464660225,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.22540920590380178,
      "alpha": 0.40247677660162284,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -19.79668573221402,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 1.553920582150497,
      "alpha": 0.6030792480199483,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -19.81559574691044,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 4.178431250536709,
      "alpha": 1.770374626465438,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -10.380298513887661,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 68.62363048158507,
      "alpha": 25.243637839918044,
      "beta": -6.151070399329006,
      "success": true,
      "log_likelihood": -137.4453540802606,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 2.5742229297328443,
      "alpha": 0.9371771879298705,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -16.54738462973736,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 3.9435514836119685,
      "alpha": 3.973378163728832,
      "beta": -9.457960181122875,
      "success": true,
      "log_likelihood": -5.649024955662632,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 79.845844764259,
      "alpha": 14.22946493513934,
      "beta": -3.5302420116766786,
      "success": true,
      "log_likelihood": -46.05773448968815,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 52.8651525628206,
      "alpha": 0.0,
      "beta": -6.929260602030192,
      "success": true,
      "log_likelihood": -184.20680743672378,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 100.0,
      "alpha": 8.015822069570493,
      "beta": -1.062588280087395,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.6610905980968096,
      "alpha": 70.06898897614573,
      "beta": -1.3133189754231274,
      "success": true,
      "log_likelihood": -25.51719278512217,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.1943368252607707,
      "alpha": 0.2676739578288095,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -21.766438622358148,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 4.860954696362462,
      "alpha": 2.9053295247700763,
      "beta": 3.190557596025448,
      "success": true,
      "log_likelihood": -28.950814776267944,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 67.24559342506986,
      "alpha": 0.6193658076227244,
      "beta": -9.143811786742727,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 1.646051820054098,
      "alpha": 0.42412600422010527,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -20.52278758758262,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 4.280703566019937,
      "alpha": 1.1657223994243633,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -13.378001051475112,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 2.9505148031967003,
      "alpha": 1.2513837370181682,
      "beta": -8.19215446797067,
      "success": true,
      "log_likelihood": -13.935299788268795,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 8.332400793116438,
      "alpha": 2.4692431043008196,
      "beta": 1.632071735972991,
      "success": true,
      "log_likelihood": -22.79316484794989,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 4.253115705664435,
      "alpha": 0.5656302024314037,
      "beta": -9.766730540549904,
      "success": true,
      "log_likelihood": -8.672388658520772,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 3.121775703831255,
      "alpha": 0.9978501545500361,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -15.650292037134394,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 38.085694829859776,
      "alpha": 81.12637860183874,
      "beta": 7.942134053425866,
      "success": true,
      "log_likelihood": -46.05172915980016,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 27.158110710607666,
      "alpha": 0.0,
      "beta": 1.8273581569386843,
      "success": true,
      "log_likelihood": -23.0099311575801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 1.7776769441983897,
      "alpha": 0.6322721979504126,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -19.448006389011116,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 99.39453255165766,
      "alpha": 26.930765494367243,
      "beta": -3.666517094165355,
      "success": true,
      "log_likelihood": -125.12879191012527,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.8379307649120604,
      "alpha": 0.3396401025150717,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -19.307879748742696,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -94.98121546356342,
      "alpha": 92.67474950301815,
      "beta": 7.532183794465141,
      "success": true,
      "log_likelihood": -437.49116766716884,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.4395172899835567,
      "alpha": 0.433804117499296,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -20.15400922644472,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 4.138869774440822,
      "alpha": 2.285840818368692,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -8.21530402264883,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.33703278456967156,
      "alpha": 0.10079972022641993,
      "beta": -0.47245171353610543,
      "success": true,
      "log_likelihood": -24.624847247426278,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 98.53891351174083,
      "alpha": 21.930821621629057,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -149.23872159418448,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.1515765736117196,
      "alpha": 0.4470580362042702,
      "beta": -1.7381329917791952,
      "success": true,
      "log_likelihood": -12.106137845747496,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.9423979017440867,
      "alpha": 0.36200585572308,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -21.95736474732154,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 94.4996764627713,
      "alpha": 86.11226055934732,
      "beta": 5.332135448355908,
      "success": true,
      "log_likelihood": -391.43887495834724,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.9310078517265772,
      "alpha": 0.6660084012264618,
      "beta": -8.457935561893157,
      "success": true,
      "log_likelihood": -18.27911871297012,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 3.1509854345751376,
      "alpha": 2.4120473060315617,
      "beta": -9.706790731658588,
      "success": true,
      "log_likelihood": -8.245073867141338,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.3227185165384847,
      "alpha": 1.4420523145771893,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -11.353215048199115,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 100.0,
      "alpha": 0.0,
      "beta": -3.7867796975652706,
      "success": true,
      "log_likelihood": -92.1034037165618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.9754098704076826,
      "alpha": 0.8545011585983493,
      "beta": -1.5847816557787613,
      "success": true,
      "log_likelihood": -9.098245004288144,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 2.0888722338648034,
      "alpha": 0.25739860286977967,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -16.663524174904822,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.7305695881076197,
      "alpha": 0.5051822634926634,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -20.19194360377177,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 10.590738381700282,
      "alpha": 4.536131593083915,
      "beta": 5.8731549592106465,
      "success": true,
      "log_likelihood": -28.2449944653758,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -49.74557755193339,
      "alpha": 82.20594679825241,
      "beta": 4.065743760010038,
      "success": true,
      "log_likelihood": -69.07755278651892,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 3.9062676217579058,
      "alpha": 2.1944991808139522,
      "beta": 0.46314841989884686,
      "success": true,
      "log_likelihood": -42.57270114793928,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.30259466192453016,
      "alpha": 1.031414385296323,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -11.846338553866946,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.9670892428629891,
      "alpha": 0.7049664290881352,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -18.7466124914658,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 97.20353626523905,
      "alpha": 0.1259760721992964,
      "beta": 3.755813621666796,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 4.503076113576541,
      "alpha": 0.8032913672712404,
      "beta": -6.28205595184867,
      "success": true,
      "log_likelihood": -10.633550027907063,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.1692846789123392,
      "alpha": 0.3990506105300118,
      "beta": -8.378250692925787,
      "success": true,
      "log_likelihood": -21.5885959263541,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 72.26666951075244,
      "alpha": 3.4870260673901923,
      "beta": 3.602283401285293,
      "success": true,
      "log_likelihood": -69.07755278652137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -95.13779450647526,
      "alpha": 64.73498339089457,
      "beta": 6.488689812502816,
      "success": true,
      "log_likelihood": -92.10340371656183,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -47.845469618694594,
      "alpha": 100.0,
      "beta": 7.832683090773138,
      "success": true,
      "log_likelihood": -115.12925464658564,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.9509965930768192,
      "alpha": 0.7616690149736239,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -18.287434830073675,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.9964650717116792,
      "alpha": 0.2851819934963717,
      "beta": -5.581613945029775,
      "success": true,
      "log_likelihood": -17.732719190021403,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.0691491505689619,
      "alpha": 0.3967257345876573,
      "beta": 1.6662060111641268,
      "success": true,
      "log_likelihood": -22.848497599164716,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 100.0,
      "alpha": 3.7521874724655836e-16,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -253.28436022684528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 100.0,
      "alpha": 9.41020783787899e-16,
      "beta": -7.378103124669872,
      "success": true,
      "log_likelihood": -46.051701856480875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.004528877370573116,
      "alpha": 89.11816589801899,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -24.414615231750872,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.7917145938588244,
      "alpha": 0.43505462128714745,
      "beta": 4.699494838143961,
      "success": true,
      "log_likelihood": -31.828996075635786,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.3806769108795605,
      "alpha": 0.967423695750003,
      "beta": -1.9388352302542333,
      "success": true,
      "log_likelihood": -6.8478436843723784,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.6908112502740166,
      "alpha": 0.26423625835574055,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -22.659904222297385,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 100.0,
      "alpha": 6.326650534339409e-16,
      "beta": 4.886266310875479,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -38.79546816042541,
      "alpha": 37.37492385452739,
      "beta": -1.8755289998978402,
      "success": true,
      "log_likelihood": -92.10340357487081,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.5633974655694383,
      "alpha": 0.6683399751110412,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -19.183168826994333,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.8130901741873987,
      "alpha": 0.1706611624634787,
      "beta": -7.779720166537327,
      "success": true,
      "log_likelihood": -22.65085881409549,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.0032689789157678024,
      "alpha": 24.840963124043466,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -24.415779266904046,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 93.35908784375789,
      "alpha": 20.682486553879514,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -157.92871648733995,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 6.576802713991665,
      "alpha": 9.594901384013511,
      "beta": 9.210233394175644,
      "success": true,
      "log_likelihood": -34.31015694085017,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 6.364930740121866,
      "alpha": 0.9203239695532166,
      "beta": -3.272642856183307,
      "success": true,
      "log_likelihood": -5.261014595324557,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.7993201178781746,
      "alpha": 0.4105142083502384,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -21.386579956387813,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 55.81757660324572,
      "alpha": 6.314565342765925e-17,
      "beta": -0.944944233236205,
      "success": true,
      "log_likelihood": -253.28436022684528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "bias": {
        "r": 0.8851994660643101,
        "p": 2.4363858448881964e-34
      },
      "alpha": {
        "r": 0.5200543460783277,
        "p": 2.9352899529940587e-08
      },
      "beta": {
        "r": -0.03149559324563553,
        "p": 0.755744866638441
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 129.99331028889816,
  "bic_Control": 119.06887680756401,
  "bic_Cocaine": 139.77978194925998,
  "bic_results": {
    "average_bic": 129.99331028889816,
    "individual_bics": [
      61.78494246340816,
      82.75726553269075,
      37.6969447454661,
      45.90837093606655,
      747.5777865692419,
      39.02980205211787,
      10.75055680816833,
      34.17185373060586,
      1668.6118237710818,
      36.36248971549085,
      31.54699976033751,
      107.83664424895858,
      31.410516852987136,
      10.75055680816833,
      10.75055680816833,
      10.75055680816833,
      10.75055680816833,
      241.00906610857285,
      23.286537661053927,
      10.75055680816833,
      39.40270639696537,
      241.00906610857282,
      50.34392827979637,
      50.381748309189206,
      31.511153843143653,
      285.64126497588956,
      43.845326074843044,
      22.048606726693595,
      102.86602579474463,
      379.1641716888159,
      10.75055680816833,
      61.784942385612666,
      54.28343406008463,
      68.65218636790422,
      10.75055680816833,
      51.79613199053357,
      37.506558918318554,
      38.62115639190592,
      56.336886511268105,
      28.095334132409874,
      42.05114088963712,
      102.85401513496865,
      56.77041913052854,
      49.646569593390566,
      261.0081406356189,
      49.366316312853726,
      885.732892149706,
      51.05857526825777,
      27.18116486066599,
      60.00025131022089,
      309.2280000037373,
      34.96283250686332,
      54.66528631001141,
      793.6283067320628,
      47.308794241308576,
      27.240704549651007,
      33.45698691176656,
      194.95736424849193,
      28.947046823944618,
      44.07760516517797,
      51.134444022911865,
      67.24054574611993,
      148.90566238840617,
      95.89595911124688,
      34.44323392310223,
      48.243781798299935,
      148.90566238841095,
      32.01765687118245,
      53.92774866807653,
      148.90566238841106,
      194.95736424849198,
      241.0090661085396,
      47.325426475515684,
      46.21599519541114,
      56.44755201369776,
      517.319277269059,
      102.85396052833008,
      59.57978727887007,
      74.4085489666399,
      24.446244184113088,
      56.0703652599631,
      148.90566238841095,
      194.95736396510995,
      49.11689446935699,
      56.05227444355931,
      59.58211534917642,
      326.60798979004824,
      79.37087069706867,
      21.272586006017445,
      53.52371672814395,
      517.319277269059
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        61.78494246340816,
        82.75726553269075,
        37.6969447454661,
        45.90837093606655,
        747.5777865692419,
        39.02980205211787,
        10.75055680816833,
        34.17185373060586,
        1668.6118237710818,
        36.36248971549085,
        31.54699976033751,
        107.83664424895858,
        31.410516852987136,
        10.75055680816833,
        10.75055680816833,
        10.75055680816833,
        10.75055680816833,
        241.00906610857285,
        23.286537661053927,
        10.75055680816833,
        39.40270639696537,
        241.00906610857282,
        50.34392827979637,
        50.381748309189206,
        31.511153843143653,
        285.64126497588956,
        43.845326074843044,
        22.048606726693595,
        102.86602579474463,
        379.1641716888159,
        10.75055680816833,
        61.784942385612666,
        54.28343406008463,
        68.65218636790422,
        10.75055680816833,
        51.79613199053357,
        37.506558918318554,
        38.62115639190592,
        56.336886511268105,
        28.095334132409874,
        42.05114088963712,
        102.85401513496865,
        56.77041913052854
      ],
      "Cocaine": [
        49.646569593390566,
        261.0081406356189,
        49.366316312853726,
        885.732892149706,
        51.05857526825777,
        27.18116486066599,
        60.00025131022089,
        309.2280000037373,
        34.96283250686332,
        54.66528631001141,
        793.6283067320628,
        47.308794241308576,
        27.240704549651007,
        33.45698691176656,
        194.95736424849193,
        28.947046823944618,
        44.07760516517797,
        51.134444022911865,
        67.24054574611993,
        148.90566238840617,
        95.89595911124688,
        34.44323392310223,
        48.243781798299935,
        148.90566238841095,
        32.01765687118245,
        53.92774866807653,
        148.90566238841106,
        194.95736424849198,
        241.0090661085396,
        47.325426475515684,
        46.21599519541114,
        56.44755201369776,
        517.319277269059,
        102.85396052833008,
        59.57978727887007,
        74.4085489666399,
        24.446244184113088,
        56.0703652599631,
        148.90566238841095,
        194.95736396510995,
        49.11689446935699,
        56.05227444355931,
        59.58211534917642,
        326.60798979004824,
        79.37087069706867,
        21.272586006017445,
        53.52371672814395,
        517.319277269059
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- bias: r = 0.885\n- alpha: r = 0.520\n- beta: r = -0.031",
  "previous_models": [
    "Specification: deserved_share = (token_self / (token_self + token_opp)) * combined_earning\ndisadvantageous_deviation = max(0, deserved_share - split_self)\nadvantageous_deviation = max(0, split_self - deserved_share)\nutility = bias - alpha * disadvantageous_deviation - beta * advantageous_deviation\nSummary: A three-parameter, orthogonally coded linear utility responder model. Responders evaluate each offer relative to their deserved share (proportional to their tokens), penalizing offers below this proportional amount (`alpha`, disadvantageous deviation) and, separately, offers above (`beta`, advantageous deviation). An acceptance bias term captures baseline receptivity. The disadvantageous and advantageous deviations are implemented as exclusive non-negative differences, ensuring strict parameter recoverability and maximal dissociability between self-interest, fairness, and acceptance bias motives.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 129.99331028889816\nOverall Accuracy: 0.7735\nGroup Accuracies:\n- Control: 0.8127\n- Cocaine: 0.7384\n\nParameter Recovery:\n- bias: r = 0.885\n- alpha: r = 0.520\n- beta: r = -0.031"
  ]
}