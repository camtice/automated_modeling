{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "\n\n---\n\n**Instructions for Computational Modeling Design (Run 5 of 5):**\n\nYour goal is to develop a computational model of responder behavior in the resource-sharing negotiation dataset that *maximizes parameter recovery and interpretability*, while also achieving strong model fit (minimized BIC) and predictive accuracy. \n\n**Above all, every included learnable parameter must show robust, orthogonal recovery (i.e., each can be individually and reliably recovered regardless of the others).** \n\nPrior modeling attempts illustrate that plausible psychological mechanisms\u2014if encoded with overlapping or collinear variables\u2014fail recovery tests and thus undermine interpretability and model utility. Therefore, **do not include any parameter whose recovery you cannot justify, and lean toward variable constructions that maximize strict dissociation.**\n\nProceed step by step, following this process:\n\n---\n\n1. **Map Psychological Processes to Strict, Orthogonal Variable Encodings**\n   - List all plausible psychological mechanisms that could drive responder behavior (e.g., self-interest, proportional fairness, disadvantage aversion, acceptance bias, advantageous inequity aversion, threshold effects).\n   - For each, propose at least two distinct variable encodings using only provided dataset fields\u2014for example:\n     - As a continuous variable (e.g., difference in share vs. fairness).\n     - As an indicator or threshold-triggered variable (e.g., is the participant disadvantaged?).\n     - As a normalized/percent variable or a centered (zero-mean) score.\n   - For each encoding, reflect on collinearity and statistical redundancy. Identify which combinations are mathematically or conceptually non-overlapping (e.g., mutually exclusive indicators, or strictly contrast-coded predictors).\n   - **Explicitly reject candidate variables/encodings that risk parameter dependence or redundancy.** If two variables cannot be orthogonal, choose only one or recode to enforce exclusivity.\n\n2. **Design for Maximal Recovery and Interpretability**\n   - Only include a learnable parameter if there is a strictly dissociable, one-to-one mapping from parameter to psychological process and to observable model variance.\n   - For fairness, consider using percent deviation from deserved share, ramp or indicator functions, or stepwise effects. \n   - For disadvantage, strongly prefer indicator or exclusivity-based codings (e.g., \u201cis_offer_disadvantage\u201d = 1 if responder is offered less than the opponent) over broad linear terms.\n   - Wherever possible, encode model inputs so that only one parameter \u201cacts\u201d on each trial (except for the bias/intercept). This empirically supports robust recovery.\n   - Before finalizing your formula, **perform a \"mental simulation\"**: for each parameter, specify which trial types it impacts, and check that its effect cannot be numerically mimicked by any combination of other parameters.\n   - If using a nonlinear, threshold, or step function, justify mathematically why it will not undermine recovery\u2014otherwise, do not include it.\n\n3. **Compare Alternative Approaches Before Committing**\n   - For at least one psychological mechanism, propose and analyze *two* possible model encodings, assessing the likely impact on collinearity and recovery.\n   - Choose the alternative that most cleanly isolates the intended process.\n   - Explicitly discuss why you rejected the non-selected alternative(s).\n\n4. **Model Parsimony & Justification**\n   - Do not include unnecessary or overlapping parameters. A lean model with fully recoverable parameters is vastly preferable to a maximally-complex but non-interpretable one.\n\n5. **Formal Specification and Structured Output**\n   - Write the model as a strict mathematical formula between <MODEL>... </MODEL> tags (math only; no comments or explanation).\n   - Provide variable definitions, ranges, parameter bounds, and learnability in the required JSON format between <VARIABLES> tags.\n   - Specify the target variable within <target_variable> tags.\n   - In <SUMMARY> tags, succinctly describe the psychological processes modeled, the orthogonal mappings to parameters, and any indicator or contrast coding strategies used.\n\n---\n\n**Special Emphasis for This Final Run:**\n- *Creativity is required!* Consider variable splits (e.g., percent unfairness vs. disadvantage indicator), transformation to step or trigger functions, or combinations with maximum mutual exclusivity.\n- If in doubt, select the version that most cleanly partitions psychological processes in a way that a parameter recovery assessment could verify.\n- *Do not reuse any conventional \u201cramp\u201d or \u201csplit deviation\u201d forms shown to have poor recovery unless you have mathematically restructured them for strict orthogonality.*\n- If your mental simulation suggests any potential for parameter trade-off or cross-talk, revise the encoding until complete parameter independence is achieved.\n\nBe concise but rigorous in your reasoning and justifications. Only submit models with parameterizations you genuinely expect will yield *all* parameters highly recoverable, while remaining interpretable and predictive.\n\n---",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: \n\n---\n\n**Instructions for Computational Modeling Design (Run 5 of 5):**\n\nYour goal is to develop a computational model of responder behavior in the resource-sharing negotiation dataset that *maximizes parameter recovery and interpretability*, while also achieving strong model fit (minimized BIC) and predictive accuracy. \n\n**Above all, every included learnable parameter must show robust, orthogonal recovery (i.e., each can be individually and reliably recovered regardless of the others).** \n\nPrior modeling attempts illustrate that plausible psychological mechanisms\u2014if encoded with overlapping or collinear variables\u2014fail recovery tests and thus undermine interpretability and model utility. Therefore, **do not include any parameter whose recovery you cannot justify, and lean toward variable constructions that maximize strict dissociation.**\n\nProceed step by step, following this process:\n\n---\n\n1. **Map Psychological Processes to Strict, Orthogonal Variable Encodings**\n   - List all plausible psychological mechanisms that could drive responder behavior (e.g., self-interest, proportional fairness, disadvantage aversion, acceptance bias, advantageous inequity aversion, threshold effects).\n   - For each, propose at least two distinct variable encodings using only provided dataset fields\u2014for example:\n     - As a continuous variable (e.g., difference in share vs. fairness).\n     - As an indicator or threshold-triggered variable (e.g., is the participant disadvantaged?).\n     - As a normalized/percent variable or a centered (zero-mean) score.\n   - For each encoding, reflect on collinearity and statistical redundancy. Identify which combinations are mathematically or conceptually non-overlapping (e.g., mutually exclusive indicators, or strictly contrast-coded predictors).\n   - **Explicitly reject candidate variables/encodings that risk parameter dependence or redundancy.** If two variables cannot be orthogonal, choose only one or recode to enforce exclusivity.\n\n2. **Design for Maximal Recovery and Interpretability**\n   - Only include a learnable parameter if there is a strictly dissociable, one-to-one mapping from parameter to psychological process and to observable model variance.\n   - For fairness, consider using percent deviation from deserved share, ramp or indicator functions, or stepwise effects. \n   - For disadvantage, strongly prefer indicator or exclusivity-based codings (e.g., \u201cis_offer_disadvantage\u201d = 1 if responder is offered less than the opponent) over broad linear terms.\n   - Wherever possible, encode model inputs so that only one parameter \u201cacts\u201d on each trial (except for the bias/intercept). This empirically supports robust recovery.\n   - Before finalizing your formula, **perform a \"mental simulation\"**: for each parameter, specify which trial types it impacts, and check that its effect cannot be numerically mimicked by any combination of other parameters.\n   - If using a nonlinear, threshold, or step function, justify mathematically why it will not undermine recovery\u2014otherwise, do not include it.\n\n3. **Compare Alternative Approaches Before Committing**\n   - For at least one psychological mechanism, propose and analyze *two* possible model encodings, assessing the likely impact on collinearity and recovery.\n   - Choose the alternative that most cleanly isolates the intended process.\n   - Explicitly discuss why you rejected the non-selected alternative(s).\n\n4. **Model Parsimony & Justification**\n   - Do not include unnecessary or overlapping parameters. A lean model with fully recoverable parameters is vastly preferable to a maximally-complex but non-interpretable one.\n\n5. **Formal Specification and Structured Output**\n   - Write the model as a strict mathematical formula between <MODEL>... </MODEL> tags (math only; no comments or explanation).\n   - Provide variable definitions, ranges, parameter bounds, and learnability in the required JSON format between <VARIABLES> tags.\n   - Specify the target variable within <target_variable> tags.\n   - In <SUMMARY> tags, succinctly describe the psychological processes modeled, the orthogonal mappings to parameters, and any indicator or contrast coding strategies used.\n\n---\n\n**Special Emphasis for This Final Run:**\n- *Creativity is required!* Consider variable splits (e.g., percent unfairness vs. disadvantage indicator), transformation to step or trigger functions, or combinations with maximum mutual exclusivity.\n- If in doubt, select the version that most cleanly partitions psychological processes in a way that a parameter recovery assessment could verify.\n- *Do not reuse any conventional \u201cramp\u201d or \u201csplit deviation\u201d forms shown to have poor recovery unless you have mathematically restructured them for strict orthogonality.*\n- If your mental simulation suggests any potential for parameter trade-off or cross-talk, revise the encoding until complete parameter independence is achieved.\n\nBe concise but rigorous in your reasoning and justifications. Only submit models with parameterizations you genuinely expect will yield *all* parameters highly recoverable, while remaining interpretable and predictive.\n\n---\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let\u2019s execute your instructions carefully step by step.\n\n---\n\n### **1. Map Psychological Processes to Strict, Orthogonal Variable Encodings**\n\n#### **Core Mechanisms**\n- **Self-interest:** Tendency to accept if own share is high enough, regardless of fairness.\n- **Fairness/Equity:** Sensitivity to offers deviating from proportional/share norms.\n- **Disadvantageous Inequity Aversion:** Refusal to accept being offered less than the other.\n- **Offer Acceptance Bias:** Baseline tendency to accept/reject regardless of features.\n\n#### **Candidate Encodings**\n**A. Self-interest**\n- As *continuous*: responder\u2019s own share (splitperc_self or split_self).\n- As *indicator*: own share above threshold (binary: splitperc_self > threshold_self).\n\n**B. Proportional Fairness**\n- As *continuous*: proportional deviation = splitperc_self - expected proportional share (where expectation = token_self/(token_self+token_opp)).\n- As *indicator*: is_proportionally_fair = 1 if |proportional deviation| < \u03b5, else 0.\n\n**C. Disadvantageous Inequity**\n- As *continuous*: splitperc_self - splitperc_opp\n- As *indicator*: is_disadvantaged = 1 if splitperc_self < splitperc_opp, else 0.\n\n**D. Acceptance Bias**\n- Constant/intercept.\n\n---\n\n### **2. Reflect on Collinearity & Mutual Exclusivity**\n\n- **Proportional fairness (continuous deviation)** and **disadvantageous inequity (splitperc_self - splitperc_opp)** are often tightly correlated, especially on extreme trials. To maximize orthogonality, **use an indicator variable for disadvantageous inequity** (which is exclusive, i.e., it's only \"on\" for a strict minority of trials).\n- **Self-interest** and **proportional fairness** can be somewhat redundant unless controlled via exclusive coding.\n\n#### **Partitioning**\n- On trials where responder\u2019s share is less than opponent\u2019s (is_disadvantaged=1), fairness is violated in a specific direction. In all other trials, raw proportional deviation may still be relevant, but that parameterizes the \"not-disadvantaged\" space cleanly.\n- **Thus: split the explanation space**\n    - **Disadvantaged indicator** takes the lead when responder gets less (fully orthogonal, not continuous with other predictors).\n    - **Proportional deviation** applies when NOT disadvantaged.\n    - **Intercept** applies everywhere.\n\n---\n\n### **3. Compare and Select Encodings**\n\n#### *A. Continuous disadvantage (splitperc_self - splitperc_opp):*\n- Recovery is poor: even non-disadvantaged trials get heavily weighted due to overlapping with proportional deviation.\n- Collinearity with proportional deviation on most trials (when proportional fairness is violated, disadvantageous inequity is usually also present).\n\n#### *B. Binary disadvantage PLUS continuous proportional deviation (mutually exclusive activation):*\n- On any trial, only 0 or 1 process is \u201con\u201d (besides the intercept).\n- Each parameter indexes a **disjoint* set of trials, and thus is recoverable.\n\n**Therefore, Option B is optimal for recovery.**\n\n---\n\n### **4. Final Model Construction:**\n\n#### **Inputs:**\n- **is_disadvantaged** (binary): 1 if splitperc_self < splitperc_opp, 0 otherwise.\n- **proportional_deviation** (continuous): (splitperc_self/100) - (token_self/(token_self+token_opp)), defined as 0 where is_disadvantaged==1 (i.e., applies only when not disadvantaged).\n- **Intercept (accept_bias):** always present.\n\n#### **Output:**\n- **Utility U**\n- Logistic probability of accept: P(accept) = sigmoid(U)\n\n#### **Model Formula:**\n- U = accept_bias + beta_disadv * is_disadvantaged + beta_fairness * proportional_deviation\n\nWhere proportional_deviation is set to 0 on disadvantaged trials (so the two explanatory terms never overlap).\n\n---\n\n### **5. Mental Simulation for Recovery**\n\n- **beta_disadv:** Only affects trials where responder is disadvantaged. Only this parameter modifies utility in those cases (besides bias). Changes here cannot be mimicked by adjusting other parameters, as they have no effect on these trials.\n- **beta_fairness:** Affects only non-disadvantaged trials via proportional_deviation; does not affect disadvantaged ones. Strictly orthogonal.\n- **accept_bias:** Global average tendency, adjusts base rate everywhere and absorbs no variance unique to either other variable.\n\n---\n\n### **6. Variable Ranges and Implementation**\n\n- **accept_bias:** (-10, 10) (wide)\n- **beta_disadv:** (-10, 10)\n- **beta_fairness:** (-10, 10)\n- **is_disadvantaged:** {0,1}\n- **proportional_deviation:** [-1, 1] in practice (as share percent minus proportional percent), forced to 0 on is_disadvantaged==1\n- **All variables uniquely identifiable**\n\n---\n\n### **7. Formal Model Specification**\n\n<MODEL>\nU = accept_bias + beta_disadv * is_disadvantaged + beta_fairness * proportional_deviation\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Latent utility for accepting the offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"accept_bias\": {\n      \"description\": \"Intercept: baseline tendency to accept offers, regardless of features.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_disadv\": {\n      \"description\": \"Weight on disadvantageous inequity (being offered less than the other). Affects utility only when is_disadvantaged=1.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_fairness\": {\n      \"description\": \"Sensitivity to continuous proportional fairness: effect of proportional_deviation only on non-disadvantaged trials.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"is_disadvantaged\": {\n      \"description\": \"Indicator for disadvantageous offer: 1 if splitperc_self < splitperc_opp, else 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"proportional_deviation\": {\n      \"description\": \"Proportional deviation from deserved share: (splitperc_self / 100) minus (token_self / (token_self + token_opp)), set to 0 when is_disadvantaged == 1.\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Responder's share of the pot (%).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_opp\": {\n      \"description\": \"Opponent's share of the pot (%).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Tokens collected by the responder.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Tokens collected by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts responder acceptance decisions using three strictly orthogonal psychological mechanisms, each mapped to a non-overlapping input: (1) disadvantageous inequity aversion via a binary indicator (\"is_disadvantaged\"), (2) sensitivity to continuous proportional fairness deviations (\"proportional_deviation\") only when not disadvantaged, and (3) a global acceptance bias/intercept. The mutually exclusive activation of \"is_disadvantaged\" and \"proportional_deviation\" guarantees full parameter recovery and clear interpretability, as on any trial only one (plus bias) is operative. Each parameter thus tracks dissociable psychological influences on binary acceptance, convertible via a logistic (sigmoidal) function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['accept_bias', 'beta_disadv', 'beta_fairness']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = accept_bias + beta_disadv * is_disadvantaged + beta_fairness * proportional_deviation\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Latent utility for accepting the offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"accept_bias\": {\n      \"description\": \"Intercept: baseline tendency to accept offers, regardless of features.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_disadv\": {\n      \"description\": \"Weight on disadvantageous inequity (being offered less than the other). Affects utility only when is_disadvantaged=1.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_fairness\": {\n      \"description\": \"Sensitivity to continuous proportional fairness: effect of proportional_deviation only on non-disadvantaged trials.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"is_disadvantaged\": {\n      \"description\": \"Indicator for disadvantageous offer: 1 if splitperc_self < splitperc_opp, else 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"proportional_deviation\": {\n      \"description\": \"Proportional deviation from deserved share: (splitperc_self / 100) minus (token_self / (token_self + token_opp)), set to 0 when is_disadvantaged == 1.\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Responder's share of the pot (%).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_opp\": {\n      \"description\": \"Opponent's share of the pot (%).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Tokens collected by the responder.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Tokens collected by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, accept_bias=0, beta_disadv=0, beta_fairness=0):\n    model_predictions = []\n    for trial in trial_data:\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n        splitperc_opp = trial.get(\"splitperc_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate is_disadvantaged\n        is_disadvantaged = 1 if splitperc_self < splitperc_opp else 0\n\n        # Calculate proportional_deviation\n        if token_self + token_opp == 0:\n            proportional_deviation = 0  # Avoid division by zero\n        else:\n            proportional_deviation = (splitperc_self / 100) - (token_self / (token_self + token_opp))\n        \n        # Set proportional_deviation to 0 when is_disadvantaged == 1\n        if is_disadvantaged == 1:\n            proportional_deviation = 0\n\n        # Calculate utility\n        U = accept_bias + beta_disadv * is_disadvantaged + beta_fairness * proportional_deviation\n\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 10, \"split_opp\": 6.0, \"split_self\": 4.0, \"splitperc_opp\": 60, \"splitperc_self\": 40, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 60.0, \"proposed_amount\": 6.0}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 10, \"split_opp\": 5.0, \"split_self\": 5.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 5.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 5.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744724269.6216059
    }
  ],
  "learnable_parameters": {
    "accept_bias": {
      "description": "Intercept: baseline tendency to accept offers, regardless of features.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta_disadv": {
      "description": "Weight on disadvantageous inequity (being offered less than the other). Affects utility only when is_disadvantaged=1.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta_fairness": {
      "description": "Sensitivity to continuous proportional fairness: effect of proportional_deviation only on non-disadvantaged trials.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = accept_bias + beta_disadv * is_disadvantaged + beta_fairness * proportional_deviation",
  "variable_descriptions": {
    "U": {
      "description": "Latent utility for accepting the offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "accept_bias": {
      "description": "Intercept: baseline tendency to accept offers, regardless of features.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta_disadv": {
      "description": "Weight on disadvantageous inequity (being offered less than the other). Affects utility only when is_disadvantaged=1.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta_fairness": {
      "description": "Sensitivity to continuous proportional fairness: effect of proportional_deviation only on non-disadvantaged trials.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -10,
          "max": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "is_disadvantaged": {
      "description": "Indicator for disadvantageous offer: 1 if splitperc_self < splitperc_opp, else 0.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "proportional_deviation": {
      "description": "Proportional deviation from deserved share: (splitperc_self / 100) minus (token_self / (token_self + token_opp)), set to 0 when is_disadvantaged == 1.",
      "range": {
        "min": -1,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "splitperc_self": {
      "description": "Responder's share of the pot (%).",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "splitperc_opp": {
      "description": "Opponent's share of the pot (%).",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Tokens collected by the responder.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Tokens collected by the opponent.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "This model predicts responder acceptance decisions using three strictly orthogonal psychological mechanisms, each mapped to a non-overlapping input: (1) disadvantageous inequity aversion via a binary indicator (\"is_disadvantaged\"), (2) sensitivity to continuous proportional fairness deviations (\"proportional_deviation\") only when not disadvantaged, and (3) a global acceptance bias/intercept. The mutually exclusive activation of \"is_disadvantaged\" and \"proportional_deviation\" guarantees full parameter recovery and clear interpretability, as on any trial only one (plus bias) is operative. Each parameter thus tracks dissociable psychological influences on binary acceptance, convertible via a logistic (sigmoidal) function.",
  "target_variable": "accept",
  "full_reasoning": "Let\u2019s execute your instructions carefully step by step.\n\n---\n\n### **1. Map Psychological Processes to Strict, Orthogonal Variable Encodings**\n\n#### **Core Mechanisms**\n- **Self-interest:** Tendency to accept if own share is high enough, regardless of fairness.\n- **Fairness/Equity:** Sensitivity to offers deviating from proportional/share norms.\n- **Disadvantageous Inequity Aversion:** Refusal to accept being offered less than the other.\n- **Offer Acceptance Bias:** Baseline tendency to accept/reject regardless of features.\n\n#### **Candidate Encodings**\n**A. Self-interest**\n- As *continuous*: responder\u2019s own share (splitperc_self or split_self).\n- As *indicator*: own share above threshold (binary: splitperc_self > threshold_self).\n\n**B. Proportional Fairness**\n- As *continuous*: proportional deviation = splitperc_self - expected proportional share (where expectation = token_self/(token_self+token_opp)).\n- As *indicator*: is_proportionally_fair = 1 if |proportional deviation| < \u03b5, else 0.\n\n**C. Disadvantageous Inequity**\n- As *continuous*: splitperc_self - splitperc_opp\n- As *indicator*: is_disadvantaged = 1 if splitperc_self < splitperc_opp, else 0.\n\n**D. Acceptance Bias**\n- Constant/intercept.\n\n---\n\n### **2. Reflect on Collinearity & Mutual Exclusivity**\n\n- **Proportional fairness (continuous deviation)** and **disadvantageous inequity (splitperc_self - splitperc_opp)** are often tightly correlated, especially on extreme trials. To maximize orthogonality, **use an indicator variable for disadvantageous inequity** (which is exclusive, i.e., it's only \"on\" for a strict minority of trials).\n- **Self-interest** and **proportional fairness** can be somewhat redundant unless controlled via exclusive coding.\n\n#### **Partitioning**\n- On trials where responder\u2019s share is less than opponent\u2019s (is_disadvantaged=1), fairness is violated in a specific direction. In all other trials, raw proportional deviation may still be relevant, but that parameterizes the \"not-disadvantaged\" space cleanly.\n- **Thus: split the explanation space**\n    - **Disadvantaged indicator** takes the lead when responder gets less (fully orthogonal, not continuous with other predictors).\n    - **Proportional deviation** applies when NOT disadvantaged.\n    - **Intercept** applies everywhere.\n\n---\n\n### **3. Compare and Select Encodings**\n\n#### *A. Continuous disadvantage (splitperc_self - splitperc_opp):*\n- Recovery is poor: even non-disadvantaged trials get heavily weighted due to overlapping with proportional deviation.\n- Collinearity with proportional deviation on most trials (when proportional fairness is violated, disadvantageous inequity is usually also present).\n\n#### *B. Binary disadvantage PLUS continuous proportional deviation (mutually exclusive activation):*\n- On any trial, only 0 or 1 process is \u201con\u201d (besides the intercept).\n- Each parameter indexes a **disjoint* set of trials, and thus is recoverable.\n\n**Therefore, Option B is optimal for recovery.**\n\n---\n\n### **4. Final Model Construction:**\n\n#### **Inputs:**\n- **is_disadvantaged** (binary): 1 if splitperc_self < splitperc_opp, 0 otherwise.\n- **proportional_deviation** (continuous): (splitperc_self/100) - (token_self/(token_self+token_opp)), defined as 0 where is_disadvantaged==1 (i.e., applies only when not disadvantaged).\n- **Intercept (accept_bias):** always present.\n\n#### **Output:**\n- **Utility U**\n- Logistic probability of accept: P(accept) = sigmoid(U)\n\n#### **Model Formula:**\n- U = accept_bias + beta_disadv * is_disadvantaged + beta_fairness * proportional_deviation\n\nWhere proportional_deviation is set to 0 on disadvantaged trials (so the two explanatory terms never overlap).\n\n---\n\n### **5. Mental Simulation for Recovery**\n\n- **beta_disadv:** Only affects trials where responder is disadvantaged. Only this parameter modifies utility in those cases (besides bias). Changes here cannot be mimicked by adjusting other parameters, as they have no effect on these trials.\n- **beta_fairness:** Affects only non-disadvantaged trials via proportional_deviation; does not affect disadvantaged ones. Strictly orthogonal.\n- **accept_bias:** Global average tendency, adjusts base rate everywhere and absorbs no variance unique to either other variable.\n\n---\n\n### **6. Variable Ranges and Implementation**\n\n- **accept_bias:** (-10, 10) (wide)\n- **beta_disadv:** (-10, 10)\n- **beta_fairness:** (-10, 10)\n- **is_disadvantaged:** {0,1}\n- **proportional_deviation:** [-1, 1] in practice (as share percent minus proportional percent), forced to 0 on is_disadvantaged==1\n- **All variables uniquely identifiable**\n\n---\n\n### **7. Formal Model Specification**\n\n<MODEL>\nU = accept_bias + beta_disadv * is_disadvantaged + beta_fairness * proportional_deviation\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Latent utility for accepting the offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"accept_bias\": {\n      \"description\": \"Intercept: baseline tendency to accept offers, regardless of features.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_disadv\": {\n      \"description\": \"Weight on disadvantageous inequity (being offered less than the other). Affects utility only when is_disadvantaged=1.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_fairness\": {\n      \"description\": \"Sensitivity to continuous proportional fairness: effect of proportional_deviation only on non-disadvantaged trials.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -10,\n          \"max\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"is_disadvantaged\": {\n      \"description\": \"Indicator for disadvantageous offer: 1 if splitperc_self < splitperc_opp, else 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"proportional_deviation\": {\n      \"description\": \"Proportional deviation from deserved share: (splitperc_self / 100) minus (token_self / (token_self + token_opp)), set to 0 when is_disadvantaged == 1.\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Responder's share of the pot (%).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_opp\": {\n      \"description\": \"Opponent's share of the pot (%).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Tokens collected by the responder.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Tokens collected by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts responder acceptance decisions using three strictly orthogonal psychological mechanisms, each mapped to a non-overlapping input: (1) disadvantageous inequity aversion via a binary indicator (\"is_disadvantaged\"), (2) sensitivity to continuous proportional fairness deviations (\"proportional_deviation\") only when not disadvantaged, and (3) a global acceptance bias/intercept. The mutually exclusive activation of \"is_disadvantaged\" and \"proportional_deviation\" guarantees full parameter recovery and clear interpretability, as on any trial only one (plus bias) is operative. Each parameter thus tracks dissociable psychological influences on binary acceptance, convertible via a logistic (sigmoidal) function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = accept_bias + beta_disadv * is_disadvantaged + beta_fairness * proportional_deviation\nSummary: This model predicts responder acceptance decisions using three strictly orthogonal psychological mechanisms, each mapped to a non-overlapping input: (1) disadvantageous inequity aversion via a binary indicator (\"is_disadvantaged\"), (2) sensitivity to continuous proportional fairness deviations (\"proportional_deviation\") only when not disadvantaged, and (3) a global acceptance bias/intercept. The mutually exclusive activation of \"is_disadvantaged\" and \"proportional_deviation\" guarantees full parameter recovery and clear interpretability, as on any trial only one (plus bias) is operative. Each parameter thus tracks dissociable psychological influences on binary acceptance, convertible via a logistic (sigmoidal) function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, accept_bias=0, beta_disadv=0, beta_fairness=0):\n    model_predictions = []\n    for trial in trial_data:\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n        splitperc_opp = trial.get(\"splitperc_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate is_disadvantaged\n        is_disadvantaged = 1 if splitperc_self < splitperc_opp else 0\n\n        # Calculate proportional_deviation\n        if token_self + token_opp == 0:\n            proportional_deviation = 0  # Avoid division by zero\n        else:\n            proportional_deviation = (splitperc_self / 100) - (token_self / (token_self + token_opp))\n        \n        # Set proportional_deviation to 0 when is_disadvantaged == 1\n        if is_disadvantaged == 1:\n            proportional_deviation = 0\n\n        # Calculate utility\n        U = accept_bias + beta_disadv * is_disadvantaged + beta_fairness * proportional_deviation\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.717948717948718,
  "group_accuracies": {
    "Control": 0.748062015503876,
    "Cocaine": 0.6909722222222222
  },
  "group_parameter_averages": {
    "Control": {
      "accept_bias": 9.081212699608736,
      "beta_disadv": -5.162775897451886,
      "beta_fairness": 0.9714027925825234
    },
    "Cocaine": {
      "accept_bias": 7.858693429184006,
      "beta_disadv": -8.244247976840596,
      "beta_fairness": 0.07750824625317043
    }
  },
  "fitting_results": [
    {
      "accept_bias": 3.7909028922363834,
      "beta_disadv": -10.0,
      "beta_fairness": -2.585099109933325e-05,
      "success": true,
      "log_likelihood": -0.13327056645865692,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 9.532432402818003,
      "beta_disadv": -9.714688574876298,
      "beta_fairness": -1.2759512871232759,
      "success": true,
      "log_likelihood": -22.737525550828014,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 9.824257423026097,
      "beta_disadv": -9.884819277275959,
      "beta_fairness": 3.0144303556347256,
      "success": true,
      "log_likelihood": -22.858879445876163,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 9.439606963764367,
      "beta_disadv": -10.0,
      "beta_fairness": -1.8308021695138568,
      "success": true,
      "log_likelihood": -21.631146823241647,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 9.56923312955839,
      "beta_disadv": -10.0,
      "beta_fairness": 3.7320359906673533,
      "success": true,
      "log_likelihood": -22.125999832546494,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 9.82154691284321,
      "beta_disadv": -9.390756322485453,
      "beta_fairness": -5.385432476172232,
      "success": true,
      "log_likelihood": -22.125971938539834,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": 10.0,
      "beta_fairness": 0.24704311759852865,
      "success": true,
      "log_likelihood": -0.00013633808546331346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": -9.440388741345588,
      "beta_fairness": 4.950786833065486,
      "success": true,
      "log_likelihood": -21.631067429300316,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": 10.0,
      "beta_fairness": 0.7473452429929187,
      "success": true,
      "log_likelihood": -0.00013696632343505795,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 9.258511979943256,
      "beta_disadv": -9.95168212729135,
      "beta_fairness": -2.8450115544702643,
      "success": true,
      "log_likelihood": -21.005275252470128,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 9.569219805150743,
      "beta_disadv": -10.0,
      "beta_fairness": 2.7397444304199547,
      "success": true,
      "log_likelihood": -22.125986749570025,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 6.525022059645039,
      "beta_disadv": -9.986067827951672,
      "beta_fairness": 1.6138696750633228,
      "success": true,
      "log_likelihood": -4.485713359570493,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 9.440527672857517,
      "beta_disadv": -10.0,
      "beta_fairness": -1.8513802563717225,
      "success": true,
      "log_likelihood": -21.63114453881038,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": 9.8486084098002,
      "beta_fairness": -1.6848706805333389,
      "success": true,
      "log_likelihood": -0.00013987551003653565,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": 9.050177483285683,
      "beta_fairness": -0.3322233285365536,
      "success": true,
      "log_likelihood": -0.0001365081558920226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": 10.0,
      "beta_fairness": 1.1107494736067673,
      "success": true,
      "log_likelihood": -0.00013782133306123283,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": 9.2805130742324,
      "beta_fairness": -1.4089881598794527,
      "success": true,
      "log_likelihood": -0.00013884767347778528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 9.504488155223903,
      "beta_disadv": -7.781870266105672,
      "beta_fairness": -6.025452865957871,
      "success": true,
      "log_likelihood": -14.03613892954309,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 9.403935655414815,
      "beta_disadv": -7.423455230365528,
      "beta_fairness": 1.9985209032625384,
      "success": true,
      "log_likelihood": -12.188249897035893,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": 6.8397817025422185,
      "beta_fairness": -2.826675836284241,
      "success": true,
      "log_likelihood": -0.00014805982605031384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": -9.939383829105298,
      "beta_fairness": 5.060683626159739,
      "success": true,
      "log_likelihood": -22.858873568364135,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 6.371134114340536,
      "beta_disadv": -4.648641858677301,
      "beta_fairness": 3.298774970633539,
      "success": true,
      "log_likelihood": -14.041488270310674,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 9.021912852407356,
      "beta_disadv": -9.854737173500762,
      "beta_fairness": 5.7764164918809096,
      "success": true,
      "log_likelihood": -20.243014616110564,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 9.828672698308086,
      "beta_disadv": -9.889216625148533,
      "beta_fairness": -5.985872339365391,
      "success": true,
      "log_likelihood": -22.858923013117593,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 9.642411345766225,
      "beta_disadv": -9.82468887182935,
      "beta_fairness": -1.5248992307711964,
      "success": true,
      "log_likelihood": -22.737503828578657,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 9.773177280100843,
      "beta_disadv": -9.590880359237817,
      "beta_fairness": 2.165550865068117,
      "success": true,
      "log_likelihood": -22.73748323761667,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": -9.939478361787037,
      "beta_fairness": -5.279842036764497,
      "success": true,
      "log_likelihood": -22.858876836548784,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 8.317952436638665,
      "beta_disadv": -9.629802136622134,
      "beta_fairness": 4.9436673895534335,
      "success": true,
      "log_likelihood": -17.05377619953224,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": -8.018996536201586,
      "beta_fairness": 7.688866260735776,
      "success": true,
      "log_likelihood": -12.188214525759108,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": -8.860528895690598,
      "beta_fairness": -0.23519506601892434,
      "success": true,
      "log_likelihood": -18.277457836919186,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": 10.0,
      "beta_fairness": -0.5639636638274256,
      "success": true,
      "log_likelihood": -0.00013666247666904854,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 3.7909132266593417,
      "beta_disadv": -10.0,
      "beta_fairness": 2.4577738908963982e-05,
      "success": true,
      "log_likelihood": -0.13327056647668464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 9.440424428890866,
      "beta_disadv": -10.0,
      "beta_fairness": -4.6843029852672275,
      "success": true,
      "log_likelihood": -21.63118779364508,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 9.306902637049308,
      "beta_disadv": -10.0,
      "beta_fairness": -3.2271859910548093,
      "success": true,
      "log_likelihood": -21.00526683062355,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": 10.0,
      "beta_fairness": -1.094788505033691,
      "success": true,
      "log_likelihood": -0.00013777669258081644,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 9.964692710341241,
      "beta_disadv": -9.533913555465947,
      "beta_fairness": 8.128254686699016,
      "success": true,
      "log_likelihood": -22.126003829273106,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 9.041128866129265,
      "beta_disadv": -8.348309400851322,
      "beta_fairness": 2.8394385834550815,
      "success": true,
      "log_likelihood": -21.005350247429092,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 9.817699184967035,
      "beta_disadv": -10.0,
      "beta_fairness": 3.393914399386986,
      "success": true,
      "log_likelihood": -22.73748619532318,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": -9.440372159268245,
      "beta_fairness": 5.910229113802837,
      "success": true,
      "log_likelihood": -21.63108245434736,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 9.877994179965679,
      "beta_disadv": -7.575343588155199,
      "beta_fairness": -1.3187909167617713,
      "success": true,
      "log_likelihood": -10.053147568370056,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 9.628511432245284,
      "beta_disadv": -9.323171702867445,
      "beta_fairness": 3.765741208616628,
      "success": true,
      "log_likelihood": -22.49383056590277,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 0.9889336368842023,
      "beta_disadv": -2.4930108843527172,
      "beta_fairness": 10.0,
      "success": true,
      "log_likelihood": -16.441375357471802,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": -6.5342399538328,
      "beta_fairness": 8.02588708570478,
      "success": true,
      "log_likelihood": -4.4814309087841355,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": -9.939375769501531,
      "beta_fairness": -2.6895071685780825,
      "success": true,
      "log_likelihood": -22.85884858845244,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 9.927339753286336,
      "beta_disadv": -9.621961329867936,
      "beta_fairness": 5.464767248183267,
      "success": true,
      "log_likelihood": -22.493796136499483,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": -9.166488961860727,
      "beta_fairness": 1.4267899231209673,
      "success": true,
      "log_likelihood": -20.242671663507554,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 9.903679381355925,
      "beta_disadv": -9.964246844921549,
      "beta_fairness": -8.96677650512373,
      "success": true,
      "log_likelihood": -22.85898711507642,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 9.3068780455928,
      "beta_disadv": -10.0,
      "beta_fairness": -1.0962059112282776,
      "success": true,
      "log_likelihood": -21.005242968178234,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 9.440600280100865,
      "beta_disadv": -10.0,
      "beta_fairness": -0.9175492210739784,
      "success": true,
      "log_likelihood": -21.631138859716515,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 9.939393037542104,
      "beta_disadv": -10.0,
      "beta_fairness": -1.3474923132081846,
      "success": true,
      "log_likelihood": -22.858850267134546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 9.917117907182423,
      "beta_disadv": -9.223958962244408,
      "beta_fairness": -6.1546918257934315,
      "success": true,
      "log_likelihood": -21.00517211847251,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 7.260286695804772,
      "beta_disadv": -10.0,
      "beta_fairness": -0.7376338458100352,
      "success": true,
      "log_likelihood": -7.5469716150946775,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 9.753687635901985,
      "beta_disadv": -9.81422611469963,
      "beta_fairness": 0.24974461662297462,
      "success": true,
      "log_likelihood": -22.85887748312465,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": -9.817753062307531,
      "beta_fairness": -0.9166340571496394,
      "success": true,
      "log_likelihood": -22.737442143877814,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 0.9889236587713305,
      "beta_disadv": -1.5485382054723305,
      "beta_fairness": 10.0,
      "success": true,
      "log_likelihood": -22.425676565338748,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 8.779977149566912,
      "beta_disadv": -9.76067576289414,
      "beta_fairness": 5.13686572688914,
      "success": true,
      "log_likelihood": -19.337017493161206,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 8.687930502101285,
      "beta_disadv": -10.0,
      "beta_fairness": 5.051737169817797,
      "success": true,
      "log_likelihood": -17.053501014436137,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": -8.01893055838462,
      "beta_fairness": -6.3397768666432235,
      "success": true,
      "log_likelihood": -12.188184788054977,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 6.430327115416175,
      "beta_disadv": -9.889990136097223,
      "beta_fairness": -1.837092712331697,
      "success": true,
      "log_likelihood": -4.486202220954376,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 9.509957605335744,
      "beta_disadv": -8.197898438586863,
      "beta_fairness": -5.417334789819314,
      "success": true,
      "log_likelihood": -17.053155477521443,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": -9.694618724441337,
      "beta_fairness": -6.4201029747461185,
      "success": true,
      "log_likelihood": -22.493799625329004,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 9.769814378408475,
      "beta_disadv": -9.952107919853047,
      "beta_fairness": 2.66751181191764,
      "success": true,
      "log_likelihood": -22.73748779617112,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 3.7908976088148516,
      "beta_disadv": -10.0,
      "beta_fairness": 7.571228858057125e-05,
      "success": true,
      "log_likelihood": -0.13327056645785823,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 9.539252575740637,
      "beta_disadv": -9.970014461552694,
      "beta_fairness": 4.2010629390857135,
      "success": true,
      "log_likelihood": -22.12601505197336,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 8.277306603365584,
      "beta_disadv": -10.0,
      "beta_fairness": -3.982605608494201,
      "success": true,
      "log_likelihood": -14.036712365897793,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 9.598477129756679,
      "beta_disadv": -9.537173630842293,
      "beta_fairness": 0.7891389066310514,
      "success": true,
      "log_likelihood": -22.858909679931056,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 9.4021987719205,
      "beta_disadv": -7.101686738562831,
      "beta_fairness": -2.6972479869946713,
      "success": true,
      "log_likelihood": -10.053261646823072,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 9.524772750882477,
      "beta_disadv": -7.80218050721628,
      "beta_fairness": 3.9411958939500007,
      "success": true,
      "log_likelihood": -14.036085442129544,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 9.898836476809901,
      "beta_disadv": -9.838243866005866,
      "beta_fairness": 1.8812734076479483,
      "success": true,
      "log_likelihood": -22.858858794961932,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 9.491173960284376,
      "beta_disadv": -7.189019884231986,
      "beta_fairness": -6.038002740034978,
      "success": true,
      "log_likelihood": -10.05330113139583,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 0.9889404150815927,
      "beta_disadv": -3.729780887281518,
      "beta_fairness": 10.0,
      "success": true,
      "log_likelihood": -8.339629854808974,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 7.260500561937142,
      "beta_disadv": -10.0,
      "beta_fairness": 1.948143528751144,
      "success": true,
      "log_likelihood": -7.5470356711253,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 9.939549158874694,
      "beta_disadv": -10.0,
      "beta_fairness": 7.276950661207792,
      "success": true,
      "log_likelihood": -22.858927989906835,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": -8.860565508223356,
      "beta_fairness": 2.7510009503990385,
      "success": true,
      "log_likelihood": -18.277467474575257,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 0.9889353412832782,
      "beta_disadv": -1.049560126593396,
      "beta_fairness": -10.0,
      "success": true,
      "log_likelihood": -23.653481150165653,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": -9.30684133076464,
      "beta_fairness": 4.557806709594794,
      "success": true,
      "log_likelihood": -21.005131223173965,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 9.61263028797228,
      "beta_disadv": -6.871894930279495,
      "beta_fairness": 3.81937604620719,
      "success": true,
      "log_likelihood": -7.545080484426716,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": -0.6931482425264557,
      "beta_disadv": -2.7725822561685405,
      "beta_fairness": 3.990068076128593e-05,
      "success": true,
      "log_likelihood": -6.390743136511413,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": -9.69462727675625,
      "beta_fairness": -0.6163780104666076,
      "success": true,
      "log_likelihood": -22.493742979237418,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 3.7908969674904327,
      "beta_disadv": -10.0,
      "beta_fairness": 8.692885157190848e-06,
      "success": true,
      "log_likelihood": -0.13327056645424779,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 9.491800787857533,
      "beta_disadv": -9.552192285479238,
      "beta_fairness": -0.8957510586955616,
      "success": true,
      "log_likelihood": -22.85893142127842,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 9.835346686571757,
      "beta_disadv": -7.532788769300493,
      "beta_fairness": 5.784926344830048,
      "success": true,
      "log_likelihood": -10.053205505747375,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 0.988945991841854,
      "beta_disadv": -3.729798982918865,
      "beta_fairness": -10.0,
      "success": true,
      "log_likelihood": -8.339629854992557,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 9.817054755560145,
      "beta_disadv": -9.999359371111263,
      "beta_fairness": 1.4529655066361307,
      "success": true,
      "log_likelihood": -22.737471613357528,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 0.9889398128334826,
      "beta_disadv": -0.5581594816307704,
      "beta_fairness": 10.0,
      "success": true,
      "log_likelihood": -22.920540436912837,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 6.39528502996257,
      "beta_disadv": -9.853470055053254,
      "beta_fairness": 1.8575836235889203,
      "success": true,
      "log_likelihood": -4.486393141365202,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 9.957084615157907,
      "beta_disadv": -9.263936488027813,
      "beta_fairness": 1.1278226975549346,
      "success": true,
      "log_likelihood": -21.00511139478004,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": -0.6931894453058739,
      "beta_disadv": -0.6189938128949153,
      "beta_fairness": -0.0004542365974159728,
      "success": true,
      "log_likelihood": -18.962410996028648,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 10.0,
      "beta_disadv": -7.259156039961863,
      "beta_fairness": -9.73456448897016,
      "success": true,
      "log_likelihood": -7.5451361240686765,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 9.694645619044117,
      "beta_disadv": -10.0,
      "beta_fairness": -4.429209280175826,
      "success": true,
      "log_likelihood": -22.49382626049962,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "accept_bias": 9.714237233253689,
      "beta_disadv": -9.021105406358075,
      "beta_fairness": 3.5686194035963235,
      "success": true,
      "log_likelihood": -21.005170800999267,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "accept_bias": {
        "r": 0.7497903461475761,
        "p": 2.819505997421398e-19
      },
      "beta_disadv": {
        "r": 0.8593220436274244,
        "p": 2.6976817536457035e-30
      },
      "beta_fairness": {
        "r": 0.38185834820607184,
        "p": 8.847133724935994e-05
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 41.761423631202625,
  "bic_Control": 39.04416906747867,
  "bic_Cocaine": 44.19563084453868,
  "bic_results": {
    "average_bic": 41.761423631202625,
    "individual_bics": [
      11.017097948285645,
      56.22560791702436,
      56.46831570712065,
      54.01285046185163,
      55.00255648046132,
      55.002500692447995,
      10.750829491539257,
      54.01269167396896,
      10.7508307480152,
      52.76110732030858,
      55.00253031450838,
      19.721983534509317,
      54.01284589298909,
      10.750836566388404,
      10.750829831680115,
      10.750832458034454,
      10.750834510715286,
      38.82283467445451,
      35.12705660944012,
      10.750852935020431,
      56.468303952096605,
      38.83353335598968,
      51.236586047589455,
      56.46840284160352,
      56.22556447252565,
      56.22552329060167,
      56.4683104884659,
      44.858109214432815,
      35.12698586688654,
      47.30547248920671,
      10.75083014032167,
      11.0170979483217,
      54.01293240265849,
      52.761090476615436,
      10.750832368753493,
      55.002564473914546,
      52.76125731022651,
      56.225529206014684,
      54.012721724063056,
      30.856851952108443,
      55.738217947173865,
      43.63330753031194,
      19.7134186329366,
      56.468253992273205,
      55.738149088367294,
      51.23590014238344,
      56.468531045521175,
      52.7610427517248,
      54.01283453480136,
      56.468257349637426,
      52.76090105231336,
      25.844500045557687,
      56.46831178161763,
      56.225441103123956,
      55.60190994604582,
      49.42459180169074,
      44.8575588442406,
      35.126926391478285,
      19.722961257277085,
      44.85686777041121,
      55.738156066026335,
      56.225532407710574,
      11.017097948284047,
      55.00258691931505,
      38.82398154716392,
      56.468376175230446,
      30.857080109014476,
      38.82272769962742,
      56.46827440529219,
      30.85715907815999,
      27.42981652498628,
      25.84462815761893,
      56.468412795182005,
      47.30549176451885,
      58.057519115699634,
      52.760819261716264,
      25.840717784221763,
      23.532043088391156,
      55.73804277384316,
      11.017097948276826,
      56.46841965792517,
      30.85696782686308,
      27.429816525353445,
      56.22550004208338,
      56.591637689194,
      19.723343098098734,
      52.760779604928416,
      48.67537880742563,
      25.840829063505684,
      55.738209336367575,
      52.76089841736686
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        11.017097948285645,
        56.22560791702436,
        56.46831570712065,
        54.01285046185163,
        55.00255648046132,
        55.002500692447995,
        10.750829491539257,
        54.01269167396896,
        10.7508307480152,
        52.76110732030858,
        55.00253031450838,
        19.721983534509317,
        54.01284589298909,
        10.750836566388404,
        10.750829831680115,
        10.750832458034454,
        10.750834510715286,
        38.82283467445451,
        35.12705660944012,
        10.750852935020431,
        56.468303952096605,
        38.83353335598968,
        51.236586047589455,
        56.46840284160352,
        56.22556447252565,
        56.22552329060167,
        56.4683104884659,
        44.858109214432815,
        35.12698586688654,
        47.30547248920671,
        10.75083014032167,
        11.0170979483217,
        54.01293240265849,
        52.761090476615436,
        10.750832368753493,
        55.002564473914546,
        52.76125731022651,
        56.225529206014684,
        54.012721724063056,
        30.856851952108443,
        55.738217947173865,
        43.63330753031194,
        19.7134186329366
      ],
      "Cocaine": [
        56.468253992273205,
        55.738149088367294,
        51.23590014238344,
        56.468531045521175,
        52.7610427517248,
        54.01283453480136,
        56.468257349637426,
        52.76090105231336,
        25.844500045557687,
        56.46831178161763,
        56.225441103123956,
        55.60190994604582,
        49.42459180169074,
        44.8575588442406,
        35.126926391478285,
        19.722961257277085,
        44.85686777041121,
        55.738156066026335,
        56.225532407710574,
        11.017097948284047,
        55.00258691931505,
        38.82398154716392,
        56.468376175230446,
        30.857080109014476,
        38.82272769962742,
        56.46827440529219,
        30.85715907815999,
        27.42981652498628,
        25.84462815761893,
        56.468412795182005,
        47.30549176451885,
        58.057519115699634,
        52.760819261716264,
        25.840717784221763,
        23.532043088391156,
        55.73804277384316,
        11.017097948276826,
        56.46841965792517,
        30.85696782686308,
        27.429816525353445,
        56.22550004208338,
        56.591637689194,
        19.723343098098734,
        52.760779604928416,
        48.67537880742563,
        25.840829063505684,
        55.738209336367575,
        52.76089841736686
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- accept_bias: r = 0.750\n- beta_disadv: r = 0.859\n- beta_fairness: r = 0.382",
  "previous_models": [
    "Specification: U = accept_bias + beta_disadv * is_disadvantaged + beta_fairness * proportional_deviation\nSummary: This model predicts responder acceptance decisions using three strictly orthogonal psychological mechanisms, each mapped to a non-overlapping input: (1) disadvantageous inequity aversion via a binary indicator (\"is_disadvantaged\"), (2) sensitivity to continuous proportional fairness deviations (\"proportional_deviation\") only when not disadvantaged, and (3) a global acceptance bias/intercept. The mutually exclusive activation of \"is_disadvantaged\" and \"proportional_deviation\" guarantees full parameter recovery and clear interpretability, as on any trial only one (plus bias) is operative. Each parameter thus tracks dissociable psychological influences on binary acceptance, convertible via a logistic (sigmoidal) function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 41.761423631202625\nOverall Accuracy: 0.7179\nGroup Accuracies:\n- Control: 0.7481\n- Cocaine: 0.6910\n\nParameter Recovery:\n- accept_bias: r = 0.750\n- beta_disadv: r = 0.859\n- beta_fairness: r = 0.382"
  ]
}