{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nReviewing the results, it's clear the previous model had suboptimal parameter recovery for alpha_self (r = 0.43) and moderate recovery for bias (r = 0.65). BIC and accuracy are reasonable but there's clear room for improvement, especially in interpretability and parameter identifiability. The most likely issue is either high parameter covariance or insufficient informativeness of each component. The model was a simple weighted combination of self-gain and disadvantageous inequity (relative to contribution), with a bias.\n\nKey possible limitations:\n- The monetary gain and inequity terms may not be normalized, possibly leading to scale mismatch.\n- Only disadvantageous inequity is included; advantageous inequity (where the responder gets more than is \"fair\") is ignored, which could add useful variance for parameter estimation.\n- Lack of scaling or normalization can introduce unintended confounding between parameter effects.\n- The model ignores non-linearities and threshold effects in fairness perceptions (e.g., strong aversion to low % offers regardless of contribution).\n- Other features (such as combined_earning or offer size in proportional/fairness context) could meaningfully modulate behavior.\n\nTo encourage out-of-the-box improvements, the instructions should explicitly advise:\n- Consider how to mathematically separate and normalize effects (e.g., divide all terms by combined_earning for interpretable scales).\n- Add an advantageous inequity aversion term if justified, ideally with a minimal parameter expansion (possibly constraining it or relating it to the main inequity).\n- Explore non-linear or threshold effects if likely (using, e.g., a sigmoidal or piecewise penalty for unfairness).\n- If appropriate, test parameterizations that produce \"tunable\" nonlinearities (e.g., softmax/fairness sensitivity terms).\n- Make sure parameters have as little redundant explanatory power as possible, perhaps via explicit standardization or normalization of raw variables in the model.\n- Always briefly justify the necessity of every learnable parameter and defend its identifiability.\n- Encourage creativity: e.g., could combine gain-above-minimum with fairness, or implement a model with a fairness threshold parameter.\n\nThe \"step by step\" modeling should include explicit consideration of parameter recoverability: for each parameter, ask how variance in its true value can be uniquely mapped onto observed responses.\n\nThe model needs to stick to minimal, non-covariant parameters and must clearly relate each parameter to an observable, separable behavioral effect.\n\n</think>\n\nUPDATED INSTRUCTIONS:\n\nBe highly critical and creative in your model design to maximize predictive accuracy, parameter recovery, and overall model interpretability. In addition to accuracy and BIC, strive for independent, identifiable parameters with minimal covariance. Avoid redundant parameters and ensure every learnable parameter maps uniquely to a separable behavioral construct.\n\nFirst, reason step by step about:\n* The psychological mechanisms (e.g., self-interest, fairness, inequity aversion\u2014including both disadvantageous and advantageous forms, sensitivity to absolute amounts, proportion effects, and thresholds);\n* How these mechanisms might mathematically interact (e.g., via additive, multiplicative, or non-linear forms);\n* How to parameterize these mechanisms in a way that minimizes parameter covariance and maximizes identifiability (e.g., normalization, explicit thresholds, or constrained relationships between parameters);\n* Whether you can improve the model by including both disadvantageous and advantageous inequity, non-linear sensitivity to unfairness, or normalization of terms (e.g., scaling by combined_earning);\n* How each parameter you propose will map distinctly to observable data variance (explicitly ask yourself: \"how would this parameter be recoverable in real behavior?\");\n* Ways to introduce creative or non-standard approaches (such as fairness perception thresholds, context-dependent biases, or nonlinear fairness functions).\n\nFor every learnable parameter you include, briefly justify its necessity and how it improves model recovery or interpretability. Always prefer the minimal number of parameters consistent with good psychological modeling.\n\nAfter this reasoning, provide your model as before, but focus on avoiding excessive parameter entanglement, maximizing interpretability, and grounding every parameter\u2019s interpretability in observable behavior.\n\nPush yourself to examine both standard and out-of-the-box ways to enhance identifiability or predictive performance.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nReviewing the results, it's clear the previous model had suboptimal parameter recovery for alpha_self (r = 0.43) and moderate recovery for bias (r = 0.65). BIC and accuracy are reasonable but there's clear room for improvement, especially in interpretability and parameter identifiability. The most likely issue is either high parameter covariance or insufficient informativeness of each component. The model was a simple weighted combination of self-gain and disadvantageous inequity (relative to contribution), with a bias.\n\nKey possible limitations:\n- The monetary gain and inequity terms may not be normalized, possibly leading to scale mismatch.\n- Only disadvantageous inequity is included; advantageous inequity (where the responder gets more than is \"fair\") is ignored, which could add useful variance for parameter estimation.\n- Lack of scaling or normalization can introduce unintended confounding between parameter effects.\n- The model ignores non-linearities and threshold effects in fairness perceptions (e.g., strong aversion to low % offers regardless of contribution).\n- Other features (such as combined_earning or offer size in proportional/fairness context) could meaningfully modulate behavior.\n\nTo encourage out-of-the-box improvements, the instructions should explicitly advise:\n- Consider how to mathematically separate and normalize effects (e.g., divide all terms by combined_earning for interpretable scales).\n- Add an advantageous inequity aversion term if justified, ideally with a minimal parameter expansion (possibly constraining it or relating it to the main inequity).\n- Explore non-linear or threshold effects if likely (using, e.g., a sigmoidal or piecewise penalty for unfairness).\n- If appropriate, test parameterizations that produce \"tunable\" nonlinearities (e.g., softmax/fairness sensitivity terms).\n- Make sure parameters have as little redundant explanatory power as possible, perhaps via explicit standardization or normalization of raw variables in the model.\n- Always briefly justify the necessity of every learnable parameter and defend its identifiability.\n- Encourage creativity: e.g., could combine gain-above-minimum with fairness, or implement a model with a fairness threshold parameter.\n\nThe \"step by step\" modeling should include explicit consideration of parameter recoverability: for each parameter, ask how variance in its true value can be uniquely mapped onto observed responses.\n\nThe model needs to stick to minimal, non-covariant parameters and must clearly relate each parameter to an observable, separable behavioral effect.\n\n</think>\n\nUPDATED INSTRUCTIONS:\n\nBe highly critical and creative in your model design to maximize predictive accuracy, parameter recovery, and overall model interpretability. In addition to accuracy and BIC, strive for independent, identifiable parameters with minimal covariance. Avoid redundant parameters and ensure every learnable parameter maps uniquely to a separable behavioral construct.\n\nFirst, reason step by step about:\n* The psychological mechanisms (e.g., self-interest, fairness, inequity aversion\u2014including both disadvantageous and advantageous forms, sensitivity to absolute amounts, proportion effects, and thresholds);\n* How these mechanisms might mathematically interact (e.g., via additive, multiplicative, or non-linear forms);\n* How to parameterize these mechanisms in a way that minimizes parameter covariance and maximizes identifiability (e.g., normalization, explicit thresholds, or constrained relationships between parameters);\n* Whether you can improve the model by including both disadvantageous and advantageous inequity, non-linear sensitivity to unfairness, or normalization of terms (e.g., scaling by combined_earning);\n* How each parameter you propose will map distinctly to observable data variance (explicitly ask yourself: \"how would this parameter be recoverable in real behavior?\");\n* Ways to introduce creative or non-standard approaches (such as fairness perception thresholds, context-dependent biases, or nonlinear fairness functions).\n\nFor every learnable parameter you include, briefly justify its necessity and how it improves model recovery or interpretability. Always prefer the minimal number of parameters consistent with good psychological modeling.\n\nAfter this reasoning, provide your model as before, but focus on avoiding excessive parameter entanglement, maximizing interpretability, and grounding every parameter\u2019s interpretability in observable behavior.\n\nPush yourself to examine both standard and out-of-the-box ways to enhance identifiability or predictive performance.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let me reason step by step to maximize interpretability, parameter recovery, and predictive power\u2014minimizing parameter covariance and redundancies, and ensuring every parameter carves out a distinct behavioral mechanism.\n\n## Step 1: Psychological Mechanisms and Data Structure\n\n### Main known drivers in responder behavior:\n- **Self-interest (own gain):** Tendency to accept high personal monetary returns.\n- **Inequity aversion:** Dislike for unfair splits; can be _disadvantageous_ (you get less than fair for your contribution) or _advantageous_ (you get more than your fair share).\n- **Fairness relative to contribution:** \u201cFair\u201d is not always a 50\u201350 split, but rather proportional to contribution: `split_self* / combined_earning = token_self / (token_self + token_opp)`.\n- **Threshold/Non-linearity:** People may sharply change responses below a fairness threshold.\n- **Scale normalization:** Because combined_earning varies across trials, all monetary variables must be normalized\u2014e.g., percentages or contribution ratios\u2014to make parameter interpretation consistent and recovery possible.\n- **Context-insensitive bias:** Some individuals may just be more likely to accept or reject, regardless of other factors.\n\n## Step 2: Mathematical Forms and Parameterization\n\n- **Normalize all terms by combined_earning.** Use _proportions_, e.g.:\n  - `offer_prop = split_self / combined_earning` (actual share offered as percentage)\n  - `contrib_prop = token_self / (token_self + token_opp)` (\u201cfair share\u201d based on contribution)\n- **Disadvantageous inequity:** penalty for `contrib_prop > offer_prop` (i.e., offered less than what would be fair to one\u2019s own contribution)\n- **Advantageous inequity:** penalty for `offer_prop > contrib_prop` (i.e., offered more than one\u2019s share by contribution)\n  - _Justification for two separate parameters:_ These reflect different psychological constructs; some people dislike only being under-offered, while others are also averse to guilt/favoritism.\n- **Nonlinear penalty for unfairness:** Instead of linear, use absolute value or a (possibly softened) maxima function: `max(contrib_prop - offer_prop, 0)` and `max(offer_prop - contrib_prop, 0)`. This reduces parameter collinearity, keeps the mapping monotonic (easier recovery), and better reflects J-shaped inequity effects.\n- **Bias:** Additive, independent, interpretable as global accept/reject tendency. Essential for recovery.\n\n### Parameter Identifiability Considerations:\n\n- Using normalized/perceptual quantities (proportions) ensures parameter values are on comparable meaningful scales, increasing independence.\n- Splitting advantageous and disadvantageous inequity is justified if both are present, with separate weights to estimate individual differences.\n- Limiting interaction/overlap of self-gain and fairness terms (by normalization) reduces covariance between them.\n- All parameters must be allowed sufficient dynamic range but not overlap in meaning.\n\n### Optional further creativity/constraints:\n\n- Could constrain advantageous and disadvantageous inequity aversion to be non-negative (no \u201cdesire\u201d for more unfairness, unless empirically observed).\n- Could include a soft-threshold for fairness sensitivity (e.g., using a logistic or smoothly saturating function) but only if justified by highly non-linear human behavior.\n\nGiven parameter recovery constraints and interpretability, the minimal \u201csensible\u201d model is:\n\n`utility = bias + alpha_self * offer_prop + alpha_dis * max(contrib_prop - offer_prop, 0) + alpha_adv * max(offer_prop - contrib_prop, 0)`\n\nEach term:\n- `bias`: context-insensitive accept/reject tendency\n- `alpha_self`: value placed on self-gain\n- `alpha_dis`: disadvantageous inequity aversion\n- `alpha_adv`: advantageous inequity aversion (typically smaller, can be allowed negative if some participants like being favored, but for recoverability, you can bound it tightly)\n\nAll parameters are independently and separately recoverable: shifting each changes a unique pattern in accept probability across different splits/contributions. The max(\u2026, 0) nonlinearity ensures that only disadvantageous or advantageous inequity is penalized when present.\n\n## Step 3: Final Model Specification\n\n### Formula\n\n<MODEL>\nutility = bias \\\n        + alpha_self * (split_self / combined_earning) \\\n        + alpha_dis * max((token_self / (token_self + token_opp)) - (split_self / combined_earning), 0) \\\n        + alpha_adv * max((split_self / combined_earning) - (token_self / (token_self + token_opp)), 0)\n</MODEL>\n\n### Variable JSON\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Predicted utility of accepting the offer; log-odds-transformed via logistic to estimate acceptance probability\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Global tendency to accept or reject offers, regardless of fairness or gain\",\n      \"range\": {\n        \"min\": -5.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -5.0,\n          \"high\": 5.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_self\": {\n      \"description\": \"Weight assigned to self-gain (proportion of pot given to participant)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_dis\": {\n      \"description\": \"Aversion to disadvantageous inequity (being offered less than the fair share given contribution)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_adv\": {\n      \"description\": \"Aversion (or preference if negative) to advantageous inequity (being offered more than the fair share according to contribution)\",\n      \"range\": {\n        \"min\": -5.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -5.0,\n          \"high\": 5.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Share of pot (in \u00a3) offered to participant by the proposer\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money available to split in the trial (\u00a3)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant (contribution to group)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent (opponent's contribution to group)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA normalized, multipart utility model of responder behavior. The model predicts accept/reject decisions based on self-gain (as a percentage of the total pot), aversion to disadvantageous and advantageous inequity (relative to each participant\u2019s share of the group\u2019s total contribution), and an individual-specific response bias. Each learnable parameter uniquely maps onto a key psychological mechanism\u2014maximizing identifiability and minimizing covariance\u2014while all terms are normalized to eliminate scaling confounds due to trial-by-trial pot size differences.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['bias', 'alpha_self', 'alpha_dis', 'alpha_adv']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                utility = bias \\\n        + alpha_self * (split_self / combined_earning) \\\n        + alpha_dis * max((token_self / (token_self + token_opp)) - (split_self / combined_earning), 0) \\\n        + alpha_adv * max((split_self / combined_earning) - (token_self / (token_self + token_opp)), 0)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Predicted utility of accepting the offer; log-odds-transformed via logistic to estimate acceptance probability\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Global tendency to accept or reject offers, regardless of fairness or gain\",\n      \"range\": {\n        \"min\": -5.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -5.0,\n          \"high\": 5.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_self\": {\n      \"description\": \"Weight assigned to self-gain (proportion of pot given to participant)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_dis\": {\n      \"description\": \"Aversion to disadvantageous inequity (being offered less than the fair share given contribution)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_adv\": {\n      \"description\": \"Aversion (or preference if negative) to advantageous inequity (being offered more than the fair share according to contribution)\",\n      \"range\": {\n        \"min\": -5.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -5.0,\n          \"high\": 5.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Share of pot (in \\u00a3) offered to participant by the proposer\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money available to split in the trial (\\u00a3)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant (contribution to group)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent (opponent's contribution to group)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, bias=0, alpha_self=1, alpha_dis=1, alpha_adv=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)  # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate proportions and avoid division by zero\n        offer_prop = split_self / combined_earning if combined_earning > 0 else 0\n        total_tokens = token_self + token_opp\n        contrib_prop = token_self / total_tokens if total_tokens > 0 else 0\n\n        # Calculate inequity terms\n        disadvantageous_inequity = max(contrib_prop - offer_prop, 0)\n        advantageous_inequity = max(offer_prop - contrib_prop, 0)\n\n        # Calculate utility\n        utility = bias + alpha_self * offer_prop + alpha_dis * disadvantageous_inequity + alpha_adv * advantageous_inequity\n        model_predictions.append(utility)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 6, \"token_self\": 6, \"combined_earning\": 10, \"split_opp\": 5.0, \"split_self\": 5.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 5.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 5.0}, {\"ID\": 1, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 6, \"token_self\": 6, \"combined_earning\": 10, \"split_opp\": 8.0, \"split_self\": 2.0, \"splitperc_opp\": 80, \"splitperc_self\": 20, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 20.0, \"proposed_amount\": 2.0}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 6, \"token_self\": 6, \"combined_earning\": 10, \"split_opp\": 2.0, \"split_self\": 8.0, \"splitperc_opp\": 20, \"splitperc_self\": 80, \"accept\": 1.0, \"accepted_amount\": 8.0, \"accepted_perc\": 80.0, \"proposed_perc\": 80.0, \"proposed_amount\": 8.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744717905.161946
    }
  ],
  "learnable_parameters": {
    "bias": {
      "description": "Global tendency to accept or reject offers, regardless of fairness or gain",
      "range": {
        "min": -5.0,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -5.0,
          "high": 5.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "alpha_self": {
      "description": "Weight assigned to self-gain (proportion of pot given to participant)",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "alpha_dis": {
      "description": "Aversion to disadvantageous inequity (being offered less than the fair share given contribution)",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "alpha_adv": {
      "description": "Aversion (or preference if negative) to advantageous inequity (being offered more than the fair share according to contribution)",
      "range": {
        "min": -5.0,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -5.0,
          "high": 5.0
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "utility = bias \\\n        + alpha_self * (split_self / combined_earning) \\\n        + alpha_dis * max((token_self / (token_self + token_opp)) - (split_self / combined_earning), 0) \\\n        + alpha_adv * max((split_self / combined_earning) - (token_self / (token_self + token_opp)), 0)",
  "variable_descriptions": {
    "utility": {
      "description": "Predicted utility of accepting the offer; log-odds-transformed via logistic to estimate acceptance probability",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "bias": {
      "description": "Global tendency to accept or reject offers, regardless of fairness or gain",
      "range": {
        "min": -5.0,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -5.0,
          "high": 5.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "alpha_self": {
      "description": "Weight assigned to self-gain (proportion of pot given to participant)",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "alpha_dis": {
      "description": "Aversion to disadvantageous inequity (being offered less than the fair share given contribution)",
      "range": {
        "min": 0.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "alpha_adv": {
      "description": "Aversion (or preference if negative) to advantageous inequity (being offered more than the fair share according to contribution)",
      "range": {
        "min": -5.0,
        "max": 5.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -5.0,
          "high": 5.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Share of pot (in \u00a3) offered to participant by the proposer",
      "range": {
        "min": 0.0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total money available to split in the trial (\u00a3)",
      "range": {
        "min": 0.0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by participant (contribution to group)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by opponent (opponent's contribution to group)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A normalized, multipart utility model of responder behavior. The model predicts accept/reject decisions based on self-gain (as a percentage of the total pot), aversion to disadvantageous and advantageous inequity (relative to each participant\u2019s share of the group\u2019s total contribution), and an individual-specific response bias. Each learnable parameter uniquely maps onto a key psychological mechanism\u2014maximizing identifiability and minimizing covariance\u2014while all terms are normalized to eliminate scaling confounds due to trial-by-trial pot size differences.",
  "target_variable": "accept",
  "full_reasoning": "Let me reason step by step to maximize interpretability, parameter recovery, and predictive power\u2014minimizing parameter covariance and redundancies, and ensuring every parameter carves out a distinct behavioral mechanism.\n\n## Step 1: Psychological Mechanisms and Data Structure\n\n### Main known drivers in responder behavior:\n- **Self-interest (own gain):** Tendency to accept high personal monetary returns.\n- **Inequity aversion:** Dislike for unfair splits; can be _disadvantageous_ (you get less than fair for your contribution) or _advantageous_ (you get more than your fair share).\n- **Fairness relative to contribution:** \u201cFair\u201d is not always a 50\u201350 split, but rather proportional to contribution: `split_self* / combined_earning = token_self / (token_self + token_opp)`.\n- **Threshold/Non-linearity:** People may sharply change responses below a fairness threshold.\n- **Scale normalization:** Because combined_earning varies across trials, all monetary variables must be normalized\u2014e.g., percentages or contribution ratios\u2014to make parameter interpretation consistent and recovery possible.\n- **Context-insensitive bias:** Some individuals may just be more likely to accept or reject, regardless of other factors.\n\n## Step 2: Mathematical Forms and Parameterization\n\n- **Normalize all terms by combined_earning.** Use _proportions_, e.g.:\n  - `offer_prop = split_self / combined_earning` (actual share offered as percentage)\n  - `contrib_prop = token_self / (token_self + token_opp)` (\u201cfair share\u201d based on contribution)\n- **Disadvantageous inequity:** penalty for `contrib_prop > offer_prop` (i.e., offered less than what would be fair to one\u2019s own contribution)\n- **Advantageous inequity:** penalty for `offer_prop > contrib_prop` (i.e., offered more than one\u2019s share by contribution)\n  - _Justification for two separate parameters:_ These reflect different psychological constructs; some people dislike only being under-offered, while others are also averse to guilt/favoritism.\n- **Nonlinear penalty for unfairness:** Instead of linear, use absolute value or a (possibly softened) maxima function: `max(contrib_prop - offer_prop, 0)` and `max(offer_prop - contrib_prop, 0)`. This reduces parameter collinearity, keeps the mapping monotonic (easier recovery), and better reflects J-shaped inequity effects.\n- **Bias:** Additive, independent, interpretable as global accept/reject tendency. Essential for recovery.\n\n### Parameter Identifiability Considerations:\n\n- Using normalized/perceptual quantities (proportions) ensures parameter values are on comparable meaningful scales, increasing independence.\n- Splitting advantageous and disadvantageous inequity is justified if both are present, with separate weights to estimate individual differences.\n- Limiting interaction/overlap of self-gain and fairness terms (by normalization) reduces covariance between them.\n- All parameters must be allowed sufficient dynamic range but not overlap in meaning.\n\n### Optional further creativity/constraints:\n\n- Could constrain advantageous and disadvantageous inequity aversion to be non-negative (no \u201cdesire\u201d for more unfairness, unless empirically observed).\n- Could include a soft-threshold for fairness sensitivity (e.g., using a logistic or smoothly saturating function) but only if justified by highly non-linear human behavior.\n\nGiven parameter recovery constraints and interpretability, the minimal \u201csensible\u201d model is:\n\n`utility = bias + alpha_self * offer_prop + alpha_dis * max(contrib_prop - offer_prop, 0) + alpha_adv * max(offer_prop - contrib_prop, 0)`\n\nEach term:\n- `bias`: context-insensitive accept/reject tendency\n- `alpha_self`: value placed on self-gain\n- `alpha_dis`: disadvantageous inequity aversion\n- `alpha_adv`: advantageous inequity aversion (typically smaller, can be allowed negative if some participants like being favored, but for recoverability, you can bound it tightly)\n\nAll parameters are independently and separately recoverable: shifting each changes a unique pattern in accept probability across different splits/contributions. The max(\u2026, 0) nonlinearity ensures that only disadvantageous or advantageous inequity is penalized when present.\n\n## Step 3: Final Model Specification\n\n### Formula\n\n<MODEL>\nutility = bias \\\n        + alpha_self * (split_self / combined_earning) \\\n        + alpha_dis * max((token_self / (token_self + token_opp)) - (split_self / combined_earning), 0) \\\n        + alpha_adv * max((split_self / combined_earning) - (token_self / (token_self + token_opp)), 0)\n</MODEL>\n\n### Variable JSON\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Predicted utility of accepting the offer; log-odds-transformed via logistic to estimate acceptance probability\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Global tendency to accept or reject offers, regardless of fairness or gain\",\n      \"range\": {\n        \"min\": -5.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -5.0,\n          \"high\": 5.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_self\": {\n      \"description\": \"Weight assigned to self-gain (proportion of pot given to participant)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_dis\": {\n      \"description\": \"Aversion to disadvantageous inequity (being offered less than the fair share given contribution)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_adv\": {\n      \"description\": \"Aversion (or preference if negative) to advantageous inequity (being offered more than the fair share according to contribution)\",\n      \"range\": {\n        \"min\": -5.0,\n        \"max\": 5.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -5.0,\n          \"high\": 5.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Share of pot (in \u00a3) offered to participant by the proposer\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money available to split in the trial (\u00a3)\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant (contribution to group)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent (opponent's contribution to group)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA normalized, multipart utility model of responder behavior. The model predicts accept/reject decisions based on self-gain (as a percentage of the total pot), aversion to disadvantageous and advantageous inequity (relative to each participant\u2019s share of the group\u2019s total contribution), and an individual-specific response bias. Each learnable parameter uniquely maps onto a key psychological mechanism\u2014maximizing identifiability and minimizing covariance\u2014while all terms are normalized to eliminate scaling confounds due to trial-by-trial pot size differences.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: utility = bias \\\n        + alpha_self * (split_self / combined_earning) \\\n        + alpha_dis * max((token_self / (token_self + token_opp)) - (split_self / combined_earning), 0) \\\n        + alpha_adv * max((split_self / combined_earning) - (token_self / (token_self + token_opp)), 0)\nSummary: A normalized, multipart utility model of responder behavior. The model predicts accept/reject decisions based on self-gain (as a percentage of the total pot), aversion to disadvantageous and advantageous inequity (relative to each participant\u2019s share of the group\u2019s total contribution), and an individual-specific response bias. Each learnable parameter uniquely maps onto a key psychological mechanism\u2014maximizing identifiability and minimizing covariance\u2014while all terms are normalized to eliminate scaling confounds due to trial-by-trial pot size differences.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, bias=0, alpha_self=1, alpha_dis=1, alpha_adv=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 1)  # Avoid division by zero\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate proportions and avoid division by zero\n        offer_prop = split_self / combined_earning if combined_earning > 0 else 0\n        total_tokens = token_self + token_opp\n        contrib_prop = token_self / total_tokens if total_tokens > 0 else 0\n\n        # Calculate inequity terms\n        disadvantageous_inequity = max(contrib_prop - offer_prop, 0)\n        advantageous_inequity = max(offer_prop - contrib_prop, 0)\n\n        # Calculate utility\n        utility = bias + alpha_self * offer_prop + alpha_dis * disadvantageous_inequity + alpha_adv * advantageous_inequity\n        model_predictions.append(utility)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7512210012210012,
  "fitting_results": [
    {
      "bias": -5.0,
      "alpha_self": 8.454747337473835,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -5.927419204085076,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -3.0171609512737465,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -18.718375938846716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.878700981231918,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -19.166324451828814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -3.4366484886962105,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -17.04066531227062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -3.295350646212666,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -20.406486459480774,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.310753585849975,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -15.557228673454384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": 5.0,
      "alpha_self": 10.0,
      "alpha_dis": 10.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -0.002506371092568098,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.160730934060627,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -15.793371622603592,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": 5.0,
      "alpha_self": 10.0,
      "alpha_dis": 10.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -0.002506371092568099,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -3.580540382429328,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -18.032325440686247,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -3.2953521131208214,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -16.90648646034295,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -5.0,
      "alpha_self": 9.181647940782456,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -7.838257162471426,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -3.436649488085033,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -17.040665312372116,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": 5.0,
      "alpha_self": 10.0,
      "alpha_dis": 10.0,
      "alpha_adv": 4.536981809795467,
      "success": true,
      "log_likelihood": -0.0025107258343783617,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": 5.0,
      "alpha_self": 10.0,
      "alpha_dis": 10.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -0.0025063710925680984,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": 5.0,
      "alpha_self": 10.0,
      "alpha_dis": 10.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -0.002506371092568099,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": 5.0,
      "alpha_self": 10.0,
      "alpha_dis": 10.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -0.0025063710925680976,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -0.8258342624405149,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -8.66514913482043,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -0.5383626318967558,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 3.919545295315311,
      "success": true,
      "log_likelihood": -8.854411928140227,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": 5.0,
      "alpha_self": 10.0,
      "alpha_dis": 10.0,
      "alpha_adv": 4.7727494584657055,
      "success": true,
      "log_likelihood": -0.0025084824641091546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.73964719754302,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -18.975580231292003,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -0.8258435146849548,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -10.165149134160304,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -3.727990587223295,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -14.378400110965766,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.878701032429675,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -17.166324452288766,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.871216942450674,
      "alpha_self": 9.511310184882113,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -21.211812844715073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.599213400927783,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -18.145159501676577,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.7396472098927056,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -14.47558023232259,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -4.203946551343685,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -14.495816607074747,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -0.5391556288685846,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -10.351785502523821,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -1.4881690135164565,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -16.14008114790824,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": 5.0,
      "alpha_self": 10.0,
      "alpha_dis": 10.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -0.0025063710925680993,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -5.0,
      "alpha_self": 8.454743613681902,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -5.927419204082129,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -3.436648468754686,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -16.040665312577374,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -3.5805403835698897,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -16.03232544123779,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": 5.0,
      "alpha_self": 10.0,
      "alpha_dis": 10.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -0.0025063710925680984,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.3107505738513745,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -14.557228673697441,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.0052317858429847,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -14.376868668938245,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -3.0171608868912334,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -19.718375938609746,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.1607314194293292,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -18.793371621670723,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -0.18800173992356523,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -8.222256755119076,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.456559034122751,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -18.673267847313653,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -4.567141391701643,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -14.732997154459719,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": 3.3113350715038954,
      "alpha_self": 0.23808464895662748,
      "alpha_dis": 0.7231729885500214,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -4.541845753587653,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.7396473357828857,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -15.475580232050975,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.456558476733209,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -16.173267847992662,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -1.8427089521585736,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -16.80149777259272,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.878701117179935,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -15.666324452614269,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -3.58054291434851,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -18.532325440504014,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -3.0919493715529134,
      "alpha_self": 8.894189020897274,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -21.006686296081387,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -3.137382531768894,
      "alpha_self": 10.0,
      "alpha_dis": 1.435174022495234,
      "alpha_adv": -4.698616728731591,
      "success": true,
      "log_likelihood": -22.038916785245284,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.005231066332296,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -17.876868667788955,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -5.0,
      "alpha_self": 9.91984293424653,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -9.015382595571236,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.8787010273013416,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -16.66632445241045,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.841197429227065,
      "alpha_self": 10.0,
      "alpha_dis": 1.2895961017025332,
      "alpha_adv": -5.0,
      "success": true,
      "log_likelihood": -20.47219352611542,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -1.1571623656658145,
      "alpha_self": 2.2194503865106956,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -23.216983873932325,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -3.8801092973219755,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -16.57479041505758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -4.20394721271808,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -13.99581660722731,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -0.7261502088476586,
      "alpha_self": 4.096027840887559,
      "alpha_dis": 9.390442815853309,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -10.9301139733347,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -5.0,
      "alpha_self": 9.278414231734144,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -7.376749397034397,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -1.290074123440935,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -13.030636946887595,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.4565590584336263,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -19.173267847260867,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -3.0171608371194,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -18.218375938925742,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -5.0,
      "alpha_self": 8.454757553143992,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -5.927419204125155,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -3.2953514747345722,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -17.906486459639186,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -4.567141326377131,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -11.232997155483012,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.7396473143227413,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -15.47558023210816,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -0.18800232818791887,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -7.722256755523869,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -0.8258350133834915,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -11.66514913341089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.7396466835957534,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -15.975580232007097,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": 1.486893928458428,
      "alpha_self": 3.132855565398185,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -10.115280698570286,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -5.0,
      "alpha_self": 9.083342576962902,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -7.9615552338743605,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -5.0,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -8.517217729754288,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.8787010269625686,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -17.666324451977097,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -1.4881689697075395,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -14.640081148425558,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.3774338219811924,
      "alpha_self": 8.019585814355942,
      "alpha_dis": 0.0,
      "alpha_adv": -5.0,
      "success": true,
      "log_likelihood": -22.148479809485874,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.005235469775406,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -14.376868668995524,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": 0.7991173680280043,
      "alpha_self": 7.667043083318815,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -7.14592207219982,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -4.635011545483228,
      "alpha_self": 5.672696660208505,
      "alpha_dis": 0.0,
      "alpha_adv": -5.0,
      "success": true,
      "log_likelihood": -7.374646935152115,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -0.9759986934526,
      "alpha_self": 4.781386666628082,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -22.74025369265852,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -5.0,
      "alpha_self": 8.454745260367329,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -5.927419204082664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -3.121600612355134,
      "alpha_self": 9.902681053157707,
      "alpha_dis": 1.2905991842954332,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -21.545081466758113,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -1.3481320920356294,
      "alpha_self": 8.888302811761083,
      "alpha_dis": 6.201166175815822,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -9.577134007100618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -5.0,
      "alpha_self": 9.450571497344557,
      "alpha_dis": 0.0,
      "alpha_adv": -5.0,
      "success": true,
      "log_likelihood": -8.756658575769807,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -3.017160918241133,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -14.718375939708169,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -0.4387160076698554,
      "alpha_self": 2.9242405895569816,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -23.316010238287276,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -5.0,
      "alpha_self": 9.27841431426686,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -7.043416063814806,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.005231141944169,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -18.3768686679121,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -3.460132038432283,
      "alpha_self": 7.047856754627754,
      "alpha_dis": 0.0,
      "alpha_adv": -5.0,
      "success": true,
      "log_likelihood": -17.746262983458248,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": 0.2841619783840563,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 0.7452273988129618,
      "success": true,
      "log_likelihood": -6.694903824879947,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -3.155789316247429,
      "alpha_self": 10.0,
      "alpha_dis": 0.0,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -14.631946627829876,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    },
    {
      "bias": -2.2726176036154784,
      "alpha_self": 9.983959705111193,
      "alpha_dis": 1.1642993944276847,
      "alpha_adv": 5.0,
      "success": true,
      "log_likelihood": -19.292585245619392,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "bias": {
        "r": 0.8924800416551136,
        "p": 1.1776531647551385e-35
      },
      "alpha_self": {
        "r": 0.4281653055903602,
        "p": 8.83933364451976e-06
      },
      "alpha_dis": {
        "r": 0.4491633816147631,
        "p": 2.7663729615457945e-06
      },
      "alpha_adv": {
        "r": 0.12753100208108198,
        "p": 0.2060698730326236
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 40.60996385428182,
  "bic_results": {
    "average_bic": 40.60996385428182,
    "individual_bics": [
      26.188914161994592,
      51.770827631517875,
      52.666724657482064,
      48.415406378365674,
      55.147048672785985,
      45.44853310073321,
      14.339088496009575,
      45.920818999031624,
      14.339088496009575,
      50.39872663519694,
      48.147048674510344,
      30.010590078767294,
      48.415406378568676,
      14.339097205493196,
      14.339088496009575,
      14.339088496009575,
      14.339088496009575,
      31.6643740234653,
      32.0428996101049,
      14.339092718752658,
      52.28523621640845,
      34.66437402214505,
      43.09087597575597,
      48.666724658401975,
      56.75770144325459,
      50.6243947571776,
      43.28523621846962,
      43.32570896797394,
      35.037646758872086,
      46.61423804964092,
      14.339088496009575,
      26.1889141619887,
      46.415406378979185,
      46.398726636300026,
      14.339088496009575,
      43.448533101219326,
      43.08781309170093,
      53.77082763104393,
      51.92081899716588,
      30.778589264062592,
      51.68061144845174,
      43.80007006274388,
      23.417767260999746,
      45.28523621792639,
      46.68061144980976,
      47.93707129900989,
      45.666724659052974,
      51.39872663483247,
      56.34744834598722,
      58.411909324315005,
      50.087813089402346,
      32.364840944966915,
      47.666724658645336,
      55.27846280605527,
      60.76804350168909,
      47.483656583939606,
      42.32570896827906,
      36.19430370049384,
      29.087574547893233,
      40.39534964759963,
      52.68061144834617,
      50.77082763167593,
      26.188914162074752,
      50.147048673102816,
      36.80007006479046,
      45.28523621804076,
      29.778589264872178,
      37.66437402064622,
      46.28523621783863,
      34.56463715096501,
      30.25718622157316,
      31.368511213333015,
      49.66672465777863,
      43.61423805067555,
      58.63103537279619,
      43.08781309181549,
      28.62591989822408,
      29.08336962412867,
      59.814583139141476,
      26.188914161989768,
      57.42423868734066,
      33.48834376802567,
      31.847392905364053,
      43.77082763324078,
      60.96609623039899,
      28.42090788145405,
      51.087813089648634,
      49.82660172074094,
      27.72388340358433,
      43.59796900948419,
      52.91924624506322
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 4,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- bias: r = 0.892\n- alpha_self: r = 0.428\n- alpha_dis: r = 0.449\n- alpha_adv: r = 0.128",
  "previous_models": [
    "Specification: utility = bias \\\n        + alpha_self * (split_self / combined_earning) \\\n        + alpha_dis * max((token_self / (token_self + token_opp)) - (split_self / combined_earning), 0) \\\n        + alpha_adv * max((split_self / combined_earning) - (token_self / (token_self + token_opp)), 0)\nSummary: A normalized, multipart utility model of responder behavior. The model predicts accept/reject decisions based on self-gain (as a percentage of the total pot), aversion to disadvantageous and advantageous inequity (relative to each participant\u2019s share of the group\u2019s total contribution), and an individual-specific response bias. Each learnable parameter uniquely maps onto a key psychological mechanism\u2014maximizing identifiability and minimizing covariance\u2014while all terms are normalized to eliminate scaling confounds due to trial-by-trial pot size differences.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 40.60996385428182\nOverall Accuracy: 0.7512\n\nParameter Recovery:\n- bias: r = 0.892\n- alpha_self: r = 0.428\n- alpha_dis: r = 0.449\n- alpha_adv: r = 0.128"
  ]
}