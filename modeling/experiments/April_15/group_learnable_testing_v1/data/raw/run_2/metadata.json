{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nThe previous model (linear sensitivity to share \u2013 deserved, with bias) achieved solid parameter recovery, BIC, and accuracy\u2014but there is room for improvement. While parameter covariance was kept low with two parameters, the model might lack nuance in accounting for nonlinearity, reference dependence, or idiosyncratic aversion to disadvantageous allocations.\n\nTo improve, instructions could challenge the modeler to consider:\n- Nonlinear transformations of fairness/inequity (e.g., loss aversion, diminishing sensitivity)\n- Incorporation of both advantageous and disadvantageous inequity aversion (e.g., different weights)\n- Using reference-point\u2013based approaches (\u201cdeserved\u201d may act as a reference; consider deviations both ways)\n- Allowing for a \u201ckinked\u201d sensitivity (e.g., responding differently above/below fairness)\n- Exploring prospect theory, threshold, or piecewise utility functions\n- Consider including an explicit lapse/noise parameter, but only if justified\n- Encouraging creative functional forms (step, quadratic, absolute difference)\n- Still urge parsimony and parameter recoverability, discouraging overparameterization\n\nExplicitly guide the user to reason about:\n- Psychological theories supporting different fairness attitudes (e.g., aversion to getting less vs. more than deserved)\n- Whether there are sharp accept/reject boundaries\n- If subjective value is linear in fairness, or subject to diminishing/magnified effects near \u201cfair\u201d\n- The implications of using absolute values, nonlinearities, or piecewise models on interpretability & recoverability\n\nSummon the modeler to justify every model and parameter via psychological or behavioral ground, not just statistics. Invite out-of-the-box or hybrid approaches\u2014provided all is grounded in interpretability and practical parameter recovery. \n</think>\n\nFor this run, follow these updated instructions:\n\nCarefully consider and explicitly justify your model structure based on both psychological theory and the need for robust, identifiable parameters. In your reasoning, address:\n\n- The core psychological drivers of responder choices in this scenario (including, but not limited to, fairness considerations, self-interest, and potential asymmetry in reactions to receiving less/more than deserved).\n- Whether responders show different sensitivities to disadvantageous (receiving less than \u201cdeserved\u201d) versus advantageous (receiving more) inequity, and how to model this mathematically (e.g., as different parameters or a nonlinear, \"kinked\" function).\n- If subjective value for fairness (or unfairness) might be best represented as a linear, nonlinear (e.g., squared, absolute difference), or piecewise function.\n- How the chosen form affects parameter recovery and covariance, and how many parameters are truly justifiable (with a strong bias toward interpretability and recoverability).\n- Whether a baseline bias/threshold or additional lapse/noise parameter should be included and why (explicitly justify any additional parameter on psychological/empirical grounds).\n- The mapping from model variables and parameters to observable behavior, ensuring that every parameter serves a meaningful psychological or behavioral function.\n\nChallenge yourself to consider alternative functional forms (nonlinear, asymmetric, or threshold-based models) as well as hybrid or less-conventional approaches\u2014so long as all elements are interpretable and facilitate strong parameter recovery.\n\nProvide clear reasoning leading to your proposed mathematical model, then supply the specified model structure and variable descriptors as before. Be rigorous in ensuring all model elements are both psychologically meaningful and statistically identifiable. Prioritize models that are both accurate and parsimonious, and provide explicit justification for the inclusion of each learnable parameter.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nThe previous model (linear sensitivity to share \u2013 deserved, with bias) achieved solid parameter recovery, BIC, and accuracy\u2014but there is room for improvement. While parameter covariance was kept low with two parameters, the model might lack nuance in accounting for nonlinearity, reference dependence, or idiosyncratic aversion to disadvantageous allocations.\n\nTo improve, instructions could challenge the modeler to consider:\n- Nonlinear transformations of fairness/inequity (e.g., loss aversion, diminishing sensitivity)\n- Incorporation of both advantageous and disadvantageous inequity aversion (e.g., different weights)\n- Using reference-point\u2013based approaches (\u201cdeserved\u201d may act as a reference; consider deviations both ways)\n- Allowing for a \u201ckinked\u201d sensitivity (e.g., responding differently above/below fairness)\n- Exploring prospect theory, threshold, or piecewise utility functions\n- Consider including an explicit lapse/noise parameter, but only if justified\n- Encouraging creative functional forms (step, quadratic, absolute difference)\n- Still urge parsimony and parameter recoverability, discouraging overparameterization\n\nExplicitly guide the user to reason about:\n- Psychological theories supporting different fairness attitudes (e.g., aversion to getting less vs. more than deserved)\n- Whether there are sharp accept/reject boundaries\n- If subjective value is linear in fairness, or subject to diminishing/magnified effects near \u201cfair\u201d\n- The implications of using absolute values, nonlinearities, or piecewise models on interpretability & recoverability\n\nSummon the modeler to justify every model and parameter via psychological or behavioral ground, not just statistics. Invite out-of-the-box or hybrid approaches\u2014provided all is grounded in interpretability and practical parameter recovery. \n</think>\n\nFor this run, follow these updated instructions:\n\nCarefully consider and explicitly justify your model structure based on both psychological theory and the need for robust, identifiable parameters. In your reasoning, address:\n\n- The core psychological drivers of responder choices in this scenario (including, but not limited to, fairness considerations, self-interest, and potential asymmetry in reactions to receiving less/more than deserved).\n- Whether responders show different sensitivities to disadvantageous (receiving less than \u201cdeserved\u201d) versus advantageous (receiving more) inequity, and how to model this mathematically (e.g., as different parameters or a nonlinear, \"kinked\" function).\n- If subjective value for fairness (or unfairness) might be best represented as a linear, nonlinear (e.g., squared, absolute difference), or piecewise function.\n- How the chosen form affects parameter recovery and covariance, and how many parameters are truly justifiable (with a strong bias toward interpretability and recoverability).\n- Whether a baseline bias/threshold or additional lapse/noise parameter should be included and why (explicitly justify any additional parameter on psychological/empirical grounds).\n- The mapping from model variables and parameters to observable behavior, ensuring that every parameter serves a meaningful psychological or behavioral function.\n\nChallenge yourself to consider alternative functional forms (nonlinear, asymmetric, or threshold-based models) as well as hybrid or less-conventional approaches\u2014so long as all elements are interpretable and facilitate strong parameter recovery.\n\nProvide clear reasoning leading to your proposed mathematical model, then supply the specified model structure and variable descriptors as before. Be rigorous in ensuring all model elements are both psychologically meaningful and statistically identifiable. Prioritize models that are both accurate and parsimonious, and provide explicit justification for the inclusion of each learnable parameter.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let\u2019s reason step by step:\n\n---\n\n**Step 1: Psychological Drivers and Empirical Evidence**\n\nResponders in dictator/ultimatum-like games exhibit:\n- **Fairness sensitivity:** Reject unfair offers even at personal cost.\n- **Reference dependence:** Perceive \"fair\" in proportion to contribution\u2014here \u201cdeserved\" is based on token_self/(token_self + token_opp).\n- **Inequity aversion:** The psychology is *asymmetric*: people are much more averse to disadvantageous inequity (less than deserved) than to advantageous (more than deserved) allocations (see Fehr & Schmidt, 1999; Bolton & Ockenfels, 2000).\n- **Nonlinearity:** Aversion to unfairness can be more nonlinear (\"kinked\"), i.e., sharp drops in utility at the fairness boundary.\n\n**Step 2: Mathematical Representations and Their Merits**\n\n- **Asymmetric (Kinked) Utility:** Formalize two learnable weights: one (\u03b1) for disadvantageous, one (\u03b2) for advantageous inequity. Absolute differences around the reference point, with the kink at \"deserved\".\n- **Form:** Utility = baseline + *\u03b1 \u00d7 (unfairness if negative)* + *\u03b2 \u00d7 (unfairness if positive)*\n- **Nonlinear exponent?** Using a fixed exponent (e.g., squared terms) may reduce interpretability and complicate recovery. Unless there\u2019s strong evidence of diminishing or accelerating sensitivity, keep forms linear in the absolute difference around the kink.\n- **Baseline/bias parameter?** Yes\u2014a general \u201cacceptance bias\" can capture unmodeled factors, threshold effects, or general conservatism.\n- **Lapse/noise param?** Not needed unless strongly justified; logistic transformation of utility already provides stochasticity.\n- **Parameter interpretability:** \u03b1 and \u03b2 directly map onto psychological aversion to different types of inequity; baseline captures overall bias.\n\n**Step 3: MAP FROM DATA TO MODEL**\n\n- **Fair share for participant:** deserved = combined_earning \u00d7 token_self / (token_self + token_opp)\n- **Observed share:** split_self\n- **Inequity:** diff = split_self \u2212 deserved (positive = advantageous inequity for responder)\n- **Utility formula:** baseline + \u03b1\u00d7neg(diff) + \u03b2\u00d7pos(diff); where neg(diff) = min(0, diff), pos(diff) = max(0, diff).\n\nExplicitly, this is:\n\nU = c + alpha * min(0, split_self - deserved) + beta * max(0, split_self - deserved)\n\n- **c:** baseline bias, learnable (large bounds: say, [-10,10])\n- **alpha:** (expected \u22640) disadvantageous inequity weight, learnable (large but finite, e.g., [-10, 0])\n- **beta:** (expected small, possibly positive or zero, rarely negative) advantageous inequity, learnable ([-5, 5])\n\nAll variables can be calculated from the provided dataset.\n\n**Alternative Considerations**\n\n- More complex nonlinearities (e.g., squared terms or cumulative prospect theory value functions) would add parameters with less clear interpretability and problematic parameter identifiability/covariance.  \n- Step/threshold models (e.g., hard rejection for unfair, accept otherwise) would not allow probabilistic soft predictions nor parameter estimation.\n- Adding noise/lapse parameter is unnecessary unless fit shows strong unexplained stochasticity beyond the logistic mapping.\n\n**Conclusion:**\nUse a **three-parameter \u201ckinked\u201d inequity aversion model**, piecewise around fairness, with learnable baseline/bias.\n\n---\n\nNow, specify in required format:\n\n---\n\n<MODEL>\nU = bias + alpha * min(0, split_self - deserved) + beta * max(0, split_self - deserved)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Latent utility of accepting the proposed split (higher values favor accepting)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline acceptance bias, reflecting a responder's general tendency to accept or reject offers regardless of fairness\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Weight on disadvantageous inequity (when split_self minus deserved is negative); more negative values mean greater aversion to receiving less than deserved\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Weight on advantageous inequity (when split_self minus deserved is positive); models possible preference for getting more than deserved (can be positive, zero, or negative)\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -5,\n          \"high\": 5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount of money (in \u00a3) that the participant would receive in the proposed split on a given trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"deserved\": {\n      \"description\": \"Participant's fair share of the combined earning, computed as combined_earning \u00d7 token_self / (token_self + token_opp)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money available to be distributed in the trial (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"unbounded\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens collected by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"unbounded\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens collected by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"unbounded\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA three-parameter asymmetric inequity aversion model that predicts responder choices based on a \u201ckinked\u201d (piecewise linear) function of the deviation between the received offer and the deserved share. Disadvantageous (less than deserved) and advantageous (more than deserved) inequity are weighted separately for maximal psychological realism and parameter recoverability. A baseline bias parameter accounts for individual response tendencies. All parameters are psychologically interpretable, and the model is optimized for robust recovery and prediction of responder accept/reject decisions.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['bias', 'alpha', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = bias + alpha * min(0, split_self - deserved) + beta * max(0, split_self - deserved)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Latent utility of accepting the proposed split (higher values favor accepting)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline acceptance bias, reflecting a responder's general tendency to accept or reject offers regardless of fairness\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Weight on disadvantageous inequity (when split_self minus deserved is negative); more negative values mean greater aversion to receiving less than deserved\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Weight on advantageous inequity (when split_self minus deserved is positive); models possible preference for getting more than deserved (can be positive, zero, or negative)\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -5,\n          \"high\": 5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount of money (in \\u00a3) that the participant would receive in the proposed split on a given trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"deserved\": {\n      \"description\": \"Participant's fair share of the combined earning, computed as combined_earning \\u00d7 token_self / (token_self + token_opp)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money available to be distributed in the trial (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"unbounded\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens collected by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"unbounded\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens collected by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"unbounded\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, bias=0, alpha=-5, beta=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        # Calculate deserved share\n        if (token_self + token_opp) == 0:\n            deserved = combined_earning / 2  # Handle edge case\n        else:\n            deserved = combined_earning * token_self / (token_self + token_opp)\n\n        # Calculate inequity\n        diff = split_self - deserved\n\n        # Calculate utility\n        utility = bias + alpha * min(0, diff) + beta * max(0, diff)\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 20, \"token_self\": 20, \"combined_earning\": 10, \"split_opp\": 5.0, \"split_self\": 5.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 5.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 5.0}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 20, \"token_self\": 20, \"combined_earning\": 10, \"split_opp\": 2.0, \"split_self\": 8.0, \"splitperc_opp\": 20, \"splitperc_self\": 80, \"accept\": 1.0, \"accepted_amount\": 8.0, \"accepted_perc\": 80.0, \"proposed_perc\": 80.0, \"proposed_amount\": 8.0}, {\"ID\": 3, \"group\": \"control\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 20, \"token_self\": 20, \"combined_earning\": 10, \"split_opp\": 8.0, \"split_self\": 2.0, \"splitperc_opp\": 80, \"splitperc_self\": 20, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 20.0, \"proposed_amount\": 2.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1744718427.143755
    }
  ],
  "learnable_parameters": {
    "bias": {
      "description": "Baseline acceptance bias, reflecting a responder's general tendency to accept or reject offers regardless of fairness",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "alpha": {
      "description": "Weight on disadvantageous inequity (when split_self minus deserved is negative); more negative values mean greater aversion to receiving less than deserved",
      "range": {
        "min": -10,
        "max": 0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Weight on advantageous inequity (when split_self minus deserved is positive); models possible preference for getting more than deserved (can be positive, zero, or negative)",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -5,
          "high": 5
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = bias + alpha * min(0, split_self - deserved) + beta * max(0, split_self - deserved)",
  "variable_descriptions": {
    "U": {
      "description": "Latent utility of accepting the proposed split (higher values favor accepting)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "bias": {
      "description": "Baseline acceptance bias, reflecting a responder's general tendency to accept or reject offers regardless of fairness",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "alpha": {
      "description": "Weight on disadvantageous inequity (when split_self minus deserved is negative); more negative values mean greater aversion to receiving less than deserved",
      "range": {
        "min": -10,
        "max": 0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Weight on advantageous inequity (when split_self minus deserved is positive); models possible preference for getting more than deserved (can be positive, zero, or negative)",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -5,
          "high": 5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Amount of money (in \u00a3) that the participant would receive in the proposed split on a given trial",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "deserved": {
      "description": "Participant's fair share of the combined earning, computed as combined_earning \u00d7 token_self / (token_self + token_opp)",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "combined_earning": {
      "description": "Total amount of money available to be distributed in the trial (in \u00a3)",
      "range": {
        "min": 0,
        "max": "unbounded",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens collected by the participant",
      "range": {
        "min": 0,
        "max": "unbounded",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens collected by the opponent",
      "range": {
        "min": 0,
        "max": "unbounded",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A three-parameter asymmetric inequity aversion model that predicts responder choices based on a \u201ckinked\u201d (piecewise linear) function of the deviation between the received offer and the deserved share. Disadvantageous (less than deserved) and advantageous (more than deserved) inequity are weighted separately for maximal psychological realism and parameter recoverability. A baseline bias parameter accounts for individual response tendencies. All parameters are psychologically interpretable, and the model is optimized for robust recovery and prediction of responder accept/reject decisions.",
  "target_variable": "accept",
  "full_reasoning": "Let\u2019s reason step by step:\n\n---\n\n**Step 1: Psychological Drivers and Empirical Evidence**\n\nResponders in dictator/ultimatum-like games exhibit:\n- **Fairness sensitivity:** Reject unfair offers even at personal cost.\n- **Reference dependence:** Perceive \"fair\" in proportion to contribution\u2014here \u201cdeserved\" is based on token_self/(token_self + token_opp).\n- **Inequity aversion:** The psychology is *asymmetric*: people are much more averse to disadvantageous inequity (less than deserved) than to advantageous (more than deserved) allocations (see Fehr & Schmidt, 1999; Bolton & Ockenfels, 2000).\n- **Nonlinearity:** Aversion to unfairness can be more nonlinear (\"kinked\"), i.e., sharp drops in utility at the fairness boundary.\n\n**Step 2: Mathematical Representations and Their Merits**\n\n- **Asymmetric (Kinked) Utility:** Formalize two learnable weights: one (\u03b1) for disadvantageous, one (\u03b2) for advantageous inequity. Absolute differences around the reference point, with the kink at \"deserved\".\n- **Form:** Utility = baseline + *\u03b1 \u00d7 (unfairness if negative)* + *\u03b2 \u00d7 (unfairness if positive)*\n- **Nonlinear exponent?** Using a fixed exponent (e.g., squared terms) may reduce interpretability and complicate recovery. Unless there\u2019s strong evidence of diminishing or accelerating sensitivity, keep forms linear in the absolute difference around the kink.\n- **Baseline/bias parameter?** Yes\u2014a general \u201cacceptance bias\" can capture unmodeled factors, threshold effects, or general conservatism.\n- **Lapse/noise param?** Not needed unless strongly justified; logistic transformation of utility already provides stochasticity.\n- **Parameter interpretability:** \u03b1 and \u03b2 directly map onto psychological aversion to different types of inequity; baseline captures overall bias.\n\n**Step 3: MAP FROM DATA TO MODEL**\n\n- **Fair share for participant:** deserved = combined_earning \u00d7 token_self / (token_self + token_opp)\n- **Observed share:** split_self\n- **Inequity:** diff = split_self \u2212 deserved (positive = advantageous inequity for responder)\n- **Utility formula:** baseline + \u03b1\u00d7neg(diff) + \u03b2\u00d7pos(diff); where neg(diff) = min(0, diff), pos(diff) = max(0, diff).\n\nExplicitly, this is:\n\nU = c + alpha * min(0, split_self - deserved) + beta * max(0, split_self - deserved)\n\n- **c:** baseline bias, learnable (large bounds: say, [-10,10])\n- **alpha:** (expected \u22640) disadvantageous inequity weight, learnable (large but finite, e.g., [-10, 0])\n- **beta:** (expected small, possibly positive or zero, rarely negative) advantageous inequity, learnable ([-5, 5])\n\nAll variables can be calculated from the provided dataset.\n\n**Alternative Considerations**\n\n- More complex nonlinearities (e.g., squared terms or cumulative prospect theory value functions) would add parameters with less clear interpretability and problematic parameter identifiability/covariance.  \n- Step/threshold models (e.g., hard rejection for unfair, accept otherwise) would not allow probabilistic soft predictions nor parameter estimation.\n- Adding noise/lapse parameter is unnecessary unless fit shows strong unexplained stochasticity beyond the logistic mapping.\n\n**Conclusion:**\nUse a **three-parameter \u201ckinked\u201d inequity aversion model**, piecewise around fairness, with learnable baseline/bias.\n\n---\n\nNow, specify in required format:\n\n---\n\n<MODEL>\nU = bias + alpha * min(0, split_self - deserved) + beta * max(0, split_self - deserved)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Latent utility of accepting the proposed split (higher values favor accepting)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline acceptance bias, reflecting a responder's general tendency to accept or reject offers regardless of fairness\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Weight on disadvantageous inequity (when split_self minus deserved is negative); more negative values mean greater aversion to receiving less than deserved\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Weight on advantageous inequity (when split_self minus deserved is positive); models possible preference for getting more than deserved (can be positive, zero, or negative)\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -5,\n          \"high\": 5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount of money (in \u00a3) that the participant would receive in the proposed split on a given trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"deserved\": {\n      \"description\": \"Participant's fair share of the combined earning, computed as combined_earning \u00d7 token_self / (token_self + token_opp)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money available to be distributed in the trial (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"unbounded\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens collected by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"unbounded\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens collected by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"unbounded\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA three-parameter asymmetric inequity aversion model that predicts responder choices based on a \u201ckinked\u201d (piecewise linear) function of the deviation between the received offer and the deserved share. Disadvantageous (less than deserved) and advantageous (more than deserved) inequity are weighted separately for maximal psychological realism and parameter recoverability. A baseline bias parameter accounts for individual response tendencies. All parameters are psychologically interpretable, and the model is optimized for robust recovery and prediction of responder accept/reject decisions.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = bias + alpha * min(0, split_self - deserved) + beta * max(0, split_self - deserved)\nSummary: A three-parameter asymmetric inequity aversion model that predicts responder choices based on a \u201ckinked\u201d (piecewise linear) function of the deviation between the received offer and the deserved share. Disadvantageous (less than deserved) and advantageous (more than deserved) inequity are weighted separately for maximal psychological realism and parameter recoverability. A baseline bias parameter accounts for individual response tendencies. All parameters are psychologically interpretable, and the model is optimized for robust recovery and prediction of responder accept/reject decisions.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, bias=0, alpha=-5, beta=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        # Calculate deserved share\n        if (token_self + token_opp) == 0:\n            deserved = combined_earning / 2  # Handle edge case\n        else:\n            deserved = combined_earning * token_self / (token_self + token_opp)\n\n        # Calculate inequity\n        diff = split_self - deserved\n\n        # Calculate utility\n        utility = bias + alpha * min(0, diff) + beta * max(0, diff)\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6858974358974359,
  "group_accuracies": {
    "Control": 0.7209302325581395,
    "Cocaine": 0.6545138888888888
  },
  "fitting_results": [
    {
      "bias": -2.868293855029102,
      "alpha": 0.0,
      "beta": 3.27144311204961,
      "success": true,
      "log_likelihood": -8.076757929699564,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.11148684067066549,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.563097800205703,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.005614637345764858,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.616009729389056,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.47028201313628065,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -22.694842676719553,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.3485831815270977,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.104036568479874,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.4833272504672788,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -22.64758571015146,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "alpha": -10.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -9.778900692709506e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.6095695017176492,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -22.101494175190897,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "alpha": -10.0,
      "beta": 2.3658205864603867,
      "success": true,
      "log_likelihood": -0.00010778863331859351,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.5953577451249963,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -22.162349012067587,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.34858319363801105,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.104036568479874,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -2.4106069510760877,
      "alpha": 0.0,
      "beta": 2.856721623449771,
      "success": true,
      "log_likelihood": -10.70146930298093,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.47028186742178074,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -22.694842676719286,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "alpha": -10.0,
      "beta": 2.582085713071187,
      "success": true,
      "log_likelihood": -0.00010609079269850061,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "alpha": -10.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -9.778900692709506e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "alpha": -10.0,
      "beta": 2.773976969807307,
      "success": true,
      "log_likelihood": -0.0001048059475941927,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "alpha": -8.694046270363625,
      "beta": 3.3985453979274403,
      "success": true,
      "log_likelihood": -0.00010411998599064866,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 1.7598725740928822,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -14.206123226861163,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 6.542882037304943,
      "alpha": -5.159085151869219,
      "beta": 1.5278627294778082,
      "success": true,
      "log_likelihood": -92.10191972560311,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "alpha": -10.0,
      "beta": 4.496121892652535,
      "success": true,
      "log_likelihood": -9.861526676687902e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.12282058446446402,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.551834042129954,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 1.7598739767765834,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -14.206123226860763,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.7249485891599448,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -21.502625222548044,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.005614476665266635,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.616009729388885,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.1114867894967812,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.563097800205696,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.2409336097427983,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.370066608523736,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.12282066036409692,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.55183404212999,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -1.1561733026266772,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -18.70040010397781,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 2.016535460064263,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -12.321842840981022,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 1.1811445859079766,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -18.565569629114368,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "alpha": -10.0,
      "beta": 4.313602864736901,
      "success": true,
      "log_likelihood": -9.898604188723838e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -2.868314206742251,
      "alpha": 0.0,
      "beta": 3.271493483429795,
      "success": true,
      "log_likelihood": -8.07675792909571,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.47028160094596555,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -22.694842676719247,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.5953585590522253,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -22.162349012071004,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "alpha": -9.998631918301404,
      "beta": 2.4365718834012027,
      "success": true,
      "log_likelihood": -0.00010720286109695979,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.48332749593650715,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -22.64758571015149,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.740751525563198,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -21.426802411325948,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.11148702109214786,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.563097800205842,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.6095698540354438,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -22.101494175190407,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "alpha": -9.392567777953369,
      "beta": 2.812189961830444,
      "success": true,
      "log_likelihood": -69.07765835933446,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.36079572036719126,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.06938404491716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -1.5033675535042381,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -16.051910834119976,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 3.498073445057483,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -4.513031429725014,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.12282050477060119,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.551834042129983,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.36079622165962744,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.0693840449155,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.8783739203204924,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -20.617847919617407,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.005614446610223371,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.616009729388878,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.595357374712394,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -22.162349012067764,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.4702818553873936,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -22.694842676719265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.07393632950857343,
      "alpha": 0.0,
      "beta": 0.6906612269564394,
      "success": true,
      "log_likelihood": -24.767991366221604,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.740751883858539,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -21.426802411325106,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.079047759198175,
      "alpha": 0.0,
      "beta": 2.558578927734206,
      "success": true,
      "log_likelihood": -12.938953727338989,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.005614427557869353,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.61600972938889,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.30971191519883173,
      "alpha": 0.0,
      "beta": 0.49477789965398894,
      "success": true,
      "log_likelihood": -24.38522789195236,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.5953574914577362,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -22.162349012067576,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.8604118343294418,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -20.71049944859766,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.1561739648002383,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -18.70040010398003,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.559453935683074,
      "alpha": -0.8022033988122337,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -10.274686079383521,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.410620914679544,
      "alpha": 0.0,
      "beta": 2.856717555108246,
      "success": true,
      "log_likelihood": -10.70146930269762,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.3522410973387406,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -17.300245039964143,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.36079619506194643,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.069384044915527,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.11148695254259797,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.56309780020576,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.8683230427766166,
      "alpha": 0.0,
      "beta": 3.2714774787747087,
      "success": true,
      "log_likelihood": -8.076757929263433,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.34858358899208625,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.10403656848039,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.5033678449553494,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -16.051910834120203,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.12282065200288499,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.55183404212998,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 2.3371456262593915,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -10.151673389530437,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.7598733728178229,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -14.206123226859908,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.12282059499370918,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.551834042129947,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 2.3371455709618467,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -10.151673389530465,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.5763998812425046,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -8.155667366968702,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.078895335080187,
      "alpha": 0.0,
      "beta": 2.5585485676546824,
      "success": true,
      "log_likelihood": -12.938953685433848,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.005614475663334501,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.616009729388892,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.1811450472583183,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -18.565569629114844,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.04279257292274657,
      "alpha": 0.0,
      "beta": -0.7883687718370962,
      "success": true,
      "log_likelihood": -24.78356114549804,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.7407521756968132,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -21.426802411325127,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 2.77486032112623,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -7.609553743217597,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.774253431364744,
      "alpha": 0.0,
      "beta": -5.0,
      "success": true,
      "log_likelihood": -7.609553396647549,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.36079662859020944,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.06938404491567,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.86831553916717,
      "alpha": 0.0,
      "beta": 3.271498382069979,
      "success": true,
      "log_likelihood": -8.076757929092164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.0056144488918735665,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.616009729388878,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 2.2287210542934157,
      "alpha": -0.04222664615741146,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -10.1437899821416,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.016790883675742,
      "alpha": 0.0,
      "beta": -5.0,
      "success": true,
      "log_likelihood": -12.32184272642885,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.11148684804420499,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.563097800205686,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.36079637315592566,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.069384044915413,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.5763998099866456,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -8.155667366968684,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.7407519718648794,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -21.42680241132506,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.270776479896077,
      "alpha": 0.0,
      "beta": 0.28293746263279695,
      "success": true,
      "log_likelihood": -19.050023569381302,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 2.7742535603537917,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -7.609553396647554,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.22927878653779038,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.392806080338378,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.7407520513745821,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -21.426802411325063,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "bias": {
        "r": 0.825503435343644,
        "p": 4.383288942134117e-26
      },
      "alpha": {
        "r": 0.35920374243930125,
        "p": 0.00024239820549209419
      },
      "beta": {
        "r": 0.4950450475714183,
        "p": 1.642550702976307e-07
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 47.166218910410066,
  "bic_Control": 47.45333848601055,
  "bic_Cocaine": 46.909007623934635,
  "bic_results": {
    "average_bic": 47.166218910410066,
    "individual_bics": [
      26.90407267476746,
      57.876752415779734,
      57.98257627414644,
      56.14024216880743,
      56.95862995232808,
      56.04572823567125,
      10.750752393382184,
      54.95354516575013,
      10.750772392634968,
      55.0752548395035,
      56.95862995232808,
      32.15349542133019,
      56.14024216880691,
      10.750768996953727,
      10.750752393382184,
      10.75076642726352,
      10.750765055340311,
      39.16280326909066,
      194.95439626657455,
      10.750754045901864,
      57.854224899628235,
      39.162803269089856,
      53.75580726046442,
      57.9825762741461,
      57.87675241577972,
      57.4906900324158,
      57.854224899628306,
      48.15135702332395,
      35.394242497330374,
      47.88169607359707,
      10.750754787452106,
      26.90407267355975,
      56.14024216880682,
      55.075254839510336,
      10.750771221090524,
      56.045728235671305,
      53.60416163802023,
      57.87675241578002,
      54.95354516574915,
      148.90587353403726,
      56.889324905202656,
      42.854378483608286,
      19.776619674818356,
      57.85422489962829,
      56.88932490519933,
      51.98625265460315,
      57.98257627414608,
      55.075254839503856,
      56.140242168806864,
      60.28653954781154,
      53.60416163801854,
      36.62846427004631,
      57.98257627414611,
      59.52101259927305,
      55.075254839503486,
      52.171555712563645,
      48.15135702332839,
      31.299928974135373,
      32.15349542076357,
      45.35104689529662,
      56.88932490519939,
      57.87675241577985,
      26.904072673895197,
      56.958629952329105,
      42.85437848360874,
      57.85422489962829,
      31.053903594429205,
      39.162803269088144,
      57.85422489962822,
      31.05390359442926,
      27.061891549305734,
      36.62846418623603,
      57.98257627414611,
      47.88169607359802,
      60.31767910636441,
      53.60416163801858,
      25.969664301803526,
      25.969663608663428,
      56.88932490519967,
      26.90407267355266,
      57.98257627414608,
      31.03813677965153,
      35.39424226822603,
      57.876752415779706,
      56.88932490519916,
      27.0618915493057,
      53.604161638018454,
      48.85060395413093,
      25.96966360866344,
      57.53616897604509,
      53.604161638018454
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        26.90407267476746,
        57.876752415779734,
        57.98257627414644,
        56.14024216880743,
        56.95862995232808,
        56.04572823567125,
        10.750752393382184,
        54.95354516575013,
        10.750772392634968,
        55.0752548395035,
        56.95862995232808,
        32.15349542133019,
        56.14024216880691,
        10.750768996953727,
        10.750752393382184,
        10.75076642726352,
        10.750765055340311,
        39.16280326909066,
        194.95439626657455,
        10.750754045901864,
        57.854224899628235,
        39.162803269089856,
        53.75580726046442,
        57.9825762741461,
        57.87675241577972,
        57.4906900324158,
        57.854224899628306,
        48.15135702332395,
        35.394242497330374,
        47.88169607359707,
        10.750754787452106,
        26.90407267355975,
        56.14024216880682,
        55.075254839510336,
        10.750771221090524,
        56.045728235671305,
        53.60416163802023,
        57.87675241578002,
        54.95354516574915,
        148.90587353403726,
        56.889324905202656,
        42.854378483608286,
        19.776619674818356
      ],
      "Cocaine": [
        57.85422489962829,
        56.88932490519933,
        51.98625265460315,
        57.98257627414608,
        55.075254839503856,
        56.140242168806864,
        60.28653954781154,
        53.60416163801854,
        36.62846427004631,
        57.98257627414611,
        59.52101259927305,
        55.075254839503486,
        52.171555712563645,
        48.15135702332839,
        31.299928974135373,
        32.15349542076357,
        45.35104689529662,
        56.88932490519939,
        57.87675241577985,
        26.904072673895197,
        56.958629952329105,
        42.85437848360874,
        57.85422489962829,
        31.053903594429205,
        39.162803269088144,
        57.85422489962822,
        31.05390359442926,
        27.061891549305734,
        36.62846418623603,
        57.98257627414611,
        47.88169607359802,
        60.31767910636441,
        53.60416163801858,
        25.969664301803526,
        25.969663608663428,
        56.88932490519967,
        26.90407267355266,
        57.98257627414608,
        31.03813677965153,
        35.39424226822603,
        57.876752415779706,
        56.88932490519916,
        27.0618915493057,
        53.604161638018454,
        48.85060395413093,
        25.96966360866344,
        57.53616897604509,
        53.604161638018454
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- bias: r = 0.826\n- alpha: r = 0.359\n- beta: r = 0.495",
  "previous_models": [
    "Specification: U = bias + alpha * min(0, split_self - deserved) + beta * max(0, split_self - deserved)\nSummary: A three-parameter asymmetric inequity aversion model that predicts responder choices based on a \u201ckinked\u201d (piecewise linear) function of the deviation between the received offer and the deserved share. Disadvantageous (less than deserved) and advantageous (more than deserved) inequity are weighted separately for maximal psychological realism and parameter recoverability. A baseline bias parameter accounts for individual response tendencies. All parameters are psychologically interpretable, and the model is optimized for robust recovery and prediction of responder accept/reject decisions.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 47.166218910410066\nOverall Accuracy: 0.6859\nGroup Accuracies:\n- Control: 0.7209\n- Cocaine: 0.6545\n\nParameter Recovery:\n- bias: r = 0.826\n- alpha: r = 0.359\n- beta: r = 0.495"
  ]
}