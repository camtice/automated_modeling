{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nReviewing the previous run results, we observe that parameter recovery is inadequate (r\u22480.5 for both parameters). BIC is rather high, and accuracy only moderate. This suggests a model with learnable parameters that are either collinear (covarying), or that the mathematical structure makes it difficult to tease apart their individual contributions. The model penalized both disadvantageous and advantageous inequity separately, but evidence often suggests participants are more sensitive to disadvantageous inequity, and the separation may make parameter estimation noisy.\n\nTo improve, we want:\n- Lower parameter redundancy/covariance (for recovery).\n- Potentially a model structure where effects of fairness and self-interest interact, not just add.\n- A baseline bias/threshold parameter (people may have default tendencies to accept/reject, regardless of fairness/value).\n- Careful reasoning about nonlinearity (e.g., using proportional utility, or ratios, or thresholding) can help identifiability.\n- Encourage considering non-additive or alternative norms (e.g. absolute vs proportional, reference-dependent, etc).\n- Encourage modeling with no more than 2-3 parameters, but with at least one controlling overall bias/sensitivity.\n- Push for use of the existing data (especially mapping token contributions and offers to perceived fairness), but try psychological mechanisms beyond \"vanilla\" inequity aversion.\n\nSpecific instructions should encourage: (1) reasoning about bias/intercept or alternatives to double-parameter inequity aversion, (2) alternatives in functional form (e.g., nonlinear, ratio, sigmoidal), (3) justification for parameter choice based on improving both fit and recoverability.\n\n</think>\n\nFor this run, do the following:\n\n1. Explicitly consider the potential for high covariance between parameters; if introducing more than one learnable parameter, justify how your model structure helps distinguish their influence.\n2. Carefully consider whether both advantageous and disadvantageous inequity aversion should be separate parameters, or whether another structure (e.g., a single inequity aversion parameter with an adjustable bias/intercept term) would be more identifiable.\n3. Strongly consider including a bias/intercept parameter in your model to capture baseline acceptance/rejection tendencies, which may be more recoverable and improve prediction accuracy.\n4. Encourage trying at least one non-additive or nonlinear approach to mapping contributions and/or splits to utility (e.g., ratio of offer to proportional share, or using a threshold, or non-linear penalty).\n5. Before producing the final model, explicitly discuss (step by step) how each proposed component or parameter will help with parameter recovery, accuracy, and model identifiability.\n6. Keep the total number of learnable parameters to no more than 3, and justify each.\n\nFirst, step through:\n- Identifying key psychological/decision processes (including acceptance bias, fairness evaluation, and value sensitivity).\n- Exploring whether nonlinear, ratio, or threshold forms could model behavior better than simple additivity.\n- Determining, for each proposed parameter, how its effect on the model can be clearly distinguished from the others.\n\nThen, propose your model in the required format. Use clear notation. For each learnable parameter, provide a thoughtful explanation of why it is needed and how it supports both model fit and identifiability. Prioritize designs likely to yield high parameter recovery, low BIC, and higher predictive accuracy over simple psychological fidelity.\n\nThink creatively\u2014consider, for example, models that compare the offered share to a fairness norm by ratio rather than difference, or that include decision thresholds, or non-linear transforms. If you use more than one fairness-related parameter, explicitly describe why and how their effects can be empirically separated using the available data.\n\nRemember: parameter recovery (identifiability) is as important as accuracy.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nReviewing the previous run results, we observe that parameter recovery is inadequate (r\u22480.5 for both parameters). BIC is rather high, and accuracy only moderate. This suggests a model with learnable parameters that are either collinear (covarying), or that the mathematical structure makes it difficult to tease apart their individual contributions. The model penalized both disadvantageous and advantageous inequity separately, but evidence often suggests participants are more sensitive to disadvantageous inequity, and the separation may make parameter estimation noisy.\n\nTo improve, we want:\n- Lower parameter redundancy/covariance (for recovery).\n- Potentially a model structure where effects of fairness and self-interest interact, not just add.\n- A baseline bias/threshold parameter (people may have default tendencies to accept/reject, regardless of fairness/value).\n- Careful reasoning about nonlinearity (e.g., using proportional utility, or ratios, or thresholding) can help identifiability.\n- Encourage considering non-additive or alternative norms (e.g. absolute vs proportional, reference-dependent, etc).\n- Encourage modeling with no more than 2-3 parameters, but with at least one controlling overall bias/sensitivity.\n- Push for use of the existing data (especially mapping token contributions and offers to perceived fairness), but try psychological mechanisms beyond \"vanilla\" inequity aversion.\n\nSpecific instructions should encourage: (1) reasoning about bias/intercept or alternatives to double-parameter inequity aversion, (2) alternatives in functional form (e.g., nonlinear, ratio, sigmoidal), (3) justification for parameter choice based on improving both fit and recoverability.\n\n</think>\n\nFor this run, do the following:\n\n1. Explicitly consider the potential for high covariance between parameters; if introducing more than one learnable parameter, justify how your model structure helps distinguish their influence.\n2. Carefully consider whether both advantageous and disadvantageous inequity aversion should be separate parameters, or whether another structure (e.g., a single inequity aversion parameter with an adjustable bias/intercept term) would be more identifiable.\n3. Strongly consider including a bias/intercept parameter in your model to capture baseline acceptance/rejection tendencies, which may be more recoverable and improve prediction accuracy.\n4. Encourage trying at least one non-additive or nonlinear approach to mapping contributions and/or splits to utility (e.g., ratio of offer to proportional share, or using a threshold, or non-linear penalty).\n5. Before producing the final model, explicitly discuss (step by step) how each proposed component or parameter will help with parameter recovery, accuracy, and model identifiability.\n6. Keep the total number of learnable parameters to no more than 3, and justify each.\n\nFirst, step through:\n- Identifying key psychological/decision processes (including acceptance bias, fairness evaluation, and value sensitivity).\n- Exploring whether nonlinear, ratio, or threshold forms could model behavior better than simple additivity.\n- Determining, for each proposed parameter, how its effect on the model can be clearly distinguished from the others.\n\nThen, propose your model in the required format. Use clear notation. For each learnable parameter, provide a thoughtful explanation of why it is needed and how it supports both model fit and identifiability. Prioritize designs likely to yield high parameter recovery, low BIC, and higher predictive accuracy over simple psychological fidelity.\n\nThink creatively\u2014consider, for example, models that compare the offered share to a fairness norm by ratio rather than difference, or that include decision thresholds, or non-linear transforms. If you use more than one fairness-related parameter, explicitly describe why and how their effects can be empirically separated using the available data.\n\nRemember: parameter recovery (identifiability) is as important as accuracy.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let\u2019s proceed step-by-step per your instructions.\n\n---\n\n**STEP 1: Identify core psychological/decision processes**  \nWe need to capture:  \n- How the responder evaluates the *fairness* of the offer, given both their own and the opponent\u2019s contribution.\n- That people may have a *baseline bias* to accept or reject offers, regardless of fairness (acceptance threshold).\n- That people may be *nonlinearly sensitive* to fairness deviations\u2014e.g., rejecting strongly unfair offers, but not rewarding minor deviations much.\n\nKey variables:  \n- **token_self**, **token_opp**: The \u201cdeserved\u201d split (contribution norm).\n- **split_self**: The offered amount to the responder.\n- **splitperc_self**: The offered percentage to the responder.\n- **combined_earning**: The pot size.\n\n---\n\n**STEP 2: Explore (non-)linear formulations for fairness evaluation**  \n*Additivity* (linear penalty based on difference from fair) is standard but prone to parameter collinearity (especially if also modeling bias).\n\n*Alternative* formulations to improve identifiability and fit:\n- **Ratio of actual offer to norm** (offered% divided by deserved%): E.g., if you \u201cdeserve\u201d 60% by contribution but are offered 40%, ratio = 0.67. This gives a clear, interpretable measure of fairness, scaling across different pot/contribution pairings.\n- **Threshold/sigmoid transform**: Nonlinear mapping to utility, so that small unfairness may not strongly affect, but large unfairness does\u2014a ratio form can facilitate this.\n\n---\n\n**STEP 3: Parameter selection and identifiability reasoning**\n\nLet\u2019s consider 2-3 learnable parameters:\n1. **alpha (sensitivity to fairness ratio)**: Strength with which the fairness ratio impacts utility. Setting this as a single parameter capturing both directions improves identifiability; a negative sign penalizes offers worse than norm.\n    - *Identifiability*: The fairness ratio uses both contributions (token_self/token_opp) and the offer; this variable is not collinear with a bias/intercept parameter. Only one fairness weight, so less redundancy.\n2. **intercept_bias (acceptance bias)**: Tendency to accept or reject proposals regardless of fairness.\n    - *Identifiability*: Purely shifts average utility up/down across all offers, orthogonal to fairness sensitivity.\n3. **(Optional) value_weight**: Sometimes, responders may accept poor splits if the absolute amount is high (e.g., \u201cbetter a small share of a big pie than nothing\u201d). Including gain sensitivity could boost fit, but may come at the cost of identifiability if too correlated with fairness.\n    - *Solution*: Use only two parameters unless model recovery checks show value_weight is distinctly estimable.\n\nLet\u2019s start with 2-parameter model:  \n- *intercept_bias*: Baseline acceptance.\n- *fairness_sensitivity (alpha)*: Weight for log-fairness ratio, with sign so negative means penalize offers below the deserved amount.\n\n**Formula suggestion**:  \nLet  \n- \u201cdeserved_share\u201d = combined_earning \u00d7 (token_self / (token_self + token_opp))\n- \u201coffered_share\u201d = split_self\n- \u201cfairness_ratio\u201d = offered_share / deserved_share\n\nTo center fairness: log(fairness_ratio).  \nSo: if offered what you \"deserve,\" log(1)=0  \nIf less, log(<1)=negative; if more, log(>1)=positive.\n\nThen:  \nU = intercept_bias + alpha \u00d7 log(fairness_ratio)\n\nWhere U = utility, probability[accept] = logistic(U) as specified.\n\nIf adding third parameter, value sensitivity:  \nU = intercept_bias + alpha \u00d7 log(fairness_ratio) + value_weight \u00d7 split_self\n\nBut I propose *not* to include value_weight unless the dataset shows that it is recoverable\u2014fairness and amount may be too correlated.\n\n---\n\n**STEP 4: Justification for each parameter**\n\n- **intercept_bias**:\n    - Captures participant's acceptance/rejection base rate independent of fairness.\n    - Orthogonal to fairness sensitivity; better recovered.\n- **alpha (fairness_sensitivity)**:  \n    - Responds to the relative, not absolute, deviation from fairness, scaling across different trial pot sizes and contributions.\n    - Log-transform ensures symmetric response to unfairness in either direction.\n    - Using a single parameter avoids identifiability issues present in models with both advantageous/disadvantageous aversion (as those can trade off).\n- No *value_weight* included in base model for maximum identifiability.\n\n**Parameter constraints**  \n- *intercept_bias*: [-10, +10] (large enough to permit nearly full or no acceptance)\n- *alpha*: [-10, +10] (full range to allow hypersensitivity in either direction)\n- U: unbounded; logistic(U) maps as required.\n\n---\n\n**STEP 5: Model summary, notation, variable description**\n\n---\n\n## **Final Model Specification**\n\n<MODEL>\nU = intercept_bias + alpha \u00d7 log(split_self / (combined_earning \u00d7 (token_self / (token_self + token_opp))))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer in the current trial\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"intercept_bias\": {\n      \"description\": \"Participant's baseline tendency to accept or reject offers, independent of fairness\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity to the log ratio of the offered amount to the deserved amount; negative values reflect aversion to unfair offers, positive values reflect seeking larger than deserved offers\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed monetary share (\u00a3) to the participant (responder) in the current trial\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 500.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Sum of both players' tokens multiplied by \u00a33; total money in the pot for the current trial\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (responder)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA two-parameter model in which responders evaluate offers using the log-ratio of proposed share to their deserved share based on contribution, plus a baseline acceptance bias. This structure ensures high parameter identifiability, as the intercept and fairness sensitivity have distinct, non-collinear influences. It accommodates both proportional and absolute fairness differences, scales across different pot sizes, and is optimized for both accuracy and parameter recovery.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['intercept_bias', 'alpha']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = intercept_bias + alpha \u00d7 log(split_self / (combined_earning \u00d7 (token_self / (token_self + token_opp))))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer in the current trial\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"intercept_bias\": {\n      \"description\": \"Participant's baseline tendency to accept or reject offers, independent of fairness\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity to the log ratio of the offered amount to the deserved amount; negative values reflect aversion to unfair offers, positive values reflect seeking larger than deserved offers\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed monetary share (\\u00a3) to the participant (responder) in the current trial\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 500.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Sum of both players' tokens multiplied by \\u00a33; total money in the pot for the current trial\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (responder)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n---\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, intercept_bias=0.0, alpha=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0.0)\n        combined_earning = trial.get(\"combined_earning\", 0.0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Avoid division by zero\n        if (token_self + token_opp) == 0:\n            deserved_share = 0.0\n        else:\n            deserved_share = combined_earning * (token_self / (token_self + token_opp))\n\n        # Calculate fairness ratio, handling potential division by zero\n        if deserved_share == 0.0:\n            fairness_ratio = 0.0  # Or handle differently, e.g., set to 1.0?\n        else:\n            fairness_ratio = split_self / deserved_share\n\n        # Calculate utility\n        if fairness_ratio <= 0.0:  #Handle log of 0 or negative numbers\n            utility = float('-inf') #Reject\n        else:\n            utility = intercept_bias + alpha * math.log(fairness_ratio)\n        model_predictions.append(utility)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"exp\", \"trial_number\": 1, \"trial_type\": 0, \"trial_role\": 0, \"token_opp\": 40, \"token_self\": 60, \"combined_earning\": 300, \"split_opp\": 117.0, \"split_self\": 183.0, \"splitperc_opp\": 39, \"splitperc_self\": 61, \"accept\": 1.0, \"accepted_amount\": 183.0, \"accepted_perc\": 61.0, \"proposed_perc\": 61.0, \"proposed_amount\": 183.0}, {\"ID\": 1, \"group\": \"exp\", \"trial_number\": 2, \"trial_type\": 0, \"trial_role\": 0, \"token_opp\": 40, \"token_self\": 60, \"combined_earning\": 300, \"split_opp\": 117.0, \"split_self\": 183.0, \"splitperc_opp\": 39, \"splitperc_self\": 61, \"accept\": 1.0, \"accepted_amount\": 183.0, \"accepted_perc\": 61.0, \"proposed_perc\": 61.0, \"proposed_amount\": 183.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744719271.541024
    }
  ],
  "learnable_parameters": {
    "intercept_bias": {
      "description": "Participant's baseline tendency to accept or reject offers, independent of fairness",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "alpha": {
      "description": "Sensitivity to the log ratio of the offered amount to the deserved amount; negative values reflect aversion to unfair offers, positive values reflect seeking larger than deserved offers",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = intercept_bias + alpha \u00d7 log(split_self / (combined_earning \u00d7 (token_self / (token_self + token_opp))))",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the proposed offer in the current trial",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "intercept_bias": {
      "description": "Participant's baseline tendency to accept or reject offers, independent of fairness",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "alpha": {
      "description": "Sensitivity to the log ratio of the offered amount to the deserved amount; negative values reflect aversion to unfair offers, positive values reflect seeking larger than deserved offers",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10.0,
          "high": 10.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed monetary share (\u00a3) to the participant (responder) in the current trial",
      "range": {
        "min": 0.0,
        "max": 500.0,
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Sum of both players' tokens multiplied by \u00a33; total money in the pot for the current trial",
      "range": {
        "min": 0.0,
        "max": 1000.0,
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant (responder)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A two-parameter model in which responders evaluate offers using the log-ratio of proposed share to their deserved share based on contribution, plus a baseline acceptance bias. This structure ensures high parameter identifiability, as the intercept and fairness sensitivity have distinct, non-collinear influences. It accommodates both proportional and absolute fairness differences, scales across different pot sizes, and is optimized for both accuracy and parameter recovery.",
  "target_variable": "accept",
  "full_reasoning": "Let\u2019s proceed step-by-step per your instructions.\n\n---\n\n**STEP 1: Identify core psychological/decision processes**  \nWe need to capture:  \n- How the responder evaluates the *fairness* of the offer, given both their own and the opponent\u2019s contribution.\n- That people may have a *baseline bias* to accept or reject offers, regardless of fairness (acceptance threshold).\n- That people may be *nonlinearly sensitive* to fairness deviations\u2014e.g., rejecting strongly unfair offers, but not rewarding minor deviations much.\n\nKey variables:  \n- **token_self**, **token_opp**: The \u201cdeserved\u201d split (contribution norm).\n- **split_self**: The offered amount to the responder.\n- **splitperc_self**: The offered percentage to the responder.\n- **combined_earning**: The pot size.\n\n---\n\n**STEP 2: Explore (non-)linear formulations for fairness evaluation**  \n*Additivity* (linear penalty based on difference from fair) is standard but prone to parameter collinearity (especially if also modeling bias).\n\n*Alternative* formulations to improve identifiability and fit:\n- **Ratio of actual offer to norm** (offered% divided by deserved%): E.g., if you \u201cdeserve\u201d 60% by contribution but are offered 40%, ratio = 0.67. This gives a clear, interpretable measure of fairness, scaling across different pot/contribution pairings.\n- **Threshold/sigmoid transform**: Nonlinear mapping to utility, so that small unfairness may not strongly affect, but large unfairness does\u2014a ratio form can facilitate this.\n\n---\n\n**STEP 3: Parameter selection and identifiability reasoning**\n\nLet\u2019s consider 2-3 learnable parameters:\n1. **alpha (sensitivity to fairness ratio)**: Strength with which the fairness ratio impacts utility. Setting this as a single parameter capturing both directions improves identifiability; a negative sign penalizes offers worse than norm.\n    - *Identifiability*: The fairness ratio uses both contributions (token_self/token_opp) and the offer; this variable is not collinear with a bias/intercept parameter. Only one fairness weight, so less redundancy.\n2. **intercept_bias (acceptance bias)**: Tendency to accept or reject proposals regardless of fairness.\n    - *Identifiability*: Purely shifts average utility up/down across all offers, orthogonal to fairness sensitivity.\n3. **(Optional) value_weight**: Sometimes, responders may accept poor splits if the absolute amount is high (e.g., \u201cbetter a small share of a big pie than nothing\u201d). Including gain sensitivity could boost fit, but may come at the cost of identifiability if too correlated with fairness.\n    - *Solution*: Use only two parameters unless model recovery checks show value_weight is distinctly estimable.\n\nLet\u2019s start with 2-parameter model:  \n- *intercept_bias*: Baseline acceptance.\n- *fairness_sensitivity (alpha)*: Weight for log-fairness ratio, with sign so negative means penalize offers below the deserved amount.\n\n**Formula suggestion**:  \nLet  \n- \u201cdeserved_share\u201d = combined_earning \u00d7 (token_self / (token_self + token_opp))\n- \u201coffered_share\u201d = split_self\n- \u201cfairness_ratio\u201d = offered_share / deserved_share\n\nTo center fairness: log(fairness_ratio).  \nSo: if offered what you \"deserve,\" log(1)=0  \nIf less, log(<1)=negative; if more, log(>1)=positive.\n\nThen:  \nU = intercept_bias + alpha \u00d7 log(fairness_ratio)\n\nWhere U = utility, probability[accept] = logistic(U) as specified.\n\nIf adding third parameter, value sensitivity:  \nU = intercept_bias + alpha \u00d7 log(fairness_ratio) + value_weight \u00d7 split_self\n\nBut I propose *not* to include value_weight unless the dataset shows that it is recoverable\u2014fairness and amount may be too correlated.\n\n---\n\n**STEP 4: Justification for each parameter**\n\n- **intercept_bias**:\n    - Captures participant's acceptance/rejection base rate independent of fairness.\n    - Orthogonal to fairness sensitivity; better recovered.\n- **alpha (fairness_sensitivity)**:  \n    - Responds to the relative, not absolute, deviation from fairness, scaling across different trial pot sizes and contributions.\n    - Log-transform ensures symmetric response to unfairness in either direction.\n    - Using a single parameter avoids identifiability issues present in models with both advantageous/disadvantageous aversion (as those can trade off).\n- No *value_weight* included in base model for maximum identifiability.\n\n**Parameter constraints**  \n- *intercept_bias*: [-10, +10] (large enough to permit nearly full or no acceptance)\n- *alpha*: [-10, +10] (full range to allow hypersensitivity in either direction)\n- U: unbounded; logistic(U) maps as required.\n\n---\n\n**STEP 5: Model summary, notation, variable description**\n\n---\n\n## **Final Model Specification**\n\n<MODEL>\nU = intercept_bias + alpha \u00d7 log(split_self / (combined_earning \u00d7 (token_self / (token_self + token_opp))))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer in the current trial\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"intercept_bias\": {\n      \"description\": \"Participant's baseline tendency to accept or reject offers, independent of fairness\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity to the log ratio of the offered amount to the deserved amount; negative values reflect aversion to unfair offers, positive values reflect seeking larger than deserved offers\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10.0,\n          \"high\": 10.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed monetary share (\u00a3) to the participant (responder) in the current trial\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 500.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Sum of both players' tokens multiplied by \u00a33; total money in the pot for the current trial\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (responder)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA two-parameter model in which responders evaluate offers using the log-ratio of proposed share to their deserved share based on contribution, plus a baseline acceptance bias. This structure ensures high parameter identifiability, as the intercept and fairness sensitivity have distinct, non-collinear influences. It accommodates both proportional and absolute fairness differences, scales across different pot sizes, and is optimized for both accuracy and parameter recovery.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = intercept_bias + alpha \u00d7 log(split_self / (combined_earning \u00d7 (token_self / (token_self + token_opp))))\nSummary: A two-parameter model in which responders evaluate offers using the log-ratio of proposed share to their deserved share based on contribution, plus a baseline acceptance bias. This structure ensures high parameter identifiability, as the intercept and fairness sensitivity have distinct, non-collinear influences. It accommodates both proportional and absolute fairness differences, scales across different pot sizes, and is optimized for both accuracy and parameter recovery.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, intercept_bias=0.0, alpha=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0.0)\n        combined_earning = trial.get(\"combined_earning\", 0.0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Avoid division by zero\n        if (token_self + token_opp) == 0:\n            deserved_share = 0.0\n        else:\n            deserved_share = combined_earning * (token_self / (token_self + token_opp))\n\n        # Calculate fairness ratio, handling potential division by zero\n        if deserved_share == 0.0:\n            fairness_ratio = 0.0  # Or handle differently, e.g., set to 1.0?\n        else:\n            fairness_ratio = split_self / deserved_share\n\n        # Calculate utility\n        if fairness_ratio <= 0.0:  #Handle log of 0 or negative numbers\n            utility = float('-inf') #Reject\n        else:\n            utility = intercept_bias + alpha * math.log(fairness_ratio)\n        model_predictions.append(utility)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7863247863247863,
  "group_accuracies": {
    "Control": 0.8339793281653747,
    "Cocaine": 0.7436342592592593
  },
  "group_parameter_averages": {
    "Control": {
      "intercept_bias": 4.817257378141564,
      "alpha": 4.031965283885793
    },
    "Cocaine": {
      "intercept_bias": 1.7713193408868697,
      "alpha": 3.748176374936701
    }
  },
  "fitting_results": [
    {
      "intercept_bias": -1.0459414739173039,
      "alpha": 5.69203062799707,
      "success": true,
      "log_likelihood": -6.5407801868933,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 2.6570713574733666,
      "alpha": 5.096644095734922,
      "success": true,
      "log_likelihood": -15.494777537694679,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 5.415701640108172,
      "alpha": 10.0,
      "success": true,
      "log_likelihood": -9.14561337740932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 2.4180348880488043,
      "alpha": 5.9218310369169425,
      "success": true,
      "log_likelihood": -14.24540574321737,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 4.453816678830683,
      "alpha": 10.0,
      "success": true,
      "log_likelihood": -9.87756637994402,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 4.37348568322397,
      "alpha": 6.164321562958536,
      "success": true,
      "log_likelihood": -12.38877136512266,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 10.0,
      "alpha": -3.5916562400253413,
      "success": true,
      "log_likelihood": -0.0006758010209129022,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 4.885807999226162,
      "alpha": 6.53885588228238,
      "success": true,
      "log_likelihood": -11.41810123019218,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 10.0,
      "alpha": -3.5502093641662213,
      "success": true,
      "log_likelihood": -0.0006757516653067515,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 3.6408062854532366,
      "alpha": 9.569248794802318,
      "success": true,
      "log_likelihood": -10.151484341325864,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 4.453816342180284,
      "alpha": 10.0,
      "success": true,
      "log_likelihood": -5.459238858760829,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": -0.5992992708920557,
      "alpha": 5.501694665643961,
      "success": true,
      "log_likelihood": -8.099503227152274,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 4.1340632385291975,
      "alpha": 10.0,
      "success": true,
      "log_likelihood": -8.983822134197558,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 10.0,
      "alpha": -3.5491998674687255,
      "success": true,
      "log_likelihood": -0.0006757521197804292,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 10.0,
      "alpha": -3.551566229339261,
      "success": true,
      "log_likelihood": -0.0006757511788311665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 10.0,
      "alpha": -3.554665820105396,
      "success": true,
      "log_likelihood": -0.0006757506024706311,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 10.0,
      "alpha": -3.583939208309333,
      "success": true,
      "log_likelihood": -0.0006757817897261713,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 10.0,
      "alpha": 9.102827714868472,
      "success": true,
      "log_likelihood": -3.7660571041679884,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 7.237116968621498,
      "alpha": 5.6842579644258775,
      "success": true,
      "log_likelihood": -5.63004292205827,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 10.0,
      "alpha": -3.554153314266408,
      "success": true,
      "log_likelihood": -0.0006757506464350391,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 3.6360723940877917,
      "alpha": 6.148969006417207,
      "success": true,
      "log_likelihood": -13.480293796046436,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 6.488457926017089,
      "alpha": 5.4929432799502536,
      "success": true,
      "log_likelihood": -6.997268645137854,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 1.2060451272106107,
      "alpha": 3.9030513982466584,
      "success": true,
      "log_likelihood": -17.12653205940152,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 2.4965062293430695,
      "alpha": 4.409634942811099,
      "success": true,
      "log_likelihood": -16.568531848956766,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 3.139813884780328,
      "alpha": 6.066448202306678,
      "success": true,
      "log_likelihood": -13.984231247679507,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 3.9647304701637363,
      "alpha": 6.3113222433336125,
      "success": true,
      "log_likelihood": -12.960765670949485,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 4.341040606823066,
      "alpha": 7.432580374437314,
      "success": true,
      "log_likelihood": -11.835450560304723,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 2.4505028249603025,
      "alpha": 10.0,
      "success": true,
      "log_likelihood": -5.290645808419642,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 4.47585101682608,
      "alpha": 3.0054993792365816,
      "success": true,
      "log_likelihood": -9.205736485980802,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 3.1609855976605754,
      "alpha": 2.7723069436785197,
      "success": true,
      "log_likelihood": -14.790164973213534,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 10.0,
      "alpha": -3.53768476657524,
      "success": true,
      "log_likelihood": -0.0006757628952091634,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": -1.045944568492795,
      "alpha": 5.692031915917478,
      "success": true,
      "log_likelihood": -6.540780186904366,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 1.0979171757255066,
      "alpha": 2.8814413478205485,
      "success": true,
      "log_likelihood": -19.692085806468818,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 2.4344488587976394,
      "alpha": 6.509622412679205,
      "success": true,
      "log_likelihood": -13.326622101763808,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 10.0,
      "alpha": -3.5489641370565628,
      "success": true,
      "log_likelihood": -0.0006757522372785627,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 3.3754321941176935,
      "alpha": 4.585457877332528,
      "success": true,
      "log_likelihood": -14.880192290202345,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 6.639012357180463,
      "alpha": 8.596601258685165,
      "success": true,
      "log_likelihood": -8.780603363804097,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 3.040811549749727,
      "alpha": 5.867332458967921,
      "success": true,
      "log_likelihood": -14.275302481123875,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 2.874765204614904,
      "alpha": 3.491826420381531,
      "success": true,
      "log_likelihood": -16.476412324619577,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 4.291599727408032,
      "alpha": 2.4124904990911484,
      "success": true,
      "log_likelihood": -8.40500900070644,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 2.5026276173406843,
      "alpha": 3.470163973189286,
      "success": true,
      "log_likelihood": -17.559645386107505,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 1.1095178937037617,
      "alpha": 7.295704797372425,
      "success": true,
      "log_likelihood": -10.287766022988519,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 3.4373928351829757,
      "alpha": -0.22059492308406506,
      "success": true,
      "log_likelihood": -4.5643782431639135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "intercept_bias": 2.819407019717684,
      "alpha": 4.660640816428432,
      "success": true,
      "log_likelihood": -15.880216974400609,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 3.916423187518226,
      "alpha": 5.823926404372156,
      "success": true,
      "log_likelihood": -13.299193824915125,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 2.646654060570563,
      "alpha": 2.607560024740223,
      "success": true,
      "log_likelihood": -17.027121137841405,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 2.8569882512234375,
      "alpha": 5.098045874811312,
      "success": true,
      "log_likelihood": -15.339698079228981,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 1.0752538014335975,
      "alpha": 3.179099986221981,
      "success": true,
      "log_likelihood": -18.828763524619575,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 2.7016478421148324,
      "alpha": 6.592886917318232,
      "success": true,
      "log_likelihood": -13.333838864629058,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 0.5643582656587545,
      "alpha": 0.8098538042618184,
      "success": true,
      "log_likelihood": -24.268453952588306,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 2.227668876409773,
      "alpha": 2.24393107319496,
      "success": true,
      "log_likelihood": -18.662538407723662,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": -0.6021982649033603,
      "alpha": 3.492240626786745,
      "success": true,
      "log_likelihood": -11.426586416554306,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 2.071817236903929,
      "alpha": 3.601145063670907,
      "success": true,
      "log_likelihood": -18.18388628110056,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 1.1447671927309397,
      "alpha": 1.4087229377920012,
      "success": true,
      "log_likelihood": -22.724543856473492,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 0.9281201933888603,
      "alpha": 2.8369829692870097,
      "success": true,
      "log_likelihood": -19.533026118701947,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 3.1451712039923745,
      "alpha": 10.0,
      "success": true,
      "log_likelihood": -6.1329293223194385,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 2.1017232725319412,
      "alpha": 8.73861438310635,
      "success": true,
      "log_likelihood": -9.966347988672718,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 1.4121132909630025,
      "alpha": -1.5203069608523687,
      "success": true,
      "log_likelihood": -11.845609986063007,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": -0.6749798637913689,
      "alpha": 4.95001036056675,
      "success": true,
      "log_likelihood": -8.567042959219872,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 3.155466039802872,
      "alpha": 2.4826891417998733,
      "success": true,
      "log_likelihood": -14.303653412817411,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 1.7673677524881406,
      "alpha": 2.2382858722130656,
      "success": true,
      "log_likelihood": -20.417867272143376,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 2.9255096185497034,
      "alpha": 5.635564405797171,
      "success": true,
      "log_likelihood": -14.626189897066716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": -1.0459414988027054,
      "alpha": 5.692034087515482,
      "success": true,
      "log_likelihood": -6.540780186894342,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 1.0731800706475323,
      "alpha": 2.515538767389596,
      "success": true,
      "log_likelihood": -20.65927713019141,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 1.2250761373648626,
      "alpha": 7.793799473863882,
      "success": true,
      "log_likelihood": -9.861282223817787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 3.507544787802609,
      "alpha": 5.914848044961148,
      "success": true,
      "log_likelihood": -13.820056928320126,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 4.502453820671322,
      "alpha": 2.6238042833694126,
      "success": true,
      "log_likelihood": -8.108549775860954,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 4.360647578652115,
      "alpha": 3.2565363150701137,
      "success": true,
      "log_likelihood": -10.22165885992867,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 2.6521558045587144,
      "alpha": 4.355698285397214,
      "success": true,
      "log_likelihood": -16.446750406599158,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 3.250509430994158,
      "alpha": 1.2544622594756814,
      "success": true,
      "log_likelihood": -9.779306912171306,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": -0.11502402455685537,
      "alpha": 10.0,
      "success": true,
      "log_likelihood": -3.04012929584971,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": -0.5832664899030611,
      "alpha": 3.5788921431669514,
      "success": true,
      "log_likelihood": -11.326992704607008,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 2.13101898886269,
      "alpha": 3.713662950602123,
      "success": true,
      "log_likelihood": -17.947870685242293,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 2.8692603118170443,
      "alpha": 2.388341824872667,
      "success": true,
      "log_likelihood": -15.636074693348293,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 0.7139634521591601,
      "alpha": 1.2967786998153572,
      "success": true,
      "log_likelihood": -23.471566140456847,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 3.821967818345389,
      "alpha": 4.598758304042722,
      "success": true,
      "log_likelihood": -13.702724903270907,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 4.375595714454732,
      "alpha": 2.0008418672375523,
      "success": true,
      "log_likelihood": -6.741893358102933,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": -2.5790756545407287,
      "alpha": 0.49861392206268945,
      "success": true,
      "log_likelihood": -7.675533779328037,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 0.8807552850853236,
      "alpha": 0.747639587995478,
      "success": true,
      "log_likelihood": -23.529690189629495,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": -1.0459348015425696,
      "alpha": 5.6920163354121645,
      "success": true,
      "log_likelihood": -6.540780186960061,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 0.9636967197505416,
      "alpha": 1.53106433121773,
      "success": true,
      "log_likelihood": -22.90965300224045,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 2.272601832414685,
      "alpha": -0.23370099309262882,
      "success": true,
      "log_likelihood": -10.309814113612692,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": -1.046425991191442,
      "alpha": 2.8493665322069184,
      "success": true,
      "log_likelihood": -10.60466494243958,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 3.7080650883651765,
      "alpha": 7.210879100782408,
      "success": true,
      "log_likelihood": -12.48587264879132,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 0.9666175645267772,
      "alpha": 0.8937000738124781,
      "success": true,
      "log_likelihood": -23.314464427649863,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": -0.20099289092517483,
      "alpha": 9.091272975239601,
      "success": true,
      "log_likelihood": -5.8983449531008905,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 2.3667666999851935,
      "alpha": 2.452611605167891,
      "success": true,
      "log_likelihood": -18.168043446055826,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 0.3530112781773271,
      "alpha": 4.296260391923999,
      "success": true,
      "log_likelihood": -13.641046812815434,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 5.75935720321959,
      "alpha": 3.2752499151317367,
      "success": true,
      "log_likelihood": -5.414806003168333,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 2.3147773506825544,
      "alpha": 4.791263422886348,
      "success": true,
      "log_likelihood": -16.094716212076946,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "intercept_bias": 1.3876877981908777,
      "alpha": 0.9523377879183318,
      "success": true,
      "log_likelihood": -21.38507740026925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "intercept_bias": {
        "r": 0.896437569252736,
        "p": 2.0679614673906054e-36
      },
      "alpha": {
        "r": 0.8493782482144077,
        "p": 5.959574088345577e-29
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 30.417160847596072,
  "bic_Control": 24.759394368365047,
  "bic_Cocaine": 35.485576651907195,
  "bic_results": {
    "average_bic": 30.417160847596072,
    "individual_bics": [
      20.24859825069882,
      38.15659295230158,
      25.458264631730863,
      35.65784936334696,
      26.92217063680026,
      31.94458060715754,
      7.168389478954046,
      30.00324033729658,
      7.168389380242833,
      27.47000655956395,
      18.08551559443388,
      23.36604433121677,
      25.134682145307337,
      7.168389381151781,
      7.1683893792698825,
      7.168389378117161,
      7.168389440491672,
      14.699152085248198,
      18.42712372102876,
      7.16838937820509,
      34.12762546900509,
      21.161575167187927,
      41.42010199571526,
      40.30410157482575,
      35.13550037227123,
      33.08856921881119,
      30.83793899752167,
      17.748329493751505,
      25.578510848873826,
      36.74736782333929,
      7.168389402702638,
      20.248598250720953,
      46.55120948984985,
      33.82028208043984,
      7.168389381386777,
      36.92742245731691,
      24.728244604520413,
      35.71764283915997,
      40.11986252615137,
      23.977055878325103,
      42.28632864912723,
      27.74256992288926,
      16.29579436324005,
      38.92747182571344,
      33.76542552674247,
      41.22128015259503,
      37.84643403537018,
      44.82456492615137,
      33.834715606170334,
      55.70394578208883,
      44.49211469235954,
      30.020210710020834,
      43.534810439113336,
      52.6161255898592,
      46.23309011431611,
      19.432896521551097,
      27.099733854257657,
      30.85825784903823,
      24.301123795351963,
      35.77434470254704,
      48.00277242119897,
      36.41941767104565,
      20.2485982507009,
      48.485592137295036,
      26.889602324547795,
      34.80715173355247,
      23.384137428634126,
      27.61035559676956,
      40.06053869011053,
      26.725651701254833,
      13.24729646861164,
      29.821023286126234,
      43.062779247396804,
      38.43918726360881,
      54.11017015782591,
      34.572487683454035,
      20.650824593118088,
      22.518105435568295,
      54.22641825617121,
      20.24859825083234,
      52.98634388139312,
      27.786666104137602,
      28.37636776179138,
      32.13878317449486,
      53.795966732211944,
      18.963727783114003,
      43.50312476902387,
      34.44913150254309,
      17.996649883248885,
      39.35647030106611,
      49.93719267745072
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        20.24859825069882,
        38.15659295230158,
        25.458264631730863,
        35.65784936334696,
        26.92217063680026,
        31.94458060715754,
        7.168389478954046,
        30.00324033729658,
        7.168389380242833,
        27.47000655956395,
        18.08551559443388,
        23.36604433121677,
        25.134682145307337,
        7.168389381151781,
        7.1683893792698825,
        7.168389378117161,
        7.168389440491672,
        14.699152085248198,
        18.42712372102876,
        7.16838937820509,
        34.12762546900509,
        21.161575167187927,
        41.42010199571526,
        40.30410157482575,
        35.13550037227123,
        33.08856921881119,
        30.83793899752167,
        17.748329493751505,
        25.578510848873826,
        36.74736782333929,
        7.168389402702638,
        20.248598250720953,
        46.55120948984985,
        33.82028208043984,
        7.168389381386777,
        36.92742245731691,
        24.728244604520413,
        35.71764283915997,
        40.11986252615137,
        23.977055878325103,
        42.28632864912723,
        27.74256992288926,
        16.29579436324005
      ],
      "Cocaine": [
        38.92747182571344,
        33.76542552674247,
        41.22128015259503,
        37.84643403537018,
        44.82456492615137,
        33.834715606170334,
        55.70394578208883,
        44.49211469235954,
        30.020210710020834,
        43.534810439113336,
        52.6161255898592,
        46.23309011431611,
        19.432896521551097,
        27.099733854257657,
        30.85825784903823,
        24.301123795351963,
        35.77434470254704,
        48.00277242119897,
        36.41941767104565,
        20.2485982507009,
        48.485592137295036,
        26.889602324547795,
        34.80715173355247,
        23.384137428634126,
        27.61035559676956,
        40.06053869011053,
        26.725651701254833,
        13.24729646861164,
        29.821023286126234,
        43.062779247396804,
        38.43918726360881,
        54.11017015782591,
        34.572487683454035,
        20.650824593118088,
        22.518105435568295,
        54.22641825617121,
        20.24859825083234,
        52.98634388139312,
        27.786666104137602,
        28.37636776179138,
        32.13878317449486,
        53.795966732211944,
        18.963727783114003,
        43.50312476902387,
        34.44913150254309,
        17.996649883248885,
        39.35647030106611,
        49.93719267745072
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- intercept_bias: r = 0.896\n- alpha: r = 0.849",
  "previous_models": [
    "Specification: U = intercept_bias + alpha \u00d7 log(split_self / (combined_earning \u00d7 (token_self / (token_self + token_opp))))\nSummary: A two-parameter model in which responders evaluate offers using the log-ratio of proposed share to their deserved share based on contribution, plus a baseline acceptance bias. This structure ensures high parameter identifiability, as the intercept and fairness sensitivity have distinct, non-collinear influences. It accommodates both proportional and absolute fairness differences, scales across different pot sizes, and is optimized for both accuracy and parameter recovery.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 30.417160847596072\nOverall Accuracy: 0.7863\nGroup Accuracies:\n- Control: 0.8340\n- Cocaine: 0.7436\n\nParameter Recovery:\n- intercept_bias: r = 0.896\n- alpha: r = 0.849"
  ]
}