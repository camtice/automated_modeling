{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should directly predict a numerical value (not a binary choice). The model's predictions will be compared to actual values using mean squared error.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let me reason step by step:\n\n1. **Key Psychological Mechanisms Involved:**\n\n   As the proposer in the ultimatum game, the participant must choose what share of the combined earnings (\"combined_earning\") to offer to the responder (opponent). Several key psychological mechanisms drive this choice:\n   - **Self-interest**: Desire to maximize own payoff (offer less, keep more).\n   - **Fairness Considerations**: Desire to offer an amount seen as \u201cfair,\u201d which may depend on each person\u2019s contribution (\"token_self\", \"token_opp\").\n   - **Inequality Aversion/Aversion to Being Unfair**: People may dislike generating large disparities, especially when the responder contributed more.\n   - **Strategic Considerations**: Proposer may not want to offer too little, fearing rejection. But since we are not modeling actual feedback (the accept variable is not provided in proposer trials), we focus on basic fairness norms/heuristics.\n   \n   Common findings: Offers increase when the responder contributed more.\n\n2. **Interaction of Mechanisms:**\n\n   These mechanisms operate together. The norm for fairness depends on relative contributions. Self-interest puts downward pressure on offers; fairness/inequality aversion counteract that. The proposer weighs these in constructing an offer.\n\n3. **Mathematical Form:**\n\n   The most foundational, low-covariance proposal is:\n   - Offer = weighted average of \u201cequitable split\u201d (i.e., proportional to contributions) and pure self-interest (offer 0).\n   - Or more generally: The participant may anchor their offer around a fairness norm, but allow for a bias toward self-interest (\u201cgreed\u201d) or increased generosity (\u201caltruism\u201d).\n\n   Let:\n   - **Normative fair share** = proportion of total pot that matches the opponent's relative contribution: `fair_perc_opp = token_opp / (token_opp + token_self) * 100`\n   - The proposer gives a weighted portion of this, plus some constant bias, plus noise.\n\n   We want minimal\u2014but sufficient\u2014parameters:\n   - One learnable weighting w on fairness (how closely participant follows fairness norm)\n   - One bias parameter b (how generous overall)\n   - Noise/variance parameter is not needed for point prediction in MSE, but will keep stochasticity out for parameter recovery goals. If noise is needed it would enter only in a generative model, not for point predictions.\n\n   If we add more than this\u2014e.g., additional weights for trial_type (whether the participant or opponent contributed more), or strong nonlinearity/interaction between variables\u2014it increases risk of under-identification (parameter covariance), especially given only 14 proposer datapoints.\n\n   So, optimal compromise:\n   - Predict: proposed_perc (as percent; [0,100])\n   - Let predicted = w*(fair_perc_opp) + b\n     (and optionally, could soft-clip to [0,100], but this is more a data handling choice than a model parameter).\n\n4. **Parameters:**\n\n   - **w**: scaling of fairness norm (range: [0,2] \u2013\u2013 0=ignore fairness, 1=follow norm, >1=over-weight fairness)\n   - **b**: bias/intercept (range: [-50,50] generously allows for overall generosity or stinginess)\n\n   No further parameters warranted unless justified by exceptionally high variance or patterning, and fewer parameters reduce covariance and increase parameter recoverability.\n\n5. **Mapping to Observable Behavior:**\n\n   Given trial_role == 2 (proposer turn), for each trial:\n   - Inputs: token_self, token_opp\n   - Compute fair_perc_opp\n   - predicted proposed_perc = w*fair_perc_opp + b\n   This fits observed pattern: for high (resp. low) opponent contribution, offers increase (resp. decrease). The parameter w captures how strongly the participant anchors to the fairness norm; b captures generosity/greed beyond fairness.\n\n**Now, to formalize:**\n\n<MODEL>\npredicted_proposed_perc = weight_fairness * (token_opp / (token_self + token_opp) * 100) + bias_generosity\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"predicted_proposed_perc\": {\n      \"description\": \"Model's predicted proposed percentage offered to opponent [0-100]\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"weight_fairness\": {\n      \"description\": \"Weight placed on the fairness norm (proportional to opponent contribution); 1 = match norm, 0 = ignore fairness, >1 = over-weight fairness\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 2\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete_uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 30\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete_uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 30\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"bias_generosity\": {\n      \"description\": \"Intercept term capturing overall generosity or stinginess regardless of fairness norm\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -50,\n          \"high\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA model predicting proposer behavior as a weighted combination of the fairness norm (giving the opponent a share proportional to their relative contribution) and an overall generosity/stinginess bias. Only two learnable parameters calibrate how closely the participant follows fairness norms and how generous or selfish they are overall, ensuring parameter recovery and interpretability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['weight_fairness', 'bias_generosity']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                predicted_proposed_perc = weight_fairness * (token_opp / (token_self + token_opp) * 100) + bias_generosity\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"predicted_proposed_perc\": {\n      \"description\": \"Model's predicted proposed percentage offered to opponent [0-100]\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"weight_fairness\": {\n      \"description\": \"Weight placed on the fairness norm (proportional to opponent contribution); 1 = match norm, 0 = ignore fairness, >1 = over-weight fairness\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 2\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete_uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 30\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete_uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 30\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"bias_generosity\": {\n      \"description\": \"Intercept term capturing overall generosity or stinginess regardless of fairness norm\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -50,\n          \"high\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, weight_fairness=1, bias_generosity=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        if (token_self + token_opp) == 0:\n            fairness_component = 0  # Avoid division by zero\n        else:\n            fairness_component = weight_fairness * (token_opp / (token_self + token_opp) * 100)\n\n        predicted_proposed_perc = fairness_component + bias_generosity\n        model_predictions.append(predicted_proposed_perc)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 15, \"token_self\": 15, \"combined_earning\": 6, \"split_opp\": 3.0, \"split_self\": 3.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 3.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 3.0}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 2, \"token_opp\": 18, \"token_self\": 12, \"combined_earning\": 6, \"split_opp\": 2.4, \"split_self\": 3.6, \"splitperc_opp\": 40, \"splitperc_self\": 60, \"accept\": 1.0, \"accepted_amount\": 2.4, \"accepted_perc\": 40.0, \"proposed_perc\": 40.0, \"proposed_amount\": 2.4}, {\"ID\": 3, \"group\": \"control\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 11, \"token_self\": 19, \"combined_earning\": 6, \"split_opp\": 3.6, \"split_self\": 2.4, \"splitperc_opp\": 60, \"splitperc_self\": 40, \"accept\": 1.0, \"accepted_amount\": 3.6, \"accepted_perc\": 60.0, \"proposed_perc\": 60.0, \"proposed_amount\": 3.6}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1744744105.222999
    }
  ],
  "learnable_parameters": {
    "weight_fairness": {
      "description": "Weight placed on the fairness norm (proportional to opponent contribution); 1 = match norm, 0 = ignore fairness, >1 = over-weight fairness",
      "range": {
        "min": 0,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 2
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "bias_generosity": {
      "description": "Intercept term capturing overall generosity or stinginess regardless of fairness norm",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -50,
          "high": 50
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "predicted_proposed_perc = weight_fairness * (token_opp / (token_self + token_opp) * 100) + bias_generosity",
  "variable_descriptions": {
    "predicted_proposed_perc": {
      "description": "Model's predicted proposed percentage offered to opponent [0-100]",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "weight_fairness": {
      "description": "Weight placed on the fairness norm (proportional to opponent contribution); 1 = match norm, 0 = ignore fairness, >1 = over-weight fairness",
      "range": {
        "min": 0,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 2
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "token_opp": {
      "description": "Number of tokens found by opponent",
      "range": {
        "min": 0,
        "max": 30,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "discrete_uniform",
        "parameters": {
          "low": 0,
          "high": 30
        }
      },
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by participant",
      "range": {
        "min": 0,
        "max": 30,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "discrete_uniform",
        "parameters": {
          "low": 0,
          "high": 30
        }
      },
      "learnable": false,
      "source": "data"
    },
    "bias_generosity": {
      "description": "Intercept term capturing overall generosity or stinginess regardless of fairness norm",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -50,
          "high": 50
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A model predicting proposer behavior as a weighted combination of the fairness norm (giving the opponent a share proportional to their relative contribution) and an overall generosity/stinginess bias. Only two learnable parameters calibrate how closely the participant follows fairness norms and how generous or selfish they are overall, ensuring parameter recovery and interpretability.",
  "target_variable": "proposed_perc",
  "full_reasoning": "Let me reason step by step:\n\n1. **Key Psychological Mechanisms Involved:**\n\n   As the proposer in the ultimatum game, the participant must choose what share of the combined earnings (\"combined_earning\") to offer to the responder (opponent). Several key psychological mechanisms drive this choice:\n   - **Self-interest**: Desire to maximize own payoff (offer less, keep more).\n   - **Fairness Considerations**: Desire to offer an amount seen as \u201cfair,\u201d which may depend on each person\u2019s contribution (\"token_self\", \"token_opp\").\n   - **Inequality Aversion/Aversion to Being Unfair**: People may dislike generating large disparities, especially when the responder contributed more.\n   - **Strategic Considerations**: Proposer may not want to offer too little, fearing rejection. But since we are not modeling actual feedback (the accept variable is not provided in proposer trials), we focus on basic fairness norms/heuristics.\n   \n   Common findings: Offers increase when the responder contributed more.\n\n2. **Interaction of Mechanisms:**\n\n   These mechanisms operate together. The norm for fairness depends on relative contributions. Self-interest puts downward pressure on offers; fairness/inequality aversion counteract that. The proposer weighs these in constructing an offer.\n\n3. **Mathematical Form:**\n\n   The most foundational, low-covariance proposal is:\n   - Offer = weighted average of \u201cequitable split\u201d (i.e., proportional to contributions) and pure self-interest (offer 0).\n   - Or more generally: The participant may anchor their offer around a fairness norm, but allow for a bias toward self-interest (\u201cgreed\u201d) or increased generosity (\u201caltruism\u201d).\n\n   Let:\n   - **Normative fair share** = proportion of total pot that matches the opponent's relative contribution: `fair_perc_opp = token_opp / (token_opp + token_self) * 100`\n   - The proposer gives a weighted portion of this, plus some constant bias, plus noise.\n\n   We want minimal\u2014but sufficient\u2014parameters:\n   - One learnable weighting w on fairness (how closely participant follows fairness norm)\n   - One bias parameter b (how generous overall)\n   - Noise/variance parameter is not needed for point prediction in MSE, but will keep stochasticity out for parameter recovery goals. If noise is needed it would enter only in a generative model, not for point predictions.\n\n   If we add more than this\u2014e.g., additional weights for trial_type (whether the participant or opponent contributed more), or strong nonlinearity/interaction between variables\u2014it increases risk of under-identification (parameter covariance), especially given only 14 proposer datapoints.\n\n   So, optimal compromise:\n   - Predict: proposed_perc (as percent; [0,100])\n   - Let predicted = w*(fair_perc_opp) + b\n     (and optionally, could soft-clip to [0,100], but this is more a data handling choice than a model parameter).\n\n4. **Parameters:**\n\n   - **w**: scaling of fairness norm (range: [0,2] \u2013\u2013 0=ignore fairness, 1=follow norm, >1=over-weight fairness)\n   - **b**: bias/intercept (range: [-50,50] generously allows for overall generosity or stinginess)\n\n   No further parameters warranted unless justified by exceptionally high variance or patterning, and fewer parameters reduce covariance and increase parameter recoverability.\n\n5. **Mapping to Observable Behavior:**\n\n   Given trial_role == 2 (proposer turn), for each trial:\n   - Inputs: token_self, token_opp\n   - Compute fair_perc_opp\n   - predicted proposed_perc = w*fair_perc_opp + b\n   This fits observed pattern: for high (resp. low) opponent contribution, offers increase (resp. decrease). The parameter w captures how strongly the participant anchors to the fairness norm; b captures generosity/greed beyond fairness.\n\n**Now, to formalize:**\n\n<MODEL>\npredicted_proposed_perc = weight_fairness * (token_opp / (token_self + token_opp) * 100) + bias_generosity\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"predicted_proposed_perc\": {\n      \"description\": \"Model's predicted proposed percentage offered to opponent [0-100]\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"weight_fairness\": {\n      \"description\": \"Weight placed on the fairness norm (proportional to opponent contribution); 1 = match norm, 0 = ignore fairness, >1 = over-weight fairness\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 2\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete_uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 30\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"discrete_uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 30\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"bias_generosity\": {\n      \"description\": \"Intercept term capturing overall generosity or stinginess regardless of fairness norm\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -50,\n          \"high\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA model predicting proposer behavior as a weighted combination of the fairness norm (giving the opponent a share proportional to their relative contribution) and an overall generosity/stinginess bias. Only two learnable parameters calibrate how closely the participant follows fairness norms and how generous or selfish they are overall, ensuring parameter recovery and interpretability.\n</SUMMARY>",
  "prediction_type": "numerical_variable_estimation",
  "current_model": "Specification: predicted_proposed_perc = weight_fairness * (token_opp / (token_self + token_opp) * 100) + bias_generosity\nSummary: A model predicting proposer behavior as a weighted combination of the fairness norm (giving the opponent a share proportional to their relative contribution) and an overall generosity/stinginess bias. Only two learnable parameters calibrate how closely the participant follows fairness norms and how generous or selfish they are overall, ensuring parameter recovery and interpretability.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, weight_fairness=1, bias_generosity=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        if (token_self + token_opp) == 0:\n            fairness_component = 0  # Avoid division by zero\n        else:\n            fairness_component = weight_fairness * (token_opp / (token_self + token_opp) * 100)\n\n        predicted_proposed_perc = fairness_component + bias_generosity\n        model_predictions.append(predicted_proposed_perc)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "group_parameter_averages": {
    "Control": {
      "weight_fairness": 0.23362489388934496,
      "bias_generosity": 29.884646685939742
    },
    "Cocaine": {
      "weight_fairness": 0.11209861236953468,
      "bias_generosity": 30.603402656412342
    }
  },
  "fitting_results": [
    {
      "weight_fairness": 0.0,
      "bias_generosity": 50.0,
      "success": true,
      "mse": 0.0,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.5229357855329194,
      "bias_generosity": 17.853210328416907,
      "success": true,
      "mse": 19.840978593272308,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.7293577275842883,
      "bias_generosity": 0.19878026393138526,
      "success": true,
      "mse": 16.320081549440157,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 50.0,
      "success": true,
      "mse": 0.0,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.5917431117097058,
      "bias_generosity": 14.412844187700745,
      "success": true,
      "mse": 20.788990825688128,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.6605506799420687,
      "bias_generosity": 2.972465005410253,
      "success": true,
      "mse": 46.87461773701195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 50.0,
      "success": true,
      "mse": 0.0,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.24770628155397367,
      "bias_generosity": 32.28135280848112,
      "success": true,
      "mse": 68.31396534149152,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 50.0,
      "success": true,
      "mse": 0.0,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.24770639969985164,
      "bias_generosity": 34.28134649044791,
      "success": true,
      "mse": 12.313965341488393,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.24770640991754617,
      "bias_generosity": 34.94801261197488,
      "success": true,
      "mse": 9.64729867482168,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 50.0,
      "success": true,
      "mse": 0.0,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.495412715055854,
      "bias_generosity": 16.56269772885022,
      "success": true,
      "mse": 11.922528032622491,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.13761462560076893,
      "bias_generosity": 40.45260195713097,
      "success": true,
      "mse": 29.83078491335419,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 50.0,
      "success": true,
      "mse": 0.0,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.2752293229625667,
      "bias_generosity": 32.90520035537727,
      "success": true,
      "mse": 9.98980632008177,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 50.0,
      "success": true,
      "mse": 0.0,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.11009167640447105,
      "bias_generosity": 37.162082793869224,
      "success": true,
      "mse": 30.9317023445471,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.13761478079631081,
      "bias_generosity": 37.119260359708775,
      "success": true,
      "mse": 60.94189602446688,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 50.0,
      "success": true,
      "mse": 0.0,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.13761455964583294,
      "bias_generosity": 24.452605476874375,
      "success": true,
      "mse": 21.83078491335603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.3853209962201618,
      "bias_generosity": 16.733950223549126,
      "success": true,
      "mse": 66.69113149847271,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.24770652563990997,
      "bias_generosity": 16.948006449697335,
      "success": true,
      "mse": 62.98063200815704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.13761475749472887,
      "bias_generosity": 37.78592826022401,
      "success": true,
      "mse": 21.830784913355,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.5229356767289645,
      "bias_generosity": 18.51988290892741,
      "success": true,
      "mse": 20.729867482162756,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.3165137360065098,
      "bias_generosity": 30.840979679809415,
      "success": true,
      "mse": 6.044852191641307,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 7.962949799544816e-09,
      "bias_generosity": 19.99999934636131,
      "success": true,
      "mse": 7.551506339996914e-14,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.4541284576577083,
      "bias_generosity": 22.626910130594666,
      "success": true,
      "mse": 18.252803261977693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.3577984029692282,
      "bias_generosity": 22.776745791333145,
      "success": true,
      "mse": 132.2161060142808,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.13761465662881794,
      "bias_generosity": 19.119266957789556,
      "success": true,
      "mse": 114.2752293577983,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.5229359320440303,
      "bias_generosity": 17.186536053059275,
      "success": true,
      "mse": 31.39653414883192,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 50.0,
      "success": true,
      "mse": 0.0,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 30.666666969996733,
      "success": true,
      "mse": 152.888888888889,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.3440368015653588,
      "bias_generosity": 22.131492655340217,
      "success": true,
      "mse": 133.7757390417962,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.06880684969469848,
      "bias_generosity": 19.892992205412753,
      "success": true,
      "mse": 74.79102956171234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 29.9999999030192,
      "success": true,
      "mse": 13.333333333333348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.38532118058484593,
      "bias_generosity": 24.0672737620378,
      "success": true,
      "mse": 24.913353720694495,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.2064220058479536,
      "bias_generosity": 36.345566140602756,
      "success": true,
      "mse": 15.341488277268173,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.3853210466152913,
      "bias_generosity": 16.733947578521086,
      "success": true,
      "mse": 66.69113149847142,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.35779806632958555,
      "bias_generosity": 20.77676340813355,
      "success": true,
      "mse": 17.54943934760607,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.13761432469097468,
      "bias_generosity": 21.119284710328078,
      "success": true,
      "mse": 132.941896024486,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.5366969361539572,
      "bias_generosity": 15.165153992497427,
      "success": true,
      "mse": 76.15290519879308,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 50.0,
      "success": true,
      "mse": 0.0,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 19.999999995006675,
      "success": true,
      "mse": 2.493329320442517e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 45.99999971455009,
      "success": true,
      "mse": 64.00000000000007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 21.999997457903124,
      "success": true,
      "mse": 56.00000000000643,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.1788991139692834,
      "bias_generosity": 26.38837727216115,
      "success": true,
      "mse": 46.3873598369014,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 19.999999994992397,
      "success": true,
      "mse": 2.5076090018714068e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.20642205769649485,
      "bias_generosity": 37.67889671965221,
      "success": true,
      "mse": 9.11926605504627,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 41.33333149794763,
      "success": true,
      "mse": 171.55555555555893,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.11009176553496919,
      "bias_generosity": 25.82874468806599,
      "success": true,
      "mse": 116.26503567787994,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 22.666666569833463,
      "success": true,
      "mse": 32.88888888888889,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.055045918848123335,
      "bias_generosity": 39.91437041156978,
      "success": true,
      "mse": 152.39959225280376,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.13761466179403037,
      "bias_generosity": 17.119266704344344,
      "success": true,
      "mse": 74.27522935779824,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.2477062901667376,
      "bias_generosity": 34.94801898657571,
      "success": true,
      "mse": 9.64729867482443,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.17889907893015386,
      "bias_generosity": 35.0550457933941,
      "success": true,
      "mse": 32.165137614678954,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.4954128486539094,
      "bias_generosity": 8.562690627452419,
      "success": true,
      "mse": 115.92252803261982,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0963303845620028,
      "bias_generosity": 29.850146803844186,
      "success": true,
      "mse": 50.05708460754566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 48.66666688208494,
      "success": true,
      "mse": 24.888888888888932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.3990821891980642,
      "bias_generosity": 22.712558166730684,
      "success": true,
      "mse": 47.1702344546623,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 34.66666788707879,
      "success": true,
      "mse": 144.8888888888904,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.3165135408699905,
      "bias_generosity": 28.174323397568457,
      "success": true,
      "mse": 74.48929663609367,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 36.00000072101436,
      "success": true,
      "mse": 224.00000000000054,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 26.66666934166349,
      "success": true,
      "mse": 142.22222222222936,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 39.33333334550405,
      "success": true,
      "mse": 72.8888888888889,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.04128432531465651,
      "bias_generosity": 47.26911705785548,
      "success": true,
      "mse": 5.946992864425051,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.20642192011721502,
      "bias_generosity": 37.67890404307525,
      "success": true,
      "mse": 49.119266055047454,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 48.66666666344216,
      "success": true,
      "mse": 24.88888888888889,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.4128439833151867,
      "bias_generosity": 9.357800791607156,
      "success": true,
      "mse": 172.47706422018393,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.3853210853471326,
      "bias_generosity": 5.400612176510413,
      "success": true,
      "mse": 40.913353720693266,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.23394487049226195,
      "bias_generosity": 16.969423139878558,
      "success": true,
      "mse": 96.05096839959339,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.2064222072605027,
      "bias_generosity": 25.6788885573277,
      "success": true,
      "mse": 217.11926605505278,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.4128440470287308,
      "bias_generosity": 13.357797362175274,
      "success": true,
      "mse": 89.81039755351692,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 49.33333343561647,
      "success": true,
      "mse": 6.2222222222222365,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.06880747694914231,
      "bias_generosity": 19.22629212355647,
      "success": true,
      "mse": 58.791029561675295,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.06880720042008187,
      "bias_generosity": 27.226306834926092,
      "success": true,
      "mse": 32.124362895008254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 23.33333423200283,
      "success": true,
      "mse": 75.55555555555637,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 25.33333248083595,
      "success": true,
      "mse": 118.22222222222292,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 48.66666630599593,
      "success": true,
      "mse": 24.888888888889024,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 47.99999954951999,
      "success": true,
      "mse": 16.000000000000203,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.17889922525007523,
      "bias_generosity": 27.72170470513295,
      "success": true,
      "mse": 150.3873598369049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 22.000000694762935,
      "success": true,
      "mse": 56.00000000000049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.2064219914366564,
      "bias_generosity": 37.67890017063731,
      "success": true,
      "mse": 22.45259938837939,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0688072887474887,
      "bias_generosity": 45.89296879484564,
      "success": true,
      "mse": 5.457696228338857,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 36.0000040169024,
      "success": true,
      "mse": 157.33333333334946,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 50.0,
      "success": true,
      "mse": 0.0,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 25.333331407580154,
      "success": true,
      "mse": 104.88888888889258,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.3027522014370241,
      "bias_generosity": 30.862389974653368,
      "success": true,
      "mse": 35.865443425077814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 19.999999994998305,
      "success": true,
      "mse": 2.501695345448848e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.16513772039775063,
      "bias_generosity": 21.7431133924535,
      "success": true,
      "mse": 128.92966360856482,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "weight_fairness": 0.0,
      "bias_generosity": 42.66666662256203,
      "success": true,
      "mse": 139.55555555555554,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "weight_fairness": {
        "r": 0.9999999999998421,
        "p": 0.0
      },
      "bias_generosity": {
        "r": 0.9999999999999155,
        "p": 0.0
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "bic_error": "math domain error",
  "recovery_summary": "Parameter Recovery:\n- weight_fairness: r = 1.000\n- bias_generosity: r = 1.000",
  "previous_models": [
    "Specification: predicted_proposed_perc = weight_fairness * (token_opp / (token_self + token_opp) * 100) + bias_generosity\nSummary: A model predicting proposer behavior as a weighted combination of the fairness norm (giving the opponent a share proportional to their relative contribution) and an overall generosity/stinginess bias. Only two learnable parameters calibrate how closely the participant follows fairness norms and how generous or selfish they are overall, ensuring parameter recovery and interpretability.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation\n\nParameter Recovery:\n- weight_fairness: r = 1.000\n- bias_generosity: r = 1.000"
  ]
}