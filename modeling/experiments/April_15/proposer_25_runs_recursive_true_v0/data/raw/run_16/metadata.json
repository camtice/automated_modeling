{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should directly predict a numerical value (not a binary choice). The model's predictions will be compared to actual values using mean squared error.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let's proceed step by step:\n\n**1. Key Psychological Mechanisms Involved:**\n\n- **Fairness Sensitivity:** Proposers often propose offers that are perceived as \u201cfair,\u201d but fairness here depends on both contributions (token_self and token_opp) and the total amount at stake (combined_earning).\n- **Self-interest vs. Fairness Tradeoff:** Proposers must choose between maximizing their own payoff (split_self) and making an offer likely to be accepted, which generally means making an offer that the responder views as fair given contributions.\n- **Inequity Aversion:** Proposers may dislike inequalities (either being too generous or too greedy).\n- **Habitual Offer Level (Baseline):** There may be a bias or baseline offer rate independent of trial features.\n\n**2. How These Mechanisms Interact:**\n\n- People may reference a \u201ccontribution-based fairness\u201d where the \u2018fair\u2019 share for the opponent is token_opp / (token_self + token_opp) \u00d7 100%. Offers may center around this, modulated by personal preferences for generosity, fairness aversion, and strategic risk (avoiding rejection).\n- There\u2019s a direct tension: maximally self-interested offers (giving the minimum) risk rejection; maximally fair offers maximize acceptance but minimize self gains.\n\n**3. Mathematical Form to Capture Interactions:**\n\n- The model should predict the **proposed_perc** for the opponent (as proposer). \n- The basic model could predict proposed_perc as a weighted combination of (a) the \u201ccontribution-fair\u201d percentage, (b) a baseline generosity, and (c) a flexible bias toward self-interest.\n- To avoid parameter degeneracy, it\u2019s best to minimize overlapping parameters: for example, a weighted mix between fairness and generosity, plus optional \u201cnoisy deviation.\u201d\n\n**4. Parameters Needed:**\n\n- **fairness_weight** (w): how much weight is put on contribution-based fairness vs. habitual generosity\n- **generosity_bias** (g): baseline generosity above/below fairness\n- **noise_sd** (sigma): how much randomness is in the proposer\u2019s action (captures unexplained variance)\n\n(Optionally, may also add a \u201cself-interest bias\u201d but this is usually collinear with fairness_weight/generosity_bias.)\n\n**5. Mapping Model Variables to Observed Data:**\n\n- The model must map (token_opp, token_self) to a predicted proposed_perc.\n- This predicted value is a function of the \u201cfair\u201d split, a generosity bias, and random noise.\n\n**Simplest plausible model:**\n\nLet \n- fair_perc_opp = 100 \u00d7 (token_opp) / (token_opp + token_self)  \n- proposed_perc_pred = w * fair_perc_opp + (1-w) * baseline_offer + g + error\n\nBut baseline_offer and g would be highly colinear. To minimize redundancy, we can instead use this formulation:\n\nproposed_perc_pred = fairness_weight * fair_perc_opp + generosity_bias + noise\n\nWhere:\n- fairness_weight allows for overweighting or underweighting the fair share (if greater/less than 1)\n- generosity_bias shifts offers up or down globally (positive = more generous, negative = stingier)\n\nThis 2-parameter formulation (plus noise) is both interpretable and avoids redundancy. No parameter is fully redundant with another.\n\n**6. Full Model Specification**\n\n- Only trials where trial_role == 2 are relevant.\n- For each such trial:\n    - \u201cFair\u201d proposal to opponent is fair_perc_opp = 100 \u00d7 token_opp / (token_opp + token_self)\n    - Model predicts: proposed_perc_pred = fairness_weight * fair_perc_opp + generosity_bias + noise\n    - Where noise is Normal(0, noise_sd), with noise_sd fixed for identifiability, or if treated as learnable, must be bounded (e.g., [0.01, 50])\n\n# Final specification follows:\n\n---\n\n<MODEL>\nproposed_perc_pred = fairness_weight * (100 * token_opp / (token_opp + token_self)) + generosity_bias + Normal(0, noise_sd)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"proposed_perc_pred\": {\n      \"description\": \"Model-predicted % of the total offered to the opponent as proposer, in range [0,100].\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Weighting of fairness (contribution-based offer calculation). 1 = perfectly fair, <1 = underweight, >1 = overweight fairness.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 2.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"generosity_bias\": {\n      \"description\": \"Additive bias toward generosity or stinginess, in percent points (%). Positive means more generous offers, negative means stingier.\",\n      \"range\": {\n        \"min\": -40,\n        \"max\": 40,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -40,\n          \"high\": 40\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent on this trial (integer \u2265 0).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant on this trial (integer \u2265 0).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"noise_sd\": {\n      \"description\": \"Standard deviation of Gaussian noise added to offers (expresses trial-to-trial variability or unexplained behavior).\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.01,\n          \"high\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA contribution-weighted fairness model: the proposer\u2019s offer to the opponent is predicted as a weighted sum of the \u201cfair\u201d (contribution-proportional) percentage, shifted by a generosity/stinginess bias, plus normally-distributed trialwise noise. Fairness weighting and additive generosity bias are both learnable subject to broad bounds, promoting good parameter recoverability and interpretability.\n</SUMMARY>\n"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['fairness_weight', 'generosity_bias', 'noise_sd']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                proposed_perc_pred = fairness_weight * (100 * token_opp / (token_opp + token_self)) + generosity_bias + Normal(0, noise_sd)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"proposed_perc_pred\": {\n      \"description\": \"Model-predicted % of the total offered to the opponent as proposer, in range [0,100].\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Weighting of fairness (contribution-based offer calculation). 1 = perfectly fair, <1 = underweight, >1 = overweight fairness.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 2.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"generosity_bias\": {\n      \"description\": \"Additive bias toward generosity or stinginess, in percent points (%). Positive means more generous offers, negative means stingier.\",\n      \"range\": {\n        \"min\": -40,\n        \"max\": 40,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -40,\n          \"high\": 40\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent on this trial (integer \\u2265 0).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant on this trial (integer \\u2265 0).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"noise_sd\": {\n      \"description\": \"Standard deviation of Gaussian noise added to offers (expresses trial-to-trial variability or unexplained behavior).\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.01,\n          \"high\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "<YOUR RESPONSE>\n```python\nimport json\nimport math\nimport random\n\ndef simulate_model(trial_data, fairness_weight=1.0, generosity_bias=0.0, noise_sd=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        # Calculate fairness percentage, avoid division by zero\n        if (token_opp + token_self) == 0:\n            fair_perc = 50.0  # Default to 50% if both are zero to avoid nan\n        else:\n            fair_perc = 100 * token_opp / (token_opp + token_self)\n\n        # Generate Gaussian noise using Box-Muller transform\n        u1, u2 = random.random(), random.random()\n        z = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        noise = z * noise_sd\n\n        # Calculate model prediction\n        proposed_perc_pred = fairness_weight * fair_perc + generosity_bias + noise\n\n        model_predictions.append(proposed_perc_pred)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 2, \"token_opp\": 50, \"token_self\": 50, \"combined_earning\": 20, \"split_opp\": 10.0, \"split_self\": 10.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 10.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 10.0}, {\"ID\": 1, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 2, \"token_opp\": 25, \"token_self\": 75, \"combined_earning\": 20, \"split_opp\": 5.0, \"split_self\": 15.0, \"splitperc_opp\": 25, \"splitperc_self\": 75, \"accept\": 1.0, \"accepted_amount\": 5.0, \"accepted_perc\": 25.0, \"proposed_perc\": 25.0, \"proposed_amount\": 5.0}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 2, \"token_opp\": 75, \"token_self\": 25, \"combined_earning\": 20, \"split_opp\": 15.0, \"split_self\": 5.0, \"splitperc_opp\": 75, \"splitperc_self\": 25, \"accept\": 1.0, \"accepted_amount\": 15.0, \"accepted_perc\": 75.0, \"proposed_perc\": 75.0, \"proposed_amount\": 15.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```</YOUR RESPONSE>",
      "timestamp": 1744744672.606032
    }
  ],
  "learnable_parameters": {
    "fairness_weight": {
      "description": "Weighting of fairness (contribution-based offer calculation). 1 = perfectly fair, <1 = underweight, >1 = overweight fairness.",
      "range": {
        "min": 0,
        "max": 2.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 2.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "generosity_bias": {
      "description": "Additive bias toward generosity or stinginess, in percent points (%). Positive means more generous offers, negative means stingier.",
      "range": {
        "min": -40,
        "max": 40,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -40,
          "high": 40
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "noise_sd": {
      "description": "Standard deviation of Gaussian noise added to offers (expresses trial-to-trial variability or unexplained behavior).",
      "range": {
        "min": 0.01,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.01,
          "high": 50
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "proposed_perc_pred = fairness_weight * (100 * token_opp / (token_opp + token_self)) + generosity_bias + Normal(0, noise_sd)",
  "variable_descriptions": {
    "proposed_perc_pred": {
      "description": "Model-predicted % of the total offered to the opponent as proposer, in range [0,100].",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fairness_weight": {
      "description": "Weighting of fairness (contribution-based offer calculation). 1 = perfectly fair, <1 = underweight, >1 = overweight fairness.",
      "range": {
        "min": 0,
        "max": 2.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 2.5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "generosity_bias": {
      "description": "Additive bias toward generosity or stinginess, in percent points (%). Positive means more generous offers, negative means stingier.",
      "range": {
        "min": -40,
        "max": 40,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -40,
          "high": 40
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent on this trial (integer \u2265 0).",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant on this trial (integer \u2265 0).",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "noise_sd": {
      "description": "Standard deviation of Gaussian noise added to offers (expresses trial-to-trial variability or unexplained behavior).",
      "range": {
        "min": 0.01,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.01,
          "high": 50
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A contribution-weighted fairness model: the proposer\u2019s offer to the opponent is predicted as a weighted sum of the \u201cfair\u201d (contribution-proportional) percentage, shifted by a generosity/stinginess bias, plus normally-distributed trialwise noise. Fairness weighting and additive generosity bias are both learnable subject to broad bounds, promoting good parameter recoverability and interpretability.",
  "target_variable": "proposed_perc",
  "full_reasoning": "Let's proceed step by step:\n\n**1. Key Psychological Mechanisms Involved:**\n\n- **Fairness Sensitivity:** Proposers often propose offers that are perceived as \u201cfair,\u201d but fairness here depends on both contributions (token_self and token_opp) and the total amount at stake (combined_earning).\n- **Self-interest vs. Fairness Tradeoff:** Proposers must choose between maximizing their own payoff (split_self) and making an offer likely to be accepted, which generally means making an offer that the responder views as fair given contributions.\n- **Inequity Aversion:** Proposers may dislike inequalities (either being too generous or too greedy).\n- **Habitual Offer Level (Baseline):** There may be a bias or baseline offer rate independent of trial features.\n\n**2. How These Mechanisms Interact:**\n\n- People may reference a \u201ccontribution-based fairness\u201d where the \u2018fair\u2019 share for the opponent is token_opp / (token_self + token_opp) \u00d7 100%. Offers may center around this, modulated by personal preferences for generosity, fairness aversion, and strategic risk (avoiding rejection).\n- There\u2019s a direct tension: maximally self-interested offers (giving the minimum) risk rejection; maximally fair offers maximize acceptance but minimize self gains.\n\n**3. Mathematical Form to Capture Interactions:**\n\n- The model should predict the **proposed_perc** for the opponent (as proposer). \n- The basic model could predict proposed_perc as a weighted combination of (a) the \u201ccontribution-fair\u201d percentage, (b) a baseline generosity, and (c) a flexible bias toward self-interest.\n- To avoid parameter degeneracy, it\u2019s best to minimize overlapping parameters: for example, a weighted mix between fairness and generosity, plus optional \u201cnoisy deviation.\u201d\n\n**4. Parameters Needed:**\n\n- **fairness_weight** (w): how much weight is put on contribution-based fairness vs. habitual generosity\n- **generosity_bias** (g): baseline generosity above/below fairness\n- **noise_sd** (sigma): how much randomness is in the proposer\u2019s action (captures unexplained variance)\n\n(Optionally, may also add a \u201cself-interest bias\u201d but this is usually collinear with fairness_weight/generosity_bias.)\n\n**5. Mapping Model Variables to Observed Data:**\n\n- The model must map (token_opp, token_self) to a predicted proposed_perc.\n- This predicted value is a function of the \u201cfair\u201d split, a generosity bias, and random noise.\n\n**Simplest plausible model:**\n\nLet \n- fair_perc_opp = 100 \u00d7 (token_opp) / (token_opp + token_self)  \n- proposed_perc_pred = w * fair_perc_opp + (1-w) * baseline_offer + g + error\n\nBut baseline_offer and g would be highly colinear. To minimize redundancy, we can instead use this formulation:\n\nproposed_perc_pred = fairness_weight * fair_perc_opp + generosity_bias + noise\n\nWhere:\n- fairness_weight allows for overweighting or underweighting the fair share (if greater/less than 1)\n- generosity_bias shifts offers up or down globally (positive = more generous, negative = stingier)\n\nThis 2-parameter formulation (plus noise) is both interpretable and avoids redundancy. No parameter is fully redundant with another.\n\n**6. Full Model Specification**\n\n- Only trials where trial_role == 2 are relevant.\n- For each such trial:\n    - \u201cFair\u201d proposal to opponent is fair_perc_opp = 100 \u00d7 token_opp / (token_opp + token_self)\n    - Model predicts: proposed_perc_pred = fairness_weight * fair_perc_opp + generosity_bias + noise\n    - Where noise is Normal(0, noise_sd), with noise_sd fixed for identifiability, or if treated as learnable, must be bounded (e.g., [0.01, 50])\n\n# Final specification follows:\n\n---\n\n<MODEL>\nproposed_perc_pred = fairness_weight * (100 * token_opp / (token_opp + token_self)) + generosity_bias + Normal(0, noise_sd)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"proposed_perc_pred\": {\n      \"description\": \"Model-predicted % of the total offered to the opponent as proposer, in range [0,100].\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Weighting of fairness (contribution-based offer calculation). 1 = perfectly fair, <1 = underweight, >1 = overweight fairness.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 2.5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"generosity_bias\": {\n      \"description\": \"Additive bias toward generosity or stinginess, in percent points (%). Positive means more generous offers, negative means stingier.\",\n      \"range\": {\n        \"min\": -40,\n        \"max\": 40,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -40,\n          \"high\": 40\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent on this trial (integer \u2265 0).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant on this trial (integer \u2265 0).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"noise_sd\": {\n      \"description\": \"Standard deviation of Gaussian noise added to offers (expresses trial-to-trial variability or unexplained behavior).\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.01,\n          \"high\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA contribution-weighted fairness model: the proposer\u2019s offer to the opponent is predicted as a weighted sum of the \u201cfair\u201d (contribution-proportional) percentage, shifted by a generosity/stinginess bias, plus normally-distributed trialwise noise. Fairness weighting and additive generosity bias are both learnable subject to broad bounds, promoting good parameter recoverability and interpretability.\n</SUMMARY>\n",
  "prediction_type": "numerical_variable_estimation",
  "current_model": "Specification: proposed_perc_pred = fairness_weight * (100 * token_opp / (token_opp + token_self)) + generosity_bias + Normal(0, noise_sd)\nSummary: A contribution-weighted fairness model: the proposer\u2019s offer to the opponent is predicted as a weighted sum of the \u201cfair\u201d (contribution-proportional) percentage, shifted by a generosity/stinginess bias, plus normally-distributed trialwise noise. Fairness weighting and additive generosity bias are both learnable subject to broad bounds, promoting good parameter recoverability and interpretability.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, fairness_weight=1.0, generosity_bias=0.0, noise_sd=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        # Calculate fairness percentage, avoid division by zero\n        if (token_opp + token_self) == 0:\n            fair_perc = 50.0  # Default to 50% if both are zero to avoid nan\n        else:\n            fair_perc = 100 * token_opp / (token_opp + token_self)\n\n        # Generate Gaussian noise using Box-Muller transform\n        u1, u2 = random.random(), random.random()\n        z = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        noise = z * noise_sd\n\n        # Calculate model prediction\n        proposed_perc_pred = fairness_weight * fair_perc + generosity_bias + noise\n\n        model_predictions.append(proposed_perc_pred)\n\n    return model_predictions",
  "total_retries": 0,
  "fitting_warnings": [
    "Error fitting participant 1011: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error fitting participant 1025: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error fitting participant 2011: Error in parameter fitting: All optimization attempts failed. Errors: []"
  ],
  "skipped_participants": [
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: []"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: []"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: []"
    }
  ],
  "num_skipped_participants": 3,
  "group_parameter_averages": {
    "Control": {
      "fairness_weight": 1.0480697566655508,
      "generosity_bias": -8.943227242411309,
      "noise_sd": 21.31206119504595
    },
    "Cocaine": {
      "fairness_weight": 0.8925438724287287,
      "generosity_bias": 0.3576687441609752,
      "noise_sd": 23.230495180026267
    }
  },
  "fitting_results": [
    {
      "fairness_weight": 1.3488483553672899,
      "generosity_bias": 30.30759616551013,
      "noise_sd": 2.452459352167507,
      "success": true,
      "mse": 2595.0012022114556,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.3236108799586457,
      "generosity_bias": 5.351916985441131,
      "noise_sd": 19.731984957051495,
      "success": true,
      "mse": 927.4218665273797,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9743319974404441,
      "generosity_bias": 2.027468017452147,
      "noise_sd": 18.56971772855178,
      "success": true,
      "mse": 388.9412220249887,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.3741693794682819,
      "generosity_bias": -16.27137042002961,
      "noise_sd": 45.43623584646607,
      "success": true,
      "mse": 1746.732257199093,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.1146952373102565,
      "generosity_bias": -18.337206999548236,
      "noise_sd": 28.09789305581083,
      "success": true,
      "mse": 784.949648150398,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 2.31177044419765,
      "generosity_bias": -31.187406621675354,
      "noise_sd": 9.95627210798422,
      "success": true,
      "mse": 2774.8983428153715,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.21459311425986505,
      "generosity_bias": -35.551330071592886,
      "noise_sd": 12.08950018980989,
      "success": true,
      "mse": 5773.192089250445,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.465504510522424,
      "generosity_bias": 16.896161493460326,
      "noise_sd": 36.660848863141446,
      "success": true,
      "mse": 5487.388101343982,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3790989827782513,
      "generosity_bias": -28.903596860473314,
      "noise_sd": 24.98871792109854,
      "success": true,
      "mse": 4218.956034680349,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.06038965881612828,
      "generosity_bias": -13.109834680313746,
      "noise_sd": 37.7829028118958,
      "success": true,
      "mse": 4699.127923281232,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.5812031025553563,
      "generosity_bias": -17.309416126915853,
      "noise_sd": 9.062070627822814,
      "success": true,
      "mse": 752.8760881669251,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.2757878630899047,
      "generosity_bias": 25.434399231264,
      "noise_sd": 49.345699565094165,
      "success": true,
      "mse": 6754.1859289731765,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.4576804785064794,
      "generosity_bias": -34.86898298905753,
      "noise_sd": 45.73550223408161,
      "success": true,
      "mse": 2963.5894487189885,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4543030343526122,
      "generosity_bias": 29.026549138218112,
      "noise_sd": 24.281611735004216,
      "success": true,
      "mse": 754.4986284253287,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7186970080633742,
      "generosity_bias": -12.838626207791602,
      "noise_sd": 27.60802218644498,
      "success": true,
      "mse": 1093.0151476514181,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9759407456873269,
      "generosity_bias": 8.317317194348734,
      "noise_sd": 46.821879277405785,
      "success": true,
      "mse": 1852.273843412156,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9236073930087185,
      "generosity_bias": -18.593279856365832,
      "noise_sd": 49.20156787117338,
      "success": true,
      "mse": 4822.179846202974,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 2.270371960891057,
      "generosity_bias": -22.376923498044533,
      "noise_sd": 3.006409924136433,
      "success": true,
      "mse": 3183.908736297424,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.645597489416028,
      "generosity_bias": -39.34386827247349,
      "noise_sd": 35.10085000420144,
      "success": true,
      "mse": 1504.4509330582812,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.2003004619470807,
      "generosity_bias": -23.587243781190885,
      "noise_sd": 4.3202890672167005,
      "success": true,
      "mse": 232.9445237940159,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.337544430029777,
      "generosity_bias": 34.951931859892056,
      "noise_sd": 5.624796934585393,
      "success": true,
      "mse": 4550.314682165986,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5749299275651769,
      "generosity_bias": -13.272114058423512,
      "noise_sd": 29.823658164275802,
      "success": true,
      "mse": 1245.8786963188745,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.3847580416369818,
      "generosity_bias": -33.38059672941798,
      "noise_sd": 30.672810753940887,
      "success": true,
      "mse": 1408.2404881523546,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4530930303061358,
      "generosity_bias": -23.20710496011544,
      "noise_sd": 40.14603077716356,
      "success": true,
      "mse": 4975.967869089862,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.3216997853341914,
      "generosity_bias": -22.728019768133205,
      "noise_sd": 19.114382003279804,
      "success": true,
      "mse": 1140.806253940768,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.9103418658457552,
      "generosity_bias": -18.95590428451336,
      "noise_sd": 7.297477367843731,
      "success": true,
      "mse": 1540.8143831851262,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.683741316384003,
      "generosity_bias": -14.018747109432672,
      "noise_sd": 2.6800227698273273,
      "success": true,
      "mse": 585.9250388738724,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5545490782391246,
      "generosity_bias": -25.8409150787576,
      "noise_sd": 10.671240852371492,
      "success": true,
      "mse": 922.9447745416566,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.17424173554747,
      "generosity_bias": 31.92720285299719,
      "noise_sd": 2.4448226125711887,
      "success": true,
      "mse": 2477.3120469435835,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.2851003275162363,
      "generosity_bias": -3.2452548102262186,
      "noise_sd": 23.12159500989668,
      "success": true,
      "mse": 928.6489434844847,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.3497350708649711,
      "generosity_bias": -29.875035916024927,
      "noise_sd": 19.69803384323181,
      "success": true,
      "mse": 557.5632520275238,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.0581132853291235,
      "generosity_bias": -37.7868342780199,
      "noise_sd": 12.74043509271183,
      "success": true,
      "mse": 1004.826422207847,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9307606035376925,
      "generosity_bias": -9.00843648402417,
      "noise_sd": 40.834376477012775,
      "success": true,
      "mse": 1649.07314644435,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5090964762839201,
      "generosity_bias": 7.247807905675226,
      "noise_sd": 15.635871326608374,
      "success": true,
      "mse": 232.0554073228688,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5497112787195597,
      "generosity_bias": 7.2009824866357715,
      "noise_sd": 0.938325224025145,
      "success": true,
      "mse": 101.87961396487633,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.284683340171698,
      "generosity_bias": 38.75477586609196,
      "noise_sd": 4.441870430128393,
      "success": true,
      "mse": 69.41060521080466,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.5888093190839803,
      "generosity_bias": 23.975264625774905,
      "noise_sd": 1.352510584388674,
      "success": true,
      "mse": 4888.0910122126725,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5636706456223953,
      "generosity_bias": -26.588409862271106,
      "noise_sd": 22.278702067957006,
      "success": true,
      "mse": 1785.887588514339,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5255855171300389,
      "generosity_bias": -5.541716498820035,
      "noise_sd": 5.736056227902167,
      "success": true,
      "mse": 224.72104260811267,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.66425114193182,
      "generosity_bias": -29.15891201552078,
      "noise_sd": 37.053906678257846,
      "success": true,
      "mse": 1489.5894584498321,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.1959417085703527,
      "generosity_bias": -23.20460252245161,
      "noise_sd": 11.237148472344904,
      "success": true,
      "mse": 4283.263662948498,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.14525469728307394,
      "generosity_bias": -19.129684861980728,
      "noise_sd": 12.29058872273238,
      "success": true,
      "mse": 1329.3622207518163,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.04600324132113152,
      "generosity_bias": -21.547237191872195,
      "noise_sd": 6.207194397291708,
      "success": true,
      "mse": 4510.001809802054,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 2.1944229623471205,
      "generosity_bias": -1.3293042903653556,
      "noise_sd": 7.737194545667162,
      "success": true,
      "mse": 8638.50745960215,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.18933510984669308,
      "generosity_bias": -12.15651380621304,
      "noise_sd": 46.221281355080386,
      "success": true,
      "mse": 5257.541826700573,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9440757999329465,
      "generosity_bias": -36.99112497255179,
      "noise_sd": 5.164923190816673,
      "success": true,
      "mse": 300.3424465855871,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.4649641594835299,
      "generosity_bias": -7.803708136465947,
      "noise_sd": 1.869459615543254,
      "success": true,
      "mse": 558.8978944091393,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.5702474028221969,
      "generosity_bias": -34.112512091143614,
      "noise_sd": 38.777665024468135,
      "success": true,
      "mse": 1804.9879054866615,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.8434735109849654,
      "generosity_bias": 17.429354062873692,
      "noise_sd": 22.189260564620486,
      "success": true,
      "mse": 1693.353370173198,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.32220985416281855,
      "generosity_bias": 23.05936168416949,
      "noise_sd": 34.098317349287754,
      "success": true,
      "mse": 2224.6952475172247,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.7822077015760185,
      "generosity_bias": -20.917288279320587,
      "noise_sd": 35.537502654223516,
      "success": true,
      "mse": 2629.6932254181415,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.7404716955201083,
      "generosity_bias": -31.291377750361704,
      "noise_sd": 23.021955165052262,
      "success": true,
      "mse": 624.1299289823777,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.8759287185028823,
      "generosity_bias": 29.806290132996057,
      "noise_sd": 19.8581482852213,
      "success": true,
      "mse": 1460.1136214760527,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.2692170432506267,
      "generosity_bias": 11.404335124420092,
      "noise_sd": 0.924143510764111,
      "success": true,
      "mse": 205.8046657901048,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.39236043334184745,
      "generosity_bias": -5.150565373212809,
      "noise_sd": 21.35593998661122,
      "success": true,
      "mse": 1237.721316909193,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5710754449375394,
      "generosity_bias": 8.472086858031545,
      "noise_sd": 35.991602881968845,
      "success": true,
      "mse": 819.2880425655051,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6427536285547266,
      "generosity_bias": -3.157437226900201,
      "noise_sd": 34.63506772964443,
      "success": true,
      "mse": 2195.5483097946653,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.40969918957587764,
      "generosity_bias": -12.690822082248015,
      "noise_sd": 21.74430274983166,
      "success": true,
      "mse": 1495.1613832306405,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.0767818323979583,
      "generosity_bias": -39.75033511061053,
      "noise_sd": 6.401322971198907,
      "success": true,
      "mse": 1070.6035554979392,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6986478582701738,
      "generosity_bias": 8.301743331553071,
      "noise_sd": 35.651523850772904,
      "success": true,
      "mse": 2125.4997464413505,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9519282195964021,
      "generosity_bias": -21.784719722921427,
      "noise_sd": 34.442125638263185,
      "success": true,
      "mse": 2164.9972297835916,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.3988468558996625,
      "generosity_bias": -12.496029607792373,
      "noise_sd": 7.799042960590415,
      "success": true,
      "mse": 750.8680507723883,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.4288865922134104,
      "generosity_bias": -29.08532040673772,
      "noise_sd": 22.597498949073593,
      "success": true,
      "mse": 829.8910169633319,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7590034738629825,
      "generosity_bias": 30.333296369956926,
      "noise_sd": 13.610890622976502,
      "success": true,
      "mse": 912.1652120896426,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.2191171065607207,
      "generosity_bias": -33.95201383760694,
      "noise_sd": 16.544495323170924,
      "success": true,
      "mse": 1086.8244063403547,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.2001491161286533,
      "generosity_bias": -23.12491507305488,
      "noise_sd": 2.250538551656341,
      "success": true,
      "mse": 2090.5840752791705,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4134109584958181,
      "generosity_bias": 19.859643624127383,
      "noise_sd": 47.703137722485195,
      "success": true,
      "mse": 3417.630200838313,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.0640913034368655,
      "generosity_bias": -6.977559483897248,
      "noise_sd": 20.925292130714407,
      "success": true,
      "mse": 1304.5287306035495,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.10057866025847884,
      "generosity_bias": 35.38007097030267,
      "noise_sd": 27.097389941796692,
      "success": true,
      "mse": 876.7127962122868,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.049529101099796,
      "generosity_bias": 8.90109086518768,
      "noise_sd": 40.16887519939593,
      "success": true,
      "mse": 2408.93371242865,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9887018989877251,
      "generosity_bias": 24.679704652455783,
      "noise_sd": 1.9179850294348206,
      "success": true,
      "mse": 773.3002416471651,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.13806119534973285,
      "generosity_bias": 15.275122697028275,
      "noise_sd": 13.773284080697206,
      "success": true,
      "mse": 155.02397457215872,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.0198148102358269,
      "generosity_bias": -8.96134209370473,
      "noise_sd": 19.873567731158573,
      "success": true,
      "mse": 764.7972882816715,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.405205825723849,
      "generosity_bias": 8.758142766208584,
      "noise_sd": 20.444315950255227,
      "success": true,
      "mse": 4757.264569990521,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.0422005380846764,
      "generosity_bias": 27.742428690629627,
      "noise_sd": 31.21666374108805,
      "success": true,
      "mse": 4707.40299471571,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.7282236111001112,
      "generosity_bias": -8.272314107760186,
      "noise_sd": 33.72708229724265,
      "success": true,
      "mse": 1589.3489528256048,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6522119641495004,
      "generosity_bias": -3.0827136833995876,
      "noise_sd": 37.02931629377348,
      "success": true,
      "mse": 1922.5054106592677,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.0756491760184518,
      "generosity_bias": 33.49520102301762,
      "noise_sd": 37.137045815747825,
      "success": true,
      "mse": 1369.2924130918327,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.36351457200310155,
      "generosity_bias": 39.3928441115443,
      "noise_sd": 16.566790307457083,
      "success": true,
      "mse": 2090.9291153468316,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3416059698945234,
      "generosity_bias": 0.862948022951852,
      "noise_sd": 18.696780144772987,
      "success": true,
      "mse": 1602.7188389382238,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.1677254055285704,
      "generosity_bias": 3.2148940455128017,
      "noise_sd": 45.46001735754402,
      "success": true,
      "mse": 2379.8471428927924,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.20310688868340257,
      "generosity_bias": 27.49603568685095,
      "noise_sd": 42.847144454795895,
      "success": true,
      "mse": 2268.597480505535,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 2.403151134137865,
      "generosity_bias": 0.567077756602634,
      "noise_sd": 5.661874691762782,
      "success": true,
      "mse": 6147.56261653734,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9121948878942626,
      "generosity_bias": 27.668153183694567,
      "noise_sd": 17.805369265477566,
      "success": true,
      "mse": 3069.6319063065052,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 2.209684591068573,
      "generosity_bias": 12.944443949465127,
      "noise_sd": 34.44596720998835,
      "success": true,
      "mse": 7916.344078114105,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.8502866344411443,
      "generosity_bias": 1.5833170677345412,
      "noise_sd": 18.225094064076927,
      "success": true,
      "mse": 1345.8557267218314,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7113950249467798,
      "generosity_bias": -27.572088060494252,
      "noise_sd": 36.626110281068904,
      "success": true,
      "mse": 1825.5418176092949,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9721562042371265,
      "generosity_bias": 21.519771548866423,
      "noise_sd": 17.562183153971986,
      "success": true,
      "mse": 1696.5161307956876,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    }
  ],
  "recovery_warnings": [
    "Error in iteration 46: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 63: Error in parameter fitting: All optimization attempts failed. Errors: []"
  ],
  "parameter_recovery": {
    "correlations": {
      "fairness_weight": {
        "r": 0.29676526690069116,
        "p": 0.003004430708144408
      },
      "generosity_bias": {
        "r": 0.23512463346367124,
        "p": 0.01977848033810733
      },
      "noise_sd": {
        "r": 0.054527344239132816,
        "p": 0.5938506412745713
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 529.013955134614,
  "bic_Control": 525.0330442973177,
  "bic_Cocaine": 532.4866645884256,
  "bic_results": {
    "average_bic": 529.013955134614,
    "individual_bics": [
      557.4556624879207,
      504.9800433346565,
      460.6620471175,
      537.2678113134965,
      496.4738055203723,
      560.8740462918312,
      598.2372091252189,
      595.6477982317149,
      582.2416998402515,
      587.7389506194891,
      494.3461407773397,
      606.2410114786535,
      564.2291869615082,
      494.45593376275565,
      513.358669975163,
      540.2598399473811,
      589.0572563931046,
      567.8863163348951,
      529.6525546713414,
      434.5180241105545,
      586.0977424789733,
      520.034620631624,
      526.2821197773116,
      590.6583413233559,
      515.5412244023053,
      530.8705924550114,
      481.5599922156384,
      504.7332466925412,
      555.0886066507659,
      505.04747711314417,
      479.0295809110087,
      509.0682819441704,
      534.3336099465813,
      434.32299184385823,
      392.3405921954488,
      372.7692303874169,
      589.7496204151408,
      538.3984190588488,
      432.6850582260608,
      529.1462546013854,
      583.0132046242869,
      523.3423905046652,
      585.6439018079892,
      618.7904473414069,
      593.465569306751,
      447.47829621092427,
      479.1515140281671,
      538.940974964389,
      535.6849776003563,
      549.6033433934341,
      558.1329534611217,
      484.78149416215706,
      528.1269535498096,
      428.2005095107016,
      519.6996006254166,
      498.65742912465424,
      548.9307490670878,
      529.3366681460981,
      512.3020770733751,
      547.2770809388143,
      548.216099690444,
      494.2099341377374,
      499.313221037653,
      504.13408477607777,
      513.0689893377655,
      546.4323444414588,
      571.49904325832,
      522.3806608416512,
      502.1123594580683,
      553.661121050765,
      495.71124387431246,
      413.74977604553925,
      495.1473589048285,
      588.3660409903796,
      587.828681627808,
      532.4522744192519,
      542.1578175889613,
      524.8517266137843,
      546.4407610326249,
      532.8795010470366,
      553.0415757703605,
      550.5999778310755,
      601.4415662312687,
      566.0221668765533,
      614.3381306538245,
      523.9712584915568,
      539.5184448091561,
      535.7801440004226
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        557.4556624879207,
        504.9800433346565,
        460.6620471175,
        537.2678113134965,
        496.4738055203723,
        560.8740462918312,
        598.2372091252189,
        595.6477982317149,
        582.2416998402515,
        587.7389506194891,
        494.3461407773397,
        606.2410114786535,
        564.2291869615082,
        494.45593376275565,
        513.358669975163,
        540.2598399473811,
        589.0572563931046,
        567.8863163348951,
        529.6525546713414,
        434.5180241105545,
        586.0977424789733,
        520.034620631624,
        526.2821197773116,
        590.6583413233559,
        515.5412244023053,
        530.8705924550114,
        481.5599922156384,
        504.7332466925412,
        555.0886066507659,
        505.04747711314417,
        479.0295809110087,
        509.0682819441704,
        534.3336099465813,
        434.32299184385823,
        392.3405921954488,
        372.7692303874169,
        589.7496204151408,
        538.3984190588488,
        432.6850582260608,
        529.1462546013854,
        583.0132046242869
      ],
      "Cocaine": [
        523.3423905046652,
        585.6439018079892,
        618.7904473414069,
        593.465569306751,
        447.47829621092427,
        479.1515140281671,
        538.940974964389,
        535.6849776003563,
        549.6033433934341,
        558.1329534611217,
        484.78149416215706,
        528.1269535498096,
        428.2005095107016,
        519.6996006254166,
        498.65742912465424,
        548.9307490670878,
        529.3366681460981,
        512.3020770733751,
        547.2770809388143,
        548.216099690444,
        494.2099341377374,
        499.313221037653,
        504.13408477607777,
        513.0689893377655,
        546.4323444414588,
        571.49904325832,
        522.3806608416512,
        502.1123594580683,
        553.661121050765,
        495.71124387431246,
        413.74977604553925,
        495.1473589048285,
        588.3660409903796,
        587.828681627808,
        532.4522744192519,
        542.1578175889613,
        524.8517266137843,
        546.4407610326249,
        532.8795010470366,
        553.0415757703605,
        550.5999778310755,
        601.4415662312687,
        566.0221668765533,
        614.3381306538245,
        523.9712584915568,
        539.5184448091561,
        535.7801440004226
      ]
    },
    "num_parameters": 3,
    "prediction_type": "numerical",
    "bic_formula": "BIC calculated from MSE using Gaussian error assumption"
  },
  "recovery_summary": "Parameter Recovery:\n- fairness_weight: r = 0.297\n- generosity_bias: r = 0.235\n- noise_sd: r = 0.055",
  "previous_models": [
    "Specification: proposed_perc_pred = fairness_weight * (100 * token_opp / (token_opp + token_self)) + generosity_bias + Normal(0, noise_sd)\nSummary: A contribution-weighted fairness model: the proposer\u2019s offer to the opponent is predicted as a weighted sum of the \u201cfair\u201d (contribution-proportional) percentage, shifted by a generosity/stinginess bias, plus normally-distributed trialwise noise. Fairness weighting and additive generosity bias are both learnable subject to broad bounds, promoting good parameter recoverability and interpretability.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation\nBIC: 529.013955134614\n\nParameter Recovery:\n- fairness_weight: r = 0.297\n- generosity_bias: r = 0.235\n- noise_sd: r = 0.055"
  ]
}