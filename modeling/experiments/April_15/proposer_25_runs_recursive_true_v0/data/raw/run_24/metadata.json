{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should directly predict a numerical value (not a binary choice). The model's predictions will be compared to actual values using mean squared error.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let's walk through the design for this computational model step-by-step:\n\n---\n\n### Step 1: **Key Psychological Mechanisms**\n\nIn the ultimatum game as **proposer**, decisions may reflect:\n- **Fairness sensitivity**: Proposers balance self-interest with a preference for fairness, potentially tied to *relative contribution*.\n- **Self-interest**: Wanting to maximize one\u2019s own earning.\n- **Strategic consideration (Acceptance Expectation)**: Anticipating whether the responder will accept or reject the proposed split, possibly adjusting offers accordingly.\n\nGiven each trial features different *token* contributions and total amounts, fairness in split is contextual.\n\n---\n\n### Step 2: **Interaction of Mechanisms**\n\n- The proposer may mentally compute what\u2019s \u201cfair\u201d given the relative contribution, *then* deviate based on selfishness or willingness to take risk.\n- In practice, the *fair* split is often **token_self/(token_self + token_opp)** \u2014 i.e., what would be \u201cproportional\u201d to one\u2019s contribution.\n- The **proposer\u2019s adjustment around this fair split** could be captured by a *social preference* parameter.\n- Strategic adjustment (e.g., lowering proposer\u2019s offer if they think responder is less likely to reject) could be captured by an intercept or noise, but given the instruction to use as few parameters as possible, we may reserve this as stochastic variability.\n\n---\n\n### Step 3: **Mathematical Form**\n\nLet:\n- **proposed_perc_pred = predicted % offer (to opponent)**\n- **fair_perc = 100 * token_opp / (token_self + token_opp)**\n- **alpha = weighting of fairness sensitivity (learnable, [0,1])**\n- **bias = systematic tendency to offer more/less than fair (learnable, e.g. [-50,50])**\n- **softmax_noise = trial-level noise, for realistic spread ([0,30], learnable, since there are few trials, but could fix to avoid covariance)**\n\nA simple and effective model is:\n\nproposed_perc_pred = alpha * fair_perc + (1 - alpha) * default_perc + bias\n\nWhere:\n- **default_perc** is a fixed anchor (e.g. 50: reference point for pure equality, or 0: if you believe some people anchor at very unfair splits). We'll set this to 50, reflecting classic fairness.\n\nAlternatively, allow for only two learnable parameters (to reduce parameter covariance and maximize interpretability):\n\nproposed_perc_pred = alpha * fair_perc + (1 - alpha) * 50 + bias\n\nFor utility scaling, per task requirement (\"utility < 0\" < 50% likely), we can interpret utility as underlying motivation but here, since we're directly predicting proposed_perc_pred, softmax transformation is unnecessary.\n\n---\n\n### Step 4: **Parameterization Decision**\n\n- **alpha** [0, 1]: Interpolation between proportional fairness vs. a fixed reference point (%)\n- **bias** [-50, 50]: Shift up or down; allows idiosyncratic giving/reducing.\n- **No free noise parameter** (keeps it simple, minimizes identifiability problems and covariance).\n\n---\n\n### Step 5: **Variable Mapping**\n\n- **trial_role == 2 only** (as per instructions)\n- Each variable is used:\n    - token_opp, token_self \u2192 fair_perc\n    - trial_role \u2192 inclusion criteria\n    - proposed_perc \u2192 target\n\n---\n\n### Final Model\n\n#### Formula\n\n<MODEL>\nproposed_perc_pred = alpha * (100 * token_opp / (token_self + token_opp)) + (1 - alpha) * 50 + bias\n</MODEL>\n\n#### Variables\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"proposed_perc_pred\": {\n      \"description\": \"Predicted proportion (percent) of total amount offered to the opponent by the proposer\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Weighting parameter for proportional fairness; 0 = anchored at 50/50, 1 = full proportionality to token contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"bias\": {\n      \"description\": \"Proposer\u2019s idiosyncratic tendency to offer more or less than fairness norm, in percentage points\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -50,\n          \"high\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens contributed by the opponent in this trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens contributed by the participant in this trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA two-parameter, linearly-weighted fairness model of proposer behavior, combining proportional fairness based on relative token contributions (alpha) and a global offering bias. The predicted offer is an interpolation between the fair share (by contribution) and pure equality, adjusted by an individual-level bias.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'bias']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                proposed_perc_pred = alpha * (100 * token_opp / (token_self + token_opp)) + (1 - alpha) * 50 + bias\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"proposed_perc_pred\": {\n      \"description\": \"Predicted proportion (percent) of total amount offered to the opponent by the proposer\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Weighting parameter for proportional fairness; 0 = anchored at 50/50, 1 = full proportionality to token contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"bias\": {\n      \"description\": \"Proposer\\u2019s idiosyncratic tendency to offer more or less than fairness norm, in percentage points\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -50,\n          \"high\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens contributed by the opponent in this trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens contributed by the participant in this trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=0.5, bias=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        if (token_self + token_opp) == 0:\n            fair_perc = 50  # Avoid division by zero, default to 50\n        else:\n            fair_perc = 100 * token_opp / (token_self + token_opp)\n\n        proposed_perc_pred = alpha * fair_perc + (1 - alpha) * 50 + bias\n        model_predictions.append(proposed_perc_pred)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744744952.662893
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Weighting parameter for proportional fairness; 0 = anchored at 50/50, 1 = full proportionality to token contribution",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 1
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "bias": {
      "description": "Proposer\u2019s idiosyncratic tendency to offer more or less than fairness norm, in percentage points",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -50,
          "high": 50
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "proposed_perc_pred = alpha * (100 * token_opp / (token_self + token_opp)) + (1 - alpha) * 50 + bias",
  "variable_descriptions": {
    "proposed_perc_pred": {
      "description": "Predicted proportion (percent) of total amount offered to the opponent by the proposer",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Weighting parameter for proportional fairness; 0 = anchored at 50/50, 1 = full proportionality to token contribution",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 1
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "bias": {
      "description": "Proposer\u2019s idiosyncratic tendency to offer more or less than fairness norm, in percentage points",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -50,
          "high": 50
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "token_opp": {
      "description": "Number of tokens contributed by the opponent in this trial",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens contributed by the participant in this trial",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A two-parameter, linearly-weighted fairness model of proposer behavior, combining proportional fairness based on relative token contributions (alpha) and a global offering bias. The predicted offer is an interpolation between the fair share (by contribution) and pure equality, adjusted by an individual-level bias.",
  "target_variable": "proposed_perc",
  "full_reasoning": "Let's walk through the design for this computational model step-by-step:\n\n---\n\n### Step 1: **Key Psychological Mechanisms**\n\nIn the ultimatum game as **proposer**, decisions may reflect:\n- **Fairness sensitivity**: Proposers balance self-interest with a preference for fairness, potentially tied to *relative contribution*.\n- **Self-interest**: Wanting to maximize one\u2019s own earning.\n- **Strategic consideration (Acceptance Expectation)**: Anticipating whether the responder will accept or reject the proposed split, possibly adjusting offers accordingly.\n\nGiven each trial features different *token* contributions and total amounts, fairness in split is contextual.\n\n---\n\n### Step 2: **Interaction of Mechanisms**\n\n- The proposer may mentally compute what\u2019s \u201cfair\u201d given the relative contribution, *then* deviate based on selfishness or willingness to take risk.\n- In practice, the *fair* split is often **token_self/(token_self + token_opp)** \u2014 i.e., what would be \u201cproportional\u201d to one\u2019s contribution.\n- The **proposer\u2019s adjustment around this fair split** could be captured by a *social preference* parameter.\n- Strategic adjustment (e.g., lowering proposer\u2019s offer if they think responder is less likely to reject) could be captured by an intercept or noise, but given the instruction to use as few parameters as possible, we may reserve this as stochastic variability.\n\n---\n\n### Step 3: **Mathematical Form**\n\nLet:\n- **proposed_perc_pred = predicted % offer (to opponent)**\n- **fair_perc = 100 * token_opp / (token_self + token_opp)**\n- **alpha = weighting of fairness sensitivity (learnable, [0,1])**\n- **bias = systematic tendency to offer more/less than fair (learnable, e.g. [-50,50])**\n- **softmax_noise = trial-level noise, for realistic spread ([0,30], learnable, since there are few trials, but could fix to avoid covariance)**\n\nA simple and effective model is:\n\nproposed_perc_pred = alpha * fair_perc + (1 - alpha) * default_perc + bias\n\nWhere:\n- **default_perc** is a fixed anchor (e.g. 50: reference point for pure equality, or 0: if you believe some people anchor at very unfair splits). We'll set this to 50, reflecting classic fairness.\n\nAlternatively, allow for only two learnable parameters (to reduce parameter covariance and maximize interpretability):\n\nproposed_perc_pred = alpha * fair_perc + (1 - alpha) * 50 + bias\n\nFor utility scaling, per task requirement (\"utility < 0\" < 50% likely), we can interpret utility as underlying motivation but here, since we're directly predicting proposed_perc_pred, softmax transformation is unnecessary.\n\n---\n\n### Step 4: **Parameterization Decision**\n\n- **alpha** [0, 1]: Interpolation between proportional fairness vs. a fixed reference point (%)\n- **bias** [-50, 50]: Shift up or down; allows idiosyncratic giving/reducing.\n- **No free noise parameter** (keeps it simple, minimizes identifiability problems and covariance).\n\n---\n\n### Step 5: **Variable Mapping**\n\n- **trial_role == 2 only** (as per instructions)\n- Each variable is used:\n    - token_opp, token_self \u2192 fair_perc\n    - trial_role \u2192 inclusion criteria\n    - proposed_perc \u2192 target\n\n---\n\n### Final Model\n\n#### Formula\n\n<MODEL>\nproposed_perc_pred = alpha * (100 * token_opp / (token_self + token_opp)) + (1 - alpha) * 50 + bias\n</MODEL>\n\n#### Variables\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"proposed_perc_pred\": {\n      \"description\": \"Predicted proportion (percent) of total amount offered to the opponent by the proposer\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Weighting parameter for proportional fairness; 0 = anchored at 50/50, 1 = full proportionality to token contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"bias\": {\n      \"description\": \"Proposer\u2019s idiosyncratic tendency to offer more or less than fairness norm, in percentage points\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -50,\n          \"high\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens contributed by the opponent in this trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens contributed by the participant in this trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA two-parameter, linearly-weighted fairness model of proposer behavior, combining proportional fairness based on relative token contributions (alpha) and a global offering bias. The predicted offer is an interpolation between the fair share (by contribution) and pure equality, adjusted by an individual-level bias.\n</SUMMARY>",
  "prediction_type": "numerical_variable_estimation",
  "current_model": "Specification: proposed_perc_pred = alpha * (100 * token_opp / (token_self + token_opp)) + (1 - alpha) * 50 + bias\nSummary: A two-parameter, linearly-weighted fairness model of proposer behavior, combining proportional fairness based on relative token contributions (alpha) and a global offering bias. The predicted offer is an interpolation between the fair share (by contribution) and pure equality, adjusted by an individual-level bias.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=0.5, bias=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        if (token_self + token_opp) == 0:\n            fair_perc = 50  # Avoid division by zero, default to 50\n        else:\n            fair_perc = 100 * token_opp / (token_self + token_opp)\n\n        proposed_perc_pred = alpha * fair_perc + (1 - alpha) * 50 + bias\n        model_predictions.append(proposed_perc_pred)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "group_parameter_averages": {
    "Control": {
      "alpha": 0.233624894234788,
      "bias": -8.434108909038923
    },
    "Cocaine": {
      "alpha": 0.11209862100780218,
      "bias": -13.791666718458222
    }
  },
  "fitting_results": [
    {
      "alpha": 0.0,
      "bias": -4.9937496718111285e-09,
      "success": true,
      "mse": 2.4937550951030605e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.5229357751686812,
      "bias": -5.999999916486752,
      "success": true,
      "mse": 19.840978593272176,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.7293577966477074,
      "bias": -13.333333476962494,
      "success": true,
      "mse": 16.320081549439372,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -4.999240094931686e-09,
      "success": true,
      "mse": 2.4992366385418827e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.5917431125925977,
      "bias": -6.000000022263783,
      "success": true,
      "mse": 20.788990825688092,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.6605504579647496,
      "bias": -13.999999612263245,
      "success": true,
      "mse": 46.87461773700321,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -5.000028447371382e-09,
      "success": true,
      "mse": 2.500025282761528e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.24770642427913714,
      "bias": -5.333333980979326,
      "success": true,
      "mse": 68.31396534148871,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -4.989766833329134e-09,
      "success": true,
      "mse": 2.4897755210224016e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.24770641658288384,
      "bias": -3.3333332886960236,
      "success": true,
      "mse": 12.313965341488284,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.24770643728023897,
      "bias": -2.666666209247247,
      "success": true,
      "mse": 9.647298674821858,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -5.000013967546113e-09,
      "success": true,
      "mse": 2.50001107185515e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.4954128409535365,
      "bias": -8.666666683664996,
      "success": true,
      "mse": 11.92252803261977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.13761467383783305,
      "bias": -2.666666646068467,
      "success": true,
      "mse": 29.83078491335372,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -2.234499846362843e-09,
      "success": true,
      "mse": 4.992992862415284e-18,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.275229352488893,
      "bias": -3.3333333868666832,
      "success": true,
      "mse": 9.989806320081552,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -4.752131268417258e-09,
      "success": true,
      "mse": 2.2582750305661475e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.11009173778224372,
      "bias": -7.333333316319719,
      "success": true,
      "mse": 30.931702344546384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.137614673644004,
      "bias": -5.999999963066154,
      "success": true,
      "mse": 60.94189602446483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -3.2648531226669695e-09,
      "success": true,
      "mse": 1.0659255318763108e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.13761467392780435,
      "bias": -18.666666654310045,
      "success": true,
      "mse": 21.830784913353728,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.38532111157706966,
      "bias": -14.000000224437379,
      "success": true,
      "mse": 66.69113149847102,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.24770640455763998,
      "bias": -20.666666005359446,
      "success": true,
      "mse": 62.98063200815544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.13761468028496285,
      "bias": -5.333332860714896,
      "success": true,
      "mse": 21.830784913353952,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.5229357754964216,
      "bias": -5.333333493787275,
      "success": true,
      "mse": 20.729867482161087,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.3165137559014524,
      "bias": -3.333333386566318,
      "success": true,
      "mse": 6.044852191641196,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -29.999999926364413,
      "success": true,
      "mse": 5.422199601729763e-15,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.45412843249340806,
      "bias": -4.666666400772474,
      "success": true,
      "mse": 18.252803261977633,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.357798162548,
      "bias": -9.333332117089641,
      "success": true,
      "mse": 132.2161060142726,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.1376146674692403,
      "bias": -23.999999500511077,
      "success": true,
      "mse": 114.27522935779847,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.5229357727999154,
      "bias": -6.666666739891269,
      "success": true,
      "mse": 31.39653414882774,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -4.999969888125298e-09,
      "success": true,
      "mse": 2.4999684393783537e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -19.33333350037989,
      "success": true,
      "mse": 152.88888888888889,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.34403667320249925,
      "bias": -10.666665817121109,
      "success": true,
      "mse": 133.77573904179488,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.06880630931946287,
      "bias": -26.66668681739579,
      "success": true,
      "mse": 74.79102956224916,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -20.000000377525673,
      "success": true,
      "mse": 13.333333333333476,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.3853210967547159,
      "bias": -6.666666833984795,
      "success": true,
      "mse": 24.913353720693202,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.20642201290552545,
      "bias": -3.3333333513034713,
      "success": true,
      "mse": 15.341488277268091,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.38532110301320777,
      "bias": -14.000000137287039,
      "success": true,
      "mse": 66.69113149847097,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.3577981623449588,
      "bias": -11.333333284132214,
      "success": true,
      "mse": 17.549439347604494,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.13761470212391147,
      "bias": -21.999999409263587,
      "success": true,
      "mse": 132.94189602446525,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.5366972561531813,
      "bias": -7.999999702358525,
      "success": true,
      "mse": 76.15290519877686,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -4.998201459016578e-09,
      "success": true,
      "mse": 2.498199512159137e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -29.99999996693182,
      "success": true,
      "mse": 1.093504482609033e-15,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -4.000000126590154,
      "success": true,
      "mse": 64.00000000000001,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -27.999999807304416,
      "success": true,
      "mse": 56.00000000000001,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.17889908238530455,
      "bias": -14.666665899195792,
      "success": true,
      "mse": 46.387359836901716,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -30.000000001541597,
      "success": true,
      "mse": 2.376521533073552e-18,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.20642201456872378,
      "bias": -1.9999999440383314,
      "success": true,
      "mse": 9.119266055045877,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -8.66666671299145,
      "success": true,
      "mse": 171.55555555555557,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.11009172148506101,
      "bias": -18.66666690279537,
      "success": true,
      "mse": 116.26503567787982,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -27.333333643715275,
      "success": true,
      "mse": 32.88888888888899,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.055045872451627884,
      "bias": -7.333333018597468,
      "success": true,
      "mse": 152.39959225280336,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.13761467140063743,
      "bias": -26.00000012797241,
      "success": true,
      "mse": 74.27522935779818,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.24770641748597194,
      "bias": -2.666666620311416,
      "success": true,
      "mse": 9.647298674821615,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.17889907842033545,
      "bias": -5.999999961773041,
      "success": true,
      "mse": 32.16513761467891,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.4954128458486137,
      "bias": -16.66666797659969,
      "success": true,
      "mse": 115.92252803262151,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.09633026917902342,
      "bias": -15.333334275798922,
      "success": true,
      "mse": 50.05708460754422,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -1.3333331832231798,
      "success": true,
      "mse": 24.888888888888918,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.39908256565772615,
      "bias": -7.333333413906203,
      "success": true,
      "mse": 47.17023445463813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -15.333333698558137,
      "success": true,
      "mse": 144.88888888888903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.3165137500783893,
      "bias": -6.000000047701306,
      "success": true,
      "mse": 74.48929663608565,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -13.999999792889406,
      "success": true,
      "mse": 224.00000000000009,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -23.333333071694653,
      "success": true,
      "mse": 142.22222222222226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -10.666666120049273,
      "success": true,
      "mse": 72.88888888888917,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.04128439596074206,
      "bias": -0.6666665472101486,
      "success": true,
      "mse": 5.946992864424077,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.20642201119711212,
      "bias": -1.9999996833006761,
      "success": true,
      "mse": 49.11926605504596,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -1.3333332654974102,
      "success": true,
      "mse": 24.888888888888896,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.41284403091714,
      "bias": -19.99999962344845,
      "success": true,
      "mse": 172.47706422018365,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.3853210923524496,
      "bias": -25.333333453973122,
      "success": true,
      "mse": 40.91335372069319,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.23394494348653924,
      "bias": -21.33333290410038,
      "success": true,
      "mse": 96.05096839959245,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.20642201547529132,
      "bias": -14.000000015185668,
      "success": true,
      "mse": 217.1192660550459,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.41284402085938016,
      "bias": -16.000000265216176,
      "success": true,
      "mse": 89.81039755351692,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -0.6666665362120379,
      "success": true,
      "mse": 6.222222222222238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.06880733723517138,
      "bias": -27.333332061687408,
      "success": true,
      "mse": 58.7910295616734,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.06880733499567687,
      "bias": -19.333333529078917,
      "success": true,
      "mse": 32.12436289500513,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -26.666667398096063,
      "success": true,
      "mse": 75.55555555555614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -24.666667475056386,
      "success": true,
      "mse": 118.22222222222292,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -1.3333334984428684,
      "success": true,
      "mse": 24.888888888888914,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -1.9999999830461488,
      "success": true,
      "mse": 16.0,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.1788990835392044,
      "bias": -13.333334358715327,
      "success": true,
      "mse": 150.3873598369022,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 2.9845011777307128e-09,
      "bias": -27.999999697426667,
      "success": true,
      "mse": 56.0000000000001,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.20642201947148692,
      "bias": -2.0000001422581075,
      "success": true,
      "mse": 22.45259938837923,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.06880733445829071,
      "bias": -0.6666666124861501,
      "success": true,
      "mse": 5.457696228338438,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -14.000000677659441,
      "success": true,
      "mse": 157.33333333333383,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -4.336931192852939e-09,
      "success": true,
      "mse": 1.8808984297417e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -24.666669545674065,
      "success": true,
      "mse": 104.88888888889727,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.302752289288296,
      "bias": -3.99999979673961,
      "success": true,
      "mse": 35.86544342507649,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -29.999999996087894,
      "success": true,
      "mse": 1.5304574877420518e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.16513760719180862,
      "bias": -19.999998894195112,
      "success": true,
      "mse": 128.9296636085639,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "bias": -7.333332206684186,
      "success": true,
      "mse": 139.55555555555685,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.9999999999999981,
        "p": 0.0
      },
      "bias": {
        "r": 1.0,
        "p": 0.0
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": -5.579722891909922,
  "bic_Control": -210.26093656877816,
  "bic_Cocaine": 177.78053102695122,
  "bic_results": {
    "average_bic": -5.579722891909922,
    "individual_bics": [
      -1797.1426220885571,
      304.97060232212306,
      295.0075953200206,
      -1797.0306415996608,
      307.3509831796245,
      348.81667444730823,
      -1797.0145508822031,
      368.025206682008,
      -1797.2240737086586,
      280.6428162604209,
      268.19595690306244,
      -1797.0148407825857,
      278.9952974959593,
      325.76796811665474,
      -1879.1679231142505,
      269.9752071120836,
      -1802.2012296604255,
      327.61624446629725,
      362.20134684060815,
      -1840.4898772189063,
      309.8447590597014,
      366.79905278731735,
      363.8795714371962,
      309.8447590597019,
      307.2057338793828,
      244.3549403060722,
      -1522.6666347393157,
      300.7156339053911,
      401.7017069362175,
      394.2644830478446,
      328.3769546315367,
      -1797.015710488676,
      409.1106651513358,
      402.2997868958018,
      372.6449772119955,
      284.699007090063,
      316.58098329205393,
      291.8539829935198,
      366.79905278731735,
      298.71150382552884,
      401.9809018515381,
      373.5652863626957,
      -1797.0518098326045,
      -1604.3234438052375,
      364.69841890366854,
      357.8883178798179,
      348.2837588977231,
      -1917.0302019450664,
      265.3252371981242,
      414.9856464679989,
      395.1448727910155,
      330.7452603787053,
      408.94718600718903,
      372.2920346265285,
      268.19595690306113,
      329.6104239981791,
      394.99440906850424,
      352.16674801587806,
      316.5308768527852,
      349.13729810514076,
      406.3697070749946,
      372.4388093855652,
      428.58933029693236,
      405.4223114107749,
      371.3311284443268,
      243.52255188630292,
      351.2022000867342,
      316.5308768527851,
      415.25885924835904,
      341.8796634888603,
      385.40420919414987,
      426.99816925380867,
      381.97812012057557,
      245.8298644356708,
      360.36883517668724,
      329.5457319111133,
      373.1636609148562,
      395.99625237315945,
      316.5308768527851,
      293.9974064865541,
      408.26931423398435,
      357.888317879818,
      311.2771077034611,
      239.14374664258702,
      410.57208319511517,
      -1811.5266668801544,
      389.8933626816027,
      335.1638685670135,
      -1822.0419921559374,
      400.41799928054326,
      404.45698290661386
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        -1797.1426220885571,
        304.97060232212306,
        295.0075953200206,
        -1797.0306415996608,
        307.3509831796245,
        348.81667444730823,
        -1797.0145508822031,
        368.025206682008,
        -1797.2240737086586,
        280.6428162604209,
        268.19595690306244,
        -1797.0148407825857,
        278.9952974959593,
        325.76796811665474,
        -1879.1679231142505,
        269.9752071120836,
        -1802.2012296604255,
        327.61624446629725,
        362.20134684060815,
        -1840.4898772189063,
        309.8447590597014,
        366.79905278731735,
        363.8795714371962,
        309.8447590597019,
        307.2057338793828,
        244.3549403060722,
        -1522.6666347393157,
        300.7156339053911,
        401.7017069362175,
        394.2644830478446,
        328.3769546315367,
        -1797.015710488676,
        409.1106651513358,
        402.2997868958018,
        372.6449772119955,
        284.699007090063,
        316.58098329205393,
        291.8539829935198,
        366.79905278731735,
        298.71150382552884,
        401.9809018515381,
        373.5652863626957,
        -1797.0518098326045
      ],
      "Cocaine": [
        -1604.3234438052375,
        364.69841890366854,
        357.8883178798179,
        348.2837588977231,
        -1917.0302019450664,
        265.3252371981242,
        414.9856464679989,
        395.1448727910155,
        330.7452603787053,
        408.94718600718903,
        372.2920346265285,
        268.19595690306113,
        329.6104239981791,
        394.99440906850424,
        352.16674801587806,
        316.5308768527852,
        349.13729810514076,
        406.3697070749946,
        372.4388093855652,
        428.58933029693236,
        405.4223114107749,
        371.3311284443268,
        243.52255188630292,
        351.2022000867342,
        316.5308768527851,
        415.25885924835904,
        341.8796634888603,
        385.40420919414987,
        426.99816925380867,
        381.97812012057557,
        245.8298644356708,
        360.36883517668724,
        329.5457319111133,
        373.1636609148562,
        395.99625237315945,
        316.5308768527851,
        293.9974064865541,
        408.26931423398435,
        357.888317879818,
        311.2771077034611,
        239.14374664258702,
        410.57208319511517,
        -1811.5266668801544,
        389.8933626816027,
        335.1638685670135,
        -1822.0419921559374,
        400.41799928054326,
        404.45698290661386
      ]
    },
    "num_parameters": 2,
    "prediction_type": "numerical",
    "bic_formula": "BIC calculated from MSE using Gaussian error assumption"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 1.000\n- bias: r = 1.000",
  "previous_models": [
    "Specification: proposed_perc_pred = alpha * (100 * token_opp / (token_self + token_opp)) + (1 - alpha) * 50 + bias\nSummary: A two-parameter, linearly-weighted fairness model of proposer behavior, combining proportional fairness based on relative token contributions (alpha) and a global offering bias. The predicted offer is an interpolation between the fair share (by contribution) and pure equality, adjusted by an individual-level bias.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation\nBIC: -5.579722891909922\n\nParameter Recovery:\n- alpha: r = 1.000\n- bias: r = 1.000"
  ]
}