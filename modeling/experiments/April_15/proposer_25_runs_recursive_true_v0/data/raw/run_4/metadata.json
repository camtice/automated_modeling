{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should directly predict a numerical value (not a binary choice). The model's predictions will be compared to actual values using mean squared error.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Certainly! Let\u2019s develop this step-by-step, explicitly addressing the requirements and considerations.\n\n---\n\n**Step 1: Psychological Mechanisms**\n\nWhen proposing in the Ultimatum Game after both players have contributed to the pot, key mechanisms are:\n\n- **Inequity Aversion:** People typically dislike proposals that deviate from relative contributions.\n- **Efficiency Maximization:** Proposers may wish to maximize their own share, but must balance this with risk that too-low offers get rejected.\n- **Relative Contribution:** The proposer may anchor their offer relative to their and their opponent\u2019s contribution, making \u201cfairness\u201d a function of relative input.\n- **Individual Bias:** Some participants may have a baseline tendency to be more or less generous regardless of context.\n\nNotably, because the amount available to split varies, *fairness* is not always a simple 50/50. Rather, the \u201ccontribution fair share\u201d is \\(\\frac{token_opp}{token_self + token_opp}\\)\u2014i.e., what % of the pot the opponent put in.\n\n---\n\n**Step 2: Interactions & Mathematical Form**\n\nA good starting model:\n\n- The actual offer (% to other) is:\n    - Anchored to the *contribution fair share*.\n    - Shifted by a generosity/selfishness bias.\n    - Possibly includes a *sensitivity parameter* (how tightly they stick to \u201cfair\u201d).\n    - Maybe includes trial-specific noise.\n\nModel structure should be:\n\\[ proposed\\_perc = bias + sensitivity \\times contribution\\_fair\\_perc + noise \\]\n\nWhere:\n- \\(contribution\\_fair\\_perc = 100 \\times \\frac{token\\_opp}{token\\_self + token\\_opp}\\)\n- \\(bias\\): learnable, base tendency toward generosity/selfishness\n- \\(sensitivity\\): learnable, how tightly they track \u201cfair\u201d division\n- \\(noise\\): normal error term with fixed variance (not a learnable parameter)\n\nBecause \u201cbias\u201d and \u201csensitivity\u201d could become redundant at the extremes (e.g., both can push toward 0 or 100), we avoid introducing further learnable parameters (like an intercept and a separate generosity), to maintain identifiability and parsimony.\n\n---\n\n**Step 3: Parameter Calibration & Covariances**\n\nTo keep the model identifiable and minimize learnable parameter covariance:\n\n- Only two learnable parameters: bias (b) and sensitivity (k).\n- Both have generous, but finite, bounds.\n    - bias: -100 to 100 (covers the full possible range of percent offers)\n    - sensitivity: -2 to 2 (allows positive/negative tracking and some overshoot)\n\nWe avoid a learnable noise parameter to further reduce covariance and to match data properties; MSE will absorb noise.\n\n---\n\n**Step 4: Model Output**\n\nThe only trials where \u201cproposed_perc\u201d is defined are those with trial_role==2, which is as required.\n\n---\n\n**Construction:**\n\nLet\u2019s define:\n\n- \\( cf = 100 \\cdot \\frac{token\\_opp}{token\\_self + token\\_opp} \\)\n- Model: \\( predicted\\_proposed\\_perc = bias + sensitivity \\times cf \\)\n\nIf utility is to be computed and compared to threshold as in the instructions (where utility < 0 predicts <50% offers), we can directly let the predicted value be the utility, as it is a continuous output.\n\nWe do NOT need a softmax or probability function, since the target is continuous and will be compared by MSE.\n\n---\n\n**Step 5: Variable Map**\n\n- bias: individual baseline tendency to be more/less generous (learnable)\n- sensitivity: degree to which proposal tracks contribution share (learnable)\n- token_self, token_opp: from data (number of tokens for P and O)\n- predicted_proposed_perc: model prediction, to be compared to proposed_perc\n\n---\n\n## Model Specification\n\n<MODEL>\npredicted_proposed_perc = bias + sensitivity * (100 * token_opp / (token_opp + token_self))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"predicted_proposed_perc\": {\n      \"description\": \"Predicted percentage offered to the opponent by the participant (in %), when acting as proposer\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Participant\u2019s overall generosity or selfishness; higher values shift offers upward, lower values make offers lower\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Sensitivity parameter scaling the influence of the opponent's relative contribution to the pot; positive values mean offers increase with opponent's share, negative values can indicate spite or anti-fairness\",\n      \"range\": {\n        \"min\": -2,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (proposer)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA linear computational model that predicts the proposed percentage offered by the participant (as proposer) based on the relative contribution of the opponent to the shared pot. The model includes two learnable parameters: a bias parameter controlling overall generosity/selfishness and a sensitivity parameter capturing how strongly the proposal tracks the fair share given by relative contribution.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['bias', 'sensitivity']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                predicted_proposed_perc = bias + sensitivity * (100 * token_opp / (token_opp + token_self))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"predicted_proposed_perc\": {\n      \"description\": \"Predicted percentage offered to the opponent by the participant (in %), when acting as proposer\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Participant\\u2019s overall generosity or selfishness; higher values shift offers upward, lower values make offers lower\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Sensitivity parameter scaling the influence of the opponent's relative contribution to the pot; positive values mean offers increase with opponent's share, negative values can indicate spite or anti-fairness\",\n      \"range\": {\n        \"min\": -2,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (proposer)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, bias=0, sensitivity=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        if (token_opp + token_self) == 0:\n            contribution_fair_perc = 0  # Avoid division by zero\n        else:\n            contribution_fair_perc = 100 * token_opp / (token_opp + token_self)\n\n        predicted_proposed_perc = bias + sensitivity * contribution_fair_perc\n        model_predictions.append(predicted_proposed_perc)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744744216.204272
    }
  ],
  "learnable_parameters": {
    "bias": {
      "description": "Participant\u2019s overall generosity or selfishness; higher values shift offers upward, lower values make offers lower",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "sensitivity": {
      "description": "Sensitivity parameter scaling the influence of the opponent's relative contribution to the pot; positive values mean offers increase with opponent's share, negative values can indicate spite or anti-fairness",
      "range": {
        "min": -2,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "predicted_proposed_perc = bias + sensitivity * (100 * token_opp / (token_opp + token_self))",
  "variable_descriptions": {
    "predicted_proposed_perc": {
      "description": "Predicted percentage offered to the opponent by the participant (in %), when acting as proposer",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "bias": {
      "description": "Participant\u2019s overall generosity or selfishness; higher values shift offers upward, lower values make offers lower",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "sensitivity": {
      "description": "Sensitivity parameter scaling the influence of the opponent's relative contribution to the pot; positive values mean offers increase with opponent's share, negative values can indicate spite or anti-fairness",
      "range": {
        "min": -2,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant (proposer)",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A linear computational model that predicts the proposed percentage offered by the participant (as proposer) based on the relative contribution of the opponent to the shared pot. The model includes two learnable parameters: a bias parameter controlling overall generosity/selfishness and a sensitivity parameter capturing how strongly the proposal tracks the fair share given by relative contribution.",
  "target_variable": "proposed_perc",
  "full_reasoning": "Certainly! Let\u2019s develop this step-by-step, explicitly addressing the requirements and considerations.\n\n---\n\n**Step 1: Psychological Mechanisms**\n\nWhen proposing in the Ultimatum Game after both players have contributed to the pot, key mechanisms are:\n\n- **Inequity Aversion:** People typically dislike proposals that deviate from relative contributions.\n- **Efficiency Maximization:** Proposers may wish to maximize their own share, but must balance this with risk that too-low offers get rejected.\n- **Relative Contribution:** The proposer may anchor their offer relative to their and their opponent\u2019s contribution, making \u201cfairness\u201d a function of relative input.\n- **Individual Bias:** Some participants may have a baseline tendency to be more or less generous regardless of context.\n\nNotably, because the amount available to split varies, *fairness* is not always a simple 50/50. Rather, the \u201ccontribution fair share\u201d is \\(\\frac{token_opp}{token_self + token_opp}\\)\u2014i.e., what % of the pot the opponent put in.\n\n---\n\n**Step 2: Interactions & Mathematical Form**\n\nA good starting model:\n\n- The actual offer (% to other) is:\n    - Anchored to the *contribution fair share*.\n    - Shifted by a generosity/selfishness bias.\n    - Possibly includes a *sensitivity parameter* (how tightly they stick to \u201cfair\u201d).\n    - Maybe includes trial-specific noise.\n\nModel structure should be:\n\\[ proposed\\_perc = bias + sensitivity \\times contribution\\_fair\\_perc + noise \\]\n\nWhere:\n- \\(contribution\\_fair\\_perc = 100 \\times \\frac{token\\_opp}{token\\_self + token\\_opp}\\)\n- \\(bias\\): learnable, base tendency toward generosity/selfishness\n- \\(sensitivity\\): learnable, how tightly they track \u201cfair\u201d division\n- \\(noise\\): normal error term with fixed variance (not a learnable parameter)\n\nBecause \u201cbias\u201d and \u201csensitivity\u201d could become redundant at the extremes (e.g., both can push toward 0 or 100), we avoid introducing further learnable parameters (like an intercept and a separate generosity), to maintain identifiability and parsimony.\n\n---\n\n**Step 3: Parameter Calibration & Covariances**\n\nTo keep the model identifiable and minimize learnable parameter covariance:\n\n- Only two learnable parameters: bias (b) and sensitivity (k).\n- Both have generous, but finite, bounds.\n    - bias: -100 to 100 (covers the full possible range of percent offers)\n    - sensitivity: -2 to 2 (allows positive/negative tracking and some overshoot)\n\nWe avoid a learnable noise parameter to further reduce covariance and to match data properties; MSE will absorb noise.\n\n---\n\n**Step 4: Model Output**\n\nThe only trials where \u201cproposed_perc\u201d is defined are those with trial_role==2, which is as required.\n\n---\n\n**Construction:**\n\nLet\u2019s define:\n\n- \\( cf = 100 \\cdot \\frac{token\\_opp}{token\\_self + token\\_opp} \\)\n- Model: \\( predicted\\_proposed\\_perc = bias + sensitivity \\times cf \\)\n\nIf utility is to be computed and compared to threshold as in the instructions (where utility < 0 predicts <50% offers), we can directly let the predicted value be the utility, as it is a continuous output.\n\nWe do NOT need a softmax or probability function, since the target is continuous and will be compared by MSE.\n\n---\n\n**Step 5: Variable Map**\n\n- bias: individual baseline tendency to be more/less generous (learnable)\n- sensitivity: degree to which proposal tracks contribution share (learnable)\n- token_self, token_opp: from data (number of tokens for P and O)\n- predicted_proposed_perc: model prediction, to be compared to proposed_perc\n\n---\n\n## Model Specification\n\n<MODEL>\npredicted_proposed_perc = bias + sensitivity * (100 * token_opp / (token_opp + token_self))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"predicted_proposed_perc\": {\n      \"description\": \"Predicted percentage offered to the opponent by the participant (in %), when acting as proposer\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Participant\u2019s overall generosity or selfishness; higher values shift offers upward, lower values make offers lower\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Sensitivity parameter scaling the influence of the opponent's relative contribution to the pot; positive values mean offers increase with opponent's share, negative values can indicate spite or anti-fairness\",\n      \"range\": {\n        \"min\": -2,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (proposer)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA linear computational model that predicts the proposed percentage offered by the participant (as proposer) based on the relative contribution of the opponent to the shared pot. The model includes two learnable parameters: a bias parameter controlling overall generosity/selfishness and a sensitivity parameter capturing how strongly the proposal tracks the fair share given by relative contribution.\n</SUMMARY>",
  "prediction_type": "numerical_variable_estimation",
  "current_model": "Specification: predicted_proposed_perc = bias + sensitivity * (100 * token_opp / (token_opp + token_self))\nSummary: A linear computational model that predicts the proposed percentage offered by the participant (as proposer) based on the relative contribution of the opponent to the shared pot. The model includes two learnable parameters: a bias parameter controlling overall generosity/selfishness and a sensitivity parameter capturing how strongly the proposal tracks the fair share given by relative contribution.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, bias=0, sensitivity=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        if (token_opp + token_self) == 0:\n            contribution_fair_perc = 0  # Avoid division by zero\n        else:\n            contribution_fair_perc = 100 * token_opp / (token_opp + token_self)\n\n        predicted_proposed_perc = bias + sensitivity * contribution_fair_perc\n        model_predictions.append(predicted_proposed_perc)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "group_parameter_averages": {
    "Control": {
      "bias": 30.15667582984984,
      "sensitivity": 0.22818431021156538
    },
    "Cocaine": {
      "bias": 32.810971897221066,
      "sensitivity": 0.0679472245618229
    }
  },
  "fitting_results": [
    {
      "bias": 50.00000403699788,
      "sensitivity": -8.084133936708403e-08,
      "success": true,
      "mse": 1.0553591987711612e-12,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 17.853216796475525,
      "sensitivity": 0.5229356662447072,
      "success": true,
      "mse": 19.840978593274265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 0.19878078490642537,
      "sensitivity": 0.7293577160662904,
      "success": true,
      "mse": 16.32008154944044,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 50.00000403808378,
      "sensitivity": -8.08615867383702e-08,
      "success": true,
      "mse": 1.055887161084788e-12,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 14.412849597934006,
      "sensitivity": 0.59174300960501,
      "success": true,
      "mse": 20.788990825690018,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 2.972481045931809,
      "sensitivity": 0.6605503785611113,
      "success": true,
      "mse": 46.87461773700409,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 50.00000403806694,
      "sensitivity": -8.08612340690367e-08,
      "success": true,
      "mse": 1.055877940106768e-12,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 32.28134737230684,
      "sensitivity": 0.24770638303713977,
      "success": true,
      "mse": 68.31396534148853,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 50.00000403799439,
      "sensitivity": -8.0859903596663e-08,
      "success": true,
      "mse": 1.0558432580478687e-12,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 34.28134694539049,
      "sensitivity": 0.2477063911044935,
      "success": true,
      "mse": 12.313965341488458,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 34.9480129807615,
      "sensitivity": 0.24770640280725797,
      "success": true,
      "mse": 9.647298674821712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 50.00000403803321,
      "sensitivity": -8.086062713553347e-08,
      "success": true,
      "mse": 1.0558621203697975e-12,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 16.56270482666452,
      "sensitivity": 0.4954125822754785,
      "success": true,
      "mse": 11.92252803263121,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 40.45260671387433,
      "sensitivity": 0.13761453629446194,
      "success": true,
      "mse": 29.830784913357046,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 50.0000040386147,
      "sensitivity": -8.087197985910448e-08,
      "success": true,
      "mse": 1.0561584818529502e-12,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 32.905198750948045,
      "sensitivity": 0.27522935324958797,
      "success": true,
      "mse": 9.989806320081616,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 50.0000040491122,
      "sensitivity": -8.056215239686696e-08,
      "success": true,
      "mse": 1.0484980562437555e-12,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 37.162083162570134,
      "sensitivity": 0.11009166963630887,
      "success": true,
      "mse": 30.931702344547258,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 37.11926753974353,
      "sensitivity": 0.1376146459177875,
      "success": true,
      "mse": 60.94189602446504,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 50.00000403800203,
      "sensitivity": -8.08600502342788e-08,
      "success": true,
      "mse": 1.0558470857297425e-12,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 24.452599068257857,
      "sensitivity": 0.1376146798543262,
      "success": true,
      "mse": 21.830784913353792,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 16.733943818098528,
      "sensitivity": 0.3853211170707581,
      "success": true,
      "mse": 66.69113149847111,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 16.94800783617527,
      "sensitivity": 0.24770649982499174,
      "success": true,
      "mse": 62.98063200815618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 37.7859351413999,
      "sensitivity": 0.13761462831566112,
      "success": true,
      "mse": 21.83078491335415,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 18.51987417930654,
      "sensitivity": 0.5229358403097736,
      "success": true,
      "mse": 20.72986748216189,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 30.84097884283237,
      "sensitivity": 0.3165137575136187,
      "success": true,
      "mse": 6.044852191641189,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 20.00000109536418,
      "sensitivity": -2.5355621824374452e-08,
      "success": true,
      "mse": 1.335452561113378e-13,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 22.62690656268387,
      "sensitivity": 0.4541285511559259,
      "success": true,
      "mse": 18.252803261980187,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 22.776739105187605,
      "sensitivity": 0.3577985179329014,
      "success": true,
      "mse": 132.216106014294,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 19.11925655514257,
      "sensitivity": 0.1376148516206578,
      "success": true,
      "mse": 114.27522935780371,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 17.186546239305425,
      "sensitivity": 0.5229357394577225,
      "success": true,
      "mse": 31.39653414882802,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 50.000004037969994,
      "sensitivity": -8.085944288604388e-08,
      "success": true,
      "mse": 1.0558312373829726e-12,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 38.92355277977002,
      "sensitivity": -0.1651377203162938,
      "success": true,
      "mse": 148.48521916412008,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 22.13148834658103,
      "sensitivity": 0.34403687881878003,
      "success": true,
      "mse": 133.77573904180045,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 19.892969100826576,
      "sensitivity": 0.06880728349809959,
      "success": true,
      "mse": 74.79102956167227,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 33.44037015747191,
      "sensitivity": -0.06880740432121596,
      "success": true,
      "mse": 12.568807339450222,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 24.067270270929043,
      "sensitivity": 0.38532124635730286,
      "success": true,
      "mse": 24.91335372069714,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 36.34557291399548,
      "sensitivity": 0.20642187871508821,
      "success": true,
      "mse": 15.34148827727128,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 16.733960158839622,
      "sensitivity": 0.38532081032776727,
      "success": true,
      "mse": 66.69113149848506,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 20.776757780780965,
      "sensitivity": 0.3577981803630545,
      "success": true,
      "mse": 17.54943934760453,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 21.119266664984274,
      "sensitivity": 0.1376146620644816,
      "success": true,
      "mse": 132.9418960244649,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 15.165127157192574,
      "sensitivity": 0.5366974393888533,
      "success": true,
      "mse": 76.15290519878346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 50.00000403803522,
      "sensitivity": -8.086064051550922e-08,
      "success": true,
      "mse": 1.0558624629362436e-12,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "bias": 20.000005055229188,
      "sensitivity": -9.980094869965761e-08,
      "success": true,
      "mse": 1.6126412522258879e-12,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 49.44036498308261,
      "sensitivity": -0.0688073069083592,
      "success": true,
      "mse": 63.235474006116526,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 22.000001398893748,
      "sensitivity": -3.083802475134857e-08,
      "success": true,
      "mse": 56.000000000000156,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 26.38835463913801,
      "sensitivity": 0.17889953745393572,
      "success": true,
      "mse": 46.387359836937854,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 20.00000045391933,
      "sensitivity": -1.3185851535646442e-08,
      "success": true,
      "mse": 7.025441987080819e-14,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 37.67890704576536,
      "sensitivity": 0.20642186383742842,
      "success": true,
      "mse": 9.119266055049785,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 48.214077192098856,
      "sensitivity": -0.13761487069072637,
      "success": true,
      "mse": 168.49745158002642,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 25.828746802957134,
      "sensitivity": 0.11009172486040546,
      "success": true,
      "mse": 116.26503567787982,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 22.666670994680437,
      "sensitivity": -8.625783146087862e-08,
      "success": true,
      "mse": 32.88888888889009,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 39.9143645404962,
      "sensitivity": 0.055046027615635075,
      "success": true,
      "mse": 152.3995922528077,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 17.119252944611155,
      "sensitivity": 0.1376149203312814,
      "success": true,
      "mse": 74.27522935780866,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 34.947998959818264,
      "sensitivity": 0.24770666707694503,
      "success": true,
      "mse": 9.647298674832347,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 35.05504973271133,
      "sensitivity": 0.1788990053487547,
      "success": true,
      "mse": 32.16513761467987,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 8.562698642913476,
      "sensitivity": 0.49541269744783484,
      "success": true,
      "mse": 115.92252803262326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 29.850154586799732,
      "sensitivity": 0.09633023721860148,
      "success": true,
      "mse": 50.0570846075436,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 48.66666600004399,
      "sensitivity": 7.305797804714841e-09,
      "success": true,
      "mse": 24.888888888888996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 22.712535089196635,
      "sensitivity": 0.39908262209253437,
      "success": true,
      "mse": 47.170234454638816,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 42.23551035506737,
      "sensitivity": -0.15137683472541505,
      "success": true,
      "mse": 141.18858307857155,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 28.174322179404808,
      "sensitivity": 0.3165135634923008,
      "success": true,
      "mse": 74.48929663609213,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 40.128420518685445,
      "sensitivity": -0.08256843923652459,
      "success": true,
      "mse": 222.89908256883123,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 40.42815717748665,
      "sensitivity": -0.27522978775814433,
      "success": true,
      "mse": 129.98980632011268,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 41.397551859284555,
      "sensitivity": -0.04128437773317769,
      "success": true,
      "mse": 72.61365953109096,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 47.26911685739786,
      "sensitivity": 0.04128432889909907,
      "success": true,
      "mse": 5.946992864424955,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 37.67889432144442,
      "sensitivity": 0.20642210484848952,
      "success": true,
      "mse": 49.119266055047284,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 48.66666941540896,
      "sensitivity": -5.697011384160511e-08,
      "success": true,
      "mse": 24.888888888889415,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 9.357794694615771,
      "sensitivity": 0.41284409667280403,
      "success": true,
      "mse": 172.4770642201843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 5.4006200601385315,
      "sensitivity": 0.3853209385336277,
      "success": true,
      "mse": 40.91335372069753,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 16.969417944989722,
      "sensitivity": 0.23394496820983912,
      "success": true,
      "mse": 96.05096839959239,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 25.678899754412413,
      "sensitivity": 0.20642198544956314,
      "success": true,
      "mse": 217.119266055047,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 13.35780569366122,
      "sensitivity": 0.4128438914160041,
      "success": true,
      "mse": 89.81039755352029,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 52.77370086095948,
      "sensitivity": -0.06880735501679289,
      "success": true,
      "mse": 5.457696228338518,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 19.226294858008373,
      "sensitivity": 0.06880742495409932,
      "success": true,
      "mse": 58.791029561673234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 27.226302048114068,
      "sensitivity": 0.06880729007029977,
      "success": true,
      "mse": 32.124362895005504,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 30.21407066196871,
      "sensitivity": -0.137614747274733,
      "success": true,
      "mse": 72.49745158002113,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 28.773704687082876,
      "sensitivity": -0.0688074267924914,
      "success": true,
      "mse": 117.45769622833963,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 48.666676657108766,
      "sensitivity": -1.923442593858906e-07,
      "success": true,
      "mse": 24.888888888894996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 52.81651311682316,
      "sensitivity": -0.09633026828604103,
      "success": true,
      "mse": 14.501529051987863,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 27.721713292076483,
      "sensitivity": 0.17889906300268427,
      "success": true,
      "mse": 150.38735983690123,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 22.00000717900197,
      "sensitivity": -1.4027664491831345e-07,
      "success": true,
      "mse": 56.000000000003205,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 37.67890405868935,
      "sensitivity": 0.20642191995475756,
      "success": true,
      "mse": 22.452599388380772,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 45.8929645985898,
      "sensitivity": 0.06880736863448372,
      "success": true,
      "mse": 5.457696228338657,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 58.706422944873296,
      "sensitivity": -0.4541284624578274,
      "success": true,
      "mse": 124.03058103975546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 50.00000386762991,
      "sensitivity": -7.649069810877762e-08,
      "success": true,
      "mse": 9.466573754073738e-13,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 41.847080263726,
      "sensitivity": -0.33027496352952745,
      "success": true,
      "mse": 87.2742099898193,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 30.862387535225295,
      "sensitivity": 0.3027522463057201,
      "success": true,
      "mse": 35.86544342507685,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 20.000000074394485,
      "sensitivity": -4.995194813339765e-09,
      "success": true,
      "mse": 3.4782254028232684e-14,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 21.74310968462146,
      "sensitivity": 0.16513779000211906,
      "success": true,
      "mse": 128.92966360856835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "bias": 52.98776478336452,
      "sensitivity": -0.20642197049821906,
      "success": true,
      "mse": 132.67482161060198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "bias": {
        "r": 0.9999999999999885,
        "p": 0.0
      },
      "sensitivity": {
        "r": 0.99999999999999,
        "p": 0.0
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 77.04729082993819,
  "bic_Control": -77.19722740750426,
  "bic_Cocaine": 215.2246717509804,
  "bic_results": {
    "average_bic": 77.04729082993819,
    "individual_bics": [
      -1253.8387549908216,
      304.9706023221284,
      295.00759532002394,
      -1253.8132477084237,
      307.3509831796292,
      348.8166744473092,
      -1253.8136930892842,
      368.0252066820079,
      -1253.815368296225,
      280.64281626042157,
      268.19595690306164,
      -1253.8144572047172,
      278.9952974960082,
      325.7679681166604,
      -1253.8001444317035,
      269.9752071120839,
      -1254.17140066685,
      327.61624446629867,
      362.2013468406083,
      -1253.8151834094813,
      309.8447590597015,
      366.79905278731746,
      363.87957143719683,
      309.84475905970237,
      307.2057338793848,
      244.35494030607214,
      -1359.2657531965149,
      300.7156339053982,
      401.7017069362257,
      394.26448304784697,
      328.37695463153716,
      -1253.815948929188,
      407.62013802339294,
      402.29978689580395,
      372.6449772116021,
      281.6875066185724,
      316.580983292062,
      291.85398299353045,
      366.79905278732815,
      298.7115038255289,
      401.98090185153796,
      373.5652863627001,
      -1253.814440658157,
      -1232.2151536893546,
      364.08551915604414,
      357.88831787981803,
      348.2837588977628,
      -1392.0239301383174,
      265.32523719814606,
      414.06833355404416,
      395.1448727910155,
      330.74526037870703,
      408.9471860071905,
      372.2920346265357,
      268.19595690311786,
      329.61042399818064,
      394.994409068505,
      352.16674801587743,
      316.53087685278535,
      349.1372981051415,
      405.050301388033,
      372.43880938556964,
      428.33805700164925,
      400.8356394097301,
      371.13818730148665,
      243.52255188631045,
      351.2022000867356,
      316.5308768527862,
      415.2588592483593,
      341.87966348886573,
      385.40420919414987,
      426.9981692538089,
      381.9781201205775,
      239.14374664258776,
      360.36883517668707,
      329.54573191111393,
      371.05650359406934,
      395.6653717218761,
      316.53087685279763,
      288.98234053445856,
      408.26931423398406,
      357.8883178798208,
      311.27710770346465,
      239.14374664258906,
      398.44231763318044,
      -1259.3824158739685,
      380.5171867026047,
      335.163868567014,
      -1427.8777414231972,
      400.417999280545,
      401.8783420441695
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        -1253.8387549908216,
        304.9706023221284,
        295.00759532002394,
        -1253.8132477084237,
        307.3509831796292,
        348.8166744473092,
        -1253.8136930892842,
        368.0252066820079,
        -1253.815368296225,
        280.64281626042157,
        268.19595690306164,
        -1253.8144572047172,
        278.9952974960082,
        325.7679681166604,
        -1253.8001444317035,
        269.9752071120839,
        -1254.17140066685,
        327.61624446629867,
        362.2013468406083,
        -1253.8151834094813,
        309.8447590597015,
        366.79905278731746,
        363.87957143719683,
        309.84475905970237,
        307.2057338793848,
        244.35494030607214,
        -1359.2657531965149,
        300.7156339053982,
        401.7017069362257,
        394.26448304784697,
        328.37695463153716,
        -1253.815948929188,
        407.62013802339294,
        402.29978689580395,
        372.6449772116021,
        281.6875066185724,
        316.580983292062,
        291.85398299353045,
        366.79905278732815,
        298.7115038255289,
        401.98090185153796,
        373.5652863627001,
        -1253.814440658157
      ],
      "Cocaine": [
        -1232.2151536893546,
        364.08551915604414,
        357.88831787981803,
        348.2837588977628,
        -1392.0239301383174,
        265.32523719814606,
        414.06833355404416,
        395.1448727910155,
        330.74526037870703,
        408.9471860071905,
        372.2920346265357,
        268.19595690311786,
        329.61042399818064,
        394.994409068505,
        352.16674801587743,
        316.53087685278535,
        349.1372981051415,
        405.050301388033,
        372.43880938556964,
        428.33805700164925,
        400.8356394097301,
        371.13818730148665,
        243.52255188631045,
        351.2022000867356,
        316.5308768527862,
        415.2588592483593,
        341.87966348886573,
        385.40420919414987,
        426.9981692538089,
        381.9781201205775,
        239.14374664258776,
        360.36883517668707,
        329.54573191111393,
        371.05650359406934,
        395.6653717218761,
        316.53087685279763,
        288.98234053445856,
        408.26931423398406,
        357.8883178798208,
        311.27710770346465,
        239.14374664258906,
        398.44231763318044,
        -1259.3824158739685,
        380.5171867026047,
        335.163868567014,
        -1427.8777414231972,
        400.417999280545,
        401.8783420441695
      ]
    },
    "num_parameters": 2,
    "prediction_type": "numerical",
    "bic_formula": "BIC calculated from MSE using Gaussian error assumption"
  },
  "recovery_summary": "Parameter Recovery:\n- bias: r = 1.000\n- sensitivity: r = 1.000",
  "previous_models": [
    "Specification: predicted_proposed_perc = bias + sensitivity * (100 * token_opp / (token_opp + token_self))\nSummary: A linear computational model that predicts the proposed percentage offered by the participant (as proposer) based on the relative contribution of the opponent to the shared pot. The model includes two learnable parameters: a bias parameter controlling overall generosity/selfishness and a sensitivity parameter capturing how strongly the proposal tracks the fair share given by relative contribution.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation\nBIC: 77.04729082993819\n\nParameter Recovery:\n- bias: r = 1.000\n- sensitivity: r = 1.000"
  ]
}