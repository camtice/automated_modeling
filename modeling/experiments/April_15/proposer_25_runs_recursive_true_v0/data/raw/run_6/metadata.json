{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should directly predict a numerical value (not a binary choice). The model's predictions will be compared to actual values using mean squared error.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let\u2019s proceed step by step:\n\n**1. Key Psychological Mechanisms**\n- **Inequity Aversion / Fairness Concerns:** Proposers are averse to making unfair offers, especially in terms of relative contribution (\u201cwho found more tokens\u201d) and in terms of the division itself (equality vs proportionality).\n- **Self-interest:** Proposers also weigh their possible gain from each split; thus, self-reward is a factor.\n- **Contribution-based Fairness:** Because the \u201cpot\u201d is created by the actors\u2019 token search, proportional splits (based on contribution) are salient reference points.\n- **Baseline Strategic/Normative Behavior:** There may be a fixed bias toward a default \u201cfair\u201d split (e.g., 50/50).\n- **Individual Difference in Sensitivity/Weighting:** Each proposer might differ in how much they weight fairness (difference from proportionality), equality, and self-interest.\n\n**2. Mechanisms Interactions**\n- There is likely a tradeoff between maximizing one's own gain, maintaining fairness with respect to contributions, and possibly aiming for equal splits.\n- Proportionality and equality in the split are related but only identical if both contributed equally.\n- Including both as learnable weights can lead to collinearity, so keeping model parsimony in mind is important.\n\n**3. Mathematical Form Capturing Interactions**\n- A weighted linear combination of three features:\n    - Difference from the proportional share (\u201cproportionality fairness\u201d)\n    - Difference from the equal split (\u201cequality\u201d)\n    - Self-interest (absolute reward amount)\n- Add a baseline/intercept term.\n- One way to reduce parameter covariance: eliminate either the equality or self-interest term, since proportionality already combines contribution info and split, and self-interest is reflected in maximizing own share, but let's keep parsimonious and interpretable.\n\n**4. Model Parameters**\n- **Alpha_prop:** Weight on proportional fairness deviation (main psychological variable of interest)\n- **Beta_self:** Weight on self-reward (how strongly is proposer motivated by own payoff)\n- **Gamma_0:** Baseline/intercept (tendency to stick to default splits regardless of context)\n\nTo limit overparameterization/high covariance:\n- Avoid a separate equality term, since for variable pots, proportionality captures fairness better.\n- Exclude opponent's share weighting (as this is collinear with self-interest and proportionality for fixed pots).\n- No learning rate/adaptation needed, since this only fits proposer behavior per trial.\n\n**5. Behavioral Mapping**\n- For each proposer trial, compute:\n    - **Proposer share** = predicted proposed_perc (from 0 to 100).\n    - **Proportional share** = (token_opp / (token_self + token_opp)) * 100 (i.e., the \u201cfair\u201d offer given contributions).\n    - **Self share** = subject\u2019s own share in \u00a3.\n- The model outputs the % offered to the opponent (proposed_perc), which, by structure, is 0\u2013100.\n\n**6. Model type and functional form**\n- To ensure output between 0 and 100, logit or sigmoid-based link can be used.\n    - Model latent utility as a linear sum and then squash via sigmoid*100.\n    - Utility can be unbounded; output mapping is bounded.\n\n***Final model specification:***\n\nLet\n- p\u0302 = predicted proposed_perc (from 0\u2013100)\n- U = latent utility of \u201coffer to other,\u201d with higher = more generosity (i.e., higher offers to other)\n- The \u201cnatural\u201d reference point is the proportional share (opponent tokens / sum tokens \u00d7 100).\n- Self-interest is: combined_earning \u2212 amount offered to opponent = split_self.\n\nLet\u2019s define a simple model with three learnable parameters:\n\n<MODEL>\nU = gamma_0\n    + alpha_prop * (proportional_share - p\u0302)\n    + beta_self * (split_self / combined_earning)\np\u0302 = 100 / (1 + exp(-U))\n</MODEL>\n\n---\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Latent utility of the proposed offer (higher means more likely to propose a high share to opponent)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"proportional_share\": {\n      \"description\": \"Proportional (fair) share for the opponent, as a percentage contribution (token_opp / (token_self + token_opp) * 100)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p\u0302\": {\n      \"description\": \"Predicted offer percentage to opponent (model output, 0 to 100)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount allocated to self in \u00a3 for the predicted offer (i.e., combined_earning \u00d7 (1 \u2212 p\u0302/100))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": null,\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total \u00a3 to be divided between participant and opponent (3 \u00d7 (token_self + token_opp))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": null,\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha_prop\": {\n      \"description\": \"Weight on proportional fairness error (how much the proposer is pulled toward the reference 'fair' split based on contributions)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_self\": {\n      \"description\": \"Weight on own share (motivation to maximize self-reward in proportion to available money)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_0\": {\n      \"description\": \"Baseline/intercept parameter for generosity\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Opponent's contribution (number of tokens found)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": null\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's own contribution (tokens found by participant)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": null\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA three-parameter model of proposer behavior in which the predicted share offered to the opponent is determined by a weighted combination of deviation from proportional fairness (based on token contributions), motivation to retain a high self-share (relative to the pot size), and a baseline bias. The model transforms the latent utility linearly and maps it to the 0\u2013100% output range using a sigmoidal function, allowing accurate fit to observed proposals while minimizing parameter covariance.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha_prop', 'beta_self', 'gamma_0']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = gamma_0\n    + alpha_prop * (proportional_share - p\u0302)\n    + beta_self * (split_self / combined_earning)\np\u0302 = 100 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Latent utility of the proposed offer (higher means more likely to propose a high share to opponent)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"proportional_share\": {\n      \"description\": \"Proportional (fair) share for the opponent, as a percentage contribution (token_opp / (token_self + token_opp) * 100)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p\\u0302\": {\n      \"description\": \"Predicted offer percentage to opponent (model output, 0 to 100)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount allocated to self in \\u00a3 for the predicted offer (i.e., combined_earning \\u00d7 (1 \\u2212 p\\u0302/100))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": null,\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total \\u00a3 to be divided between participant and opponent (3 \\u00d7 (token_self + token_opp))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": null,\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha_prop\": {\n      \"description\": \"Weight on proportional fairness error (how much the proposer is pulled toward the reference 'fair' split based on contributions)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_self\": {\n      \"description\": \"Weight on own share (motivation to maximize self-reward in proportion to available money)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_0\": {\n      \"description\": \"Baseline/intercept parameter for generosity\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Opponent's contribution (number of tokens found)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": null,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's own contribution (tokens found by participant)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": null,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha_prop=0, beta_self=0, gamma_0=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        \n        if (token_self + token_opp) == 0:\n            proportional_share = 50  # Avoid division by zero if both are zero, assume 50/50 split\n        else:\n            proportional_share = (token_opp / (token_self + token_opp)) * 100\n\n        # Initialize p_hat to prevent errors in first iteration\n        p_hat = 50  # Initial guess, doesn't really matter after first trial\n        \n        #Calculating Split Self\n        split_self = combined_earning * (1 - (p_hat / 100))\n        \n        U = gamma_0 + alpha_prop * (proportional_share - p_hat) + beta_self * (split_self / combined_earning)\n        \n        p_hat = 100 / (1 + math.exp(-U))\n        \n        model_predictions.append(p_hat)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744744294.36005
    }
  ],
  "learnable_parameters": {
    "alpha_prop": {
      "description": "Weight on proportional fairness error (how much the proposer is pulled toward the reference 'fair' split based on contributions)",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta_self": {
      "description": "Weight on own share (motivation to maximize self-reward in proportion to available money)",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma_0": {
      "description": "Baseline/intercept parameter for generosity",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = gamma_0\n    + alpha_prop * (proportional_share - p\u0302)\n    + beta_self * (split_self / combined_earning)\np\u0302 = 100 / (1 + exp(-U))",
  "variable_descriptions": {
    "U": {
      "description": "Latent utility of the proposed offer (higher means more likely to propose a high share to opponent)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "proportional_share": {
      "description": "Proportional (fair) share for the opponent, as a percentage contribution (token_opp / (token_self + token_opp) * 100)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "p\u0302": {
      "description": "Predicted offer percentage to opponent (model output, 0 to 100)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "Amount allocated to self in \u00a3 for the predicted offer (i.e., combined_earning \u00d7 (1 \u2212 p\u0302/100))",
      "range": {
        "min": 0,
        "max": null,
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "combined_earning": {
      "description": "Total \u00a3 to be divided between participant and opponent (3 \u00d7 (token_self + token_opp))",
      "range": {
        "min": 0,
        "max": null,
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "alpha_prop": {
      "description": "Weight on proportional fairness error (how much the proposer is pulled toward the reference 'fair' split based on contributions)",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta_self": {
      "description": "Weight on own share (motivation to maximize self-reward in proportion to available money)",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma_0": {
      "description": "Baseline/intercept parameter for generosity",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "token_opp": {
      "description": "Opponent's contribution (number of tokens found)",
      "range": {
        "min": 0,
        "max": null,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Participant's own contribution (tokens found by participant)",
      "range": {
        "min": 0,
        "max": null,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A three-parameter model of proposer behavior in which the predicted share offered to the opponent is determined by a weighted combination of deviation from proportional fairness (based on token contributions), motivation to retain a high self-share (relative to the pot size), and a baseline bias. The model transforms the latent utility linearly and maps it to the 0\u2013100% output range using a sigmoidal function, allowing accurate fit to observed proposals while minimizing parameter covariance.",
  "target_variable": "proposed_perc",
  "full_reasoning": "Let\u2019s proceed step by step:\n\n**1. Key Psychological Mechanisms**\n- **Inequity Aversion / Fairness Concerns:** Proposers are averse to making unfair offers, especially in terms of relative contribution (\u201cwho found more tokens\u201d) and in terms of the division itself (equality vs proportionality).\n- **Self-interest:** Proposers also weigh their possible gain from each split; thus, self-reward is a factor.\n- **Contribution-based Fairness:** Because the \u201cpot\u201d is created by the actors\u2019 token search, proportional splits (based on contribution) are salient reference points.\n- **Baseline Strategic/Normative Behavior:** There may be a fixed bias toward a default \u201cfair\u201d split (e.g., 50/50).\n- **Individual Difference in Sensitivity/Weighting:** Each proposer might differ in how much they weight fairness (difference from proportionality), equality, and self-interest.\n\n**2. Mechanisms Interactions**\n- There is likely a tradeoff between maximizing one's own gain, maintaining fairness with respect to contributions, and possibly aiming for equal splits.\n- Proportionality and equality in the split are related but only identical if both contributed equally.\n- Including both as learnable weights can lead to collinearity, so keeping model parsimony in mind is important.\n\n**3. Mathematical Form Capturing Interactions**\n- A weighted linear combination of three features:\n    - Difference from the proportional share (\u201cproportionality fairness\u201d)\n    - Difference from the equal split (\u201cequality\u201d)\n    - Self-interest (absolute reward amount)\n- Add a baseline/intercept term.\n- One way to reduce parameter covariance: eliminate either the equality or self-interest term, since proportionality already combines contribution info and split, and self-interest is reflected in maximizing own share, but let's keep parsimonious and interpretable.\n\n**4. Model Parameters**\n- **Alpha_prop:** Weight on proportional fairness deviation (main psychological variable of interest)\n- **Beta_self:** Weight on self-reward (how strongly is proposer motivated by own payoff)\n- **Gamma_0:** Baseline/intercept (tendency to stick to default splits regardless of context)\n\nTo limit overparameterization/high covariance:\n- Avoid a separate equality term, since for variable pots, proportionality captures fairness better.\n- Exclude opponent's share weighting (as this is collinear with self-interest and proportionality for fixed pots).\n- No learning rate/adaptation needed, since this only fits proposer behavior per trial.\n\n**5. Behavioral Mapping**\n- For each proposer trial, compute:\n    - **Proposer share** = predicted proposed_perc (from 0 to 100).\n    - **Proportional share** = (token_opp / (token_self + token_opp)) * 100 (i.e., the \u201cfair\u201d offer given contributions).\n    - **Self share** = subject\u2019s own share in \u00a3.\n- The model outputs the % offered to the opponent (proposed_perc), which, by structure, is 0\u2013100.\n\n**6. Model type and functional form**\n- To ensure output between 0 and 100, logit or sigmoid-based link can be used.\n    - Model latent utility as a linear sum and then squash via sigmoid*100.\n    - Utility can be unbounded; output mapping is bounded.\n\n***Final model specification:***\n\nLet\n- p\u0302 = predicted proposed_perc (from 0\u2013100)\n- U = latent utility of \u201coffer to other,\u201d with higher = more generosity (i.e., higher offers to other)\n- The \u201cnatural\u201d reference point is the proportional share (opponent tokens / sum tokens \u00d7 100).\n- Self-interest is: combined_earning \u2212 amount offered to opponent = split_self.\n\nLet\u2019s define a simple model with three learnable parameters:\n\n<MODEL>\nU = gamma_0\n    + alpha_prop * (proportional_share - p\u0302)\n    + beta_self * (split_self / combined_earning)\np\u0302 = 100 / (1 + exp(-U))\n</MODEL>\n\n---\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Latent utility of the proposed offer (higher means more likely to propose a high share to opponent)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"proportional_share\": {\n      \"description\": \"Proportional (fair) share for the opponent, as a percentage contribution (token_opp / (token_self + token_opp) * 100)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"p\u0302\": {\n      \"description\": \"Predicted offer percentage to opponent (model output, 0 to 100)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount allocated to self in \u00a3 for the predicted offer (i.e., combined_earning \u00d7 (1 \u2212 p\u0302/100))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": null,\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total \u00a3 to be divided between participant and opponent (3 \u00d7 (token_self + token_opp))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": null,\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"alpha_prop\": {\n      \"description\": \"Weight on proportional fairness error (how much the proposer is pulled toward the reference 'fair' split based on contributions)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_self\": {\n      \"description\": \"Weight on own share (motivation to maximize self-reward in proportion to available money)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_0\": {\n      \"description\": \"Baseline/intercept parameter for generosity\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Opponent's contribution (number of tokens found)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": null\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's own contribution (tokens found by participant)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": null\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA three-parameter model of proposer behavior in which the predicted share offered to the opponent is determined by a weighted combination of deviation from proportional fairness (based on token contributions), motivation to retain a high self-share (relative to the pot size), and a baseline bias. The model transforms the latent utility linearly and maps it to the 0\u2013100% output range using a sigmoidal function, allowing accurate fit to observed proposals while minimizing parameter covariance.\n</SUMMARY>",
  "prediction_type": "numerical_variable_estimation",
  "current_model": "Specification: U = gamma_0\n    + alpha_prop * (proportional_share - p\u0302)\n    + beta_self * (split_self / combined_earning)\np\u0302 = 100 / (1 + exp(-U))\nSummary: A three-parameter model of proposer behavior in which the predicted share offered to the opponent is determined by a weighted combination of deviation from proportional fairness (based on token contributions), motivation to retain a high self-share (relative to the pot size), and a baseline bias. The model transforms the latent utility linearly and maps it to the 0\u2013100% output range using a sigmoidal function, allowing accurate fit to observed proposals while minimizing parameter covariance.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha_prop=0, beta_self=0, gamma_0=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        \n        if (token_self + token_opp) == 0:\n            proportional_share = 50  # Avoid division by zero if both are zero, assume 50/50 split\n        else:\n            proportional_share = (token_opp / (token_self + token_opp)) * 100\n\n        # Initialize p_hat to prevent errors in first iteration\n        p_hat = 50  # Initial guess, doesn't really matter after first trial\n        \n        #Calculating Split Self\n        split_self = combined_earning * (1 - (p_hat / 100))\n        \n        U = gamma_0 + alpha_prop * (proportional_share - p_hat) + beta_self * (split_self / combined_earning)\n        \n        p_hat = 100 / (1 + math.exp(-U))\n        \n        model_predictions.append(p_hat)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "group_parameter_averages": {
    "Control": {
      "alpha_prop": 2.8775247901743577,
      "beta_self": -0.8209896121280068,
      "gamma_0": -0.40113692982281335
    },
    "Cocaine": {
      "alpha_prop": 1.8092400838526068,
      "beta_self": -0.6377656236922383,
      "gamma_0": -0.49734868800949017
    }
  },
  "fitting_results": [
    {
      "alpha_prop": -4.9980237820754184e-09,
      "beta_self": -2.616617140502019,
      "gamma_0": 1.308308565902436,
      "success": true,
      "mse": 2.5329728224422015e-12,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 4.441940625670389,
      "beta_self": -8.420676923569353,
      "gamma_0": 4.130295733777015,
      "success": true,
      "mse": 1232.0000000000002,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 4.966150206052314,
      "beta_self": 2.0461070516827182,
      "gamma_0": -1.428518669486592,
      "success": true,
      "mse": 1180.0,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": -2.2913564605029066e-09,
      "beta_self": -3.292383867942508,
      "gamma_0": 1.6461919449135243,
      "success": true,
      "mse": 6.047261437157646e-13,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 3.966878908337314,
      "beta_self": 3.712315428506935,
      "gamma_0": -1.8561577135228513,
      "success": true,
      "mse": 1180.0,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 0.028822010309649693,
      "beta_self": -8.627084124458317,
      "gamma_0": 3.7210236350474655,
      "success": true,
      "mse": 47.627289836310474,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": -8.66027087647405,
      "beta_self": -4.275598914571536,
      "gamma_0": 2.1377995104063583,
      "success": true,
      "mse": 1666.6666666666672,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 1.0992419257838986,
      "beta_self": -3.526148672611929,
      "gamma_0": 1.7630602741843289,
      "success": true,
      "mse": 1506.6464183209894,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 7.409631011585823,
      "beta_self": -4.961676754327843,
      "gamma_0": 2.4808383617454925,
      "success": true,
      "mse": 1666.6666666666667,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 1.1086429230758204,
      "beta_self": -7.835228025805554,
      "gamma_0": 3.8375552064054808,
      "success": true,
      "mse": 1431.9813483879325,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": -5.155694634072425,
      "beta_self": 6.772546824600359,
      "gamma_0": -3.386273456164497,
      "success": true,
      "mse": 1960.0000000000002,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 8.805318577467723,
      "beta_self": 5.800530205842547,
      "gamma_0": -2.9002651254196126,
      "success": true,
      "mse": 1666.6666666666667,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 7.816766817332063,
      "beta_self": -5.409035464645637,
      "gamma_0": 2.2990525934982355,
      "success": true,
      "mse": 1226.666666666667,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 2.2065215375258056,
      "beta_self": -4.471471315252089,
      "gamma_0": 2.07539330841692,
      "success": true,
      "mse": 1567.9999996470813,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 2.0913936717094116e-07,
      "beta_self": 8.581641613512929,
      "gamma_0": -4.290822159755727,
      "success": true,
      "mse": 5.558556196115467e-09,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 5.847706781622692,
      "beta_self": -0.6218638077758586,
      "gamma_0": 0.2308865508022762,
      "success": true,
      "mse": 1432.0000000014531,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": -4.316473844432299e-09,
      "beta_self": -2.151268665318007,
      "gamma_0": 1.0756343263994874,
      "success": true,
      "mse": 1.9049349091388736e-12,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 6.160406703567709,
      "beta_self": -0.047595837275036815,
      "gamma_0": -0.3816671660824822,
      "success": true,
      "mse": 1586.6666666666667,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 6.764208861149093,
      "beta_self": -6.451159807819194,
      "gamma_0": 3.145537274157406,
      "success": true,
      "mse": 1632.0000000000014,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 7.98984358348314,
      "beta_self": -3.4633029044430073,
      "gamma_0": 1.7316514942890047,
      "success": true,
      "mse": 1666.6666666666667,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 7.481718891986532,
      "beta_self": -0.1576044671396439,
      "gamma_0": -0.7684947406367579,
      "success": true,
      "mse": 1773.3333333334485,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 0.016671417489015166,
      "beta_self": -5.731783069130623,
      "gamma_0": 2.2846655377475487,
      "success": true,
      "mse": 66.90059911649102,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 0.5136206901151774,
      "beta_self": -1.3147859068045322,
      "gamma_0": -8.619058912753456,
      "success": true,
      "mse": 645.3909243525165,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 9.965257400155675,
      "beta_self": 2.080785666359662,
      "gamma_0": -1.2007353972047938,
      "success": true,
      "mse": 1581.3333333333348,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 10.0,
      "beta_self": 1.7163444823369256,
      "gamma_0": -0.8581724648845249,
      "success": true,
      "mse": 1226.6666666666767,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 2.0819621621297983,
      "beta_self": 2.7147534179457984,
      "gamma_0": -1.3573766355698356,
      "success": true,
      "mse": 1366.6666655768945,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": -10.0,
      "beta_self": -4.205957779023145,
      "gamma_0": 0.7166662433531094,
      "success": true,
      "mse": 2266.6666666951974,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": -1.4630170025039326,
      "beta_self": 5.326899421831354,
      "gamma_0": -2.6634497734180327,
      "success": true,
      "mse": 2206.6660170839828,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 2.503838989733067,
      "beta_self": 3.696995853066792,
      "gamma_0": -1.8484978457614265,
      "success": true,
      "mse": 1506.666666652412,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 3.417052763364792,
      "beta_self": 4.4332907966736865,
      "gamma_0": -3.262623476182188,
      "success": true,
      "mse": 2034.666666677851,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 0.021011816185801974,
      "beta_self": -0.3236664133613881,
      "gamma_0": -0.1080744943788589,
      "success": true,
      "mse": 32.370698501177,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 2.0583347064645623,
      "beta_self": -4.0256406967632525,
      "gamma_0": 2.0128202390759258,
      "success": true,
      "mse": 1666.6666651330888,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": -1.9182585590963055,
      "beta_self": -3.998406294263153,
      "gamma_0": 1.245431693932387,
      "success": true,
      "mse": 1951.999989570664,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 5.42316727008396,
      "beta_self": 4.622412665829613,
      "gamma_0": -2.5523673257447554,
      "success": true,
      "mse": 1588.0000000002292,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 9.102273913321046,
      "beta_self": -9.99987914264513,
      "gamma_0": -9.999900799717283,
      "success": true,
      "mse": 2219.999592065563,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": -0.0032073581813718563,
      "beta_self": 10.0,
      "gamma_0": -5.847603214900403,
      "success": true,
      "mse": 12.585196120794146,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 5.574907508974601,
      "beta_self": -5.063305695640992,
      "gamma_0": 2.3713102223218367,
      "success": true,
      "mse": 1354.6666666666667,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 9.003351637398257,
      "beta_self": 8.225123419753357,
      "gamma_0": -4.1125616887725505,
      "success": true,
      "mse": 1500.0,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 4.883150334739526,
      "beta_self": -6.450879281205504,
      "gamma_0": 2.98427758870538,
      "success": true,
      "mse": 1541.3333333333333,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 8.76687936043539,
      "beta_self": -0.07043908893797729,
      "gamma_0": -0.37025697401431934,
      "success": true,
      "mse": 1400.0000000249977,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 5.264340781112544,
      "beta_self": 7.009458638406928,
      "gamma_0": -4.657412815711587,
      "success": true,
      "mse": 1928.0000000017621,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": 3.4995807355162896,
      "beta_self": -8.255943135916235,
      "gamma_0": 3.8868247640272524,
      "success": true,
      "mse": 1241.3333333804155,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": -7.255186641877522,
      "beta_self": 3.7276443892955653,
      "gamma_0": -1.8638222014073125,
      "success": true,
      "mse": 1666.6666666666667,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha_prop": -1.710421520716683,
      "beta_self": 5.90879147602653,
      "gamma_0": -4.34078631393996,
      "success": true,
      "mse": 2266.6665057917257,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": -0.002754956048398253,
      "beta_self": 3.1512768274177283,
      "gamma_0": -1.736008820887972,
      "success": true,
      "mse": 63.239735212777966,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 8.018593219298033,
      "beta_self": 2.7257357201579184,
      "gamma_0": -2.4088386269757645,
      "success": true,
      "mse": 2314.6666666672704,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 0.7679673156792726,
      "beta_self": -6.656295729211439,
      "gamma_0": -9.978118652768185,
      "success": true,
      "mse": 923.0934034223463,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": -4.43341584286226e-09,
      "beta_self": -0.8045680055926239,
      "gamma_0": -0.9840103704397959,
      "success": true,
      "mse": 8.501118945089411e-13,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 0.008261207626235386,
      "beta_self": -7.831305308329951,
      "gamma_0": 3.8355495192903284,
      "success": true,
      "mse": 9.136292668325042,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 2.3454502509515516,
      "beta_self": -0.5414519254910178,
      "gamma_0": -0.4830338070242738,
      "success": true,
      "mse": 1938.666666576804,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 0.004942177472029453,
      "beta_self": 3.337303613542739,
      "gamma_0": -2.4538606126308578,
      "success": true,
      "mse": 116.33278089834833,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 8.254396725059376,
      "beta_self": -2.907334591664132,
      "gamma_0": 0.5092039067989005,
      "success": true,
      "mse": 2285.3333333337628,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 2.127247242811664,
      "beta_self": 2.9235811893832437,
      "gamma_0": -1.7029522138032982,
      "success": true,
      "mse": 1727.999999389134,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 0.007673396217203025,
      "beta_self": 5.819009090834565,
      "gamma_0": -4.0648052103832,
      "success": true,
      "mse": 74.22446479269868,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 0.009936090188984137,
      "beta_self": -5.701712158914143,
      "gamma_0": 2.743855864825903,
      "success": true,
      "mse": 9.67013563465723,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 6.574664319846999,
      "beta_self": -2.237836083233623,
      "gamma_0": 0.9585756464756237,
      "success": true,
      "mse": 1534.6666666666797,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 4.008745826673776,
      "beta_self": 2.5548065123805923,
      "gamma_0": -1.8527721859362891,
      "success": true,
      "mse": 1501.3333333373846,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 0.004143413862103839,
      "beta_self": -0.0032719589262692386,
      "gamma_0": -0.632448172602551,
      "success": true,
      "mse": 50.096179848717924,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": -9.186903449225595,
      "beta_self": -5.200637060737141,
      "gamma_0": 2.43997499755685,
      "success": true,
      "mse": 1688.0000000001605,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 7.839105370307699,
      "beta_self": -2.0492171490949125,
      "gamma_0": 0.8642659950873685,
      "success": true,
      "mse": 1321.3333333333344,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": -1.4748964959566142,
      "beta_self": 9.099164312168272,
      "gamma_0": -4.709926354274769,
      "success": true,
      "mse": 1841.3328915209393,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 10.0,
      "beta_self": -4.442764514922137,
      "gamma_0": 2.221382256105742,
      "success": true,
      "mse": 1460.0,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 10.0,
      "beta_self": -7.854548454342295,
      "gamma_0": 3.68611230831434,
      "success": true,
      "mse": 2074.66666666667,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": -5.333417142216506,
      "beta_self": -5.427286932496355,
      "gamma_0": 1.959871865075632,
      "success": true,
      "mse": 1978.6666666666729,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": -0.0016665327750222873,
      "beta_self": 4.988149984939841,
      "gamma_0": -2.9274317478283107,
      "success": true,
      "mse": 72.62390895996798,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 0.0016521711270616288,
      "beta_self": -0.426678615211281,
      "gamma_0": 0.1866669999333709,
      "success": true,
      "mse": 5.946935185156828,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 2.343439099218689,
      "beta_self": 9.453682389089991,
      "gamma_0": -4.726841148362898,
      "success": true,
      "mse": 1526.666666578051,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 7.436885063722169,
      "beta_self": 5.779572527965159,
      "gamma_0": -3.0501287771611345,
      "success": true,
      "mse": 1688.0000000000039,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 3.3159638987869027,
      "beta_self": -3.3858028257891286,
      "gamma_0": 0.6469291362984014,
      "success": true,
      "mse": 1674.6666666683668,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 10.0,
      "beta_self": -6.6114945040783315,
      "gamma_0": 2.0400793411275013,
      "success": true,
      "mse": 1712.000000000232,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 0.011131400168923628,
      "beta_self": -9.39826215167758,
      "gamma_0": 3.783643936140007,
      "success": true,
      "mse": 96.30668006912795,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 0.011364068719852391,
      "beta_self": -3.467366749140283,
      "gamma_0": 0.9353048188364708,
      "success": true,
      "mse": 240.93721668658853,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 1.2639252786401107,
      "beta_self": 3.805202655488565,
      "gamma_0": -2.5659192058004194,
      "success": true,
      "mse": 1554.660119708839,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": -5.482947061420658,
      "beta_self": -4.397757122552543,
      "gamma_0": 2.1988791757126513,
      "success": true,
      "mse": 1606.6666666667454,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 3.7722223371025585,
      "beta_self": -6.349773753930905,
      "gamma_0": 2.128918348608681,
      "success": true,
      "mse": 2214.666666666666,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 0.0034100644598858685,
      "beta_self": 8.483271980283199,
      "gamma_0": -5.057802677463288,
      "success": true,
      "mse": 32.08378158029201,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": -6.899625779539051,
      "beta_self": -5.08621822992921,
      "gamma_0": 1.497141720478193,
      "success": true,
      "mse": 2128.0000000001664,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": -0.0036777273588315704,
      "beta_self": -0.7979789503895994,
      "gamma_0": -0.6824762793637371,
      "success": true,
      "mse": 117.44969473003856,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 6.813042684089144,
      "beta_self": 0.650178428861155,
      "gamma_0": -0.48543186314318143,
      "success": true,
      "mse": 1688.0,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": -3.297231068744062,
      "beta_self": -1.411995591242048,
      "gamma_0": 0.7059978880248302,
      "success": true,
      "mse": 1619.9999999999948,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 9.181982149118085,
      "beta_self": -2.9998529886586542,
      "gamma_0": 1.2587673873480896,
      "success": true,
      "mse": 1788.000000001761,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 9.844487412323254,
      "beta_self": 2.2694559122132474,
      "gamma_0": -2.180702775123543,
      "success": true,
      "mse": 2314.6666666715078,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 9.913616556454038,
      "beta_self": 1.1132465715770063,
      "gamma_0": -0.5566253394694864,
      "success": true,
      "mse": 1500.000000000879,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 2.3079850727086395,
      "beta_self": -5.768916806271452,
      "gamma_0": 2.8844584826331467,
      "success": true,
      "mse": 1606.6666665403434,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 8.520472296506341,
      "beta_self": -1.8529832213327961,
      "gamma_0": 0.43694322634607285,
      "success": true,
      "mse": 2438.666666666671,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": -9.916043154908942e-09,
      "beta_self": -6.3909336689406695,
      "gamma_0": 3.1954663523552527,
      "success": true,
      "mse": 1.5519568078992389e-10,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": -9.352186781597204,
      "beta_self": -1.6457509524861547,
      "gamma_0": -0.3297921624650596,
      "success": true,
      "mse": 1754.6666666822953,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": -2.364798649121509,
      "beta_self": 1.1413569510842243,
      "gamma_0": -0.5706784766297431,
      "success": true,
      "mse": 1999.9999999355846,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": -1.8103016153276665e-08,
      "beta_self": 2.952659295774168,
      "gamma_0": -2.8626239798466906,
      "success": true,
      "mse": 1.3765351900549704e-11,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": 5.569485972590382,
      "beta_self": -3.341894951929147,
      "gamma_0": 0.624978648957696,
      "success": true,
      "mse": 1874.666666666676,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha_prop": -8.32814085963323,
      "beta_self": 8.222695580100236,
      "gamma_0": -4.2716890724621726,
      "success": true,
      "mse": 1654.6666666670512,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha_prop": {
        "r": 0.7394822516676118,
        "p": 1.5465751852511856e-18
      },
      "beta_self": {
        "r": 0.15154154725375168,
        "p": 0.13230616559007038
      },
      "gamma_0": {
        "r": 0.6444324947351439,
        "p": 4.678343554360058e-13
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 373.6289117063548,
  "bic_Control": 358.33112114298024,
  "bic_Cocaine": 387.33318241937786,
  "bic_results": {
    "average_bic": 373.6289117063548,
    "individual_bics": [
      -1205.255793907396,
      519.4633086338163,
      517.2639628754948,
      -1278.306828128041,
      517.2639628754948,
      353.5609088400672,
      534.8748333252041,
      529.7269260749687,
      534.8748333252041,
      527.1347377359668,
      543.1428946485023,
      534.8748333252041,
      519.2420501522878,
      531.7625735199987,
      -812.8770921224874,
      527.1354020086515,
      -1219.7880298095492,
      532.3661308714748,
      533.8028455967764,
      534.8748333252041,
      538.0386382620994,
      370.890811332424,
      486.4898743759354,
      532.1944135375317,
      519.2420501522882,
      524.7538354096213,
      550.556553012992,
      549.1883486454439,
      529.7276114766336,
      545.0496587844353,
      333.8671432496074,
      534.8748332782767,
      542.9343051281868,
      532.4089700172182,
      549.4955841317645,
      285.6857891052231,
      524.3040530151502,
      529.501447026655,
      530.8877664909388,
      525.9828105817311,
      542.3033695187913,
      519.8482161231552,
      534.8748333252041,
      550.5565493926638,
      368.0207813759251,
      551.6252766363388,
      504.7414589527447,
      -1260.9366218030136,
      269.352196323303,
      542.5847495404931,
      399.1064064097599,
      550.974833037144,
      536.7179246845845,
      376.18899159590995,
      272.24836640583146,
      530.6666998249069,
      529.5467602239095,
      356.13838977265897,
      535.5234907180055,
      523.0334342309199,
      539.9577015669432,
      528.122984734871,
      546.0425519217457,
      543.6263105901843,
      375.07721108382236,
      247.4538828729158,
      530.4001486925355,
      535.5234907180007,
      535.1190476785775,
      536.2435026768426,
      389.4716291526758,
      436.23856306681165,
      531.3268309226563,
      533.0049701222555,
      549.3729235703685,
      333.41309072758366,
      547.3370376585918,
      399.5937229946678,
      535.5234907180006,
      533.4264601245974,
      538.4587080275063,
      551.6252766364322,
      529.5014470266848,
      533.004970118243,
      554.2867500480246,
      -995.375843979905,
      537.4989506866931,
      544.1732327200533,
      -1118.924979766856,
      540.8727006709918,
      534.5063050255372
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        -1205.255793907396,
        519.4633086338163,
        517.2639628754948,
        -1278.306828128041,
        517.2639628754948,
        353.5609088400672,
        534.8748333252041,
        529.7269260749687,
        534.8748333252041,
        527.1347377359668,
        543.1428946485023,
        534.8748333252041,
        519.2420501522878,
        531.7625735199987,
        -812.8770921224874,
        527.1354020086515,
        -1219.7880298095492,
        532.3661308714748,
        533.8028455967764,
        534.8748333252041,
        538.0386382620994,
        370.890811332424,
        486.4898743759354,
        532.1944135375317,
        519.2420501522882,
        524.7538354096213,
        550.556553012992,
        549.1883486454439,
        529.7276114766336,
        545.0496587844353,
        333.8671432496074,
        534.8748332782767,
        542.9343051281868,
        532.4089700172182,
        549.4955841317645,
        285.6857891052231,
        524.3040530151502,
        529.501447026655,
        530.8877664909388,
        525.9828105817311,
        542.3033695187913,
        519.8482161231552,
        534.8748333252041
      ],
      "Cocaine": [
        550.5565493926638,
        368.0207813759251,
        551.6252766363388,
        504.7414589527447,
        -1260.9366218030136,
        269.352196323303,
        542.5847495404931,
        399.1064064097599,
        550.974833037144,
        536.7179246845845,
        376.18899159590995,
        272.24836640583146,
        530.6666998249069,
        529.5467602239095,
        356.13838977265897,
        535.5234907180055,
        523.0334342309199,
        539.9577015669432,
        528.122984734871,
        546.0425519217457,
        543.6263105901843,
        375.07721108382236,
        247.4538828729158,
        530.4001486925355,
        535.5234907180007,
        535.1190476785775,
        536.2435026768426,
        389.4716291526758,
        436.23856306681165,
        531.3268309226563,
        533.0049701222555,
        549.3729235703685,
        333.41309072758366,
        547.3370376585918,
        399.5937229946678,
        535.5234907180006,
        533.4264601245974,
        538.4587080275063,
        551.6252766364322,
        529.5014470266848,
        533.004970118243,
        554.2867500480246,
        -995.375843979905,
        537.4989506866931,
        544.1732327200533,
        -1118.924979766856,
        540.8727006709918,
        534.5063050255372
      ]
    },
    "num_parameters": 3,
    "prediction_type": "numerical",
    "bic_formula": "BIC calculated from MSE using Gaussian error assumption"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha_prop: r = 0.739\n- beta_self: r = 0.152\n- gamma_0: r = 0.644",
  "previous_models": [
    "Specification: U = gamma_0\n    + alpha_prop * (proportional_share - p\u0302)\n    + beta_self * (split_self / combined_earning)\np\u0302 = 100 / (1 + exp(-U))\nSummary: A three-parameter model of proposer behavior in which the predicted share offered to the opponent is determined by a weighted combination of deviation from proportional fairness (based on token contributions), motivation to retain a high self-share (relative to the pot size), and a baseline bias. The model transforms the latent utility linearly and maps it to the 0\u2013100% output range using a sigmoidal function, allowing accurate fit to observed proposals while minimizing parameter covariance.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation\nBIC: 373.6289117063548\n\nParameter Recovery:\n- alpha_prop: r = 0.739\n- beta_self: r = 0.152\n- gamma_0: r = 0.644"
  ]
}