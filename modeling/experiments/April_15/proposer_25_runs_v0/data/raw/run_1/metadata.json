{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should directly predict a numerical value (not a binary choice). The model's predictions will be compared to actual values using mean squared error.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let\u2019s reason step by step:\n\n---\n\n### 1. Key Psychological Mechanisms\n\nIn the ultimatum game as proposer (trial_role == 2), the participant must decide what percentage of the monetary pot (combined_earning) to offer the other player. Literature shows proposer behavior is driven by:\n\n- **Self-interest:** Desire to maximize own payoff.\n- **Fairness/Equity:** Social norm to offer a \"fair\" share (~50% or according to contribution).\n- **Inequity Aversion:** Aversion to outcomes viewed as unfair by either party, especially if perceived contribution is unequal.\n- **Strategic concerns:** Offering just enough to avoid rejection (but here, individual minimum acceptable offers for the opponent are not part of the model).\n\nGiven trial_type:  \n- \"Equal\" = equal contributions, norm is 50/50.\n- \"Opponent more\" = norm slightly favors opponent.\n- \"Participant more\" = norm slightly favors participant.\n\nBut we must model each actual trial using token_self and token_opp, which determine what is \"fair\" in context.\n\n---\n\n### 2. How These Mechanisms Interact\n\n- The \"fair\" proposal should be [opponent\u2019s contribution / total contribution], mapped to a percentage.\n- The proposer may:\n    - Stick closely to this fairness norm (weighted by a fairness parameter).\n    - Bias toward self-interest (systematic discount toward own side).\n    - Add idiosyncratic bias (constant offset, e.g., some participants just systematically give more or less).\n- Response noise: Behavior is not perfectly deterministic.\n\nBut for parameter recoverability, simplicity, and low-covariance, too many weights/biases will cause redundancy. The key: Map each component to only one parameter.\n\n---\n\n### 3. Mathematical Form and Parameterization\n\n- Compute the \"fair\" offer proportion: fair_perc_opp = token_opp / (token_self + token_opp) \u00d7 100\n    - (If both are zero, set to 50.)\n- Participant\u2019s offer = fairness_weight \u00d7 fair_perc_opp + (1 - fairness_weight) \u00d7 self_interest_perc + bias + noise\n    - self_interest_perc is what they\u2019d get if maximized own benefit, i.e., offer minimum possible (let\u2019s say 0%).\n    - Noise represents choice variability, but since we're predicting a percentage, we can treat it as modeled error (and not explicitly fit noise).\n- By restricting to a convex combination + bias, we avoid collinearity. Only one parameter controls the tradeoff.\n\n**Learnable parameters:**\n- fairness_weight: [0, 1], controls adherence to fairness norm.\n- bias: [-30, 30], captures overall generosity/greed.\n- (Noise is not fitted as a parameter for regression models; handled by observation error.)\n\n---\n\n### 4. Mapping to Observable Behavior\n\n- Input variables: token_self, token_opp.\n- Output variable: proposed_perc.\n\n---\n\n## Final Model\n\nTo avoid overfitting and high covariance:\n- Only include fairness_weight and bias.\n- All other variables are calculated.\n- Prediction is clipped within the allowed range [0, 100] for proposed_perc.\n\n---\n\n## Model Formula\n\n<MODEL>\nproposed_perc_pred = fairness_weight * 100 * token_opp / (token_opp + token_self + 1e-8) \n                   + (1 - fairness_weight) * 0 \n                   + bias\n</MODEL>\n\n_Note: 1e-8 is added to denominator to avoid division by zero when both are zero (extremely rare)._\n\n---\n\n## Variable Descriptions\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"proposed_perc_pred\": {\n      \"description\": \"Predicted percentage of the shared pot offered to the opponent by the participant (0-100).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Weight (0 to 1) on fairness norm for offer; 1 means always follow fairness; 0 means only self-interest.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"bias\": {\n      \"description\": \"Proposer's general generosity or selfishness, as a constant offset in percent (-30 to 30).\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"parameters\": {\n          \"mean\": 0,\n          \"std\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant in the pre-task.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent in the pre-task.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n---\n\n<target_variable>proposed_perc</target_variable>\n\n---\n\n<SUMMARY>\nA two-parameter linear model of proposer behavior, predicting the percentage offered to the opponent as a weighted combination of the context-specific fairness norm (proportional to the opponent\u2019s contribution) and a participant-specific bias. The model is intentionally simple to ensure parameter recovery and minimize redundancy, utilizing token counts from each trial.\n</SUMMARY>\n"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['fairness_weight', 'bias']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                proposed_perc_pred = fairness_weight * 100 * token_opp / (token_opp + token_self + 1e-8) \n                   + (1 - fairness_weight) * 0 \n                   + bias\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"proposed_perc_pred\": {\n      \"description\": \"Predicted percentage of the shared pot offered to the opponent by the participant (0-100).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Weight (0 to 1) on fairness norm for offer; 1 means always follow fairness; 0 means only self-interest.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"bias\": {\n      \"description\": \"Proposer's general generosity or selfishness, as a constant offset in percent (-30 to 30).\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"parameters\": {\n          \"mean\": 0,\n          \"std\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant in the pre-task.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent in the pre-task.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "```python\nimport json\nimport math\n\ndef simulate_model(trial_data, fairness_weight=0.5, bias=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        proposed_perc_pred = fairness_weight * 100 * token_opp / (token_opp + token_self + 1e-8) \\\n                               + (1 - fairness_weight) * 0 \\\n                               + bias\n\n        model_predictions.append(proposed_perc_pred)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\":1,\"group\":\"control\",\"trial_number\":1,\"trial_type\":1,\"trial_role\":2,\"token_opp\":50,\"token_self\":50,\"combined_earning\":20,\"split_opp\":10.0,\"split_self\":10.0,\"splitperc_opp\":50,\"splitperc_self\":50,\"accept\":1.0,\"accepted_amount\":10.0,\"accepted_perc\":50.0,\"proposed_perc\":50.0,\"proposed_amount\":10.0},{\"ID\":2,\"group\":\"control\",\"trial_number\":2,\"trial_type\":1,\"trial_role\":2,\"token_opp\":50,\"token_self\":50,\"combined_earning\":20,\"split_opp\":10.0,\"split_self\":10.0,\"splitperc_opp\":50,\"splitperc_self\":50,\"accept\":1.0,\"accepted_amount\":10.0,\"accepted_perc\":50.0,\"proposed_perc\":50.0,\"proposed_amount\":10.0},{\"ID\":3,\"group\":\"control\",\"trial_number\":3,\"trial_type\":1,\"trial_role\":2,\"token_opp\":50,\"token_self\":50,\"combined_earning\":20,\"split_opp\":10.0,\"split_self\":10.0,\"splitperc_opp\":50,\"splitperc_self\":50,\"accept\":1.0,\"accepted_amount\":10.0,\"accepted_perc\":50.0,\"proposed_perc\":50.0,\"proposed_amount\":10.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744732395.501062
    }
  ],
  "learnable_parameters": {
    "fairness_weight": {
      "description": "Weight (0 to 1) on fairness norm for offer; 1 means always follow fairness; 0 means only self-interest.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 1
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "bias": {
      "description": "Proposer's general generosity or selfishness, as a constant offset in percent (-30 to 30).",
      "range": {
        "min": -30,
        "max": 30,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "normal",
        "parameters": {
          "mean": 0,
          "std": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "proposed_perc_pred = fairness_weight * 100 * token_opp / (token_opp + token_self + 1e-8) \n                   + (1 - fairness_weight) * 0 \n                   + bias",
  "variable_descriptions": {
    "proposed_perc_pred": {
      "description": "Predicted percentage of the shared pot offered to the opponent by the participant (0-100).",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fairness_weight": {
      "description": "Weight (0 to 1) on fairness norm for offer; 1 means always follow fairness; 0 means only self-interest.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 1
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "bias": {
      "description": "Proposer's general generosity or selfishness, as a constant offset in percent (-30 to 30).",
      "range": {
        "min": -30,
        "max": 30,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "normal",
        "parameters": {
          "mean": 0,
          "std": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "token_self": {
      "description": "Number of tokens found by participant in the pre-task.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by opponent in the pre-task.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A two-parameter linear model of proposer behavior, predicting the percentage offered to the opponent as a weighted combination of the context-specific fairness norm (proportional to the opponent\u2019s contribution) and a participant-specific bias. The model is intentionally simple to ensure parameter recovery and minimize redundancy, utilizing token counts from each trial.",
  "target_variable": "proposed_perc",
  "full_reasoning": "Let\u2019s reason step by step:\n\n---\n\n### 1. Key Psychological Mechanisms\n\nIn the ultimatum game as proposer (trial_role == 2), the participant must decide what percentage of the monetary pot (combined_earning) to offer the other player. Literature shows proposer behavior is driven by:\n\n- **Self-interest:** Desire to maximize own payoff.\n- **Fairness/Equity:** Social norm to offer a \"fair\" share (~50% or according to contribution).\n- **Inequity Aversion:** Aversion to outcomes viewed as unfair by either party, especially if perceived contribution is unequal.\n- **Strategic concerns:** Offering just enough to avoid rejection (but here, individual minimum acceptable offers for the opponent are not part of the model).\n\nGiven trial_type:  \n- \"Equal\" = equal contributions, norm is 50/50.\n- \"Opponent more\" = norm slightly favors opponent.\n- \"Participant more\" = norm slightly favors participant.\n\nBut we must model each actual trial using token_self and token_opp, which determine what is \"fair\" in context.\n\n---\n\n### 2. How These Mechanisms Interact\n\n- The \"fair\" proposal should be [opponent\u2019s contribution / total contribution], mapped to a percentage.\n- The proposer may:\n    - Stick closely to this fairness norm (weighted by a fairness parameter).\n    - Bias toward self-interest (systematic discount toward own side).\n    - Add idiosyncratic bias (constant offset, e.g., some participants just systematically give more or less).\n- Response noise: Behavior is not perfectly deterministic.\n\nBut for parameter recoverability, simplicity, and low-covariance, too many weights/biases will cause redundancy. The key: Map each component to only one parameter.\n\n---\n\n### 3. Mathematical Form and Parameterization\n\n- Compute the \"fair\" offer proportion: fair_perc_opp = token_opp / (token_self + token_opp) \u00d7 100\n    - (If both are zero, set to 50.)\n- Participant\u2019s offer = fairness_weight \u00d7 fair_perc_opp + (1 - fairness_weight) \u00d7 self_interest_perc + bias + noise\n    - self_interest_perc is what they\u2019d get if maximized own benefit, i.e., offer minimum possible (let\u2019s say 0%).\n    - Noise represents choice variability, but since we're predicting a percentage, we can treat it as modeled error (and not explicitly fit noise).\n- By restricting to a convex combination + bias, we avoid collinearity. Only one parameter controls the tradeoff.\n\n**Learnable parameters:**\n- fairness_weight: [0, 1], controls adherence to fairness norm.\n- bias: [-30, 30], captures overall generosity/greed.\n- (Noise is not fitted as a parameter for regression models; handled by observation error.)\n\n---\n\n### 4. Mapping to Observable Behavior\n\n- Input variables: token_self, token_opp.\n- Output variable: proposed_perc.\n\n---\n\n## Final Model\n\nTo avoid overfitting and high covariance:\n- Only include fairness_weight and bias.\n- All other variables are calculated.\n- Prediction is clipped within the allowed range [0, 100] for proposed_perc.\n\n---\n\n## Model Formula\n\n<MODEL>\nproposed_perc_pred = fairness_weight * 100 * token_opp / (token_opp + token_self + 1e-8) \n                   + (1 - fairness_weight) * 0 \n                   + bias\n</MODEL>\n\n_Note: 1e-8 is added to denominator to avoid division by zero when both are zero (extremely rare)._\n\n---\n\n## Variable Descriptions\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"proposed_perc_pred\": {\n      \"description\": \"Predicted percentage of the shared pot offered to the opponent by the participant (0-100).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Weight (0 to 1) on fairness norm for offer; 1 means always follow fairness; 0 means only self-interest.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"bias\": {\n      \"description\": \"Proposer's general generosity or selfishness, as a constant offset in percent (-30 to 30).\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"parameters\": {\n          \"mean\": 0,\n          \"std\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant in the pre-task.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent in the pre-task.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n---\n\n<target_variable>proposed_perc</target_variable>\n\n---\n\n<SUMMARY>\nA two-parameter linear model of proposer behavior, predicting the percentage offered to the opponent as a weighted combination of the context-specific fairness norm (proportional to the opponent\u2019s contribution) and a participant-specific bias. The model is intentionally simple to ensure parameter recovery and minimize redundancy, utilizing token counts from each trial.\n</SUMMARY>\n",
  "prediction_type": "numerical_variable_estimation",
  "current_model": "Specification: proposed_perc_pred = fairness_weight * 100 * token_opp / (token_opp + token_self + 1e-8) \n                   + (1 - fairness_weight) * 0 \n                   + bias\nSummary: A two-parameter linear model of proposer behavior, predicting the percentage offered to the opponent as a weighted combination of the context-specific fairness norm (proportional to the opponent\u2019s contribution) and a participant-specific bias. The model is intentionally simple to ensure parameter recovery and minimize redundancy, utilizing token counts from each trial.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, fairness_weight=0.5, bias=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        proposed_perc_pred = fairness_weight * 100 * token_opp / (token_opp + token_self + 1e-8) \\\n                               + (1 - fairness_weight) * 0 \\\n                               + bias\n\n        model_predictions.append(proposed_perc_pred)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "group_parameter_averages": {
    "Control": {
      "fairness_weight": 0.3468449257579898,
      "bias": 23.83502368208869
    },
    "Cocaine": {
      "fairness_weight": 0.21363862869543537,
      "bias": 25.086451636840735
    }
  },
  "fitting_results": [
    {
      "fairness_weight": 0.37573058359714484,
      "bias": 30.0,
      "success": true,
      "mse": 24.269412746455053,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5229359434334864,
      "bias": 17.85320212521291,
      "success": true,
      "mse": 19.840978630890042,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7293576778387513,
      "bias": 0.19878302545017726,
      "success": true,
      "mse": 16.320081590506888,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.375730583424541,
      "bias": 30.0,
      "success": true,
      "mse": 24.269412746455053,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5917433578649407,
      "bias": 14.412831109309632,
      "success": true,
      "mse": 20.788990836833467,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6605502750727829,
      "bias": 2.9724866630742395,
      "success": true,
      "mse": 46.874617774540894,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.37573058348663524,
      "bias": 30.0,
      "success": true,
      "mse": 24.269412746455068,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.2905649844159979,
      "bias": 30.0,
      "success": true,
      "mse": 68.62974302306515,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.46761059590268855,
      "bias": 24.655198185231377,
      "success": true,
      "mse": 39.16785198947942,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3281380421446468,
      "bias": 30.0,
      "success": true,
      "mse": 13.426106348822508,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3406623952457397,
      "bias": 30.0,
      "success": true,
      "mse": 11.132758156827531,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3757305831654577,
      "bias": 30.0,
      "success": true,
      "mse": 24.26941274645507,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.49541211092847937,
      "bias": 16.56272989313745,
      "success": true,
      "mse": 11.922528031896313,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.33398274020096785,
      "bias": 30.0,
      "success": true,
      "mse": 36.45978282748981,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3757305825951376,
      "bias": 30.0,
      "success": true,
      "mse": 24.26941274645509,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3298079559749229,
      "bias": 30.0,
      "success": true,
      "mse": 10.501901854225459,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.37573058368062545,
      "bias": 30.0,
      "success": true,
      "mse": 24.269412746455046,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.244642355810895,
      "bias": 30.0,
      "success": true,
      "mse": 34.04397441813707,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.27136097535553366,
      "bias": 30.0,
      "success": true,
      "mse": 64.01707027375268,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.37573058469419157,
      "bias": 30.0,
      "success": true,
      "mse": 24.269412746455032,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.1376146773451311,
      "bias": 24.452599222653287,
      "success": true,
      "mse": 21.83078491626975,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3853210273435833,
      "bias": 16.733948825448007,
      "success": true,
      "mse": 66.69113164503524,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.24770636050912903,
      "bias": 16.948015283575216,
      "success": true,
      "mse": 62.98063201217205,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.28388532850656334,
      "bias": 30.0,
      "success": true,
      "mse": 25.50885988475303,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5229359942505115,
      "bias": 18.519866021451776,
      "success": true,
      "mse": 20.729867494991385,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3323128325904982,
      "bias": 30.0,
      "success": true,
      "mse": 6.087763257155226,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.0,
      "bias": 19.999999995000028,
      "success": true,
      "mse": 2.4999719920708694e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.45412840177539077,
      "bias": 22.62691318740624,
      "success": true,
      "mse": 18.252803275702004,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3577981922242834,
      "bias": 22.776756770954876,
      "success": true,
      "mse": 132.2161060925031,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.13761447208322053,
      "bias": 19.11927687072622,
      "success": true,
      "mse": 114.27522941444187,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.522935732012941,
      "bias": 17.186546601035502,
      "success": true,
      "mse": 31.396534153128208,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.37573058344971355,
      "bias": 30.0,
      "success": true,
      "mse": 24.269412746455068,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.0025048667056306565,
      "bias": 30.0,
      "success": true,
      "mse": 153.3166341948849,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3440368442518817,
      "bias": 22.131493148879528,
      "success": true,
      "mse": 133.7757391196592,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.06880712535135727,
      "bias": 19.892977513199295,
      "success": true,
      "mse": 74.79102956465094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.0,
      "bias": 30.0,
      "success": true,
      "mse": 13.333333333333334,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3853209947804769,
      "bias": 24.06728373513706,
      "success": true,
      "mse": 24.913353833293097,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3256331713896645,
      "bias": 30.0,
      "success": true,
      "mse": 17.784581176836717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.38532107690392053,
      "bias": 16.733946344335834,
      "success": true,
      "mse": 66.6911315337195,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.35779804331094645,
      "bias": 20.776764695418983,
      "success": true,
      "mse": 17.549439333606255,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.13761487821048102,
      "bias": 21.11925524596949,
      "success": true,
      "mse": 132.94189602331045,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5366971264268267,
      "bias": 15.165143867206462,
      "success": true,
      "mse": 76.15290536048863,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.37573058333784326,
      "bias": 30.0,
      "success": true,
      "mse": 24.269412746455078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.0,
      "bias": 19.999999994999946,
      "success": true,
      "mse": 2.5000537046954533e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.2964096811324019,
      "bias": 30.0,
      "success": true,
      "mse": 86.16569250175458,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.0,
      "bias": 21.99999850515663,
      "success": true,
      "mse": 56.00000000000221,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.17889909697660394,
      "bias": 26.38837820014825,
      "success": true,
      "mse": 46.387359830618195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.0,
      "bias": 19.999999995002316,
      "success": true,
      "mse": 2.497684580748319e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3506818775644785,
      "bias": 30.0,
      "success": true,
      "mse": 12.696910653419389,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.20456442752087847,
      "bias": 30.0,
      "success": true,
      "mse": 188.6260319742266,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.11009170103250952,
      "bias": 25.828748179650304,
      "success": true,
      "mse": 116.26503569282677,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 4.977439981290743e-07,
      "bias": 22.666639959396715,
      "success": true,
      "mse": 32.88888888893228,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.37933111193209945,
      "bias": 21.498366613714946,
      "success": true,
      "mse": 174.2288116562582,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.1376146470989489,
      "bias": 17.11926760868903,
      "success": true,
      "mse": 74.27522939578054,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.34066239508740087,
      "bias": 30.0,
      "success": true,
      "mse": 11.13275815682754,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.27386584618786197,
      "bias": 30.0,
      "success": true,
      "mse": 33.71555801531864,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4954131268591081,
      "bias": 8.562675877995789,
      "success": true,
      "mse": 115.92252795585588,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.09633021587613956,
      "bias": 29.85015581666599,
      "success": true,
      "mse": 50.05708460116641,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.35068187784814253,
      "bias": 30.0,
      "success": true,
      "mse": 46.030243908823394,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3990828217599594,
      "bias": 22.71252455021457,
      "success": true,
      "mse": 47.170234554022926,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.07848594010239841,
      "bias": 30.0,
      "success": true,
      "mse": 150.27182485486767,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3165136973218394,
      "bias": 28.174315129492708,
      "success": true,
      "mse": 74.48929663894494,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.10770943048598924,
      "bias": 30.0,
      "success": true,
      "mse": 229.1232953185125,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.0,
      "bias": 26.666666345898925,
      "success": true,
      "mse": 142.2222222222223,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.1728360657954741,
      "bias": 30.0,
      "success": true,
      "mse": 80.49540777309981,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3657111011007304,
      "bias": 30.0,
      "success": true,
      "mse": 24.041191228219386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.35068187728118216,
      "bias": 30.0,
      "success": true,
      "mse": 52.69691065341935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.350681877669555,
      "bias": 30.0,
      "success": true,
      "mse": 46.03024390882341,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.41284448429056303,
      "bias": 9.357774105521877,
      "success": true,
      "mse": 172.47706398774648,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3853215503585939,
      "bias": 5.4005874671432785,
      "success": true,
      "mse": 40.913353749697805,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.23394474531752502,
      "bias": 16.969429810239692,
      "success": true,
      "mse": 96.05096852666256,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.20642226574572117,
      "bias": 25.678885399582214,
      "success": true,
      "mse": 217.11926620015066,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4128437452230536,
      "bias": 13.357812988958443,
      "success": true,
      "mse": 89.81039780913191,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3590314462582763,
      "bias": 30.0,
      "success": true,
      "mse": 36.92550328903545,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.06880730447875683,
      "bias": 19.226301292647175,
      "success": true,
      "mse": 58.7910295870187,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.06880732950082263,
      "bias": 27.226299963418253,
      "success": true,
      "mse": 32.12436290337942,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.0,
      "bias": 23.33333335919005,
      "success": true,
      "mse": 75.55555555555556,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.0,
      "bias": 25.333334917830935,
      "success": true,
      "mse": 118.22222222222472,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.35068187768903536,
      "bias": 30.0,
      "success": true,
      "mse": 46.03024402571737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.33231282637251847,
      "bias": 30.0,
      "success": true,
      "mse": 46.087763257155295,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.1788987021835988,
      "bias": 27.721732606613074,
      "success": true,
      "mse": 150.3873597938027,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.0,
      "bias": 21.999999531476558,
      "success": true,
      "mse": 56.00000000000024,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.35068187759195646,
      "bias": 30.0,
      "success": true,
      "mse": 26.03024398675272,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3673810147577816,
      "bias": 30.0,
      "success": true,
      "mse": 20.783003986713982,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.08516559701023999,
      "bias": 30.0,
      "success": true,
      "mse": 174.029130754567,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3757305837184798,
      "bias": 30.0,
      "success": true,
      "mse": 24.269412746455043,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.0,
      "bias": 25.333332875001354,
      "success": true,
      "mse": 104.88888888888908,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3189535203343261,
      "bias": 30.0,
      "success": true,
      "mse": 35.910566864776904,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.0,
      "bias": 19.999999995000454,
      "success": true,
      "mse": 2.499545686992875e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.16513764344747783,
      "bias": 21.743117478705884,
      "success": true,
      "mse": 128.92966367301884,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.22543834872447113,
      "bias": 30.0,
      "success": true,
      "mse": 164.73698855415662,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "fairness_weight": {
        "r": 0.9999999999998831,
        "p": 0.0
      },
      "bias": {
        "r": 0.9999999999998528,
        "p": 0.0
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 253.71281658315831,
  "bic_Control": 279.32005202028563,
  "bic_Cocaine": 230.7730015040651,
  "bic_results": {
    "average_bic": 253.71281658315831,
    "individual_bics": [
      315.2454396131243,
      304.9706024188174,
      295.00759544835597,
      315.2454396131243,
      307.3509832069666,
      348.81667448814954,
      315.24543961312435,
      368.2604082914348,
      339.65605336131205,
      285.0526350286785,
      275.49987097072426,
      315.24543961312435,
      278.9952974928646,
      336.00208210376684,
      315.2454396131244,
      272.52475650883366,
      315.2454396131243,
      332.50568741546164,
      364.7120199642878,
      315.2454396131243,
      309.84475906651363,
      366.7990528993979,
      363.8795714404488,
      317.785699404592,
      307.20573391094814,
      244.7156990354388,
      -1797.0156380128853,
      300.7156339437382,
      401.7017069663935,
      394.26448307312404,
      328.3769546385223,
      315.24543961312435,
      409.25315131276096,
      402.2997869254864,
      372.6449772136333,
      284.6990070900624,
      316.5809835225566,
      299.390306302566,
      366.7990528142726,
      298.7115037848489,
      401.9809018510951,
      373.56528647099486,
      315.24543961312435,
      -1797.0139710839105,
      379.86525873333,
      357.8883178798199,
      348.28375889081474,
      -1797.0623230877386,
      282.2046757724034,
      419.8234674459032,
      395.1448727975719,
      330.74526037877246,
      415.7742233404649,
      372.29203465260855,
      275.49987097072426,
      332.0113106953634,
      394.9944090347313,
      352.1667480093801,
      347.8896131453016,
      349.1372982125946,
      408.23011846233464,
      372.43880938752284,
      429.74265522696186,
      405.4223114107749,
      376.39358861384665,
      314.7635833307849,
      354.7877801073658,
      347.8896131453016,
      415.2588591796293,
      341.87966352501564,
      385.40420926162005,
      426.9981692878929,
      381.9781202657299,
      336.649407028653,
      360.36883519867376,
      329.5457319244082,
      373.1636609148558,
      395.9962523731602,
      347.88961327481627,
      347.95330291099276,
      408.26931421936825,
      357.8883178798181,
      318.8175953572325,
      307.3362940221199,
      415.7157395222253,
      315.2454396131243,
      389.8933626815987,
      335.2279929372203,
      -1797.024335475491,
      400.41799930603935,
      412.91724151339236
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        315.2454396131243,
        304.9706024188174,
        295.00759544835597,
        315.2454396131243,
        307.3509832069666,
        348.81667448814954,
        315.24543961312435,
        368.2604082914348,
        339.65605336131205,
        285.0526350286785,
        275.49987097072426,
        315.24543961312435,
        278.9952974928646,
        336.00208210376684,
        315.2454396131244,
        272.52475650883366,
        315.2454396131243,
        332.50568741546164,
        364.7120199642878,
        315.2454396131243,
        309.84475906651363,
        366.7990528993979,
        363.8795714404488,
        317.785699404592,
        307.20573391094814,
        244.7156990354388,
        -1797.0156380128853,
        300.7156339437382,
        401.7017069663935,
        394.26448307312404,
        328.3769546385223,
        315.24543961312435,
        409.25315131276096,
        402.2997869254864,
        372.6449772136333,
        284.6990070900624,
        316.5809835225566,
        299.390306302566,
        366.7990528142726,
        298.7115037848489,
        401.9809018510951,
        373.56528647099486,
        315.24543961312435
      ],
      "Cocaine": [
        -1797.0139710839105,
        379.86525873333,
        357.8883178798199,
        348.28375889081474,
        -1797.0623230877386,
        282.2046757724034,
        419.8234674459032,
        395.1448727975719,
        330.74526037877246,
        415.7742233404649,
        372.29203465260855,
        275.49987097072426,
        332.0113106953634,
        394.9944090347313,
        352.1667480093801,
        347.8896131453016,
        349.1372982125946,
        408.23011846233464,
        372.43880938752284,
        429.74265522696186,
        405.4223114107749,
        376.39358861384665,
        314.7635833307849,
        354.7877801073658,
        347.8896131453016,
        415.2588591796293,
        341.87966352501564,
        385.40420926162005,
        426.9981692878929,
        381.9781202657299,
        336.649407028653,
        360.36883519867376,
        329.5457319244082,
        373.1636609148558,
        395.9962523731602,
        347.88961327481627,
        347.95330291099276,
        408.26931421936825,
        357.8883178798181,
        318.8175953572325,
        307.3362940221199,
        415.7157395222253,
        315.2454396131243,
        389.8933626815987,
        335.2279929372203,
        -1797.024335475491,
        400.41799930603935,
        412.91724151339236
      ]
    },
    "num_parameters": 2,
    "prediction_type": "numerical",
    "bic_formula": "BIC calculated from MSE using Gaussian error assumption"
  },
  "recovery_summary": "Parameter Recovery:\n- fairness_weight: r = 1.000\n- bias: r = 1.000",
  "previous_models": [
    "Specification: proposed_perc_pred = fairness_weight * 100 * token_opp / (token_opp + token_self + 1e-8) \n                   + (1 - fairness_weight) * 0 \n                   + bias\nSummary: A two-parameter linear model of proposer behavior, predicting the percentage offered to the opponent as a weighted combination of the context-specific fairness norm (proportional to the opponent\u2019s contribution) and a participant-specific bias. The model is intentionally simple to ensure parameter recovery and minimize redundancy, utilizing token counts from each trial.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation\nBIC: 253.71281658315831\n\nParameter Recovery:\n- fairness_weight: r = 1.000\n- bias: r = 1.000"
  ]
}