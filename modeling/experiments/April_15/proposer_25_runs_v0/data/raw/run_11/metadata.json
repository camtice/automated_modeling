{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should directly predict a numerical value (not a binary choice). The model's predictions will be compared to actual values using mean squared error.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let me proceed step by step as requested.\n\n**Step 1: Key Psychological Mechanisms in Proposer Behavior**\n- **Inequity Aversion:** Proposers may care about the fairness of the offer relative to the contributions (not necessarily equal splits, but proportionality to work done by both).\n- **Self-interest:** Proposers may want to maximize their own monetary gain.\n- **Strategic Acceptance Consideration:** Proposers will consider what offers are likely to be accepted by the responder. Typically, extremely low offers are rejected (so proposals will avoid those).\n- **Responsivity to Contribution:** Because contributions vary (token_self, token_opp), \u201cfairness\u201d is not always 50-50; proportional splits reflect the work done by each.\n- **Randomness/Noise:** Participants may not always behave consistently; some stochasticity/noise is expected.\n\n**Step 2: How These Mechanisms Interact**\n- The proposer balances self-interest (keep as much as possible) with norm sensitivity (avoid appearing unfair/unjust contributing less than their relative share), possibly tempered by their aversion to potential rejection.\n- The proposer calculates what a proportional offer (according to contribution) would be (\u201ccontribution fairness\u201d).\n- The ultimate offer blends inherent selfishness/prosociality, sensitivity to fairness/norm deviation, and some idiosyncratic randomness.\n\n**Step 3: Mathematical Model Form**\n- The simplest, least collinear way is to use a 2-parameter (plus a noise parameter) model:\n    1. **Fairness Sensitivity (alpha):** How much the proposer is motivated to match their offer to contribution fairness.\n    2. **Self-Bias (beta):** How much the proposer deviates toward keeping more for themselves, irrespective of what\u2019s fair.\n    3. **Decision noise (sigma):** How much randomness there is in implementation/execution. (But noise will be fit as an error model, not in the prediction of mean \u201cproposed_perc\u201d here.)\n\n- **Key point:** Avoiding high-covariance: Both fairness-sensitivity and self-bias should be additive rather than multiplicative, to avoid collinearity.\n\n**Step 4: Model Structure and Parameter Needs**\n- Out of the available variables, only data known at proposal-time should be used:\n    - Own tokens (token_self)\n    - Opponent tokens (token_opp)\n    - The total stake (combined_earning) is just sum(tokens) * 3, which is known at proposal time.\n- Compute the \u201ccontribution proportion\u201d that corresponds to a fair split: \\( p_{fair} = \\frac{token_{opp}}{token_{self} + token_{opp}} \\times 100 \\)\n- The core prediction: the proposer gives a weighted blend of the fair offer and a bias toward a lower offer, parametrized by alpha and beta.\n\n**Step 5: Mapping to Observed Proposer Behavior**\n- For each proposer trial (trial_role==2), the model should predict **proposed_perc**: the % offer to the opponent.\n\n**Concrete Model Formula**\n\\[ proposed\\_perc_{pred} = \\alpha \\cdot p_{fair} + (1 - \\alpha) \\cdot \\beta \\]\nwhere:\n- \\( \\alpha \\): [0, 1], weight tied to sensitivity to fair offer (contribution proportional)\n- \\( \\beta \\): [0, 100], baseline offer % tendency (e.g., pure self-interest; typically less than 50 but model allows wider)\n- If \\(\\alpha=1\\), fully fair; if \\(\\alpha=0\\), always offers \\(\\beta\\); otherwise, blend.\n\nThis is **parsimonious** (only two parameters per subject), interpretable, and avoids overparameterization/covariance.\n\n**Bounds:**\n- Both learnable parameters are bounded, as required (alpha in [0,1]; beta in [0,100]; utility/latent can be unbounded)\n\n---\n\n**MODEL SPECIFICATION**\n\n<MODEL>\nproposed_perc_pred = alpha * (token_opp / (token_self + token_opp)) * 100 + (1 - alpha) * beta\n</MODEL>\n\n---\n\n**VARIABLES DESCRIPTION**\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"proposed_perc_pred\": {\n      \"description\": \"Model-predicted percentage of the total pot offered to the opponent when acting as proposer.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Fairness sensitivity parameter: how much the proposer weights contribution-based fairness in their offer. 0 = only baseline (selfish/bias), 1 = only proportional fairness.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens contributed by the opponent on this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 16,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens contributed by the participant on this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 16,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline offer percentage: the proposer's favored default offer to opponent, irrespective of contributions (e.g., self-interest, in percent).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n---\n\n<target_variable>proposed_perc</target_variable>\n\n---\n\n<SUMMARY>\nA weighted-average model of proposer decisions that blends contribution-based fairness with a baseline offer tendency. The proposer\u2019s predicted offer is a convex combination of a \u201cfair share\u201d (proportional to relative token contributions) and a baseline offer parameter, with the blending controlled by a fairness-sensitivity parameter. This parsimonious two-parameter model captures individual differences in fairness adherence and self-interest bias, using only information available at the time of making an offer.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                proposed_perc_pred = alpha * (token_opp / (token_self + token_opp)) * 100 + (1 - alpha) * beta\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"proposed_perc_pred\": {\n      \"description\": \"Model-predicted percentage of the total pot offered to the opponent when acting as proposer.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Fairness sensitivity parameter: how much the proposer weights contribution-based fairness in their offer. 0 = only baseline (selfish/bias), 1 = only proportional fairness.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens contributed by the opponent on this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 16,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens contributed by the participant on this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 16,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline offer percentage: the proposer's favored default offer to opponent, irrespective of contributions (e.g., self-interest, in percent).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=0.5, beta=50):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        if (token_self + token_opp) == 0:\n            fairness_component = 0  # Avoid division by zero\n        else:\n            fairness_component = (token_opp / (token_self + token_opp)) * 100\n\n        proposed_perc_pred = alpha * fairness_component + (1 - alpha) * beta\n        model_predictions.append(proposed_perc_pred)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\":1,\"group\":\"control\",\"trial_number\":1,\"trial_type\":1,\"trial_role\":1,\"token_opp\":8,\"token_self\":8,\"combined_earning\":48,\"split_opp\":12.0,\"split_self\":36.0,\"splitperc_opp\":25,\"splitperc_self\":75,\"accept\":1.0,\"accepted_amount\":12.0,\"accepted_perc\":25.0,\"proposed_perc\":null,\"proposed_amount\":null},{\"ID\":2,\"group\":\"control\",\"trial_number\":2,\"trial_type\":1,\"trial_role\":2,\"token_opp\":8,\"token_self\":8,\"combined_earning\":48,\"split_opp\":24.0,\"split_self\":24.0,\"splitperc_opp\":50,\"splitperc_self\":50,\"accept\":null,\"accepted_amount\":null,\"accepted_perc\":null,\"proposed_perc\":50.0,\"proposed_amount\":24.0},{\"ID\":3,\"group\":\"control\",\"trial_number\":3,\"trial_type\":1,\"trial_role\":1,\"token_opp\":8,\"token_self\":8,\"combined_earning\":48,\"split_opp\":20.16,\"split_self\":27.84,\"splitperc_opp\":42,\"splitperc_self\":58,\"accept\":0.0,\"accepted_amount\":null,\"accepted_perc\":null,\"proposed_perc\":null,\"proposed_amount\":null},{\"ID\":4,\"group\":\"control\",\"trial_number\":4,\"trial_type\":1,\"trial_role\":2,\"token_opp\":8,\"token_self\":8,\"combined_earning\":48,\"split_opp\":14.4,\"split_self\":33.6,\"splitperc_opp\":30,\"splitperc_self\":70,\"accept\":1.0,\"accepted_amount\":14.4,\"accepted_perc\":30.0,\"proposed_perc\":30.0,\"proposed_amount\":14.4},{\"ID\":5,\"group\":\"control\",\"trial_number\":5,\"trial_type\":1,\"trial_role\":1,\"token_opp\":8,\"token_self\":8,\"combined_earning\":48,\"split_opp\":21.12,\"split_self\":26.88,\"splitperc_opp\":44,\"splitperc_self\":56,\"accept\":1.0,\"accepted_amount\":21.12,\"accepted_perc\":44.0,\"proposed_perc\":null,\"proposed_amount\":null},{\"ID\":6,\"group\":\"control\",\"trial_number\":6,\"trial_type\":1,\"trial_role\":2,\"token_opp\":8,\"token_self\":8,\"combined_earning\":48,\"split_opp\":21.6,\"split_self\":26.4,\"splitperc_opp\":45,\"splitperc_self\":55,\"accept\":1.0,\"accepted_amount\":21.6,\"accepted_perc\":45.0,\"proposed_perc\":45.0,\"proposed_amount\":21.6},{\"ID\":7,\"group\":\"control\",\"trial_number\":7,\"trial_type\":1,\"trial_role\":1,\"token_opp\":8,\"token_self\":8,\"combined_earning\":48,\"split_opp\":24.0,\"split_self\":24.0,\"splitperc_opp\":50,\"splitperc_self\":50,\"accept\":1.0,\"accepted_amount\":24.0,\"accepted_perc\":50.0,\"proposed_perc\":null,\"proposed_amount\":null},{\"ID\":8,\"group\":\"control\",\"trial_number\":8,\"trial_type\":1,\"trial_role\":2,\"token_opp\":8,\"token_self\":8,\"combined_earning\":48,\"split_opp\":24.0,\"split_self\":24.0,\"splitperc_opp\":50,\"splitperc_self\":50,\"accept\":1.0,\"accepted_amount\":24.0,\"accepted_perc\":50.0,\"proposed_perc\":50.0,\"proposed_amount\":24.0},{\"ID\":9,\"group\":\"control\",\"trial_number\":9,\"trial_type\":1,\"trial_role\":1,\"token_opp\":8,\"token_self\":8,\"combined_earning\":48,\"split_opp\":19.2,\"split_self\":28.8,\"splitperc_opp\":40,\"splitperc_self\":60,\"accept\":1.0,\"accepted_amount\":19.2,\"accepted_perc\":40.0,\"proposed_perc\":null,\"proposed_amount\":null},{\"ID\":10,\"group\":\"control\",\"trial_number\":10,\"trial_type\":1,\"trial_role\":2,\"token_opp\":8,\"token_self\":8,\"combined_earning\":48,\"split_opp\":24.0,\"split_self\":24.0,\"splitperc_opp\":50,\"splitperc_self\":50,\"accept\":1.0,\"accepted_amount\":24.0,\"accepted_perc\":50.0,\"proposed_perc\":50.0,\"proposed_amount\":24.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744732752.959258
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Fairness sensitivity parameter: how much the proposer weights contribution-based fairness in their offer. 0 = only baseline (selfish/bias), 1 = only proportional fairness.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 1
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Baseline offer percentage: the proposer's favored default offer to opponent, irrespective of contributions (e.g., self-interest, in percent).",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 100
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "proposed_perc_pred = alpha * (token_opp / (token_self + token_opp)) * 100 + (1 - alpha) * beta",
  "variable_descriptions": {
    "proposed_perc_pred": {
      "description": "Model-predicted percentage of the total pot offered to the opponent when acting as proposer.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Fairness sensitivity parameter: how much the proposer weights contribution-based fairness in their offer. 0 = only baseline (selfish/bias), 1 = only proportional fairness.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 1
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "token_opp": {
      "description": "Number of tokens contributed by the opponent on this trial.",
      "range": {
        "min": 0,
        "max": 16,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens contributed by the participant on this trial.",
      "range": {
        "min": 0,
        "max": 16,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "beta": {
      "description": "Baseline offer percentage: the proposer's favored default offer to opponent, irrespective of contributions (e.g., self-interest, in percent).",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 100
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A weighted-average model of proposer decisions that blends contribution-based fairness with a baseline offer tendency. The proposer\u2019s predicted offer is a convex combination of a \u201cfair share\u201d (proportional to relative token contributions) and a baseline offer parameter, with the blending controlled by a fairness-sensitivity parameter. This parsimonious two-parameter model captures individual differences in fairness adherence and self-interest bias, using only information available at the time of making an offer.",
  "target_variable": "proposed_perc",
  "full_reasoning": "Let me proceed step by step as requested.\n\n**Step 1: Key Psychological Mechanisms in Proposer Behavior**\n- **Inequity Aversion:** Proposers may care about the fairness of the offer relative to the contributions (not necessarily equal splits, but proportionality to work done by both).\n- **Self-interest:** Proposers may want to maximize their own monetary gain.\n- **Strategic Acceptance Consideration:** Proposers will consider what offers are likely to be accepted by the responder. Typically, extremely low offers are rejected (so proposals will avoid those).\n- **Responsivity to Contribution:** Because contributions vary (token_self, token_opp), \u201cfairness\u201d is not always 50-50; proportional splits reflect the work done by each.\n- **Randomness/Noise:** Participants may not always behave consistently; some stochasticity/noise is expected.\n\n**Step 2: How These Mechanisms Interact**\n- The proposer balances self-interest (keep as much as possible) with norm sensitivity (avoid appearing unfair/unjust contributing less than their relative share), possibly tempered by their aversion to potential rejection.\n- The proposer calculates what a proportional offer (according to contribution) would be (\u201ccontribution fairness\u201d).\n- The ultimate offer blends inherent selfishness/prosociality, sensitivity to fairness/norm deviation, and some idiosyncratic randomness.\n\n**Step 3: Mathematical Model Form**\n- The simplest, least collinear way is to use a 2-parameter (plus a noise parameter) model:\n    1. **Fairness Sensitivity (alpha):** How much the proposer is motivated to match their offer to contribution fairness.\n    2. **Self-Bias (beta):** How much the proposer deviates toward keeping more for themselves, irrespective of what\u2019s fair.\n    3. **Decision noise (sigma):** How much randomness there is in implementation/execution. (But noise will be fit as an error model, not in the prediction of mean \u201cproposed_perc\u201d here.)\n\n- **Key point:** Avoiding high-covariance: Both fairness-sensitivity and self-bias should be additive rather than multiplicative, to avoid collinearity.\n\n**Step 4: Model Structure and Parameter Needs**\n- Out of the available variables, only data known at proposal-time should be used:\n    - Own tokens (token_self)\n    - Opponent tokens (token_opp)\n    - The total stake (combined_earning) is just sum(tokens) * 3, which is known at proposal time.\n- Compute the \u201ccontribution proportion\u201d that corresponds to a fair split: \\( p_{fair} = \\frac{token_{opp}}{token_{self} + token_{opp}} \\times 100 \\)\n- The core prediction: the proposer gives a weighted blend of the fair offer and a bias toward a lower offer, parametrized by alpha and beta.\n\n**Step 5: Mapping to Observed Proposer Behavior**\n- For each proposer trial (trial_role==2), the model should predict **proposed_perc**: the % offer to the opponent.\n\n**Concrete Model Formula**\n\\[ proposed\\_perc_{pred} = \\alpha \\cdot p_{fair} + (1 - \\alpha) \\cdot \\beta \\]\nwhere:\n- \\( \\alpha \\): [0, 1], weight tied to sensitivity to fair offer (contribution proportional)\n- \\( \\beta \\): [0, 100], baseline offer % tendency (e.g., pure self-interest; typically less than 50 but model allows wider)\n- If \\(\\alpha=1\\), fully fair; if \\(\\alpha=0\\), always offers \\(\\beta\\); otherwise, blend.\n\nThis is **parsimonious** (only two parameters per subject), interpretable, and avoids overparameterization/covariance.\n\n**Bounds:**\n- Both learnable parameters are bounded, as required (alpha in [0,1]; beta in [0,100]; utility/latent can be unbounded)\n\n---\n\n**MODEL SPECIFICATION**\n\n<MODEL>\nproposed_perc_pred = alpha * (token_opp / (token_self + token_opp)) * 100 + (1 - alpha) * beta\n</MODEL>\n\n---\n\n**VARIABLES DESCRIPTION**\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"proposed_perc_pred\": {\n      \"description\": \"Model-predicted percentage of the total pot offered to the opponent when acting as proposer.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Fairness sensitivity parameter: how much the proposer weights contribution-based fairness in their offer. 0 = only baseline (selfish/bias), 1 = only proportional fairness.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens contributed by the opponent on this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 16,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens contributed by the participant on this trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 16,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline offer percentage: the proposer's favored default offer to opponent, irrespective of contributions (e.g., self-interest, in percent).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n---\n\n<target_variable>proposed_perc</target_variable>\n\n---\n\n<SUMMARY>\nA weighted-average model of proposer decisions that blends contribution-based fairness with a baseline offer tendency. The proposer\u2019s predicted offer is a convex combination of a \u201cfair share\u201d (proportional to relative token contributions) and a baseline offer parameter, with the blending controlled by a fairness-sensitivity parameter. This parsimonious two-parameter model captures individual differences in fairness adherence and self-interest bias, using only information available at the time of making an offer.\n</SUMMARY>",
  "prediction_type": "numerical_variable_estimation",
  "current_model": "Specification: proposed_perc_pred = alpha * (token_opp / (token_self + token_opp)) * 100 + (1 - alpha) * beta\nSummary: A weighted-average model of proposer decisions that blends contribution-based fairness with a baseline offer tendency. The proposer\u2019s predicted offer is a convex combination of a \u201cfair share\u201d (proportional to relative token contributions) and a baseline offer parameter, with the blending controlled by a fairness-sensitivity parameter. This parsimonious two-parameter model captures individual differences in fairness adherence and self-interest bias, using only information available at the time of making an offer.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=0.5, beta=50):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        if (token_self + token_opp) == 0:\n            fairness_component = 0  # Avoid division by zero\n        else:\n            fairness_component = (token_opp / (token_self + token_opp)) * 100\n\n        proposed_perc_pred = alpha * fairness_component + (1 - alpha) * beta\n        model_predictions.append(proposed_perc_pred)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "group_parameter_averages": {
    "Control": {
      "alpha": 0.23362414386833213,
      "beta": 37.33931131606095
    },
    "Cocaine": {
      "alpha": 0.1120985593432199,
      "beta": 34.063597327717645
    }
  },
  "fitting_results": [
    {
      "alpha": 0.0,
      "beta": 49.999999994999996,
      "success": true,
      "mse": 2.500003966417107e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.5229401610767426,
      "beta": 37.42304062517417,
      "success": true,
      "mse": 19.84097859779968,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.7293563485044228,
      "beta": 0.7347839995058391,
      "success": true,
      "mse": 16.32008155001533,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 49.99999999383936,
      "success": true,
      "mse": 3.7953485186717774e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.5917432965270933,
      "beta": 35.30337532486945,
      "success": true,
      "mse": 20.788990825713004,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.6605475988576041,
      "beta": 8.757268324630562,
      "success": true,
      "mse": 46.874617741426604,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 49.99999999875878,
      "success": true,
      "mse": 1.5406238199961285e-18,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.24770628282687507,
      "beta": 42.9105746126216,
      "success": true,
      "mse": 68.31396534150136,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 50.00000000118353,
      "success": true,
      "mse": 1.4007425949834358e-18,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.24770642259567566,
      "beta": 45.569105391582525,
      "success": true,
      "mse": 12.31396534148833,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.24770641363602958,
      "beta": 46.45528457612777,
      "success": true,
      "mse": 9.647298674821617,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 50.000000001346734,
      "success": true,
      "mse": 1.813693219985114e-18,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.4954144005147106,
      "beta": 32.82418569064071,
      "success": true,
      "mse": 11.92252803301457,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.13761468157742904,
      "beta": 46.90780088489173,
      "success": true,
      "mse": 29.83078491335392,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 49.99999999396461,
      "success": true,
      "mse": 3.6425964199591373e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.27523205677557033,
      "beta": 45.400831381197634,
      "success": true,
      "mse": 9.989806321269096,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 49.99999999500007,
      "success": true,
      "mse": 2.499932912592036e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.110091752736545,
      "beta": 41.759449450167516,
      "success": true,
      "mse": 30.931702344546714,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.1376020924772383,
      "beta": 43.04273917211644,
      "success": true,
      "mse": 60.94189605534915,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 49.999999995,
      "success": true,
      "mse": 2.4999968609891615e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.13761473130815952,
      "beta": 28.354607944347336,
      "success": true,
      "mse": 21.830784913354496,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.3853068863565149,
      "beta": 27.224507113349244,
      "success": true,
      "mse": 66.69113153486425,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.2477064924172765,
      "beta": 22.528450725962575,
      "success": true,
      "mse": 62.98063200815799,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.1376097913786348,
      "beta": 43.81563347275396,
      "success": true,
      "mse": 21.83078491722565,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.5229357065178122,
      "beta": 38.82051588414076,
      "success": true,
      "mse": 20.72986748216234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.3165137342699886,
      "beta": 45.1230437147012,
      "success": true,
      "mse": 6.044852191641776,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 20.00000481364189,
      "success": true,
      "mse": 2.31711482492265e-11,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.4541258348932393,
      "beta": 41.451037598103156,
      "success": true,
      "mse": 18.252803263153925,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.3577980094698931,
      "beta": 35.466673296460264,
      "success": true,
      "mse": 132.21610601427903,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.13761458947195612,
      "beta": 22.17021864102744,
      "success": true,
      "mse": 114.27522935780608,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.5229356421834486,
      "beta": 36.025652394229894,
      "success": true,
      "mse": 31.396534148843024,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 50.00000019995343,
      "success": true,
      "mse": 3.998137551497848e-14,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 30.66666654658564,
      "success": true,
      "mse": 152.88888888888889,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.34403627093250416,
      "beta": 33.73894699762778,
      "success": true,
      "mse": 133.77573904185593,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.06880348980985981,
      "beta": 21.363319742314545,
      "success": true,
      "mse": 74.79102964813428,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 29.999999938570184,
      "success": true,
      "mse": 13.333333333333334,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.38532136884989915,
      "beta": 39.15424367041804,
      "success": true,
      "mse": 24.913353720849045,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.2064219979484159,
      "beta": 45.79961398158179,
      "success": true,
      "mse": 15.341488277268533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.38532122250399775,
      "beta": 27.223873619189924,
      "success": true,
      "mse": 66.69113149847563,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.35779804221328615,
      "beta": 32.352378067908475,
      "success": true,
      "mse": 17.5494393476231,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.13760498606283555,
      "beta": 24.48985839952008,
      "success": true,
      "mse": 132.94189607242572,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.5367078816446236,
      "beta": 32.73270042532929,
      "success": true,
      "mse": 76.15290525553233,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 49.99999999528488,
      "success": true,
      "mse": 2.2232346825245004e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 20.000000081577422,
      "success": true,
      "mse": 6.654875804763005e-15,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 45.99999963296038,
      "success": true,
      "mse": 64.00000000000014,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 22.000004938904528,
      "success": true,
      "mse": 56.00000000002438,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.17889901456106488,
      "beta": 32.13780466325486,
      "success": true,
      "mse": 46.38735983690209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 19.999999994999328,
      "success": true,
      "mse": 2.500671921728963e-17,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.20642100702137237,
      "beta": 47.479753548456586,
      "success": true,
      "mse": 9.119266055425387,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 41.33333297884755,
      "success": true,
      "mse": 171.55555555555566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.11009156755415304,
      "beta": 29.02405877806573,
      "success": true,
      "mse": 116.26503567788478,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 22.666666878854368,
      "success": true,
      "mse": 32.88888888888894,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.05504530948281033,
      "beta": 42.23948988342921,
      "success": true,
      "mse": 152.39959225286267,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.13761461701857342,
      "beta": 19.851063375149632,
      "success": true,
      "mse": 74.2752293578039,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.24770649482811868,
      "beta": 46.455284280779196,
      "success": true,
      "mse": 9.647298674822473,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.17889904840492526,
      "beta": 42.69273853180594,
      "success": true,
      "mse": 32.165137614679516,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.49540955396989295,
      "beta": 16.96988789394825,
      "success": true,
      "mse": 115.9225280345198,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.09633674710919862,
      "beta": 33.032021563535324,
      "success": true,
      "mse": 50.05708461433462,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 48.666666673870864,
      "success": true,
      "mse": 24.888888888888882,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.39908279202960606,
      "beta": 37.796454084269726,
      "success": true,
      "mse": 47.1702344548048,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 34.666665738254345,
      "success": true,
      "mse": 144.88888888888974,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.3165136022928232,
      "beta": 41.221478851123756,
      "success": true,
      "mse": 74.48929663608978,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 35.99999905092929,
      "success": true,
      "mse": 224.00000000000094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 26.666663829942244,
      "success": true,
      "mse": 142.22222222223027,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 7.891607742203519e-18,
      "beta": 39.33333356401452,
      "success": true,
      "mse": 72.88888888888894,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.04128390135726003,
      "beta": 49.30462555862156,
      "success": true,
      "mse": 5.946992864464801,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.20642183888040191,
      "beta": 47.47979328646131,
      "success": true,
      "mse": 49.11926605541172,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 48.666666604956134,
      "success": true,
      "mse": 24.888888888888893,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.41284563208622,
      "beta": 15.937390670942204,
      "success": true,
      "mse": 172.47706422069146,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.38531948575977,
      "beta": 8.786172493518567,
      "success": true,
      "mse": 40.91335372112567,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.23394430290150295,
      "beta": 22.151725055702684,
      "success": true,
      "mse": 96.0509683996741,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.2064217645253169,
      "beta": 32.35839595635456,
      "success": true,
      "mse": 217.1192660551052,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.41284360646643303,
      "beta": 22.75004639233911,
      "success": true,
      "mse": 89.81039755378745,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 49.33333337096273,
      "success": true,
      "mse": 6.222222222222228,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.06880736630697018,
      "beta": 20.646960418631718,
      "success": true,
      "mse": 58.79102956167271,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0688075790761453,
      "beta": 29.2380878838955,
      "success": true,
      "mse": 32.124362895017875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 23.33333083461763,
      "success": true,
      "mse": 75.55555555556175,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 25.33333338898753,
      "success": true,
      "mse": 118.22222222222221,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 48.66666721789156,
      "success": true,
      "mse": 24.8888888888892,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 47.99999996147251,
      "success": true,
      "mse": 16.0,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.17889687418717187,
      "beta": 33.76182907862042,
      "success": true,
      "mse": 150.38735985219262,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 2.8691742498941183e-07,
      "beta": 21.999991404005996,
      "success": true,
      "mse": 56.000000000013564,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.20642134937877785,
      "beta": 47.479766717510984,
      "success": true,
      "mse": 22.45259938846255,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.06880733439557579,
      "beta": 49.284072507390675,
      "success": true,
      "mse": 5.457696228338495,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 36.00000037176916,
      "success": true,
      "mse": 157.33333333333346,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 49.99999991560784,
      "success": true,
      "mse": 7.12203710686756e-15,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 25.333334481762762,
      "success": true,
      "mse": 104.88888888889015,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.3027522271510447,
      "beta": 44.263154671810604,
      "success": true,
      "mse": 35.86544342508407,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 19.999999688195775,
      "success": true,
      "mse": 9.722187479396311e-14,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.16513754481200105,
      "beta": 26.043958601985114,
      "success": true,
      "mse": 128.9296636085637,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.0,
      "beta": 42.666666379459244,
      "success": true,
      "mse": 139.55555555555566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.999999999999283,
        "p": 0.0
      },
      "beta": {
        "r": 0.999999999998972,
        "p": 0.0
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 10.979698380984907,
  "bic_Control": -197.57673818622675,
  "bic_Cocaine": 197.811506139112,
  "bic_results": {
    "average_bic": 10.979698380984907,
    "individual_bics": [
      -1797.014985733086,
      304.9706023337607,
      295.0075953218205,
      -1775.7233055852018,
      307.3509831796856,
      348.81667445212094,
      -1939.1361756877263,
      368.0252066820174,
      -1943.9906051460362,
      280.64281626042106,
      268.19595690306113,
      -1930.8141075262301,
      278.9952974976481,
      325.7679681166551,
      -1777.8183607661497,
      269.9752071181463,
      -1797.0164352494162,
      327.61624446629776,
      362.2013468664541,
      -1797.0151306837918,
      309.84475905970316,
      366.799052815148,
      363.8795714371983,
      309.8447590687468,
      307.2057338793859,
      244.35494030607708,
      -1096.2983926252016,
      300.7156339086777,
      401.7017069362199,
      394.264483047848,
      328.37695463156155,
      -1420.7731140766919,
      409.1106651513358,
      402.2997868958251,
      372.64497727056056,
      284.6990070900624,
      316.58098329237293,
      291.8539829935213,
      366.79905278732093,
      298.7115038255829,
      401.98090186993693,
      373.56528640070513,
      -1802.9987707940973,
      -1512.2193752119413,
      364.69841890366865,
      357.8883178798401,
      348.2837588977235,
      -1797.0013612863634,
      265.32523720024665,
      414.9856464679989,
      395.14487279101763,
      330.7452603787052,
      408.94718600720887,
      372.2920346265324,
      268.1959569030656,
      329.61042399818007,
      394.99440906933944,
      352.16674802279636,
      316.53087685278507,
      349.13729810532095,
      406.3697070749949,
      372.438809385568,
      428.58933029693253,
      405.42231141077775,
      371.3311284443266,
      243.52255188665214,
      351.20220008711397,
      316.5308768527851,
      415.2588592485092,
      341.8796634893994,
      385.4042091941932,
      426.9981692538226,
      381.9781201207292,
      245.82986443567074,
      360.3688351766866,
      329.54573191113354,
      373.16366091486003,
      395.9962523731591,
      316.53087685278575,
      293.9974064865541,
      408.2693142391697,
      357.8883178798302,
      311.2771077036504,
      239.14374664258753,
      410.57208319511506,
      -1508.7593309422434,
      389.8933626815992,
      335.1638685670242,
      -1375.4554319792926,
      400.41799928054314,
      404.45698290661346
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        -1797.014985733086,
        304.9706023337607,
        295.0075953218205,
        -1775.7233055852018,
        307.3509831796856,
        348.81667445212094,
        -1939.1361756877263,
        368.0252066820174,
        -1943.9906051460362,
        280.64281626042106,
        268.19595690306113,
        -1930.8141075262301,
        278.9952974976481,
        325.7679681166551,
        -1777.8183607661497,
        269.9752071181463,
        -1797.0164352494162,
        327.61624446629776,
        362.2013468664541,
        -1797.0151306837918,
        309.84475905970316,
        366.799052815148,
        363.8795714371983,
        309.8447590687468,
        307.2057338793859,
        244.35494030607708,
        -1096.2983926252016,
        300.7156339086777,
        401.7017069362199,
        394.264483047848,
        328.37695463156155,
        -1420.7731140766919,
        409.1106651513358,
        402.2997868958251,
        372.64497727056056,
        284.6990070900624,
        316.58098329237293,
        291.8539829935213,
        366.79905278732093,
        298.7115038255829,
        401.98090186993693,
        373.56528640070513,
        -1802.9987707940973
      ],
      "Cocaine": [
        -1512.2193752119413,
        364.69841890366865,
        357.8883178798401,
        348.2837588977235,
        -1797.0013612863634,
        265.32523720024665,
        414.9856464679989,
        395.14487279101763,
        330.7452603787052,
        408.94718600720887,
        372.2920346265324,
        268.1959569030656,
        329.61042399818007,
        394.99440906933944,
        352.16674802279636,
        316.53087685278507,
        349.13729810532095,
        406.3697070749949,
        372.438809385568,
        428.58933029693253,
        405.42231141077775,
        371.3311284443266,
        243.52255188665214,
        351.20220008711397,
        316.5308768527851,
        415.2588592485092,
        341.8796634893994,
        385.4042091941932,
        426.9981692538226,
        381.9781201207292,
        245.82986443567074,
        360.3688351766866,
        329.54573191113354,
        373.16366091486003,
        395.9962523731591,
        316.53087685278575,
        293.9974064865541,
        408.2693142391697,
        357.8883178798302,
        311.2771077036504,
        239.14374664258753,
        410.57208319511506,
        -1508.7593309422434,
        389.8933626815992,
        335.1638685670242,
        -1375.4554319792926,
        400.41799928054314,
        404.45698290661346
      ]
    },
    "num_parameters": 2,
    "prediction_type": "numerical",
    "bic_formula": "BIC calculated from MSE using Gaussian error assumption"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 1.000\n- beta: r = 1.000",
  "previous_models": [
    "Specification: proposed_perc_pred = alpha * (token_opp / (token_self + token_opp)) * 100 + (1 - alpha) * beta\nSummary: A weighted-average model of proposer decisions that blends contribution-based fairness with a baseline offer tendency. The proposer\u2019s predicted offer is a convex combination of a \u201cfair share\u201d (proportional to relative token contributions) and a baseline offer parameter, with the blending controlled by a fairness-sensitivity parameter. This parsimonious two-parameter model captures individual differences in fairness adherence and self-interest bias, using only information available at the time of making an offer.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation\nBIC: 10.979698380984907\n\nParameter Recovery:\n- alpha: r = 1.000\n- beta: r = 1.000"
  ]
}