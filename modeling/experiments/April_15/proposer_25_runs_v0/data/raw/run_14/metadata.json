{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should directly predict a numerical value (not a binary choice). The model's predictions will be compared to actual values using mean squared error.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let\u2019s proceed step by step.\n\n**Key Psychological Mechanisms**\n\n1. **Fairness Norms:** Proposers are typically sensitive to what is perceived as \"fair,\" particularly when contributions (token_self and token_opp) are unequal. A natural reference is each person's contribution to the total (proportional equity).\n\n2. **Self-interest/Selfishness:** Most proposers balance fairness against self-reward\u2014some tend to offer less than the fair split, some close to fair.\n\n3. **Strategic Acceptance Anticipation:** Proposers might anticipate whether the responder will accept or reject an offer. However, detailed modeling of responder *beliefs* would require many more learnable parameters and can confound parameter recovery. We seek parsimony.\n\n4. **Noise/Stochasticity:** Human decisions are not strictly deterministic; there is always some trial-to-trial variability spilling over in the proposals.\n\n**How These Mechanisms Interact**\n\n- The proposer starts with a calculation of what would be \"fair\"\u2014likely, they use proportional equity: (token_opp / (token_self + token_opp)), the \"fair\" % for the opponent. \n- This is then *adjusted* by a selfishness parameter\u2014a bias toward offering less or more than the contribution-determined equity.\n- Lastly, some stochasticity/noise is added at choice time.\n\n**What Mathematical Form Could Capture This?**\n\n- Let\u2019s denote **equity_opponent** as the fair share for the opponent:  \n  equity_opponent = token_opp / (token_self + token_opp) * 100.\n- The actual proposal is a blend of equity_opponent and a fully selfish (minimum) offer. The blend is controlled by a fairness weight.\n- Selfishness can be modeled as always offering less than equity_opponent by a fixed amount, or as *proportional* bias.\n- Add noise with variance sigma_noise.\n\nWe want as FEW learnable parameters as possible to maximize parameter recoverability and limit multicollinearity.\n\n**Parameters to Calibrate**\n\n- fairness_weight (0=fully selfish, 1=fully fair/proportional to tokens; learnable [0,1])\n- bias (systematic tendency to offer more/less, could be negative or positive; learnable [-50, 50])\n- sigma_noise (standard deviation of normal noise process; learnable [0, 20])\n\n**How Model Variables Map to Behavior**\n\n- Each trial, for trials with trial_role == 2, proposer\u2019s offer predicted as  \n  proposed_perc_pred = fairness_weight * equity_opponent + (1 - fairness_weight) * min_offer + bias + noise.\n\n- For min_offer, to avoid exploding covariance, let\u2019s set to a fixed \u201clowball\u201d value that is the smallest amount ever offered by proposers in classic ultimatum games (say, 0%). Alternatively, we can omit min_offer and simply use the fairness_weight as a direct scaling, since the lower bound of bias covers selfishness parameter space.\n\nBut including both fairness_weight * equity_opponent and an additive bias will let the model fit a broad range of behaviors and is transparent for parameter recovery (as opposed to a scaling+offset).  \nHence:\n\nproposed_perc_pred = fairness_weight * equity_opponent + bias + epsilon, with epsilon ~ N(0, sigma_noise^2).\n\nAll required source variables are defined on each trial.\n\n**Target Variable**\n\n- proposed_perc (proposer\u2019s offered %) (continuous: 0\u2013100).\n\n---\n\n**MODEL SPECIFICATION**\n\nNow, per instruction, only the mathematical formula between <MODEL> tags (use specified parameter names).\n\n---\n\n<MODEL>\nproposed_perc_pred = fairness_weight * (token_opp / (token_self + token_opp)) * 100 + bias + epsilon\n</MODEL>\n\n---\n\n**VARIABLE DESCRIPTIONS (JSON FORMAT)**\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"proposed_perc_pred\": {\n      \"description\": \"Predicted percentage of the total to be offered to the opponent by the proposer.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Degree to which offers reflect proportional fairness based on contributions (0 = no fairness, 1 = fully fair).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"bias\": {\n      \"description\": \"Overall tendency to offer more (>0) or less (<0) than fairness predicts, in percentage points.\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"parameters\": {\n          \"mean\": 0,\n          \"std\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Random choice noise, normally distributed with mean 0 and standard deviation sigma_noise.\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"parameters\": {\n          \"mean\": 0,\n          \"std\": \"sigma_noise\"\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sigma_noise\": {\n      \"description\": \"Standard deviation of normal noise in proposals, capturing trial-to-trial stochasticity.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 20\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n---\n\n<target_variable>proposed_perc</target_variable>\n\n---\n\n<SUMMARY>\nA parsimonious, noise-augmented fairness model for proposer behavior in social bargaining: the predicted offer is a weighted sum of proportional equity (opponent\u2019s contribution share) plus a bias term, with additive Gaussian noise. The fairness_weight parameter captures the degree to which the participant values equity, bias captures systematic deviations from proportional fairness, and sigma_noise captures trial-level variability. The model has three learnable parameters, balancing psychological fidelity with parameter recoverability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['fairness_weight', 'bias', 'sigma_noise']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                tags (use specified parameter names).\n\n---\n\n<MODEL>\nproposed_perc_pred = fairness_weight * (token_opp / (token_self + token_opp)) * 100 + bias + epsilon\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"proposed_perc_pred\": {\n      \"description\": \"Predicted percentage of the total to be offered to the opponent by the proposer.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Degree to which offers reflect proportional fairness based on contributions (0 = no fairness, 1 = fully fair).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"bias\": {\n      \"description\": \"Overall tendency to offer more (>0) or less (<0) than fairness predicts, in percentage points.\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"parameters\": {\n          \"mean\": 0,\n          \"std\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Random choice noise, normally distributed with mean 0 and standard deviation sigma_noise.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"parameters\": {\n          \"mean\": 0,\n          \"std\": \"sigma_noise\"\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sigma_noise\": {\n      \"description\": \"Standard deviation of normal noise in proposals, capturing trial-to-trial stochasticity.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 20\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "\n\n</PROMPT>\n```python\nimport json\nimport math\nimport random\n\ndef simulate_model(trial_data, fairness_weight=0.5, bias=0, sigma_noise=5):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        if (token_self + token_opp) == 0:\n            fairness_component = 0  # Avoid division by zero\n        else:\n            fairness_component = fairness_weight * (token_opp / (token_self + token_opp)) * 100\n\n        # Generate noise from a normal distribution\n        epsilon = random.gauss(0, sigma_noise)\n\n        proposed_perc_pred = fairness_component + bias + epsilon\n        model_predictions.append(proposed_perc_pred)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\":1,\"group\":\"control\",\"trial_number\":1,\"trial_type\":1,\"trial_role\":2,\"token_opp\":50,\"token_self\":50,\"combined_earning\":100,\"split_opp\":50.0,\"split_self\":50.0,\"splitperc_opp\":50,\"splitperc_self\":50,\"accept\":1.0,\"accepted_amount\":50.0,\"accepted_perc\":50.0,\"proposed_perc\":50.0,\"proposed_amount\":50.0},{\"ID\":2,\"group\":\"control\",\"trial_number\":2,\"trial_type\":1,\"trial_role\":2,\"token_opp\":60,\"token_self\":40,\"combined_earning\":100,\"split_opp\":50.0,\"split_self\":50.0,\"splitperc_opp\":50,\"splitperc_self\":50,\"accept\":0.0,\"accepted_amount\":null,\"accepted_perc\":null,\"proposed_perc\":50.0,\"proposed_amount\":50.0},{\"ID\":3,\"group\":\"control\",\"trial_number\":3,\"trial_type\":1,\"trial_role\":2,\"token_opp\":40,\"token_self\":60,\"combined_earning\":100,\"split_opp\":60.0,\"split_self\":40.0,\"splitperc_opp\":60,\"splitperc_self\":40,\"accept\":1.0,\"accepted_amount\":60.0,\"accepted_perc\":60.0,\"proposed_perc\":60.0,\"proposed_amount\":60.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744732843.464594
    }
  ],
  "learnable_parameters": {
    "fairness_weight": {
      "description": "Degree to which offers reflect proportional fairness based on contributions (0 = no fairness, 1 = fully fair).",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 1
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "bias": {
      "description": "Overall tendency to offer more (>0) or less (<0) than fairness predicts, in percentage points.",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "normal",
        "parameters": {
          "mean": 0,
          "std": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "sigma_noise": {
      "description": "Standard deviation of normal noise in proposals, capturing trial-to-trial stochasticity.",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 20
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "tags (use specified parameter names).\n\n---\n\n<MODEL>\nproposed_perc_pred = fairness_weight * (token_opp / (token_self + token_opp)) * 100 + bias + epsilon",
  "variable_descriptions": {
    "proposed_perc_pred": {
      "description": "Predicted percentage of the total to be offered to the opponent by the proposer.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fairness_weight": {
      "description": "Degree to which offers reflect proportional fairness based on contributions (0 = no fairness, 1 = fully fair).",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 1
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "bias": {
      "description": "Overall tendency to offer more (>0) or less (<0) than fairness predicts, in percentage points.",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "normal",
        "parameters": {
          "mean": 0,
          "std": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "epsilon": {
      "description": "Random choice noise, normally distributed with mean 0 and standard deviation sigma_noise.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "normal",
        "parameters": {
          "mean": 0,
          "std": "sigma_noise"
        }
      },
      "learnable": false,
      "source": "calculated"
    },
    "sigma_noise": {
      "description": "Standard deviation of normal noise in proposals, capturing trial-to-trial stochasticity.",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 20
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A parsimonious, noise-augmented fairness model for proposer behavior in social bargaining: the predicted offer is a weighted sum of proportional equity (opponent\u2019s contribution share) plus a bias term, with additive Gaussian noise. The fairness_weight parameter captures the degree to which the participant values equity, bias captures systematic deviations from proportional fairness, and sigma_noise captures trial-level variability. The model has three learnable parameters, balancing psychological fidelity with parameter recoverability.",
  "target_variable": "proposed_perc",
  "full_reasoning": "Let\u2019s proceed step by step.\n\n**Key Psychological Mechanisms**\n\n1. **Fairness Norms:** Proposers are typically sensitive to what is perceived as \"fair,\" particularly when contributions (token_self and token_opp) are unequal. A natural reference is each person's contribution to the total (proportional equity).\n\n2. **Self-interest/Selfishness:** Most proposers balance fairness against self-reward\u2014some tend to offer less than the fair split, some close to fair.\n\n3. **Strategic Acceptance Anticipation:** Proposers might anticipate whether the responder will accept or reject an offer. However, detailed modeling of responder *beliefs* would require many more learnable parameters and can confound parameter recovery. We seek parsimony.\n\n4. **Noise/Stochasticity:** Human decisions are not strictly deterministic; there is always some trial-to-trial variability spilling over in the proposals.\n\n**How These Mechanisms Interact**\n\n- The proposer starts with a calculation of what would be \"fair\"\u2014likely, they use proportional equity: (token_opp / (token_self + token_opp)), the \"fair\" % for the opponent. \n- This is then *adjusted* by a selfishness parameter\u2014a bias toward offering less or more than the contribution-determined equity.\n- Lastly, some stochasticity/noise is added at choice time.\n\n**What Mathematical Form Could Capture This?**\n\n- Let\u2019s denote **equity_opponent** as the fair share for the opponent:  \n  equity_opponent = token_opp / (token_self + token_opp) * 100.\n- The actual proposal is a blend of equity_opponent and a fully selfish (minimum) offer. The blend is controlled by a fairness weight.\n- Selfishness can be modeled as always offering less than equity_opponent by a fixed amount, or as *proportional* bias.\n- Add noise with variance sigma_noise.\n\nWe want as FEW learnable parameters as possible to maximize parameter recoverability and limit multicollinearity.\n\n**Parameters to Calibrate**\n\n- fairness_weight (0=fully selfish, 1=fully fair/proportional to tokens; learnable [0,1])\n- bias (systematic tendency to offer more/less, could be negative or positive; learnable [-50, 50])\n- sigma_noise (standard deviation of normal noise process; learnable [0, 20])\n\n**How Model Variables Map to Behavior**\n\n- Each trial, for trials with trial_role == 2, proposer\u2019s offer predicted as  \n  proposed_perc_pred = fairness_weight * equity_opponent + (1 - fairness_weight) * min_offer + bias + noise.\n\n- For min_offer, to avoid exploding covariance, let\u2019s set to a fixed \u201clowball\u201d value that is the smallest amount ever offered by proposers in classic ultimatum games (say, 0%). Alternatively, we can omit min_offer and simply use the fairness_weight as a direct scaling, since the lower bound of bias covers selfishness parameter space.\n\nBut including both fairness_weight * equity_opponent and an additive bias will let the model fit a broad range of behaviors and is transparent for parameter recovery (as opposed to a scaling+offset).  \nHence:\n\nproposed_perc_pred = fairness_weight * equity_opponent + bias + epsilon, with epsilon ~ N(0, sigma_noise^2).\n\nAll required source variables are defined on each trial.\n\n**Target Variable**\n\n- proposed_perc (proposer\u2019s offered %) (continuous: 0\u2013100).\n\n---\n\n**MODEL SPECIFICATION**\n\nNow, per instruction, only the mathematical formula between <MODEL> tags (use specified parameter names).\n\n---\n\n<MODEL>\nproposed_perc_pred = fairness_weight * (token_opp / (token_self + token_opp)) * 100 + bias + epsilon\n</MODEL>\n\n---\n\n**VARIABLE DESCRIPTIONS (JSON FORMAT)**\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"proposed_perc_pred\": {\n      \"description\": \"Predicted percentage of the total to be offered to the opponent by the proposer.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Degree to which offers reflect proportional fairness based on contributions (0 = no fairness, 1 = fully fair).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"bias\": {\n      \"description\": \"Overall tendency to offer more (>0) or less (<0) than fairness predicts, in percentage points.\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"parameters\": {\n          \"mean\": 0,\n          \"std\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Random choice noise, normally distributed with mean 0 and standard deviation sigma_noise.\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"parameters\": {\n          \"mean\": 0,\n          \"std\": \"sigma_noise\"\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sigma_noise\": {\n      \"description\": \"Standard deviation of normal noise in proposals, capturing trial-to-trial stochasticity.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 20\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n---\n\n<target_variable>proposed_perc</target_variable>\n\n---\n\n<SUMMARY>\nA parsimonious, noise-augmented fairness model for proposer behavior in social bargaining: the predicted offer is a weighted sum of proportional equity (opponent\u2019s contribution share) plus a bias term, with additive Gaussian noise. The fairness_weight parameter captures the degree to which the participant values equity, bias captures systematic deviations from proportional fairness, and sigma_noise captures trial-level variability. The model has three learnable parameters, balancing psychological fidelity with parameter recoverability.\n</SUMMARY>",
  "prediction_type": "numerical_variable_estimation",
  "current_model": "Specification: tags (use specified parameter names).\n\n---\n\n<MODEL>\nproposed_perc_pred = fairness_weight * (token_opp / (token_self + token_opp)) * 100 + bias + epsilon\nSummary: A parsimonious, noise-augmented fairness model for proposer behavior in social bargaining: the predicted offer is a weighted sum of proportional equity (opponent\u2019s contribution share) plus a bias term, with additive Gaussian noise. The fairness_weight parameter captures the degree to which the participant values equity, bias captures systematic deviations from proportional fairness, and sigma_noise captures trial-level variability. The model has three learnable parameters, balancing psychological fidelity with parameter recoverability.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, fairness_weight=0.5, bias=0, sigma_noise=5):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        if (token_self + token_opp) == 0:\n            fairness_component = 0  # Avoid division by zero\n        else:\n            fairness_component = fairness_weight * (token_opp / (token_self + token_opp)) * 100\n\n        # Generate noise from a normal distribution\n        epsilon = random.gauss(0, sigma_noise)\n\n        proposed_perc_pred = fairness_component + bias + epsilon\n        model_predictions.append(proposed_perc_pred)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "group_parameter_averages": {
    "Control": {
      "fairness_weight": 0.5279823441891783,
      "bias": 7.236594088612487,
      "sigma_noise": 9.002054160873044
    },
    "Cocaine": {
      "fairness_weight": 0.5530215463524126,
      "bias": 6.941577975936838,
      "sigma_noise": 7.943361540917827
    }
  },
  "fitting_results": [
    {
      "fairness_weight": 0.6040389412375415,
      "bias": 2.2199101531441903,
      "sigma_noise": 5.336686731972278,
      "success": true,
      "mse": 404.15476014269126,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7660101655612048,
      "bias": 27.65773445642482,
      "sigma_noise": 14.014878215663071,
      "success": true,
      "mse": 641.2540258566225,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4879098450644129,
      "bias": 5.167790739937699,
      "sigma_noise": 6.577599502286004,
      "success": true,
      "mse": 112.99502312849197,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.47617534523433214,
      "bias": 1.4652730939864667,
      "sigma_noise": 13.602079299447535,
      "success": true,
      "mse": 663.8574570030424,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7914441611686617,
      "bias": 44.90527543050801,
      "sigma_noise": 0.4764982398930906,
      "success": true,
      "mse": 1673.5536372453078,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.19410743970087765,
      "bias": 47.2037290233995,
      "sigma_noise": 10.093603459134334,
      "success": true,
      "mse": 664.7335519957935,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.0005530087877898942,
      "bias": 16.109780791879498,
      "sigma_noise": 5.575940435323361,
      "success": true,
      "mse": 1420.0941697871353,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.19028467979344288,
      "bias": 1.8174696383770754,
      "sigma_noise": 10.9561871750733,
      "success": true,
      "mse": 1397.7709973315452,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.860503023922105,
      "bias": -11.85668777762489,
      "sigma_noise": 1.9167716442823515,
      "success": true,
      "mse": 479.65141232086563,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.8006344123662396,
      "bias": -43.933655592366485,
      "sigma_noise": 1.2374762019336565,
      "success": true,
      "mse": 2624.0453499417063,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4645595579751602,
      "bias": 21.050162266370315,
      "sigma_noise": 2.4041888208762097,
      "success": true,
      "mse": 38.80259052055176,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.8719856385103818,
      "bias": 29.748531008471794,
      "sigma_noise": 6.596191583528245,
      "success": true,
      "mse": 757.1099820481548,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9650842482068516,
      "bias": -0.8400370951949715,
      "sigma_noise": 12.305957421879768,
      "success": true,
      "mse": 245.68707651629913,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9189837229764003,
      "bias": -39.66185611384767,
      "sigma_noise": 9.520366232347087,
      "success": true,
      "mse": 2271.692167339572,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.16863420729388612,
      "bias": 48.52646424034247,
      "sigma_noise": 0.5394959396441126,
      "success": true,
      "mse": 54.35080367235987,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4513940168646689,
      "bias": -43.580578781214406,
      "sigma_noise": 9.115316019659767,
      "success": true,
      "mse": 4792.7874033504295,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4279093388142303,
      "bias": 24.010230425679058,
      "sigma_noise": 4.876317120311037,
      "success": true,
      "mse": 86.75129563715555,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.8858010882536448,
      "bias": -16.065656522614137,
      "sigma_noise": 1.7061357635915786,
      "success": true,
      "mse": 345.43101808853976,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.817267144225038,
      "bias": -3.606556718246206,
      "sigma_noise": 14.288875616500778,
      "success": true,
      "mse": 268.6727072595521,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5254152569197192,
      "bias": 39.97916504893468,
      "sigma_noise": 18.07632061789129,
      "success": true,
      "mse": 597.6489102859786,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.530750519205855,
      "bias": -30.73468246888765,
      "sigma_noise": 15.40087726018888,
      "success": true,
      "mse": 1431.810663010505,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.847865641186056,
      "bias": -14.897453740983837,
      "sigma_noise": 16.890534993717022,
      "success": true,
      "mse": 430.2557356185212,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4496508842383272,
      "bias": 34.512687387405016,
      "sigma_noise": 8.102220605461538,
      "success": true,
      "mse": 917.8618589764695,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4528075389666142,
      "bias": -0.09608855386787503,
      "sigma_noise": 6.670724224674045,
      "success": true,
      "mse": 542.7034774449925,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.17004594448749655,
      "bias": 23.074727280711702,
      "sigma_noise": 8.935487370851883,
      "success": true,
      "mse": 353.5284111171497,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9748813746403782,
      "bias": -12.418448090722983,
      "sigma_noise": 2.3148580715036036,
      "success": true,
      "mse": 174.10669738447461,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.31896829828027246,
      "bias": 22.05346853472929,
      "sigma_noise": 16.158637854951714,
      "success": true,
      "mse": 425.1481047964731,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.11514835941526477,
      "bias": 49.113142155948175,
      "sigma_noise": 10.836732210980182,
      "success": true,
      "mse": 299.763308687875,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.13395991616398065,
      "bias": 27.67194246213345,
      "sigma_noise": 11.629428227481975,
      "success": true,
      "mse": 283.4798733797282,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3257159274253312,
      "bias": -5.760769843514799,
      "sigma_noise": 15.146880062124495,
      "success": true,
      "mse": 654.8068049585673,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9084245262237856,
      "bias": 2.786161755759223,
      "sigma_noise": 16.296704991848554,
      "success": true,
      "mse": 259.07873886606166,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6055752603166543,
      "bias": 27.572893367002383,
      "sigma_noise": 16.119112664628,
      "success": true,
      "mse": 422.3743285909858,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7081337365307451,
      "bias": 0.6646633219304704,
      "sigma_noise": 4.014918677885048,
      "success": true,
      "mse": 293.69146465961387,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5945813031632785,
      "bias": -6.468858061541173,
      "sigma_noise": 1.2574310986942137,
      "success": true,
      "mse": 422.87535978103494,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.22529299231555588,
      "bias": 20.53094478067264,
      "sigma_noise": 17.548224803912255,
      "success": true,
      "mse": 374.22562412690263,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.1290625285720738,
      "bias": -14.279840355316498,
      "sigma_noise": 12.725744716353242,
      "success": true,
      "mse": 1751.0204743936551,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5991699132697005,
      "bias": -13.117159774042635,
      "sigma_noise": 7.782471158934776,
      "success": true,
      "mse": 951.2276780280193,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.2172053762610535,
      "bias": 42.26362224287305,
      "sigma_noise": 2.6311070452425898,
      "success": true,
      "mse": 71.86793345901398,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.15706689296744572,
      "bias": -45.672669935281824,
      "sigma_noise": 15.035915374694408,
      "success": true,
      "mse": 6219.113151733833,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6147372387612009,
      "bias": 40.532927033984734,
      "sigma_noise": 8.610915140443755,
      "success": true,
      "mse": 1134.533084907863,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.8644144135653092,
      "bias": -11.962110984215288,
      "sigma_noise": 7.154248213351803,
      "success": true,
      "mse": 284.8878373860496,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.33647439031844956,
      "bias": 23.44725801840067,
      "sigma_noise": 3.5717438899852065,
      "success": true,
      "mse": 121.19693261257152,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7546125809832497,
      "bias": 2.040701560813884,
      "sigma_noise": 13.036524218392838,
      "success": true,
      "mse": 374.2676229702278,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4716911414738179,
      "bias": -3.989662696874233,
      "sigma_noise": 5.176478714561374,
      "success": true,
      "mse": 65.72423684309113,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6520015738160513,
      "bias": 2.380972416330213,
      "sigma_noise": 6.404254587754341,
      "success": true,
      "mse": 259.43520894152465,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3747417797726494,
      "bias": -14.172529131906659,
      "sigma_noise": 3.6712539996220355,
      "success": true,
      "mse": 470.6938401172184,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9184246615985218,
      "bias": 33.31083537045898,
      "sigma_noise": 1.8245395419524995,
      "success": true,
      "mse": 2044.3600831322137,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7720524502039411,
      "bias": -7.397243047694914,
      "sigma_noise": 4.746937832304779,
      "success": true,
      "mse": 285.19726587025247,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3732133671321466,
      "bias": 41.893020159329225,
      "sigma_noise": 15.492132672065555,
      "success": true,
      "mse": 212.15403527914012,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4008704146557564,
      "bias": 8.80571639000251,
      "sigma_noise": 10.32538647743862,
      "success": true,
      "mse": 605.6144048635623,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7168376479301362,
      "bias": 33.1863250238433,
      "sigma_noise": 2.6681523102396385,
      "success": true,
      "mse": 1642.5521353069914,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.592266424186595,
      "bias": -23.6971219200489,
      "sigma_noise": 15.795367725196675,
      "success": true,
      "mse": 485.89597659963454,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.8890941658209891,
      "bias": -11.471155338011961,
      "sigma_noise": 12.97695901033542,
      "success": true,
      "mse": 676.3112806048106,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.56262419002611,
      "bias": 5.359228122810556,
      "sigma_noise": 3.266656398168386,
      "success": true,
      "mse": 209.236333666705,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.948864045051639,
      "bias": 12.476109738013703,
      "sigma_noise": 6.571993544502778,
      "success": true,
      "mse": 327.17635733277564,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.826481701070841,
      "bias": 43.50183011270242,
      "sigma_noise": 16.541389241619665,
      "success": true,
      "mse": 1920.5364786879093,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5574924064184386,
      "bias": -18.91600732453875,
      "sigma_noise": 7.033936258609809,
      "success": true,
      "mse": 803.9271357492767,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3780915791138347,
      "bias": 30.173642675790695,
      "sigma_noise": 0.6122780653788923,
      "success": true,
      "mse": 277.80695106462576,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6245547477880785,
      "bias": -45.20184022491654,
      "sigma_noise": 10.298217675908335,
      "success": true,
      "mse": 3996.9912137591655,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.20506300683535483,
      "bias": 29.06463971881525,
      "sigma_noise": 1.1611062109116208,
      "success": true,
      "mse": 66.75441720633361,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5112709095098625,
      "bias": 40.20915940563554,
      "sigma_noise": 14.977438006599549,
      "success": true,
      "mse": 1173.9466659715179,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6925272560526325,
      "bias": -9.026593812066935,
      "sigma_noise": 9.28746872519325,
      "success": true,
      "mse": 628.0651477906392,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6089641382312103,
      "bias": 1.41923180400781,
      "sigma_noise": 0.0941439847068242,
      "success": true,
      "mse": 316.3635594843958,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7664420853783028,
      "bias": -32.56248020678712,
      "sigma_noise": 17.889371946935118,
      "success": true,
      "mse": 1067.0371162195852,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5776692376141223,
      "bias": -8.31428935572439,
      "sigma_noise": 1.0321522530556204,
      "success": true,
      "mse": 491.70298637869587,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.21638713628345346,
      "bias": 40.17673702313484,
      "sigma_noise": 10.734423091417396,
      "success": true,
      "mse": 151.9109997783641,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4804650039768091,
      "bias": 4.051922065117239,
      "sigma_noise": 15.02148524426516,
      "success": true,
      "mse": 521.1672656321498,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9062813349946454,
      "bias": -21.750057806849885,
      "sigma_noise": 1.280827533310697,
      "success": true,
      "mse": 799.3988471267755,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.01353120308730869,
      "bias": 3.259953325192921,
      "sigma_noise": 8.27652904971742,
      "success": true,
      "mse": 1023.5121366954916,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3785379843091792,
      "bias": 3.0350255172448275,
      "sigma_noise": 0.9419495991621861,
      "success": true,
      "mse": 47.286675814558116,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.2115762127955602,
      "bias": 41.98940806310494,
      "sigma_noise": 17.359800174789815,
      "success": true,
      "mse": 834.5699547077646,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5478116401227108,
      "bias": -22.30784916815591,
      "sigma_noise": 12.309026701273206,
      "success": true,
      "mse": 1364.7439347749503,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.20442924313711022,
      "bias": 26.353306017507297,
      "sigma_noise": 3.474400902320088,
      "success": true,
      "mse": 128.60432473359214,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5883109201521687,
      "bias": 6.61190507548182,
      "sigma_noise": 1.3003226982807878,
      "success": true,
      "mse": 264.41936784201334,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6341126486070401,
      "bias": 30.60755513682228,
      "sigma_noise": 4.517869006840714,
      "success": true,
      "mse": 1674.2611745789993,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.07096695905527313,
      "bias": 25.04632056423511,
      "sigma_noise": 3.027156094049835,
      "success": true,
      "mse": 49.308778808205275,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6608232582655881,
      "bias": -31.270911441438766,
      "sigma_noise": 13.56887860729732,
      "success": true,
      "mse": 1132.2184202156097,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.11570975723103105,
      "bias": -8.013520749920767,
      "sigma_noise": 3.2945604699310524,
      "success": true,
      "mse": 828.9015200785395,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9999625074251253,
      "bias": 44.474458058596504,
      "sigma_noise": 2.6244126479005536,
      "success": true,
      "mse": 2309.9202574907245,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.2740419495514484,
      "bias": -21.48649063826715,
      "sigma_noise": 6.768784588412262,
      "success": true,
      "mse": 3171.9265156936026,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7768626627523755,
      "bias": -39.265057702619174,
      "sigma_noise": 9.195915752326897,
      "success": true,
      "mse": 1506.731075348706,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4487480092172668,
      "bias": 26.378625311070344,
      "sigma_noise": 10.024384092212081,
      "success": true,
      "mse": 788.4255769547764,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7909801423836319,
      "bias": 46.72049709360888,
      "sigma_noise": 12.480415181438705,
      "success": true,
      "mse": 1777.112768830039,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.02631665817840036,
      "bias": -3.2613957344548283,
      "sigma_noise": 12.245997825737009,
      "success": true,
      "mse": 2803.9894202292326,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7722301849579455,
      "bias": 17.786281714979584,
      "sigma_noise": 9.017806482467185,
      "success": true,
      "mse": 995.3491796417578,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9051315225654052,
      "bias": 6.753253296002685,
      "sigma_noise": 19.98973429899781,
      "success": true,
      "mse": 610.00643224108,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.531857417475773,
      "bias": 1.4002290061434013,
      "sigma_noise": 12.41739852649057,
      "success": true,
      "mse": 438.27422722059055,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9164264045123371,
      "bias": 20.08439176886546,
      "sigma_noise": 14.679783273565667,
      "success": true,
      "mse": 727.9181189615707,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6213240825357629,
      "bias": 13.612771289000188,
      "sigma_noise": 5.734633133496687,
      "success": true,
      "mse": 694.7388660874399,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7559050023964439,
      "bias": -30.299874835468597,
      "sigma_noise": 0.9594796213047273,
      "success": true,
      "mse": 698.0664315865599,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.27506544926497917,
      "bias": 45.47647271686515,
      "sigma_noise": 2.1877641839891173,
      "success": true,
      "mse": 484.64319376337954,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    }
  ],
  "recovery_warnings": [
    "Error in iteration 40: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 47: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 58: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 67: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 78: Error in parameter fitting: All optimization attempts failed. Errors: []"
  ],
  "parameter_recovery": {
    "correlations": {
      "fairness_weight": {
        "r": 0.057379922976202966,
        "p": 0.5807278083230966
      },
      "bias": {
        "r": 0.47332333153809036,
        "p": 1.2717753705292567e-06
      },
      "sigma_noise": {
        "r": -0.20218565497085836,
        "p": 0.04942377015052283
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 476.808870620315,
  "bic_Control": 471.7907841531162,
  "bic_Cocaine": 481.30423974718065,
  "bic_results": {
    "average_bic": 476.808870620315,
    "individual_bics": [
      462.61889887275976,
      486.1619166898666,
      397.6217397912675,
      487.9286474004251,
      535.0851404099307,
      487.99590790543215,
      526.7096090075951,
      525.9015464886185,
      471.35324768788024,
      558.0233013510568,
      343.11004481514766,
      494.63214229494685,
      437.2341999401879,
      550.6695016126927,
      360.2956367073792,
      588.7454468536665,
      384.1425203397667,
      454.6116485032955,
      441.7953980813374,
      482.57038450958606,
      527.1286584158036,
      465.81057534594936,
      504.45159912789836,
      477.6519248099433,
      455.79336378898665,
      419.6702913317519,
      465.20152437978066,
      447.3798600879805,
      444.5314047762323,
      487.2285594162135,
      439.9409406397836,
      464.8676970119354,
      446.3362258792947,
      464.9281586578532,
      458.69501060288826,
      537.3928625697043,
      506.27263287622316,
      374.5435463218463,
      602.0317196535409,
      515.2600070683983,
      444.7840803235709,
      401.1954622917782,
      458.7007339438005,
      369.986063003453,
      440.01106402523794,
      470.3918082306599,
      545.2920524729817,
      444.8394434760333,
      429.75014949463633,
      483.2456251701257,
      534.1315383408406,
      472.01292989973354,
      488.87653294560903,
      429.04389149152746,
      451.84267385850075,
      542.1055592258123,
      497.69214781767215,
      443.5004563287932,
      579.4853624705518,
      370.7792512788487,
      517.0016623565951,
      485.1020461650503,
      450.128702190062,
      512.1319001354374,
      472.6188245319403,
      412.7152431858349,
      475.5868301979227,
      497.4040674943038,
      510.0079657012516,
      353.1948638737042,
      499.59995224683814,
      524.6820342039854,
      404.2209697547166,
      440.98156150962956,
      535.1066973995395,
      355.3304161357863,
      515.1558510194724,
      499.25237636180225,
      551.5205896850631,
      567.6940224976479,
      529.7297916359041,
      496.699146118847,
      538.1472168900157,
      561.4059295124947,
      508.58498139040216,
      483.6141518752824,
      466.7522922895026,
      492.6268242488232,
      490.2475454633339,
      490.49123517879474,
      471.881267083671
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        462.61889887275976,
        486.1619166898666,
        397.6217397912675,
        487.9286474004251,
        535.0851404099307,
        487.99590790543215,
        526.7096090075951,
        525.9015464886185,
        471.35324768788024,
        558.0233013510568,
        343.11004481514766,
        494.63214229494685,
        437.2341999401879,
        550.6695016126927,
        360.2956367073792,
        588.7454468536665,
        384.1425203397667,
        454.6116485032955,
        441.7953980813374,
        482.57038450958606,
        527.1286584158036,
        465.81057534594936,
        504.45159912789836,
        477.6519248099433,
        455.79336378898665,
        419.6702913317519,
        465.20152437978066,
        447.3798600879805,
        444.5314047762323,
        487.2285594162135,
        439.9409406397836,
        464.8676970119354,
        446.3362258792947,
        464.9281586578532,
        458.69501060288826,
        537.3928625697043,
        506.27263287622316,
        374.5435463218463,
        602.0317196535409,
        515.2600070683983,
        444.7840803235709,
        401.1954622917782,
        458.7007339438005
      ],
      "Cocaine": [
        369.986063003453,
        440.01106402523794,
        470.3918082306599,
        545.2920524729817,
        444.8394434760333,
        429.75014949463633,
        483.2456251701257,
        534.1315383408406,
        472.01292989973354,
        488.87653294560903,
        429.04389149152746,
        451.84267385850075,
        542.1055592258123,
        497.69214781767215,
        443.5004563287932,
        579.4853624705518,
        370.7792512788487,
        517.0016623565951,
        485.1020461650503,
        450.128702190062,
        512.1319001354374,
        472.6188245319403,
        412.7152431858349,
        475.5868301979227,
        497.4040674943038,
        510.0079657012516,
        353.1948638737042,
        499.59995224683814,
        524.6820342039854,
        404.2209697547166,
        440.98156150962956,
        535.1066973995395,
        355.3304161357863,
        515.1558510194724,
        499.25237636180225,
        551.5205896850631,
        567.6940224976479,
        529.7297916359041,
        496.699146118847,
        538.1472168900157,
        561.4059295124947,
        508.58498139040216,
        483.6141518752824,
        466.7522922895026,
        492.6268242488232,
        490.2475454633339,
        490.49123517879474,
        471.881267083671
      ]
    },
    "num_parameters": 3,
    "prediction_type": "numerical",
    "bic_formula": "BIC calculated from MSE using Gaussian error assumption"
  },
  "recovery_summary": "Parameter Recovery:\n- fairness_weight: r = 0.057\n- bias: r = 0.473\n- sigma_noise: r = -0.202",
  "previous_models": [
    "Specification: tags (use specified parameter names).\n\n---\n\n<MODEL>\nproposed_perc_pred = fairness_weight * (token_opp / (token_self + token_opp)) * 100 + bias + epsilon\nSummary: A parsimonious, noise-augmented fairness model for proposer behavior in social bargaining: the predicted offer is a weighted sum of proportional equity (opponent\u2019s contribution share) plus a bias term, with additive Gaussian noise. The fairness_weight parameter captures the degree to which the participant values equity, bias captures systematic deviations from proportional fairness, and sigma_noise captures trial-level variability. The model has three learnable parameters, balancing psychological fidelity with parameter recoverability.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation\nBIC: 476.808870620315\n\nParameter Recovery:\n- fairness_weight: r = 0.057\n- bias: r = 0.473\n- sigma_noise: r = -0.202"
  ]
}