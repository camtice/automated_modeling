{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should directly predict a numerical value (not a binary choice). The model's predictions will be compared to actual values using mean squared error.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Step-by-Step Reasoning:\n\n**1. Key psychological mechanisms involved:**\n\n- **Equity/Fairness Norm:** Proposers take into account what is \u201cfair\u201d in their offers, especially considering the relative contributions (token_self vs token_opp) to the joint pot. Fairness can be conceptualized as proportional sharing based on contribution.\n- **Self-interest/Greed:** Proposers may deviate from fairness to maximize their own payoff.\n- **Strategic Acceptance Expectation:** Proposers may adjust offers toward what they believe the responder will accept, but in this specific model, actual acceptance feedback is rare per participant so we limit inclusion of such strategic learning unless justified by data.\n- **Noise/Stochasticity:** Choices are noisy; humans are not perfectly deterministic.\n\n**2. How mechanisms interact:**\n\n- **Equity**, **self-interest**, and **noise** jointly determine the actual proposed offer.\n- The proposer computes a \u201cfair\u201d proportion based on relative token contribution, then shifts that baseline up or down depending on their fairness sensitivity and a bias toward self-interest.\n\n**3. Mathematical form to capture these:**\n\n- Let\u2019s anchor predictions on the \u201cproportional equity\u201d offer, i.e., if proposer contributed X% of tokens, they would \u201cfairly\u201d expect X% of the pot.\n    - E.g., proportional_share_self = token_self/(token_self + token_opp)\n- Then, model deviations from fairness as a linear shift (bias toward greediness/self-interest).\n- Optionally, allow for a \u201ccompression\u201d or \u201cslope\u201d parameter to represent overall fairness sensitivity, controlling whether participants consistently \u201cundergive\u201d or \u201covergive\u201d independent of the fair value.\n- Add Gaussian noise to account for scatter in responses.\n\n**4. Parameters needed and identifiability:**\n\n- **fairness_weight:** How strongly proposer aligns with proportional fairness (should be 0\u20132, with 1 = perfect proportional).\n- **self_bias:** A constant tendency to offer less or more than fair share (can be negative or positive, but is usually negative).\n- **noise_std:** Standard deviation of response noise (must be strictly >0).\n- Here, fairness_weight and self_bias are not directly redundant (one is slope/sensitivity, other is baseline shift), but including both a slope and intercept is the standard in regression-type models. For parsimony, do not include further higher-order terms.\n\n**5. Mapping to observable behavior:**\n\n- Given token_self and token_opp (for that trial), we compute proportional fair offer (as percent).\n- Model computes proposed_perc as\n    - proposed_perc = fairness_weight \u00d7 proportional_share_opp + self_bias + noise\n    - Where proportional_share_opp = token_opp/(token_self + token_opp)*100 (since proposed_perc is percent offered to other).\n- Clamp output to valid percent [0, 100].\n\n**6. Variables:**\n\n- All variables, including tokens and combined_earning, must be entered as described above.\n\n**7. Covariance consideration:**\n- Having both a slope (fairness_weight) and intercept (self_bias) parameter is justified and commonly used, as long as parameter recovery is validated and the covariance is checked.\n\n**8. Final Decision:**\n- Use linear model as above, three learnable parameters:\n    - fairness_weight (0, 2)\n    - self_bias (-100, 100)\n    - noise_std (0.1, 50)\n- Utility function not directly needed since output is percent prediction (not binary choice), but model\u2019s error can be turned negative (\u201cutility\u201d defined as negative squared error).\n\n---\n\n**MODEL:**\n\n<MODEL>\nproposed_perc = fairness_weight * (token_opp / (token_self + token_opp)) * 100 + self_bias + Normal(0, noise_std)\n</MODEL>\n\n---\n\n**VARIABLES:**\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"proposed_perc\": {\n      \"description\": \"Predicted percentage of the pot offered to the opponent by the participant (proposer) on trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Scaling parameter for proportional fairness; 1.0 means perfect proportional fairness, >1 exaggerates, <1 underplays\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 2.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.0,\n          \"high\": 2.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"self_bias\": {\n      \"description\": \"Intercept term; overall shift in offer percent independent of fairness calculation (positive = more generous, negative = more selfish)\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -100.0,\n          \"high\": 100.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"noise_std\": {\n      \"description\": \"Standard deviation of Gaussian noise added to offer percent (captures response variability)\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 50.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.1,\n          \"high\": 50.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent (contribution to pot)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant (contribution to pot)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n---\n\n<target_variable>proposed_perc</target_variable>\n\n---\n\n<SUMMARY>\nA proportional fairness model for proposer behavior in resource allocation. The predicted offer (as percent to opponent) linearly combines the opponent\u2019s proportional contribution with an individual fairness sensitivity and a self-bias parameter, capturing both norm-following and idiosyncratic generosity/selfishness. The model includes Gaussian noise to reflect decision variability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['fairness_weight', 'self_bias', 'noise_std']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                proposed_perc = fairness_weight * (token_opp / (token_self + token_opp)) * 100 + self_bias + Normal(0, noise_std)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"proposed_perc\": {\n      \"description\": \"Predicted percentage of the pot offered to the opponent by the participant (proposer) on trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Scaling parameter for proportional fairness; 1.0 means perfect proportional fairness, >1 exaggerates, <1 underplays\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 2.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.0,\n          \"high\": 2.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"self_bias\": {\n      \"description\": \"Intercept term; overall shift in offer percent independent of fairness calculation (positive = more generous, negative = more selfish)\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -100.0,\n          \"high\": 100.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"noise_std\": {\n      \"description\": \"Standard deviation of Gaussian noise added to offer percent (captures response variability)\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 50.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.1,\n          \"high\": 50.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent (contribution to pot)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant (contribution to pot)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "\n</step_by_step_reasoning>\n```python\nimport json\nimport math\nimport random\n\ndef simulate_model(trial_data, fairness_weight=1.0, self_bias=0.0, noise_std=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        if (token_self + token_opp) == 0:\n            fairness_component = 0.0  # Avoid division by zero if both are zero\n        else:\n            fairness_component = fairness_weight * (token_opp / (token_self + token_opp)) * 100\n\n        # Generate Gaussian noise using Box-Muller transform\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        noise = noise_std * N\n\n        proposed_perc = fairness_component + self_bias + noise\n\n        # Clamp the proposed percentage to be within the valid range [0, 100]\n        proposed_perc = max(0.0, min(100.0, proposed_perc))\n        model_predictions.append(proposed_perc)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 20, \"split_opp\": 10.0, \"split_self\": 10.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 10.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 10.0}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 2, \"token_self\": 8, \"combined_earning\": 20, \"split_opp\": 4.0, \"split_self\": 16.0, \"splitperc_opp\": 20, \"splitperc_self\": 80, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 20.0, \"proposed_amount\": 4.0}, {\"ID\": 3, \"group\": \"control\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 8, \"token_self\": 2, \"combined_earning\": 20, \"split_opp\": 16.0, \"split_self\": 4.0, \"splitperc_opp\": 80, \"splitperc_self\": 20, \"accept\": 1.0, \"accepted_amount\": 16.0, \"accepted_perc\": 80.0, \"proposed_perc\": 80.0, \"proposed_amount\": 16.0}]'\n\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744732920.040676
    }
  ],
  "learnable_parameters": {
    "fairness_weight": {
      "description": "Scaling parameter for proportional fairness; 1.0 means perfect proportional fairness, >1 exaggerates, <1 underplays",
      "range": {
        "min": 0.0,
        "max": 2.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.0,
          "high": 2.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "self_bias": {
      "description": "Intercept term; overall shift in offer percent independent of fairness calculation (positive = more generous, negative = more selfish)",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -100.0,
          "high": 100.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "noise_std": {
      "description": "Standard deviation of Gaussian noise added to offer percent (captures response variability)",
      "range": {
        "min": 0.1,
        "max": 50.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.1,
          "high": 50.0
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "proposed_perc = fairness_weight * (token_opp / (token_self + token_opp)) * 100 + self_bias + Normal(0, noise_std)",
  "variable_descriptions": {
    "proposed_perc": {
      "description": "Predicted percentage of the pot offered to the opponent by the participant (proposer) on trial",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fairness_weight": {
      "description": "Scaling parameter for proportional fairness; 1.0 means perfect proportional fairness, >1 exaggerates, <1 underplays",
      "range": {
        "min": 0.0,
        "max": 2.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.0,
          "high": 2.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "self_bias": {
      "description": "Intercept term; overall shift in offer percent independent of fairness calculation (positive = more generous, negative = more selfish)",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -100.0,
          "high": 100.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "noise_std": {
      "description": "Standard deviation of Gaussian noise added to offer percent (captures response variability)",
      "range": {
        "min": 0.1,
        "max": 50.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.1,
          "high": 50.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "token_opp": {
      "description": "Number of tokens found by opponent (contribution to pot)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by participant (contribution to pot)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A proportional fairness model for proposer behavior in resource allocation. The predicted offer (as percent to opponent) linearly combines the opponent\u2019s proportional contribution with an individual fairness sensitivity and a self-bias parameter, capturing both norm-following and idiosyncratic generosity/selfishness. The model includes Gaussian noise to reflect decision variability.",
  "target_variable": "proposed_perc",
  "full_reasoning": "Step-by-Step Reasoning:\n\n**1. Key psychological mechanisms involved:**\n\n- **Equity/Fairness Norm:** Proposers take into account what is \u201cfair\u201d in their offers, especially considering the relative contributions (token_self vs token_opp) to the joint pot. Fairness can be conceptualized as proportional sharing based on contribution.\n- **Self-interest/Greed:** Proposers may deviate from fairness to maximize their own payoff.\n- **Strategic Acceptance Expectation:** Proposers may adjust offers toward what they believe the responder will accept, but in this specific model, actual acceptance feedback is rare per participant so we limit inclusion of such strategic learning unless justified by data.\n- **Noise/Stochasticity:** Choices are noisy; humans are not perfectly deterministic.\n\n**2. How mechanisms interact:**\n\n- **Equity**, **self-interest**, and **noise** jointly determine the actual proposed offer.\n- The proposer computes a \u201cfair\u201d proportion based on relative token contribution, then shifts that baseline up or down depending on their fairness sensitivity and a bias toward self-interest.\n\n**3. Mathematical form to capture these:**\n\n- Let\u2019s anchor predictions on the \u201cproportional equity\u201d offer, i.e., if proposer contributed X% of tokens, they would \u201cfairly\u201d expect X% of the pot.\n    - E.g., proportional_share_self = token_self/(token_self + token_opp)\n- Then, model deviations from fairness as a linear shift (bias toward greediness/self-interest).\n- Optionally, allow for a \u201ccompression\u201d or \u201cslope\u201d parameter to represent overall fairness sensitivity, controlling whether participants consistently \u201cundergive\u201d or \u201covergive\u201d independent of the fair value.\n- Add Gaussian noise to account for scatter in responses.\n\n**4. Parameters needed and identifiability:**\n\n- **fairness_weight:** How strongly proposer aligns with proportional fairness (should be 0\u20132, with 1 = perfect proportional).\n- **self_bias:** A constant tendency to offer less or more than fair share (can be negative or positive, but is usually negative).\n- **noise_std:** Standard deviation of response noise (must be strictly >0).\n- Here, fairness_weight and self_bias are not directly redundant (one is slope/sensitivity, other is baseline shift), but including both a slope and intercept is the standard in regression-type models. For parsimony, do not include further higher-order terms.\n\n**5. Mapping to observable behavior:**\n\n- Given token_self and token_opp (for that trial), we compute proportional fair offer (as percent).\n- Model computes proposed_perc as\n    - proposed_perc = fairness_weight \u00d7 proportional_share_opp + self_bias + noise\n    - Where proportional_share_opp = token_opp/(token_self + token_opp)*100 (since proposed_perc is percent offered to other).\n- Clamp output to valid percent [0, 100].\n\n**6. Variables:**\n\n- All variables, including tokens and combined_earning, must be entered as described above.\n\n**7. Covariance consideration:**\n- Having both a slope (fairness_weight) and intercept (self_bias) parameter is justified and commonly used, as long as parameter recovery is validated and the covariance is checked.\n\n**8. Final Decision:**\n- Use linear model as above, three learnable parameters:\n    - fairness_weight (0, 2)\n    - self_bias (-100, 100)\n    - noise_std (0.1, 50)\n- Utility function not directly needed since output is percent prediction (not binary choice), but model\u2019s error can be turned negative (\u201cutility\u201d defined as negative squared error).\n\n---\n\n**MODEL:**\n\n<MODEL>\nproposed_perc = fairness_weight * (token_opp / (token_self + token_opp)) * 100 + self_bias + Normal(0, noise_std)\n</MODEL>\n\n---\n\n**VARIABLES:**\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"proposed_perc\": {\n      \"description\": \"Predicted percentage of the pot offered to the opponent by the participant (proposer) on trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Scaling parameter for proportional fairness; 1.0 means perfect proportional fairness, >1 exaggerates, <1 underplays\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 2.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.0,\n          \"high\": 2.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"self_bias\": {\n      \"description\": \"Intercept term; overall shift in offer percent independent of fairness calculation (positive = more generous, negative = more selfish)\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -100.0,\n          \"high\": 100.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"noise_std\": {\n      \"description\": \"Standard deviation of Gaussian noise added to offer percent (captures response variability)\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 50.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.1,\n          \"high\": 50.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by opponent (contribution to pot)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant (contribution to pot)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n---\n\n<target_variable>proposed_perc</target_variable>\n\n---\n\n<SUMMARY>\nA proportional fairness model for proposer behavior in resource allocation. The predicted offer (as percent to opponent) linearly combines the opponent\u2019s proportional contribution with an individual fairness sensitivity and a self-bias parameter, capturing both norm-following and idiosyncratic generosity/selfishness. The model includes Gaussian noise to reflect decision variability.\n</SUMMARY>",
  "prediction_type": "numerical_variable_estimation",
  "current_model": "Specification: proposed_perc = fairness_weight * (token_opp / (token_self + token_opp)) * 100 + self_bias + Normal(0, noise_std)\nSummary: A proportional fairness model for proposer behavior in resource allocation. The predicted offer (as percent to opponent) linearly combines the opponent\u2019s proportional contribution with an individual fairness sensitivity and a self-bias parameter, capturing both norm-following and idiosyncratic generosity/selfishness. The model includes Gaussian noise to reflect decision variability.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, fairness_weight=1.0, self_bias=0.0, noise_std=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        if (token_self + token_opp) == 0:\n            fairness_component = 0.0  # Avoid division by zero if both are zero\n        else:\n            fairness_component = fairness_weight * (token_opp / (token_self + token_opp)) * 100\n\n        # Generate Gaussian noise using Box-Muller transform\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        noise = noise_std * N\n\n        proposed_perc = fairness_component + self_bias + noise\n\n        # Clamp the proposed percentage to be within the valid range [0, 100]\n        proposed_perc = max(0.0, min(100.0, proposed_perc))\n        model_predictions.append(proposed_perc)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "group_parameter_averages": {
    "Control": {
      "fairness_weight": 0.9984149607969469,
      "self_bias": -8.405770814096208,
      "noise_std": 22.89877047151067
    },
    "Cocaine": {
      "fairness_weight": 0.8923282778844397,
      "self_bias": -11.324309337631105,
      "noise_std": 26.78436968610759
    }
  },
  "fitting_results": [
    {
      "fairness_weight": 1.2246673687423235,
      "self_bias": -13.412560728372938,
      "noise_std": 45.02952893623734,
      "success": true,
      "mse": 1254.833197950184,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9558791786262926,
      "self_bias": 0.46112042233408385,
      "noise_std": 32.75876579883957,
      "success": true,
      "mse": 970.1651610677785,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.5027912797091574,
      "self_bias": -52.53248586133794,
      "noise_std": 3.847067383746068,
      "success": true,
      "mse": 290.70958945996136,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.9407304830349656,
      "self_bias": 92.95293436139707,
      "noise_std": 24.661482074225045,
      "success": true,
      "mse": 2500.0,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.658732200631154,
      "self_bias": -53.628972573830254,
      "noise_std": 15.70600987581037,
      "success": true,
      "mse": 604.1910700554688,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9654164372436823,
      "self_bias": -28.588291671710863,
      "noise_std": 3.359130858318183,
      "success": true,
      "mse": 359.62376950065106,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5090679661939297,
      "self_bias": -61.773644184644404,
      "noise_std": 41.65305191900271,
      "success": true,
      "mse": 2214.7599351109507,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.2692931858160332,
      "self_bias": -87.55665988563058,
      "noise_std": 39.53809772806351,
      "success": true,
      "mse": 2073.3333333333335,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.8846767941163072,
      "self_bias": 36.966003421898456,
      "noise_std": 44.10036799770675,
      "success": true,
      "mse": 1516.3738106956657,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.2069473790324399,
      "self_bias": 80.02265249496277,
      "noise_std": 25.787415465371836,
      "success": true,
      "mse": 2771.787272424963,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9568812464880908,
      "self_bias": -38.173985564323615,
      "noise_std": 44.494990299336926,
      "success": true,
      "mse": 1702.0524054755647,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6653454968650407,
      "self_bias": -13.004369472981494,
      "noise_std": 35.979045451503445,
      "success": true,
      "mse": 1585.8444624536833,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5013260645672873,
      "self_bias": 15.178614380625923,
      "noise_std": 23.267859969035587,
      "success": true,
      "mse": 618.078746676883,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.8073489913427716,
      "self_bias": -10.335547408407745,
      "noise_std": 17.974659127305646,
      "success": true,
      "mse": 1095.4084278177043,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.573763479246601,
      "self_bias": 77.14735234559335,
      "noise_std": 19.10560870498473,
      "success": true,
      "mse": 2175.6654189510896,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.2856773140957345,
      "self_bias": 70.5562036750272,
      "noise_std": 9.013417397959769,
      "success": true,
      "mse": 2866.6666666666665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.3055087467920794,
      "self_bias": -2.4530508780483427,
      "noise_std": 23.104925031754274,
      "success": true,
      "mse": 876.3559955908269,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.02040141840648511,
      "self_bias": 67.61596903264258,
      "noise_std": 19.2862958940896,
      "success": true,
      "mse": 900.7223442750577,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.1191830296698335,
      "self_bias": -90.68302089263082,
      "noise_std": 29.544254537148536,
      "success": true,
      "mse": 2000.0,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.22733507020173546,
      "self_bias": 55.20344935221944,
      "noise_std": 18.470079811039906,
      "success": true,
      "mse": 639.5657858716844,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7168609966854389,
      "self_bias": -38.31429146312305,
      "noise_std": 2.029638629440095,
      "success": true,
      "mse": 819.6635956891697,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.1104253502655154,
      "self_bias": 4.063238268783893,
      "noise_std": 21.981259621703675,
      "success": true,
      "mse": 889.5249860931352,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.8559857462226024,
      "self_bias": -17.46175256414836,
      "noise_std": 18.802723406289285,
      "success": true,
      "mse": 410.62941571534867,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.996973956559765,
      "self_bias": -48.07519564864957,
      "noise_std": 16.270740440072956,
      "success": true,
      "mse": 879.3296639270629,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.856948705427532,
      "self_bias": -65.50916674145265,
      "noise_std": 16.49402952013719,
      "success": true,
      "mse": 715.6525620683682,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.695443739149952,
      "self_bias": 46.4424333988303,
      "noise_std": 9.418878140813732,
      "success": true,
      "mse": 2866.6666666666665,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.1063426969935484,
      "self_bias": -28.38969269703284,
      "noise_std": 12.952255170522164,
      "success": true,
      "mse": 395.4917096719435,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.03857182713434826,
      "self_bias": -71.82816265261619,
      "noise_std": 2.8959060131193293,
      "success": true,
      "mse": 2106.6666666666665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.0298813691211346,
      "self_bias": -10.874756795972859,
      "noise_std": 15.928273560329705,
      "success": true,
      "mse": 466.1937482094248,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.677099645092786,
      "self_bias": -89.93951045748348,
      "noise_std": 7.719795380082982,
      "success": true,
      "mse": 793.3333333333334,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.6445010236072746,
      "self_bias": -44.39254666538668,
      "noise_std": 7.306227077530135,
      "success": true,
      "mse": 331.51430479686786,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.9821027683256178,
      "self_bias": -26.949260714600737,
      "noise_std": 16.471502251506212,
      "success": true,
      "mse": 1316.6876970575568,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9790557434160472,
      "self_bias": -23.067973733436478,
      "noise_std": 38.653723330589465,
      "success": true,
      "mse": 1588.8756490020257,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.279414679674515,
      "self_bias": -50.867479563900254,
      "noise_std": 34.6485862889749,
      "success": true,
      "mse": 1210.5697269186737,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.1477097995233771,
      "self_bias": -31.767990615611367,
      "noise_std": 5.037372135616245,
      "success": true,
      "mse": 264.9526612589934,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4465319895378484,
      "self_bias": -36.09243845749802,
      "noise_std": 6.677043859455589,
      "success": true,
      "mse": 913.3333333333334,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9451882947758108,
      "self_bias": 15.102174136505708,
      "noise_std": 32.58175504675744,
      "success": true,
      "mse": 1130.790347237298,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.43924154749201755,
      "self_bias": 73.62737302659181,
      "noise_std": 40.338265316757756,
      "success": true,
      "mse": 1931.8886572249382,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.0803159175960508,
      "self_bias": 93.89041379378354,
      "noise_std": 49.63117634722198,
      "success": true,
      "mse": 3796.759214181294,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.423049373264643,
      "self_bias": -37.29898325819956,
      "noise_std": 48.829526992405874,
      "success": true,
      "mse": 912.2522527708886,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9073494141933246,
      "self_bias": -11.25005765867688,
      "noise_std": 24.19026984701017,
      "success": true,
      "mse": 528.529990617721,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.6329668237325907,
      "self_bias": -3.719106054721305,
      "noise_std": 0.3904110541294521,
      "success": true,
      "mse": 1419.7209853328225,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3589087756550344,
      "self_bias": -2.737122252903822,
      "noise_std": 38.71571658301269,
      "success": true,
      "mse": 1763.8131369624527,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.3317802444841735,
      "self_bias": -0.7857186344744699,
      "noise_std": 27.8688940151353,
      "success": true,
      "mse": 2689.7066453687653,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7133852057590551,
      "self_bias": 13.378576303471842,
      "noise_std": 33.10231214650588,
      "success": true,
      "mse": 1141.3049710688695,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6365638259463677,
      "self_bias": -40.35611439070235,
      "noise_std": 27.33048638173507,
      "success": true,
      "mse": 501.779140298675,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9486302311108304,
      "self_bias": 23.296971682658445,
      "noise_std": 26.191286427423346,
      "success": true,
      "mse": 1711.0876941531492,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9389600500828708,
      "self_bias": -18.971495156732303,
      "noise_std": 26.414110666904403,
      "success": true,
      "mse": 507.33815475570657,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.4462541573955532,
      "self_bias": -10.13121052953588,
      "noise_std": 22.29872855892668,
      "success": true,
      "mse": 959.0738142439499,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7424268741416644,
      "self_bias": -2.4066242118273897,
      "noise_std": 24.040197011530292,
      "success": true,
      "mse": 813.718897952448,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.1648539329929044,
      "self_bias": -84.22559368876587,
      "noise_std": 34.383271328397456,
      "success": true,
      "mse": 796.9029805650708,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7166615016636555,
      "self_bias": 13.471531825561405,
      "noise_std": 33.07552042691873,
      "success": true,
      "mse": 1443.3809539842691,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.6297901817991922,
      "self_bias": 77.08302802403821,
      "noise_std": 29.828468972932967,
      "success": true,
      "mse": 3440.0,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4585953747371718,
      "self_bias": -76.06470268199476,
      "noise_std": 29.507699127737727,
      "success": true,
      "mse": 653.3333333333334,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.335698744357484,
      "self_bias": -72.60576307584635,
      "noise_std": 22.546272841561255,
      "success": true,
      "mse": 1846.5048208145888,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9161559839329309,
      "self_bias": -14.25625736743148,
      "noise_std": 2.0764767098701733,
      "success": true,
      "mse": 310.18537492000917,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.7373713480453712,
      "self_bias": -42.976220533714,
      "noise_std": 12.017479352202285,
      "success": true,
      "mse": 687.5557045545426,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5018649121441885,
      "self_bias": -42.875497419968845,
      "noise_std": 35.62264587056859,
      "success": true,
      "mse": 966.7785075476263,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.018236234672317,
      "self_bias": -18.44577416734565,
      "noise_std": 20.615802703062773,
      "success": true,
      "mse": 758.483187306081,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.3847921982499989,
      "self_bias": -11.430013199053402,
      "noise_std": 12.30412908687066,
      "success": true,
      "mse": 799.9349720964217,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.353109630253592,
      "self_bias": -52.840697516948524,
      "noise_std": 4.126457469399545,
      "success": true,
      "mse": 825.0701779398808,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5012674570167607,
      "self_bias": -33.36175092845294,
      "noise_std": 44.68873161739715,
      "success": true,
      "mse": 1621.7819779813901,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.09738319141114385,
      "self_bias": 50.75069146467694,
      "noise_std": 12.58372894184297,
      "success": true,
      "mse": 633.6878908349735,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.2370904531237317,
      "self_bias": -91.6860138595758,
      "noise_std": 48.30699880836218,
      "success": true,
      "mse": 752.749500615803,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4086418087003419,
      "self_bias": 39.451628300183756,
      "noise_std": 43.089862157559196,
      "success": true,
      "mse": 1891.0113420971607,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.811458883840109,
      "self_bias": 19.48060438150632,
      "noise_std": 45.40002396146738,
      "success": true,
      "mse": 1882.332899278165,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.6333153556517688,
      "self_bias": -48.49197106806406,
      "noise_std": 33.1391654562136,
      "success": true,
      "mse": 1043.3544382728173,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.1110365127095685,
      "self_bias": -32.81290321837275,
      "noise_std": 33.71476271057196,
      "success": true,
      "mse": 1076.0898940113516,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.749137914369795,
      "self_bias": 7.52804005415188,
      "noise_std": 35.887409662567975,
      "success": true,
      "mse": 1230.677192247827,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6569803884804908,
      "self_bias": -96.71844398804778,
      "noise_std": 18.14430041055616,
      "success": true,
      "mse": 673.3333333333334,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.8251252400317117,
      "self_bias": -40.35209795895464,
      "noise_std": 1.607557604805191,
      "success": true,
      "mse": 689.1677684205538,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.8860073678103236,
      "self_bias": 34.68775925827985,
      "noise_std": 24.829492263373844,
      "success": true,
      "mse": 1865.412245386686,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.036005906510229,
      "self_bias": 32.50408028578696,
      "noise_std": 48.83130872014625,
      "success": true,
      "mse": 2363.2445991028626,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5329611309428894,
      "self_bias": 34.36538890164696,
      "noise_std": 22.114206240452944,
      "success": true,
      "mse": 452.2021850524843,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.20510965638019366,
      "self_bias": 10.004456749657631,
      "noise_std": 27.514278653954253,
      "success": true,
      "mse": 502.4613292184665,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.526822737546464,
      "self_bias": -33.621648496744214,
      "noise_std": 40.80357328893309,
      "success": true,
      "mse": 775.9496496577508,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7783965575547405,
      "self_bias": -21.486293577276346,
      "noise_std": 3.4078935145551315,
      "success": true,
      "mse": 251.30559125484282,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.1791755704258374,
      "self_bias": -53.42461471496175,
      "noise_std": 36.963948012245815,
      "success": true,
      "mse": 748.9271880876706,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.547729043137933,
      "self_bias": 23.77659989838442,
      "noise_std": 39.46777229512793,
      "success": true,
      "mse": 1260.987636969762,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9385326560228741,
      "self_bias": -22.040683678235848,
      "noise_std": 8.31420631053874,
      "success": true,
      "mse": 948.5851152240423,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.30070256611017776,
      "self_bias": -9.092767205152533,
      "noise_std": 25.346045647796718,
      "success": true,
      "mse": 983.5062620205259,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9009111279918034,
      "self_bias": -3.369453982742096,
      "noise_std": 10.413408867602124,
      "success": true,
      "mse": 982.7182416707745,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5192611505635935,
      "self_bias": 6.715436323756382,
      "noise_std": 28.729780995937894,
      "success": true,
      "mse": 896.2890974849183,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3930908841602832,
      "self_bias": -52.273988817038266,
      "noise_std": 39.98737952384575,
      "success": true,
      "mse": 2242.903427163503,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.2525926289932615,
      "self_bias": 56.10325869119752,
      "noise_std": 10.997312127648396,
      "success": true,
      "mse": 1684.4700986310943,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6945630017792255,
      "self_bias": 39.6542512409178,
      "noise_std": 18.296998607647225,
      "success": true,
      "mse": 821.6806443782694,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.1227550346624549,
      "self_bias": 61.31385944629004,
      "noise_std": 28.90206045900568,
      "success": true,
      "mse": 4704.465912740689,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.9124243703489308,
      "self_bias": -98.45133579501956,
      "noise_std": 15.356540637275868,
      "success": true,
      "mse": 1469.0756295967528,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7602314303631653,
      "self_bias": 95.66679021774779,
      "noise_std": 26.53379050207651,
      "success": true,
      "mse": 6034.427451569335,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7381118910980239,
      "self_bias": -3.375162100909802,
      "noise_std": 46.97119377698608,
      "success": true,
      "mse": 1593.1560211117771,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.5998047889459568,
      "self_bias": -53.86898929231754,
      "noise_std": 41.95577405898703,
      "success": true,
      "mse": 1380.0684070694347,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    }
  ],
  "recovery_warnings": [
    "Error in iteration 1: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 6: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 16: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 84: Error in parameter fitting: All optimization attempts failed. Errors: []"
  ],
  "parameter_recovery": {
    "correlations": {
      "fairness_weight": {
        "r": -0.01693443805713056,
        "p": 0.8699191800484396
      },
      "self_bias": {
        "r": 0.47940364121601775,
        "p": 7.746468312960219e-07
      },
      "noise_std": {
        "r": 0.11412371757321899,
        "p": 0.2682274874557595
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 512.3754642394027,
  "bic_Control": 511.9910245535157,
  "bic_Cocaine": 512.7198581246765,
  "bic_results": {
    "average_bic": 512.3754642394027,
    "individual_bics": [
      520.399861854418,
      507.27798991846106,
      445.81577180450483,
      555.5535538387204,
      483.1256222271576,
      456.66518569769386,
      549.375071338505,
      546.0097650353705,
      530.0551400369951,
      560.8168356916439,
      535.9463023435093,
      532.339696029109,
      484.28461671357087,
      513.4702181585295,
      548.4667889455495,
      562.5333721572975,
      502.0915994832963,
      503.4902566391799,
      544.1732327216959,
      486.02747109758866,
      498.6808016381502,
      502.85227471951606,
      463.4294555691623,
      502.26436073967244,
      491.7601421198123,
      562.5333721572975,
      461.51382837787077,
      546.823179407162,
      469.9018744218345,
      497.01562466291756,
      452.51442626646957,
      522.8538089040117,
      532.4370844951874,
      518.5683724849912,
      441.0843171218329,
      504.19935373146393,
      515.0914838525315,
      542.4061297811148,
      576.8642676018967,
      504.13895106883416,
      476.30228435418627,
      526.6962050314629,
      537.7641055609993,
      559.283765342074,
      515.5635147917125,
      473.6533705142029,
      536.2163180976205,
      474.2152726966696,
      506.6915774237828,
      498.3095708647097,
      497.2445872554619,
      527.5391270756933,
      571.8317715537893,
      487.1136679264287,
      540.1007493838366,
      449.1228825059792,
      489.7174926893647,
      507.0996476069808,
      494.7245595593348,
      497.43825969876724,
      499.01609807626016,
      533.4825285997891,
      485.5565912063032,
      494.33756498642526,
      541.3154276804545,
      541.0808339959846,
      510.9872146599876,
      512.5627606595162,
      519.408520127989,
      488.6514728731338,
      489.8369288671531,
      540.6203121735174,
      552.6845372657025,
      468.3478062709823,
      473.7226599748791,
      495.88567659948956,
      438.3873616599208,
      494.07793738296624,
      520.6493844052771,
      506.1307549076166,
      507.974531534243,
      507.9336521332248,
      503.2386210182507,
      550.0190576825877,
      535.416729186962,
      498.8061495480125,
      587.7968513532767,
      528.4390288724692,
      600.4942564281915,
      532.5742918720448,
      525.2515129954551
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        520.399861854418,
        507.27798991846106,
        445.81577180450483,
        555.5535538387204,
        483.1256222271576,
        456.66518569769386,
        549.375071338505,
        546.0097650353705,
        530.0551400369951,
        560.8168356916439,
        535.9463023435093,
        532.339696029109,
        484.28461671357087,
        513.4702181585295,
        548.4667889455495,
        562.5333721572975,
        502.0915994832963,
        503.4902566391799,
        544.1732327216959,
        486.02747109758866,
        498.6808016381502,
        502.85227471951606,
        463.4294555691623,
        502.26436073967244,
        491.7601421198123,
        562.5333721572975,
        461.51382837787077,
        546.823179407162,
        469.9018744218345,
        497.01562466291756,
        452.51442626646957,
        522.8538089040117,
        532.4370844951874,
        518.5683724849912,
        441.0843171218329,
        504.19935373146393,
        515.0914838525315,
        542.4061297811148,
        576.8642676018967,
        504.13895106883416,
        476.30228435418627,
        526.6962050314629,
        537.7641055609993
      ],
      "Cocaine": [
        559.283765342074,
        515.5635147917125,
        473.6533705142029,
        536.2163180976205,
        474.2152726966696,
        506.6915774237828,
        498.3095708647097,
        497.2445872554619,
        527.5391270756933,
        571.8317715537893,
        487.1136679264287,
        540.1007493838366,
        449.1228825059792,
        489.7174926893647,
        507.0996476069808,
        494.7245595593348,
        497.43825969876724,
        499.01609807626016,
        533.4825285997891,
        485.5565912063032,
        494.33756498642526,
        541.3154276804545,
        541.0808339959846,
        510.9872146599876,
        512.5627606595162,
        519.408520127989,
        488.6514728731338,
        489.8369288671531,
        540.6203121735174,
        552.6845372657025,
        468.3478062709823,
        473.7226599748791,
        495.88567659948956,
        438.3873616599208,
        494.07793738296624,
        520.6493844052771,
        506.1307549076166,
        507.974531534243,
        507.9336521332248,
        503.2386210182507,
        550.0190576825877,
        535.416729186962,
        498.8061495480125,
        587.7968513532767,
        528.4390288724692,
        600.4942564281915,
        532.5742918720448,
        525.2515129954551
      ]
    },
    "num_parameters": 3,
    "prediction_type": "numerical",
    "bic_formula": "BIC calculated from MSE using Gaussian error assumption"
  },
  "recovery_summary": "Parameter Recovery:\n- fairness_weight: r = -0.017\n- self_bias: r = 0.479\n- noise_std: r = 0.114",
  "previous_models": [
    "Specification: proposed_perc = fairness_weight * (token_opp / (token_self + token_opp)) * 100 + self_bias + Normal(0, noise_std)\nSummary: A proportional fairness model for proposer behavior in resource allocation. The predicted offer (as percent to opponent) linearly combines the opponent\u2019s proportional contribution with an individual fairness sensitivity and a self-bias parameter, capturing both norm-following and idiosyncratic generosity/selfishness. The model includes Gaussian noise to reflect decision variability.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation\nBIC: 512.3754642394027\n\nParameter Recovery:\n- fairness_weight: r = -0.017\n- self_bias: r = 0.479\n- noise_std: r = 0.114"
  ]
}