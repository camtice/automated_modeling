{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should directly predict a numerical value (not a binary choice). The model's predictions will be compared to actual values using mean squared error.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let me think this through step by step:\n\n### 1. Key Psychological Mechanisms\n\nWhen participants act as proposers in the ultimatum game, their offer (the proposed percentage to the opponent) is influenced by:\n\n- **Self/Other Merit**: The relative contribution of self vs opponent (from `token_self` and `token_opp`). People tend to think their own effort entitles them to a greater share.\n- **Fairness Norms**: Desire to appear fair or avoid rejection \u2014 typically tied to an equal split, but modulated by perceived merit.\n- **Sensitivity to Relative Contribution**: The participant could weigh their own versus the opponent\u2019s contribution.\n- **Inherent Generosity/Avarice**: Some baseline tendency to offer more or less, regardless of the above.\n- **Noise/Randomness**: Sometimes offers vary stochastically, not easily attributable to the above.\n\n### 2. Mechanism Interactions\n\n- The effect of fairness is modulated by the actual contributions. If both contribute equally, 50/50 may dominate; with unequal contributions, bias towards one\u2019s own work.\n- Baseline preference could be subject-specific but must avoid too much covariance with fairness weighting.\n- Offers ought to be capped in [0,100], so the model must map unconstrained utility to this interval.\n\n### 3. Mathematical Form\n\nA robust approach is to predict the proposed percentage (`proposed_perc`) as a function of the perceived 'merit' (the relative share of tokens found by each, e.g., token_opp / (token_self + token_opp)), with learnable parameters for:\n\n- **Intercept**: General giving/greediness not explained by merit.\n- **Bias to Equality**: Possibly a parameter that pulls toward 50 regardless of merit.\n- **Merit Sensitivity**: How much the participant shifts from equality according to merit.\n\nBut to keep parameters minimally covarying, combine bias and merit sensitivity simply.\n\nLet's define:\n\n- **Fair share to opponent**: `fair_perc_opp = token_opp / (token_opp + token_self)`\n- The participant\u2019s offer may deviate from this, e.g.,\n    - Offer = baseline + sensitivity \u00d7 (fair share for opponent - 0.5) + noise\n\nBut we should avoid redundant parameters, i.e., a baseline and an intercept anchored at 50% can be problematic.\n\nStill, a two-parameter model appears reasonable: \n- One parameter (`alpha`) that shifts toward or away from merit ratio, and\n- One parameter (`beta`) for baseline generosity.\n\nThe noise is not learnable, since we're predicting a mean not a sample; leave that to the error term in regression.\n\nOptionally, the model could squash via a sigmoid to restrict within [0,1], but since proposed_perc is naturally reported as [0,100], linearity (clipped) is okay if guaranteed to fit within bounds.\n\n### 4. Parameters Needed\n\n- **merit_weight** (`alpha`): How much the fair share, based on merit, influences the offer. Range: [0,2] is generous (0 = ignore merit; 1 = match; 2 = overreact).\n- **baseline_offer** (`beta`): Baseline generosity/greed, possibly as a percentage. Range: [0,100].\n- (Noise is not a parameter, just error).\n\n### 5. Model to Observable Behavior\n\nOur model predicts, at each proposer trial:\n- **Input**: token_self, token_opp\n- **Output**: proposed_perc (0 to 100)\n\n#### Put Together\n\nThe prediction is:\n\\[\nproposed\\_perc = \\beta + \\alpha \\times 100 \\times \\left(\\frac{token\\_opp}{token\\_self + token\\_opp} - 0.5\\right)\n\\]\nClipped to [0, 100] if desired.\n\n### 6. Final Model Structure\n\nThe above formula is straightforward, interpretable, and keeps parameter covariance low. Parameters have clear roles:\n- If `alpha = 0`, the offer is always at the baseline `beta`.\n- If `alpha = 1`, the offer fully tracks with fairness (relative merit).\n- If `alpha > 1` or negative, over- or undershoots.\n\n### MODEL SPECIFICATION\n\n<MODEL>\nproposed_perc_i = baseline_offer + merit_weight * 100 * (token_opp_i / (token_self_i + token_opp_i) - 0.5)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"proposed_perc_i\": {\n      \"description\": \"Predicted percentage (0 to 100) of the combined pot offered to the opponent on proposer trial i.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"baseline_offer\": {\n      \"description\": \"Baseline offer (in percent) independently of merit. Reflects inherent generosity or greediness.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"low\": 0, \"high\": 100}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"merit_weight\": {\n      \"description\": \"Weighting factor for the effect of relative contribution (merit) on offer. 0 = no merit sensitivity; 1 = proportional to merit; negative = react against merit. Generous bound.\",\n      \"range\": {\n        \"min\": -2,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"low\": -2, \"high\": 2}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp_i\": {\n      \"description\": \"Number of tokens found by the opponent on trial i.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self_i\": {\n      \"description\": \"Number of tokens found by the participant on trial i.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA linear merit-based proposer model for the ultimatum game: the predicted offer combines a baseline generosity parameter and a weighted adjustment based on the relative contributions of self and opponent. This parsimonious model involves just two learnable parameters\u2014one specifying baseline offer and one reflecting the participant\u2019s sensitivity to merit\u2014minimizing covariance for robust parameter recovery and interpretability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['baseline_offer', 'merit_weight']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                proposed_perc_i = baseline_offer + merit_weight * 100 * (token_opp_i / (token_self_i + token_opp_i) - 0.5)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"proposed_perc_i\": {\n      \"description\": \"Predicted percentage (0 to 100) of the combined pot offered to the opponent on proposer trial i.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"baseline_offer\": {\n      \"description\": \"Baseline offer (in percent) independently of merit. Reflects inherent generosity or greediness.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 100\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"merit_weight\": {\n      \"description\": \"Weighting factor for the effect of relative contribution (merit) on offer. 0 = no merit sensitivity; 1 = proportional to merit; negative = react against merit. Generous bound.\",\n      \"range\": {\n        \"min\": -2,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -2,\n          \"high\": 2\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp_i\": {\n      \"description\": \"Number of tokens found by the opponent on trial i.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self_i\": {\n      \"description\": \"Number of tokens found by the participant on trial i.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, baseline_offer=50, merit_weight=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp_i = trial.get(\"token_opp\", 0)\n        token_self_i = trial.get(\"token_self\", 0)\n\n        if token_self_i + token_opp_i == 0:\n            fairness = 0.5  # Avoid division by zero\n        else:\n            fairness = token_opp_i / (token_self_i + token_opp_i)\n\n        proposed_perc_i = baseline_offer + merit_weight * 100 * (fairness - 0.5)\n\n        model_predictions.append(proposed_perc_i)\n\n    return model_predictions\n```",
      "timestamp": 1744733019.397303
    }
  ],
  "learnable_parameters": {
    "baseline_offer": {
      "description": "Baseline offer (in percent) independently of merit. Reflects inherent generosity or greediness.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 100
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "merit_weight": {
      "description": "Weighting factor for the effect of relative contribution (merit) on offer. 0 = no merit sensitivity; 1 = proportional to merit; negative = react against merit. Generous bound.",
      "range": {
        "min": -2,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -2,
          "high": 2
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "proposed_perc_i = baseline_offer + merit_weight * 100 * (token_opp_i / (token_self_i + token_opp_i) - 0.5)",
  "variable_descriptions": {
    "proposed_perc_i": {
      "description": "Predicted percentage (0 to 100) of the combined pot offered to the opponent on proposer trial i.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "baseline_offer": {
      "description": "Baseline offer (in percent) independently of merit. Reflects inherent generosity or greediness.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 100
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "merit_weight": {
      "description": "Weighting factor for the effect of relative contribution (merit) on offer. 0 = no merit sensitivity; 1 = proportional to merit; negative = react against merit. Generous bound.",
      "range": {
        "min": -2,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -2,
          "high": 2
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "token_opp_i": {
      "description": "Number of tokens found by the opponent on trial i.",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self_i": {
      "description": "Number of tokens found by the participant on trial i.",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A linear merit-based proposer model for the ultimatum game: the predicted offer combines a baseline generosity parameter and a weighted adjustment based on the relative contributions of self and opponent. This parsimonious model involves just two learnable parameters\u2014one specifying baseline offer and one reflecting the participant\u2019s sensitivity to merit\u2014minimizing covariance for robust parameter recovery and interpretability.",
  "target_variable": "proposed_perc",
  "full_reasoning": "Let me think this through step by step:\n\n### 1. Key Psychological Mechanisms\n\nWhen participants act as proposers in the ultimatum game, their offer (the proposed percentage to the opponent) is influenced by:\n\n- **Self/Other Merit**: The relative contribution of self vs opponent (from `token_self` and `token_opp`). People tend to think their own effort entitles them to a greater share.\n- **Fairness Norms**: Desire to appear fair or avoid rejection \u2014 typically tied to an equal split, but modulated by perceived merit.\n- **Sensitivity to Relative Contribution**: The participant could weigh their own versus the opponent\u2019s contribution.\n- **Inherent Generosity/Avarice**: Some baseline tendency to offer more or less, regardless of the above.\n- **Noise/Randomness**: Sometimes offers vary stochastically, not easily attributable to the above.\n\n### 2. Mechanism Interactions\n\n- The effect of fairness is modulated by the actual contributions. If both contribute equally, 50/50 may dominate; with unequal contributions, bias towards one\u2019s own work.\n- Baseline preference could be subject-specific but must avoid too much covariance with fairness weighting.\n- Offers ought to be capped in [0,100], so the model must map unconstrained utility to this interval.\n\n### 3. Mathematical Form\n\nA robust approach is to predict the proposed percentage (`proposed_perc`) as a function of the perceived 'merit' (the relative share of tokens found by each, e.g., token_opp / (token_self + token_opp)), with learnable parameters for:\n\n- **Intercept**: General giving/greediness not explained by merit.\n- **Bias to Equality**: Possibly a parameter that pulls toward 50 regardless of merit.\n- **Merit Sensitivity**: How much the participant shifts from equality according to merit.\n\nBut to keep parameters minimally covarying, combine bias and merit sensitivity simply.\n\nLet's define:\n\n- **Fair share to opponent**: `fair_perc_opp = token_opp / (token_opp + token_self)`\n- The participant\u2019s offer may deviate from this, e.g.,\n    - Offer = baseline + sensitivity \u00d7 (fair share for opponent - 0.5) + noise\n\nBut we should avoid redundant parameters, i.e., a baseline and an intercept anchored at 50% can be problematic.\n\nStill, a two-parameter model appears reasonable: \n- One parameter (`alpha`) that shifts toward or away from merit ratio, and\n- One parameter (`beta`) for baseline generosity.\n\nThe noise is not learnable, since we're predicting a mean not a sample; leave that to the error term in regression.\n\nOptionally, the model could squash via a sigmoid to restrict within [0,1], but since proposed_perc is naturally reported as [0,100], linearity (clipped) is okay if guaranteed to fit within bounds.\n\n### 4. Parameters Needed\n\n- **merit_weight** (`alpha`): How much the fair share, based on merit, influences the offer. Range: [0,2] is generous (0 = ignore merit; 1 = match; 2 = overreact).\n- **baseline_offer** (`beta`): Baseline generosity/greed, possibly as a percentage. Range: [0,100].\n- (Noise is not a parameter, just error).\n\n### 5. Model to Observable Behavior\n\nOur model predicts, at each proposer trial:\n- **Input**: token_self, token_opp\n- **Output**: proposed_perc (0 to 100)\n\n#### Put Together\n\nThe prediction is:\n\\[\nproposed\\_perc = \\beta + \\alpha \\times 100 \\times \\left(\\frac{token\\_opp}{token\\_self + token\\_opp} - 0.5\\right)\n\\]\nClipped to [0, 100] if desired.\n\n### 6. Final Model Structure\n\nThe above formula is straightforward, interpretable, and keeps parameter covariance low. Parameters have clear roles:\n- If `alpha = 0`, the offer is always at the baseline `beta`.\n- If `alpha = 1`, the offer fully tracks with fairness (relative merit).\n- If `alpha > 1` or negative, over- or undershoots.\n\n### MODEL SPECIFICATION\n\n<MODEL>\nproposed_perc_i = baseline_offer + merit_weight * 100 * (token_opp_i / (token_self_i + token_opp_i) - 0.5)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"proposed_perc_i\": {\n      \"description\": \"Predicted percentage (0 to 100) of the combined pot offered to the opponent on proposer trial i.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"baseline_offer\": {\n      \"description\": \"Baseline offer (in percent) independently of merit. Reflects inherent generosity or greediness.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"low\": 0, \"high\": 100}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"merit_weight\": {\n      \"description\": \"Weighting factor for the effect of relative contribution (merit) on offer. 0 = no merit sensitivity; 1 = proportional to merit; negative = react against merit. Generous bound.\",\n      \"range\": {\n        \"min\": -2,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\"low\": -2, \"high\": 2}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp_i\": {\n      \"description\": \"Number of tokens found by the opponent on trial i.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self_i\": {\n      \"description\": \"Number of tokens found by the participant on trial i.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA linear merit-based proposer model for the ultimatum game: the predicted offer combines a baseline generosity parameter and a weighted adjustment based on the relative contributions of self and opponent. This parsimonious model involves just two learnable parameters\u2014one specifying baseline offer and one reflecting the participant\u2019s sensitivity to merit\u2014minimizing covariance for robust parameter recovery and interpretability.\n</SUMMARY>",
  "prediction_type": "numerical_variable_estimation",
  "current_model": "Specification: proposed_perc_i = baseline_offer + merit_weight * 100 * (token_opp_i / (token_self_i + token_opp_i) - 0.5)\nSummary: A linear merit-based proposer model for the ultimatum game: the predicted offer combines a baseline generosity parameter and a weighted adjustment based on the relative contributions of self and opponent. This parsimonious model involves just two learnable parameters\u2014one specifying baseline offer and one reflecting the participant\u2019s sensitivity to merit\u2014minimizing covariance for robust parameter recovery and interpretability.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, baseline_offer=50, merit_weight=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_opp_i = trial.get(\"token_opp\", 0)\n        token_self_i = trial.get(\"token_self\", 0)\n\n        if token_self_i + token_opp_i == 0:\n            fairness = 0.5  # Avoid division by zero\n        else:\n            fairness = token_opp_i / (token_self_i + token_opp_i)\n\n        proposed_perc_i = baseline_offer + merit_weight * 100 * (fairness - 0.5)\n\n        model_predictions.append(proposed_perc_i)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "group_parameter_averages": {
    "Control": {
      "baseline_offer": 41.56589153515605,
      "merit_weight": 0.2281843346973125
    },
    "Cocaine": {
      "baseline_offer": 36.2083333022287,
      "merit_weight": 0.0679472427670006
    }
  },
  "fitting_results": [
    {
      "baseline_offer": 49.99999999605121,
      "merit_weight": -4.998768142472354e-09,
      "success": true,
      "mse": 4.050641321674384e-15,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 44.0000001027101,
      "merit_weight": 0.5229357749934572,
      "success": true,
      "mse": 19.840978593272173,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 36.6666666266169,
      "merit_weight": 0.7293577928302906,
      "success": true,
      "mse": 16.32008154943935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 49.999999994999804,
      "merit_weight": -5.000003057123177e-09,
      "success": true,
      "mse": 4.0620438317756385e-15,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 43.99999987600363,
      "merit_weight": 0.59174311017782,
      "success": true,
      "mse": 20.788990825688092,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 36.00000006171771,
      "merit_weight": 0.6605504556991563,
      "success": true,
      "mse": 46.874617737003064,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 49.999999995000394,
      "merit_weight": -4.999998096174289e-09,
      "success": true,
      "mse": 4.062030323684611e-15,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 44.6666667326965,
      "merit_weight": 0.24770641829513093,
      "success": true,
      "mse": 68.31396534148827,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 49.99999999500184,
      "merit_weight": -4.9999117133289155e-09,
      "success": true,
      "mse": 4.061876061462689e-15,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 46.666666748139136,
      "merit_weight": 0.24770641704847807,
      "success": true,
      "mse": 12.313965341488288,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 47.333333262790255,
      "merit_weight": 0.247706418105179,
      "success": true,
      "mse": 9.647298674821618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 49.99999999500006,
      "merit_weight": -5.000001814548098e-09,
      "success": true,
      "mse": 4.062039189527373e-15,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 41.33333330391494,
      "merit_weight": 0.4954128397616269,
      "success": true,
      "mse": 11.922528032619784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 47.333333471879726,
      "merit_weight": 0.13761467277008507,
      "success": true,
      "mse": 29.830784913353746,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 49.99999999500003,
      "merit_weight": -4.9999997760838775e-09,
      "success": true,
      "mse": 4.062036663150132e-15,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 46.66666676363993,
      "merit_weight": 0.27522935396264325,
      "success": true,
      "mse": 9.98980632008156,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 49.999999994997275,
      "merit_weight": -4.9998872378395125e-09,
      "success": true,
      "mse": 4.0618825322185214e-15,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 42.666666450894525,
      "merit_weight": 0.11009173841808728,
      "success": true,
      "mse": 30.931702344546427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 44.00000022712423,
      "merit_weight": 0.1376146780029991,
      "success": true,
      "mse": 60.94189602446488,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 49.99999999500006,
      "merit_weight": -5.0000005645301275e-09,
      "success": true,
      "mse": 4.06203710526824e-15,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 31.3333338152509,
      "merit_weight": 0.13761467545825068,
      "success": true,
      "mse": 21.830784913353956,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 36.00000018620134,
      "merit_weight": 0.3853210968724621,
      "success": true,
      "mse": 66.69113149847098,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 29.333332779259603,
      "merit_weight": 0.2477064132184789,
      "success": true,
      "mse": 62.980632008155276,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 44.66666650473363,
      "merit_weight": 0.1376146721420457,
      "success": true,
      "mse": 21.830784913353753,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 44.66666656859992,
      "merit_weight": 0.5229357751398476,
      "success": true,
      "mse": 20.72986748216106,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 46.66666680091574,
      "merit_weight": 0.3165137574878458,
      "success": true,
      "mse": 6.044852191641197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 19.999999991092537,
      "merit_weight": -4.95900578488883e-09,
      "success": true,
      "mse": 4.050453239463642e-15,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 45.33333341472729,
      "merit_weight": 0.45412843339714637,
      "success": true,
      "mse": 18.25280326197759,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 40.66666703337317,
      "merit_weight": 0.3577981638274412,
      "success": true,
      "mse": 132.21610601427128,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 25.999999758159753,
      "merit_weight": 0.13761468756545125,
      "success": true,
      "mse": 114.27522935779824,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 43.333333603460936,
      "merit_weight": 0.5229357750215061,
      "success": true,
      "mse": 31.3965341488278,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 49.99999999499712,
      "merit_weight": -5.000066465086025e-09,
      "success": true,
      "mse": 4.062173238480924e-15,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 30.666666455925817,
      "merit_weight": -0.16513762758680214,
      "success": true,
      "mse": 148.48521916411832,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 39.3333337085958,
      "merit_weight": 0.34403670620733656,
      "success": true,
      "mse": 133.77573904179422,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 23.333332740717395,
      "merit_weight": 0.06880732476082807,
      "success": true,
      "mse": 74.79102956167215,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 29.999999992503433,
      "merit_weight": -0.06880734511561,
      "success": true,
      "mse": 12.568807339449544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 43.33333341678057,
      "merit_weight": 0.3853210949828135,
      "success": true,
      "mse": 24.913353720693184,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 46.666666595884934,
      "merit_weight": 0.2064220143185017,
      "success": true,
      "mse": 15.3414882772681,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 36.00000038225154,
      "merit_weight": 0.38532106943054173,
      "success": true,
      "mse": 66.69113149847125,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 38.66666708447834,
      "merit_weight": 0.35779816039486306,
      "success": true,
      "mse": 17.549439347604665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 28.00000170487956,
      "merit_weight": 0.13761467956807935,
      "success": true,
      "mse": 132.94189602446775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 41.99999990685773,
      "merit_weight": 0.5366972496603892,
      "success": true,
      "mse": 76.15290519877676,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 49.999999982884646,
      "merit_weight": -4.874290535973082e-09,
      "success": true,
      "mse": 4.129526882270734e-15,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "baseline_offer": 19.999999995,
      "merit_weight": -5.0000000637133965e-09,
      "success": true,
      "mse": 4.062037030262881e-15,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 46.00000031398643,
      "merit_weight": -0.06880734606335333,
      "success": true,
      "mse": 63.23547400611631,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 22.00000038775149,
      "merit_weight": 1.0028309623032541e-08,
      "success": true,
      "mse": 56.000000000000156,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 35.33333347512595,
      "merit_weight": 0.17889907729090504,
      "success": true,
      "mse": 46.387359836901155,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 19.999999918236412,
      "merit_weight": -6.205546294272418e-09,
      "success": true,
      "mse": 1.2903743297385193e-14,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 47.99999999930869,
      "merit_weight": 0.20642201265389581,
      "success": true,
      "mse": 9.119266055045868,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 41.33333371595819,
      "merit_weight": -0.13761468701532045,
      "success": true,
      "mse": 168.49745158002054,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 31.33333305128997,
      "merit_weight": 0.110091736273475,
      "success": true,
      "mse": 116.2650356778798,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 22.666666396389548,
      "merit_weight": -3.195036298341558e-09,
      "success": true,
      "mse": 32.88888888888896,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 42.66666588372975,
      "merit_weight": 0.055045858682408716,
      "success": true,
      "mse": 152.3995922528039,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 23.99999964924124,
      "merit_weight": 0.13761467499836194,
      "success": true,
      "mse": 74.27522935779831,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 47.33333335550203,
      "merit_weight": 0.24770641759437395,
      "success": true,
      "mse": 9.647298674821615,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 43.99999897164966,
      "merit_weight": 0.1788990758690113,
      "success": true,
      "mse": 32.16513761467998,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 33.333333695393456,
      "merit_weight": 0.49541284057667856,
      "success": true,
      "mse": 115.9225280326199,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 34.6666670553314,
      "merit_weight": 0.0963302703487213,
      "success": true,
      "mse": 50.05708460754348,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 48.66666658648718,
      "merit_weight": -6.033718993733505e-09,
      "success": true,
      "mse": 24.8888888888889,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 42.66666635864078,
      "merit_weight": 0.39908254648467417,
      "success": true,
      "mse": 47.17023445463828,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 34.66666635612541,
      "merit_weight": -0.1513761372405229,
      "success": true,
      "mse": 141.18858307849143,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 44.00000078906134,
      "merit_weight": 0.316513733063254,
      "success": true,
      "mse": 74.48929663608638,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 36.00000076305843,
      "merit_weight": -0.08256881042859138,
      "success": true,
      "mse": 222.89908256880796,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 26.666666526937448,
      "merit_weight": -0.27522936148685884,
      "success": true,
      "mse": 129.98980632008156,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 39.33333372058163,
      "merit_weight": -0.04128440759819791,
      "success": true,
      "mse": 72.61365953109086,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 49.33333331186134,
      "merit_weight": 0.04128439864747676,
      "success": true,
      "mse": 5.946992864424062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 48.00000001664912,
      "merit_weight": 0.20642200944259828,
      "success": true,
      "mse": 49.119266055045856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 48.66666668846306,
      "merit_weight": -3.987269136065431e-09,
      "success": true,
      "mse": 24.888888888888893,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 29.99999853969669,
      "merit_weight": 0.4128440290879394,
      "success": true,
      "mse": 172.4770642201856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 24.666667253742915,
      "merit_weight": 0.38532109404708303,
      "success": true,
      "mse": 40.913353720693515,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 28.666666912755474,
      "merit_weight": 0.23394494739657648,
      "success": true,
      "mse": 96.05096839959234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 36.00000097880947,
      "merit_weight": 0.20642203405812223,
      "success": true,
      "mse": 217.11926605504684,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 33.99999978107854,
      "merit_weight": 0.412844038097253,
      "success": true,
      "mse": 89.81039755351686,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 49.333333417788126,
      "merit_weight": -0.06880734397101342,
      "success": true,
      "mse": 5.457696228338437,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 22.666667243559,
      "merit_weight": 0.06880733407508086,
      "success": true,
      "mse": 58.791029561672104,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 30.666666590222494,
      "merit_weight": 0.06880734010116037,
      "success": true,
      "mse": 32.1243628950051,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 23.333334405107102,
      "merit_weight": -0.1376146805041595,
      "success": true,
      "mse": 72.49745158002153,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 25.333333081183156,
      "merit_weight": -0.06880733305209712,
      "success": true,
      "mse": 117.45769622833852,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 48.66666704798239,
      "merit_weight": -4.987931986389672e-10,
      "success": true,
      "mse": 24.88888888888903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 48.00000000500723,
      "merit_weight": -0.0963302794594592,
      "success": true,
      "mse": 14.501529051987767,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 36.66666749339592,
      "merit_weight": 0.1788990778730392,
      "success": true,
      "mse": 150.38735983690182,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 21.99999968649734,
      "merit_weight": -9.917460592598725e-10,
      "success": true,
      "mse": 56.00000000000013,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 47.99999957448639,
      "merit_weight": 0.20642201425838336,
      "success": true,
      "mse": 22.452599388379397,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 49.333333293331165,
      "merit_weight": 0.0688073335778141,
      "success": true,
      "mse": 5.4576962283384365,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 35.99999934786293,
      "merit_weight": -0.45412845696121446,
      "success": true,
      "mse": 124.03058103975584,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 49.99999999500158,
      "merit_weight": -5.000025803444569e-09,
      "success": true,
      "mse": 4.062063208474998e-15,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 25.333331806929156,
      "merit_weight": -0.3302752434915452,
      "success": true,
      "mse": 87.27420998980871,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 45.99999989546849,
      "merit_weight": 0.30275228596156245,
      "success": true,
      "mse": 35.86544342507647,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 19.999999991797438,
      "merit_weight": -5.035966216523906e-09,
      "success": true,
      "mse": 4.162606883162821e-15,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 29.999998723273606,
      "merit_weight": 0.16513760718307496,
      "success": true,
      "mse": 128.9296636085643,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "baseline_offer": 42.66666646024131,
      "merit_weight": -0.20642202163476894,
      "success": true,
      "mse": 132.6748216106015,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "baseline_offer": {
        "r": 0.9999999999999999,
        "p": 0.0
      },
      "merit_weight": {
        "r": 1.0,
        "p": 0.0
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 35.38880150831909,
  "bic_Control": -147.26773148166373,
  "bic_Cocaine": 199.01861231184537,
  "bic_results": {
    "average_bic": 35.38880150831909,
    "individual_bics": [
      -1537.5395782878586,
      304.970602322123,
      295.0075953200205,
      -1537.3962155449208,
      307.3509831796245,
      348.81667444730806,
      -1537.3963851427432,
      368.02520668200765,
      -1537.3983219876416,
      280.6428162604209,
      268.19595690306113,
      -1537.396273829569,
      278.99529749595933,
      325.76796811665474,
      -1537.3963055489282,
      269.9752071120836,
      -1537.3982407423548,
      327.6162444662973,
      362.2013468406082,
      -1537.3962999980129,
      309.8447590597019,
      366.79905278731735,
      363.8795714371961,
      309.8447590597014,
      307.2057338793827,
      244.3549403060722,
      -1537.5419464105064,
      300.715633905391,
      401.70170693621697,
      394.2644830478445,
      328.3769546315368,
      -1537.3945908364933,
      407.6201380233923,
      402.29978689580156,
      372.64497721160205,
      281.6875066185696,
      316.5809832920539,
      291.8539829935199,
      366.7990527873176,
      298.71150382552935,
      401.98090185153904,
      373.5652863626956,
      -1536.5559094410623,
      -1537.3963009397257,
      364.085519156044,
      357.88831787981803,
      348.28375889772246,
      -1478.4488246724547,
      265.32523719812417,
      414.0683335540424,
      395.1448727910154,
      330.74526037870527,
      408.9471860071892,
      372.2920346265286,
      268.19595690306113,
      329.6104239981808,
      394.99440906850356,
      352.1667480158773,
      316.5308768527851,
      349.1372981051409,
      405.0503013880041,
      372.4388093855657,
      428.3380570016439,
      400.8356394097179,
      371.1381873014866,
      243.52255188630278,
      351.2022000867341,
      316.5308768527851,
      415.2588592483596,
      341.87966348886073,
      385.4042091941498,
      426.9981692538089,
      381.97812012057557,
      239.143746642587,
      360.3688351766861,
      329.54573191111325,
      371.0565035940697,
      395.6653717218756,
      316.5308768527854,
      288.9823405344582,
      408.26931423398423,
      357.888317879818,
      311.2771077034615,
      239.143746642587,
      398.4423176331806,
      -1537.3959722660811,
      380.5171867025985,
      335.1638685670134,
      -1536.1489963248255,
      400.4179992805434,
      401.8783420441693
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        -1537.5395782878586,
        304.970602322123,
        295.0075953200205,
        -1537.3962155449208,
        307.3509831796245,
        348.81667444730806,
        -1537.3963851427432,
        368.02520668200765,
        -1537.3983219876416,
        280.6428162604209,
        268.19595690306113,
        -1537.396273829569,
        278.99529749595933,
        325.76796811665474,
        -1537.3963055489282,
        269.9752071120836,
        -1537.3982407423548,
        327.6162444662973,
        362.2013468406082,
        -1537.3962999980129,
        309.8447590597019,
        366.79905278731735,
        363.8795714371961,
        309.8447590597014,
        307.2057338793827,
        244.3549403060722,
        -1537.5419464105064,
        300.715633905391,
        401.70170693621697,
        394.2644830478445,
        328.3769546315368,
        -1537.3945908364933,
        407.6201380233923,
        402.29978689580156,
        372.64497721160205,
        281.6875066185696,
        316.5809832920539,
        291.8539829935199,
        366.7990527873176,
        298.71150382552935,
        401.98090185153904,
        373.5652863626956,
        -1536.5559094410623
      ],
      "Cocaine": [
        -1537.3963009397257,
        364.085519156044,
        357.88831787981803,
        348.28375889772246,
        -1478.4488246724547,
        265.32523719812417,
        414.0683335540424,
        395.1448727910154,
        330.74526037870527,
        408.9471860071892,
        372.2920346265286,
        268.19595690306113,
        329.6104239981808,
        394.99440906850356,
        352.1667480158773,
        316.5308768527851,
        349.1372981051409,
        405.0503013880041,
        372.4388093855657,
        428.3380570016439,
        400.8356394097179,
        371.1381873014866,
        243.52255188630278,
        351.2022000867341,
        316.5308768527851,
        415.2588592483596,
        341.87966348886073,
        385.4042091941498,
        426.9981692538089,
        381.97812012057557,
        239.143746642587,
        360.3688351766861,
        329.54573191111325,
        371.0565035940697,
        395.6653717218756,
        316.5308768527854,
        288.9823405344582,
        408.26931423398423,
        357.888317879818,
        311.2771077034615,
        239.143746642587,
        398.4423176331806,
        -1537.3959722660811,
        380.5171867025985,
        335.1638685670134,
        -1536.1489963248255,
        400.4179992805434,
        401.8783420441693
      ]
    },
    "num_parameters": 2,
    "prediction_type": "numerical",
    "bic_formula": "BIC calculated from MSE using Gaussian error assumption"
  },
  "recovery_summary": "Parameter Recovery:\n- baseline_offer: r = 1.000\n- merit_weight: r = 1.000",
  "previous_models": [
    "Specification: proposed_perc_i = baseline_offer + merit_weight * 100 * (token_opp_i / (token_self_i + token_opp_i) - 0.5)\nSummary: A linear merit-based proposer model for the ultimatum game: the predicted offer combines a baseline generosity parameter and a weighted adjustment based on the relative contributions of self and opponent. This parsimonious model involves just two learnable parameters\u2014one specifying baseline offer and one reflecting the participant\u2019s sensitivity to merit\u2014minimizing covariance for robust parameter recovery and interpretability.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation\nBIC: 35.38880150831909\n\nParameter Recovery:\n- baseline_offer: r = 1.000\n- merit_weight: r = 1.000"
  ]
}