{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should directly predict a numerical value (not a binary choice). The model's predictions will be compared to actual values using mean squared error.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let's proceed step by step:\n\n**1. Key Psychological Mechanisms Involved**\n- **Fairness Norms:** People are highly sensitive to fair vs. unfair offers, but \"fairness\" depends on how much each contributed\u2014not just equality.\n- **Self-Interest (Greed):** Proposers naturally wish to maximize their own share.\n- **Equity Sensitivity:** Proposers may adjust their offers based on their and their opponent's relative contributions to the total pot, expecting this to influence acceptance.\n- **Noise/Individual Variation:** Some randomness is present in human behavior due to unexplained or situational factors.\n\n**2. Interaction of Mechanisms**\n- One expects the proposer to consider both the *relative* contribution (how much they vs. the other discovered) and their own self-interest.\n- They may anchor around \"proportional fairness\" (offer a share to the other player that matches that other's proportion of the combined earning).\n- They may shift toward self-interest (offering less than proportional fairness).\n- Some random variability (noise) is likely present.\n\n**3. Mathematical Formulation**\nA parsimonious model should capture:\n1. **Propensity to offer the \"equitable\" split**: the percentage corresponding to the opponent\u2019s *share of contributed tokens*. This is calculated as:  \n   fair_perc_opp = token_opp / (token_opp + token_self) * 100  \n2. **Self-serving bias parameter**: How much the proposer subtracts from this fair percentage: model as a *willingness to undercut* (bias toward self-interest).\n3. **Weighting**: How much do proposers weight fairness vs. self-interest (i.e., a parameter allowing some people to *over- or under-offer* relative to fairness).\n4. **Random Noise**: To capture residual variance (normally distributed).\n\nTo minimize high parameter covariance, it's wise to combine undercutting and weighting into a linear combination and keep the model with just one or two learnable parameters.\n\nSo, the simplest high-interpretability model:\nproposed_perc = baseline + fairness_weight * (fair_perc_opp - 50) + noise\n\nBut actually, setting the model to anchor explicitly on fairness contribution, and allowing a bias term for systematic under/offering, is even clearer:\nproposed_perc = bias + fairness_weight * fair_perc_opp + noise\n\nBut bias and fairness_weight could be highly covariant (if fairness_weight absorbs bias). To avoid this, it's principled to set:\nproposed_perc = fairness_weight * fair_perc_opp + bias + noise\n\nLet\u2019s define each:\n- **fair_perc_opp**: opponent's \"fair\" share in percentage, based on contributions only.\n- **fairness_weight**: How much the proposer is influenced by equitable fairness (from 0 to 2 \u2014 1: exactly proportional, 0: ignore fairness, 2: super-fair).\n- **bias**: General tendency to over- or under-offer, orthogonal to fairness (in practice, likely a small range: -30 to +30).\n- **noise (epsilon)**: Gaussian noise (for model fitting consistency, its variance can be fitted or fixed).\n\nTo minimize parameter collinearity and enhance recovery:\n- Let fairness_weight in [0, 2]\n- Let bias in [-30, 30]\n- Fix noise to standard deviation = 5 (for demonstration; optionally fit it).\n\n**Alternative\u2014Keep ONLY fairness_weight and NO bias?**\n- If we remove bias, then unfair behaviors (systematic low-balling) can only be explained by fairness_weight<1. Parametric recovery may suffer if actual behavior is an offset, so keeping both is preferable.\n\n**Mapping to Observed Behavior**\n- Only use proposer's trials (trial_role == 2)\n- Model predicts proposed_perc (the percentage offered to the opponent).\n\n**Summary of the Model**\n- **Predicts**: proposed_perc for each proposer's trial.\n- **Inputs**: token_opp and token_self, used to compute fair_perc_opp.\n- **Learnable Parameters:** fairness_weight and bias (minimal, interpretable, low collinearity).\n\n---\n\n**Model Specification:**\n\n<MODEL>\nproposed_perc = fairness_weight * fair_perc_opp + bias + epsilon\n\nfair_perc_opp = 100 * token_opp / (token_self + token_opp)\n\nepsilon ~ Normal(0, noise_sd)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"proposed_perc\": {\n      \"description\": \"Percentage of the total pot offered to the opponent by the participant on proposer trials\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant on current trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent on current trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_opp\": {\n      \"description\": \"The percentage share corresponding to the opponent's token contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Weight on the fairness/proportionality component; 1 means exactly matching opponent\u2019s share, 0 means fairness is ignored\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"bias\": {\n      \"description\": \"Participant's systematic tendency to deviate from proportionality in offers (positive: over-offer relative to fairness, negative: under-offer)\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Random noise for each trial, drawn independently from a normal distribution\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"parameters\": { \"mean\": 0, \"std\": 5 }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"noise_sd\": {\n      \"description\": \"Standard deviation of the Gaussian noise added to the model output\",\n      \"range\": {\n        \"min\": 0.0001,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA minimal linear equity model for proposer behavior, combining the effect of the opponent's proportional contribution to the pot (fairness) and a systematic proposer-specific bias. The model has two learnable parameters: a fairness weight (degree of influence of proportional fairness, [0,2]) and a bias (systematic offset, [-30,30]). The offer to the opponent is predicted as the sum of the fairness-based suggestion and the bias, with added Gaussian noise.\n</SUMMARY>\n"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['fairness_weight', 'bias']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                proposed_perc = fairness_weight * fair_perc_opp + bias + epsilon\n\nfair_perc_opp = 100 * token_opp / (token_self + token_opp)\n\nepsilon ~ Normal(0, noise_sd)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"proposed_perc\": {\n      \"description\": \"Percentage of the total pot offered to the opponent by the participant on proposer trials\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant on current trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent on current trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_opp\": {\n      \"description\": \"The percentage share corresponding to the opponent's token contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Weight on the fairness/proportionality component; 1 means exactly matching opponent\\u2019s share, 0 means fairness is ignored\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"bias\": {\n      \"description\": \"Participant's systematic tendency to deviate from proportionality in offers (positive: over-offer relative to fairness, negative: under-offer)\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Random noise for each trial, drawn independently from a normal distribution\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"parameters\": {\n          \"mean\": 0,\n          \"std\": 5\n        }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"noise_sd\": {\n      \"description\": \"Standard deviation of the Gaussian noise added to the model output\",\n      \"range\": {\n        \"min\": 0.0001,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "```python\nimport json\nimport math\nimport random\n\ndef simulate_model(trial_data, fairness_weight=1, bias=0):\n    model_predictions = []\n    noise_sd = 5 #fixed\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate fair_perc_opp\n        if (token_self + token_opp) == 0:\n            fair_perc_opp = 50  #Handle the case where both are zero. Can also set to 0.\n        else:\n            fair_perc_opp = 100 * token_opp / (token_self + token_opp)\n\n        #Generate Epsilon from Normal Distribution\n        u1 = random.random()\n        u2 = random.random()\n        epsilon = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2) * noise_sd  # Box-Muller transform\n\n        # Calculate proposed_perc\n        proposed_perc = fairness_weight * fair_perc_opp + bias + epsilon\n        model_predictions.append(proposed_perc)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"A\", \"trial_number\": 1, \"trial_type\": 2, \"trial_role\": 1, \"token_opp\": 50, \"token_self\": 50, \"combined_earning\": 100, \"split_opp\": 50.0, \"split_self\": 50.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 0.0, \"proposed_amount\": 0.0}, {\"ID\": 2, \"group\": \"A\", \"trial_number\": 2, \"trial_type\": 2, \"trial_role\": 2, \"token_opp\": 25, \"token_self\": 75, \"combined_earning\": 100, \"split_opp\": 25.0, \"split_self\": 75.0, \"splitperc_opp\": 25, \"splitperc_self\": 75, \"accept\": 1.0, \"accepted_amount\": 25.0, \"accepted_perc\": 25.0, \"proposed_perc\": 25.0, \"proposed_amount\": 25.0}, {\"ID\": 3, \"group\": \"A\", \"trial_number\": 3, \"trial_type\": 2, \"trial_role\": 1, \"token_opp\": 75, \"token_self\": 25, \"combined_earning\": 100, \"split_opp\": 75.0, \"split_self\": 25.0, \"splitperc_opp\": 75, \"splitperc_self\": 25, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 0.0, \"proposed_amount\": 0.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744733059.975141
    }
  ],
  "learnable_parameters": {
    "fairness_weight": {
      "description": "Weight on the fairness/proportionality component; 1 means exactly matching opponent\u2019s share, 0 means fairness is ignored",
      "range": {
        "min": 0,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "bias": {
      "description": "Participant's systematic tendency to deviate from proportionality in offers (positive: over-offer relative to fairness, negative: under-offer)",
      "range": {
        "min": -30,
        "max": 30,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "proposed_perc = fairness_weight * fair_perc_opp + bias + epsilon\n\nfair_perc_opp = 100 * token_opp / (token_self + token_opp)\n\nepsilon ~ Normal(0, noise_sd)",
  "variable_descriptions": {
    "proposed_perc": {
      "description": "Percentage of the total pot offered to the opponent by the participant on proposer trials",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by participant on current trial",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent on current trial",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "fair_perc_opp": {
      "description": "The percentage share corresponding to the opponent's token contribution",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fairness_weight": {
      "description": "Weight on the fairness/proportionality component; 1 means exactly matching opponent\u2019s share, 0 means fairness is ignored",
      "range": {
        "min": 0,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "bias": {
      "description": "Participant's systematic tendency to deviate from proportionality in offers (positive: over-offer relative to fairness, negative: under-offer)",
      "range": {
        "min": -30,
        "max": 30,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "epsilon": {
      "description": "Random noise for each trial, drawn independently from a normal distribution",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "normal",
        "parameters": {
          "mean": 0,
          "std": 5
        }
      },
      "learnable": false,
      "source": "calculated"
    },
    "noise_sd": {
      "description": "Standard deviation of the Gaussian noise added to the model output",
      "range": {
        "min": 0.0001,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    }
  },
  "model_summary": "A minimal linear equity model for proposer behavior, combining the effect of the opponent's proportional contribution to the pot (fairness) and a systematic proposer-specific bias. The model has two learnable parameters: a fairness weight (degree of influence of proportional fairness, [0,2]) and a bias (systematic offset, [-30,30]). The offer to the opponent is predicted as the sum of the fairness-based suggestion and the bias, with added Gaussian noise.",
  "target_variable": "proposed_perc",
  "full_reasoning": "Let's proceed step by step:\n\n**1. Key Psychological Mechanisms Involved**\n- **Fairness Norms:** People are highly sensitive to fair vs. unfair offers, but \"fairness\" depends on how much each contributed\u2014not just equality.\n- **Self-Interest (Greed):** Proposers naturally wish to maximize their own share.\n- **Equity Sensitivity:** Proposers may adjust their offers based on their and their opponent's relative contributions to the total pot, expecting this to influence acceptance.\n- **Noise/Individual Variation:** Some randomness is present in human behavior due to unexplained or situational factors.\n\n**2. Interaction of Mechanisms**\n- One expects the proposer to consider both the *relative* contribution (how much they vs. the other discovered) and their own self-interest.\n- They may anchor around \"proportional fairness\" (offer a share to the other player that matches that other's proportion of the combined earning).\n- They may shift toward self-interest (offering less than proportional fairness).\n- Some random variability (noise) is likely present.\n\n**3. Mathematical Formulation**\nA parsimonious model should capture:\n1. **Propensity to offer the \"equitable\" split**: the percentage corresponding to the opponent\u2019s *share of contributed tokens*. This is calculated as:  \n   fair_perc_opp = token_opp / (token_opp + token_self) * 100  \n2. **Self-serving bias parameter**: How much the proposer subtracts from this fair percentage: model as a *willingness to undercut* (bias toward self-interest).\n3. **Weighting**: How much do proposers weight fairness vs. self-interest (i.e., a parameter allowing some people to *over- or under-offer* relative to fairness).\n4. **Random Noise**: To capture residual variance (normally distributed).\n\nTo minimize high parameter covariance, it's wise to combine undercutting and weighting into a linear combination and keep the model with just one or two learnable parameters.\n\nSo, the simplest high-interpretability model:\nproposed_perc = baseline + fairness_weight * (fair_perc_opp - 50) + noise\n\nBut actually, setting the model to anchor explicitly on fairness contribution, and allowing a bias term for systematic under/offering, is even clearer:\nproposed_perc = bias + fairness_weight * fair_perc_opp + noise\n\nBut bias and fairness_weight could be highly covariant (if fairness_weight absorbs bias). To avoid this, it's principled to set:\nproposed_perc = fairness_weight * fair_perc_opp + bias + noise\n\nLet\u2019s define each:\n- **fair_perc_opp**: opponent's \"fair\" share in percentage, based on contributions only.\n- **fairness_weight**: How much the proposer is influenced by equitable fairness (from 0 to 2 \u2014 1: exactly proportional, 0: ignore fairness, 2: super-fair).\n- **bias**: General tendency to over- or under-offer, orthogonal to fairness (in practice, likely a small range: -30 to +30).\n- **noise (epsilon)**: Gaussian noise (for model fitting consistency, its variance can be fitted or fixed).\n\nTo minimize parameter collinearity and enhance recovery:\n- Let fairness_weight in [0, 2]\n- Let bias in [-30, 30]\n- Fix noise to standard deviation = 5 (for demonstration; optionally fit it).\n\n**Alternative\u2014Keep ONLY fairness_weight and NO bias?**\n- If we remove bias, then unfair behaviors (systematic low-balling) can only be explained by fairness_weight<1. Parametric recovery may suffer if actual behavior is an offset, so keeping both is preferable.\n\n**Mapping to Observed Behavior**\n- Only use proposer's trials (trial_role == 2)\n- Model predicts proposed_perc (the percentage offered to the opponent).\n\n**Summary of the Model**\n- **Predicts**: proposed_perc for each proposer's trial.\n- **Inputs**: token_opp and token_self, used to compute fair_perc_opp.\n- **Learnable Parameters:** fairness_weight and bias (minimal, interpretable, low collinearity).\n\n---\n\n**Model Specification:**\n\n<MODEL>\nproposed_perc = fairness_weight * fair_perc_opp + bias + epsilon\n\nfair_perc_opp = 100 * token_opp / (token_self + token_opp)\n\nepsilon ~ Normal(0, noise_sd)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"proposed_perc\": {\n      \"description\": \"Percentage of the total pot offered to the opponent by the participant on proposer trials\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant on current trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent on current trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_opp\": {\n      \"description\": \"The percentage share corresponding to the opponent's token contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Weight on the fairness/proportionality component; 1 means exactly matching opponent\u2019s share, 0 means fairness is ignored\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"bias\": {\n      \"description\": \"Participant's systematic tendency to deviate from proportionality in offers (positive: over-offer relative to fairness, negative: under-offer)\",\n      \"range\": {\n        \"min\": -30,\n        \"max\": 30,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Random noise for each trial, drawn independently from a normal distribution\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"parameters\": { \"mean\": 0, \"std\": 5 }\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"noise_sd\": {\n      \"description\": \"Standard deviation of the Gaussian noise added to the model output\",\n      \"range\": {\n        \"min\": 0.0001,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA minimal linear equity model for proposer behavior, combining the effect of the opponent's proportional contribution to the pot (fairness) and a systematic proposer-specific bias. The model has two learnable parameters: a fairness weight (degree of influence of proportional fairness, [0,2]) and a bias (systematic offset, [-30,30]). The offer to the opponent is predicted as the sum of the fairness-based suggestion and the bias, with added Gaussian noise.\n</SUMMARY>\n",
  "prediction_type": "numerical_variable_estimation",
  "current_model": "Specification: proposed_perc = fairness_weight * fair_perc_opp + bias + epsilon\n\nfair_perc_opp = 100 * token_opp / (token_self + token_opp)\n\nepsilon ~ Normal(0, noise_sd)\nSummary: A minimal linear equity model for proposer behavior, combining the effect of the opponent's proportional contribution to the pot (fairness) and a systematic proposer-specific bias. The model has two learnable parameters: a fairness weight (degree of influence of proportional fairness, [0,2]) and a bias (systematic offset, [-30,30]). The offer to the opponent is predicted as the sum of the fairness-based suggestion and the bias, with added Gaussian noise.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, fairness_weight=1, bias=0):\n    model_predictions = []\n    noise_sd = 5 #fixed\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate fair_perc_opp\n        if (token_self + token_opp) == 0:\n            fair_perc_opp = 50  #Handle the case where both are zero. Can also set to 0.\n        else:\n            fair_perc_opp = 100 * token_opp / (token_self + token_opp)\n\n        #Generate Epsilon from Normal Distribution\n        u1 = random.random()\n        u2 = random.random()\n        epsilon = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2) * noise_sd  # Box-Muller transform\n\n        # Calculate proposed_perc\n        proposed_perc = fairness_weight * fair_perc_opp + bias + epsilon\n        model_predictions.append(proposed_perc)\n\n    return model_predictions",
  "total_retries": 0,
  "fitting_warnings": [
    "Error fitting participant 1043: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error fitting participant 2013: Error in parameter fitting: All optimization attempts failed. Errors: []"
  ],
  "skipped_participants": [
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: []"
    },
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: []"
    }
  ],
  "num_skipped_participants": 2,
  "group_parameter_averages": {
    "Control": {
      "fairness_weight": 0.9074792157738428,
      "bias": 6.458816114302622
    },
    "Cocaine": {
      "fairness_weight": 0.7866462774643611,
      "bias": 1.7689269124587448
    }
  },
  "fitting_results": [
    {
      "fairness_weight": 0.8993859151442085,
      "bias": -7.5406215966470205,
      "success": true,
      "mse": 395.40069013979394,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.6753648833863173,
      "bias": 24.821332677583623,
      "success": true,
      "mse": 4630.588186329806,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3833073635013879,
      "bias": 19.88989895595845,
      "success": true,
      "mse": 59.61327196136475,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.228346979660439,
      "bias": 23.48531956730446,
      "success": true,
      "mse": 1556.6774716231084,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.805603431709547,
      "bias": -25.90976830456435,
      "success": true,
      "mse": 684.4545750826686,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.31298981898331,
      "bias": -25.899867494585735,
      "success": true,
      "mse": 155.61559512127909,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.1323680717367948,
      "bias": -17.604540395513332,
      "success": true,
      "mse": 290.4949333431343,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7269808869252541,
      "bias": 0.5293467338516139,
      "success": true,
      "mse": 152.55665207476986,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.38656387017316546,
      "bias": 24.07693915518657,
      "success": true,
      "mse": 101.67758759798832,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.44781106208772964,
      "bias": 8.29717187205148,
      "success": true,
      "mse": 338.07557796318537,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.421256618281755,
      "bias": -12.184059376130834,
      "success": true,
      "mse": 386.17737063232477,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9963240992998572,
      "bias": 9.565197494791072,
      "success": true,
      "mse": 237.1211166373605,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.09942112093307491,
      "bias": 6.197163033826402,
      "success": true,
      "mse": 977.2730845127036,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.512837137580471,
      "bias": 7.229175754232122,
      "success": true,
      "mse": 317.2482445420076,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.918169318510399,
      "bias": 26.76470973298272,
      "success": true,
      "mse": 675.6463594204823,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.0164110532160664,
      "bias": 21.422072749194996,
      "success": true,
      "mse": 790.5604569223894,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6141817789856084,
      "bias": 18.6486974282459,
      "success": true,
      "mse": 105.48267871948214,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6256908817268013,
      "bias": -5.939501301378911,
      "success": true,
      "mse": 464.54380600583954,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.765651024106632,
      "bias": -8.199461566140133,
      "success": true,
      "mse": 346.4272878407407,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.1030728187793282,
      "bias": 13.862457292760089,
      "success": true,
      "mse": 975.1315748641175,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.024704384000340255,
      "bias": 29.237948199759508,
      "success": true,
      "mse": 63.0354924144272,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.663649422275655,
      "bias": 15.203048008811118,
      "success": true,
      "mse": 298.34875489342636,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7511911301509756,
      "bias": 11.999231745460829,
      "success": true,
      "mse": 547.0436643777201,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.4272694175894736,
      "bias": -15.720922234612699,
      "success": true,
      "mse": 476.6135413478393,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.8766352680132559,
      "bias": 15.714124461312979,
      "success": true,
      "mse": 260.19820171959776,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5654586833451419,
      "bias": 20.842897418497692,
      "success": true,
      "mse": 31.236766096404754,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.268678130774838,
      "bias": 2.439700591998692,
      "success": true,
      "mse": 2585.860700758175,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.4780079160651454,
      "bias": -19.592516388314184,
      "success": true,
      "mse": 342.04909519143143,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.587387565456465,
      "bias": 2.4977430063904418,
      "success": true,
      "mse": 244.1433516787168,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.8917057925923286,
      "bias": 18.099957672999526,
      "success": true,
      "mse": 8112.823487106067,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.1393908369671026,
      "bias": 21.016973892160106,
      "success": true,
      "mse": 1232.6830490439613,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7922233196312684,
      "bias": 21.04694272316782,
      "success": true,
      "mse": 214.1094398545042,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.7257413139040292,
      "bias": -24.165810787072832,
      "success": true,
      "mse": 1805.2361260478951,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.469536463912153,
      "bias": 17.30811850727137,
      "success": true,
      "mse": 3285.0740268893464,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.692478042509062,
      "bias": 24.39312567649409,
      "success": true,
      "mse": 1541.06666462076,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7142390421121906,
      "bias": -25.62838944768393,
      "success": true,
      "mse": 497.1244314733648,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.2101818987495796,
      "bias": 10.904778411764738,
      "success": true,
      "mse": 915.1086779154892,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.580961139707139,
      "bias": -9.224566815991837,
      "success": true,
      "mse": 911.4494806790991,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.8128176158393525,
      "bias": 29.688840060161667,
      "success": true,
      "mse": 1359.1809380586435,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.2755416678629671,
      "bias": 22.30859704588246,
      "success": true,
      "mse": 66.53161481909665,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6180749354101406,
      "bias": 3.4981180746554115,
      "success": true,
      "mse": 208.13735821006966,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4765149409046483,
      "bias": -2.109325435412033,
      "success": true,
      "mse": 801.8901327856858,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.8543616723341592,
      "bias": -13.399069382219201,
      "success": true,
      "mse": 244.8173932810177,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.4969399394571836,
      "bias": -27.79261861741547,
      "success": true,
      "mse": 485.3278996599017,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4829862634878057,
      "bias": -2.319666962817198,
      "success": true,
      "mse": 122.29017774980633,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.25322463559234726,
      "bias": 21.598883037310298,
      "success": true,
      "mse": 130.50494773988913,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.07135123165422624,
      "bias": 16.78301826102249,
      "success": true,
      "mse": 31.66913387257221,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5812662555739674,
      "bias": -0.5578983311855006,
      "success": true,
      "mse": 439.5845493322657,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.682224130006963,
      "bias": -14.962489208115196,
      "success": true,
      "mse": 816.9434227042016,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6937423264605366,
      "bias": -1.1612078288418517,
      "success": true,
      "mse": 158.19706035012678,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.0860155948566738,
      "bias": 24.717674382786523,
      "success": true,
      "mse": 148.95709194139985,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.23260727316152977,
      "bias": 5.183863869341623,
      "success": true,
      "mse": 904.1618874074496,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.1727845191448634,
      "bias": -13.957700509106816,
      "success": true,
      "mse": 728.7865423039574,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6686326402564635,
      "bias": -5.794257757820484,
      "success": true,
      "mse": 497.3832284543025,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.40750324538053695,
      "bias": 23.270083537110906,
      "success": true,
      "mse": 247.8733512673818,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.08835221544937251,
      "bias": -2.0403607180053336,
      "success": true,
      "mse": 1095.8012497671307,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.37115608228057717,
      "bias": 25.09603076842041,
      "success": true,
      "mse": 97.87081396639374,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.8619455123878017,
      "bias": -29.29157017349876,
      "success": true,
      "mse": 826.885622783751,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.22983249114497278,
      "bias": 18.80174613647641,
      "success": true,
      "mse": 155.033243540796,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.3809089591004904,
      "bias": -26.698555565897852,
      "success": true,
      "mse": 304.4997511286169,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.9800192622207096,
      "bias": 9.002182204554074,
      "success": true,
      "mse": 6157.787961765487,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9455922502803338,
      "bias": 8.849169031891542,
      "success": true,
      "mse": 1282.9586565864943,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7854616838440506,
      "bias": -4.43720125389478,
      "success": true,
      "mse": 185.8378087263807,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.3289957502485223,
      "bias": -8.39961066112286,
      "success": true,
      "mse": 323.63735539078823,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.4627642030959698,
      "bias": -24.60473005475062,
      "success": true,
      "mse": 331.6627874760298,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7489923789173163,
      "bias": 13.454961723750369,
      "success": true,
      "mse": 170.08609116112888,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.11514201279626156,
      "bias": 25.489248786135047,
      "success": true,
      "mse": 196.66578766385234,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.20458306671788096,
      "bias": -1.9052717701658424,
      "success": true,
      "mse": 412.2298398545958,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5418479396216894,
      "bias": -2.265370666696506,
      "success": true,
      "mse": 176.09318645386,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6834038018709803,
      "bias": 12.632830831377484,
      "success": true,
      "mse": 381.5421333685579,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.8034654247528384,
      "bias": -15.498437515975683,
      "success": true,
      "mse": 216.5980753732414,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7240603967718474,
      "bias": 25.827363194872994,
      "success": true,
      "mse": 326.0045569268769,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.972490158428162,
      "bias": 29.977312665686622,
      "success": true,
      "mse": 12148.376349897515,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.2511246893248975,
      "bias": 20.418465489348574,
      "success": true,
      "mse": 63.35439058529221,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.0343243031954518,
      "bias": -4.131716000862999,
      "success": true,
      "mse": 818.835046953191,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4397335691367759,
      "bias": -2.469331152873205,
      "success": true,
      "mse": 219.84676609176842,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.257593770587509,
      "bias": -3.5999497257033033,
      "success": true,
      "mse": 443.19752454687745,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5927585265937145,
      "bias": 17.103581568506677,
      "success": true,
      "mse": 120.25260116764562,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9409445552831619,
      "bias": 5.895405239935702,
      "success": true,
      "mse": 604.1979400047458,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.47550016144987983,
      "bias": -25.519416898323495,
      "success": true,
      "mse": 669.9636028417374,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.8634004429585573,
      "bias": -0.9016793975658448,
      "success": true,
      "mse": 2610.891803358288,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.5870952362424176,
      "bias": -24.149224279204564,
      "success": true,
      "mse": 440.5588280066885,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.0182452329897147,
      "bias": -9.978072973959305,
      "success": true,
      "mse": 503.814384012112,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9036039696224776,
      "bias": -10.313252480856539,
      "success": true,
      "mse": 385.3991944016328,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.28242345215889086,
      "bias": -0.12107918178597689,
      "success": true,
      "mse": 292.6399759552373,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.4161341811548578,
      "bias": -9.314084881016992,
      "success": true,
      "mse": 508.3720039276412,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.266746220567509,
      "bias": 28.389443260190145,
      "success": true,
      "mse": 5358.126025192732,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5397880142663004,
      "bias": 18.56826589009872,
      "success": true,
      "mse": 388.6163130528619,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.19030539799582072,
      "bias": 17.663858956426573,
      "success": true,
      "mse": 448.07833254838204,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "fairness_weight": {
        "r": 0.3660141095968438,
        "p": 0.0001804329848439978
      },
      "bias": {
        "r": 0.13334015573514515,
        "p": 0.18598452793639422
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 461.455255377069,
  "bic_Control": 465.3637312526676,
  "bic_Cocaine": 457.9625748073852,
  "bic_results": {
    "average_bic": 461.455255377069,
    "individual_bics": [
      457.57026411632353,
      583.0577796842119,
      361.07717154534356,
      527.4611408081942,
      485.55511794961194,
      410.01221210662203,
      441.84627453631856,
      408.9997184722722,
      388.30753361183724,
      449.5821248226977,
      456.36651709230216,
      431.4925052667021,
      503.71845409389323,
      446.339294886579,
      484.8945415648893,
      492.9052304389127,
      390.1812662431549,
      465.7892305978864,
      450.8267020568037,
      503.60657458638144,
      363.92397656248374,
      443.20680080552324,
      474.1263414979446,
      467.0973864618231,
      436.22900805261816,
      328.11676753251265,
      553.3438799034284,
      450.178049929834,
      432.9809151949132,
      611.6566446557565,
      515.5597507348659,
      426.2862332123204,
      535.016162330599,
      565.549749392138,
      526.9471164977265,
      469.24624000712646,
      500.3665660792567,
      500.16222623074674,
      520.5418964920212,
      366.67692117299737,
      424.8434917780332,
      493.6309336064321,
      433.12152420635994,
      468.021443610103,
      397.72161471457514,
      401.03734978006827,
      328.81784974713344,
      462.97271546742803,
      494.5794436150338,
      410.85129679079375,
      407.78195448952386,
      499.75281124317473,
      488.7558065435893,
      469.2727830833793,
      433.7541963551696,
      509.5566782424487,
      386.3614492472993,
      495.19636711855134,
      409.8209996396867,
      444.247565414064,
      597.5944992932842,
      517.5985127963884,
      419.06397080997,
      447.3561860404155,
      448.6054380231908,
      414.54692275270963,
      421.9521763668327,
      459.6960155861591,
      416.3170611460828,
      455.7506672362529,
      426.875597546258,
      447.72786099051336,
      632.2478727626917,
      364.18133642137525,
      494.69739709283243,
      427.63485173355576,
      463.39017470277435,
      396.8647031965934,
      479.1943764861903,
      484.46377437874753,
      553.8351852346631,
      463.0856248728045,
      469.92798529423675,
      456.2636446023379,
      442.22147987868095,
      470.3872686621182,
      590.5002297614542,
      456.6875999222665,
      463.94875304734205
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        457.57026411632353,
        583.0577796842119,
        361.07717154534356,
        527.4611408081942,
        485.55511794961194,
        410.01221210662203,
        441.84627453631856,
        408.9997184722722,
        388.30753361183724,
        449.5821248226977,
        456.36651709230216,
        431.4925052667021,
        503.71845409389323,
        446.339294886579,
        484.8945415648893,
        492.9052304389127,
        390.1812662431549,
        465.7892305978864,
        450.8267020568037,
        503.60657458638144,
        363.92397656248374,
        443.20680080552324,
        474.1263414979446,
        467.0973864618231,
        436.22900805261816,
        328.11676753251265,
        553.3438799034284,
        450.178049929834,
        432.9809151949132,
        611.6566446557565,
        515.5597507348659,
        426.2862332123204,
        535.016162330599,
        565.549749392138,
        526.9471164977265,
        469.24624000712646,
        500.3665660792567,
        500.16222623074674,
        520.5418964920212,
        366.67692117299737,
        424.8434917780332,
        493.6309336064321
      ],
      "Cocaine": [
        433.12152420635994,
        468.021443610103,
        397.72161471457514,
        401.03734978006827,
        328.81784974713344,
        462.97271546742803,
        494.5794436150338,
        410.85129679079375,
        407.78195448952386,
        499.75281124317473,
        488.7558065435893,
        469.2727830833793,
        433.7541963551696,
        509.5566782424487,
        386.3614492472993,
        495.19636711855134,
        409.8209996396867,
        444.247565414064,
        597.5944992932842,
        517.5985127963884,
        419.06397080997,
        447.3561860404155,
        448.6054380231908,
        414.54692275270963,
        421.9521763668327,
        459.6960155861591,
        416.3170611460828,
        455.7506672362529,
        426.875597546258,
        447.72786099051336,
        632.2478727626917,
        364.18133642137525,
        494.69739709283243,
        427.63485173355576,
        463.39017470277435,
        396.8647031965934,
        479.1943764861903,
        484.46377437874753,
        553.8351852346631,
        463.0856248728045,
        469.92798529423675,
        456.2636446023379,
        442.22147987868095,
        470.3872686621182,
        590.5002297614542,
        456.6875999222665,
        463.94875304734205
      ]
    },
    "num_parameters": 2,
    "prediction_type": "numerical",
    "bic_formula": "BIC calculated from MSE using Gaussian error assumption"
  },
  "recovery_summary": "Parameter Recovery:\n- fairness_weight: r = 0.366\n- bias: r = 0.133",
  "previous_models": [
    "Specification: proposed_perc = fairness_weight * fair_perc_opp + bias + epsilon\n\nfair_perc_opp = 100 * token_opp / (token_self + token_opp)\n\nepsilon ~ Normal(0, noise_sd)\nSummary: A minimal linear equity model for proposer behavior, combining the effect of the opponent's proportional contribution to the pot (fairness) and a systematic proposer-specific bias. The model has two learnable parameters: a fairness weight (degree of influence of proportional fairness, [0,2]) and a bias (systematic offset, [-30,30]). The offer to the opponent is predicted as the sum of the fairness-based suggestion and the bias, with added Gaussian noise.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation\nBIC: 461.455255377069\n\nParameter Recovery:\n- fairness_weight: r = 0.366\n- bias: r = 0.133"
  ]
}