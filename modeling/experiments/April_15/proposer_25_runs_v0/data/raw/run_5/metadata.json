{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should directly predict a numerical value (not a binary choice). The model's predictions will be compared to actual values using mean squared error.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let\u2019s work through the specification step by step as you asked.\n\n---\n\n### Step 1: Key Psychological Mechanisms Involved\n\nIn the proposer role of the ultimatum game, the participant must (for each trial):\n\n- Decide how much (what percent) to offer the responder (`proposed_perc`).\n- This proposal is typically guided by:\n  - **Self-interest:** Preferring a higher share for oneself.\n  - **Fairness sensitivity:** Wanting to offer \u201cfair\u201d splits, possibly adjusted for relative contribution (via `token_self`, `token_opp`).\n  - **Strategic Acceptance Expectation:** Proposers may calibrate the offer based on the belief that extremely low offers are likely to be rejected, so they avoid risking ending with nothing.\n\nRelevant variables for the setting:\n- The total to be split varies per trial (`combined_earning`)\n- Contribution is explicit (`token_self`, `token_opp`)\n- Proposals are in %, so normalization is straightforward.\n\n---\n\n### Step 2: How Mechanisms Interact\n\n- People typically balance self-interest vs. fairness (contribution-weighted or equal split).\n- They may also be loss-averse to outright rejection (ignoring this for simplicity since only proposer trials are modeled).\n- Proposer behavior may reflect a weighted average between taking what one \u201cdeserves\u201d (based on own contribution), giving the opponent what they \u201cdeserve,\u201d and/or simply offering a fair split (50%).\n\nOperationalizing this:\n- **Egalitarian:** 50/50 split \u2192 offer 50%\n- **Meritocratic:** Share reflects own contribution (own_contribution / total_contribution)\n- **Strategic generosity:** Offer more than \u201cminimum\u201d to avoid rejection, but less than 50%.\n\nA convex combination of these motives is common in modeling.\n\n---\n\n### Step 3: Mathematical Form\n\nThe most robust yet parsimonious model:\n- Use a weighted sum of \u201cfairness anchors\u201d (egalitarian and meritocratic).\n- One or two learnable parameters to weight self-interest/fairness.\n- Small additive noise term (capturing idiosyncratic error).\n\nLet\u2019s denote:\n- **meritocratic_share = 100 * token_opp / (token_self + token_opp)** \u2192 percent \u201cdeserved\u201d by opponent by contribution.\n- **egalitarian_share = 50** \u2192 percent in equal split.\n\nModel the offer as:\n$$\nproposed\\_perc = w_{merit} \\times meritocratic\\_share + (1-w_{merit}) \\times egalitarian\\_share + bias + \\epsilon\n$$\n\nWhere:\n- $w_{merit} \\in [0,1]$ (learnable parameter): weight on meritocracy (vs egalitarianism)\n- $bias$ (learnable, liberal bounds, say [-50, 50]): general generosity/stinginess\n- $\\epsilon \\sim \\mathcal{N}(0,\\sigma^2)$, $\\sigma$ (learnable, $\\geq0$): noise parameter\n\nThis model is simple with low collinearity/covariance between main parameters.\n\n---\n\n### Step 4: Mapping to Behavior\n\n- On every proposer trial (trial_role == 2), the model is used to predict `proposed_perc`.\n- The prediction takes into account:\n   - Relative contributions (via meritocratic_share)\n   - Normative fairness (egalitarian_share)\n   - Individual \u201cbias\u201d/generosity\n   - Idiosyncratic variation (via $\\epsilon$)\n\n---\n\n### Step 5: Summary specification\n\n- Only proposer trials used (`trial_role == 2`).\n- Model predicts `proposed_perc` (continuous, bounded [0,100]).\n- 2-3 learnable parameters: $w_{merit}$ (weight, [0,1]), $bias$ ([-50,50]), $\\sigma$ ([0,100])\n- All necessary variables available in data.\n\n---\n\nHere is the model specification:\n\n---\n\n<MODEL>\nproposed_perc = w_merit * (100 * token_opp / (token_self + token_opp)) + (1 - w_merit) * 50 + bias + NormalNoise(0, sigma)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"proposed_perc\": {\n      \"description\": \"Predicted percent of the total offered to the opponent by the proposer in a trial (value from 0 to 100).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"w_merit\": {\n      \"description\": \"Weight of the meritocratic (contribution-based) fairness anchor in offer calculation. 1: purely merit-based; 0: purely egalitarian.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.0,\n          \"high\": 1.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent on the current trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant on the current trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"bias\": {\n      \"description\": \"General offer bias reflecting participant's overall generosity or stinginess regardless of fairness anchors.\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"parameters\": {\n          \"mean\": 0,\n          \"std\": 5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sigma\": {\n      \"description\": \"Standard deviation of idiosyncratic noise in the proposed percent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"exponential\",\n        \"parameters\": {\n          \"scale\": 5.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"NormalNoise(0, sigma)\": {\n      \"description\": \"Gaussian noise term with mean 0 and standard deviation sigma, sampled anew for each trial.\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": \"sigma\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA weighted fairness anchor model for proposer behavior: the predicted offer (as percent) is a convex combination of a meritocratic (contribution-based) and egalitarian (equal split) anchor, plus a general bias and Gaussian noise. This approach captures how proposers trade off fairness norms and personal benefit, using only two main learnable parameters and a noise parameter for flexibility and robust parameter recovery.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['w_merit', 'bias', 'sigma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                proposed_perc = w_merit * (100 * token_opp / (token_self + token_opp)) + (1 - w_merit) * 50 + bias + NormalNoise(0, sigma)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"proposed_perc\": {\n      \"description\": \"Predicted percent of the total offered to the opponent by the proposer in a trial (value from 0 to 100).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"w_merit\": {\n      \"description\": \"Weight of the meritocratic (contribution-based) fairness anchor in offer calculation. 1: purely merit-based; 0: purely egalitarian.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.0,\n          \"high\": 1.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent on the current trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant on the current trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"bias\": {\n      \"description\": \"General offer bias reflecting participant's overall generosity or stinginess regardless of fairness anchors.\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"parameters\": {\n          \"mean\": 0,\n          \"std\": 5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sigma\": {\n      \"description\": \"Standard deviation of idiosyncratic noise in the proposed percent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"exponential\",\n        \"parameters\": {\n          \"scale\": 5.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"NormalNoise(0, sigma)\": {\n      \"description\": \"Gaussian noise term with mean 0 and standard deviation sigma, sampled anew for each trial.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": \"sigma\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\nimport random\n\ndef simulate_model(trial_data, w_merit=0.5, bias=0, sigma=5):\n    \"\"\"\n    Simulates the proposed_perc based on the weighted fairness anchor model.\n\n    Args:\n        trial_data (list of dict): List of dictionaries, where each dictionary\n                                   represents a trial and contains 'token_opp' and\n                                   'token_self'.\n        w_merit (float): Weight of the meritocratic fairness anchor.\n        bias (float): General offer bias.\n        sigma (float): Standard deviation of the noise.\n\n    Returns:\n        list: A list of predicted proposed_perc values for each trial.\n    \"\"\"\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        # Meritocratic component\n        if (token_self + token_opp) == 0:\n            meritocratic_share = 50  # Avoid division by zero; default to 50\n        else:\n            meritocratic_share = 100 * token_opp / (token_self + token_opp)\n\n        # Egalitarian component\n        egalitarian_share = 50\n\n        # Weighted combination\n        fairness_component = w_merit * meritocratic_share + (1 - w_merit) * egalitarian_share\n\n        # Noise\n        u1, u2 = random.random(), random.random()\n        noise = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2) * sigma\n\n        # Prediction\n        proposed_perc = fairness_component + bias + noise\n\n        model_predictions.append(proposed_perc)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '''\n[\n  {\n    \"ID\": 0,\n    \"group\": \"control\",\n    \"trial_number\": 1,\n    \"trial_type\": 1,\n    \"trial_role\": 2,\n    \"token_opp\": 10,\n    \"token_self\": 10,\n    \"combined_earning\": 20,\n    \"split_opp\": 10.0,\n    \"split_self\": 10.0,\n    \"splitperc_opp\": 50,\n    \"splitperc_self\": 50,\n    \"accept\": 1.0,\n    \"accepted_amount\": 10.0,\n    \"accepted_perc\": 50.0,\n    \"proposed_perc\": 50.0,\n    \"proposed_amount\": 10.0\n  },\n  {\n    \"ID\": 1,\n    \"group\": \"control\",\n    \"trial_number\": 2,\n    \"trial_type\": 1,\n    \"trial_role\": 2,\n    \"token_opp\": 20,\n    \"token_self\": 0,\n    \"combined_earning\": 20,\n    \"split_opp\": 20.0,\n    \"split_self\": 0.0,\n    \"splitperc_opp\": 100,\n    \"splitperc_self\": 0,\n    \"accept\": 1.0,\n    \"accepted_amount\": 20.0,\n    \"accepted_perc\": 100.0,\n    \"proposed_perc\": 100.0,\n    \"proposed_amount\": 20.0\n  },\n  {\n    \"ID\": 2,\n    \"group\": \"control\",\n    \"trial_number\": 3,\n    \"trial_type\": 1,\n    \"trial_role\": 2,\n    \"token_opp\": 0,\n    \"token_self\": 20,\n    \"combined_earning\": 20,\n    \"split_opp\": 0.0,\n    \"split_self\": 20.0,\n    \"splitperc_opp\": 0,\n    \"splitperc_self\": 100,\n    \"accept\": 1.0,\n    \"accepted_amount\": 0.0,\n    \"accepted_perc\": 0.0,\n    \"proposed_perc\": 0.0,\n    \"proposed_amount\": 0.0\n  }\n]\n'''\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1744732522.426375
    }
  ],
  "learnable_parameters": {
    "w_merit": {
      "description": "Weight of the meritocratic (contribution-based) fairness anchor in offer calculation. 1: purely merit-based; 0: purely egalitarian.",
      "range": {
        "min": 0.0,
        "max": 1.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.0,
          "high": 1.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "bias": {
      "description": "General offer bias reflecting participant's overall generosity or stinginess regardless of fairness anchors.",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "normal",
        "parameters": {
          "mean": 0,
          "std": 5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "sigma": {
      "description": "Standard deviation of idiosyncratic noise in the proposed percent.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "exponential",
        "parameters": {
          "scale": 5.0
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "proposed_perc = w_merit * (100 * token_opp / (token_self + token_opp)) + (1 - w_merit) * 50 + bias + NormalNoise(0, sigma)",
  "variable_descriptions": {
    "proposed_perc": {
      "description": "Predicted percent of the total offered to the opponent by the proposer in a trial (value from 0 to 100).",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "w_merit": {
      "description": "Weight of the meritocratic (contribution-based) fairness anchor in offer calculation. 1: purely merit-based; 0: purely egalitarian.",
      "range": {
        "min": 0.0,
        "max": 1.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.0,
          "high": 1.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent on the current trial.",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant on the current trial.",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "bias": {
      "description": "General offer bias reflecting participant's overall generosity or stinginess regardless of fairness anchors.",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "normal",
        "parameters": {
          "mean": 0,
          "std": 5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "sigma": {
      "description": "Standard deviation of idiosyncratic noise in the proposed percent.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "exponential",
        "parameters": {
          "scale": 5.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "NormalNoise(0, sigma)": {
      "description": "Gaussian noise term with mean 0 and standard deviation sigma, sampled anew for each trial.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "normal",
        "mean": 0,
        "std": "sigma"
      },
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A weighted fairness anchor model for proposer behavior: the predicted offer (as percent) is a convex combination of a meritocratic (contribution-based) and egalitarian (equal split) anchor, plus a general bias and Gaussian noise. This approach captures how proposers trade off fairness norms and personal benefit, using only two main learnable parameters and a noise parameter for flexibility and robust parameter recovery.",
  "target_variable": "proposed_perc",
  "full_reasoning": "Let\u2019s work through the specification step by step as you asked.\n\n---\n\n### Step 1: Key Psychological Mechanisms Involved\n\nIn the proposer role of the ultimatum game, the participant must (for each trial):\n\n- Decide how much (what percent) to offer the responder (`proposed_perc`).\n- This proposal is typically guided by:\n  - **Self-interest:** Preferring a higher share for oneself.\n  - **Fairness sensitivity:** Wanting to offer \u201cfair\u201d splits, possibly adjusted for relative contribution (via `token_self`, `token_opp`).\n  - **Strategic Acceptance Expectation:** Proposers may calibrate the offer based on the belief that extremely low offers are likely to be rejected, so they avoid risking ending with nothing.\n\nRelevant variables for the setting:\n- The total to be split varies per trial (`combined_earning`)\n- Contribution is explicit (`token_self`, `token_opp`)\n- Proposals are in %, so normalization is straightforward.\n\n---\n\n### Step 2: How Mechanisms Interact\n\n- People typically balance self-interest vs. fairness (contribution-weighted or equal split).\n- They may also be loss-averse to outright rejection (ignoring this for simplicity since only proposer trials are modeled).\n- Proposer behavior may reflect a weighted average between taking what one \u201cdeserves\u201d (based on own contribution), giving the opponent what they \u201cdeserve,\u201d and/or simply offering a fair split (50%).\n\nOperationalizing this:\n- **Egalitarian:** 50/50 split \u2192 offer 50%\n- **Meritocratic:** Share reflects own contribution (own_contribution / total_contribution)\n- **Strategic generosity:** Offer more than \u201cminimum\u201d to avoid rejection, but less than 50%.\n\nA convex combination of these motives is common in modeling.\n\n---\n\n### Step 3: Mathematical Form\n\nThe most robust yet parsimonious model:\n- Use a weighted sum of \u201cfairness anchors\u201d (egalitarian and meritocratic).\n- One or two learnable parameters to weight self-interest/fairness.\n- Small additive noise term (capturing idiosyncratic error).\n\nLet\u2019s denote:\n- **meritocratic_share = 100 * token_opp / (token_self + token_opp)** \u2192 percent \u201cdeserved\u201d by opponent by contribution.\n- **egalitarian_share = 50** \u2192 percent in equal split.\n\nModel the offer as:\n$$\nproposed\\_perc = w_{merit} \\times meritocratic\\_share + (1-w_{merit}) \\times egalitarian\\_share + bias + \\epsilon\n$$\n\nWhere:\n- $w_{merit} \\in [0,1]$ (learnable parameter): weight on meritocracy (vs egalitarianism)\n- $bias$ (learnable, liberal bounds, say [-50, 50]): general generosity/stinginess\n- $\\epsilon \\sim \\mathcal{N}(0,\\sigma^2)$, $\\sigma$ (learnable, $\\geq0$): noise parameter\n\nThis model is simple with low collinearity/covariance between main parameters.\n\n---\n\n### Step 4: Mapping to Behavior\n\n- On every proposer trial (trial_role == 2), the model is used to predict `proposed_perc`.\n- The prediction takes into account:\n   - Relative contributions (via meritocratic_share)\n   - Normative fairness (egalitarian_share)\n   - Individual \u201cbias\u201d/generosity\n   - Idiosyncratic variation (via $\\epsilon$)\n\n---\n\n### Step 5: Summary specification\n\n- Only proposer trials used (`trial_role == 2`).\n- Model predicts `proposed_perc` (continuous, bounded [0,100]).\n- 2-3 learnable parameters: $w_{merit}$ (weight, [0,1]), $bias$ ([-50,50]), $\\sigma$ ([0,100])\n- All necessary variables available in data.\n\n---\n\nHere is the model specification:\n\n---\n\n<MODEL>\nproposed_perc = w_merit * (100 * token_opp / (token_self + token_opp)) + (1 - w_merit) * 50 + bias + NormalNoise(0, sigma)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"proposed_perc\": {\n      \"description\": \"Predicted percent of the total offered to the opponent by the proposer in a trial (value from 0 to 100).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"w_merit\": {\n      \"description\": \"Weight of the meritocratic (contribution-based) fairness anchor in offer calculation. 1: purely merit-based; 0: purely egalitarian.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.0,\n          \"high\": 1.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent on the current trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant on the current trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"bias\": {\n      \"description\": \"General offer bias reflecting participant's overall generosity or stinginess regardless of fairness anchors.\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"parameters\": {\n          \"mean\": 0,\n          \"std\": 5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sigma\": {\n      \"description\": \"Standard deviation of idiosyncratic noise in the proposed percent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"exponential\",\n        \"parameters\": {\n          \"scale\": 5.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"NormalNoise(0, sigma)\": {\n      \"description\": \"Gaussian noise term with mean 0 and standard deviation sigma, sampled anew for each trial.\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": \"sigma\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA weighted fairness anchor model for proposer behavior: the predicted offer (as percent) is a convex combination of a meritocratic (contribution-based) and egalitarian (equal split) anchor, plus a general bias and Gaussian noise. This approach captures how proposers trade off fairness norms and personal benefit, using only two main learnable parameters and a noise parameter for flexibility and robust parameter recovery.\n</SUMMARY>",
  "prediction_type": "numerical_variable_estimation",
  "current_model": "Specification: proposed_perc = w_merit * (100 * token_opp / (token_self + token_opp)) + (1 - w_merit) * 50 + bias + NormalNoise(0, sigma)\nSummary: A weighted fairness anchor model for proposer behavior: the predicted offer (as percent) is a convex combination of a meritocratic (contribution-based) and egalitarian (equal split) anchor, plus a general bias and Gaussian noise. This approach captures how proposers trade off fairness norms and personal benefit, using only two main learnable parameters and a noise parameter for flexibility and robust parameter recovery.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, w_merit=0.5, bias=0, sigma=5):\n    \"\"\"\n    Simulates the proposed_perc based on the weighted fairness anchor model.\n\n    Args:\n        trial_data (list of dict): List of dictionaries, where each dictionary\n                                   represents a trial and contains 'token_opp' and\n                                   'token_self'.\n        w_merit (float): Weight of the meritocratic fairness anchor.\n        bias (float): General offer bias.\n        sigma (float): Standard deviation of the noise.\n\n    Returns:\n        list: A list of predicted proposed_perc values for each trial.\n    \"\"\"\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        # Meritocratic component\n        if (token_self + token_opp) == 0:\n            meritocratic_share = 50  # Avoid division by zero; default to 50\n        else:\n            meritocratic_share = 100 * token_opp / (token_self + token_opp)\n\n        # Egalitarian component\n        egalitarian_share = 50\n\n        # Weighted combination\n        fairness_component = w_merit * meritocratic_share + (1 - w_merit) * egalitarian_share\n\n        # Noise\n        u1, u2 = random.random(), random.random()\n        noise = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2) * sigma\n\n        # Prediction\n        proposed_perc = fairness_component + bias + noise\n\n        model_predictions.append(proposed_perc)\n\n    return model_predictions",
  "total_retries": 0,
  "fitting_warnings": [
    "Error fitting participant 2033: Error in parameter fitting: All optimization attempts failed. Errors: []"
  ],
  "skipped_participants": [
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: []"
    }
  ],
  "num_skipped_participants": 1,
  "group_parameter_averages": {
    "Control": {
      "w_merit": 0.432978096462951,
      "bias": -0.7328573095596789,
      "sigma": 40.75516620109056
    },
    "Cocaine": {
      "w_merit": 0.4997701962592197,
      "bias": -9.36829392876705,
      "sigma": 32.36641977374
    }
  },
  "fitting_results": [
    {
      "w_merit": 0.9585063830068646,
      "bias": -19.77829984568487,
      "sigma": 29.7615119617911,
      "success": true,
      "mse": 1449.012721226673,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.5008114949629605,
      "bias": 14.666975975159465,
      "sigma": 24.421492870857204,
      "success": true,
      "mse": 865.1524818391131,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.012347137499635752,
      "bias": 38.2900799386695,
      "sigma": 40.757693648823405,
      "success": true,
      "mse": 5514.002467913813,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.19179177165629144,
      "bias": 22.403852513281482,
      "sigma": 93.74264763189959,
      "success": true,
      "mse": 3904.162110268229,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.849241493002026,
      "bias": 49.98516143737579,
      "sigma": 62.64524309247035,
      "success": true,
      "mse": 4763.615986263321,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.6459392342685757,
      "bias": -29.50056906060156,
      "sigma": 45.27683920546457,
      "success": true,
      "mse": 2470.8942513675956,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.0561358287952116,
      "bias": 49.766695796939686,
      "sigma": 71.25738441626834,
      "success": true,
      "mse": 5587.549125052295,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.5799937838942956,
      "bias": -37.631490013086896,
      "sigma": 11.4085110717655,
      "success": true,
      "mse": 1249.8537758869038,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.27082843220459235,
      "bias": 21.005984022734996,
      "sigma": 32.231355908399635,
      "success": true,
      "mse": 949.012473331823,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.6971944530044974,
      "bias": -14.789020828736927,
      "sigma": 25.53983155974551,
      "success": true,
      "mse": 1279.3213979504783,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.37915149779144774,
      "bias": -21.881979807889202,
      "sigma": 60.47081379226016,
      "success": true,
      "mse": 4005.751641358227,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.9522428660963972,
      "bias": 8.129869093404084,
      "sigma": 59.69828810701677,
      "success": true,
      "mse": 1755.7158457201367,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.11132520489844476,
      "bias": -45.719323520444306,
      "sigma": 72.49475016992643,
      "success": true,
      "mse": 7125.8330351704535,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.39049166326471246,
      "bias": -38.544829936899625,
      "sigma": 94.75422587387996,
      "success": true,
      "mse": 16594.00284377584,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.8966500932713797,
      "bias": 49.148761171758366,
      "sigma": 47.53955079405423,
      "success": true,
      "mse": 3089.321485780002,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.025556372067390035,
      "bias": -23.025869487312836,
      "sigma": 10.705773313266773,
      "success": true,
      "mse": 517.6276124473972,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.6088788468403291,
      "bias": -41.89609862201345,
      "sigma": 79.59722543428194,
      "success": true,
      "mse": 10585.71355581958,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.4436448982710645,
      "bias": 47.44844656057627,
      "sigma": 76.76623422449521,
      "success": true,
      "mse": 10328.850399087964,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.17733320719560955,
      "bias": 7.711094653436086,
      "sigma": 37.788966581730634,
      "success": true,
      "mse": 1437.9899212131413,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.6793546364457967,
      "bias": -20.394327421960142,
      "sigma": 42.657030183201094,
      "success": true,
      "mse": 2201.155598438799,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.8578684625370637,
      "bias": 27.03240145279878,
      "sigma": 23.358563506559154,
      "success": true,
      "mse": 3241.1376266972757,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.47385554222623205,
      "bias": -30.782206950496803,
      "sigma": 10.481960468037226,
      "success": true,
      "mse": 683.3731603076906,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.198575023133881,
      "bias": -10.057034210019298,
      "sigma": 41.897743744396955,
      "success": true,
      "mse": 1490.0157924785003,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.10331441743880546,
      "bias": -13.707858816076397,
      "sigma": 19.09940655607191,
      "success": true,
      "mse": 568.2622770598032,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.5484500347266252,
      "bias": 32.727654772196594,
      "sigma": 67.88897419255045,
      "success": true,
      "mse": 5267.5779045913405,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.15408058618672954,
      "bias": 22.91737525531413,
      "sigma": 27.978585840140372,
      "success": true,
      "mse": 2062.3306242628073,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.45943303742341013,
      "bias": -35.83833832410991,
      "sigma": 44.366911482807474,
      "success": true,
      "mse": 1497.189768870273,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.32953796302932703,
      "bias": 47.82930832724712,
      "sigma": 62.85019606508221,
      "success": true,
      "mse": 6775.850840538287,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.15081861590450957,
      "bias": -11.411191399657115,
      "sigma": 47.900339346550695,
      "success": true,
      "mse": 4754.928469858337,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.7649328428841162,
      "bias": -45.20902388273215,
      "sigma": 26.58439559027862,
      "success": true,
      "mse": 1656.3163542570467,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.5795990206174443,
      "bias": -37.00615629990259,
      "sigma": 33.58198393694104,
      "success": true,
      "mse": 3074.651711628293,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.18756570854225704,
      "bias": -31.735507452065917,
      "sigma": 14.866691721542125,
      "success": true,
      "mse": 1360.3430508098443,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.49057691843289564,
      "bias": 20.605818937829728,
      "sigma": 24.492920509476516,
      "success": true,
      "mse": 2218.975946403155,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.01967143922731355,
      "bias": 33.33372021624697,
      "sigma": 35.35981469230095,
      "success": true,
      "mse": 2947.507610885465,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.9929503204264967,
      "bias": -27.394388001178804,
      "sigma": 37.650072766669076,
      "success": true,
      "mse": 1684.143254061751,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.4877130070101094,
      "bias": -19.16548990624957,
      "sigma": 10.077149206478099,
      "success": true,
      "mse": 257.8797558393839,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.4955660085122581,
      "bias": -15.258424932031753,
      "sigma": 10.821938640387854,
      "success": true,
      "mse": 211.418561766311,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.13916871547332385,
      "bias": 37.64044209380185,
      "sigma": 69.56964555715777,
      "success": true,
      "mse": 5829.724549221322,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.2920138190644816,
      "bias": -27.461823781584698,
      "sigma": 2.1792142390843052,
      "success": true,
      "mse": 279.863078151956,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.6642418164493873,
      "bias": 40.554400247556444,
      "sigma": 34.78045171367393,
      "success": true,
      "mse": 2820.6228123823103,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.04993869162250714,
      "bias": 12.609552145215066,
      "sigma": 23.080164009169554,
      "success": true,
      "mse": 1293.1929749418268,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.14505285441147528,
      "bias": -49.30083535126568,
      "sigma": 44.305207981931545,
      "success": true,
      "mse": 4384.2158593506165,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.605714004188719,
      "bias": 32.169628929391905,
      "sigma": 19.784445038007817,
      "success": true,
      "mse": 1123.403024948485,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "w_merit": 0.13596587611450653,
      "bias": -31.659339555315473,
      "sigma": 62.93010030383841,
      "success": true,
      "mse": 7445.826393007565,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.9223361128733527,
      "bias": -39.94534519057644,
      "sigma": 62.34649361647985,
      "success": true,
      "mse": 7445.440389360959,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.40040838913405175,
      "bias": -33.82942343305925,
      "sigma": 56.19400005644517,
      "success": true,
      "mse": 2894.182582485284,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.25292786160097447,
      "bias": 19.99971308533614,
      "sigma": 6.677903932956354,
      "success": true,
      "mse": 1385.760284516349,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.8622741683535514,
      "bias": 0.8192017775189858,
      "sigma": 9.090215989734412,
      "success": true,
      "mse": 1230.0725702254388,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.6439974114609256,
      "bias": -32.1079998374725,
      "sigma": 52.222625386659544,
      "success": true,
      "mse": 5046.427664771554,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.31254004461561546,
      "bias": 1.9243420139758622,
      "sigma": 17.503432691378574,
      "success": true,
      "mse": 595.915077465909,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.6254702670702036,
      "bias": 26.803136283239713,
      "sigma": 7.594748340851412,
      "success": true,
      "mse": 2327.385212341819,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.3680233130784276,
      "bias": -11.252260686341353,
      "sigma": 31.922705119161463,
      "success": true,
      "mse": 1558.1924603664058,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.9286078682979173,
      "bias": -30.065932215673527,
      "sigma": 73.84605713077657,
      "success": true,
      "mse": 6858.8571749238445,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.43543653934903664,
      "bias": -41.91652597226375,
      "sigma": 2.472688874091865,
      "success": true,
      "mse": 373.4818877273713,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.7213602942521093,
      "bias": 7.891543296127214,
      "sigma": 62.44073915519092,
      "success": true,
      "mse": 3070.9830003739576,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.7399496690407161,
      "bias": 15.871889726452752,
      "sigma": 27.89434912856748,
      "success": true,
      "mse": 1148.225541099318,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.3162380468364014,
      "bias": -37.57731820503499,
      "sigma": 15.68465687879574,
      "success": true,
      "mse": 723.9805682719647,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.7063278592353376,
      "bias": 18.272937571493753,
      "sigma": 22.868516646237733,
      "success": true,
      "mse": 1748.0576780351762,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.7944094789669274,
      "bias": -48.095622262189764,
      "sigma": 38.880136181668895,
      "success": true,
      "mse": 3554.022947438285,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.4652337223468822,
      "bias": -33.297805649331465,
      "sigma": 5.576048157005363,
      "success": true,
      "mse": 765.0002144152911,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.425995555326591,
      "bias": -3.5495910914031943,
      "sigma": 19.733835518459234,
      "success": true,
      "mse": 879.0202255295318,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.9587694143802337,
      "bias": 34.35249784147384,
      "sigma": 18.444990958630598,
      "success": true,
      "mse": 2224.128858696893,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.8117199873036587,
      "bias": -47.91159763651763,
      "sigma": 13.375022756364466,
      "success": true,
      "mse": 1786.6437576082055,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.6012761930974413,
      "bias": -35.38465436996695,
      "sigma": 67.49716070430848,
      "success": true,
      "mse": 3603.160802959636,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.3394887008482054,
      "bias": -34.89720742112171,
      "sigma": 10.462152590749806,
      "success": true,
      "mse": 959.74807164836,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.5585706933586376,
      "bias": -32.98013062401433,
      "sigma": 71.68781915007976,
      "success": true,
      "mse": 9366.182204405899,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.5412084462185235,
      "bias": 3.5696472900473912,
      "sigma": 45.34958487379171,
      "success": true,
      "mse": 2673.298858926029,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.5922655406456873,
      "bias": 43.50845543064202,
      "sigma": 0.7632708493730077,
      "success": true,
      "mse": 2109.4228166043854,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.6540867190693002,
      "bias": 39.031592711566006,
      "sigma": 8.812580082193923,
      "success": true,
      "mse": 3745.0901453245256,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.7120926770675776,
      "bias": 19.821067621606076,
      "sigma": 44.7437078946446,
      "success": true,
      "mse": 3459.1873857285623,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.056331834500726985,
      "bias": -30.413551521614902,
      "sigma": 5.584457873640435,
      "success": true,
      "mse": 299.5642965064156,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.1678952413709545,
      "bias": -13.69718467563062,
      "sigma": 9.945316814744547,
      "success": true,
      "mse": 229.972139814366,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.05449456129240154,
      "bias": 8.71407649039897,
      "sigma": 68.96727219112977,
      "success": true,
      "mse": 4209.944900161695,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.31317662898107873,
      "bias": -39.829092790128165,
      "sigma": 25.856165860177303,
      "success": true,
      "mse": 3254.7607059262027,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.5813602136860899,
      "bias": -45.113933019824124,
      "sigma": 9.269411735758414,
      "success": true,
      "mse": 631.1123249579604,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.15139355499593132,
      "bias": -35.69886188897133,
      "sigma": 25.912609592474578,
      "success": true,
      "mse": 682.8708510059182,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.8211623711786586,
      "bias": -42.88055613499711,
      "sigma": 21.38667508592722,
      "success": true,
      "mse": 1390.536222423602,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.4039387529195117,
      "bias": 32.10877191021712,
      "sigma": 62.35341738969689,
      "success": true,
      "mse": 7119.429249304208,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.03330076158007813,
      "bias": 31.140952318516163,
      "sigma": 52.36748114090688,
      "success": true,
      "mse": 3020.285909703677,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.9712767272317006,
      "bias": -16.983813703164795,
      "sigma": 68.89958318769344,
      "success": true,
      "mse": 5525.12831389204,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.6289639113466856,
      "bias": -37.4419397561444,
      "sigma": 34.90564240852793,
      "success": true,
      "mse": 1772.1056015289214,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.4588806994163721,
      "bias": 2.0661332745024303,
      "sigma": 16.8149136494379,
      "success": true,
      "mse": 410.20514965559113,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.987646649929378,
      "bias": 42.63606604152662,
      "sigma": 36.852258527139035,
      "success": true,
      "mse": 5179.964044606414,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.21470342681993868,
      "bias": -14.205365630615793,
      "sigma": 31.561473935106363,
      "success": true,
      "mse": 1309.483417227734,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.2963697618103558,
      "bias": 15.436524523532738,
      "sigma": 27.587747420868496,
      "success": true,
      "mse": 571.7457438461774,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.7428791001140936,
      "bias": -36.55693540745233,
      "sigma": 16.299502154041555,
      "success": true,
      "mse": 583.1653869675204,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.22877605619866162,
      "bias": -19.673864207315358,
      "sigma": 13.116891156988627,
      "success": true,
      "mse": 359.82763870336424,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.2887624632755126,
      "bias": -32.51468619968825,
      "sigma": 82.31315282772363,
      "success": true,
      "mse": 4337.781204930933,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.16002000723853277,
      "bias": 26.94877462041233,
      "sigma": 30.40309648682766,
      "success": true,
      "mse": 3892.632034706644,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "w_merit": 0.10088565035387054,
      "bias": 28.253400605191995,
      "sigma": 23.80911695853379,
      "success": true,
      "mse": 1526.517607118499,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    }
  ],
  "recovery_warnings": [
    "Error in iteration 3: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 47: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 82: Error in parameter fitting: All optimization attempts failed. Errors: []"
  ],
  "parameter_recovery": {
    "correlations": {
      "w_merit": {
        "r": -0.09768031461578029,
        "p": 0.341174740797501
      },
      "bias": {
        "r": 0.1679948623666011,
        "p": 0.10000681456231209
      },
      "sigma": {
        "r": 0.15007054879839116,
        "p": 0.1423255690433191
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 542.8347288288918,
  "bic_Control": 547.5257487304856,
  "bic_Cocaine": 538.542944663604,
  "bic_results": {
    "average_bic": 542.8347288288918,
    "individual_bics": [
      527.7377310864771,
      501.4354016049913,
      595.8945552820039,
      578.2869292967397,
      588.4340855952984,
      554.9563131536178,
      596.5703048578306,
      520.1970813373758,
      506.15372633632916,
      521.3855452674842,
      579.5970196846104,
      537.5294363288327,
      608.9727849765426,
      652.0838356495453,
      566.348252141427,
      475.2392678159634,
      629.1574975422249,
      627.9047169693883,
      527.3482852826297,
      549.060833731356,
      568.7948702770296,
      489.40630160734474,
      529.1608491760215,
      479.99894372917737,
      593.5628299822821,
      545.7383989416732,
      529.4058095524421,
      606.404338667333,
      588.3409908029754,
      534.5571262309135,
      566.1054996600934,
      524.5173089834469,
      549.472062519962,
      563.9516832274887,
      535.4068324898088,
      439.7043713808233,
      429.5730408378823,
      598.7341838709716,
      443.8765316103346,
      561.7075700301467,
      521.9355575751041,
      584.2012766207689,
      514.7572136961861,
      611.2130631582637,
      611.2104191674913,
      563.0205650407635,
      525.4614219897975,
      519.3834580723241,
      591.3754371055986,
      482.4222139264763,
      551.9047424714482,
      531.4425764944281,
      607.0253091125721,
      458.59355229657376,
      566.0446095144974,
      515.8718314047618,
      492.3501994687802,
      537.306495450245,
      573.494816024816,
      495.1608891045537,
      502.2464105483805,
      549.5903575664814,
      538.4200085821459,
      574.1951110275519,
      506.72741934250706,
      622.9151102967438,
      558.9717016237813,
      546.8898590482867,
      576.1654565770234,
      572.115445308497,
      447.3459900591698,
      433.86307397261027,
      582.1326540609529,
      569.0087831259335,
      485.34888402907603,
      489.3688005821508,
      525.6368881714017,
      608.9269321035443,
      565.1956529617801,
      595.9973565529061,
      538.0033172055623,
      463.37673466317875,
      592.7074303807716,
      522.5739953069503,
      480.3106211135074,
      481.3192195508044,
      456.69408919137834,
      583.6582382013945,
      578.1360892793255,
      530.3951689521977
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        527.7377310864771,
        501.4354016049913,
        595.8945552820039,
        578.2869292967397,
        588.4340855952984,
        554.9563131536178,
        596.5703048578306,
        520.1970813373758,
        506.15372633632916,
        521.3855452674842,
        579.5970196846104,
        537.5294363288327,
        608.9727849765426,
        652.0838356495453,
        566.348252141427,
        475.2392678159634,
        629.1574975422249,
        627.9047169693883,
        527.3482852826297,
        549.060833731356,
        568.7948702770296,
        489.40630160734474,
        529.1608491760215,
        479.99894372917737,
        593.5628299822821,
        545.7383989416732,
        529.4058095524421,
        606.404338667333,
        588.3409908029754,
        534.5571262309135,
        566.1054996600934,
        524.5173089834469,
        549.472062519962,
        563.9516832274887,
        535.4068324898088,
        439.7043713808233,
        429.5730408378823,
        598.7341838709716,
        443.8765316103346,
        561.7075700301467,
        521.9355575751041,
        584.2012766207689,
        514.7572136961861
      ],
      "Cocaine": [
        611.2130631582637,
        611.2104191674913,
        563.0205650407635,
        525.4614219897975,
        519.3834580723241,
        591.3754371055986,
        482.4222139264763,
        551.9047424714482,
        531.4425764944281,
        607.0253091125721,
        458.59355229657376,
        566.0446095144974,
        515.8718314047618,
        492.3501994687802,
        537.306495450245,
        573.494816024816,
        495.1608891045537,
        502.2464105483805,
        549.5903575664814,
        538.4200085821459,
        574.1951110275519,
        506.72741934250706,
        622.9151102967438,
        558.9717016237813,
        546.8898590482867,
        576.1654565770234,
        572.115445308497,
        447.3459900591698,
        433.86307397261027,
        582.1326540609529,
        569.0087831259335,
        485.34888402907603,
        489.3688005821508,
        525.6368881714017,
        608.9269321035443,
        565.1956529617801,
        595.9973565529061,
        538.0033172055623,
        463.37673466317875,
        592.7074303807716,
        522.5739953069503,
        480.3106211135074,
        481.3192195508044,
        456.69408919137834,
        583.6582382013945,
        578.1360892793255,
        530.3951689521977
      ]
    },
    "num_parameters": 3,
    "prediction_type": "numerical",
    "bic_formula": "BIC calculated from MSE using Gaussian error assumption"
  },
  "recovery_summary": "Parameter Recovery:\n- w_merit: r = -0.098\n- bias: r = 0.168\n- sigma: r = 0.150",
  "previous_models": [
    "Specification: proposed_perc = w_merit * (100 * token_opp / (token_self + token_opp)) + (1 - w_merit) * 50 + bias + NormalNoise(0, sigma)\nSummary: A weighted fairness anchor model for proposer behavior: the predicted offer (as percent) is a convex combination of a meritocratic (contribution-based) and egalitarian (equal split) anchor, plus a general bias and Gaussian noise. This approach captures how proposers trade off fairness norms and personal benefit, using only two main learnable parameters and a noise parameter for flexibility and robust parameter recovery.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation\nBIC: 542.8347288288918\n\nParameter Recovery:\n- w_merit: r = -0.098\n- bias: r = 0.168\n- sigma: r = 0.150"
  ]
}