{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only Proposer behavior (specifically, your model should predict the value from 0 to 100 of proposed_perc when trial_role == 2)\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should directly predict a numerical value (not a binary choice). The model's predictions will be compared to actual values using mean squared error.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Let me think through this step by step:\n\n## Step 1: Identify the Key Psychological Mechanisms\n\n1. **Fairness Norm / Equity:** People are sensitive to fairness in distribution versus contribution. They may try to offer splits proportional to relative contributions.\n2. **Self-interest / Greed:** Proposers may prefer to keep more for themselves.\n3. **Strategic Acceptance Expectation:** Proposers may offer more when they expect the responder to reject low offers (e.g., if the proposal is much lower than the responder\u2019s contribution), to ensure acceptance.\n4. **Sensitivity to Magnitude:** The size of the total available reward (pot) may affect proposed percentages (though the main variable to predict is a percentage, not the raw value).\n5. **Noise / Randomness / Error:** Some variability in actual behavior due to inconsistency or lack of attention.\n\n## Step 2: Mechanism Interactions\n\n- The two main drivers are (1) matching offer to the opponent\u2019s contribution (\u201cproportional fairness\u201d), and (2) adjusting for self-interest/greed.\n- Strategic adjustment (i.e., offer more if you contribute less) can be captured by linking the offer to the *relative* contribution of each party.\n\n## Step 3: Mathematical Formulation Candidates\n\nWe want to predict `proposed_perc` (the percentage of the pot offered to the opponent, only when the participant is proposer).\n\nLet\u2019s define some useful ratios:\n- `contrib_opp = token_opp / (token_opp + token_self)`\n- `contrib_self = token_self / (token_opp + token_self)`\n\nA generic model for the offer could be:\n\n`proposed_perc = fairness_weight * (100 * contrib_opp) + self_bias + noise`\n\n- The \u201cfairness_weight\u201d parameter captures sensitivity to proportional fairness.\n- The \u201cself_bias\u201d parameter (or intercept) captures general tendency to be more or less generous regardless of contributions (e.g., greed).\n- We could also include a sensitivity to the total pot, but since we are predicting percent, that is less essential, and adding a scaling for combined_earning may cause identifiability/covariance issues (since percent already normalizes reward magnitude).\n\nStrategic concern, i.e., fear of rejection, could be captured by an additional scaling on how much the proposer under- or over-allocates relative to the fair share (i.e., offers slightly more than proportional when their token_self is low, for example). However, with only 14 proposer trials per participant, over-parameterization will severely worsen parameter recovery. Adding just one parameter (fairness sensitivity/self-bias) results in an interpretable, sufficient model for parameter recovery and accuracy, avoiding covariance.\n\n## Step 4: Parameters and Learnability\n\n- *fairness_weight* (learnable, [0, 2], default 1 is \u201cfully proportional,\u201d <1 is selfish, >1 is \u201chyper-fair\u201d), generous range to allow for hyper-fair or selfish weights.\n- *self_bias* (learnable, [-50, 50]), additive, for overall generosity/greed independent of contributions.\n- *noise_std* (learnable, [0, 50]), captures within-subject error; we include additive Gaussian noise to allow natural variability in trialwise offers, though if not desired as a primary parameter, can be fixed at 10 or similar value.\n\nAll variables are defined only when trial_role==2 (proposer).\n\n## Step 5: Observable Variables Mapping\n\n- Input: tokens contributed by self and opponent (token_self, token_opp), determines contribution ratio.\n- Output: proposed_perc (what percent to offer opponent).\n- Model: predicted by linear blend of proportional fairness and a participant-wise bias term.\n\n# Final Model (single fairness_weight, plus self_bias):\n\n## Model Formula\n\n<MODEL>\nproposed_perc_hat = fairness_weight * (100 * token_opp / (token_self + token_opp)) + self_bias + Normal(0, noise_std)\n</MODEL>\n\n## Variable Descriptions\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"proposed_perc_hat\": {\n      \"description\": \"Predicted percent of the pot offered to opponent as proposer, including noise.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Sensitivity to proportional fairness (weighting of the opponent's contribution in determining offer).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n            \"low\": 0,\n            \"high\": 2\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Tokens found by the opponent in the pretask.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Tokens found by the participant in the pretask.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"self_bias\": {\n      \"description\": \"General bias toward generosity or selfishness, regardless of proportional fairness (positive = more generous, negative = more selfish).\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n            \"low\": -50,\n            \"high\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"noise_std\": {\n      \"description\": \"Standard deviation of normally distributed noise in offers.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n            \"low\": 0,\n            \"high\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA model of proposer behavior in which offers are determined by a weighted proportionality to the opponent\u2019s contribution, adjusted by an individual bias term, and incorporating Gaussian noise. This captures fairness sensitivity and idiosyncratic generosity or selfishness using only two key learnable parameters (plus noise), optimizing parameter identifiability from limited data while leveraging all relevant task variables.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['fairness_weight', 'self_bias', 'noise_std']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                proposed_perc_hat = fairness_weight * (100 * token_opp / (token_self + token_opp)) + self_bias + Normal(0, noise_std)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"proposed_perc_hat\": {\n      \"description\": \"Predicted percent of the pot offered to opponent as proposer, including noise.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Sensitivity to proportional fairness (weighting of the opponent's contribution in determining offer).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 2\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Tokens found by the opponent in the pretask.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Tokens found by the participant in the pretask.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"self_bias\": {\n      \"description\": \"General bias toward generosity or selfishness, regardless of proportional fairness (positive = more generous, negative = more selfish).\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -50,\n          \"high\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"noise_std\": {\n      \"description\": \"Standard deviation of normally distributed noise in offers.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0,\n          \"high\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "\n```python\nimport json\nimport math\nimport random\n\ndef simulate_model(trial_data, fairness_weight=1.0, self_bias=0.0, noise_std=1.0):\n    \"\"\"\n    Simulates the model: proposed_perc_hat = fairness_weight * (100 * token_opp / (token_self + token_opp)) + self_bias + Normal(0, noise_std)\n\n    Args:\n        trial_data (list of dict): List of dictionaries, where each dictionary represents a trial and contains\n                                     'token_opp' and 'token_self'.\n        fairness_weight (float): Sensitivity to proportional fairness.\n        self_bias (float): General bias toward generosity or selfishness.\n        noise_std (float): Standard deviation of normally distributed noise.\n\n    Returns:\n        list: A list of model predictions (proposed_perc_hat) for each trial.\n    \"\"\"\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        # Calculate the proportional fairness component\n        if (token_self + token_opp) == 0:\n            proportional_fairness = 0  # Handle the case where both are zero to avoid division by zero\n        else:\n            proportional_fairness = 100 * token_opp / (token_self + token_opp)\n\n        # Add noise (using Box-Muller transform for Gaussian approximation)\n        u1 = random.random()\n        u2 = random.random()\n        z = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)  # Box-Muller transform\n        noise = noise_std * z\n\n        # Calculate the predicted percentage\n        predicted_perc = fairness_weight * proportional_fairness + self_bias + noise\n\n        model_predictions.append(predicted_perc)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 2, \"token_opp\": 500, \"token_self\": 500, \"combined_earning\": 1000, \"split_opp\": 500.0, \"split_self\": 500.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 500.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 500.0}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 2, \"token_opp\": 250, \"token_self\": 750, \"combined_earning\": 1000, \"split_opp\": 250.0, \"split_self\": 750.0, \"splitperc_opp\": 25, \"splitperc_self\": 75, \"accept\": 1.0, \"accepted_amount\": 250.0, \"accepted_perc\": 25.0, \"proposed_perc\": 25.0, \"proposed_amount\": 250.0}, {\"ID\": 3, \"group\": \"control\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 2, \"token_opp\": 750, \"token_self\": 250, \"combined_earning\": 1000, \"split_opp\": 750.0, \"split_self\": 250.0, \"splitperc_opp\": 75, \"splitperc_self\": 25, \"accept\": 1.0, \"accepted_amount\": 750.0, \"accepted_perc\": 75.0, \"proposed_perc\": 75.0, \"proposed_amount\": 750.0}, {\"ID\": 4, \"group\": \"control\", \"trial_number\": 4, \"trial_type\": 1, \"trial_role\": 2, \"token_opp\": 1000, \"token_self\": 0, \"combined_earning\": 1000, \"split_opp\": 1000.0, \"split_self\": 0.0, \"splitperc_opp\": 100, \"splitperc_self\": 0, \"accept\": 1.0, \"accepted_amount\": 1000.0, \"accepted_perc\": 100.0, \"proposed_perc\": 100.0, \"proposed_amount\": 1000.0}, {\"ID\": 5, \"group\": \"control\", \"trial_number\": 5, \"trial_type\": 1, \"trial_role\": 2, \"token_opp\": 0, \"token_self\": 1000, \"combined_earning\": 1000, \"split_opp\": 0.0, \"split_self\": 1000.0, \"splitperc_opp\": 0, \"splitperc_self\": 100, \"accept\": 1.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 0.0, \"proposed_amount\": 0.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744731378.952689
    }
  ],
  "learnable_parameters": {
    "fairness_weight": {
      "description": "Sensitivity to proportional fairness (weighting of the opponent's contribution in determining offer).",
      "range": {
        "min": 0,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 2
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "self_bias": {
      "description": "General bias toward generosity or selfishness, regardless of proportional fairness (positive = more generous, negative = more selfish).",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -50,
          "high": 50
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "noise_std": {
      "description": "Standard deviation of normally distributed noise in offers.",
      "range": {
        "min": 0,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 50
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "proposed_perc_hat = fairness_weight * (100 * token_opp / (token_self + token_opp)) + self_bias + Normal(0, noise_std)",
  "variable_descriptions": {
    "proposed_perc_hat": {
      "description": "Predicted percent of the pot offered to opponent as proposer, including noise.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fairness_weight": {
      "description": "Sensitivity to proportional fairness (weighting of the opponent's contribution in determining offer).",
      "range": {
        "min": 0,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 2
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "token_opp": {
      "description": "Tokens found by the opponent in the pretask.",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Tokens found by the participant in the pretask.",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "self_bias": {
      "description": "General bias toward generosity or selfishness, regardless of proportional fairness (positive = more generous, negative = more selfish).",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -50,
          "high": 50
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "noise_std": {
      "description": "Standard deviation of normally distributed noise in offers.",
      "range": {
        "min": 0,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0,
          "high": 50
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A model of proposer behavior in which offers are determined by a weighted proportionality to the opponent\u2019s contribution, adjusted by an individual bias term, and incorporating Gaussian noise. This captures fairness sensitivity and idiosyncratic generosity or selfishness using only two key learnable parameters (plus noise), optimizing parameter identifiability from limited data while leveraging all relevant task variables.",
  "target_variable": "proposed_perc",
  "full_reasoning": "Let me think through this step by step:\n\n## Step 1: Identify the Key Psychological Mechanisms\n\n1. **Fairness Norm / Equity:** People are sensitive to fairness in distribution versus contribution. They may try to offer splits proportional to relative contributions.\n2. **Self-interest / Greed:** Proposers may prefer to keep more for themselves.\n3. **Strategic Acceptance Expectation:** Proposers may offer more when they expect the responder to reject low offers (e.g., if the proposal is much lower than the responder\u2019s contribution), to ensure acceptance.\n4. **Sensitivity to Magnitude:** The size of the total available reward (pot) may affect proposed percentages (though the main variable to predict is a percentage, not the raw value).\n5. **Noise / Randomness / Error:** Some variability in actual behavior due to inconsistency or lack of attention.\n\n## Step 2: Mechanism Interactions\n\n- The two main drivers are (1) matching offer to the opponent\u2019s contribution (\u201cproportional fairness\u201d), and (2) adjusting for self-interest/greed.\n- Strategic adjustment (i.e., offer more if you contribute less) can be captured by linking the offer to the *relative* contribution of each party.\n\n## Step 3: Mathematical Formulation Candidates\n\nWe want to predict `proposed_perc` (the percentage of the pot offered to the opponent, only when the participant is proposer).\n\nLet\u2019s define some useful ratios:\n- `contrib_opp = token_opp / (token_opp + token_self)`\n- `contrib_self = token_self / (token_opp + token_self)`\n\nA generic model for the offer could be:\n\n`proposed_perc = fairness_weight * (100 * contrib_opp) + self_bias + noise`\n\n- The \u201cfairness_weight\u201d parameter captures sensitivity to proportional fairness.\n- The \u201cself_bias\u201d parameter (or intercept) captures general tendency to be more or less generous regardless of contributions (e.g., greed).\n- We could also include a sensitivity to the total pot, but since we are predicting percent, that is less essential, and adding a scaling for combined_earning may cause identifiability/covariance issues (since percent already normalizes reward magnitude).\n\nStrategic concern, i.e., fear of rejection, could be captured by an additional scaling on how much the proposer under- or over-allocates relative to the fair share (i.e., offers slightly more than proportional when their token_self is low, for example). However, with only 14 proposer trials per participant, over-parameterization will severely worsen parameter recovery. Adding just one parameter (fairness sensitivity/self-bias) results in an interpretable, sufficient model for parameter recovery and accuracy, avoiding covariance.\n\n## Step 4: Parameters and Learnability\n\n- *fairness_weight* (learnable, [0, 2], default 1 is \u201cfully proportional,\u201d <1 is selfish, >1 is \u201chyper-fair\u201d), generous range to allow for hyper-fair or selfish weights.\n- *self_bias* (learnable, [-50, 50]), additive, for overall generosity/greed independent of contributions.\n- *noise_std* (learnable, [0, 50]), captures within-subject error; we include additive Gaussian noise to allow natural variability in trialwise offers, though if not desired as a primary parameter, can be fixed at 10 or similar value.\n\nAll variables are defined only when trial_role==2 (proposer).\n\n## Step 5: Observable Variables Mapping\n\n- Input: tokens contributed by self and opponent (token_self, token_opp), determines contribution ratio.\n- Output: proposed_perc (what percent to offer opponent).\n- Model: predicted by linear blend of proportional fairness and a participant-wise bias term.\n\n# Final Model (single fairness_weight, plus self_bias):\n\n## Model Formula\n\n<MODEL>\nproposed_perc_hat = fairness_weight * (100 * token_opp / (token_self + token_opp)) + self_bias + Normal(0, noise_std)\n</MODEL>\n\n## Variable Descriptions\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"proposed_perc_hat\": {\n      \"description\": \"Predicted percent of the pot offered to opponent as proposer, including noise.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_weight\": {\n      \"description\": \"Sensitivity to proportional fairness (weighting of the opponent's contribution in determining offer).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n            \"low\": 0,\n            \"high\": 2\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_opp\": {\n      \"description\": \"Tokens found by the opponent in the pretask.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Tokens found by the participant in the pretask.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"self_bias\": {\n      \"description\": \"General bias toward generosity or selfishness, regardless of proportional fairness (positive = more generous, negative = more selfish).\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n            \"low\": -50,\n            \"high\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"noise_std\": {\n      \"description\": \"Standard deviation of normally distributed noise in offers.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n            \"low\": 0,\n            \"high\": 50\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>proposed_perc</target_variable>\n\n<SUMMARY>\nA model of proposer behavior in which offers are determined by a weighted proportionality to the opponent\u2019s contribution, adjusted by an individual bias term, and incorporating Gaussian noise. This captures fairness sensitivity and idiosyncratic generosity or selfishness using only two key learnable parameters (plus noise), optimizing parameter identifiability from limited data while leveraging all relevant task variables.\n</SUMMARY>",
  "prediction_type": "numerical_variable_estimation",
  "current_model": "Specification: proposed_perc_hat = fairness_weight * (100 * token_opp / (token_self + token_opp)) + self_bias + Normal(0, noise_std)\nSummary: A model of proposer behavior in which offers are determined by a weighted proportionality to the opponent\u2019s contribution, adjusted by an individual bias term, and incorporating Gaussian noise. This captures fairness sensitivity and idiosyncratic generosity or selfishness using only two key learnable parameters (plus noise), optimizing parameter identifiability from limited data while leveraging all relevant task variables.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, fairness_weight=1.0, self_bias=0.0, noise_std=1.0):\n    \"\"\"\n    Simulates the model: proposed_perc_hat = fairness_weight * (100 * token_opp / (token_self + token_opp)) + self_bias + Normal(0, noise_std)\n\n    Args:\n        trial_data (list of dict): List of dictionaries, where each dictionary represents a trial and contains\n                                     'token_opp' and 'token_self'.\n        fairness_weight (float): Sensitivity to proportional fairness.\n        self_bias (float): General bias toward generosity or selfishness.\n        noise_std (float): Standard deviation of normally distributed noise.\n\n    Returns:\n        list: A list of model predictions (proposed_perc_hat) for each trial.\n    \"\"\"\n    model_predictions = []\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        # Calculate the proportional fairness component\n        if (token_self + token_opp) == 0:\n            proportional_fairness = 0  # Handle the case where both are zero to avoid division by zero\n        else:\n            proportional_fairness = 100 * token_opp / (token_self + token_opp)\n\n        # Add noise (using Box-Muller transform for Gaussian approximation)\n        u1 = random.random()\n        u2 = random.random()\n        z = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)  # Box-Muller transform\n        noise = noise_std * z\n\n        # Calculate the predicted percentage\n        predicted_perc = fairness_weight * proportional_fairness + self_bias + noise\n\n        model_predictions.append(predicted_perc)\n\n    return model_predictions",
  "total_retries": 0,
  "fitting_warnings": [
    "Error fitting participant 1009: Error in parameter fitting: All optimization attempts failed. Errors: []"
  ],
  "skipped_participants": [
    {
      "participant_id": null,
      "error": "Error in parameter fitting: All optimization attempts failed. Errors: []"
    }
  ],
  "num_skipped_participants": 1,
  "group_parameter_averages": {
    "Control": {
      "fairness_weight": 0.9943736783582057,
      "self_bias": -3.53066991482318,
      "noise_std": 23.190324316254564
    },
    "Cocaine": {
      "fairness_weight": 1.002468016264185,
      "self_bias": -6.568997380891585,
      "noise_std": 18.246731653216763
    }
  },
  "fitting_results": [
    {
      "fairness_weight": 1.9423804407222571,
      "self_bias": -14.361626171948394,
      "noise_std": 28.323070444129236,
      "success": true,
      "mse": 2692.2260911484586,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.7444859301886666,
      "self_bias": -34.32094112159767,
      "noise_std": 35.541599926506045,
      "success": true,
      "mse": 1188.8479940173752,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6708370492593869,
      "self_bias": 17.629847742813293,
      "noise_std": 20.943630841628657,
      "success": true,
      "mse": 579.8501256034064,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6635678100603953,
      "self_bias": 40.81158729887297,
      "noise_std": 33.840674867332474,
      "success": true,
      "mse": 1259.1195743737721,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.769391453150866,
      "self_bias": -20.641007531893695,
      "noise_std": 5.1969173592995315,
      "success": true,
      "mse": 720.8528781174198,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.787866821363913,
      "self_bias": 14.139296200872321,
      "noise_std": 19.742263696058703,
      "success": true,
      "mse": 4375.999392324657,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7323372763224174,
      "self_bias": 17.350457051708577,
      "noise_std": 42.71031527203366,
      "success": true,
      "mse": 1886.0751923090208,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9247940980579266,
      "self_bias": -48.63322440327667,
      "noise_std": 42.40645075640228,
      "success": true,
      "mse": 5157.159386233402,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7599957311919507,
      "self_bias": 24.541689804639237,
      "noise_std": 11.481255234014926,
      "success": true,
      "mse": 263.5369242992939,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.8548573242107494,
      "self_bias": 16.730627899764514,
      "noise_std": 2.4204896975613073,
      "success": true,
      "mse": 210.10650026058423,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.9705624690670742,
      "self_bias": -48.17577003482445,
      "noise_std": 3.494032730703968,
      "success": true,
      "mse": 692.3236199543509,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4006419804371277,
      "self_bias": 40.27112730888908,
      "noise_std": 9.443905818252924,
      "success": true,
      "mse": 386.9822384334828,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6949735114001069,
      "self_bias": -43.70622485454915,
      "noise_std": 11.49511948640162,
      "success": true,
      "mse": 3387.4495539283666,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.142406404336293,
      "self_bias": 19.22516310300687,
      "noise_std": 24.9558454274242,
      "success": true,
      "mse": 1252.1503467394846,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.8320182122436295,
      "self_bias": 29.164775151497967,
      "noise_std": 9.303281377637987,
      "success": true,
      "mse": 5823.725009323846,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7187669460339291,
      "self_bias": -17.81350161397864,
      "noise_std": 21.106564332709038,
      "success": true,
      "mse": 2006.9186276790977,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9117212591280782,
      "self_bias": -39.406492315650276,
      "noise_std": 35.895015037933845,
      "success": true,
      "mse": 2737.104534708456,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.0858014227962318,
      "self_bias": -5.222449948044666,
      "noise_std": 30.925206640793498,
      "success": true,
      "mse": 962.9802621324523,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.8048930545893954,
      "self_bias": 8.801767843213836,
      "noise_std": 31.75993470176026,
      "success": true,
      "mse": 1284.7700148251436,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9926827963021576,
      "self_bias": -16.66910839212402,
      "noise_std": 4.241333622832899,
      "success": true,
      "mse": 167.64171010740455,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.8637311797132659,
      "self_bias": 32.826382554698995,
      "noise_std": 7.260706709088367,
      "success": true,
      "mse": 8636.00281459948,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.0911512487858308,
      "self_bias": -46.05831542642835,
      "noise_std": 11.338568113970203,
      "success": true,
      "mse": 646.5313855740211,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6077898382231259,
      "self_bias": -14.231276647921867,
      "noise_std": 21.361787731466052,
      "success": true,
      "mse": 1566.0492440804387,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.2579474447756056,
      "self_bias": 5.005892313652646,
      "noise_std": 31.438459195256875,
      "success": true,
      "mse": 1916.083268074674,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.8348009933483679,
      "self_bias": -31.6408893871504,
      "noise_std": 13.883750341854077,
      "success": true,
      "mse": 1436.385089622763,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.6724878588055085,
      "self_bias": -41.24922372123985,
      "noise_std": 8.964458090544605,
      "success": true,
      "mse": 940.2831517077551,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.13636643727478,
      "self_bias": -10.678484750176773,
      "noise_std": 41.303661184865575,
      "success": true,
      "mse": 2170.303814469689,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.7980701632799705,
      "self_bias": 7.888853795647546,
      "noise_std": 16.51307354420333,
      "success": true,
      "mse": 5138.389608515952,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.16625059028420316,
      "self_bias": 31.919336254546153,
      "noise_std": 41.4747543087264,
      "success": true,
      "mse": 1334.44636710143,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4013881804807996,
      "self_bias": 17.307968847641384,
      "noise_std": 37.32893919191968,
      "success": true,
      "mse": 1202.9006256470163,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.2126984150202742,
      "self_bias": -7.673677444238739,
      "noise_std": 13.562887356528062,
      "success": true,
      "mse": 416.56374399973777,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.17264859318657982,
      "self_bias": -18.36888292882113,
      "noise_std": 14.028775353914265,
      "success": true,
      "mse": 1804.6290795788855,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.4490678388139042,
      "self_bias": -16.57805750253133,
      "noise_std": 5.593271006652079,
      "success": true,
      "mse": 665.40705169072,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7622050978026499,
      "self_bias": 4.571032859901332,
      "noise_std": 36.67931468721692,
      "success": true,
      "mse": 1309.9434536428782,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4750222425764885,
      "self_bias": -26.999825401963456,
      "noise_std": 28.137675537896367,
      "success": true,
      "mse": 1891.786984377735,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.1625459863484993,
      "self_bias": -39.82273272603393,
      "noise_std": 32.769788872660655,
      "success": true,
      "mse": 1751.314226003878,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.32205221451843663,
      "self_bias": -14.180835149114785,
      "noise_std": 42.09368150875279,
      "success": true,
      "mse": 3687.3090412228034,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.4045633905659591,
      "self_bias": -9.326012592978499,
      "noise_std": 11.836948856910299,
      "success": true,
      "mse": 999.9414899078217,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.430779761040529,
      "self_bias": 46.422901006381075,
      "noise_std": 41.69134886720403,
      "success": true,
      "mse": 7059.778450870157,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6117075621804922,
      "self_bias": -23.347134996267172,
      "noise_std": 8.802075846675088,
      "success": true,
      "mse": 751.3175444169422,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.32820401452318815,
      "self_bias": 18.95253879032609,
      "noise_std": 42.428431041522906,
      "success": true,
      "mse": 1610.5594680278498,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.19723344863362707,
      "self_bias": 47.25631281210646,
      "noise_std": 40.27435666344606,
      "success": true,
      "mse": 1266.6358696813684,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.3858987847463005,
      "self_bias": -22.121061090914445,
      "noise_std": 7.6857308356949465,
      "success": true,
      "mse": 1403.7958778875698,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.8039424601514479,
      "self_bias": 23.53453715824885,
      "noise_std": 20.136868045087223,
      "success": true,
      "mse": 1006.6477269494268,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.49709980112010255,
      "self_bias": -23.350043456053932,
      "noise_std": 19.488310620445482,
      "success": true,
      "mse": 857.61041229672,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7840611127315167,
      "self_bias": -47.04928725546389,
      "noise_std": 8.694034817471241,
      "success": true,
      "mse": 2421.632096776212,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.0556393124632713,
      "self_bias": 27.029926173539735,
      "noise_std": 30.462000265168715,
      "success": true,
      "mse": 4264.000619121393,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.5968170104707264,
      "self_bias": -36.374737847100214,
      "noise_std": 3.9905162438370736,
      "success": true,
      "mse": 384.5764575511058,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5562146008096605,
      "self_bias": -0.7185495648335787,
      "noise_std": 16.046086280333153,
      "success": true,
      "mse": 700.494308252728,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.8465628869879775,
      "self_bias": -46.807821949670114,
      "noise_std": 4.277759680103436,
      "success": true,
      "mse": 802.3427416423588,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.175470398350782,
      "self_bias": 33.608823814702774,
      "noise_std": 18.883966965338555,
      "success": true,
      "mse": 4921.128021327069,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7650103976034973,
      "self_bias": 14.608175001270851,
      "noise_std": 17.24755051157894,
      "success": true,
      "mse": 809.5151686776347,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.031762250496911,
      "self_bias": -14.802952984210807,
      "noise_std": 24.056672149019384,
      "success": true,
      "mse": 1157.5111950953494,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6887006224094641,
      "self_bias": -36.326958059723765,
      "noise_std": 12.980201079598663,
      "success": true,
      "mse": 2667.747326364304,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.0129396307925942,
      "self_bias": 17.76226160844298,
      "noise_std": 37.96344052398551,
      "success": true,
      "mse": 2146.1038539622728,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.4525179352487938,
      "self_bias": -10.719983442764047,
      "noise_std": 11.689177600121065,
      "success": true,
      "mse": 1593.9022594802896,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5771043588607674,
      "self_bias": 17.25649246343749,
      "noise_std": 5.298669933665216,
      "success": true,
      "mse": 240.77813916124867,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9046127392475608,
      "self_bias": -33.63308295749025,
      "noise_std": 28.06537021277601,
      "success": true,
      "mse": 1753.2866385674392,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.8883375214824147,
      "self_bias": -48.77017306328373,
      "noise_std": 30.78117744270337,
      "success": true,
      "mse": 953.5795571114703,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.0548440241682946,
      "self_bias": 16.36559334629189,
      "noise_std": 30.507442729043646,
      "success": true,
      "mse": 2603.635161287496,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.2032597853471922,
      "self_bias": -36.53849125421291,
      "noise_std": 0.7676549099720841,
      "success": true,
      "mse": 622.5200558374671,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.482838411389931,
      "self_bias": -34.042005228502305,
      "noise_std": 14.080910996107699,
      "success": true,
      "mse": 1012.7240362474562,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.6191570566099494,
      "self_bias": 2.7769855593878523,
      "noise_std": 1.6727250346830833,
      "success": true,
      "mse": 4009.7424573235908,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9840804460925137,
      "self_bias": -5.612840338817739,
      "noise_std": 11.534266688270254,
      "success": true,
      "mse": 399.65101305615013,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3113593238604051,
      "self_bias": -19.17035537848701,
      "noise_std": 29.641096696244567,
      "success": true,
      "mse": 2422.253078804644,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4412178288805785,
      "self_bias": 30.980039792207307,
      "noise_std": 21.017288446716055,
      "success": true,
      "mse": 545.4124549628139,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.8640982698396469,
      "self_bias": 24.6743867274415,
      "noise_std": 20.993990839052152,
      "success": true,
      "mse": 1018.6232355734144,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.4100604755412272,
      "self_bias": 8.896708163145137,
      "noise_std": 16.083406463726657,
      "success": true,
      "mse": 4266.064993769257,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.156099685084405,
      "self_bias": -12.399415765816828,
      "noise_std": 34.16765651116187,
      "success": true,
      "mse": 1738.6586237328447,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.129871509932231,
      "self_bias": -14.050445505602811,
      "noise_std": 47.39951752641241,
      "success": true,
      "mse": 2104.058152778858,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6797693878087664,
      "self_bias": -30.108649853981778,
      "noise_std": 26.58596986965505,
      "success": true,
      "mse": 1865.7635427942373,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.3219114668173132,
      "self_bias": 13.298023398032031,
      "noise_std": 11.044482268620595,
      "success": true,
      "mse": 162.08301542962857,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.1453671542357142,
      "self_bias": 7.40135637984331,
      "noise_std": 1.400443926133864,
      "success": true,
      "mse": 469.2378308144965,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5366346497981453,
      "self_bias": -20.05892657148708,
      "noise_std": 20.60743366422737,
      "success": true,
      "mse": 1057.1079580323876,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.0146967409944398,
      "self_bias": -14.35534824286312,
      "noise_std": 32.23812096325697,
      "success": true,
      "mse": 863.4349059304843,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.4893581063974476,
      "self_bias": 1.852981381067299,
      "noise_std": 5.73295201418112,
      "success": true,
      "mse": 175.52698980788438,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.3795419275443253,
      "self_bias": -29.984318191901373,
      "noise_std": 5.660563070211223,
      "success": true,
      "mse": 686.026969907731,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.5599642044532236,
      "self_bias": -10.630697395007893,
      "noise_std": 48.99752372420679,
      "success": true,
      "mse": 2696.452179158286,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.8577367185767741,
      "self_bias": 0.5403187016945825,
      "noise_std": 8.961734135103992,
      "success": true,
      "mse": 2895.7348567488934,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7074101355846721,
      "self_bias": -16.296304599731,
      "noise_std": 19.452011819068193,
      "success": true,
      "mse": 1165.0585047139648,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.335089050346369,
      "self_bias": 13.196210489720466,
      "noise_std": 8.724013708247806,
      "success": true,
      "mse": 153.97606965525964,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.06547139289103514,
      "self_bias": -31.517346104790857,
      "noise_std": 29.842540708551425,
      "success": true,
      "mse": 6987.606013801443,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9165813934401286,
      "self_bias": 24.006079220493362,
      "noise_std": 29.14051124713308,
      "success": true,
      "mse": 756.6279910899643,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.4711561594357259,
      "self_bias": 30.847414206523805,
      "noise_std": 4.545488263763359,
      "success": true,
      "mse": 5272.892436702783,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.9482769613116222,
      "self_bias": -3.6803431011786065,
      "noise_std": 12.751466472890524,
      "success": true,
      "mse": 367.0190193533412,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.876290529279827,
      "self_bias": 28.13222953586972,
      "noise_std": 18.038099761810354,
      "success": true,
      "mse": 9740.357218505347,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.5951145349738309,
      "self_bias": 1.5189388935730388,
      "noise_std": 1.0585607435166355,
      "success": true,
      "mse": 275.2066167607235,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.7241696591756804,
      "self_bias": -13.351454501565959,
      "noise_std": 46.49604765910482,
      "success": true,
      "mse": 3385.133063903048,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 0.6074670721752036,
      "self_bias": -18.50069418875356,
      "noise_std": 8.374612933271369,
      "success": true,
      "mse": 747.2572427081051,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "fairness_weight": 1.2068788947204743,
      "self_bias": -22.627068403520504,
      "noise_std": 10.577052353131693,
      "success": true,
      "mse": 565.3963751719501,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    }
  ],
  "recovery_warnings": [
    "Error in iteration 20: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 48: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 78: Error in parameter fitting: All optimization attempts failed. Errors: []"
  ],
  "parameter_recovery": {
    "correlations": {
      "fairness_weight": {
        "r": 0.21533840721486108,
        "p": 0.03415288137217312
      },
      "self_bias": {
        "r": 0.07177409196881872,
        "p": 0.48478285038342533
      },
      "noise_std": {
        "r": -0.05161757205824752,
        "p": 0.6155840445165777
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 521.0324434346984,
  "bic_Control": 525.6581869738073,
  "bic_Cocaine": 516.984917837978,
  "bic_results": {
    "average_bic": 521.0324434346984,
    "individual_bics": [
      559.3315146360326,
      517.6449495783507,
      481.02846025188126,
      520.5737755506885,
      492.1293955450551,
      584.1056077521023,
      541.1821271694814,
      592.4824085027635,
      440.8110751899918,
      429.2555491443801,
      490.0699360498876,
      460.4045259042971,
      571.0466685206878,
      520.2907064000335,
      598.6816712548115,
      544.3493532747106,
      560.1746582606382,
      506.8988859684143,
      521.6022925156354,
      417.7404875128755,
      618.7756582800669,
      486.5799162259108,
      531.6990846983434,
      541.9871665477472,
      527.2913362628914,
      505.6824410964683,
      548.3409518985794,
      592.296452469798,
      523.537067990021,
      518.244253747938,
      464.1612216174904,
      538.9308353172006,
      488.04755430624334,
      522.5919090404274,
      541.3363422275436,
      537.4014176242255,
      575.3724701927287,
      508.8197424111366,
      608.4978236890638,
      494.24045523530333,
      533.1283888426021,
      520.8773141954582,
      526.1209018677561,
      509.16063865404305,
      500.9888537888482,
      553.9292548963926,
      582.7833259482424,
      460.08648082678815,
      490.6683055495439,
      497.59153692183673,
      590.0931531326272,
      498.0454183598967,
      516.2826076278646,
      558.8656818468361,
      547.769082412469,
      532.5981748099385,
      436.20487946512134,
      537.4588239054254,
      506.398573067961,
      557.6250654955347,
      484.64977543271556,
      509.4675585735152,
      579.6478042347692,
      462.04738393033637,
      553.9423312111588,
      477.9058649182261,
      509.76377578421705,
      582.8080111297812,
      537.0315359244145,
      546.7599911291335,
      540.6299156705677,
      416.0207481751028,
      470.23380412008413,
      511.65510524796713,
      501.3340513339112,
      420.0846410622534,
      489.60397131110614,
      559.4115084756635,
      563.0479111955823,
      516.6140630373012,
      413.4038644080448,
      607.9737650378072,
      494.5996643626565,
      593.6142586475836,
      457.70330448375375,
      624.9128939251889,
      443.0208368958857,
      571.0117805015775,
      493.96409145866596,
      479.74108602684714
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        559.3315146360326,
        517.6449495783507,
        481.02846025188126,
        520.5737755506885,
        492.1293955450551,
        584.1056077521023,
        541.1821271694814,
        592.4824085027635,
        440.8110751899918,
        429.2555491443801,
        490.0699360498876,
        460.4045259042971,
        571.0466685206878,
        520.2907064000335,
        598.6816712548115,
        544.3493532747106,
        560.1746582606382,
        506.8988859684143,
        521.6022925156354,
        417.7404875128755,
        618.7756582800669,
        486.5799162259108,
        531.6990846983434,
        541.9871665477472,
        527.2913362628914,
        505.6824410964683,
        548.3409518985794,
        592.296452469798,
        523.537067990021,
        518.244253747938,
        464.1612216174904,
        538.9308353172006,
        488.04755430624334,
        522.5919090404274,
        541.3363422275436,
        537.4014176242255,
        575.3724701927287,
        508.8197424111366,
        608.4978236890638,
        494.24045523530333,
        533.1283888426021,
        520.8773141954582
      ],
      "Cocaine": [
        526.1209018677561,
        509.16063865404305,
        500.9888537888482,
        553.9292548963926,
        582.7833259482424,
        460.08648082678815,
        490.6683055495439,
        497.59153692183673,
        590.0931531326272,
        498.0454183598967,
        516.2826076278646,
        558.8656818468361,
        547.769082412469,
        532.5981748099385,
        436.20487946512134,
        537.4588239054254,
        506.398573067961,
        557.6250654955347,
        484.64977543271556,
        509.4675585735152,
        579.6478042347692,
        462.04738393033637,
        553.9423312111588,
        477.9058649182261,
        509.76377578421705,
        582.8080111297812,
        537.0315359244145,
        546.7599911291335,
        540.6299156705677,
        416.0207481751028,
        470.23380412008413,
        511.65510524796713,
        501.3340513339112,
        420.0846410622534,
        489.60397131110614,
        559.4115084756635,
        563.0479111955823,
        516.6140630373012,
        413.4038644080448,
        607.9737650378072,
        494.5996643626565,
        593.6142586475836,
        457.70330448375375,
        624.9128939251889,
        443.0208368958857,
        571.0117805015775,
        493.96409145866596,
        479.74108602684714
      ]
    },
    "num_parameters": 3,
    "prediction_type": "numerical",
    "bic_formula": "BIC calculated from MSE using Gaussian error assumption"
  },
  "recovery_summary": "Parameter Recovery:\n- fairness_weight: r = 0.215\n- self_bias: r = 0.072\n- noise_std: r = -0.052",
  "previous_models": [
    "Specification: proposed_perc_hat = fairness_weight * (100 * token_opp / (token_self + token_opp)) + self_bias + Normal(0, noise_std)\nSummary: A model of proposer behavior in which offers are determined by a weighted proportionality to the opponent\u2019s contribution, adjusted by an individual bias term, and incorporating Gaussian noise. This captures fairness sensitivity and idiosyncratic generosity or selfishness using only two key learnable parameters (plus noise), optimizing parameter identifiability from limited data while leveraging all relevant task variables.\nTarget Variable: proposed_perc\nPrediction Type: numerical_variable_estimation\nBIC: 521.0324434346984\n\nParameter Recovery:\n- fairness_weight: r = 0.215\n- self_bias: r = 0.072\n- noise_std: r = -0.052"
  ]
}