{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Based on previous attempts, models incorporating simple linear terms for self-interest (based on `split_perc_self`) and disadvantageous inequity (based on the difference between `split_perc_self` and a contribution-based `deserved_perc_self`) have struggled with parameter recovery, particularly in disentangling these two effects.\n\nYour primary goal for this run is to design a model that significantly improves **parameter recovery** (aiming for correlations > 0.7 for *all* learnable parameters) while also maintaining or improving BIC and accuracy compared to a baseline BIC of ~44 and accuracy of ~0.69.\n\nTo achieve this, consider the following:\n\n1.  **Rethink Functional Form:** Move beyond simple linear additions. Explore alternative mathematical structures:\n    *   Could fairness be better represented by a **ratio** (e.g., `split_perc_self / deserved_perc_self`) instead of a difference? How would you handle division by zero if `deserved_perc_self` is 0?\n    *   Are there **non-linear** effects? (e.g., sensitivity to unfairness might increase sharply below a certain threshold, or sensitivity to the offered amount might diminish at higher levels).\n    *   Could there be **interaction terms** between the offered amount and the perceived fairness level? Perhaps the weight given to fairness depends on the stakes?\n    *   Consider incorporating **absolute amounts** (`split_self`, `combined_earning`) perhaps alongside or instead of percentages, as perceived utility might not scale linearly with percentages alone, especially when `combined_earning` varies significantly.\n    *   Explore established decision-making models like **Fehr-Schmidt utility** (which includes terms for *both* disadvantageous and advantageous inequity), but adapt them to use the contribution-based fairness norm (`deserved_perc_self`). Does getting *more* than deserved affect utility?\n\n2.  **Parameter Identifiability:** Focus explicitly on designing a model where the learnable parameters capture distinct psychological processes (e.g., baseline acceptance, pure self-interest, sensitivity to unfairness) in a way that is statistically identifiable, minimizing potential covariance between parameter estimates. Justify *why* your proposed formulation might lead to better disentanglement than previous attempts.\n\n3.  **Alternative Mechanisms:** Think creatively and propose potentially less obvious mechanisms.\n    *   Could the 'deserved' amount act as a **reference point** in a prospect theory-like value function, where losses (offers below deserved) loom larger than gains (offers above deserved)?\n    *   Could the *relative* contribution (`token_self / token_opp`) directly modulate the sensitivity to the offer, rather than just setting a fairness point?\n\n4.  **Parsimony vs. Performance:** While parsimony (fewer parameters) is generally preferred to avoid overfitting and aid interpretation, prioritize finding a model structure that demonstrably improves parameter recovery for this task. If adding a parameter or complexity *specifically addresses* the identifiability issue and is well-justified psychologically, it may be worthwhile. Aim for a model with 2-4 well-motivated parameters.\n\nPlease provide your reasoning step-by-step, focusing on how your proposed model addresses the challenge of parameter disentanglement and aims for better overall performance metrics (lower BIC, higher accuracy, better recovery). Then, provide the model specification following the required format (<MODEL>, <VARIABLES>, <target_variable>, <SUMMARY>).",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Based on previous attempts, models incorporating simple linear terms for self-interest (based on `split_perc_self`) and disadvantageous inequity (based on the difference between `split_perc_self` and a contribution-based `deserved_perc_self`) have struggled with parameter recovery, particularly in disentangling these two effects.\n\nYour primary goal for this run is to design a model that significantly improves **parameter recovery** (aiming for correlations > 0.7 for *all* learnable parameters) while also maintaining or improving BIC and accuracy compared to a baseline BIC of ~44 and accuracy of ~0.69.\n\nTo achieve this, consider the following:\n\n1.  **Rethink Functional Form:** Move beyond simple linear additions. Explore alternative mathematical structures:\n    *   Could fairness be better represented by a **ratio** (e.g., `split_perc_self / deserved_perc_self`) instead of a difference? How would you handle division by zero if `deserved_perc_self` is 0?\n    *   Are there **non-linear** effects? (e.g., sensitivity to unfairness might increase sharply below a certain threshold, or sensitivity to the offered amount might diminish at higher levels).\n    *   Could there be **interaction terms** between the offered amount and the perceived fairness level? Perhaps the weight given to fairness depends on the stakes?\n    *   Consider incorporating **absolute amounts** (`split_self`, `combined_earning`) perhaps alongside or instead of percentages, as perceived utility might not scale linearly with percentages alone, especially when `combined_earning` varies significantly.\n    *   Explore established decision-making models like **Fehr-Schmidt utility** (which includes terms for *both* disadvantageous and advantageous inequity), but adapt them to use the contribution-based fairness norm (`deserved_perc_self`). Does getting *more* than deserved affect utility?\n\n2.  **Parameter Identifiability:** Focus explicitly on designing a model where the learnable parameters capture distinct psychological processes (e.g., baseline acceptance, pure self-interest, sensitivity to unfairness) in a way that is statistically identifiable, minimizing potential covariance between parameter estimates. Justify *why* your proposed formulation might lead to better disentanglement than previous attempts.\n\n3.  **Alternative Mechanisms:** Think creatively and propose potentially less obvious mechanisms.\n    *   Could the 'deserved' amount act as a **reference point** in a prospect theory-like value function, where losses (offers below deserved) loom larger than gains (offers above deserved)?\n    *   Could the *relative* contribution (`token_self / token_opp`) directly modulate the sensitivity to the offer, rather than just setting a fairness point?\n\n4.  **Parsimony vs. Performance:** While parsimony (fewer parameters) is generally preferred to avoid overfitting and aid interpretation, prioritize finding a model structure that demonstrably improves parameter recovery for this task. If adding a parameter or complexity *specifically addresses* the identifiability issue and is well-justified psychologically, it may be worthwhile. Aim for a model with 2-4 well-motivated parameters.\n\nPlease provide your reasoning step-by-step, focusing on how your proposed model addresses the challenge of parameter disentanglement and aims for better overall performance metrics (lower BIC, higher accuracy, better recovery). Then, provide the model specification following the required format (<MODEL>, <VARIABLES>, <target_variable>, <SUMMARY>).\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, let's formulate the model.\n\n**Reasoning:**\n\n1.  **Goal:** Improve parameter recovery for a responder model in an Ultimatum Game with contribution-based fairness norms, while maintaining accuracy and BIC. Previous linear models combining `split_perc_self` and `deserved_perc_self - split_perc_self` struggled with parameter disentanglement.\n2.  **Problem Analysis:** The linear dependence of both self-interest and fairness terms on `split_perc_self` likely caused collinearity issues. Varying `combined_earning` also suggests that percentages might not fully capture subjective value; absolute amounts might be more relevant or at least provide a different perspective.\n3.  **Proposed Solution Strategy:** Adapt the Fehr-Schmidt inequity aversion model, but focus on absolute monetary amounts (\u00a3) instead of percentages, and define the reference point (\"fair share\") based on relative token contributions. This framework explicitly separates utility derived from direct gain (`split_self`) from disutility derived from inequity.\n4.  **Model Formulation Idea:**\n    *   Calculate the participant's \"deserved\" share based on their contribution relative to the total contribution:\n        `total_tokens = token_self + token_opp`\n        `deserved_split = (combined_earning * token_self / total_tokens)` if `total_tokens > 0` else `0` (if no tokens contributed, the pot and deserved split are 0).\n    *   Model the utility `U` of accepting the offer `split_self`. We hypothesize utility comes from:\n        *   A baseline tendency to accept/reject (`bias`).\n        *   The direct monetary gain (`split_self`), weighted by sensitivity (`sens`).\n        *   A penalty for disadvantageous inequity (getting less than deserved), weighted by sensitivity (`alpha_ineq`). The amount of inequity is `max(0, deserved_split - split_self)`.\n    *   We will initially omit advantageous inequity (`beta * max(0, split_self - deserved_split)`) for parsimony (aiming for 3 parameters), based on the common finding that disadvantageous inequity aversion is typically stronger and more robust. If recovery is good, this term could be added later if needed.\n5.  **Mathematical Model:**\n    `total_tokens = token_self + token_opp`\n    `deserved_split = (combined_earning * token_self / total_tokens)` if `total_tokens > 0` else `0`\n    `inequity = max(0, deserved_split - split_self)`\n    `Utility = bias + sens * split_self - alpha_ineq * inequity`\n6.  **Why this might improve recovery:**\n    *   **Separation of Terms:** The direct gain `split_self` (scaled by `sens`) is now structurally separated from the inequity term `inequity` (scaled by `alpha_ineq`). While `split_self` influences the calculation of `inequity`, the parameters `sens` and `alpha_ineq` modify different components of the utility function (direct gain vs. fairness deviation).\n    *   **Absolute Amounts:** Using pounds (\u00a3) might map more directly onto subjective value than percentages, especially when the total pot size (`combined_earning`) varies substantially. This could reduce noise or distortion introduced by percentage calculations.\n    *   **Psychological Plausibility:** The parameters map onto distinct concepts: baseline acceptance (`bias`), value of money (`sens`), and aversion to unfairness (`alpha_ineq`). This conceptual separation may translate to better statistical identifiability.\n7.  **Parameter Bounds:** Set generous but finite bounds. `bias` around zero, `sens` and `alpha_ineq` non-negative.\n8.  **Target:** Predict `accept` (0 or 1) via the logistic transform of `Utility`.\n\n<MODEL>\ntotal_tokens = token_self + token_opp\ndeserved_split = (combined_earning * token_self / total_tokens) if total_tokens > 0 else 0\ninequity = max(0, deserved_split - split_self)\nUtility = bias + sens * split_self - alpha_ineq * inequity\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"Utility\": {\n      \"description\": \"Calculated utility of accepting the offer. This value is input into a logistic function P(accept) = 1 / (1 + exp(-Utility)) to determine choice probability.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline tendency parameter, reflecting an overall bias towards accepting (positive) or rejecting (negative) offers, independent of amount or fairness.\",\n      \"range\": {\n        \"min\": -15,\n        \"max\": 15,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sens\": {\n      \"description\": \"Sensitivity parameter for the absolute monetary amount received (split_self). Reflects how much utility increases per pound (\u00a3) offered.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_ineq\": {\n      \"description\": \"Sensitivity parameter for disadvantageous inequity. Reflects how much utility decreases per pound (\u00a3) the offer falls short of the 'deserved' amount.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant in this trial (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial to be split (in \u00a3). Equal to (token_self + token_opp) * 3.\",\n       \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"total_tokens\": {\n      \"description\": \"Calculated sum of tokens contributed by both participant and opponent.\",\n       \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deserved_split\": {\n      \"description\": \"Calculated 'fair' or 'deserved' share for the participant based on their proportional token contribution (in \u00a3). Equals 0 if total_tokens is 0.\",\n       \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"inequity\": {\n      \"description\": \"Calculated magnitude of disadvantageous inequity: the amount (in \u00a3) by which the offered split falls short of the deserved split. Zero if the offer is at or above the deserved split.\",\n       \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nAn adapted Fehr-Schmidt utility model predicting responder acceptance. Utility is calculated as a linear combination of a baseline acceptance tendency ('bias'), the absolute monetary amount offered ('split_self', weighted by 'sens'), and a penalty for disadvantageous inequity (the difference between a contribution-based 'deserved_split' and 'split_self', weighted by 'alpha_ineq'). The model uses absolute monetary values and separates the gain and inequity components to improve parameter disentanglement. It has three learnable parameters: 'bias', 'sens', and 'alpha_ineq'.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['bias', 'sens', 'alpha_ineq']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                total_tokens = token_self + token_opp\ndeserved_split = (combined_earning * token_self / total_tokens) if total_tokens > 0 else 0\ninequity = max(0, deserved_split - split_self)\nUtility = bias + sens * split_self - alpha_ineq * inequity\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"Utility\": {\n      \"description\": \"Calculated utility of accepting the offer. This value is input into a logistic function P(accept) = 1 / (1 + exp(-Utility)) to determine choice probability.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline tendency parameter, reflecting an overall bias towards accepting (positive) or rejecting (negative) offers, independent of amount or fairness.\",\n      \"range\": {\n        \"min\": -15,\n        \"max\": 15,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sens\": {\n      \"description\": \"Sensitivity parameter for the absolute monetary amount received (split_self). Reflects how much utility increases per pound (\\u00a3) offered.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_ineq\": {\n      \"description\": \"Sensitivity parameter for disadvantageous inequity. Reflects how much utility decreases per pound (\\u00a3) the offer falls short of the 'deserved' amount.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant in this trial (in \\u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial to be split (in \\u00a3). Equal to (token_self + token_opp) * 3.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"total_tokens\": {\n      \"description\": \"Calculated sum of tokens contributed by both participant and opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deserved_split\": {\n      \"description\": \"Calculated 'fair' or 'deserved' share for the participant based on their proportional token contribution (in \\u00a3). Equals 0 if total_tokens is 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"inequity\": {\n      \"description\": \"Calculated magnitude of disadvantageous inequity: the amount (in \\u00a3) by which the offered split falls short of the deserved split. Zero if the offer is at or above the deserved split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, bias=0.0, sens=1.0, alpha_ineq=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        total_tokens = token_self + token_opp\n        deserved_split = (combined_earning * token_self / total_tokens) if total_tokens > 0 else 0\n        inequity = max(0, deserved_split - split_self)\n\n        Utility = bias + sens * split_self - alpha_ineq * inequity\n        model_predictions.append(Utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 30, \"split_opp\": 15.0, \"split_self\": 15.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 15.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 15.0}, {\"ID\": 2, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 8, \"token_self\": 2, \"combined_earning\": 30, \"split_opp\": 24.0, \"split_self\": 6.0, \"splitperc_opp\": 80, \"splitperc_self\": 20, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 20.0, \"proposed_amount\": 6.0}, {\"ID\": 3, \"group\": \"treatment\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 30, \"split_opp\": 15.0, \"split_self\": 15.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 15.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 15.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1745949596.718366
    }
  ],
  "learnable_parameters": {
    "bias": {
      "description": "Baseline tendency parameter, reflecting an overall bias towards accepting (positive) or rejecting (negative) offers, independent of amount or fairness.",
      "range": {
        "min": -15,
        "max": 15,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "sens": {
      "description": "Sensitivity parameter for the absolute monetary amount received (split_self). Reflects how much utility increases per pound (\u00a3) offered.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha_ineq": {
      "description": "Sensitivity parameter for disadvantageous inequity. Reflects how much utility decreases per pound (\u00a3) the offer falls short of the 'deserved' amount.",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "total_tokens = token_self + token_opp\ndeserved_split = (combined_earning * token_self / total_tokens) if total_tokens > 0 else 0\ninequity = max(0, deserved_split - split_self)\nUtility = bias + sens * split_self - alpha_ineq * inequity",
  "variable_descriptions": {
    "Utility": {
      "description": "Calculated utility of accepting the offer. This value is input into a logistic function P(accept) = 1 / (1 + exp(-Utility)) to determine choice probability.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "bias": {
      "description": "Baseline tendency parameter, reflecting an overall bias towards accepting (positive) or rejecting (negative) offers, independent of amount or fairness.",
      "range": {
        "min": -15,
        "max": 15,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "sens": {
      "description": "Sensitivity parameter for the absolute monetary amount received (split_self). Reflects how much utility increases per pound (\u00a3) offered.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha_ineq": {
      "description": "Sensitivity parameter for disadvantageous inequity. Reflects how much utility decreases per pound (\u00a3) the offer falls short of the 'deserved' amount.",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "The proposed share for the participant in this trial (in \u00a3).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant, representing their contribution.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent, representing their contribution.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned in the trial to be split (in \u00a3). Equal to (token_self + token_opp) * 3.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "total_tokens": {
      "description": "Calculated sum of tokens contributed by both participant and opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "deserved_split": {
      "description": "Calculated 'fair' or 'deserved' share for the participant based on their proportional token contribution (in \u00a3). Equals 0 if total_tokens is 0.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "inequity": {
      "description": "Calculated magnitude of disadvantageous inequity: the amount (in \u00a3) by which the offered split falls short of the deserved split. Zero if the offer is at or above the deserved split.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "An adapted Fehr-Schmidt utility model predicting responder acceptance. Utility is calculated as a linear combination of a baseline acceptance tendency ('bias'), the absolute monetary amount offered ('split_self', weighted by 'sens'), and a penalty for disadvantageous inequity (the difference between a contribution-based 'deserved_split' and 'split_self', weighted by 'alpha_ineq'). The model uses absolute monetary values and separates the gain and inequity components to improve parameter disentanglement. It has three learnable parameters: 'bias', 'sens', and 'alpha_ineq'.",
  "target_variable": "accept",
  "full_reasoning": "Okay, let's formulate the model.\n\n**Reasoning:**\n\n1.  **Goal:** Improve parameter recovery for a responder model in an Ultimatum Game with contribution-based fairness norms, while maintaining accuracy and BIC. Previous linear models combining `split_perc_self` and `deserved_perc_self - split_perc_self` struggled with parameter disentanglement.\n2.  **Problem Analysis:** The linear dependence of both self-interest and fairness terms on `split_perc_self` likely caused collinearity issues. Varying `combined_earning` also suggests that percentages might not fully capture subjective value; absolute amounts might be more relevant or at least provide a different perspective.\n3.  **Proposed Solution Strategy:** Adapt the Fehr-Schmidt inequity aversion model, but focus on absolute monetary amounts (\u00a3) instead of percentages, and define the reference point (\"fair share\") based on relative token contributions. This framework explicitly separates utility derived from direct gain (`split_self`) from disutility derived from inequity.\n4.  **Model Formulation Idea:**\n    *   Calculate the participant's \"deserved\" share based on their contribution relative to the total contribution:\n        `total_tokens = token_self + token_opp`\n        `deserved_split = (combined_earning * token_self / total_tokens)` if `total_tokens > 0` else `0` (if no tokens contributed, the pot and deserved split are 0).\n    *   Model the utility `U` of accepting the offer `split_self`. We hypothesize utility comes from:\n        *   A baseline tendency to accept/reject (`bias`).\n        *   The direct monetary gain (`split_self`), weighted by sensitivity (`sens`).\n        *   A penalty for disadvantageous inequity (getting less than deserved), weighted by sensitivity (`alpha_ineq`). The amount of inequity is `max(0, deserved_split - split_self)`.\n    *   We will initially omit advantageous inequity (`beta * max(0, split_self - deserved_split)`) for parsimony (aiming for 3 parameters), based on the common finding that disadvantageous inequity aversion is typically stronger and more robust. If recovery is good, this term could be added later if needed.\n5.  **Mathematical Model:**\n    `total_tokens = token_self + token_opp`\n    `deserved_split = (combined_earning * token_self / total_tokens)` if `total_tokens > 0` else `0`\n    `inequity = max(0, deserved_split - split_self)`\n    `Utility = bias + sens * split_self - alpha_ineq * inequity`\n6.  **Why this might improve recovery:**\n    *   **Separation of Terms:** The direct gain `split_self` (scaled by `sens`) is now structurally separated from the inequity term `inequity` (scaled by `alpha_ineq`). While `split_self` influences the calculation of `inequity`, the parameters `sens` and `alpha_ineq` modify different components of the utility function (direct gain vs. fairness deviation).\n    *   **Absolute Amounts:** Using pounds (\u00a3) might map more directly onto subjective value than percentages, especially when the total pot size (`combined_earning`) varies substantially. This could reduce noise or distortion introduced by percentage calculations.\n    *   **Psychological Plausibility:** The parameters map onto distinct concepts: baseline acceptance (`bias`), value of money (`sens`), and aversion to unfairness (`alpha_ineq`). This conceptual separation may translate to better statistical identifiability.\n7.  **Parameter Bounds:** Set generous but finite bounds. `bias` around zero, `sens` and `alpha_ineq` non-negative.\n8.  **Target:** Predict `accept` (0 or 1) via the logistic transform of `Utility`.\n\n<MODEL>\ntotal_tokens = token_self + token_opp\ndeserved_split = (combined_earning * token_self / total_tokens) if total_tokens > 0 else 0\ninequity = max(0, deserved_split - split_self)\nUtility = bias + sens * split_self - alpha_ineq * inequity\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"Utility\": {\n      \"description\": \"Calculated utility of accepting the offer. This value is input into a logistic function P(accept) = 1 / (1 + exp(-Utility)) to determine choice probability.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline tendency parameter, reflecting an overall bias towards accepting (positive) or rejecting (negative) offers, independent of amount or fairness.\",\n      \"range\": {\n        \"min\": -15,\n        \"max\": 15,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sens\": {\n      \"description\": \"Sensitivity parameter for the absolute monetary amount received (split_self). Reflects how much utility increases per pound (\u00a3) offered.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_ineq\": {\n      \"description\": \"Sensitivity parameter for disadvantageous inequity. Reflects how much utility decreases per pound (\u00a3) the offer falls short of the 'deserved' amount.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant in this trial (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial to be split (in \u00a3). Equal to (token_self + token_opp) * 3.\",\n       \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"total_tokens\": {\n      \"description\": \"Calculated sum of tokens contributed by both participant and opponent.\",\n       \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deserved_split\": {\n      \"description\": \"Calculated 'fair' or 'deserved' share for the participant based on their proportional token contribution (in \u00a3). Equals 0 if total_tokens is 0.\",\n       \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"inequity\": {\n      \"description\": \"Calculated magnitude of disadvantageous inequity: the amount (in \u00a3) by which the offered split falls short of the deserved split. Zero if the offer is at or above the deserved split.\",\n       \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nAn adapted Fehr-Schmidt utility model predicting responder acceptance. Utility is calculated as a linear combination of a baseline acceptance tendency ('bias'), the absolute monetary amount offered ('split_self', weighted by 'sens'), and a penalty for disadvantageous inequity (the difference between a contribution-based 'deserved_split' and 'split_self', weighted by 'alpha_ineq'). The model uses absolute monetary values and separates the gain and inequity components to improve parameter disentanglement. It has three learnable parameters: 'bias', 'sens', and 'alpha_ineq'.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: total_tokens = token_self + token_opp\ndeserved_split = (combined_earning * token_self / total_tokens) if total_tokens > 0 else 0\ninequity = max(0, deserved_split - split_self)\nUtility = bias + sens * split_self - alpha_ineq * inequity\nSummary: An adapted Fehr-Schmidt utility model predicting responder acceptance. Utility is calculated as a linear combination of a baseline acceptance tendency ('bias'), the absolute monetary amount offered ('split_self', weighted by 'sens'), and a penalty for disadvantageous inequity (the difference between a contribution-based 'deserved_split' and 'split_self', weighted by 'alpha_ineq'). The model uses absolute monetary values and separates the gain and inequity components to improve parameter disentanglement. It has three learnable parameters: 'bias', 'sens', and 'alpha_ineq'.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, bias=0.0, sens=1.0, alpha_ineq=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        total_tokens = token_self + token_opp\n        deserved_split = (combined_earning * token_self / total_tokens) if total_tokens > 0 else 0\n        inequity = max(0, deserved_split - split_self)\n\n        Utility = bias + sens * split_self - alpha_ineq * inequity\n        model_predictions.append(Utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.8144078144078144,
  "group_accuracies": {
    "Control": 0.8572351421188631,
    "Cocaine": 0.7760416666666666
  },
  "group_parameter_averages": {
    "Control": {
      "bias": 3.343926294552856,
      "sens": 3.5888084271430456,
      "alpha_ineq": 1.318254476797499
    },
    "Cocaine": {
      "bias": -0.8756552462062857,
      "sens": 1.4259174276576476,
      "alpha_ineq": 1.1971933795535363
    }
  },
  "fitting_results": [
    {
      "bias": -4.225577629049311,
      "sens": 0.7066718684324248,
      "alpha_ineq": 0.9557277752597302,
      "success": true,
      "log_likelihood": -6.077184892664285,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.2494581563355987,
      "sens": 0.542270078986076,
      "alpha_ineq": 0.905537887760904,
      "success": true,
      "log_likelihood": -16.26250190499712,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.8717976175327729,
      "sens": 1.0923269417200379,
      "alpha_ineq": 1.8771336555990181,
      "success": true,
      "log_likelihood": -9.893465234299784,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -2.4656944404043912,
      "sens": 1.2777520275505274,
      "alpha_ineq": 1.1768798252365325,
      "success": true,
      "log_likelihood": -12.257923096603067,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 2.5929102142572944,
      "sens": 0.5309437493468651,
      "alpha_ineq": 2.221037546100071,
      "success": true,
      "log_likelihood": -8.650321960265137,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 1.053439373404767,
      "sens": 1.0299296036738375,
      "alpha_ineq": 1.4024395395617664,
      "success": true,
      "log_likelihood": -10.831116527021708,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 8.903394263469277,
      "sens": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": 1.8402459549166785e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 2.897474645241358,
      "sens": 0.8062845386855774,
      "alpha_ineq": 1.6718520641431742,
      "success": true,
      "log_likelihood": -9.823428165878113,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 15.0,
      "sens": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": 3.5960401321568924e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.06645757816185362,
      "sens": 0.7574421119117241,
      "alpha_ineq": 1.641143926573874,
      "success": true,
      "log_likelihood": -11.165569400184843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -2.9816045052530136,
      "sens": 10.0,
      "alpha_ineq": 14.868034329634588,
      "success": true,
      "log_likelihood": -0.5613873349267398,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -4.417186908654684,
      "sens": 0.8708808730135039,
      "alpha_ineq": 1.0045689382838145,
      "success": true,
      "log_likelihood": -6.99348740112013,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 1.048762995042186,
      "sens": 0.8944028938134626,
      "alpha_ineq": 2.2728510097068337,
      "success": true,
      "log_likelihood": -8.618546895740646,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 15.0,
      "sens": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": 3.596040132156892e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 13.854969587431624,
      "sens": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": 3.5875551416697094e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 15.0,
      "sens": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": 3.5960401321568924e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 15.0,
      "sens": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": 3.5960401321568924e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -10.874896982530858,
      "sens": 10.0,
      "alpha_ineq": 2.358330160775755,
      "success": true,
      "log_likelihood": -0.20925984540274895,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 5.279502349157307,
      "sens": 0.9477122740827492,
      "alpha_ineq": 1.492919621937149,
      "success": true,
      "log_likelihood": -5.272536465973372,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 15.0,
      "sens": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": 3.5960401321568924e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 2.2765987745481486,
      "sens": 0.3116029452382533,
      "alpha_ineq": 1.2358542601435856,
      "success": true,
      "log_likelihood": -13.966380311351779,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 3.4194719100400977,
      "sens": 0.9351813465849759,
      "alpha_ineq": 1.1799790896817355,
      "success": true,
      "log_likelihood": -7.026154359107613,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -3.294129768623142,
      "sens": 1.0072748522237103,
      "alpha_ineq": 0.4815553064062824,
      "success": true,
      "log_likelihood": -15.459488829181275,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.9989108838876815,
      "sens": 0.7949753830600704,
      "alpha_ineq": 0.6674344024223785,
      "success": true,
      "log_likelihood": -16.687262570668526,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 4.237560772644863,
      "sens": 0.0,
      "alpha_ineq": 1.7914681445406706,
      "success": true,
      "log_likelihood": -10.409785808503509,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.14843094137391044,
      "sens": 0.8140814889089434,
      "alpha_ineq": 0.8810078960443395,
      "success": true,
      "log_likelihood": -14.88873695315257,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.759864044954641,
      "sens": 1.2481053308083834,
      "alpha_ineq": 1.3088544525319854,
      "success": true,
      "log_likelihood": -11.493028639692614,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.4194967253727517,
      "sens": 1.395066443806919,
      "alpha_ineq": 5.206832131394712,
      "success": true,
      "log_likelihood": -3.9255255906961284,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 7.953629099405711,
      "sens": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": -91.37335401110238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 2.9776074848675607,
      "sens": 0.17101879672089684,
      "alpha_ineq": 0.7475626472139947,
      "success": true,
      "log_likelihood": -14.144819508622,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 15.0,
      "sens": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": 3.5960401321568928e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -4.225437591406306,
      "sens": 0.7066440966469336,
      "alpha_ineq": 0.9557367997485224,
      "success": true,
      "log_likelihood": -6.077184894365861,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -2.2154802437080976,
      "sens": 0.6848059750748472,
      "alpha_ineq": 0.2566978823104394,
      "success": true,
      "log_likelihood": -19.421223799618147,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -1.1196198472968362,
      "sens": 0.7255464001933214,
      "alpha_ineq": 0.9364118777443563,
      "success": true,
      "log_likelihood": -15.062416061029586,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 15.0,
      "sens": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": 3.5960401321568924e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -5.503240911979215,
      "sens": 2.557297106495474,
      "alpha_ineq": 0.5757807565061425,
      "success": true,
      "log_likelihood": -9.462093514288675,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.10284314497702488,
      "sens": 2.1030637725493606,
      "alpha_ineq": 1.8351796718097184,
      "success": true,
      "log_likelihood": -7.008173001013426,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 1.792791120374575,
      "sens": 0.3828260589742906,
      "alpha_ineq": 1.3282293582241746,
      "success": true,
      "log_likelihood": -13.41803686234543,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 2.485084468678056,
      "sens": 0.17239493022544047,
      "alpha_ineq": 0.8483554382712409,
      "success": true,
      "log_likelihood": -16.16485029705014,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 3.1583617920576463,
      "sens": 0.28885100711322015,
      "alpha_ineq": 0.5017349850091977,
      "success": true,
      "log_likelihood": -8.535353520401337,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 2.8704278592334727,
      "sens": 0.08840760663114615,
      "alpha_ineq": 1.0125483354400704,
      "success": true,
      "log_likelihood": -15.691135821385712,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -1.2874482773850053,
      "sens": 0.4750018646779794,
      "alpha_ineq": 1.0852627862757034,
      "success": true,
      "log_likelihood": -12.071796912826994,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 15.0,
      "sens": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": -23.025850926444445,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.9670760928177508,
      "sens": 0.8723390815828751,
      "alpha_ineq": 0.7102075285218308,
      "success": true,
      "log_likelihood": -15.868597924312347,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.1133005727359887,
      "sens": 0.9716178536444846,
      "alpha_ineq": 1.0052632371106323,
      "success": true,
      "log_likelihood": -13.254468728727593,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.5358748430508802,
      "sens": 1.0461342620456848,
      "alpha_ineq": 0.2508776372050913,
      "success": true,
      "log_likelihood": -15.179148400374578,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.3087604917662454,
      "sens": 0.6412418224996579,
      "alpha_ineq": 0.9943540501319019,
      "success": true,
      "log_likelihood": -15.21317521794359,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.0251767611755973,
      "sens": 0.7202199931073774,
      "alpha_ineq": 0.47690733250228806,
      "success": true,
      "log_likelihood": -17.715917442324923,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 4.2091239645743785,
      "sens": 0.0,
      "alpha_ineq": 2.319462881726909,
      "success": true,
      "log_likelihood": -8.245801044855062,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.5379109339432628,
      "sens": 0.47465038637606943,
      "alpha_ineq": 0.003877058321297693,
      "success": true,
      "log_likelihood": -22.68260551006,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.20772514668949082,
      "sens": 0.5685462648778711,
      "alpha_ineq": 0.4486840887070164,
      "success": true,
      "log_likelihood": -17.325493392253325,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.079430462820017,
      "sens": 0.5114103632832894,
      "alpha_ineq": 0.449801073994526,
      "success": true,
      "log_likelihood": -11.409180003657085,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.125856776629378,
      "sens": 0.9075475531080247,
      "alpha_ineq": 0.3538132425530889,
      "success": true,
      "log_likelihood": -17.687628488263364,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.3457851717138616,
      "sens": 0.8004009949060046,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": -19.77288468331993,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.9305360379532482,
      "sens": 0.058262397222145254,
      "alpha_ineq": 0.7321687500471179,
      "success": true,
      "log_likelihood": -18.848102555521255,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.674853222708026,
      "sens": 2.921485217967031,
      "alpha_ineq": 5.548751644179344,
      "success": true,
      "log_likelihood": -3.962169530641065,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.8688301980595885,
      "sens": 0.6929642976036023,
      "alpha_ineq": 1.6465223498549044,
      "success": true,
      "log_likelihood": -10.252027472245896,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 5.582189811988537,
      "sens": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": -91.64880605907712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -4.023353351745458,
      "sens": 0.7470827113782319,
      "alpha_ineq": 0.829420857969681,
      "success": true,
      "log_likelihood": -7.766224007905581,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.0074755063800347,
      "sens": 0.9537491355589438,
      "alpha_ineq": 0.1320266943671943,
      "success": true,
      "log_likelihood": -13.85763315128622,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.5661489784517042,
      "sens": 0.3462049705339373,
      "alpha_ineq": 0.49680598028610296,
      "success": true,
      "log_likelihood": -19.659790032818552,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.8161431675421458,
      "sens": 0.335116318414982,
      "alpha_ineq": 1.2658075594287308,
      "success": true,
      "log_likelihood": -13.914497002940648,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -4.225431912524435,
      "sens": 0.706647791663078,
      "alpha_ineq": 0.9557465633288027,
      "success": true,
      "log_likelihood": -6.077184894447053,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.18464158440282,
      "sens": 0.7362652957113335,
      "alpha_ineq": 0.28429454992777303,
      "success": true,
      "log_likelihood": -19.125225031176814,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.6802548552084273,
      "sens": 1.1651076385815142,
      "alpha_ineq": 1.3829357503546154,
      "success": true,
      "log_likelihood": -9.182541421338962,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.2496917767536575,
      "sens": 1.0751118763332734,
      "alpha_ineq": 0.8690072896032589,
      "success": true,
      "log_likelihood": -14.028700171796407,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 2.8545235506724347,
      "sens": 0.5190527858129778,
      "alpha_ineq": 0.5752680592744692,
      "success": true,
      "log_likelihood": -7.694984889533148,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 3.294727378380245,
      "sens": 0.32029013726731353,
      "alpha_ineq": 0.7414005420557361,
      "success": true,
      "log_likelihood": -10.373167058147263,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -4.019979581794165,
      "sens": 1.6553263524470119,
      "alpha_ineq": 0.4777694841203398,
      "success": true,
      "log_likelihood": -12.567591877548324,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 4.345424805449265,
      "sens": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": -67.98252172646555,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -8.019264621527062,
      "sens": 3.3205940653685495,
      "alpha_ineq": 20.0,
      "success": true,
      "log_likelihood": -0.040572519313455145,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.297247373523993,
      "sens": 0.5958080301603597,
      "alpha_ineq": 0.5578363173295064,
      "success": true,
      "log_likelihood": -10.619230446264847,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.4333251408377867,
      "sens": 0.7704202081604121,
      "alpha_ineq": 0.8702423341790422,
      "success": true,
      "log_likelihood": -15.551664662538354,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.1601877780512937,
      "sens": 0.9702131332489029,
      "alpha_ineq": 0.1684354059768344,
      "success": true,
      "log_likelihood": -14.541141114645809,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.5480215608255299,
      "sens": 0.3291262934565799,
      "alpha_ineq": 0.25044619229983867,
      "success": true,
      "log_likelihood": -22.54585196523291,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 3.0720949100925714,
      "sens": 0.47388936014376104,
      "alpha_ineq": 1.2851231896908637,
      "success": true,
      "log_likelihood": -11.832866677159707,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 4.7726920478225905,
      "sens": 0.07123147771621144,
      "alpha_ineq": 0.6202854919981132,
      "success": true,
      "log_likelihood": -6.302963273663648,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.1082179518031268,
      "sens": 0.2944219566441499,
      "alpha_ineq": 0.5879868293891753,
      "success": true,
      "log_likelihood": -6.456591939693903,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.3209535023956351,
      "sens": 0.5230472571478387,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": -21.6829947435733,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -4.2255393571677775,
      "sens": 0.70666793698481,
      "alpha_ineq": 0.9557614585530121,
      "success": true,
      "log_likelihood": -6.077184893762584,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.10830284613634414,
      "sens": 0.2535847149346929,
      "alpha_ineq": 0.27094416745359945,
      "success": true,
      "log_likelihood": -22.80447979636146,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 3.4436193452900565,
      "sens": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": -69.0649645561969,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.720111027348481,
      "sens": 0.45795407421694156,
      "alpha_ineq": 0.8238482374563575,
      "success": true,
      "log_likelihood": -8.860958648031392,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -9.981817074695893,
      "sens": 4.617845814390538,
      "alpha_ineq": 2.5902496811685753,
      "success": true,
      "log_likelihood": -4.347112175399015,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.0304572317709457,
      "sens": 0.0,
      "alpha_ineq": 0.22625650109624593,
      "success": true,
      "log_likelihood": -23.315179335758472,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.225036638255429,
      "sens": 0.46527325762164523,
      "alpha_ineq": 1.521997851158949,
      "success": true,
      "log_likelihood": -7.154354835857438,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.874199116603343,
      "sens": 0.2421477119712225,
      "alpha_ineq": 0.6626794701992257,
      "success": true,
      "log_likelihood": -17.022305350013106,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.5552577983580608,
      "sens": 0.2598629696076519,
      "alpha_ineq": 0.9968480266711394,
      "success": true,
      "log_likelihood": -13.240537252556177,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 4.2055489991723105,
      "sens": 0.5738583824686656,
      "alpha_ineq": 0.7789045600007808,
      "success": true,
      "log_likelihood": -4.980463197928564,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -9.941439520745856,
      "sens": 3.558155856536049,
      "alpha_ineq": 1.0943598612282635,
      "success": true,
      "log_likelihood": -5.695204599208752,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.7642789940143941,
      "sens": 0.2131585248613854,
      "alpha_ineq": 0.25190243714756916,
      "success": true,
      "log_likelihood": -20.636838636387267,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "bias": {
        "r": 0.8716706053874597,
        "p": 4.080627950154613e-32
      },
      "sens": {
        "r": 0.7755282124988682,
        "p": 2.733798913148682e-21
      },
      "alpha_ineq": {
        "r": 0.8092313290880054,
        "p": 2.2747975558227103e-24
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 38.57470867527722,
  "bic_Control": 31.770528038034644,
  "bic_Cocaine": 44.670120496140356,
  "bic_results": {
    "average_bic": 38.57470867527722,
    "individual_bics": [
      22.9049266006969,
      43.27556062536257,
      30.5374872839679,
      35.266403008574464,
      28.051200735898604,
      32.412789869411746,
      10.750556811687838,
      30.397413147124556,
      10.75055680817625,
      33.08169561573801,
      11.87333148522181,
      24.73753161760859,
      27.987650606849623,
      10.75055680817625,
      10.75055680819322,
      10.75055680817625,
      10.75055680817625,
      11.169076506173829,
      21.295629747315076,
      10.75055680817625,
      38.68331743807189,
      24.802865533583557,
      41.66953447373088,
      44.12508195670539,
      31.57012843237535,
      40.528030721673474,
      33.73661409475356,
      18.60160799676059,
      193.49726483757308,
      39.040195832612326,
      10.75055680817625,
      22.904926604100055,
      49.59300441460462,
      40.8753889374275,
      10.75055680817625,
      29.67474384394568,
      24.766902817395184,
      37.58663054005919,
      43.080257409468615,
      27.821263856171004,
      42.132828458139755,
      34.89415064102232,
      56.802258668257224,
      42.48775266399302,
      37.25949427282352,
      41.108853616117486,
      41.176907251255514,
      46.18239170001817,
      27.242158905078455,
      56.11576783548833,
      45.401543599874984,
      33.568916822682496,
      46.125813791895055,
      50.29632618200819,
      48.446761926410844,
      18.67489587665046,
      31.254611759860122,
      194.04816893352256,
      26.283004831179493,
      38.46582311794077,
      50.07013688100544,
      38.579550821249626,
      22.904926604262435,
      49.00100687772196,
      29.115639658046256,
      38.807957158961145,
      26.140526594434625,
      31.496890931662858,
      35.885740570464975,
      146.71560026829943,
      10.831701853995241,
      31.989017707898025,
      41.85388614044504,
      39.83283904465995,
      55.84226074583415,
      34.41629016968774,
      23.356483362695627,
      23.663740694756136,
      54.116546302514934,
      22.904926602893497,
      56.35951640809125,
      148.88048592776212,
      28.472474111431115,
      19.44478116616636,
      57.38091548688527,
      25.059266487083207,
      44.79516751539454,
      37.23163132048069,
      20.711483211225456,
      22.140966013785835,
      52.02423408814286
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        22.9049266006969,
        43.27556062536257,
        30.5374872839679,
        35.266403008574464,
        28.051200735898604,
        32.412789869411746,
        10.750556811687838,
        30.397413147124556,
        10.75055680817625,
        33.08169561573801,
        11.87333148522181,
        24.73753161760859,
        27.987650606849623,
        10.75055680817625,
        10.75055680819322,
        10.75055680817625,
        10.75055680817625,
        11.169076506173829,
        21.295629747315076,
        10.75055680817625,
        38.68331743807189,
        24.802865533583557,
        41.66953447373088,
        44.12508195670539,
        31.57012843237535,
        40.528030721673474,
        33.73661409475356,
        18.60160799676059,
        193.49726483757308,
        39.040195832612326,
        10.75055680817625,
        22.904926604100055,
        49.59300441460462,
        40.8753889374275,
        10.75055680817625,
        29.67474384394568,
        24.766902817395184,
        37.58663054005919,
        43.080257409468615,
        27.821263856171004,
        42.132828458139755,
        34.89415064102232,
        56.802258668257224
      ],
      "Cocaine": [
        42.48775266399302,
        37.25949427282352,
        41.108853616117486,
        41.176907251255514,
        46.18239170001817,
        27.242158905078455,
        56.11576783548833,
        45.401543599874984,
        33.568916822682496,
        46.125813791895055,
        50.29632618200819,
        48.446761926410844,
        18.67489587665046,
        31.254611759860122,
        194.04816893352256,
        26.283004831179493,
        38.46582311794077,
        50.07013688100544,
        38.579550821249626,
        22.904926604262435,
        49.00100687772196,
        29.115639658046256,
        38.807957158961145,
        26.140526594434625,
        31.496890931662858,
        35.885740570464975,
        146.71560026829943,
        10.831701853995241,
        31.989017707898025,
        41.85388614044504,
        39.83283904465995,
        55.84226074583415,
        34.41629016968774,
        23.356483362695627,
        23.663740694756136,
        54.116546302514934,
        22.904926602893497,
        56.35951640809125,
        148.88048592776212,
        28.472474111431115,
        19.44478116616636,
        57.38091548688527,
        25.059266487083207,
        44.79516751539454,
        37.23163132048069,
        20.711483211225456,
        22.140966013785835,
        52.02423408814286
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- bias: r = 0.872\n- sens: r = 0.776\n- alpha_ineq: r = 0.809",
  "previous_models": [
    "Specification: total_tokens = token_self + token_opp\ndeserved_split = (combined_earning * token_self / total_tokens) if total_tokens > 0 else 0\ninequity = max(0, deserved_split - split_self)\nUtility = bias + sens * split_self - alpha_ineq * inequity\nSummary: An adapted Fehr-Schmidt utility model predicting responder acceptance. Utility is calculated as a linear combination of a baseline acceptance tendency ('bias'), the absolute monetary amount offered ('split_self', weighted by 'sens'), and a penalty for disadvantageous inequity (the difference between a contribution-based 'deserved_split' and 'split_self', weighted by 'alpha_ineq'). The model uses absolute monetary values and separates the gain and inequity components to improve parameter disentanglement. It has three learnable parameters: 'bias', 'sens', and 'alpha_ineq'.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 38.57470867527722\nOverall Accuracy: 0.8144\nGroup Accuracies:\n- Control: 0.8572\n- Cocaine: 0.7760\n\nParameter Recovery:\n- bias: r = 0.872\n- sens: r = 0.776\n- alpha_ineq: r = 0.809"
  ]
}