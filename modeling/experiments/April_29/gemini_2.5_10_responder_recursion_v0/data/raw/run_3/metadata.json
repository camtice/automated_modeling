{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the updated instructions for the next run:\n\n<instructions>\nThe previous modeling attempt successfully used an adapted Fehr-Schmidt utility framework with absolute monetary amounts (`split_self`, `deserved_split`) rather than percentages. This approach yielded significant improvements, resulting in a model with good BIC (~38.6), high accuracy (~0.81), and strong parameter recovery (all correlations > 0.75).\n\nYour goal for this run is to **build upon this success** or propose a well-justified alternative model to **further refine performance**. Aim to:\n\n1.  **Decrease BIC** below the current best of ~38.6.\n2.  **Increase Accuracy** above the current best of ~0.81.\n3.  **Maintain Excellent Parameter Recovery** (target correlations > 0.7 or ideally > 0.8 for all learnable parameters).\n\nConsider these avenues for improvement:\n\n1.  **Refine the Fehr-Schmidt Structure:**\n    *   **Advantageous Inequity:** The previous successful model only included disadvantageous inequity (`alpha_ineq`). Explore adding a term for advantageous inequity (`beta_adv_ineq * max(0, split_self - deserved_split)`), consistent with the full Fehr-Schmidt model. Does getting *more* than the deserved share decrease utility (due to guilt or general inequity aversion)? Adding this parameter (`beta_adv_ineq`) might capture additional variance but ensure it remains identifiable.\n    *   **Non-Linear Sensitivity:** Does utility scale linearly with the monetary gain (`split_self`) or the magnitude of inequity (`inequity`)? Consider introducing simple non-linearities, for example, using power parameters (`sens * split_self ^ gamma_gain`, `alpha_ineq * inequity ^ delta_loss`). Justify why such non-linearity might be psychologically plausible (e.g., diminishing sensitivity to gains, increasing sensitivity to losses). Be mindful that added parameters can make recovery harder.\n\n2.  **Explore Alternative Conceptualizations:**\n    *   **Ratio-Based Fairness:** Instead of the *difference* (`deserved_split - split_self`), could fairness perception be better captured by a *ratio*, such as `split_self / deserved_split`? How would you incorporate this into the utility function? Consider how to handle cases where `deserved_split` is zero or very small. For example, `Utility = bias + sens * log(split_self + epsilon) - alpha_ineq * log(deserved_split + epsilon)` or `Utility = bias + sens * split_self * (split_self / (deserved_split + epsilon))^gamma`?\n    *   **Reference Dependence (Prospect Theory):** Explicitly model `deserved_split` as a reference point. Define a value function `v(x)` where `x = split_self - deserved_split`. This function could exhibit loss aversion (steeper slope for `x < 0`) and potentially diminishing sensitivity. For instance: `value = x` if `x >= 0`, else `value = loss_aversion * x` (where `loss_aversion > 1`). Then `Utility = bias + value`. Or use power functions for gains and losses separately relative to the reference.\n\n3.  **Focus on Identifiability and Parsimony:** While exploring added complexity, ensure that new parameters capture distinct psychological constructs and are likely to be statistically identifiable. Prioritize models where the parameters have clear interpretations and minimal overlap in their functional roles. Aim for 3-5 well-motivated parameters. A simpler model that maintains high performance is preferable to a complex one if the gains are marginal or recovery suffers.\n\nPlease provide your reasoning step-by-step, explaining how your proposed model builds on previous findings or offers a distinct, promising alternative, and how it aims to improve BIC/Accuracy while ensuring strong parameter recovery. Then, provide the model specification following the required format (<MODEL>, <VARIABLES>, <target_variable>, <SUMMARY>).\n</instructions>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the updated instructions for the next run:\n\n<instructions>\nThe previous modeling attempt successfully used an adapted Fehr-Schmidt utility framework with absolute monetary amounts (`split_self`, `deserved_split`) rather than percentages. This approach yielded significant improvements, resulting in a model with good BIC (~38.6), high accuracy (~0.81), and strong parameter recovery (all correlations > 0.75).\n\nYour goal for this run is to **build upon this success** or propose a well-justified alternative model to **further refine performance**. Aim to:\n\n1.  **Decrease BIC** below the current best of ~38.6.\n2.  **Increase Accuracy** above the current best of ~0.81.\n3.  **Maintain Excellent Parameter Recovery** (target correlations > 0.7 or ideally > 0.8 for all learnable parameters).\n\nConsider these avenues for improvement:\n\n1.  **Refine the Fehr-Schmidt Structure:**\n    *   **Advantageous Inequity:** The previous successful model only included disadvantageous inequity (`alpha_ineq`). Explore adding a term for advantageous inequity (`beta_adv_ineq * max(0, split_self - deserved_split)`), consistent with the full Fehr-Schmidt model. Does getting *more* than the deserved share decrease utility (due to guilt or general inequity aversion)? Adding this parameter (`beta_adv_ineq`) might capture additional variance but ensure it remains identifiable.\n    *   **Non-Linear Sensitivity:** Does utility scale linearly with the monetary gain (`split_self`) or the magnitude of inequity (`inequity`)? Consider introducing simple non-linearities, for example, using power parameters (`sens * split_self ^ gamma_gain`, `alpha_ineq * inequity ^ delta_loss`). Justify why such non-linearity might be psychologically plausible (e.g., diminishing sensitivity to gains, increasing sensitivity to losses). Be mindful that added parameters can make recovery harder.\n\n2.  **Explore Alternative Conceptualizations:**\n    *   **Ratio-Based Fairness:** Instead of the *difference* (`deserved_split - split_self`), could fairness perception be better captured by a *ratio*, such as `split_self / deserved_split`? How would you incorporate this into the utility function? Consider how to handle cases where `deserved_split` is zero or very small. For example, `Utility = bias + sens * log(split_self + epsilon) - alpha_ineq * log(deserved_split + epsilon)` or `Utility = bias + sens * split_self * (split_self / (deserved_split + epsilon))^gamma`?\n    *   **Reference Dependence (Prospect Theory):** Explicitly model `deserved_split` as a reference point. Define a value function `v(x)` where `x = split_self - deserved_split`. This function could exhibit loss aversion (steeper slope for `x < 0`) and potentially diminishing sensitivity. For instance: `value = x` if `x >= 0`, else `value = loss_aversion * x` (where `loss_aversion > 1`). Then `Utility = bias + value`. Or use power functions for gains and losses separately relative to the reference.\n\n3.  **Focus on Identifiability and Parsimony:** While exploring added complexity, ensure that new parameters capture distinct psychological constructs and are likely to be statistically identifiable. Prioritize models where the parameters have clear interpretations and minimal overlap in their functional roles. Aim for 3-5 well-motivated parameters. A simpler model that maintains high performance is preferable to a complex one if the gains are marginal or recovery suffers.\n\nPlease provide your reasoning step-by-step, explaining how your proposed model builds on previous findings or offers a distinct, promising alternative, and how it aims to improve BIC/Accuracy while ensuring strong parameter recovery. Then, provide the model specification following the required format (<MODEL>, <VARIABLES>, <target_variable>, <SUMMARY>).\n</instructions>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, let's work through designing this computational model step-by-step.\n\n**1. Understanding the Goal:**\nThe objective is to model the participant's decision to accept or reject an offer (`accept` variable) when they are in the responder role (`trial_role == 1`) in an ultimatum game. The model should build upon a previous successful Fehr-Schmidt-like model that used absolute monetary values and incorporated disadvantageous inequity aversion. The key aims are to improve BIC and accuracy while maintaining excellent parameter recovery, potentially by adding advantageous inequity aversion or exploring other refinements.\n\n**2. Reviewing the Previous Success:**\nThe prior model had the form:\n`Utility = bias + sensitivity * split_self - alpha_ineq * max(0, deserved_split - split_self)`\nwhere `deserved_split = combined_earning * (token_self / (token_self + token_opp))`.\nThis model performed well (BIC ~38.6, Acc ~0.81, Recovery > 0.75), suggesting the core structure (bias, sensitivity to self-gain, aversion to getting less than deserved based on contribution) is sound.\n\n**3. Considering Improvements:**\n\n*   **Advantageous Inequity:** The most direct and theoretically grounded extension is adding the `beta_adv_ineq` term from the full Fehr-Schmidt model: `- beta_adv_ineq * max(0, split_self - deserved_split)`. This captures potential aversion (e.g., guilt) to receiving *more* than the contribution-based deserved share. It adds only one parameter (`beta_adv_ineq`), keeping the model relatively parsimonious and maintaining the focus on absolute monetary differences found successful previously. Fehr & Schmidt (1999) posited `alpha >= beta >= 0`, which provides theoretical constraints. Given the success of the `alpha_ineq` term, adding `beta_adv_ineq` is a logical next step to potentially capture more variance in acceptance decisions.\n*   **Non-Linearities / Ratio Models / Prospect Theory:** While possible, these introduce more significant changes and complexity. Introducing power terms (`gamma_gain`, `delta_loss`) increases parameters and risks recovery issues. Ratio models have issues with zero denominators (`deserved_split = 0` when `token_self = 0`). A prospect theory framing (Model C discussed in thought process) naturally leads back to a structure equivalent to the full Fehr-Schmidt model when combined with absolute gain sensitivity.\n\n**4. Proposed Model:**\nBased on the reasoning above, the most promising approach is to extend the previous successful model by incorporating advantageous inequity aversion. This maintains the successful core structure while adding a theoretically motivated component.\n\n*   **Step 1: Define Deserved Split:** Calculate the split the participant might feel they \"deserve\" based on their relative contribution.\n    *   Let `total_tokens = token_self + token_opp`.\n    *   If `total_tokens == 0`, then `deserved_split = 0`.\n    *   If `total_tokens > 0`, then `deserved_split = combined_earning * (token_self / total_tokens)`.\n*   **Step 2: Calculate Inequity Components:**\n    *   `inequity_disadvantageous = max(0, deserved_split - split_self)`\n    *   `inequity_advantageous = max(0, split_self - deserved_split)`\n*   **Step 3: Calculate Utility:** The utility of accepting the offer `split_self`.\n    *   `Utility = bias + sensitivity * split_self - alpha_ineq * inequity_disadvantageous - beta_adv_ineq * inequity_advantageous`\n*   **Step 4: Map to Probability:** Use a logistic function (temperature=1) to map utility to acceptance probability.\n    *   `P(accept = 1) = 1 / (1 + exp(-Utility))`\n\n**5. Parameter Definitions and Bounds:**\n*   `bias`: Baseline tendency to accept. Range: [-20, 20].\n*   `sensitivity`: Sensitivity to the absolute monetary amount received (`split_self`). Range: [0, 20]. (Constrained to be non-negative, as more money shouldn't decrease utility).\n*   `alpha_ineq`: Sensitivity to disadvantageous inequity (getting less than deserved). Range: [0, 20]. (Constrained non-negative).\n*   `beta_adv_ineq`: Sensitivity to advantageous inequity (getting more than deserved). Range: [0, 20]. (Constrained non-negative). Often assumed `beta_adv_ineq <= alpha_ineq`, but we'll allow the fitter to determine this within the [0, 20] range.\n\nThis model has four learnable parameters. It directly uses `combined_earning`, `token_self`, `token_opp`, and `split_self` from the data for responder trials (`trial_role == 1`). It predicts `accept`.\n\n<MODEL>\ntotal_tokens = token_self + token_opp\ncontribution_share = (token_self / total_tokens) if total_tokens > 0 else 0.5\ndeserved_split = combined_earning * contribution_share\ninequity_disadvantageous = max(0, deserved_split - split_self)\ninequity_advantageous = max(0, split_self - deserved_split)\nUtility = bias + sensitivity * split_self - alpha_ineq * inequity_disadvantageous - beta_adv_ineq * inequity_advantageous\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"Utility\": {\n      \"description\": \"The calculated utility of accepting the offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline tendency parameter, reflecting inherent bias towards accepting or rejecting.\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Sensitivity to the absolute monetary amount received by the participant (split_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_ineq\": {\n      \"description\": \"Sensitivity to disadvantageous inequity (receiving less than the deserved amount).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_adv_ineq\": {\n      \"description\": \"Sensitivity to advantageous inequity (receiving more than the deserved amount).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant in the pre-task.\",\n      \"range\": {\n        \"min\": 0, \n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent in the pre-task.\",\n      \"range\": {\n        \"min\": 0, \n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money available in the trial (\u00a3).\",\n      \"range\": {\n        \"min\": 0, \n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed monetary share for the participant (\u00a3) in the current trial.\",\n      \"range\": {\n        \"min\": 0, \n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"total_tokens\": {\n        \"description\": \"Sum of tokens found by participant and opponent.\",\n        \"range\": {\n          \"min\": 0, \n          \"max\": \"inf\" \n        },\n        \"learnable\": false,\n        \"source\": \"calculated\"\n      },\n    \"contribution_share\": {\n        \"description\": \"Participant's share of total tokens contributed.\",\n        \"range\": {\n          \"min\": 0, \n          \"max\": 1 \n        },\n        \"learnable\": false,\n        \"source\": \"calculated\"\n    },\n    \"deserved_split\": {\n        \"description\": \"Split amount proportional to the participant's contribution.\",\n        \"range\": {\n            \"min\": 0,\n            \"max\": \"inf\"\n        },\n        \"learnable\": false,\n        \"source\": \"calculated\"\n    },\n    \"inequity_disadvantageous\": {\n        \"description\": \"Magnitude of disadvantageous inequity (deserved_split - split_self, if positive).\",\n        \"range\": {\n          \"min\": 0, \n          \"max\": \"inf\" \n        },\n        \"learnable\": false,\n        \"source\": \"calculated\"\n    },\n    \"inequity_advantageous\": {\n        \"description\": \"Magnitude of advantageous inequity (split_self - deserved_split, if positive).\",\n        \"range\": {\n          \"min\": 0, \n          \"max\": \"inf\" \n        },\n        \"learnable\": false,\n        \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts responder acceptance based on Fehr-Schmidt inequity aversion. Utility is calculated as a linear combination of a baseline acceptance tendency (bias), the absolute monetary gain offered (sensitivity * split_self), aversion to disadvantageous inequity (alpha_ineq * max(0, deserved_split - split_self)), and aversion to advantageous inequity (beta_adv_ineq * max(0, split_self - deserved_split)). The 'deserved_split' is calculated based on the participant's relative token contribution in the trial. The model uses four learnable parameters: bias, sensitivity, alpha_ineq, and beta_adv_ineq.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['bias', 'sensitivity', 'alpha_ineq', 'beta_adv_ineq']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                total_tokens = token_self + token_opp\ncontribution_share = (token_self / total_tokens) if total_tokens > 0 else 0.5\ndeserved_split = combined_earning * contribution_share\ninequity_disadvantageous = max(0, deserved_split - split_self)\ninequity_advantageous = max(0, split_self - deserved_split)\nUtility = bias + sensitivity * split_self - alpha_ineq * inequity_disadvantageous - beta_adv_ineq * inequity_advantageous\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"Utility\": {\n      \"description\": \"The calculated utility of accepting the offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline tendency parameter, reflecting inherent bias towards accepting or rejecting.\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Sensitivity to the absolute monetary amount received by the participant (split_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_ineq\": {\n      \"description\": \"Sensitivity to disadvantageous inequity (receiving less than the deserved amount).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_adv_ineq\": {\n      \"description\": \"Sensitivity to advantageous inequity (receiving more than the deserved amount).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant in the pre-task.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent in the pre-task.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money available in the trial (\\u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed monetary share for the participant (\\u00a3) in the current trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"total_tokens\": {\n      \"description\": \"Sum of tokens found by participant and opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"contribution_share\": {\n      \"description\": \"Participant's share of total tokens contributed.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deserved_split\": {\n      \"description\": \"Split amount proportional to the participant's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"inequity_disadvantageous\": {\n      \"description\": \"Magnitude of disadvantageous inequity (deserved_split - split_self, if positive).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"inequity_advantageous\": {\n      \"description\": \"Magnitude of advantageous inequity (split_self - deserved_split, if positive).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, bias=0, sensitivity=1, alpha_ineq=1, beta_adv_ineq=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        total_tokens = token_self + token_opp\n        contribution_share = (token_self / total_tokens) if total_tokens > 0 else 0.5\n        deserved_split = combined_earning * contribution_share\n        inequity_disadvantageous = max(0, deserved_split - split_self)\n        inequity_advantageous = max(0, split_self - deserved_split)\n\n        Utility = bias + sensitivity * split_self - alpha_ineq * inequity_disadvantageous - beta_adv_ineq * inequity_advantageous\n        model_predictions.append(Utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1745949694.999712
    }
  ],
  "learnable_parameters": {
    "bias": {
      "description": "Baseline tendency parameter, reflecting inherent bias towards accepting or rejecting.",
      "range": {
        "min": -20,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "sensitivity": {
      "description": "Sensitivity to the absolute monetary amount received by the participant (split_self).",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha_ineq": {
      "description": "Sensitivity to disadvantageous inequity (receiving less than the deserved amount).",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_adv_ineq": {
      "description": "Sensitivity to advantageous inequity (receiving more than the deserved amount).",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "total_tokens = token_self + token_opp\ncontribution_share = (token_self / total_tokens) if total_tokens > 0 else 0.5\ndeserved_split = combined_earning * contribution_share\ninequity_disadvantageous = max(0, deserved_split - split_self)\ninequity_advantageous = max(0, split_self - deserved_split)\nUtility = bias + sensitivity * split_self - alpha_ineq * inequity_disadvantageous - beta_adv_ineq * inequity_advantageous",
  "variable_descriptions": {
    "Utility": {
      "description": "The calculated utility of accepting the offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "bias": {
      "description": "Baseline tendency parameter, reflecting inherent bias towards accepting or rejecting.",
      "range": {
        "min": -20,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "sensitivity": {
      "description": "Sensitivity to the absolute monetary amount received by the participant (split_self).",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha_ineq": {
      "description": "Sensitivity to disadvantageous inequity (receiving less than the deserved amount).",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_adv_ineq": {
      "description": "Sensitivity to advantageous inequity (receiving more than the deserved amount).",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "token_self": {
      "description": "Number of tokens found by the participant in the pre-task.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent in the pre-task.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money available in the trial (\u00a3).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "The proposed monetary share for the participant (\u00a3) in the current trial.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "total_tokens": {
      "description": "Sum of tokens found by participant and opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "contribution_share": {
      "description": "Participant's share of total tokens contributed.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "deserved_split": {
      "description": "Split amount proportional to the participant's contribution.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "inequity_disadvantageous": {
      "description": "Magnitude of disadvantageous inequity (deserved_split - split_self, if positive).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "inequity_advantageous": {
      "description": "Magnitude of advantageous inequity (split_self - deserved_split, if positive).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "This model predicts responder acceptance based on Fehr-Schmidt inequity aversion. Utility is calculated as a linear combination of a baseline acceptance tendency (bias), the absolute monetary gain offered (sensitivity * split_self), aversion to disadvantageous inequity (alpha_ineq * max(0, deserved_split - split_self)), and aversion to advantageous inequity (beta_adv_ineq * max(0, split_self - deserved_split)). The 'deserved_split' is calculated based on the participant's relative token contribution in the trial. The model uses four learnable parameters: bias, sensitivity, alpha_ineq, and beta_adv_ineq.",
  "target_variable": "accept",
  "full_reasoning": "Okay, let's work through designing this computational model step-by-step.\n\n**1. Understanding the Goal:**\nThe objective is to model the participant's decision to accept or reject an offer (`accept` variable) when they are in the responder role (`trial_role == 1`) in an ultimatum game. The model should build upon a previous successful Fehr-Schmidt-like model that used absolute monetary values and incorporated disadvantageous inequity aversion. The key aims are to improve BIC and accuracy while maintaining excellent parameter recovery, potentially by adding advantageous inequity aversion or exploring other refinements.\n\n**2. Reviewing the Previous Success:**\nThe prior model had the form:\n`Utility = bias + sensitivity * split_self - alpha_ineq * max(0, deserved_split - split_self)`\nwhere `deserved_split = combined_earning * (token_self / (token_self + token_opp))`.\nThis model performed well (BIC ~38.6, Acc ~0.81, Recovery > 0.75), suggesting the core structure (bias, sensitivity to self-gain, aversion to getting less than deserved based on contribution) is sound.\n\n**3. Considering Improvements:**\n\n*   **Advantageous Inequity:** The most direct and theoretically grounded extension is adding the `beta_adv_ineq` term from the full Fehr-Schmidt model: `- beta_adv_ineq * max(0, split_self - deserved_split)`. This captures potential aversion (e.g., guilt) to receiving *more* than the contribution-based deserved share. It adds only one parameter (`beta_adv_ineq`), keeping the model relatively parsimonious and maintaining the focus on absolute monetary differences found successful previously. Fehr & Schmidt (1999) posited `alpha >= beta >= 0`, which provides theoretical constraints. Given the success of the `alpha_ineq` term, adding `beta_adv_ineq` is a logical next step to potentially capture more variance in acceptance decisions.\n*   **Non-Linearities / Ratio Models / Prospect Theory:** While possible, these introduce more significant changes and complexity. Introducing power terms (`gamma_gain`, `delta_loss`) increases parameters and risks recovery issues. Ratio models have issues with zero denominators (`deserved_split = 0` when `token_self = 0`). A prospect theory framing (Model C discussed in thought process) naturally leads back to a structure equivalent to the full Fehr-Schmidt model when combined with absolute gain sensitivity.\n\n**4. Proposed Model:**\nBased on the reasoning above, the most promising approach is to extend the previous successful model by incorporating advantageous inequity aversion. This maintains the successful core structure while adding a theoretically motivated component.\n\n*   **Step 1: Define Deserved Split:** Calculate the split the participant might feel they \"deserve\" based on their relative contribution.\n    *   Let `total_tokens = token_self + token_opp`.\n    *   If `total_tokens == 0`, then `deserved_split = 0`.\n    *   If `total_tokens > 0`, then `deserved_split = combined_earning * (token_self / total_tokens)`.\n*   **Step 2: Calculate Inequity Components:**\n    *   `inequity_disadvantageous = max(0, deserved_split - split_self)`\n    *   `inequity_advantageous = max(0, split_self - deserved_split)`\n*   **Step 3: Calculate Utility:** The utility of accepting the offer `split_self`.\n    *   `Utility = bias + sensitivity * split_self - alpha_ineq * inequity_disadvantageous - beta_adv_ineq * inequity_advantageous`\n*   **Step 4: Map to Probability:** Use a logistic function (temperature=1) to map utility to acceptance probability.\n    *   `P(accept = 1) = 1 / (1 + exp(-Utility))`\n\n**5. Parameter Definitions and Bounds:**\n*   `bias`: Baseline tendency to accept. Range: [-20, 20].\n*   `sensitivity`: Sensitivity to the absolute monetary amount received (`split_self`). Range: [0, 20]. (Constrained to be non-negative, as more money shouldn't decrease utility).\n*   `alpha_ineq`: Sensitivity to disadvantageous inequity (getting less than deserved). Range: [0, 20]. (Constrained non-negative).\n*   `beta_adv_ineq`: Sensitivity to advantageous inequity (getting more than deserved). Range: [0, 20]. (Constrained non-negative). Often assumed `beta_adv_ineq <= alpha_ineq`, but we'll allow the fitter to determine this within the [0, 20] range.\n\nThis model has four learnable parameters. It directly uses `combined_earning`, `token_self`, `token_opp`, and `split_self` from the data for responder trials (`trial_role == 1`). It predicts `accept`.\n\n<MODEL>\ntotal_tokens = token_self + token_opp\ncontribution_share = (token_self / total_tokens) if total_tokens > 0 else 0.5\ndeserved_split = combined_earning * contribution_share\ninequity_disadvantageous = max(0, deserved_split - split_self)\ninequity_advantageous = max(0, split_self - deserved_split)\nUtility = bias + sensitivity * split_self - alpha_ineq * inequity_disadvantageous - beta_adv_ineq * inequity_advantageous\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"Utility\": {\n      \"description\": \"The calculated utility of accepting the offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline tendency parameter, reflecting inherent bias towards accepting or rejecting.\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Sensitivity to the absolute monetary amount received by the participant (split_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_ineq\": {\n      \"description\": \"Sensitivity to disadvantageous inequity (receiving less than the deserved amount).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_adv_ineq\": {\n      \"description\": \"Sensitivity to advantageous inequity (receiving more than the deserved amount).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant in the pre-task.\",\n      \"range\": {\n        \"min\": 0, \n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent in the pre-task.\",\n      \"range\": {\n        \"min\": 0, \n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money available in the trial (\u00a3).\",\n      \"range\": {\n        \"min\": 0, \n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed monetary share for the participant (\u00a3) in the current trial.\",\n      \"range\": {\n        \"min\": 0, \n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"total_tokens\": {\n        \"description\": \"Sum of tokens found by participant and opponent.\",\n        \"range\": {\n          \"min\": 0, \n          \"max\": \"inf\" \n        },\n        \"learnable\": false,\n        \"source\": \"calculated\"\n      },\n    \"contribution_share\": {\n        \"description\": \"Participant's share of total tokens contributed.\",\n        \"range\": {\n          \"min\": 0, \n          \"max\": 1 \n        },\n        \"learnable\": false,\n        \"source\": \"calculated\"\n    },\n    \"deserved_split\": {\n        \"description\": \"Split amount proportional to the participant's contribution.\",\n        \"range\": {\n            \"min\": 0,\n            \"max\": \"inf\"\n        },\n        \"learnable\": false,\n        \"source\": \"calculated\"\n    },\n    \"inequity_disadvantageous\": {\n        \"description\": \"Magnitude of disadvantageous inequity (deserved_split - split_self, if positive).\",\n        \"range\": {\n          \"min\": 0, \n          \"max\": \"inf\" \n        },\n        \"learnable\": false,\n        \"source\": \"calculated\"\n    },\n    \"inequity_advantageous\": {\n        \"description\": \"Magnitude of advantageous inequity (split_self - deserved_split, if positive).\",\n        \"range\": {\n          \"min\": 0, \n          \"max\": \"inf\" \n        },\n        \"learnable\": false,\n        \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts responder acceptance based on Fehr-Schmidt inequity aversion. Utility is calculated as a linear combination of a baseline acceptance tendency (bias), the absolute monetary gain offered (sensitivity * split_self), aversion to disadvantageous inequity (alpha_ineq * max(0, deserved_split - split_self)), and aversion to advantageous inequity (beta_adv_ineq * max(0, split_self - deserved_split)). The 'deserved_split' is calculated based on the participant's relative token contribution in the trial. The model uses four learnable parameters: bias, sensitivity, alpha_ineq, and beta_adv_ineq.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: total_tokens = token_self + token_opp\ncontribution_share = (token_self / total_tokens) if total_tokens > 0 else 0.5\ndeserved_split = combined_earning * contribution_share\ninequity_disadvantageous = max(0, deserved_split - split_self)\ninequity_advantageous = max(0, split_self - deserved_split)\nUtility = bias + sensitivity * split_self - alpha_ineq * inequity_disadvantageous - beta_adv_ineq * inequity_advantageous\nSummary: This model predicts responder acceptance based on Fehr-Schmidt inequity aversion. Utility is calculated as a linear combination of a baseline acceptance tendency (bias), the absolute monetary gain offered (sensitivity * split_self), aversion to disadvantageous inequity (alpha_ineq * max(0, deserved_split - split_self)), and aversion to advantageous inequity (beta_adv_ineq * max(0, split_self - deserved_split)). The 'deserved_split' is calculated based on the participant's relative token contribution in the trial. The model uses four learnable parameters: bias, sensitivity, alpha_ineq, and beta_adv_ineq.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, bias=0, sensitivity=1, alpha_ineq=1, beta_adv_ineq=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        total_tokens = token_self + token_opp\n        contribution_share = (token_self / total_tokens) if total_tokens > 0 else 0.5\n        deserved_split = combined_earning * contribution_share\n        inequity_disadvantageous = max(0, deserved_split - split_self)\n        inequity_advantageous = max(0, split_self - deserved_split)\n\n        Utility = bias + sensitivity * split_self - alpha_ineq * inequity_disadvantageous - beta_adv_ineq * inequity_advantageous\n        model_predictions.append(Utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.8147130647130647,
  "group_accuracies": {
    "Control": 0.8520671834625323,
    "Cocaine": 0.78125
  },
  "group_parameter_averages": {
    "Control": {
      "bias": 2.569470649554262,
      "sensitivity": 5.9828509950240685,
      "alpha_ineq": 2.000772511920929,
      "beta_adv_ineq": 2.7732968859949203
    },
    "Cocaine": {
      "bias": -0.48171954473390277,
      "sensitivity": 3.2192704431497954,
      "alpha_ineq": 1.3311763005162072,
      "beta_adv_ineq": 1.5497133408956756
    }
  },
  "fitting_results": [
    {
      "bias": -3.1577891824757014,
      "sensitivity": 0.5583819025401154,
      "alpha_ineq": 19.90165188014495,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -25.306417253948254,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.2494048574116619,
      "sensitivity": 0.5422775793243151,
      "alpha_ineq": 0.9055276853093798,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -16.262501906989225,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.8717117511734166,
      "sensitivity": 1.0923315388641792,
      "alpha_ineq": 1.8771056715116967,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -9.893465235626365,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -2.465694874821023,
      "sensitivity": 1.2777605185683143,
      "alpha_ineq": 1.176889610407366,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -12.257923096948193,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 2.592520595224375,
      "sensitivity": 0.5310243844093786,
      "alpha_ineq": 2.2209520933711335,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -8.650321987962744,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 1.0531410592890411,
      "sensitivity": 1.029962608691262,
      "alpha_ineq": 1.4024048555330002,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -10.831116531173485,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -4.746396485504066,
      "sensitivity": 20.0,
      "alpha_ineq": 0.0,
      "beta_adv_ineq": 0.7506709454426254,
      "success": true,
      "log_likelihood": -5.1171671526833325e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 2.897567763274874,
      "sensitivity": 0.8062744466231765,
      "alpha_ineq": 1.6718747912655114,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -9.823428166576731,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 20.0,
      "sensitivity": 20.0,
      "alpha_ineq": 0.0,
      "beta_adv_ineq": 12.991934901324347,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.06646834078794771,
      "sensitivity": 0.7574526610909756,
      "alpha_ineq": 1.64117666935115,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -11.165569402094043,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -4.1955725981122916,
      "sensitivity": 13.595237570734563,
      "alpha_ineq": 20.0,
      "beta_adv_ineq": 5.274445376242527,
      "success": true,
      "log_likelihood": -0.3014571881914965,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -4.417123897326044,
      "sensitivity": 0.8708613577500653,
      "alpha_ineq": 1.0045497905139522,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -6.993487398343565,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 1.0485400190595993,
      "sensitivity": 0.894674808350176,
      "alpha_ineq": 2.2731727394412133,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -8.618547051580283,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 5.733936243403155,
      "sensitivity": 20.0,
      "alpha_ineq": 0.0,
      "beta_adv_ineq": 12.990450731701033,
      "success": true,
      "log_likelihood": 3.599755604530735e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 19.555004478456794,
      "sensitivity": 4.4457103119177335,
      "alpha_ineq": 1.3299116392282198,
      "beta_adv_ineq": 15.15057891657763,
      "success": true,
      "log_likelihood": -1.4426739787761085e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 19.207649478654705,
      "sensitivity": 18.204651685973143,
      "alpha_ineq": 0.0,
      "beta_adv_ineq": 3.8685890814727153,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 20.0,
      "sensitivity": 20.0,
      "alpha_ineq": 0.0,
      "beta_adv_ineq": 13.10116138234936,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -20.0,
      "sensitivity": 20.0,
      "alpha_ineq": 5.230443936583167,
      "beta_adv_ineq": 5.863922679683698,
      "success": true,
      "log_likelihood": -0.011973483213597261,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 5.279278403299121,
      "sensitivity": 0.9475537791091518,
      "alpha_ineq": 1.4928134150691772,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -5.272536508074445,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 11.435805861167927,
      "sensitivity": 20.0,
      "alpha_ineq": 0.0,
      "beta_adv_ineq": 16.88582870866819,
      "success": true,
      "log_likelihood": 3.5999994095069185e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 2.2768048104953498,
      "sensitivity": 0.3115991138519068,
      "alpha_ineq": 1.2359347053761394,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -13.966380334052097,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 7.100437753427929,
      "sensitivity": 17.392035387519442,
      "alpha_ineq": 1.2728672655195927,
      "beta_adv_ineq": 7.094885400321984,
      "success": true,
      "log_likelihood": -113.24937576626539,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -3.294282010220319,
      "sensitivity": 1.0073362142545923,
      "alpha_ineq": 0.48157735239045124,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -15.459488812360474,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.9988743898573368,
      "sensitivity": 0.7949742575816529,
      "alpha_ineq": 0.6674484450462895,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -16.687262570253676,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 4.23760401964314,
      "sensitivity": 0.0,
      "alpha_ineq": 1.7914738160138555,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -10.409785807029548,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.1484724216725994,
      "sensitivity": 0.8140958022450728,
      "alpha_ineq": 0.8810105069496929,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -14.888736953829635,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.759866396329791,
      "sensitivity": 1.2481097979014353,
      "alpha_ineq": 1.3088546000730432,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -11.493028639546937,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.4195174669319498,
      "sensitivity": 1.395069813624112,
      "alpha_ineq": 5.206842538262914,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -3.925525590413479,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 4.428626238624248,
      "sensitivity": 0.3888884084936759,
      "alpha_ineq": 0.9747106210855007,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -7.701058339227403,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 2.977747876306713,
      "sensitivity": 0.170999542145556,
      "alpha_ineq": 0.7475801337837092,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -14.144819511626237,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 20.0,
      "sensitivity": 20.0,
      "alpha_ineq": 0.0,
      "beta_adv_ineq": 10.179295339724986,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -4.225710915405822,
      "sensitivity": 0.7067146255592454,
      "alpha_ineq": 0.9558706546701735,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -6.077184917577194,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -2.2152276403682456,
      "sensitivity": 0.6847180552903425,
      "alpha_ineq": 0.25670908868566916,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -19.421223816762264,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -1.1196152538359827,
      "sensitivity": 0.7255483910083461,
      "alpha_ineq": 0.9364139650556509,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -15.062416061221061,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -4.903718385360646,
      "sensitivity": 20.0,
      "alpha_ineq": 0.0,
      "beta_adv_ineq": 14.236976121710597,
      "success": true,
      "log_likelihood": -6.602331817446378e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -5.502946314365717,
      "sensitivity": 2.5572137167547035,
      "alpha_ineq": 0.5758190586934655,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -9.462093498311141,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.10261586204379042,
      "sensitivity": 2.1030435033786916,
      "alpha_ineq": 1.835211695283724,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -7.008173001531423,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 1.7927763810130146,
      "sensitivity": 0.3828345461844879,
      "alpha_ineq": 1.328232331341074,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -13.41803686163562,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 2.4850326219619845,
      "sensitivity": 0.17239822108670141,
      "alpha_ineq": 0.8483421709707493,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -16.16485029742494,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 3.1577598102278155,
      "sensitivity": 0.2895006308734743,
      "alpha_ineq": 0.501988087633654,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -8.535354923854468,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 2.8707438956552545,
      "sensitivity": 0.0883367090069549,
      "alpha_ineq": 1.012567915646807,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -15.691135845190798,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -1.287495906367113,
      "sensitivity": 0.47502089532798686,
      "alpha_ineq": 1.0852882823878827,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -12.071796915302313,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 12.29056073940974,
      "sensitivity": 20.0,
      "alpha_ineq": 0.0,
      "beta_adv_ineq": 0.863026512561873,
      "success": true,
      "log_likelihood": -23.02585092644049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.9670338156773693,
      "sensitivity": 0.8723287216781126,
      "alpha_ineq": 0.7102122560440526,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -15.868597923585622,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.11321489382652129,
      "sensitivity": 0.9716140542986077,
      "alpha_ineq": 1.0052613581966237,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -13.25446874155431,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.5357978008476265,
      "sensitivity": 1.0461101815839697,
      "alpha_ineq": 0.2508768177928347,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -15.179148400690291,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.3088071017882188,
      "sensitivity": 0.6412576263398427,
      "alpha_ineq": 0.9943747877765703,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -15.213175208554151,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.0253266256658913,
      "sensitivity": 0.720252049021461,
      "alpha_ineq": 0.4769168182137352,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -17.7159174310881,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 4.209124031057734,
      "sensitivity": 0.0,
      "alpha_ineq": 2.319466860392907,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -8.245801044988841,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.5378412060027096,
      "sensitivity": 0.4746310686082545,
      "alpha_ineq": 0.003882519958526107,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -22.682605511570312,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.20750507468273474,
      "sensitivity": 0.5686391457473893,
      "alpha_ineq": 0.4486751441793463,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -17.325493447423963,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.0791752489503357,
      "sensitivity": 0.5113666189682022,
      "alpha_ineq": 0.4498331042312056,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -11.40917999462184,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.1257766295427123,
      "sensitivity": 0.9075304785440579,
      "alpha_ineq": 0.3538175122240535,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -17.68762848835749,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.352852002790846,
      "sensitivity": 0.8046367410319113,
      "alpha_ineq": 0.0,
      "beta_adv_ineq": 0.10337158973735523,
      "success": true,
      "log_likelihood": -19.770488291089798,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.9313062023821541,
      "sensitivity": 0.05804575683088514,
      "alpha_ineq": 0.7321520996408462,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -18.84810229500722,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.674733877537742,
      "sensitivity": 2.921399251586934,
      "alpha_ineq": 5.5486213664921715,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -3.9621695300143753,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.8688563726371887,
      "sensitivity": 0.692981345397126,
      "alpha_ineq": 1.646544647370292,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -10.252027473461899,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 20.0,
      "sensitivity": 20.0,
      "alpha_ineq": 0.0,
      "beta_adv_ineq": 15.858302000525375,
      "success": true,
      "log_likelihood": -92.1034037165618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -4.023343583311862,
      "sensitivity": 0.7470865447310895,
      "alpha_ineq": 0.8294347897206966,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -7.766224008072806,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.0074825465324821,
      "sensitivity": 0.9537485465328999,
      "alpha_ineq": 0.13202170145257197,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -13.85763315128917,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.5662489030958929,
      "sensitivity": 0.34616912474542255,
      "alpha_ineq": 0.4968047193072551,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -19.659790023007325,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.8160322670041782,
      "sensitivity": 0.33513919026465744,
      "alpha_ineq": 1.2658013849395424,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -13.914496999657258,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -4.228598211996973,
      "sensitivity": 0.7071117964850446,
      "alpha_ineq": 0.9552332520248056,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -6.07718562492401,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.1846285257460965,
      "sensitivity": 0.7362616291339154,
      "alpha_ineq": 0.2842810713604023,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -19.125225035323947,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.6800042928863608,
      "sensitivity": 1.1650281675610807,
      "alpha_ineq": 1.3827084721491352,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -9.182541290935136,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.249680733125573,
      "sensitivity": 1.0751159436092774,
      "alpha_ineq": 0.8690096354853967,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -14.028700171264902,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -8.749491690646462,
      "sensitivity": 20.0,
      "alpha_ineq": 0.0,
      "beta_adv_ineq": 11.186286606324872,
      "success": true,
      "log_likelihood": -67.14569812617309,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 3.294694489756577,
      "sensitivity": 0.320304300952971,
      "alpha_ineq": 0.741399875452381,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -10.37316705758281,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -4.019897509107763,
      "sensitivity": 1.6552930769903313,
      "alpha_ineq": 0.4777598214944895,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -12.567591876675031,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.25426486258785,
      "sensitivity": 20.0,
      "alpha_ineq": 0.0,
      "beta_adv_ineq": 0.7361704994935344,
      "success": true,
      "log_likelihood": -69.07753058302859,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -8.019905154551669,
      "sensitivity": 3.320733092210495,
      "alpha_ineq": 20.0,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -0.04057251893445808,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.2972586649387448,
      "sensitivity": 0.5957948029361313,
      "alpha_ineq": 0.5578105832787439,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -10.61923044890136,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.4335590230224329,
      "sensitivity": 0.770483123246272,
      "alpha_ineq": 0.870232898257042,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -15.551664681810198,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.1601514976919518,
      "sensitivity": 0.970205494562462,
      "alpha_ineq": 0.16844164226460046,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -14.541141115168848,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.3101843062717211,
      "sensitivity": 0.35262715727527744,
      "alpha_ineq": 0.33782355206950204,
      "beta_adv_ineq": 1.7401831352109078,
      "success": true,
      "log_likelihood": -21.80966561289256,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 3.0722674049113263,
      "sensitivity": 0.47381190882309054,
      "alpha_ineq": 1.2850694011161587,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -11.832866667118472,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.088673354991768,
      "sensitivity": 17.31302043602233,
      "alpha_ineq": 0.0,
      "beta_adv_ineq": 4.137717625850447,
      "success": true,
      "log_likelihood": -46.049344318953814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.469965519697993,
      "sensitivity": 0.23542391265234616,
      "alpha_ineq": 0.7606950775360688,
      "beta_adv_ineq": 17.781875568385427,
      "success": true,
      "log_likelihood": -6.127157065961406,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.320927290243458,
      "sensitivity": 0.5230428803635336,
      "alpha_ineq": 0.0,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -21.682994744248326,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -4.225680458360414,
      "sensitivity": 0.7066894477219827,
      "alpha_ineq": 0.9557136475250432,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -6.0771848932051,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.10830702928505187,
      "sensitivity": 0.25358185251879506,
      "alpha_ineq": 0.27093727316816785,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -22.804479795420512,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 15.198474783528692,
      "sensitivity": 20.0,
      "alpha_ineq": 0.0,
      "beta_adv_ineq": 0.7461817337334331,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.8924305461604836,
      "sensitivity": 0.4011047917731566,
      "alpha_ineq": 1.1132554963414745,
      "beta_adv_ineq": 19.48861665282093,
      "success": true,
      "log_likelihood": -7.969370082926282,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -9.981407000652508,
      "sensitivity": 4.617666667189622,
      "alpha_ineq": 2.590194297507095,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -4.347112174196913,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.030457046883611,
      "sensitivity": 0.0,
      "alpha_ineq": 0.22625564970749434,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -23.31517933573801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.225036713741692,
      "sensitivity": 0.4652364294301558,
      "alpha_ineq": 1.5218191695348702,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -7.1543548661462815,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.8742120254768635,
      "sensitivity": 0.24215181403985914,
      "alpha_ineq": 0.6626886687799874,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -17.022305349849436,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.24266290207340552,
      "sensitivity": 0.2799401733347499,
      "alpha_ineq": 1.1759760395298722,
      "beta_adv_ineq": 1.5388751361637094,
      "success": true,
      "log_likelihood": -12.70074340729913,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 20.0,
      "sensitivity": 20.0,
      "alpha_ineq": 7.678243909598753,
      "beta_adv_ineq": 1.0686598147464412,
      "success": true,
      "log_likelihood": -23.027147017024486,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -9.941774585435239,
      "sensitivity": 3.558223002910078,
      "alpha_ineq": 1.0942907916566513,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -5.6952045821859665,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.7642569987435813,
      "sensitivity": 0.21319292353639066,
      "alpha_ineq": 0.25192431100658114,
      "beta_adv_ineq": 0.0,
      "success": true,
      "log_likelihood": -20.636838659620828,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "bias": {
        "r": 0.819218871436129,
        "p": 2.111446493778723e-25
      },
      "sensitivity": {
        "r": 0.7030445302828925,
        "p": 3.514374044456959e-16
      },
      "alpha_ineq": {
        "r": 0.8487540188800998,
        "p": 7.183780164577045e-29
      },
      "beta_adv_ineq": {
        "r": 0.12948187051209573,
        "p": 0.19915869843519143
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 45.622612595705625,
  "bic_Control": 37.276044346148446,
  "bic_Cocaine": 53.099746652600594,
  "bic_results": {
    "average_bic": 45.622612595705625,
    "individual_bics": [
      64.94691026172094,
      46.859079567802894,
      34.12100622507717,
      38.84992194772083,
      31.63471972974993,
      35.99630881617141,
      14.334075764058774,
      33.9809320869779,
      14.334075746624439,
      36.66521455801252,
      14.936990130207432,
      28.321050550511572,
      31.571169856985005,
      14.33407574662493,
      14.334076042359236,
      14.334075746624439,
      14.334075746624439,
      14.358022720251634,
      24.87914876997333,
      14.33407574662444,
      42.26683642192863,
      240.8328272863552,
      45.25305337854539,
      47.708600894331795,
      35.153647367883536,
      44.11154966148371,
      37.320133032918314,
      22.185126934651397,
      29.736192432279246,
      42.62371477707691,
      14.334075746624439,
      26.488445588978827,
      53.176523387348965,
      44.458907876266565,
      14.334075767029104,
      33.25826275044672,
      28.350421756887286,
      41.17014947709568,
      46.66377634867432,
      31.404785601533376,
      45.716347444206036,
      38.477669584429066,
      60.38577760670542,
      46.071271600995686,
      40.84301323693306,
      44.692372555205026,
      44.760426170932746,
      49.76591061600064,
      30.825677843802122,
      59.69928677696507,
      48.98506264867237,
      37.152435743068125,
      49.709332730539415,
      53.87505233600403,
      52.03028034383888,
      22.25841481385319,
      34.83813070074824,
      198.54088318694804,
      29.86652376997005,
      42.04934205640278,
      53.653655799839086,
      42.163069753138956,
      26.488447003672462,
      52.58452582447234,
      32.69915833569471,
      42.39147609635424,
      148.6254720061706,
      35.08040986899006,
      39.4692595071745,
      152.48913691988162,
      14.415220791693356,
      35.57253665162716,
      45.43740511744484,
      43.41635798416213,
      57.953406979609554,
      37.99980908806138,
      106.43276439173206,
      26.58838988574725,
      57.70006524232109,
      26.48844554023464,
      59.94303534466546,
      152.48918132686705,
      30.272815919677004,
      23.028300102218267,
      60.96443442530045,
      28.642785486117003,
      48.378686453523315,
      39.7355625684227,
      60.388369787873415,
      25.724484918196374,
      55.60775307306609
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        64.94691026172094,
        46.859079567802894,
        34.12100622507717,
        38.84992194772083,
        31.63471972974993,
        35.99630881617141,
        14.334075764058774,
        33.9809320869779,
        14.334075746624439,
        36.66521455801252,
        14.936990130207432,
        28.321050550511572,
        31.571169856985005,
        14.33407574662493,
        14.334076042359236,
        14.334075746624439,
        14.334075746624439,
        14.358022720251634,
        24.87914876997333,
        14.33407574662444,
        42.26683642192863,
        240.8328272863552,
        45.25305337854539,
        47.708600894331795,
        35.153647367883536,
        44.11154966148371,
        37.320133032918314,
        22.185126934651397,
        29.736192432279246,
        42.62371477707691,
        14.334075746624439,
        26.488445588978827,
        53.176523387348965,
        44.458907876266565,
        14.334075767029104,
        33.25826275044672,
        28.350421756887286,
        41.17014947709568,
        46.66377634867432,
        31.404785601533376,
        45.716347444206036,
        38.477669584429066,
        60.38577760670542
      ],
      "Cocaine": [
        46.071271600995686,
        40.84301323693306,
        44.692372555205026,
        44.760426170932746,
        49.76591061600064,
        30.825677843802122,
        59.69928677696507,
        48.98506264867237,
        37.152435743068125,
        49.709332730539415,
        53.87505233600403,
        52.03028034383888,
        22.25841481385319,
        34.83813070074824,
        198.54088318694804,
        29.86652376997005,
        42.04934205640278,
        53.653655799839086,
        42.163069753138956,
        26.488447003672462,
        52.58452582447234,
        32.69915833569471,
        42.39147609635424,
        148.6254720061706,
        35.08040986899006,
        39.4692595071745,
        152.48913691988162,
        14.415220791693356,
        35.57253665162716,
        45.43740511744484,
        43.41635798416213,
        57.953406979609554,
        37.99980908806138,
        106.43276439173206,
        26.58838988574725,
        57.70006524232109,
        26.48844554023464,
        59.94303534466546,
        152.48918132686705,
        30.272815919677004,
        23.028300102218267,
        60.96443442530045,
        28.642785486117003,
        48.378686453523315,
        39.7355625684227,
        60.388369787873415,
        25.724484918196374,
        55.60775307306609
      ]
    },
    "num_parameters": 4,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- bias: r = 0.819\n- sensitivity: r = 0.703\n- alpha_ineq: r = 0.849\n- beta_adv_ineq: r = 0.129",
  "previous_models": [
    "Specification: total_tokens = token_self + token_opp\ncontribution_share = (token_self / total_tokens) if total_tokens > 0 else 0.5\ndeserved_split = combined_earning * contribution_share\ninequity_disadvantageous = max(0, deserved_split - split_self)\ninequity_advantageous = max(0, split_self - deserved_split)\nUtility = bias + sensitivity * split_self - alpha_ineq * inequity_disadvantageous - beta_adv_ineq * inequity_advantageous\nSummary: This model predicts responder acceptance based on Fehr-Schmidt inequity aversion. Utility is calculated as a linear combination of a baseline acceptance tendency (bias), the absolute monetary gain offered (sensitivity * split_self), aversion to disadvantageous inequity (alpha_ineq * max(0, deserved_split - split_self)), and aversion to advantageous inequity (beta_adv_ineq * max(0, split_self - deserved_split)). The 'deserved_split' is calculated based on the participant's relative token contribution in the trial. The model uses four learnable parameters: bias, sensitivity, alpha_ineq, and beta_adv_ineq.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 45.622612595705625\nOverall Accuracy: 0.8147\nGroup Accuracies:\n- Control: 0.8521\n- Cocaine: 0.7812\n\nParameter Recovery:\n- bias: r = 0.819\n- sensitivity: r = 0.703\n- alpha_ineq: r = 0.849\n- beta_adv_ineq: r = 0.129"
  ]
}