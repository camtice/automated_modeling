{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the updated instructions for the next run:\n\n<instructions>\nThe previous run explored adding an advantageous inequity term (`beta_adv_ineq`) to the successful 3-parameter Fehr-Schmidt-style model (`bias`, `sensitivity`, `alpha_ineq`). While accuracy remained high (~0.815), this addition resulted in a significantly worse BIC (~45.6 vs. the best of ~38.6) and very poor parameter recovery for the new `beta_adv_ineq` parameter (r ~ 0.13). This suggests that, at least in this linear formulation, advantageous inequity aversion does not significantly improve the model's fit or identifiability for this dataset.\n\nThe best performing model identified so far is:\n`total_tokens = token_self + token_opp`\n`deserved_split = (combined_earning * token_self / total_tokens) if total_tokens > 0 else 0`\n`inequity = max(0, deserved_split - split_self)`\n`Utility = bias + sens * split_self - alpha_ineq * inequity`\nThis model achieved BIC ~38.6, Accuracy ~0.814, and good recovery for all parameters (r > 0.75).\n\nYour goal for this run is to **improve upon this best-performing 3-parameter model**. Focus on achieving:\n\n1.  **Lower BIC** (significantly below ~38.6).\n2.  **Higher Accuracy** (above ~0.814).\n3.  **Excellent Parameter Recovery** (all correlations preferably > 0.75).\n\nGiven that simply adding a linear advantageous inequity term was detrimental, consider modifications to the *functional form* or conceptualization of the utility components in the best 3-parameter model. Avoid merely adding parameters unless strongly justified. Here are some avenues to explore:\n\n1.  **Non-Linearity in Disadvantageous Inequity:** The current model assumes the negative utility from disadvantageous inequity (`inequity = max(0, deserved_split - split_self)`) scales linearly via `alpha_ineq`. Is this psychologically plausible?\n    *   **Power Function:** Perhaps sensitivity increases or decreases with the magnitude of the inequity. Explore `alpha_ineq * (inequity ^ delta_ineq)`. A `delta_ineq > 1` implies increasing sensitivity to larger unfairness, while `delta_ineq < 1` implies diminishing sensitivity.\n    *   **Logarithmic Function:** Could the impact be logarithmic? E.g., `- alpha_ineq * log(inequity + 1)` (adding 1 to avoid log(0)).\n    *   Think carefully about the range and interpretation of any new non-linearity parameter (`delta_ineq`).\n\n2.  **Ratio-Based Fairness Perception:** Instead of the absolute *difference* (`deserved_split - split_self`), maybe fairness is judged based on the *ratio* of the offered amount to the deserved amount.\n    *   How could `split_self / deserved_split` (or a related ratio) be incorporated? Consider potential issues when `deserved_split` is zero or very small. A possibility: incorporate the log-ratio `log((split_self + epsilon) / (deserved_split + epsilon))`, where epsilon is a small constant (e.g., 0.01) to handle zeros.\n    *   Example structure: `Utility = bias + sensitivity * split_self - alpha_ineq * max(0, log((deserved_split + epsilon) / (split_self + epsilon)))` (Note: this captures disadvantageous inequity when the ratio is > 1, so the log is positive).\n\n3.  **Interaction Effects:** Could the participant's sensitivity to the offered amount (`split_self`) *change* depending on how fair the offer is perceived?\n    *   Explore an interaction between `split_self` and `inequity`. For example: `Utility = bias + (sensitivity_base + sensitivity_interaction * inequity) * split_self - alpha_ineq * inequity`. Here, the effective sensitivity to the offered amount is modulated by the level of unfairness. Be mindful of potential complexity and recovery issues with interaction terms.\n\n4.  **Alternative Functional Forms for Gain:** While the linear sensitivity to `split_self` worked well, perhaps a simple non-linear transformation like `sensitivity * log(split_self + 1)` or `sensitivity * sqrt(split_self)` could capture diminishing returns on monetary gain better, potentially freeing up variance explained by other terms.\n\n**Emphasis:** Prioritize models that offer a clear psychological interpretation and maintain parsimony (aim for 3-4 parameters maximum). Any added complexity compared to the best 3-parameter model must demonstrate clear improvements in BIC and maintain strong parameter recovery.\n\nPlease provide your reasoning step-by-step, justify your chosen model structure by explaining how it might better capture the underlying decision process compared to previous models, and detail how it aims to improve performance metrics. Then, provide the model specification in the required format (<MODEL>, <VARIABLES>, <target_variable>, <SUMMARY>).\n</instructions>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the updated instructions for the next run:\n\n<instructions>\nThe previous run explored adding an advantageous inequity term (`beta_adv_ineq`) to the successful 3-parameter Fehr-Schmidt-style model (`bias`, `sensitivity`, `alpha_ineq`). While accuracy remained high (~0.815), this addition resulted in a significantly worse BIC (~45.6 vs. the best of ~38.6) and very poor parameter recovery for the new `beta_adv_ineq` parameter (r ~ 0.13). This suggests that, at least in this linear formulation, advantageous inequity aversion does not significantly improve the model's fit or identifiability for this dataset.\n\nThe best performing model identified so far is:\n`total_tokens = token_self + token_opp`\n`deserved_split = (combined_earning * token_self / total_tokens) if total_tokens > 0 else 0`\n`inequity = max(0, deserved_split - split_self)`\n`Utility = bias + sens * split_self - alpha_ineq * inequity`\nThis model achieved BIC ~38.6, Accuracy ~0.814, and good recovery for all parameters (r > 0.75).\n\nYour goal for this run is to **improve upon this best-performing 3-parameter model**. Focus on achieving:\n\n1.  **Lower BIC** (significantly below ~38.6).\n2.  **Higher Accuracy** (above ~0.814).\n3.  **Excellent Parameter Recovery** (all correlations preferably > 0.75).\n\nGiven that simply adding a linear advantageous inequity term was detrimental, consider modifications to the *functional form* or conceptualization of the utility components in the best 3-parameter model. Avoid merely adding parameters unless strongly justified. Here are some avenues to explore:\n\n1.  **Non-Linearity in Disadvantageous Inequity:** The current model assumes the negative utility from disadvantageous inequity (`inequity = max(0, deserved_split - split_self)`) scales linearly via `alpha_ineq`. Is this psychologically plausible?\n    *   **Power Function:** Perhaps sensitivity increases or decreases with the magnitude of the inequity. Explore `alpha_ineq * (inequity ^ delta_ineq)`. A `delta_ineq > 1` implies increasing sensitivity to larger unfairness, while `delta_ineq < 1` implies diminishing sensitivity.\n    *   **Logarithmic Function:** Could the impact be logarithmic? E.g., `- alpha_ineq * log(inequity + 1)` (adding 1 to avoid log(0)).\n    *   Think carefully about the range and interpretation of any new non-linearity parameter (`delta_ineq`).\n\n2.  **Ratio-Based Fairness Perception:** Instead of the absolute *difference* (`deserved_split - split_self`), maybe fairness is judged based on the *ratio* of the offered amount to the deserved amount.\n    *   How could `split_self / deserved_split` (or a related ratio) be incorporated? Consider potential issues when `deserved_split` is zero or very small. A possibility: incorporate the log-ratio `log((split_self + epsilon) / (deserved_split + epsilon))`, where epsilon is a small constant (e.g., 0.01) to handle zeros.\n    *   Example structure: `Utility = bias + sensitivity * split_self - alpha_ineq * max(0, log((deserved_split + epsilon) / (split_self + epsilon)))` (Note: this captures disadvantageous inequity when the ratio is > 1, so the log is positive).\n\n3.  **Interaction Effects:** Could the participant's sensitivity to the offered amount (`split_self`) *change* depending on how fair the offer is perceived?\n    *   Explore an interaction between `split_self` and `inequity`. For example: `Utility = bias + (sensitivity_base + sensitivity_interaction * inequity) * split_self - alpha_ineq * inequity`. Here, the effective sensitivity to the offered amount is modulated by the level of unfairness. Be mindful of potential complexity and recovery issues with interaction terms.\n\n4.  **Alternative Functional Forms for Gain:** While the linear sensitivity to `split_self` worked well, perhaps a simple non-linear transformation like `sensitivity * log(split_self + 1)` or `sensitivity * sqrt(split_self)` could capture diminishing returns on monetary gain better, potentially freeing up variance explained by other terms.\n\n**Emphasis:** Prioritize models that offer a clear psychological interpretation and maintain parsimony (aim for 3-4 parameters maximum). Any added complexity compared to the best 3-parameter model must demonstrate clear improvements in BIC and maintain strong parameter recovery.\n\nPlease provide your reasoning step-by-step, justify your chosen model structure by explaining how it might better capture the underlying decision process compared to previous models, and detail how it aims to improve performance metrics. Then, provide the model specification in the required format (<MODEL>, <VARIABLES>, <target_variable>, <SUMMARY>).\n</instructions>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, I understand the goal is to improve upon the previous best 3-parameter model by exploring modifications to its functional form, specifically focusing on non-linearity, while maintaining parsimony and aiming for excellent parameter recovery, lower BIC, and higher accuracy.\n\n**Step-by-Step Reasoning:**\n\n1.  **Analyze the Best Model:** The current best model `Utility = bias + sensitivity * split_self - alpha_ineq * max(0, deserved_split - split_self)` captures a baseline acceptance tendency (`bias`), sensitivity to personal gain (`sensitivity * split_self`), and aversion to disadvantageous inequity (`alpha_ineq * inequity`). The inequity is calculated linearly based on the difference between a 'deserved' amount (proportional to contribution) and the actual offered amount.\n2.  **Identify Potential Weakness:** The linear response to inequity (`alpha_ineq * inequity`) is a strong assumption. It implies that the disutility of being \u00a31 short of the deserved amount is the same whether the deserved amount was \u00a32 or \u00a320. Psychologically, the *magnitude* of the unfairness might matter non-linearly. People might become disproportionately more upset as the absolute or relative unfairness increases.\n3.  **Propose Modification - Non-Linear Inequity Aversion:** Let's introduce non-linearity specifically to the disadvantageous inequity term. A power function is a flexible way to do this: `inequity ^ delta_ineq`.\n    *   If `delta_ineq = 1`, we recover the linear model.\n    *   If `delta_ineq > 1`, it models *increasing sensitivity* to inequity. A shortfall of \u00a34 feels more than twice as bad as a shortfall of \u00a32.\n    *   If `0 < delta_ineq < 1`, it models *diminishing sensitivity* to inequity. A shortfall of \u00a34 feels less than twice as bad as a shortfall of \u00a32 (though still worse).\n    This adds only one parameter (`delta_ineq`) but allows the model to capture a potentially important psychological nuance in how unfairness is perceived.\n4.  **Define Intermediate Variables:** We need to clearly define the calculation steps based on the input data.\n    *   `total_tokens = token_self + token_opp`\n    *   `deserved_split_fraction = token_self / total_tokens` if `total_tokens > 0` else 0. (If total tokens are 0, the combined earning is \u00a30, thus the deserved split is 0).\n    *   `deserved_split = combined_earning * deserved_split_fraction`\n    *   `inequity = max(0, deserved_split - split_self)` (Calculating disadvantageous inequity)\n5.  **Formulate the Utility Function:** The utility of accepting the offer becomes:\n    `Utility = bias + sensitivity * split_self - alpha_ineq * (inequity ^ delta_ineq)`\n6.  **Parameter Considerations:** This model has four parameters: `bias`, `sensitivity`, `alpha_ineq`, and `delta_ineq`.\n    *   `bias`: Intercept, baseline tendency.\n    *   `sensitivity`: Marginal utility of money received. Expected to be non-negative.\n    *   `alpha_ineq`: Scales the aversion to inequity. Expected to be non-negative.\n    *   `delta_ineq`: Controls the curvature of inequity aversion. Expected to be positive. Values around 1 are the baseline (linear).\n7.  **Prediction:** The probability of accepting is `P(accept) = 1 / (1 + exp(-Utility))`. Decisions are made based on whether this probability exceeds a threshold (implicitly 0.5, as Utility > 0 leads to P(accept) > 0.5).\n8.  **Potential for Improvement:** This model directly tests the linearity assumption of the previous best model. If responder behavior *is* non-linear with respect to the magnitude of disadvantageous inequity, this model should provide a better fit (lower BIC, higher accuracy) without sacrificing interpretability too much. The main risk is parameter recovery, specifically potentially confounding `alpha_ineq` and `delta_ineq`, but they capture different aspects (scale vs. shape) and might be identifiable if the non-linearity is present in the data.\n\nThis approach focuses on refining a core component (inequity aversion) of the successful model, aligning with the instruction to explore non-linearity while maintaining parsimony (4 parameters).\n\n<MODEL>\ntotal_tokens = token_self + token_opp\ndeserved_split_fraction = (token_self / total_tokens) if total_tokens > 0 else 0\ndeserved_split = combined_earning * deserved_split_fraction\ninequity = max(0, deserved_split - split_self)\nUtility = bias + sensitivity * split_self - alpha_ineq * (inequity ** delta_ineq)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"Utility\": {\n      \"description\": \"The calculated utility of accepting the proposed split.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Intercept term reflecting baseline tendency to accept offers, independent of amount or fairness.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Sensitivity to the absolute amount of money offered to the participant (split_self). Higher values mean greater weight on personal gain.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5 \n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_ineq\": {\n      \"description\": \"Sensitivity to disadvantageous inequity. Scales the negative utility derived from receiving less than the deserved split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta_ineq\": {\n        \"description\": \"Exponent controlling the non-linearity of the aversion to disadvantageous inequity. delta_ineq=1 is linear aversion, >1 is increasing sensitivity, <1 is diminishing sensitivity.\",\n        \"range\": {\n          \"min\": 0.1, \n          \"max\": 5\n        },\n        \"learnable\": true,\n        \"source\": \"learnable\"\n      },\n    \"token_self\": {\n      \"description\": \"Number of tokens contributed by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens contributed by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money (\u00a3) available for splitting in the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The amount (\u00a3) of the combined earning proposed for the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"total_tokens\": {\n      \"description\": \"Sum of tokens contributed by participant and opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deserved_split_fraction\": {\n      \"description\": \"Fraction of the combined earning deserved by the participant based on relative token contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n      \"deserved_split\": {\n        \"description\": \"Amount (\u00a3) participant 'deserves' based on proportional contribution.\",\n        \"range\": {\n          \"min\": 0,\n          \"max\": \"inf\"\n        },\n        \"learnable\": false,\n        \"source\": \"calculated\"\n      },\n    \"inequity\": {\n      \"description\": \"The magnitude of disadvantageous inequity (\u00a3): how much less the participant is offered compared to their deserved split (zero if offered amount is equal or greater).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model extends a Fehr-Schmidt-style utility framework for responder decisions by incorporating non-linear aversion to disadvantageous inequity. Utility is determined by a baseline acceptance bias, linear sensitivity to the offered amount, and aversion to receiving less than a 'deserved' share (calculated based on relative contribution). The inequity aversion term includes an exponent parameter (`delta_ineq`) allowing sensitivity to inequity to increase (`delta_ineq` > 1) or decrease (`delta_ineq` < 1) with the magnitude of the unfairness, compared to the standard linear model (`delta_ineq` = 1). It uses four learnable parameters: `bias`, `sensitivity`, `alpha_ineq` (inequity scale), and `delta_ineq` (inequity curvature).\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['bias', 'sensitivity', 'alpha_ineq', 'delta_ineq']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                total_tokens = token_self + token_opp\ndeserved_split_fraction = (token_self / total_tokens) if total_tokens > 0 else 0\ndeserved_split = combined_earning * deserved_split_fraction\ninequity = max(0, deserved_split - split_self)\nUtility = bias + sensitivity * split_self - alpha_ineq * (inequity ** delta_ineq)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"Utility\": {\n      \"description\": \"The calculated utility of accepting the proposed split.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Intercept term reflecting baseline tendency to accept offers, independent of amount or fairness.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Sensitivity to the absolute amount of money offered to the participant (split_self). Higher values mean greater weight on personal gain.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_ineq\": {\n      \"description\": \"Sensitivity to disadvantageous inequity. Scales the negative utility derived from receiving less than the deserved split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta_ineq\": {\n      \"description\": \"Exponent controlling the non-linearity of the aversion to disadvantageous inequity. delta_ineq=1 is linear aversion, >1 is increasing sensitivity, <1 is diminishing sensitivity.\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens contributed by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens contributed by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money (\\u00a3) available for splitting in the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The amount (\\u00a3) of the combined earning proposed for the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"total_tokens\": {\n      \"description\": \"Sum of tokens contributed by participant and opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deserved_split_fraction\": {\n      \"description\": \"Fraction of the combined earning deserved by the participant based on relative token contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deserved_split\": {\n      \"description\": \"Amount (\\u00a3) participant 'deserves' based on proportional contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"inequity\": {\n      \"description\": \"The magnitude of disadvantageous inequity (\\u00a3): how much less the participant is offered compared to their deserved split (zero if offered amount is equal or greater).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, bias=0, sensitivity=1, alpha_ineq=1, delta_ineq=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        total_tokens = token_self + token_opp\n        deserved_split_fraction = (token_self / total_tokens) if total_tokens > 0 else 0\n        deserved_split = combined_earning * deserved_split_fraction\n        inequity = max(0, deserved_split - split_self)\n\n        utility = bias + sensitivity * split_self - alpha_ineq * (inequity ** delta_ineq)\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"A\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 10, \"split_opp\": 5.0, \"split_self\": 5.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 5.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 5.0}, {\"ID\": 2, \"group\": \"A\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 10, \"split_opp\": 5.0, \"split_self\": 5.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 5.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 5.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1745949782.664405
    }
  ],
  "learnable_parameters": {
    "bias": {
      "description": "Intercept term reflecting baseline tendency to accept offers, independent of amount or fairness.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "sensitivity": {
      "description": "Sensitivity to the absolute amount of money offered to the participant (split_self). Higher values mean greater weight on personal gain.",
      "range": {
        "min": 0,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha_ineq": {
      "description": "Sensitivity to disadvantageous inequity. Scales the negative utility derived from receiving less than the deserved split.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "delta_ineq": {
      "description": "Exponent controlling the non-linearity of the aversion to disadvantageous inequity. delta_ineq=1 is linear aversion, >1 is increasing sensitivity, <1 is diminishing sensitivity.",
      "range": {
        "min": 0.1,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "total_tokens = token_self + token_opp\ndeserved_split_fraction = (token_self / total_tokens) if total_tokens > 0 else 0\ndeserved_split = combined_earning * deserved_split_fraction\ninequity = max(0, deserved_split - split_self)\nUtility = bias + sensitivity * split_self - alpha_ineq * (inequity ** delta_ineq)",
  "variable_descriptions": {
    "Utility": {
      "description": "The calculated utility of accepting the proposed split.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "bias": {
      "description": "Intercept term reflecting baseline tendency to accept offers, independent of amount or fairness.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "sensitivity": {
      "description": "Sensitivity to the absolute amount of money offered to the participant (split_self). Higher values mean greater weight on personal gain.",
      "range": {
        "min": 0,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha_ineq": {
      "description": "Sensitivity to disadvantageous inequity. Scales the negative utility derived from receiving less than the deserved split.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "delta_ineq": {
      "description": "Exponent controlling the non-linearity of the aversion to disadvantageous inequity. delta_ineq=1 is linear aversion, >1 is increasing sensitivity, <1 is diminishing sensitivity.",
      "range": {
        "min": 0.1,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "token_self": {
      "description": "Number of tokens contributed by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens contributed by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money (\u00a3) available for splitting in the trial.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "The amount (\u00a3) of the combined earning proposed for the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "total_tokens": {
      "description": "Sum of tokens contributed by participant and opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "deserved_split_fraction": {
      "description": "Fraction of the combined earning deserved by the participant based on relative token contribution.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "deserved_split": {
      "description": "Amount (\u00a3) participant 'deserves' based on proportional contribution.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "inequity": {
      "description": "The magnitude of disadvantageous inequity (\u00a3): how much less the participant is offered compared to their deserved split (zero if offered amount is equal or greater).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "This model extends a Fehr-Schmidt-style utility framework for responder decisions by incorporating non-linear aversion to disadvantageous inequity. Utility is determined by a baseline acceptance bias, linear sensitivity to the offered amount, and aversion to receiving less than a 'deserved' share (calculated based on relative contribution). The inequity aversion term includes an exponent parameter (`delta_ineq`) allowing sensitivity to inequity to increase (`delta_ineq` > 1) or decrease (`delta_ineq` < 1) with the magnitude of the unfairness, compared to the standard linear model (`delta_ineq` = 1). It uses four learnable parameters: `bias`, `sensitivity`, `alpha_ineq` (inequity scale), and `delta_ineq` (inequity curvature).",
  "target_variable": "accept",
  "full_reasoning": "Okay, I understand the goal is to improve upon the previous best 3-parameter model by exploring modifications to its functional form, specifically focusing on non-linearity, while maintaining parsimony and aiming for excellent parameter recovery, lower BIC, and higher accuracy.\n\n**Step-by-Step Reasoning:**\n\n1.  **Analyze the Best Model:** The current best model `Utility = bias + sensitivity * split_self - alpha_ineq * max(0, deserved_split - split_self)` captures a baseline acceptance tendency (`bias`), sensitivity to personal gain (`sensitivity * split_self`), and aversion to disadvantageous inequity (`alpha_ineq * inequity`). The inequity is calculated linearly based on the difference between a 'deserved' amount (proportional to contribution) and the actual offered amount.\n2.  **Identify Potential Weakness:** The linear response to inequity (`alpha_ineq * inequity`) is a strong assumption. It implies that the disutility of being \u00a31 short of the deserved amount is the same whether the deserved amount was \u00a32 or \u00a320. Psychologically, the *magnitude* of the unfairness might matter non-linearly. People might become disproportionately more upset as the absolute or relative unfairness increases.\n3.  **Propose Modification - Non-Linear Inequity Aversion:** Let's introduce non-linearity specifically to the disadvantageous inequity term. A power function is a flexible way to do this: `inequity ^ delta_ineq`.\n    *   If `delta_ineq = 1`, we recover the linear model.\n    *   If `delta_ineq > 1`, it models *increasing sensitivity* to inequity. A shortfall of \u00a34 feels more than twice as bad as a shortfall of \u00a32.\n    *   If `0 < delta_ineq < 1`, it models *diminishing sensitivity* to inequity. A shortfall of \u00a34 feels less than twice as bad as a shortfall of \u00a32 (though still worse).\n    This adds only one parameter (`delta_ineq`) but allows the model to capture a potentially important psychological nuance in how unfairness is perceived.\n4.  **Define Intermediate Variables:** We need to clearly define the calculation steps based on the input data.\n    *   `total_tokens = token_self + token_opp`\n    *   `deserved_split_fraction = token_self / total_tokens` if `total_tokens > 0` else 0. (If total tokens are 0, the combined earning is \u00a30, thus the deserved split is 0).\n    *   `deserved_split = combined_earning * deserved_split_fraction`\n    *   `inequity = max(0, deserved_split - split_self)` (Calculating disadvantageous inequity)\n5.  **Formulate the Utility Function:** The utility of accepting the offer becomes:\n    `Utility = bias + sensitivity * split_self - alpha_ineq * (inequity ^ delta_ineq)`\n6.  **Parameter Considerations:** This model has four parameters: `bias`, `sensitivity`, `alpha_ineq`, and `delta_ineq`.\n    *   `bias`: Intercept, baseline tendency.\n    *   `sensitivity`: Marginal utility of money received. Expected to be non-negative.\n    *   `alpha_ineq`: Scales the aversion to inequity. Expected to be non-negative.\n    *   `delta_ineq`: Controls the curvature of inequity aversion. Expected to be positive. Values around 1 are the baseline (linear).\n7.  **Prediction:** The probability of accepting is `P(accept) = 1 / (1 + exp(-Utility))`. Decisions are made based on whether this probability exceeds a threshold (implicitly 0.5, as Utility > 0 leads to P(accept) > 0.5).\n8.  **Potential for Improvement:** This model directly tests the linearity assumption of the previous best model. If responder behavior *is* non-linear with respect to the magnitude of disadvantageous inequity, this model should provide a better fit (lower BIC, higher accuracy) without sacrificing interpretability too much. The main risk is parameter recovery, specifically potentially confounding `alpha_ineq` and `delta_ineq`, but they capture different aspects (scale vs. shape) and might be identifiable if the non-linearity is present in the data.\n\nThis approach focuses on refining a core component (inequity aversion) of the successful model, aligning with the instruction to explore non-linearity while maintaining parsimony (4 parameters).\n\n<MODEL>\ntotal_tokens = token_self + token_opp\ndeserved_split_fraction = (token_self / total_tokens) if total_tokens > 0 else 0\ndeserved_split = combined_earning * deserved_split_fraction\ninequity = max(0, deserved_split - split_self)\nUtility = bias + sensitivity * split_self - alpha_ineq * (inequity ** delta_ineq)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"Utility\": {\n      \"description\": \"The calculated utility of accepting the proposed split.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Intercept term reflecting baseline tendency to accept offers, independent of amount or fairness.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Sensitivity to the absolute amount of money offered to the participant (split_self). Higher values mean greater weight on personal gain.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5 \n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_ineq\": {\n      \"description\": \"Sensitivity to disadvantageous inequity. Scales the negative utility derived from receiving less than the deserved split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta_ineq\": {\n        \"description\": \"Exponent controlling the non-linearity of the aversion to disadvantageous inequity. delta_ineq=1 is linear aversion, >1 is increasing sensitivity, <1 is diminishing sensitivity.\",\n        \"range\": {\n          \"min\": 0.1, \n          \"max\": 5\n        },\n        \"learnable\": true,\n        \"source\": \"learnable\"\n      },\n    \"token_self\": {\n      \"description\": \"Number of tokens contributed by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens contributed by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money (\u00a3) available for splitting in the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The amount (\u00a3) of the combined earning proposed for the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"total_tokens\": {\n      \"description\": \"Sum of tokens contributed by participant and opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deserved_split_fraction\": {\n      \"description\": \"Fraction of the combined earning deserved by the participant based on relative token contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n      \"deserved_split\": {\n        \"description\": \"Amount (\u00a3) participant 'deserves' based on proportional contribution.\",\n        \"range\": {\n          \"min\": 0,\n          \"max\": \"inf\"\n        },\n        \"learnable\": false,\n        \"source\": \"calculated\"\n      },\n    \"inequity\": {\n      \"description\": \"The magnitude of disadvantageous inequity (\u00a3): how much less the participant is offered compared to their deserved split (zero if offered amount is equal or greater).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model extends a Fehr-Schmidt-style utility framework for responder decisions by incorporating non-linear aversion to disadvantageous inequity. Utility is determined by a baseline acceptance bias, linear sensitivity to the offered amount, and aversion to receiving less than a 'deserved' share (calculated based on relative contribution). The inequity aversion term includes an exponent parameter (`delta_ineq`) allowing sensitivity to inequity to increase (`delta_ineq` > 1) or decrease (`delta_ineq` < 1) with the magnitude of the unfairness, compared to the standard linear model (`delta_ineq` = 1). It uses four learnable parameters: `bias`, `sensitivity`, `alpha_ineq` (inequity scale), and `delta_ineq` (inequity curvature).\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: total_tokens = token_self + token_opp\ndeserved_split_fraction = (token_self / total_tokens) if total_tokens > 0 else 0\ndeserved_split = combined_earning * deserved_split_fraction\ninequity = max(0, deserved_split - split_self)\nUtility = bias + sensitivity * split_self - alpha_ineq * (inequity ** delta_ineq)\nSummary: This model extends a Fehr-Schmidt-style utility framework for responder decisions by incorporating non-linear aversion to disadvantageous inequity. Utility is determined by a baseline acceptance bias, linear sensitivity to the offered amount, and aversion to receiving less than a 'deserved' share (calculated based on relative contribution). The inequity aversion term includes an exponent parameter (`delta_ineq`) allowing sensitivity to inequity to increase (`delta_ineq` > 1) or decrease (`delta_ineq` < 1) with the magnitude of the unfairness, compared to the standard linear model (`delta_ineq` = 1). It uses four learnable parameters: `bias`, `sensitivity`, `alpha_ineq` (inequity scale), and `delta_ineq` (inequity curvature).\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, bias=0, sensitivity=1, alpha_ineq=1, delta_ineq=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        total_tokens = token_self + token_opp\n        deserved_split_fraction = (token_self / total_tokens) if total_tokens > 0 else 0\n        deserved_split = combined_earning * deserved_split_fraction\n        inequity = max(0, deserved_split - split_self)\n\n        utility = bias + sensitivity * split_self - alpha_ineq * (inequity ** delta_ineq)\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.812881562881563,
  "group_accuracies": {
    "Control": 0.851421188630491,
    "Cocaine": 0.7783564814814815
  },
  "group_parameter_averages": {
    "Control": {
      "bias": 5.725655547359388,
      "sensitivity": 1.981736335848685,
      "alpha_ineq": 4.581701017243481,
      "delta_ineq": 0.8100786334894802
    },
    "Cocaine": {
      "bias": 1.766683730278906,
      "sensitivity": 0.8691841727118508,
      "alpha_ineq": 3.411334957299525,
      "delta_ineq": 1.4114787937877584
    }
  },
  "fitting_results": [
    {
      "bias": -5.099666346940083,
      "sensitivity": 0.8036093594200138,
      "alpha_ineq": 0.030794616140254267,
      "delta_ineq": 5.0,
      "success": true,
      "log_likelihood": -5.735024413937236,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 9.286236872365574,
      "sensitivity": 0.5758459704534713,
      "alpha_ineq": 10.0,
      "delta_ineq": 0.17731942963642544,
      "success": true,
      "log_likelihood": -14.618706832719873,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 9.2681709685908,
      "sensitivity": 1.0860848178048275,
      "alpha_ineq": 10.0,
      "delta_ineq": 0.3190836201806806,
      "success": true,
      "log_likelihood": -9.651326395606137,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -3.361580604094431,
      "sensitivity": 1.3054110134475432,
      "alpha_ineq": 0.22656009754163273,
      "delta_ineq": 2.163581233451824,
      "success": true,
      "log_likelihood": -12.101730134334998,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 7.124587561311726,
      "sensitivity": 0.5158727741151035,
      "alpha_ineq": 6.588967354240457,
      "delta_ineq": 0.4758340898558179,
      "success": true,
      "log_likelihood": -8.559762806582942,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 1.3195915863003025,
      "sensitivity": 1.0284962439285745,
      "alpha_ineq": 1.6388181838557567,
      "delta_ineq": 0.9188617030142855,
      "success": true,
      "log_likelihood": -10.82954818841805,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 5.0,
      "alpha_ineq": 0.0,
      "delta_ineq": 0.1,
      "success": true,
      "log_likelihood": -2.9053042393118085e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.13937750970327611,
      "sensitivity": 0.9097984179316988,
      "alpha_ineq": 0.013889440845593577,
      "delta_ineq": 4.32684465394509,
      "success": true,
      "log_likelihood": -8.874362297940788,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 5.0,
      "alpha_ineq": 0.0,
      "delta_ineq": 0.1,
      "success": true,
      "log_likelihood": -2.9053042393118064e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 8.25318062345914,
      "sensitivity": 0.7840988195571681,
      "alpha_ineq": 10.0,
      "delta_ineq": 0.2625457767232424,
      "success": true,
      "log_likelihood": -9.806189160526143,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -7.420739186885985,
      "sensitivity": 5.0,
      "alpha_ineq": 2.616422508849006,
      "delta_ineq": 1.7267195131506148,
      "success": true,
      "log_likelihood": -1.0574714379686454,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -5.197175765837823,
      "sensitivity": 0.9556005745676646,
      "alpha_ineq": 0.050244736803589214,
      "delta_ineq": 5.0,
      "success": true,
      "log_likelihood": -6.277613603827911,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 8.860179363531103,
      "sensitivity": 0.8835979607325787,
      "alpha_ineq": 10.0,
      "delta_ineq": 0.34171615611760847,
      "success": true,
      "log_likelihood": -8.31831720060989,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 5.0,
      "alpha_ineq": 0.0,
      "delta_ineq": 0.1,
      "success": true,
      "log_likelihood": -2.90530423931181e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 7.056459162629902,
      "sensitivity": 5.0,
      "alpha_ineq": 0.0,
      "delta_ineq": 0.1,
      "success": true,
      "log_likelihood": -5.5798564900205e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 5.0,
      "alpha_ineq": 0.0,
      "delta_ineq": 0.1,
      "success": true,
      "log_likelihood": -2.905304239311808e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 5.0,
      "alpha_ineq": 0.0,
      "delta_ineq": 0.1,
      "success": true,
      "log_likelihood": -2.9053042393118095e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 4.34241139838526,
      "sensitivity": 5.0,
      "alpha_ineq": 10.0,
      "delta_ineq": 0.2655356775649872,
      "success": true,
      "log_likelihood": -1.0425849264349736,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.9445313210477359,
      "alpha_ineq": 4.961251336226883,
      "delta_ineq": 0.5595310364242077,
      "success": true,
      "log_likelihood": -5.149942916957933,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 5.0,
      "alpha_ineq": 0.0,
      "delta_ineq": 0.1,
      "success": true,
      "log_likelihood": -2.9053042393118095e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.36085483782421396,
      "alpha_ineq": 8.731332079563845,
      "delta_ineq": 0.2784892379145237,
      "success": true,
      "log_likelihood": -12.444867596544112,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.9454749606686903,
      "alpha_ineq": 6.632746845070344,
      "delta_ineq": 0.3947992163544802,
      "success": true,
      "log_likelihood": -6.843550446537715,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.0012234196780068363,
      "sensitivity": 0.9549866182629859,
      "alpha_ineq": 4.109089425961323,
      "delta_ineq": 0.1,
      "success": true,
      "log_likelihood": -14.808243744004521,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 1.3966166177456198,
      "sensitivity": 0.7959514799891811,
      "alpha_ineq": 3.1890789519567133,
      "delta_ineq": 0.32895309269895684,
      "success": true,
      "log_likelihood": -16.281983584313156,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.0,
      "alpha_ineq": 7.320849331709586,
      "delta_ineq": 0.3923533051390177,
      "success": true,
      "log_likelihood": -9.989332830332804,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 9.03765356176661,
      "sensitivity": 0.878341027438418,
      "alpha_ineq": 10.0,
      "delta_ineq": 0.19212665390921077,
      "success": true,
      "log_likelihood": -13.231451445574267,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 7.954680779495092,
      "sensitivity": 1.2369851765397009,
      "alpha_ineq": 10.0,
      "delta_ineq": 0.22743891064570274,
      "success": true,
      "log_likelihood": -11.281273852906345,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 4.945003973488776,
      "sensitivity": 1.3935134955897048,
      "alpha_ineq": 10.0,
      "delta_ineq": 0.5201189857374411,
      "success": true,
      "log_likelihood": -3.68880219327896,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 4.707598025444555,
      "sensitivity": 0.38995060787904046,
      "alpha_ineq": 1.1671860394964866,
      "delta_ineq": 0.9235197353745658,
      "success": true,
      "log_likelihood": -7.700646498879179,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.1959179202814462,
      "alpha_ineq": 7.295525665142511,
      "delta_ineq": 0.24525914403325413,
      "success": true,
      "log_likelihood": -13.292301669233451,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 5.0,
      "alpha_ineq": 0.0,
      "delta_ineq": 0.1,
      "success": true,
      "log_likelihood": -2.905304239311809e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -5.098999468439786,
      "sensitivity": 0.8034713973681655,
      "alpha_ineq": 0.03080731854470151,
      "delta_ineq": 5.0,
      "success": true,
      "log_likelihood": -5.735024353469853,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -2.1835460380276523,
      "sensitivity": 0.6849189665761463,
      "alpha_ineq": 0.29647166166472927,
      "delta_ineq": 0.9186973165148739,
      "success": true,
      "log_likelihood": -19.420207323441197,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 7.624406053376543,
      "sensitivity": 0.7457899659546229,
      "alpha_ineq": 10.0,
      "delta_ineq": 0.1543327610050698,
      "success": true,
      "log_likelihood": -13.638501505329025,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 7.1362259695338155,
      "sensitivity": 5.0,
      "alpha_ineq": 0.0,
      "delta_ineq": 0.1,
      "success": true,
      "log_likelihood": -5.151782354728136e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 2.760111877604155,
      "sensitivity": 2.5337705284839243,
      "alpha_ineq": 8.906974270393823,
      "delta_ineq": 0.12508985678119264,
      "success": true,
      "log_likelihood": -9.067913397112063,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -1.5117107606586206,
      "sensitivity": 2.1839151410182533,
      "alpha_ineq": 0.8418016321665812,
      "delta_ineq": 1.4436518765140751,
      "success": true,
      "log_likelihood": -6.94077217101838,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.38368981095241256,
      "alpha_ineq": 9.49908329211503,
      "delta_ineq": 0.23986343621804324,
      "success": true,
      "log_likelihood": -13.11240312776871,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.1940380168962424,
      "alpha_ineq": 8.213941866051625,
      "delta_ineq": 0.21313677985411394,
      "success": true,
      "log_likelihood": -15.638612911686794,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.29229382037719204,
      "alpha_ineq": 6.6020105937459785,
      "delta_ineq": 0.22744263384105548,
      "success": true,
      "log_likelihood": -7.98692853689763,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.10215757600283971,
      "alpha_ineq": 8.049296493383245,
      "delta_ineq": 0.23795789971090078,
      "success": true,
      "log_likelihood": -15.375606242294232,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 7.467339692725716,
      "sensitivity": 0.3456938203838972,
      "alpha_ineq": 10.0,
      "delta_ineq": 0.13257750773638727,
      "success": true,
      "log_likelihood": -9.521243364934437,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 7.395551690202062,
      "sensitivity": 5.0,
      "alpha_ineq": 0.0,
      "delta_ineq": 0.1,
      "success": true,
      "log_likelihood": -23.02584380201951,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 8.154323423091778,
      "sensitivity": 0.8778885118067867,
      "alpha_ineq": 10.0,
      "delta_ineq": 0.12672082626453118,
      "success": true,
      "log_likelihood": -15.454934100338747,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 8.913487709907445,
      "sensitivity": 0.9788648028403438,
      "alpha_ineq": 10.0,
      "delta_ineq": 0.1898294442394096,
      "success": true,
      "log_likelihood": -13.00057092916098,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 2.788519720088009,
      "sensitivity": 1.0279647080560084,
      "alpha_ineq": 4.633728543003156,
      "delta_ineq": 0.1,
      "success": true,
      "log_likelihood": -15.008380714191382,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 4.156955108236341,
      "sensitivity": 0.6393607982782428,
      "alpha_ineq": 4.917196351273189,
      "delta_ineq": 0.32120070986365035,
      "success": true,
      "log_likelihood": -14.987532907580825,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 5.42913337268103,
      "sensitivity": 0.7130330367644444,
      "alpha_ineq": 8.158944946836831,
      "delta_ineq": 0.1,
      "success": true,
      "log_likelihood": -16.080182414090526,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 4.194204087789721,
      "sensitivity": 0.0,
      "alpha_ineq": 2.3038694848146934,
      "delta_ineq": 1.0045289942329751,
      "success": true,
      "log_likelihood": -8.245795101126637,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.332102505231533,
      "sensitivity": 0.4627647213696983,
      "alpha_ineq": 0.16515850499536727,
      "delta_ineq": 0.18213226897639279,
      "success": true,
      "log_likelihood": -22.66988901748237,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 3.424455980250841,
      "sensitivity": 0.5699778848088716,
      "alpha_ineq": 3.8261299816465146,
      "delta_ineq": 0.19679503439450993,
      "success": true,
      "log_likelihood": -17.352769775409065,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.812225859984712,
      "sensitivity": 0.48952972905477504,
      "alpha_ineq": 0.7428103313247975,
      "delta_ineq": 0.674243545158576,
      "success": true,
      "log_likelihood": -11.387116300164635,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.006097590283956,
      "sensitivity": 0.9084391177688118,
      "alpha_ineq": 0.49029392957764756,
      "delta_ineq": 0.827984483927424,
      "success": true,
      "log_likelihood": -17.667882239166033,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.345754921301521,
      "sensitivity": 0.8003924653284848,
      "alpha_ineq": 0.0,
      "delta_ineq": 0.6011824900541373,
      "success": true,
      "log_likelihood": -19.7728846837055,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 9.322997358113062,
      "sensitivity": 0.0,
      "alpha_ineq": 9.338288312254653,
      "delta_ineq": 0.11347384212163393,
      "success": true,
      "log_likelihood": -17.15974331484503,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -10.0,
      "sensitivity": 4.515115137129049,
      "alpha_ineq": 0.7473919447855176,
      "delta_ineq": 4.227846547314579,
      "success": true,
      "log_likelihood": -3.5253010571575074,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.3394503727034075,
      "sensitivity": 0.77612873878136,
      "alpha_ineq": 0.039506352686357986,
      "delta_ineq": 5.0,
      "success": true,
      "log_likelihood": -9.776203300707586,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 2.2292948416921607,
      "sensitivity": 0.04221629459687305,
      "alpha_ineq": 0.30369856948848556,
      "delta_ineq": 0.1,
      "success": true,
      "log_likelihood": -12.522636434981274,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -4.6731880381618,
      "sensitivity": 0.8308182984887195,
      "alpha_ineq": 0.03818317771417281,
      "delta_ineq": 5.0,
      "success": true,
      "log_likelihood": -6.776611427465065,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 5.053995298437699,
      "sensitivity": 0.9043860404508686,
      "alpha_ineq": 5.818152114569765,
      "delta_ineq": 0.1,
      "success": true,
      "log_likelihood": -13.283274446331474,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 2.7586006107017282,
      "sensitivity": 0.3385409378855686,
      "alpha_ineq": 2.8099456042658875,
      "delta_ineq": 0.2825879042583927,
      "success": true,
      "log_likelihood": -19.42571713189248,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.3593300515524572,
      "alpha_ineq": 9.38312543725646,
      "delta_ineq": 0.24574423772231163,
      "success": true,
      "log_likelihood": -12.818079621759955,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -5.098799238366546,
      "sensitivity": 0.8034584093611804,
      "alpha_ineq": 0.030815039681538866,
      "delta_ineq": 5.0,
      "success": true,
      "log_likelihood": -5.735024336869979,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.4604572706133925,
      "sensitivity": 0.7128457503211258,
      "alpha_ineq": 0.0005646743084988399,
      "delta_ineq": 5.0,
      "success": true,
      "log_likelihood": -18.71799111490662,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.10967244977628564,
      "sensitivity": 1.0851784070465031,
      "alpha_ineq": 5.527968751750366,
      "delta_ineq": 0.251339768291643,
      "success": true,
      "log_likelihood": -8.53368821028306,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 7.764965799073307,
      "sensitivity": 1.144837648775927,
      "alpha_ineq": 10.0,
      "delta_ineq": 0.17938299202137273,
      "success": true,
      "log_likelihood": -12.556672637249884,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.5345165713133491,
      "alpha_ineq": 6.927288021850875,
      "delta_ineq": 0.2405442584638303,
      "success": true,
      "log_likelihood": -7.287063200878489,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.34704576830779627,
      "alpha_ineq": 6.799888455282445,
      "delta_ineq": 0.2722447167634881,
      "success": true,
      "log_likelihood": -9.984113280040727,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 4.520400807360782,
      "sensitivity": 1.6786046976536684,
      "alpha_ineq": 9.239420620795961,
      "delta_ineq": 0.1,
      "success": true,
      "log_likelihood": -11.948598501756695,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 5.036366880320393,
      "sensitivity": 0.00944561005298712,
      "alpha_ineq": 2.220942651865979,
      "delta_ineq": 0.19643109940802786,
      "success": true,
      "log_likelihood": -9.481538997336914,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.323242202722597,
      "sensitivity": 0.660236760667963,
      "alpha_ineq": 10.0,
      "delta_ineq": 0.1297565862229721,
      "success": true,
      "log_likelihood": -0.08715247541866362,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.821872351768867,
      "sensitivity": 0.6701589556262754,
      "alpha_ineq": 0.008031279165385633,
      "delta_ineq": 5.0,
      "success": true,
      "log_likelihood": -9.401191972639229,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.3705227302465786,
      "sensitivity": 0.770140167479605,
      "alpha_ineq": 0.9367192170784311,
      "delta_ineq": 0.958140332022062,
      "success": true,
      "log_likelihood": -15.55079815008179,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 2.109038877563958,
      "sensitivity": 0.9454022018329366,
      "alpha_ineq": 3.4326136511242664,
      "delta_ineq": 0.1,
      "success": true,
      "log_likelihood": -14.368927072882707,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.058475802187752425,
      "sensitivity": 0.31351970463019796,
      "alpha_ineq": 0.7127807333845065,
      "delta_ineq": 0.5348197074870632,
      "success": true,
      "log_likelihood": -22.299644774413338,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.2237484021843168,
      "sensitivity": 0.4318306946556162,
      "alpha_ineq": 0.005024246167682341,
      "delta_ineq": 4.7439493052599495,
      "success": true,
      "log_likelihood": -10.33271220259044,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.09050457347244426,
      "alpha_ineq": 5.097240470713205,
      "delta_ineq": 0.32018946103997786,
      "success": true,
      "log_likelihood": -5.987188819985674,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.5563624315406934,
      "sensitivity": 0.3447931564911392,
      "alpha_ineq": 0.011097847926671104,
      "delta_ineq": 5.0,
      "success": true,
      "log_likelihood": -6.0025080567159925,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.4343717577723587,
      "sensitivity": 0.43492254713361334,
      "alpha_ineq": 2.3807801869962435,
      "delta_ineq": 0.1,
      "success": true,
      "log_likelihood": -20.857928687184945,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -5.098744255039138,
      "sensitivity": 0.8034291114716507,
      "alpha_ineq": 0.030811738446633964,
      "delta_ineq": 5.0,
      "success": true,
      "log_likelihood": -5.735024343722742,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 2.9181625185371063,
      "sensitivity": 0.18722085702380914,
      "alpha_ineq": 3.377626012790464,
      "delta_ineq": 0.1,
      "success": true,
      "log_likelihood": -21.884313207487793,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 5.0,
      "alpha_ineq": 0.0,
      "delta_ineq": 0.1,
      "success": true,
      "log_likelihood": -67.26141120848825,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.1420283900382704,
      "sensitivity": 0.5075557604110031,
      "alpha_ineq": 0.061704467552946674,
      "delta_ineq": 5.0,
      "success": true,
      "log_likelihood": -7.743826728630488,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -10.0,
      "sensitivity": 4.045374283909159,
      "alpha_ineq": 0.2686311470795876,
      "delta_ineq": 2.564044167206164,
      "success": true,
      "log_likelihood": -3.351331211772933,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 5.187959040074489,
      "sensitivity": 0.0,
      "alpha_ineq": 4.546191006310151,
      "delta_ineq": 0.1,
      "success": true,
      "log_likelihood": -21.497435517845737,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.12358172018865606,
      "sensitivity": 0.21733805867437228,
      "alpha_ineq": 3.652846204441714,
      "delta_ineq": 0.17844083851254464,
      "success": true,
      "log_likelihood": -6.4773315264021925,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 0.26149832879011625,
      "alpha_ineq": 8.784412362600555,
      "delta_ineq": 0.1562155531614536,
      "success": true,
      "log_likelihood": -16.661224322104438,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.44977853646969046,
      "sensitivity": 0.2510850988320922,
      "alpha_ineq": 1.1060943455980334,
      "delta_ineq": 0.9247588219446864,
      "success": true,
      "log_likelihood": -13.22931712288069,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 2.1846156263134238,
      "sensitivity": 0.5036468046775996,
      "alpha_ineq": 0.00023856896673919373,
      "delta_ineq": 5.0,
      "success": true,
      "log_likelihood": -4.608652502042811,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -9.948629239971787,
      "sensitivity": 3.5574571082665445,
      "alpha_ineq": 1.0823476691251817,
      "delta_ineq": 1.0064541654786412,
      "success": true,
      "log_likelihood": -5.695184771613637,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 4.2003784347969555,
      "sensitivity": 0.17404197832879906,
      "alpha_ineq": 3.7855749928796496,
      "delta_ineq": 0.1,
      "success": true,
      "log_likelihood": -20.11696617056387,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "bias": {
        "r": 0.8039735508393462,
        "p": 7.521932655619161e-24
      },
      "sensitivity": {
        "r": 0.702396110010925,
        "p": 3.841897771350461e-16
      },
      "alpha_ineq": {
        "r": 0.6867677259278199,
        "p": 3.0678791247659977e-15
      },
      "delta_ineq": {
        "r": 0.43683172026744416,
        "p": 5.524015274959978e-06
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 36.34195201143194,
  "bic_Control": 30.661894529582284,
  "bic_Cocaine": 41.430336838922265,
  "bic_results": {
    "average_bic": 36.34195201143194,
    "individual_bics": [
      25.80412458169891,
      43.57148941926418,
      33.63672854503672,
      38.537536022494436,
      31.453601366990323,
      35.99317213066054,
      14.334076334885287,
      32.08280034970602,
      14.334076334885287,
      33.946454074876726,
      16.44901862976173,
      26.88930296148026,
      30.97071015504422,
      14.334076334885287,
      14.33408691353742,
      14.334076334885287,
      14.334076334885287,
      16.419245606694385,
      24.633961587740306,
      14.334076334885287,
      39.223810946912664,
      28.021176646899868,
      43.95056324183348,
      46.898042922450756,
      34.31274141449005,
      40.796978644972974,
      36.89662345963713,
      21.71168014038236,
      29.735368751582797,
      40.91867909229134,
      14.334076334885287,
      25.804124460764143,
      53.17449040070683,
      41.611078764482485,
      14.334086057389149,
      32.469902548048566,
      28.215620095861198,
      40.55888200936186,
      45.61130157719803,
      30.3079328276197,
      45.0852882384129,
      33.37656248369331,
      60.38576335786345,
      45.24394395450193,
      40.3352176121464,
      44.3508371822072,
      44.30914156898609,
      46.494440582005495,
      30.825665956077714,
      59.673853788789174,
      49.03961530464257,
      37.108308354153706,
      49.6698402321565,
      53.879845121235434,
      48.6535623835145,
      21.384677868139455,
      33.88648235523961,
      39.37934862378699,
      27.88729860875457,
      40.90062464648739,
      53.1855100176094,
      39.97023499734435,
      25.804124427564396,
      51.770057983637685,
      31.40145217439056,
      39.44742102832421,
      28.908202155581417,
      34.3023023139059,
      38.231272757337834,
      33.29715374849827,
      14.508380704661766,
      33.1364596991029,
      45.435672053988014,
      43.071929899589854,
      58.93336530265111,
      34.99950015900532,
      26.308453393795787,
      26.339091867256425,
      56.049933128194326,
      25.804124441269924,
      58.10270216880002,
      148.85689817080095,
      29.821729211085415,
      21.036738177370307,
      57.32894678951591,
      27.288738806628825,
      47.65652439803331,
      40.792709999585824,
      23.55138075791006,
      25.724445297051716,
      54.56800809495218
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        25.80412458169891,
        43.57148941926418,
        33.63672854503672,
        38.537536022494436,
        31.453601366990323,
        35.99317213066054,
        14.334076334885287,
        32.08280034970602,
        14.334076334885287,
        33.946454074876726,
        16.44901862976173,
        26.88930296148026,
        30.97071015504422,
        14.334076334885287,
        14.33408691353742,
        14.334076334885287,
        14.334076334885287,
        16.419245606694385,
        24.633961587740306,
        14.334076334885287,
        39.223810946912664,
        28.021176646899868,
        43.95056324183348,
        46.898042922450756,
        34.31274141449005,
        40.796978644972974,
        36.89662345963713,
        21.71168014038236,
        29.735368751582797,
        40.91867909229134,
        14.334076334885287,
        25.804124460764143,
        53.17449040070683,
        41.611078764482485,
        14.334086057389149,
        32.469902548048566,
        28.215620095861198,
        40.55888200936186,
        45.61130157719803,
        30.3079328276197,
        45.0852882384129,
        33.37656248369331,
        60.38576335786345
      ],
      "Cocaine": [
        45.24394395450193,
        40.3352176121464,
        44.3508371822072,
        44.30914156898609,
        46.494440582005495,
        30.825665956077714,
        59.673853788789174,
        49.03961530464257,
        37.108308354153706,
        49.6698402321565,
        53.879845121235434,
        48.6535623835145,
        21.384677868139455,
        33.88648235523961,
        39.37934862378699,
        27.88729860875457,
        40.90062464648739,
        53.1855100176094,
        39.97023499734435,
        25.804124427564396,
        51.770057983637685,
        31.40145217439056,
        39.44742102832421,
        28.908202155581417,
        34.3023023139059,
        38.231272757337834,
        33.29715374849827,
        14.508380704661766,
        33.1364596991029,
        45.435672053988014,
        43.071929899589854,
        58.93336530265111,
        34.99950015900532,
        26.308453393795787,
        26.339091867256425,
        56.049933128194326,
        25.804124441269924,
        58.10270216880002,
        148.85689817080095,
        29.821729211085415,
        21.036738177370307,
        57.32894678951591,
        27.288738806628825,
        47.65652439803331,
        40.792709999585824,
        23.55138075791006,
        25.724445297051716,
        54.56800809495218
      ]
    },
    "num_parameters": 4,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- bias: r = 0.804\n- sensitivity: r = 0.702\n- alpha_ineq: r = 0.687\n- delta_ineq: r = 0.437",
  "previous_models": [
    "Specification: total_tokens = token_self + token_opp\ndeserved_split_fraction = (token_self / total_tokens) if total_tokens > 0 else 0\ndeserved_split = combined_earning * deserved_split_fraction\ninequity = max(0, deserved_split - split_self)\nUtility = bias + sensitivity * split_self - alpha_ineq * (inequity ** delta_ineq)\nSummary: This model extends a Fehr-Schmidt-style utility framework for responder decisions by incorporating non-linear aversion to disadvantageous inequity. Utility is determined by a baseline acceptance bias, linear sensitivity to the offered amount, and aversion to receiving less than a 'deserved' share (calculated based on relative contribution). The inequity aversion term includes an exponent parameter (`delta_ineq`) allowing sensitivity to inequity to increase (`delta_ineq` > 1) or decrease (`delta_ineq` < 1) with the magnitude of the unfairness, compared to the standard linear model (`delta_ineq` = 1). It uses four learnable parameters: `bias`, `sensitivity`, `alpha_ineq` (inequity scale), and `delta_ineq` (inequity curvature).\nTarget Variable: accept\nPrediction Type: utility\nBIC: 36.34195201143194\nOverall Accuracy: 0.8129\nGroup Accuracies:\n- Control: 0.8514\n- Cocaine: 0.7784\n\nParameter Recovery:\n- bias: r = 0.804\n- sensitivity: r = 0.702\n- alpha_ineq: r = 0.687\n- delta_ineq: r = 0.437"
  ]
}