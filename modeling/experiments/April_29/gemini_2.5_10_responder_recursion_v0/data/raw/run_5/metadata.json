{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the updated instructions for the next run:\n\n<instructions>\nThe previous run tested a model incorporating non-linear disadvantageous inequity using a power function: `Utility = bias + sensitivity * split_self - alpha_ineq * (inequity ** delta_ineq)`. This 4-parameter model achieved the best BIC score so far (~36.3), slightly improving upon the best 3-parameter model (~38.6). However, accuracy remained similar (~0.813), and critically, parameter recovery significantly worsened. While `bias` (r~0.80) and `sensitivity` (r~0.70) were reasonable, `alpha_ineq` dropped (r~0.69), and the new `delta_ineq` parameter had very poor recovery (r~0.44).\n\nThis suggests that while some form of non-linearity or refinement might improve model fit (as indicated by BIC), the power function formulation introduced issues with parameter identifiability, potentially due to trade-offs between `alpha_ineq` and `delta_ineq`.\n\nThe best reliable model remains the 3-parameter one:\n`total_tokens = token_self + token_opp`\n`deserved_split = (combined_earning * token_self / total_tokens) if total_tokens > 0 else 0`\n`inequity = max(0, deserved_split - split_self)`\n`Utility = bias + sens * split_self - alpha_ineq * inequity`\n(BIC ~38.6, Accuracy ~0.814, Recovery: bias=0.87, sens=0.78, alpha_ineq=0.81)\n\n**Your Goal:** Develop a model that significantly improves upon *all* metrics compared to the best 3-parameter model above. Specifically aim for:\n\n1.  **Lower BIC** (Target below 36.3, ideally lower).\n2.  **Higher Accuracy** (Target above ~0.814).\n3.  **Excellent Parameter Recovery** (All parameter correlations should be > 0.75).\n\n**New Directions to Explore:**\n\nGiven the recovery issues with the power function, let's explore alternative functional forms or conceptualizations, focusing on parsimony and clear psychological interpretation. Aim for 3 parameters if possible, or 4 only if strongly justified and high recovery can be maintained.\n\n1.  **Ratio-Based Inequity Perception:** Instead of the absolute *difference* `(deserved_split - split_self)`, perhaps subjects perceive unfairness based on the *ratio* between what was deserved and what was offered.\n    *   Consider incorporating a term like `log((deserved_split + epsilon) / (split_self + epsilon))`, where epsilon is a small constant (e.g., 0.01) to handle potential division by zero or instability near zero. Disadvantageous inequity occurs when this log-ratio is positive.\n    *   Example structure (3 parameters): `Utility = bias + sensitivity * split_self - alpha_ratio_ineq * max(0, log((deserved_split + 0.01) / (split_self + 0.01)))`.\n    *   Justify why a ratio might be psychologically more plausible than an absolute difference.\n\n2.  **Logarithmic Transformation of Inequity Difference:** Revisit the idea of non-linearity in inequity aversion, but use a fixed transformation instead of a learnable exponent. A logarithm captures diminishing sensitivity to larger absolute differences.\n    *   Example structure (3 parameters): `Utility = bias + sensitivity * split_self - alpha_log_ineq * log(inequity + 1)`. (Note: `inequity` is still `max(0, deserved_split - split_self)`. Adding 1 avoids log(0)).\n    *   This tests non-linearity without adding the potentially problematic `delta_ineq` parameter.\n\n3.  **Non-Linear Utility of Gain:** Perhaps the linearity assumption is weaker for the gain term (`split_self`) rather than the inequity term. Diminishing marginal utility of money is a standard economic concept.\n    *   Keep the inequity term linear as in the best 3-parameter model, but transform the gain.\n    *   Example structure (3 parameters): `Utility = bias + sensitivity * log(split_self + 1) - alpha_ineq * inequity`.\n    *   Alternatively: `Utility = bias + sensitivity * sqrt(split_self) - alpha_ineq * inequity`.\n    *   This might allow the linear inequity term to fit better if non-linearity in gain was previously interfering.\n\n4.  **Proportional Fairness Comparison:** Frame fairness not in absolute pounds (\u00a3), but in terms of proportions of the total pot compared to proportions of contribution.\n    *   Calculate `contribution_share = token_self / total_tokens` (handle division by zero).\n    *   Calculate `offer_share = split_self / combined_earning` (handle division by zero).\n    *   Define inequity based on the difference between these shares: `proportional_inequity = max(0, contribution_share - offer_share)`.\n    *   Example structure (3 parameters): `Utility = bias + sensitivity * split_self - alpha_prop_ineq * proportional_inequity`. (Think carefully about edge cases like `total_tokens = 0` or `combined_earning = 0`. Maybe set shares to 0.5 in those cases?).\n\n**Emphasis:** Focus on models that modify the *functional form* of the relationship between variables, rather than just adding parameters linearly (like the advantageous inequity term previously). Prioritize models that maintain 3 parameters or have a very strong justification for a 4th, coupled with excellent expected parameter recovery. Think outside the standard Fehr-Schmidt variations if inspired, but ensure psychological plausibility and testability with the given data.\n\nPlease provide your reasoning step-by-step, justify your chosen model structure by explaining how it addresses the limitations of previous models and aims to improve performance metrics (especially recovery), and detail the model specification in the required format (<MODEL>, <VARIABLES>, <target_variable>, <SUMMARY>).\n</instructions>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the updated instructions for the next run:\n\n<instructions>\nThe previous run tested a model incorporating non-linear disadvantageous inequity using a power function: `Utility = bias + sensitivity * split_self - alpha_ineq * (inequity ** delta_ineq)`. This 4-parameter model achieved the best BIC score so far (~36.3), slightly improving upon the best 3-parameter model (~38.6). However, accuracy remained similar (~0.813), and critically, parameter recovery significantly worsened. While `bias` (r~0.80) and `sensitivity` (r~0.70) were reasonable, `alpha_ineq` dropped (r~0.69), and the new `delta_ineq` parameter had very poor recovery (r~0.44).\n\nThis suggests that while some form of non-linearity or refinement might improve model fit (as indicated by BIC), the power function formulation introduced issues with parameter identifiability, potentially due to trade-offs between `alpha_ineq` and `delta_ineq`.\n\nThe best reliable model remains the 3-parameter one:\n`total_tokens = token_self + token_opp`\n`deserved_split = (combined_earning * token_self / total_tokens) if total_tokens > 0 else 0`\n`inequity = max(0, deserved_split - split_self)`\n`Utility = bias + sens * split_self - alpha_ineq * inequity`\n(BIC ~38.6, Accuracy ~0.814, Recovery: bias=0.87, sens=0.78, alpha_ineq=0.81)\n\n**Your Goal:** Develop a model that significantly improves upon *all* metrics compared to the best 3-parameter model above. Specifically aim for:\n\n1.  **Lower BIC** (Target below 36.3, ideally lower).\n2.  **Higher Accuracy** (Target above ~0.814).\n3.  **Excellent Parameter Recovery** (All parameter correlations should be > 0.75).\n\n**New Directions to Explore:**\n\nGiven the recovery issues with the power function, let's explore alternative functional forms or conceptualizations, focusing on parsimony and clear psychological interpretation. Aim for 3 parameters if possible, or 4 only if strongly justified and high recovery can be maintained.\n\n1.  **Ratio-Based Inequity Perception:** Instead of the absolute *difference* `(deserved_split - split_self)`, perhaps subjects perceive unfairness based on the *ratio* between what was deserved and what was offered.\n    *   Consider incorporating a term like `log((deserved_split + epsilon) / (split_self + epsilon))`, where epsilon is a small constant (e.g., 0.01) to handle potential division by zero or instability near zero. Disadvantageous inequity occurs when this log-ratio is positive.\n    *   Example structure (3 parameters): `Utility = bias + sensitivity * split_self - alpha_ratio_ineq * max(0, log((deserved_split + 0.01) / (split_self + 0.01)))`.\n    *   Justify why a ratio might be psychologically more plausible than an absolute difference.\n\n2.  **Logarithmic Transformation of Inequity Difference:** Revisit the idea of non-linearity in inequity aversion, but use a fixed transformation instead of a learnable exponent. A logarithm captures diminishing sensitivity to larger absolute differences.\n    *   Example structure (3 parameters): `Utility = bias + sensitivity * split_self - alpha_log_ineq * log(inequity + 1)`. (Note: `inequity` is still `max(0, deserved_split - split_self)`. Adding 1 avoids log(0)).\n    *   This tests non-linearity without adding the potentially problematic `delta_ineq` parameter.\n\n3.  **Non-Linear Utility of Gain:** Perhaps the linearity assumption is weaker for the gain term (`split_self`) rather than the inequity term. Diminishing marginal utility of money is a standard economic concept.\n    *   Keep the inequity term linear as in the best 3-parameter model, but transform the gain.\n    *   Example structure (3 parameters): `Utility = bias + sensitivity * log(split_self + 1) - alpha_ineq * inequity`.\n    *   Alternatively: `Utility = bias + sensitivity * sqrt(split_self) - alpha_ineq * inequity`.\n    *   This might allow the linear inequity term to fit better if non-linearity in gain was previously interfering.\n\n4.  **Proportional Fairness Comparison:** Frame fairness not in absolute pounds (\u00a3), but in terms of proportions of the total pot compared to proportions of contribution.\n    *   Calculate `contribution_share = token_self / total_tokens` (handle division by zero).\n    *   Calculate `offer_share = split_self / combined_earning` (handle division by zero).\n    *   Define inequity based on the difference between these shares: `proportional_inequity = max(0, contribution_share - offer_share)`.\n    *   Example structure (3 parameters): `Utility = bias + sensitivity * split_self - alpha_prop_ineq * proportional_inequity`. (Think carefully about edge cases like `total_tokens = 0` or `combined_earning = 0`. Maybe set shares to 0.5 in those cases?).\n\n**Emphasis:** Focus on models that modify the *functional form* of the relationship between variables, rather than just adding parameters linearly (like the advantageous inequity term previously). Prioritize models that maintain 3 parameters or have a very strong justification for a 4th, coupled with excellent expected parameter recovery. Think outside the standard Fehr-Schmidt variations if inspired, but ensure psychological plausibility and testability with the given data.\n\nPlease provide your reasoning step-by-step, justify your chosen model structure by explaining how it addresses the limitations of previous models and aims to improve performance metrics (especially recovery), and detail the model specification in the required format (<MODEL>, <VARIABLES>, <target_variable>, <SUMMARY>).\n</instructions>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, let's break this down.\n\n**Reasoning:**\n\n1.  **Baseline Model:** The best performing model so far with good parameter recovery is a 3-parameter model: `Utility = bias + sensitivity * split_self - alpha_ineq * max(0, deserved_split - split_self)`. This model captures the core elements: baseline tendency (`bias`), value of the offer (`sensitivity * split_self`), and aversion to disadvantageous inequity (`alpha_ineq * inequity`).\n2.  **Previous Attempt:** Adding a power term `delta_ineq` to the inequity term (`alpha_ineq * (inequity ** delta_ineq)`) improved BIC slightly but severely degraded parameter recovery, particularly for `delta_ineq`. This suggests that while some non-linearity in inequity perception might exist, the power function formulation wasn't identifiable or robust.\n3.  **Goal:** Find a model improving BIC, accuracy, *and* parameter recovery (>0.75 for all params) compared to the baseline 3-parameter model.\n4.  **Exploring Alternatives:** The instructions suggest several ways to modify the functional form, focusing on 3-parameter models:\n    *   Ratio-based inequity: `log((deserved + eps)/(offered + eps))`\n    *   Log-transformed inequity difference: `log(inequity + 1)`\n    *   Non-linear gain utility: `log(split_self + 1)` or `sqrt(split_self)`\n    *   Proportional fairness comparison: `(contribution_share - offer_share)`\n5.  **Chosen Approach: Log-Transformed Inequity Difference:** I will select the model that incorporates a logarithmic transformation of the absolute inequity difference.\n    *   **Rationale:** This directly addresses the finding that *some* non-linearity in inequity might improve fit (lower BIC in the 4-param model) but avoids adding a new parameter (`delta_ineq`) which caused recovery issues. Using `log(inequity + 1)` introduces diminishing sensitivity to larger absolute amounts of unfairness (e.g., the difference between being \u00a310 and \u00a311 short feels larger than the difference between being \u00a350 and \u00a351 short). This is psychologically plausible and a standard way to model diminishing sensitivity. It maintains the parsimony of 3 parameters, enhancing the potential for good recovery.\n    *   **Calculation Details:**\n        *   Calculate `total_tokens = token_self + token_opp`.\n        *   Handle `total_tokens == 0` case: If no contribution info, assume equal split expectation. `contribution_ratio = 0.5`.\n        *   Otherwise, `contribution_ratio = token_self / total_tokens`.\n        *   Calculate `deserved_split = contribution_ratio * combined_earning`.\n        *   Calculate absolute disadvantageous inequity: `inequity_abs = max(0, deserved_split - split_self)`.\n        *   Apply log transformation: `inequity_log = log(inequity_abs + 1)`. The `+1` ensures the argument is always positive and the term is zero when inequity is zero.\n        *   Final Utility: `U = bias + sensitivity * split_self - alpha_log_ineq * inequity_log`.\n6.  **Parameter Bounds:** Generous but finite bounds will be set for the learnable parameters (`bias`, `sensitivity`, `alpha_log_ineq`). `sensitivity` and `alpha_log_ineq` are expected to be non-negative.\n\nThis model structure directly tests a specific form of non-linear inequity aversion without increasing parameter count, aiming for improved fit (BIC) while preserving or enhancing parameter recovery compared to the original 3-parameter linear inequity model.\n\n<MODEL>\ntotal_tokens = token_self + token_opp\ncontribution_ratio = token_self / total_tokens if total_tokens > 0 else 0.5\ndeserved_split = contribution_ratio * combined_earning\ninequity_abs = max(0, deserved_split - split_self)\ninequity_log = log(inequity_abs + 1)\nU = bias + sensitivity * split_self - alpha_log_ineq * inequity_log\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline tendency to accept the offer, independent of offer amount or fairness.\",\n      \"range\": {\n        \"min\": -15,\n        \"max\": 15\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Sensitivity to the absolute amount offered to the participant (split_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 15\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_log_ineq\": {\n      \"description\": \"Sensitivity to disadvantageous inequity, applied to the log-transformed absolute difference between deserved and offered split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 25\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money (\u00a3) available in the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount of money (\u00a3) offered to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"total_tokens\": {\n      \"description\": \"Sum of tokens found by participant and opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"contribution_ratio\": {\n      \"description\": \"Participant's share of total tokens contributed (or 0.5 if total is zero).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deserved_split\": {\n      \"description\": \"Amount participant 'deserves' based on their contribution ratio and total earnings.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"inequity_abs\": {\n      \"description\": \"Absolute amount of disadvantageous inequity (\u00a3): max(0, deserved_split - split_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"inequity_log\": {\n      \"description\": \"Log-transformed absolute disadvantageous inequity: log(inequity_abs + 1).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis utility model predicts responder acceptance based on three components: a baseline acceptance bias, linear sensitivity to the amount offered (`split_self`), and aversion to disadvantageous inequity. Disadvantageous inequity is calculated as the difference between a 'deserved' amount (based on the participant's proportional contribution of tokens) and the actual offer. The model incorporates diminishing sensitivity to the magnitude of this inequity by applying a logarithmic transformation (`log(inequity + 1)`) before scaling it by an inequity aversion parameter. It uses three learnable parameters: `bias`, `sensitivity`, and `alpha_log_ineq`.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['bias', 'sensitivity', 'alpha_log_ineq']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                total_tokens = token_self + token_opp\ncontribution_ratio = token_self / total_tokens if total_tokens > 0 else 0.5\ndeserved_split = contribution_ratio * combined_earning\ninequity_abs = max(0, deserved_split - split_self)\ninequity_log = log(inequity_abs + 1)\nU = bias + sensitivity * split_self - alpha_log_ineq * inequity_log\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline tendency to accept the offer, independent of offer amount or fairness.\",\n      \"range\": {\n        \"min\": -15,\n        \"max\": 15,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Sensitivity to the absolute amount offered to the participant (split_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 15,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_log_ineq\": {\n      \"description\": \"Sensitivity to disadvantageous inequity, applied to the log-transformed absolute difference between deserved and offered split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 25,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money (\\u00a3) available in the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount of money (\\u00a3) offered to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"total_tokens\": {\n      \"description\": \"Sum of tokens found by participant and opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"contribution_ratio\": {\n      \"description\": \"Participant's share of total tokens contributed (or 0.5 if total is zero).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deserved_split\": {\n      \"description\": \"Amount participant 'deserves' based on their contribution ratio and total earnings.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"inequity_abs\": {\n      \"description\": \"Absolute amount of disadvantageous inequity (\\u00a3): max(0, deserved_split - split_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"inequity_log\": {\n      \"description\": \"Log-transformed absolute disadvantageous inequity: log(inequity_abs + 1).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, bias=0, sensitivity=1, alpha_log_ineq=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        total_tokens = token_self + token_opp\n        contribution_ratio = token_self / total_tokens if total_tokens > 0 else 0.5\n        deserved_split = contribution_ratio * combined_earning\n        inequity_abs = max(0, deserved_split - split_self)\n        inequity_log = math.log(inequity_abs + 1)\n        U = bias + sensitivity * split_self - alpha_log_ineq * inequity_log\n\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 7, \"split_opp\": 3.5, \"split_self\": 3.5, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 3.5, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 3.5}, {\"ID\": 1, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 2, \"token_self\": 8, \"combined_earning\": 7, \"split_opp\": 1.4, \"split_self\": 5.6, \"splitperc_opp\": 20, \"splitperc_self\": 80, \"accept\": 1.0, \"accepted_amount\": 5.6, \"accepted_perc\": 80.0, \"proposed_perc\": 80.0, \"proposed_amount\": 5.6}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 8, \"token_self\": 2, \"combined_earning\": 7, \"split_opp\": 5.6, \"split_self\": 1.4, \"splitperc_opp\": 80, \"splitperc_self\": 20, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 20.0, \"proposed_amount\": 1.4}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1745949881.737237
    }
  ],
  "learnable_parameters": {
    "bias": {
      "description": "Baseline tendency to accept the offer, independent of offer amount or fairness.",
      "range": {
        "min": -15,
        "max": 15,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "sensitivity": {
      "description": "Sensitivity to the absolute amount offered to the participant (split_self).",
      "range": {
        "min": 0,
        "max": 15,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha_log_ineq": {
      "description": "Sensitivity to disadvantageous inequity, applied to the log-transformed absolute difference between deserved and offered split.",
      "range": {
        "min": 0,
        "max": 25,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "total_tokens = token_self + token_opp\ncontribution_ratio = token_self / total_tokens if total_tokens > 0 else 0.5\ndeserved_split = contribution_ratio * combined_earning\ninequity_abs = max(0, deserved_split - split_self)\ninequity_log = log(inequity_abs + 1)\nU = bias + sensitivity * split_self - alpha_log_ineq * inequity_log",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "bias": {
      "description": "Baseline tendency to accept the offer, independent of offer amount or fairness.",
      "range": {
        "min": -15,
        "max": 15,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "sensitivity": {
      "description": "Sensitivity to the absolute amount offered to the participant (split_self).",
      "range": {
        "min": 0,
        "max": 15,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha_log_ineq": {
      "description": "Sensitivity to disadvantageous inequity, applied to the log-transformed absolute difference between deserved and offered split.",
      "range": {
        "min": 0,
        "max": 25,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money (\u00a3) available in the trial.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Amount of money (\u00a3) offered to the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "total_tokens": {
      "description": "Sum of tokens found by participant and opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "contribution_ratio": {
      "description": "Participant's share of total tokens contributed (or 0.5 if total is zero).",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "deserved_split": {
      "description": "Amount participant 'deserves' based on their contribution ratio and total earnings.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "inequity_abs": {
      "description": "Absolute amount of disadvantageous inequity (\u00a3): max(0, deserved_split - split_self).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "inequity_log": {
      "description": "Log-transformed absolute disadvantageous inequity: log(inequity_abs + 1).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "This utility model predicts responder acceptance based on three components: a baseline acceptance bias, linear sensitivity to the amount offered (`split_self`), and aversion to disadvantageous inequity. Disadvantageous inequity is calculated as the difference between a 'deserved' amount (based on the participant's proportional contribution of tokens) and the actual offer. The model incorporates diminishing sensitivity to the magnitude of this inequity by applying a logarithmic transformation (`log(inequity + 1)`) before scaling it by an inequity aversion parameter. It uses three learnable parameters: `bias`, `sensitivity`, and `alpha_log_ineq`.",
  "target_variable": "accept",
  "full_reasoning": "Okay, let's break this down.\n\n**Reasoning:**\n\n1.  **Baseline Model:** The best performing model so far with good parameter recovery is a 3-parameter model: `Utility = bias + sensitivity * split_self - alpha_ineq * max(0, deserved_split - split_self)`. This model captures the core elements: baseline tendency (`bias`), value of the offer (`sensitivity * split_self`), and aversion to disadvantageous inequity (`alpha_ineq * inequity`).\n2.  **Previous Attempt:** Adding a power term `delta_ineq` to the inequity term (`alpha_ineq * (inequity ** delta_ineq)`) improved BIC slightly but severely degraded parameter recovery, particularly for `delta_ineq`. This suggests that while some non-linearity in inequity perception might exist, the power function formulation wasn't identifiable or robust.\n3.  **Goal:** Find a model improving BIC, accuracy, *and* parameter recovery (>0.75 for all params) compared to the baseline 3-parameter model.\n4.  **Exploring Alternatives:** The instructions suggest several ways to modify the functional form, focusing on 3-parameter models:\n    *   Ratio-based inequity: `log((deserved + eps)/(offered + eps))`\n    *   Log-transformed inequity difference: `log(inequity + 1)`\n    *   Non-linear gain utility: `log(split_self + 1)` or `sqrt(split_self)`\n    *   Proportional fairness comparison: `(contribution_share - offer_share)`\n5.  **Chosen Approach: Log-Transformed Inequity Difference:** I will select the model that incorporates a logarithmic transformation of the absolute inequity difference.\n    *   **Rationale:** This directly addresses the finding that *some* non-linearity in inequity might improve fit (lower BIC in the 4-param model) but avoids adding a new parameter (`delta_ineq`) which caused recovery issues. Using `log(inequity + 1)` introduces diminishing sensitivity to larger absolute amounts of unfairness (e.g., the difference between being \u00a310 and \u00a311 short feels larger than the difference between being \u00a350 and \u00a351 short). This is psychologically plausible and a standard way to model diminishing sensitivity. It maintains the parsimony of 3 parameters, enhancing the potential for good recovery.\n    *   **Calculation Details:**\n        *   Calculate `total_tokens = token_self + token_opp`.\n        *   Handle `total_tokens == 0` case: If no contribution info, assume equal split expectation. `contribution_ratio = 0.5`.\n        *   Otherwise, `contribution_ratio = token_self / total_tokens`.\n        *   Calculate `deserved_split = contribution_ratio * combined_earning`.\n        *   Calculate absolute disadvantageous inequity: `inequity_abs = max(0, deserved_split - split_self)`.\n        *   Apply log transformation: `inequity_log = log(inequity_abs + 1)`. The `+1` ensures the argument is always positive and the term is zero when inequity is zero.\n        *   Final Utility: `U = bias + sensitivity * split_self - alpha_log_ineq * inequity_log`.\n6.  **Parameter Bounds:** Generous but finite bounds will be set for the learnable parameters (`bias`, `sensitivity`, `alpha_log_ineq`). `sensitivity` and `alpha_log_ineq` are expected to be non-negative.\n\nThis model structure directly tests a specific form of non-linear inequity aversion without increasing parameter count, aiming for improved fit (BIC) while preserving or enhancing parameter recovery compared to the original 3-parameter linear inequity model.\n\n<MODEL>\ntotal_tokens = token_self + token_opp\ncontribution_ratio = token_self / total_tokens if total_tokens > 0 else 0.5\ndeserved_split = contribution_ratio * combined_earning\ninequity_abs = max(0, deserved_split - split_self)\ninequity_log = log(inequity_abs + 1)\nU = bias + sensitivity * split_self - alpha_log_ineq * inequity_log\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline tendency to accept the offer, independent of offer amount or fairness.\",\n      \"range\": {\n        \"min\": -15,\n        \"max\": 15\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Sensitivity to the absolute amount offered to the participant (split_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 15\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_log_ineq\": {\n      \"description\": \"Sensitivity to disadvantageous inequity, applied to the log-transformed absolute difference between deserved and offered split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 25\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money (\u00a3) available in the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount of money (\u00a3) offered to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"total_tokens\": {\n      \"description\": \"Sum of tokens found by participant and opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"contribution_ratio\": {\n      \"description\": \"Participant's share of total tokens contributed (or 0.5 if total is zero).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deserved_split\": {\n      \"description\": \"Amount participant 'deserves' based on their contribution ratio and total earnings.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"inequity_abs\": {\n      \"description\": \"Absolute amount of disadvantageous inequity (\u00a3): max(0, deserved_split - split_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"inequity_log\": {\n      \"description\": \"Log-transformed absolute disadvantageous inequity: log(inequity_abs + 1).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis utility model predicts responder acceptance based on three components: a baseline acceptance bias, linear sensitivity to the amount offered (`split_self`), and aversion to disadvantageous inequity. Disadvantageous inequity is calculated as the difference between a 'deserved' amount (based on the participant's proportional contribution of tokens) and the actual offer. The model incorporates diminishing sensitivity to the magnitude of this inequity by applying a logarithmic transformation (`log(inequity + 1)`) before scaling it by an inequity aversion parameter. It uses three learnable parameters: `bias`, `sensitivity`, and `alpha_log_ineq`.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: total_tokens = token_self + token_opp\ncontribution_ratio = token_self / total_tokens if total_tokens > 0 else 0.5\ndeserved_split = contribution_ratio * combined_earning\ninequity_abs = max(0, deserved_split - split_self)\ninequity_log = log(inequity_abs + 1)\nU = bias + sensitivity * split_self - alpha_log_ineq * inequity_log\nSummary: This utility model predicts responder acceptance based on three components: a baseline acceptance bias, linear sensitivity to the amount offered (`split_self`), and aversion to disadvantageous inequity. Disadvantageous inequity is calculated as the difference between a 'deserved' amount (based on the participant's proportional contribution of tokens) and the actual offer. The model incorporates diminishing sensitivity to the magnitude of this inequity by applying a logarithmic transformation (`log(inequity + 1)`) before scaling it by an inequity aversion parameter. It uses three learnable parameters: `bias`, `sensitivity`, and `alpha_log_ineq`.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, bias=0, sensitivity=1, alpha_log_ineq=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        total_tokens = token_self + token_opp\n        contribution_ratio = token_self / total_tokens if total_tokens > 0 else 0.5\n        deserved_split = contribution_ratio * combined_earning\n        inequity_abs = max(0, deserved_split - split_self)\n        inequity_log = math.log(inequity_abs + 1)\n        U = bias + sensitivity * split_self - alpha_log_ineq * inequity_log\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.8208180708180708,
  "group_accuracies": {
    "Control": 0.8708010335917312,
    "Cocaine": 0.7760416666666666
  },
  "group_parameter_averages": {
    "Control": {
      "bias": 4.050175207121573,
      "sensitivity": 4.187011374432272,
      "alpha_log_ineq": 4.1513081523576245
    },
    "Cocaine": {
      "bias": -0.02292842912992575,
      "sensitivity": 1.0989482716888386,
      "alpha_log_ineq": 3.3575374285554593
    }
  },
  "fitting_results": [
    {
      "bias": -3.9447698559784596,
      "sensitivity": 0.6759659836581199,
      "alpha_log_ineq": 1.980393310263629,
      "success": true,
      "log_likelihood": -6.186915982890525,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 1.5974535612634693,
      "sensitivity": 0.585215744039228,
      "alpha_log_ineq": 3.233962763248214,
      "success": true,
      "log_likelihood": -14.960560195475887,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 3.488507232309276,
      "sensitivity": 1.0946666433034764,
      "alpha_log_ineq": 6.1083123846555445,
      "success": true,
      "log_likelihood": -9.675602150296191,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -1.5806208860431332,
      "sensitivity": 1.2204863527622836,
      "alpha_log_ineq": 3.0649550484911874,
      "success": true,
      "log_likelihood": -12.692822831188833,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 5.1948009951641065,
      "sensitivity": 0.5170060311908092,
      "alpha_log_ineq": 6.638368188686638,
      "success": true,
      "log_likelihood": -8.601272902802739,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 3.2094424554151306,
      "sensitivity": 1.0224333863311164,
      "alpha_log_ineq": 4.742727544197114,
      "success": true,
      "log_likelihood": -10.961540875663767,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 12.313253462409595,
      "sensitivity": 15.0,
      "alpha_log_ineq": 0.0,
      "success": true,
      "log_likelihood": 3.5998621859410885e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 5.41735165856713,
      "sensitivity": 0.7806391518764756,
      "alpha_log_ineq": 5.550108442662204,
      "success": true,
      "log_likelihood": -10.530397874880276,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -1.9791994481146122,
      "sensitivity": 15.0,
      "alpha_log_ineq": 1.115520662350801,
      "success": true,
      "log_likelihood": -1.148871810433182e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 1.812747515549713,
      "sensitivity": 0.8242271430248455,
      "alpha_log_ineq": 5.155944007476417,
      "success": true,
      "log_likelihood": -10.021985480491104,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 8.507260707997974,
      "sensitivity": 5.300046920686269,
      "alpha_log_ineq": 25.0,
      "success": true,
      "log_likelihood": -2.2361545723116847,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -4.202594626428679,
      "sensitivity": 0.8381334128305993,
      "alpha_log_ineq": 1.9343211832146494,
      "success": true,
      "log_likelihood": -7.376752375575366,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 3.5159620488048158,
      "sensitivity": 0.8964018230182127,
      "alpha_log_ineq": 6.7094727683849325,
      "success": true,
      "log_likelihood": -8.357424176919759,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 15.0,
      "sensitivity": 15.0,
      "alpha_log_ineq": 0.0,
      "success": true,
      "log_likelihood": 3.599990971811932e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.265003590694871,
      "sensitivity": 15.0,
      "alpha_log_ineq": 6.802312892376628,
      "success": true,
      "log_likelihood": -9.274898276542529e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 15.0,
      "sensitivity": 15.0,
      "alpha_log_ineq": 0.0,
      "success": true,
      "log_likelihood": 3.599990971811932e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 15.0,
      "sensitivity": 15.0,
      "alpha_log_ineq": 0.0,
      "success": true,
      "log_likelihood": 3.599990971811932e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -9.996148048973433,
      "sensitivity": 15.0,
      "alpha_log_ineq": 12.753310032902418,
      "success": true,
      "log_likelihood": -0.04757716299948853,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 12.798483658467909,
      "sensitivity": 0.9230530074830451,
      "alpha_log_ineq": 8.38905788572214,
      "success": true,
      "log_likelihood": -5.060033118898506,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 15.0,
      "sensitivity": 15.0,
      "alpha_log_ineq": 0.0,
      "success": true,
      "log_likelihood": 3.599990971811932e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 4.75711509142469,
      "sensitivity": 0.3592330056928306,
      "alpha_log_ineq": 4.776467914345436,
      "success": true,
      "log_likelihood": -12.43867964835696,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 7.922499506716367,
      "sensitivity": 0.9393897133348449,
      "alpha_log_ineq": 5.838329859358086,
      "success": true,
      "log_likelihood": -6.809126366615855,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -3.0297196269572697,
      "sensitivity": 1.0077118276907133,
      "alpha_log_ineq": 1.2850848413366633,
      "success": true,
      "log_likelihood": -15.576508005346186,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.2117893505969434,
      "sensitivity": 0.8167614065541844,
      "alpha_log_ineq": 2.207050075936566,
      "success": true,
      "log_likelihood": -16.266037209011834,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 6.936161714768039,
      "sensitivity": 0.0,
      "alpha_log_ineq": 5.947665056543038,
      "success": true,
      "log_likelihood": -9.98585941648513,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 1.5037829563400826,
      "sensitivity": 0.8911323716545789,
      "alpha_log_ineq": 3.4937006532232497,
      "success": true,
      "log_likelihood": -13.422639380606448,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.8479834391230526,
      "sensitivity": 1.2451906953014138,
      "alpha_log_ineq": 4.144241315455784,
      "success": true,
      "log_likelihood": -11.378252533292477,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 2.447512089989617,
      "sensitivity": 1.4824149623775618,
      "alpha_log_ineq": 11.28026075976677,
      "success": true,
      "log_likelihood": -3.697183340554362,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 7.714685802163948,
      "sensitivity": 0.41183794646670224,
      "alpha_log_ineq": 4.614902741507175,
      "success": true,
      "log_likelihood": -7.759336434623936,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 5.246188594338215,
      "sensitivity": 0.18178159151387427,
      "alpha_log_ineq": 3.3974927911340185,
      "success": true,
      "log_likelihood": -13.314573728769432,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 15.0,
      "sensitivity": 15.0,
      "alpha_log_ineq": 0.0,
      "success": true,
      "log_likelihood": 3.599990971811932e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -3.9447564067265084,
      "sensitivity": 0.6759670741423285,
      "alpha_log_ineq": 1.9804068283366625,
      "success": true,
      "log_likelihood": -6.186915982993139,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -2.0416581596103804,
      "sensitivity": 0.6891114009537707,
      "alpha_log_ineq": 0.7429843932930472,
      "success": true,
      "log_likelihood": -19.441956218938934,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.20669840696333627,
      "sensitivity": 0.7605837477662941,
      "alpha_log_ineq": 2.9406891023213886,
      "success": true,
      "log_likelihood": -14.176450772619244,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 3.52559467001322,
      "sensitivity": 15.0,
      "alpha_log_ineq": 0.0,
      "success": true,
      "log_likelihood": 2.6933066884932244e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -4.732588757538086,
      "sensitivity": 2.555700904252925,
      "alpha_log_ineq": 1.966703687400415,
      "success": true,
      "log_likelihood": -9.24934495940312,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 3.0393959860396977,
      "sensitivity": 1.9450271877401488,
      "alpha_log_ineq": 6.147836204108599,
      "success": true,
      "log_likelihood": -7.403496158751168,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 3.4263131080942344,
      "sensitivity": 0.38733429687603715,
      "alpha_log_ineq": 4.18330517841606,
      "success": true,
      "log_likelihood": -13.216530508531886,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 4.0258649246423435,
      "sensitivity": 0.19227121146834783,
      "alpha_log_ineq": 3.154195246755566,
      "success": true,
      "log_likelihood": -15.69846295476077,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 5.702978801151166,
      "sensitivity": 0.26415624345062316,
      "alpha_log_ineq": 2.8968269241634963,
      "success": true,
      "log_likelihood": -7.979195579364095,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 4.405507013286086,
      "sensitivity": 0.10392132866779155,
      "alpha_log_ineq": 3.4969607937350426,
      "success": true,
      "log_likelihood": -15.454145087712307,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.36511448535833085,
      "sensitivity": 0.45368658447823945,
      "alpha_log_ineq": 3.159922196677102,
      "success": true,
      "log_likelihood": -10.776367587685856,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 5.771341380782033,
      "sensitivity": 0.0,
      "alpha_log_ineq": 1.6724568729311642,
      "success": true,
      "log_likelihood": -4.243048024746925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.16150548317889266,
      "sensitivity": 0.8873319460948839,
      "alpha_log_ineq": 2.289603584172088,
      "success": true,
      "log_likelihood": -15.667768688549808,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.259438680041713,
      "sensitivity": 0.9830102649330623,
      "alpha_log_ineq": 3.3530974578746586,
      "success": true,
      "log_likelihood": -13.124884378816338,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.2070354664484333,
      "sensitivity": 1.0516993190727948,
      "alpha_log_ineq": 0.8678750614757416,
      "success": true,
      "log_likelihood": -15.157371630573106,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.4460350947735592,
      "sensitivity": 0.6498779528624902,
      "alpha_log_ineq": 3.1252455703347164,
      "success": true,
      "log_likelihood": -15.072621790913336,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.3758828536057186,
      "sensitivity": 0.7498207741259615,
      "alpha_log_ineq": 1.7568883050633781,
      "success": true,
      "log_likelihood": -16.746203917454892,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 6.301856968867385,
      "sensitivity": 0.0,
      "alpha_log_ineq": 6.350252432078607,
      "success": true,
      "log_likelihood": -8.458582584415067,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.417494174480513,
      "sensitivity": 0.4665907307748064,
      "alpha_log_ineq": 0.09289271638518706,
      "success": true,
      "log_likelihood": -22.671726153131974,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.6672027614048281,
      "sensitivity": 0.5830969523813837,
      "alpha_log_ineq": 1.4439842031828474,
      "success": true,
      "log_likelihood": -17.480473325432804,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.7963246197480163,
      "sensitivity": 0.4907941086443514,
      "alpha_log_ineq": 1.158363134257365,
      "success": true,
      "log_likelihood": -11.394947274496214,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.7729736189375118,
      "sensitivity": 0.9168118274741025,
      "alpha_log_ineq": 1.1300748373923537,
      "success": true,
      "log_likelihood": -17.601486451263774,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.345786315035912,
      "sensitivity": 0.8004009953910732,
      "alpha_log_ineq": 0.0,
      "success": true,
      "log_likelihood": -19.77288468331907,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.8572462069292452,
      "sensitivity": 0.014347272800782131,
      "alpha_log_ineq": 2.301531333392278,
      "success": true,
      "log_likelihood": -18.03202824628319,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.0873733002993715,
      "sensitivity": 2.229014408056663,
      "alpha_log_ineq": 10.985636751722398,
      "success": true,
      "log_likelihood": -4.7117603164686015,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.0005716706397935148,
      "sensitivity": 0.6410882330311415,
      "alpha_log_ineq": 3.789919456406377,
      "success": true,
      "log_likelihood": -10.59774878552679,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.8404683218194904,
      "sensitivity": 0.06823118868981443,
      "alpha_log_ineq": 0.0,
      "success": true,
      "log_likelihood": -12.536077970390823,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.8843273330498453,
      "sensitivity": 0.7256243465211929,
      "alpha_log_ineq": 1.6171521290563837,
      "success": true,
      "log_likelihood": -8.131845428686962,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.16274536535219025,
      "sensitivity": 0.9239942365475742,
      "alpha_log_ineq": 0.9208713182644279,
      "success": true,
      "log_likelihood": -13.482353738561352,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.1811864097633735,
      "sensitivity": 0.355227332610794,
      "alpha_log_ineq": 1.6608452016163522,
      "success": true,
      "log_likelihood": -19.51096363101553,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 3.7047323041903932,
      "sensitivity": 0.36065998379598835,
      "alpha_log_ineq": 4.336253140260823,
      "success": true,
      "log_likelihood": -12.916736498424287,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.944755624768332,
      "sensitivity": 0.6759644643217815,
      "alpha_log_ineq": 1.9804041335923748,
      "success": true,
      "log_likelihood": -6.186915982921092,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.1923091233691925,
      "sensitivity": 0.7433484222145891,
      "alpha_log_ineq": 0.6424752826310679,
      "success": true,
      "log_likelihood": -19.428681889392063,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.0536459399392735,
      "sensitivity": 1.179080920118446,
      "alpha_log_ineq": 3.457138146272993,
      "success": true,
      "log_likelihood": -8.9273856168155,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.09026157058274357,
      "sensitivity": 1.1587041941966962,
      "alpha_log_ineq": 3.2685830205116244,
      "success": true,
      "log_likelihood": -12.811211015272784,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 5.504872038362232,
      "sensitivity": 0.5130835783522318,
      "alpha_log_ineq": 3.1739167084954305,
      "success": true,
      "log_likelihood": -7.276599636015198,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 5.848960677331991,
      "sensitivity": 0.3355737025992845,
      "alpha_log_ineq": 3.5662416923185067,
      "success": true,
      "log_likelihood": -9.981788413030486,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.4097410315335677,
      "sensitivity": 1.7054540395593007,
      "alpha_log_ineq": 1.753563672040325,
      "success": true,
      "log_likelihood": -12.086407890466903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 4.707874732197083,
      "sensitivity": 0.0,
      "alpha_log_ineq": 1.7623336451515956,
      "success": true,
      "log_likelihood": -9.314407787602589,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -5.859904771607664,
      "sensitivity": 2.7261281251431897,
      "alpha_log_ineq": 25.0,
      "success": true,
      "log_likelihood": -0.04121174800454137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.259792931211089,
      "sensitivity": 0.5896410364504028,
      "alpha_log_ineq": 1.1223134795391319,
      "success": true,
      "log_likelihood": -10.972624257301911,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.39723730649255434,
      "sensitivity": 0.766535319036813,
      "alpha_log_ineq": 2.5821522995867108,
      "success": true,
      "log_likelihood": -15.753803506930957,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.7016449695313773,
      "sensitivity": 0.9642667753637593,
      "alpha_log_ineq": 0.7555430490223083,
      "success": true,
      "log_likelihood": -14.392390179680932,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.03796731454302555,
      "sensitivity": 0.31691576434135216,
      "alpha_log_ineq": 0.9856051328082189,
      "success": true,
      "log_likelihood": -22.093540570136945,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 4.561415541324686,
      "sensitivity": 0.48487695630767996,
      "alpha_log_ineq": 4.070281715533765,
      "success": true,
      "log_likelihood": -12.93011810342799,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 8.053599211676904,
      "sensitivity": 0.04761431111302909,
      "alpha_log_ineq": 3.636995284764525,
      "success": true,
      "log_likelihood": -5.9374908124371215,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -15.0,
      "sensitivity": 2.025866433462629,
      "alpha_log_ineq": 16.339705779377876,
      "success": true,
      "log_likelihood": -23.12257693494511,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.8666143402458915,
      "sensitivity": 0.4936410324870059,
      "alpha_log_ineq": 0.3173234018847949,
      "success": true,
      "log_likelihood": -21.56360004639606,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.9448049149612823,
      "sensitivity": 0.6759744635899698,
      "alpha_log_ineq": 1.9803825184480366,
      "success": true,
      "log_likelihood": -6.186915983036929,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.1506540960314928,
      "sensitivity": 0.25319055941408786,
      "alpha_log_ineq": 0.8430557852549517,
      "success": true,
      "log_likelihood": -22.796053484315188,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 15.0,
      "sensitivity": 15.0,
      "alpha_log_ineq": 13.296761402717133,
      "success": true,
      "log_likelihood": -69.07727546888938,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.7676324655612974,
      "sensitivity": 0.4573445296503598,
      "alpha_log_ineq": 1.45673978211669,
      "success": true,
      "log_likelihood": -9.45371501850787,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -6.2212953249181755,
      "sensitivity": 3.4507744141397008,
      "alpha_log_ineq": 5.230528012277821,
      "success": true,
      "log_likelihood": -5.731501581520258,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.6258628847841465,
      "sensitivity": 0.0,
      "alpha_log_ineq": 1.039097850830973,
      "success": true,
      "log_likelihood": -22.574221366410683,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.7048954062752404,
      "sensitivity": 0.4128693454404483,
      "alpha_log_ineq": 3.1528327505088956,
      "success": true,
      "log_likelihood": -7.008231578315069,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 2.940760199025819,
      "sensitivity": 0.261004710361139,
      "alpha_log_ineq": 2.396922504986534,
      "success": true,
      "log_likelihood": -16.802206339148967,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.0467512101704214,
      "sensitivity": 0.21489527072753584,
      "alpha_log_ineq": 2.4424473181288784,
      "success": true,
      "log_likelihood": -13.19125767440313,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 6.822143528390073,
      "sensitivity": 0.6208017536933318,
      "alpha_log_ineq": 3.770487712825129,
      "success": true,
      "log_likelihood": -5.096648899073499,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -9.301223572470697,
      "sensitivity": 3.5695530701334652,
      "alpha_log_ineq": 3.0256778068499797,
      "success": true,
      "log_likelihood": -5.852993122428482,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.1932336474374035,
      "sensitivity": 0.2087919750371605,
      "alpha_log_ineq": 0.9318000492498054,
      "success": true,
      "log_likelihood": -20.46243567704408,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "bias": {
        "r": 0.8160800151708578,
        "p": 4.526531250436997e-25
      },
      "sensitivity": {
        "r": 0.7873254543017509,
        "p": 2.6453249225061353e-22
      },
      "alpha_log_ineq": {
        "r": 0.6698394334858753,
        "p": 2.5273148863678408e-14
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 33.41661894491751,
  "bic_Control": 26.619540574293534,
  "bic_Cocaine": 39.50566831860148,
  "bic_results": {
    "average_bic": 33.41661894491751,
    "individual_bics": [
      23.12438878114938,
      40.671677206320105,
      30.101761115960713,
      36.136202477746,
      27.95310262097381,
      32.673638566695864,
      10.750556808168607,
      31.81135256512888,
      10.750559113111951,
      30.794527776350538,
      15.222865959991701,
      25.504061566519063,
      27.46540516920785,
      10.75055680816835,
      10.750557000866296,
      10.75055680816835,
      10.75055680816835,
      10.845711141367307,
      20.870623053165342,
      10.75055680816835,
      35.62791611208225,
      24.36880954860004,
      41.9035728260607,
      43.282631233391996,
      30.72227564833859,
      37.59583557658122,
      33.507061881953284,
      18.144923496477055,
      26.269229684616203,
      37.37970427290719,
      10.75055680816835,
      23.12438878135461,
      49.634469253246195,
      39.10345836060682,
      10.750556809981717,
      29.24924673417457,
      25.55754913287067,
      37.183617832432105,
      42.14748272488987,
      26.70894797409652,
      41.658846990792945,
      32.30329199074004,
      19.23665286486218,
      42.08609419246795,
      37.00032557300101,
      41.065300076514546,
      40.895800397195,
      44.24296465027811,
      27.667721984198465,
      56.09400912163228,
      45.711503466233935,
      33.54045136436076,
      45.953529717895876,
      50.29632618200647,
      46.81461330793471,
      20.174077448305532,
      31.94605438642191,
      35.822712756149976,
      27.014247672742254,
      37.715264292491035,
      49.7724840773994,
      36.584029812216905,
      23.124388781210513,
      49.60792059415246,
      28.60532804899933,
      36.3729788459139,
      25.303756087398725,
      30.714133641429303,
      34.92337259630214,
      29.379372390573508,
      10.832980311377414,
      32.69580532997215,
      42.25816382923024,
      39.535337174730195,
      54.93763795564222,
      36.610793022224314,
      22.625538440242572,
      56.995710685258544,
      53.87775690816045,
      23.12438878144219,
      56.3426637839987,
      148.9051077531471,
      29.65798685238407,
      22.213559978408846,
      55.89899954818969,
      24.76701997199847,
      44.35496949366626,
      37.13307216417459,
      20.943854613515327,
      22.456543060225293,
      51.675428169456495
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        23.12438878114938,
        40.671677206320105,
        30.101761115960713,
        36.136202477746,
        27.95310262097381,
        32.673638566695864,
        10.750556808168607,
        31.81135256512888,
        10.750559113111951,
        30.794527776350538,
        15.222865959991701,
        25.504061566519063,
        27.46540516920785,
        10.75055680816835,
        10.750557000866296,
        10.75055680816835,
        10.75055680816835,
        10.845711141367307,
        20.870623053165342,
        10.75055680816835,
        35.62791611208225,
        24.36880954860004,
        41.9035728260607,
        43.282631233391996,
        30.72227564833859,
        37.59583557658122,
        33.507061881953284,
        18.144923496477055,
        26.269229684616203,
        37.37970427290719,
        10.75055680816835,
        23.12438878135461,
        49.634469253246195,
        39.10345836060682,
        10.750556809981717,
        29.24924673417457,
        25.55754913287067,
        37.183617832432105,
        42.14748272488987,
        26.70894797409652,
        41.658846990792945,
        32.30329199074004,
        19.23665286486218
      ],
      "Cocaine": [
        42.08609419246795,
        37.00032557300101,
        41.065300076514546,
        40.895800397195,
        44.24296465027811,
        27.667721984198465,
        56.09400912163228,
        45.711503466233935,
        33.54045136436076,
        45.953529717895876,
        50.29632618200647,
        46.81461330793471,
        20.174077448305532,
        31.94605438642191,
        35.822712756149976,
        27.014247672742254,
        37.715264292491035,
        49.7724840773994,
        36.584029812216905,
        23.124388781210513,
        49.60792059415246,
        28.60532804899933,
        36.3729788459139,
        25.303756087398725,
        30.714133641429303,
        34.92337259630214,
        29.379372390573508,
        10.832980311377414,
        32.69580532997215,
        42.25816382923024,
        39.535337174730195,
        54.93763795564222,
        36.610793022224314,
        22.625538440242572,
        56.995710685258544,
        53.87775690816045,
        23.12438878144219,
        56.3426637839987,
        148.9051077531471,
        29.65798685238407,
        22.213559978408846,
        55.89899954818969,
        24.76701997199847,
        44.35496949366626,
        37.13307216417459,
        20.943854613515327,
        22.456543060225293,
        51.675428169456495
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- bias: r = 0.816\n- sensitivity: r = 0.787\n- alpha_log_ineq: r = 0.670",
  "previous_models": [
    "Specification: total_tokens = token_self + token_opp\ncontribution_ratio = token_self / total_tokens if total_tokens > 0 else 0.5\ndeserved_split = contribution_ratio * combined_earning\ninequity_abs = max(0, deserved_split - split_self)\ninequity_log = log(inequity_abs + 1)\nU = bias + sensitivity * split_self - alpha_log_ineq * inequity_log\nSummary: This utility model predicts responder acceptance based on three components: a baseline acceptance bias, linear sensitivity to the amount offered (`split_self`), and aversion to disadvantageous inequity. Disadvantageous inequity is calculated as the difference between a 'deserved' amount (based on the participant's proportional contribution of tokens) and the actual offer. The model incorporates diminishing sensitivity to the magnitude of this inequity by applying a logarithmic transformation (`log(inequity + 1)`) before scaling it by an inequity aversion parameter. It uses three learnable parameters: `bias`, `sensitivity`, and `alpha_log_ineq`.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 33.41661894491751\nOverall Accuracy: 0.8208\nGroup Accuracies:\n- Control: 0.8708\n- Cocaine: 0.7760\n\nParameter Recovery:\n- bias: r = 0.816\n- sensitivity: r = 0.787\n- alpha_log_ineq: r = 0.670"
  ]
}