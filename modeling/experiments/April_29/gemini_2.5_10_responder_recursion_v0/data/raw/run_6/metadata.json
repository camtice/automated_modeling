{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the updated instructions for the next run (Run 6):\n\n<instructions>\nThe previous run successfully implemented a model with logarithmic transformation of disadvantageous inequity:\n`total_tokens = token_self + token_opp`\n`contribution_ratio = token_self / total_tokens if total_tokens > 0 else 0.5`\n`deserved_split = contribution_ratio * combined_earning`\n`inequity_abs = max(0, deserved_split - split_self)`\n`inequity_log = log(inequity_abs + 1)`\n`Utility = bias + sensitivity * split_self - alpha_log_ineq * inequity_log`\n\nThis model achieved the best BIC (~33.4) and accuracy (~0.821) scores seen so far, significantly improving upon the baseline linear inequity model (BIC ~38.6, Acc ~0.814). However, while the recovery for `bias` (r~0.82) and `sensitivity` (r~0.79) remained good, the recovery for the new `alpha_log_ineq` parameter (r~0.67) fell below the desired threshold of 0.75.\n\nThis suggests the non-linear transformation captured important aspects of the decision process (improving fit), but its specific implementation might be interfering with parameter identifiability, particularly for the inequity sensitivity parameter.\n\n**Your Goal:** Develop a model that maintains or improves upon the excellent BIC and Accuracy of the log-inequity model (Target BIC < 34, Accuracy > 0.82) **while ensuring excellent parameter recovery for *all* learnable parameters (Target r > 0.75 for all).**\n\n**New Directions to Explore:**\n\nGiven the recovery issue with `alpha_log_ineq`, let's explore alternative ways to incorporate non-linearity or refine the model structure, focusing on maintaining parsimony (ideally 3 parameters) and improving parameter identifiability.\n\n1.  **Non-Linear Utility of Gain (Primary Focus):** Perhaps the non-linearity observed in the data is better attributed to diminishing marginal utility of the monetary gain (`split_self`) rather than the inequity term. Test this by keeping the inequity term *linear* (as in the original reliable 3-parameter model) but applying a non-linear transformation to the gain term.\n    *   **Option 1a (Logarithmic Gain):** `Utility = bias + sensitivity * log(split_self + 1) - alpha_ineq * inequity`\n        *   Where `inequity = max(0, deserved_split - split_self)` (calculated as before).\n        *   This uses 3 parameters (`bias`, `sensitivity`, `alpha_ineq`). `sensitivity` now applies to the log-transformed gain. Adding 1 avoids log(0).\n    *   **Option 1b (Square Root Gain):** `Utility = bias + sensitivity * sqrt(split_self) - alpha_ineq * inequity`\n        *   Similar structure, 3 parameters (`bias`, `sensitivity`, `alpha_ineq`), but uses square root to model diminishing returns.\n    *   **Justification:** This approach tests a standard economic principle (diminishing marginal utility) and uses the linear inequity formulation that previously showed good parameter recovery for `alpha_ineq`. It might achieve good fit by capturing non-linearity in gain, potentially resolving the recovery issue seen when non-linearity was forced onto the inequity term.\n\n2.  **Ratio-Based Inequity Perception (Secondary Option):** If non-linear gain doesn't resolve the issues, consider the alternative functional form for inequity based on ratios, which was suggested previously but not yet tested.\n    *   **Option 2a (Log-Ratio Inequity):** `Utility = bias + sensitivity * split_self - alpha_ratio_ineq * max(0, log((deserved_split + 0.01) / (split_self + 0.01)))`\n        *   Uses 3 parameters (`bias`, `sensitivity`, `alpha_ratio_ineq`). Epsilon (e.g., 0.01) is a small constant to prevent log(0) or division by zero.\n    *   **Justification:** This tests if perceiving fairness as a *ratio* rather than an absolute difference provides a better fit and potentially better parameter recovery properties than the previous log-difference model. Keep the gain term linear here (`sensitivity * split_self`).\n\n**Emphasis:**\n*   Prioritize the **Non-Linear Utility of Gain** approach first (Option 1a or 1b). Explain your choice (log vs sqrt) if you have a preference.\n*   Ensure your model uses exactly 3 learnable parameters.\n*   Critically evaluate how your chosen structure aims to maintain the BIC/Accuracy improvements while *specifically addressing* the parameter recovery problem encountered with `alpha_log_ineq` in the last run.\n*   Think creatively about functional forms, but ensure they are psychologically plausible and can be implemented robustly with the provided data structure.\n\nPlease provide your reasoning step-by-step, justify your chosen model structure by explaining how it addresses the limitations of the previous model and aims to meet all performance goals (BIC, Accuracy, Recovery), and detail the model specification in the required format (<MODEL>, <VARIABLES>, <target_variable>, <SUMMARY>). Remember to define appropriate, generous but finite bounds for learnable parameters.\n</instructions>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the updated instructions for the next run (Run 6):\n\n<instructions>\nThe previous run successfully implemented a model with logarithmic transformation of disadvantageous inequity:\n`total_tokens = token_self + token_opp`\n`contribution_ratio = token_self / total_tokens if total_tokens > 0 else 0.5`\n`deserved_split = contribution_ratio * combined_earning`\n`inequity_abs = max(0, deserved_split - split_self)`\n`inequity_log = log(inequity_abs + 1)`\n`Utility = bias + sensitivity * split_self - alpha_log_ineq * inequity_log`\n\nThis model achieved the best BIC (~33.4) and accuracy (~0.821) scores seen so far, significantly improving upon the baseline linear inequity model (BIC ~38.6, Acc ~0.814). However, while the recovery for `bias` (r~0.82) and `sensitivity` (r~0.79) remained good, the recovery for the new `alpha_log_ineq` parameter (r~0.67) fell below the desired threshold of 0.75.\n\nThis suggests the non-linear transformation captured important aspects of the decision process (improving fit), but its specific implementation might be interfering with parameter identifiability, particularly for the inequity sensitivity parameter.\n\n**Your Goal:** Develop a model that maintains or improves upon the excellent BIC and Accuracy of the log-inequity model (Target BIC < 34, Accuracy > 0.82) **while ensuring excellent parameter recovery for *all* learnable parameters (Target r > 0.75 for all).**\n\n**New Directions to Explore:**\n\nGiven the recovery issue with `alpha_log_ineq`, let's explore alternative ways to incorporate non-linearity or refine the model structure, focusing on maintaining parsimony (ideally 3 parameters) and improving parameter identifiability.\n\n1.  **Non-Linear Utility of Gain (Primary Focus):** Perhaps the non-linearity observed in the data is better attributed to diminishing marginal utility of the monetary gain (`split_self`) rather than the inequity term. Test this by keeping the inequity term *linear* (as in the original reliable 3-parameter model) but applying a non-linear transformation to the gain term.\n    *   **Option 1a (Logarithmic Gain):** `Utility = bias + sensitivity * log(split_self + 1) - alpha_ineq * inequity`\n        *   Where `inequity = max(0, deserved_split - split_self)` (calculated as before).\n        *   This uses 3 parameters (`bias`, `sensitivity`, `alpha_ineq`). `sensitivity` now applies to the log-transformed gain. Adding 1 avoids log(0).\n    *   **Option 1b (Square Root Gain):** `Utility = bias + sensitivity * sqrt(split_self) - alpha_ineq * inequity`\n        *   Similar structure, 3 parameters (`bias`, `sensitivity`, `alpha_ineq`), but uses square root to model diminishing returns.\n    *   **Justification:** This approach tests a standard economic principle (diminishing marginal utility) and uses the linear inequity formulation that previously showed good parameter recovery for `alpha_ineq`. It might achieve good fit by capturing non-linearity in gain, potentially resolving the recovery issue seen when non-linearity was forced onto the inequity term.\n\n2.  **Ratio-Based Inequity Perception (Secondary Option):** If non-linear gain doesn't resolve the issues, consider the alternative functional form for inequity based on ratios, which was suggested previously but not yet tested.\n    *   **Option 2a (Log-Ratio Inequity):** `Utility = bias + sensitivity * split_self - alpha_ratio_ineq * max(0, log((deserved_split + 0.01) / (split_self + 0.01)))`\n        *   Uses 3 parameters (`bias`, `sensitivity`, `alpha_ratio_ineq`). Epsilon (e.g., 0.01) is a small constant to prevent log(0) or division by zero.\n    *   **Justification:** This tests if perceiving fairness as a *ratio* rather than an absolute difference provides a better fit and potentially better parameter recovery properties than the previous log-difference model. Keep the gain term linear here (`sensitivity * split_self`).\n\n**Emphasis:**\n*   Prioritize the **Non-Linear Utility of Gain** approach first (Option 1a or 1b). Explain your choice (log vs sqrt) if you have a preference.\n*   Ensure your model uses exactly 3 learnable parameters.\n*   Critically evaluate how your chosen structure aims to maintain the BIC/Accuracy improvements while *specifically addressing* the parameter recovery problem encountered with `alpha_log_ineq` in the last run.\n*   Think creatively about functional forms, but ensure they are psychologically plausible and can be implemented robustly with the provided data structure.\n\nPlease provide your reasoning step-by-step, justify your chosen model structure by explaining how it addresses the limitations of the previous model and aims to meet all performance goals (BIC, Accuracy, Recovery), and detail the model specification in the required format (<MODEL>, <VARIABLES>, <target_variable>, <SUMMARY>). Remember to define appropriate, generous but finite bounds for learnable parameters.\n</instructions>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, let's think through this step by step.\n\n**1. Understand the Goal:**\nThe primary goal is to model responder acceptance (`accept`) in the Ultimatum Game. Key constraints are achieving good model fit (BIC < 34, Accuracy > 0.82) *and* excellent parameter recovery (r > 0.75 for all parameters). The model should have 3 learnable parameters.\n\n**2. Analyze Previous Results:**\nThe previous model (`Utility = bias + sensitivity * split_self - alpha_log_ineq * log(inequity + 1)`) achieved excellent fit but failed on recovery for `alpha_log_ineq`. The parameters associated with linear terms (`bias`, `sensitivity`) had good recovery. This suggests the non-linear *log(inequity + 1)* term, while improving fit, created identifiability issues, potentially because inequity (`deserved_split - split_self`) is already related to `split_self`.\n\n**3. Evaluate New Options:**\nThe instructions propose two main avenues:\n    *   **Option 1: Non-Linear Gain:** Keep inequity linear (`alpha_ineq * inequity`) but make the gain term non-linear (`log(split_self + 1)` or `sqrt(split_self)`). This directly addresses the previous issue by moving the non-linearity away from the term that caused recovery problems. The linear inequity formulation previously showed good recovery for `alpha_ineq`. Applying non-linearity to gain models diminishing marginal utility, a standard concept.\n    *   **Option 2: Ratio-Based Inequity:** Keep gain linear but use a ratio-based inequity term (`log((deserved_split + eps) / (split_self + eps))`). This is an alternative formulation but reintroduces a logarithm linked to both deserved and actual splits, potentially risking similar recovery issues as the previous log-inequity model.\n\n**4. Choose the Best Approach:**\nOption 1 seems more promising for *specifically addressing the parameter recovery issue*. By keeping the inequity term linear (which had good recovery previously) and applying the non-linearity to the gain term, we test if the *location* of the non-linearity was the problem. This maintains the potential for good fit (by including non-linearity) while hopefully restoring good recovery for all parameters.\n\nBetween Option 1a (Logarithmic Gain) and 1b (Square Root Gain):\n*   Both model diminishing returns.\n*   Logarithmic transformation (`log(split_self + 1)`) was successful in improving fit in the previous model (albeit on inequity). Using it again, but on the gain term, is a direct test of the hypothesis about the *location* of the non-linearity being the key factor. Adding 1 handles the case `split_self = 0`.\n*   Square root is also plausible but doesn't directly leverage the functional form that previously showed promise for fit.\n\nTherefore, I will proceed with **Option 1a: Logarithmic Gain**.\n\n**5. Define Model Components:**\n    *   **Inputs from data:** `token_self`, `token_opp`, `combined_earning`, `split_self`. (Only for responder trials where `trial_role == 1`).\n    *   **Intermediate Calculations:**\n        *   `total_tokens = token_self + token_opp`\n        *   `contribution_ratio = token_self / total_tokens` (handle `total_tokens == 0` case, e.g., set ratio to 0.5)\n        *   `deserved_split = contribution_ratio * combined_earning`\n        *   `inequity = max(0, deserved_split - split_self)` (Disadvantageous inequity)\n        *   `log_gain = log(split_self + 1)` (Log-transformed gain, +1 avoids log(0))\n    *   **Learnable Parameters (3):**\n        *   `bias`: Baseline acceptance tendency.\n        *   `sensitivity`: Sensitivity to log-transformed monetary gain. Expected >= 0.\n        *   `alpha_ineq`: Sensitivity (aversion) to disadvantageous inequity. Expected >= 0.\n    *   **Output:**\n        *   `Utility = bias + sensitivity * log_gain - alpha_ineq * inequity`\n\n**6. Specify Parameter Bounds:**\n*   `bias`: [-10, 10] (Generous range around 0).\n*   `sensitivity`: [0, 10] (Non-negative sensitivity to gain, upper bound generous).\n*   `alpha_ineq`: [0, 10] (Non-negative aversion to inequity, upper bound generous).\n\n**7. Final Model Specification:**\n\n<MODEL>\ntotal_tokens = token_self + token_opp\ncontribution_ratio = (token_self / total_tokens) if total_tokens > 0 else 0.5\ndeserved_split = contribution_ratio * combined_earning\ninequity = max(0, deserved_split - split_self)\nlog_gain = log(split_self + 1)\nUtility = bias + sensitivity * log_gain - alpha_ineq * inequity\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"Utility\": {\n      \"description\": \"The calculated utility of accepting the offer. Used in a logistic function P(accept) = 1 / (1 + exp(-Utility)).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline tendency parameter, reflecting inherent bias towards accepting or rejecting offers.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Sensitivity to the logarithm of the monetary amount offered to the participant (split_self). Models potentially diminishing marginal utility of gain.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_ineq\": {\n      \"description\": \"Sensitivity to disadvantageous inequity (aversion), defined as the difference between the participant's deserved split based on contribution and their actual received split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money (\u00a3) available in the pot for the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The amount (\u00a3) proposed for the participant (responder).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n     \"total_tokens\": {\n      \"description\": \"Sum of tokens found by participant and opponent.\",\n       \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"contribution_ratio\": {\n      \"description\": \"Participant's share of total tokens contributed (token_self / total_tokens). Set to 0.5 if total_tokens is 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deserved_split\": {\n      \"description\": \"Amount (\u00a3) the participant 'deserves' based on their contribution ratio and the combined earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"inequity\": {\n      \"description\": \"Disadvantageous inequity: Amount (\u00a3) by which the participant's deserved split exceeds their actual split. Capped at 0 (no penalty for advantageous inequity).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"log_gain\": {\n      \"description\": \"Natural logarithm of the participant's received split plus one (log(split_self + 1)). Used to model diminishing marginal utility.\",\n       \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts the utility of accepting an offer based on three components: a baseline bias (`bias`), the logarithm of the monetary gain for the participant (`sensitivity * log(split_self + 1)`), capturing diminishing marginal utility, and a linear penalty for disadvantageous inequity (`alpha_ineq * max(0, deserved_split - split_self)`), where deserved split is calculated based on relative contribution (`token_self`, `token_opp`). It uses three learnable parameters: `bias`, `sensitivity`, and `alpha_ineq`.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['bias', 'sensitivity', 'alpha_ineq']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                total_tokens = token_self + token_opp\ncontribution_ratio = (token_self / total_tokens) if total_tokens > 0 else 0.5\ndeserved_split = contribution_ratio * combined_earning\ninequity = max(0, deserved_split - split_self)\nlog_gain = log(split_self + 1)\nUtility = bias + sensitivity * log_gain - alpha_ineq * inequity\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"Utility\": {\n      \"description\": \"The calculated utility of accepting the offer. Used in a logistic function P(accept) = 1 / (1 + exp(-Utility)).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline tendency parameter, reflecting inherent bias towards accepting or rejecting offers.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Sensitivity to the logarithm of the monetary amount offered to the participant (split_self). Models potentially diminishing marginal utility of gain.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_ineq\": {\n      \"description\": \"Sensitivity to disadvantageous inequity (aversion), defined as the difference between the participant's deserved split based on contribution and their actual received split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money (\\u00a3) available in the pot for the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The amount (\\u00a3) proposed for the participant (responder).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"total_tokens\": {\n      \"description\": \"Sum of tokens found by participant and opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"contribution_ratio\": {\n      \"description\": \"Participant's share of total tokens contributed (token_self / total_tokens). Set to 0.5 if total_tokens is 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deserved_split\": {\n      \"description\": \"Amount (\\u00a3) the participant 'deserves' based on their contribution ratio and the combined earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"inequity\": {\n      \"description\": \"Disadvantageous inequity: Amount (\\u00a3) by which the participant's deserved split exceeds their actual split. Capped at 0 (no penalty for advantageous inequity).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"log_gain\": {\n      \"description\": \"Natural logarithm of the participant's received split plus one (log(split_self + 1)). Used to model diminishing marginal utility.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, bias=0, sensitivity=1, alpha_ineq=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        total_tokens = token_self + token_opp\n        contribution_ratio = (token_self / total_tokens) if total_tokens > 0 else 0.5\n        deserved_split = contribution_ratio * combined_earning\n        inequity = max(0, deserved_split - split_self)\n        log_gain = math.log(split_self + 1)\n        \n        utility = bias + sensitivity * log_gain - alpha_ineq * inequity\n        model_predictions.append(utility)\n    return model_predictions\n```",
      "timestamp": 1745949967.295351
    }
  ],
  "learnable_parameters": {
    "bias": {
      "description": "Baseline tendency parameter, reflecting inherent bias towards accepting or rejecting offers.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "sensitivity": {
      "description": "Sensitivity to the logarithm of the monetary amount offered to the participant (split_self). Models potentially diminishing marginal utility of gain.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha_ineq": {
      "description": "Sensitivity to disadvantageous inequity (aversion), defined as the difference between the participant's deserved split based on contribution and their actual received split.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "total_tokens = token_self + token_opp\ncontribution_ratio = (token_self / total_tokens) if total_tokens > 0 else 0.5\ndeserved_split = contribution_ratio * combined_earning\ninequity = max(0, deserved_split - split_self)\nlog_gain = log(split_self + 1)\nUtility = bias + sensitivity * log_gain - alpha_ineq * inequity",
  "variable_descriptions": {
    "Utility": {
      "description": "The calculated utility of accepting the offer. Used in a logistic function P(accept) = 1 / (1 + exp(-Utility)).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "bias": {
      "description": "Baseline tendency parameter, reflecting inherent bias towards accepting or rejecting offers.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "sensitivity": {
      "description": "Sensitivity to the logarithm of the monetary amount offered to the participant (split_self). Models potentially diminishing marginal utility of gain.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha_ineq": {
      "description": "Sensitivity to disadvantageous inequity (aversion), defined as the difference between the participant's deserved split based on contribution and their actual received split.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "token_self": {
      "description": "Number of tokens found by the participant, representing their contribution.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent, representing their contribution.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money (\u00a3) available in the pot for the trial.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "The amount (\u00a3) proposed for the participant (responder).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "total_tokens": {
      "description": "Sum of tokens found by participant and opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "contribution_ratio": {
      "description": "Participant's share of total tokens contributed (token_self / total_tokens). Set to 0.5 if total_tokens is 0.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "deserved_split": {
      "description": "Amount (\u00a3) the participant 'deserves' based on their contribution ratio and the combined earning.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "inequity": {
      "description": "Disadvantageous inequity: Amount (\u00a3) by which the participant's deserved split exceeds their actual split. Capped at 0 (no penalty for advantageous inequity).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "log_gain": {
      "description": "Natural logarithm of the participant's received split plus one (log(split_self + 1)). Used to model diminishing marginal utility.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "This model predicts the utility of accepting an offer based on three components: a baseline bias (`bias`), the logarithm of the monetary gain for the participant (`sensitivity * log(split_self + 1)`), capturing diminishing marginal utility, and a linear penalty for disadvantageous inequity (`alpha_ineq * max(0, deserved_split - split_self)`), where deserved split is calculated based on relative contribution (`token_self`, `token_opp`). It uses three learnable parameters: `bias`, `sensitivity`, and `alpha_ineq`.",
  "target_variable": "accept",
  "full_reasoning": "Okay, let's think through this step by step.\n\n**1. Understand the Goal:**\nThe primary goal is to model responder acceptance (`accept`) in the Ultimatum Game. Key constraints are achieving good model fit (BIC < 34, Accuracy > 0.82) *and* excellent parameter recovery (r > 0.75 for all parameters). The model should have 3 learnable parameters.\n\n**2. Analyze Previous Results:**\nThe previous model (`Utility = bias + sensitivity * split_self - alpha_log_ineq * log(inequity + 1)`) achieved excellent fit but failed on recovery for `alpha_log_ineq`. The parameters associated with linear terms (`bias`, `sensitivity`) had good recovery. This suggests the non-linear *log(inequity + 1)* term, while improving fit, created identifiability issues, potentially because inequity (`deserved_split - split_self`) is already related to `split_self`.\n\n**3. Evaluate New Options:**\nThe instructions propose two main avenues:\n    *   **Option 1: Non-Linear Gain:** Keep inequity linear (`alpha_ineq * inequity`) but make the gain term non-linear (`log(split_self + 1)` or `sqrt(split_self)`). This directly addresses the previous issue by moving the non-linearity away from the term that caused recovery problems. The linear inequity formulation previously showed good recovery for `alpha_ineq`. Applying non-linearity to gain models diminishing marginal utility, a standard concept.\n    *   **Option 2: Ratio-Based Inequity:** Keep gain linear but use a ratio-based inequity term (`log((deserved_split + eps) / (split_self + eps))`). This is an alternative formulation but reintroduces a logarithm linked to both deserved and actual splits, potentially risking similar recovery issues as the previous log-inequity model.\n\n**4. Choose the Best Approach:**\nOption 1 seems more promising for *specifically addressing the parameter recovery issue*. By keeping the inequity term linear (which had good recovery previously) and applying the non-linearity to the gain term, we test if the *location* of the non-linearity was the problem. This maintains the potential for good fit (by including non-linearity) while hopefully restoring good recovery for all parameters.\n\nBetween Option 1a (Logarithmic Gain) and 1b (Square Root Gain):\n*   Both model diminishing returns.\n*   Logarithmic transformation (`log(split_self + 1)`) was successful in improving fit in the previous model (albeit on inequity). Using it again, but on the gain term, is a direct test of the hypothesis about the *location* of the non-linearity being the key factor. Adding 1 handles the case `split_self = 0`.\n*   Square root is also plausible but doesn't directly leverage the functional form that previously showed promise for fit.\n\nTherefore, I will proceed with **Option 1a: Logarithmic Gain**.\n\n**5. Define Model Components:**\n    *   **Inputs from data:** `token_self`, `token_opp`, `combined_earning`, `split_self`. (Only for responder trials where `trial_role == 1`).\n    *   **Intermediate Calculations:**\n        *   `total_tokens = token_self + token_opp`\n        *   `contribution_ratio = token_self / total_tokens` (handle `total_tokens == 0` case, e.g., set ratio to 0.5)\n        *   `deserved_split = contribution_ratio * combined_earning`\n        *   `inequity = max(0, deserved_split - split_self)` (Disadvantageous inequity)\n        *   `log_gain = log(split_self + 1)` (Log-transformed gain, +1 avoids log(0))\n    *   **Learnable Parameters (3):**\n        *   `bias`: Baseline acceptance tendency.\n        *   `sensitivity`: Sensitivity to log-transformed monetary gain. Expected >= 0.\n        *   `alpha_ineq`: Sensitivity (aversion) to disadvantageous inequity. Expected >= 0.\n    *   **Output:**\n        *   `Utility = bias + sensitivity * log_gain - alpha_ineq * inequity`\n\n**6. Specify Parameter Bounds:**\n*   `bias`: [-10, 10] (Generous range around 0).\n*   `sensitivity`: [0, 10] (Non-negative sensitivity to gain, upper bound generous).\n*   `alpha_ineq`: [0, 10] (Non-negative aversion to inequity, upper bound generous).\n\n**7. Final Model Specification:**\n\n<MODEL>\ntotal_tokens = token_self + token_opp\ncontribution_ratio = (token_self / total_tokens) if total_tokens > 0 else 0.5\ndeserved_split = contribution_ratio * combined_earning\ninequity = max(0, deserved_split - split_self)\nlog_gain = log(split_self + 1)\nUtility = bias + sensitivity * log_gain - alpha_ineq * inequity\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"Utility\": {\n      \"description\": \"The calculated utility of accepting the offer. Used in a logistic function P(accept) = 1 / (1 + exp(-Utility)).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline tendency parameter, reflecting inherent bias towards accepting or rejecting offers.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sensitivity\": {\n      \"description\": \"Sensitivity to the logarithm of the monetary amount offered to the participant (split_self). Models potentially diminishing marginal utility of gain.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_ineq\": {\n      \"description\": \"Sensitivity to disadvantageous inequity (aversion), defined as the difference between the participant's deserved split based on contribution and their actual received split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money (\u00a3) available in the pot for the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The amount (\u00a3) proposed for the participant (responder).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n     \"total_tokens\": {\n      \"description\": \"Sum of tokens found by participant and opponent.\",\n       \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"contribution_ratio\": {\n      \"description\": \"Participant's share of total tokens contributed (token_self / total_tokens). Set to 0.5 if total_tokens is 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deserved_split\": {\n      \"description\": \"Amount (\u00a3) the participant 'deserves' based on their contribution ratio and the combined earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"inequity\": {\n      \"description\": \"Disadvantageous inequity: Amount (\u00a3) by which the participant's deserved split exceeds their actual split. Capped at 0 (no penalty for advantageous inequity).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"log_gain\": {\n      \"description\": \"Natural logarithm of the participant's received split plus one (log(split_self + 1)). Used to model diminishing marginal utility.\",\n       \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts the utility of accepting an offer based on three components: a baseline bias (`bias`), the logarithm of the monetary gain for the participant (`sensitivity * log(split_self + 1)`), capturing diminishing marginal utility, and a linear penalty for disadvantageous inequity (`alpha_ineq * max(0, deserved_split - split_self)`), where deserved split is calculated based on relative contribution (`token_self`, `token_opp`). It uses three learnable parameters: `bias`, `sensitivity`, and `alpha_ineq`.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: total_tokens = token_self + token_opp\ncontribution_ratio = (token_self / total_tokens) if total_tokens > 0 else 0.5\ndeserved_split = contribution_ratio * combined_earning\ninequity = max(0, deserved_split - split_self)\nlog_gain = log(split_self + 1)\nUtility = bias + sensitivity * log_gain - alpha_ineq * inequity\nSummary: This model predicts the utility of accepting an offer based on three components: a baseline bias (`bias`), the logarithm of the monetary gain for the participant (`sensitivity * log(split_self + 1)`), capturing diminishing marginal utility, and a linear penalty for disadvantageous inequity (`alpha_ineq * max(0, deserved_split - split_self)`), where deserved split is calculated based on relative contribution (`token_self`, `token_opp`). It uses three learnable parameters: `bias`, `sensitivity`, and `alpha_ineq`.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, bias=0, sensitivity=1, alpha_ineq=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        total_tokens = token_self + token_opp\n        contribution_ratio = (token_self / total_tokens) if total_tokens > 0 else 0.5\n        deserved_split = contribution_ratio * combined_earning\n        inequity = max(0, deserved_split - split_self)\n        log_gain = math.log(split_self + 1)\n        \n        utility = bias + sensitivity * log_gain - alpha_ineq * inequity\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.8165445665445665,
  "group_accuracies": {
    "Control": 0.8636950904392765,
    "Cocaine": 0.7743055555555556
  },
  "group_parameter_averages": {
    "Control": {
      "bias": 0.3989749852045727,
      "sensitivity": 5.0943300676304135,
      "alpha_ineq": 1.0665037699529978
    },
    "Cocaine": {
      "bias": -2.3653751928147386,
      "sensitivity": 3.338243429351021,
      "alpha_ineq": 0.9341355239238485
    }
  },
  "fitting_results": [
    {
      "bias": -8.16918532080805,
      "sensitivity": 4.267227585710689,
      "alpha_ineq": 0.9867424563760963,
      "success": true,
      "log_likelihood": -5.999769641959854,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -1.26730606896874,
      "sensitivity": 2.341088476608099,
      "alpha_ineq": 0.9024555596424811,
      "success": true,
      "log_likelihood": -16.27608884460149,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -2.624063761535902,
      "sensitivity": 5.187413858899314,
      "alpha_ineq": 1.9640550085328956,
      "success": true,
      "log_likelihood": -9.423724433436544,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -6.658373766611647,
      "sensitivity": 5.88936159766506,
      "alpha_ineq": 1.1667456871002586,
      "success": true,
      "log_likelihood": -12.078567342606524,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.6578221994757553,
      "sensitivity": 2.708110994335966,
      "alpha_ineq": 2.287224815884959,
      "success": true,
      "log_likelihood": -8.350651770400557,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -1.0443125979246692,
      "sensitivity": 3.809541793477626,
      "alpha_ineq": 1.361612265831887,
      "success": true,
      "log_likelihood": -11.401182453144457,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": -4.6396526490290545e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.7043486751532679,
      "sensitivity": 3.5525344604849787,
      "alpha_ineq": 1.720985384647551,
      "success": true,
      "log_likelihood": -9.728469884793979,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": -4.6396526490290545e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -1.562929663835139,
      "sensitivity": 2.849739278139124,
      "alpha_ineq": 1.5634469625598548,
      "success": true,
      "log_likelihood": -11.519541956246961,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -6.828138510088775,
      "sensitivity": 10.0,
      "alpha_ineq": 3.8467563110009966,
      "success": true,
      "log_likelihood": -2.4195434127378523,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -9.085760554053628,
      "sensitivity": 5.120576952833382,
      "alpha_ineq": 1.0308809930209848,
      "success": true,
      "log_likelihood": -6.782061771391689,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -2.129336677035827,
      "sensitivity": 4.444871123035043,
      "alpha_ineq": 2.3564209934737916,
      "success": true,
      "log_likelihood": -8.135150263916383,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": -4.639652649029053e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 9.081710804905903,
      "sensitivity": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": -1.2164135586511304e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": -4.6396526490290545e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": -4.639652649029054e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -7.0631650390467895,
      "sensitivity": 10.0,
      "alpha_ineq": 0.882052260347765,
      "success": true,
      "log_likelihood": -1.9933282294855714,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 3.3651922920728055,
      "sensitivity": 3.585817790836213,
      "alpha_ineq": 1.503498444943657,
      "success": true,
      "log_likelihood": -5.168501825225661,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": -4.639652649029054e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.9803256215257375,
      "sensitivity": 1.6779576680270074,
      "alpha_ineq": 1.2556072731671744,
      "success": true,
      "log_likelihood": -13.736606877481966,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 1.5199107978523931,
      "sensitivity": 3.5156046534068164,
      "alpha_ineq": 1.1852611712120333,
      "success": true,
      "log_likelihood": -6.967372871591062,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -7.133396708245977,
      "sensitivity": 4.994521466413376,
      "alpha_ineq": 0.4878629140292838,
      "success": true,
      "log_likelihood": -14.964242005275233,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -3.8558530337278247,
      "sensitivity": 3.8922973564081556,
      "alpha_ineq": 0.6864306838448274,
      "success": true,
      "log_likelihood": -15.969906044422766,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 4.15772860530929,
      "sensitivity": 0.05472609417069477,
      "alpha_ineq": 1.791722497701114,
      "success": true,
      "log_likelihood": -10.409320797282222,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -2.899430251148958,
      "sensitivity": 3.903214768770416,
      "alpha_ineq": 0.912897306908254,
      "success": true,
      "log_likelihood": -14.260458316012956,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -4.661739003234297,
      "sensitivity": 5.753461074337551,
      "alpha_ineq": 1.3601070981751229,
      "success": true,
      "log_likelihood": -11.037299220333097,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -4.008119318553014,
      "sensitivity": 6.4076921337813735,
      "alpha_ineq": 5.303252704075815,
      "success": true,
      "log_likelihood": -3.815299613844181,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 4.494959488602411,
      "sensitivity": 0.8969202736989393,
      "alpha_ineq": 1.003845472774416,
      "success": true,
      "log_likelihood": -7.878051076269852,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 2.6937496584886023,
      "sensitivity": 0.6128587896132687,
      "alpha_ineq": 0.7511744097370203,
      "success": true,
      "log_likelihood": -14.177988924763348,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": -4.639652649029054e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -8.169102070077566,
      "sensitivity": 4.2671832949896515,
      "alpha_ineq": 0.9867320252468254,
      "success": true,
      "log_likelihood": -5.999769641991285,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -4.782864001267538,
      "sensitivity": 3.3813347993775005,
      "alpha_ineq": 0.2538505035393241,
      "success": true,
      "log_likelihood": -18.90868027463297,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -3.3102546748481987,
      "sensitivity": 3.224358493614894,
      "alpha_ineq": 0.9255022709335832,
      "success": true,
      "log_likelihood": -15.083227935943421,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": -4.639652649029054e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -10.0,
      "sensitivity": 8.826406951168268,
      "alpha_ineq": 0.5649292145035304,
      "success": true,
      "log_likelihood": -9.250106738602566,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -3.7464996533568824,
      "sensitivity": 7.086880671491943,
      "alpha_ineq": 1.729813234334385,
      "success": true,
      "log_likelihood": -7.766125317052373,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.5069796358089953,
      "sensitivity": 1.8281559381907002,
      "alpha_ineq": 1.341361625193216,
      "success": true,
      "log_likelihood": -13.284423981497342,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 1.6753076603733594,
      "sensitivity": 0.9696311665597492,
      "alpha_ineq": 0.8439583535833068,
      "success": true,
      "log_likelihood": -16.048490218166396,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 2.4015425911979533,
      "sensitivity": 1.2071172114869377,
      "alpha_ineq": 0.4952664472516498,
      "success": true,
      "log_likelihood": -8.515725126128311,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 2.634839335354496,
      "sensitivity": 0.3760629401686385,
      "alpha_ineq": 1.0126664385213349,
      "success": true,
      "log_likelihood": -15.69298497088155,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -3.171575256138692,
      "sensitivity": 2.423523250406419,
      "alpha_ineq": 1.0960142380317826,
      "success": true,
      "log_likelihood": -11.962619818851412,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 4.45291292818377,
      "sensitivity": 0.0,
      "alpha_ineq": 0.2985290818517288,
      "success": true,
      "log_likelihood": -4.398430976666361,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -3.5571727027808135,
      "sensitivity": 3.868827104194852,
      "alpha_ineq": 0.7153792060926532,
      "success": true,
      "log_likelihood": -15.654187590418527,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.675149963405349,
      "sensitivity": 4.090270961939346,
      "alpha_ineq": 1.01175034950055,
      "success": true,
      "log_likelihood": -13.242712324984465,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.962661587761247,
      "sensitivity": 4.111439913931704,
      "alpha_ineq": 0.2420741883126907,
      "success": true,
      "log_likelihood": -15.098815480410728,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.792311795825257,
      "sensitivity": 3.009991390615941,
      "alpha_ineq": 1.0097921867833708,
      "success": true,
      "log_likelihood": -14.903040730472478,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.655547322727166,
      "sensitivity": 2.843510871123879,
      "alpha_ineq": 0.46779506982053304,
      "success": true,
      "log_likelihood": -18.368147481132123,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 4.209126849094275,
      "sensitivity": 0.0,
      "alpha_ineq": 2.3194637127216478,
      "success": true,
      "log_likelihood": -8.245801044836934,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.8406238030306943,
      "sensitivity": 2.040841092896667,
      "alpha_ineq": 0.0025682514701985118,
      "success": true,
      "log_likelihood": -22.777354583533494,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.6737227624897931,
      "sensitivity": 1.9481317211738607,
      "alpha_ineq": 0.4510313267052253,
      "success": true,
      "log_likelihood": -17.810789181359667,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -5.120352017449429,
      "sensitivity": 2.6324269573975947,
      "alpha_ineq": 0.4703094345310488,
      "success": true,
      "log_likelihood": -11.480173079589333,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -5.251497768122019,
      "sensitivity": 4.307955578385868,
      "alpha_ineq": 0.35641060989000106,
      "success": true,
      "log_likelihood": -16.987144161384855,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -4.447931034430877,
      "sensitivity": 3.354815339152182,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": -19.798661917127102,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.8513223050753287,
      "sensitivity": 0.20285433184977378,
      "alpha_ineq": 0.7360288475932102,
      "success": true,
      "log_likelihood": -18.859789938163125,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -8.62094107820148,
      "sensitivity": 10.0,
      "alpha_ineq": 4.468778480267501,
      "success": true,
      "log_likelihood": -3.922824726671712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.5604581537274744,
      "sensitivity": 3.5013407699752594,
      "alpha_ineq": 1.6688652256869925,
      "success": true,
      "log_likelihood": -9.960590972268747,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.8012407789015268,
      "sensitivity": 0.1923844554979209,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": -12.549367475485736,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -8.087139343869906,
      "sensitivity": 4.441789181422826,
      "alpha_ineq": 0.8529722424266246,
      "success": true,
      "log_likelihood": -7.559543548813259,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.791247332122842,
      "sensitivity": 4.182162202402556,
      "alpha_ineq": 0.09980935060024866,
      "success": true,
      "log_likelihood": -13.113356178818254,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.30398977448277587,
      "sensitivity": 1.4332371899019627,
      "alpha_ineq": 0.4971483443106778,
      "success": true,
      "log_likelihood": -19.71201358301741,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.5690692323056094,
      "sensitivity": 1.689879414148749,
      "alpha_ineq": 1.2813984612768783,
      "success": true,
      "log_likelihood": -13.743282385713343,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -8.166868313375588,
      "sensitivity": 4.265931883901659,
      "alpha_ineq": 0.9866474459974505,
      "success": true,
      "log_likelihood": -5.999769754860431,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -4.315797107461698,
      "sensitivity": 3.218457161763416,
      "alpha_ineq": 0.2824386226762023,
      "success": true,
      "log_likelihood": -19.237245009005743,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -7.366195069119959,
      "sensitivity": 5.245012205649737,
      "alpha_ineq": 1.3296794684645352,
      "success": true,
      "log_likelihood": -9.393339148085541,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -4.610070354421985,
      "sensitivity": 4.906318429437817,
      "alpha_ineq": 0.8911441452472353,
      "success": true,
      "log_likelihood": -13.598462770181396,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 2.4182871913994854,
      "sensitivity": 1.5168897853950836,
      "alpha_ineq": 0.5943150599649119,
      "success": true,
      "log_likelihood": -7.858124198082788,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 2.2801001526031057,
      "sensitivity": 1.4639820539581319,
      "alpha_ineq": 0.7324765950530052,
      "success": true,
      "log_likelihood": -10.282056011070035,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -8.498227922394385,
      "sensitivity": 6.935858721196606,
      "alpha_ineq": 0.47931404521407356,
      "success": true,
      "log_likelihood": -12.662797838204794,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 3.364117092911542,
      "sensitivity": 0.0,
      "alpha_ineq": 0.32539012301293685,
      "success": true,
      "log_likelihood": -9.773742411094775,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -10.0,
      "sensitivity": 7.768956335116487,
      "alpha_ineq": 10.0,
      "success": true,
      "log_likelihood": -0.3810348433364489,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -6.327782049833416,
      "sensitivity": 3.4369384079033036,
      "alpha_ineq": 0.5732139880299119,
      "success": true,
      "log_likelihood": -10.405574786671073,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.9119153918039171,
      "sensitivity": 2.8008753374598734,
      "alpha_ineq": 0.8348424703868326,
      "success": true,
      "log_likelihood": -16.268218603044524,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.3264653320000988,
      "sensitivity": 3.749454365137681,
      "alpha_ineq": 0.15540481595891484,
      "success": true,
      "log_likelihood": -14.461929786879434,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.1515216426891937,
      "sensitivity": 1.2270409774712046,
      "alpha_ineq": 0.2591858530300333,
      "success": true,
      "log_likelihood": -22.82821889737169,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.8348559278821552,
      "sensitivity": 1.9940738161901252,
      "alpha_ineq": 1.2870914805341576,
      "success": true,
      "log_likelihood": -11.84123362890894,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": -43.184063640718016,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.6407868955854785,
      "sensitivity": 0.0,
      "alpha_ineq": 0.7494636171143866,
      "success": true,
      "log_likelihood": -6.748298918531074,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.4379184197262247,
      "sensitivity": 2.022550272651277,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": -22.061758190803435,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -8.169221363613445,
      "sensitivity": 4.2672451746036035,
      "alpha_ineq": 0.9867352116110958,
      "success": true,
      "log_likelihood": -5.999769641896882,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.9292313316700146,
      "sensitivity": 1.17700406621498,
      "alpha_ineq": 0.269105213240028,
      "success": true,
      "log_likelihood": -22.758179396825824,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity": 10.0,
      "alpha_ineq": 0.0,
      "success": true,
      "log_likelihood": -67.24589956958617,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -4.405489973719873,
      "sensitivity": 2.281202784603351,
      "alpha_ineq": 0.8562286512626817,
      "success": true,
      "log_likelihood": -9.000255162580647,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -10.0,
      "sensitivity": 9.115346392692814,
      "alpha_ineq": 1.3975499732911856,
      "success": true,
      "log_likelihood": -5.753234857429234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.0304575647260636,
      "sensitivity": 0.0,
      "alpha_ineq": 0.22625633877899595,
      "success": true,
      "log_likelihood": -23.315179335747167,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -4.762725339827896,
      "sensitivity": 2.794378213542678,
      "alpha_ineq": 1.5343929784052126,
      "success": true,
      "log_likelihood": -7.028744888041046,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.6330646596472278,
      "sensitivity": 0.7570903820688945,
      "alpha_ineq": 0.6696062273452185,
      "success": true,
      "log_likelihood": -17.171731497065284,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.4569532463973098,
      "sensitivity": 1.253498918097933,
      "alpha_ineq": 1.0058529795785356,
      "success": true,
      "log_likelihood": -13.253857268818312,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 3.6926968899143855,
      "sensitivity": 1.689803865354564,
      "alpha_ineq": 0.7990678581246733,
      "success": true,
      "log_likelihood": -5.0710776376459785,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -10.0,
      "sensitivity": 7.846102343041157,
      "alpha_ineq": 0.696915387475423,
      "success": true,
      "log_likelihood": -7.498706612877411,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.5955682944994386,
      "sensitivity": 0.6498142393856879,
      "alpha_ineq": 0.2646113105570384,
      "success": true,
      "log_likelihood": -20.80686581194278,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "bias": {
        "r": 0.8188192547008527,
        "p": 2.3286232808271572e-25
      },
      "sensitivity": {
        "r": 0.6739807746591567,
        "p": 1.5282311691186902e-14
      },
      "alpha_ineq": {
        "r": 0.6723788637939965,
        "p": 1.8582824842643212e-14
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 34.15892339936745,
  "bic_Control": 27.00189230701725,
  "bic_Cocaine": 40.57043041959784,
  "bic_results": {
    "average_bic": 34.15892339936745,
    "individual_bics": [
      22.750096099288037,
      43.302734504571305,
      29.598005682241418,
      34.90769150058138,
      27.451860356169444,
      33.55292172165724,
      10.750556908161384,
      30.20749658495629,
      10.750556908161384,
      33.78964072786225,
      15.589643640844034,
      24.31468035815171,
      27.020857343201097,
      10.750556908161384,
      10.750557058651042,
      10.750556908161384,
      10.750556908161384,
      14.737213274339474,
      21.087560465819653,
      10.750556908161384,
      38.22377057033226,
      24.685302558550454,
      40.6790408259188,
      42.69036890421386,
      31.569198409932774,
      39.27147344739424,
      32.82515525603452,
      18.38115604305669,
      26.506658967908034,
      39.10653466489502,
      10.750556908161384,
      22.7500960993509,
      48.56791736463427,
      40.91701268725517,
      10.750556908161384,
      29.250770292573463,
      26.282807449473076,
      37.319404778363015,
      42.84753725170113,
      27.782007067624953,
      42.136526757131435,
      34.67579645307116,
      19.547418768701053,
      42.05893199620539,
      37.23598146533726,
      40.94818777618978,
      40.556638276313286,
      47.48685177763258,
      27.2421589050422,
      56.305265982435316,
      46.37213517808766,
      33.710902974547,
      44.724845138138036,
      50.34788064962254,
      48.47013669169458,
      18.596206268711754,
      30.671738759905825,
      35.8492917663398,
      25.86964391299485,
      36.97726917300484,
      50.174583981403146,
      38.23712158679501,
      22.750096325089192,
      49.22504683337982,
      29.537235111539413,
      37.947482355731125,
      26.466805211533906,
      31.3146688375084,
      36.07615249177792,
      30.29804163755788,
      11.512626502041229,
      31.561706388710476,
      43.286994021457375,
      39.6744163891272,
      56.40699461011171,
      34.43302407318621,
      97.11868409680436,
      24.24715465243048,
      54.8740731969752,
      22.750096099162093,
      56.266915609019975,
      145.24235595454067,
      28.751067140529624,
      22.2570265302268,
      57.38091548686266,
      24.80804659145042,
      45.0940198094989,
      37.25827135300496,
      20.89271209066029,
      25.747970041123153,
      52.3642884392539
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        22.750096099288037,
        43.302734504571305,
        29.598005682241418,
        34.90769150058138,
        27.451860356169444,
        33.55292172165724,
        10.750556908161384,
        30.20749658495629,
        10.750556908161384,
        33.78964072786225,
        15.589643640844034,
        24.31468035815171,
        27.020857343201097,
        10.750556908161384,
        10.750557058651042,
        10.750556908161384,
        10.750556908161384,
        14.737213274339474,
        21.087560465819653,
        10.750556908161384,
        38.22377057033226,
        24.685302558550454,
        40.6790408259188,
        42.69036890421386,
        31.569198409932774,
        39.27147344739424,
        32.82515525603452,
        18.38115604305669,
        26.506658967908034,
        39.10653466489502,
        10.750556908161384,
        22.7500960993509,
        48.56791736463427,
        40.91701268725517,
        10.750556908161384,
        29.250770292573463,
        26.282807449473076,
        37.319404778363015,
        42.84753725170113,
        27.782007067624953,
        42.136526757131435,
        34.67579645307116,
        19.547418768701053
      ],
      "Cocaine": [
        42.05893199620539,
        37.23598146533726,
        40.94818777618978,
        40.556638276313286,
        47.48685177763258,
        27.2421589050422,
        56.305265982435316,
        46.37213517808766,
        33.710902974547,
        44.724845138138036,
        50.34788064962254,
        48.47013669169458,
        18.596206268711754,
        30.671738759905825,
        35.8492917663398,
        25.86964391299485,
        36.97726917300484,
        50.174583981403146,
        38.23712158679501,
        22.750096325089192,
        49.22504683337982,
        29.537235111539413,
        37.947482355731125,
        26.466805211533906,
        31.3146688375084,
        36.07615249177792,
        30.29804163755788,
        11.512626502041229,
        31.561706388710476,
        43.286994021457375,
        39.6744163891272,
        56.40699461011171,
        34.43302407318621,
        97.11868409680436,
        24.24715465243048,
        54.8740731969752,
        22.750096099162093,
        56.266915609019975,
        145.24235595454067,
        28.751067140529624,
        22.2570265302268,
        57.38091548686266,
        24.80804659145042,
        45.0940198094989,
        37.25827135300496,
        20.89271209066029,
        25.747970041123153,
        52.3642884392539
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- bias: r = 0.819\n- sensitivity: r = 0.674\n- alpha_ineq: r = 0.672",
  "previous_models": [
    "Specification: total_tokens = token_self + token_opp\ncontribution_ratio = (token_self / total_tokens) if total_tokens > 0 else 0.5\ndeserved_split = contribution_ratio * combined_earning\ninequity = max(0, deserved_split - split_self)\nlog_gain = log(split_self + 1)\nUtility = bias + sensitivity * log_gain - alpha_ineq * inequity\nSummary: This model predicts the utility of accepting an offer based on three components: a baseline bias (`bias`), the logarithm of the monetary gain for the participant (`sensitivity * log(split_self + 1)`), capturing diminishing marginal utility, and a linear penalty for disadvantageous inequity (`alpha_ineq * max(0, deserved_split - split_self)`), where deserved split is calculated based on relative contribution (`token_self`, `token_opp`). It uses three learnable parameters: `bias`, `sensitivity`, and `alpha_ineq`.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 34.15892339936745\nOverall Accuracy: 0.8165\nGroup Accuracies:\n- Control: 0.8637\n- Cocaine: 0.7743\n\nParameter Recovery:\n- bias: r = 0.819\n- sensitivity: r = 0.674\n- alpha_ineq: r = 0.672"
  ]
}