{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the updated instructions for the next run (Run 7):\n\n\n\n<instructions>\nThe previous run (Run 6) tested a model incorporating diminishing marginal utility of gain via a logarithmic transformation: `Utility = bias + sensitivity * log(split_self + 1) - alpha_ineq * inequity`. While maintaining reasonably good BIC (~34.2) and accuracy (~0.817), this model unfortunately failed to achieve acceptable parameter recovery, with both `sensitivity` (r~0.67) and `alpha_ineq` (r~0.67) falling below the target threshold (r > 0.75).\n\nThis follows a pattern where introducing non-linearity (log-inequity in Run 5, log-gain in Run 6) improved fit compared to a simple linear model (Run 1) but compromised parameter recovery. This suggests that the standard ways of incorporating non-linearity might be creating identifiability issues between the gain and inequity sensitivity parameters, possibly due to inherent correlations when using absolute monetary values.\n\n**Your Goal:** Develop a model that achieves **excellent parameter recovery (all r > 0.75)** while also reaching **good model fit (Target BIC < 34, Accuracy > 0.82)**. We need to break the trade-off observed between fit and recovery.\n\n**New Direction: Normalization / Proportional Values**\n\nInstead of focusing solely on different non-linear functions, let's explore a structural change: **normalization**. The hypothesis is that agents might evaluate offers not just based on absolute monetary amounts, but based on proportions relative to the total available amount (`combined_earning`). Using proportional gain and proportional inequity might decouple the parameters and improve identifiability.\n\n**Proposed Model Structure (Primary Focus):**\n\nTest a simple linear utility model, structurally similar to the first successful model (Run 1), but operating on *proportions* instead of absolute values:\n\n1.  Calculate the participant's deserved share as a proportion:\n    *   `total_tokens = token_self + token_opp`\n    *   `contribution_ratio = (token_self / total_tokens) if total_tokens > 0 else 0.5`\n    *   `deserved_perc = contribution_ratio`\n2.  Calculate the participant's received share as a proportion:\n    *   `split_perc = (split_self / combined_earning) if combined_earning > 0 else 0`\n3.  Calculate the disadvantageous inequity in proportional terms:\n    *   `inequity_perc = max(0, deserved_perc - split_perc)`\n4.  Calculate Utility linearly based on these proportions:\n    *   `Utility = bias + sensitivity_prop * split_perc - alpha_ineq_prop * inequity_perc`\n\nThis model uses 3 learnable parameters:\n*   `bias`: Baseline acceptance tendency.\n*   `sensitivity_prop`: Sensitivity to the *proportion* of the total earnings offered.\n*   `alpha_ineq_prop`: Sensitivity (aversion) to the *proportional* difference between the deserved share and the received share.\n\n**Emphasis:**\n*   Implement the **proportional value model** described above.\n*   This approach aims to directly address the parameter recovery issues seen in Runs 5 and 6 by changing the scale/nature of the inputs (proportions vs. absolute values) while using a linear form that previously showed good recovery.\n*   Ensure your model uses exactly 3 learnable parameters (`bias`, `sensitivity_prop`, `alpha_ineq_prop`).\n*   Define appropriate, generous but finite numerical bounds for these parameters. Consider that sensitivity to proportions (0-1 range) might require different scaling than sensitivity to absolute amounts (\u00a30-\u00a3X).\n*   Think creatively about alternative model structures if you strongly believe this normalization approach won't work, but prioritize testing this proportional model first, justifying any deviations clearly.\n\nPlease provide your reasoning step-by-step, justify your chosen model structure by explaining how it addresses the limitations of the previous model and aims to meet all performance goals (BIC, Accuracy, Recovery), and detail the model specification in the required format (<MODEL>, <VARIABLES>, <target_variable>, <SUMMARY>).\n</instructions>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the updated instructions for the next run (Run 7):\n\n\n\n<instructions>\nThe previous run (Run 6) tested a model incorporating diminishing marginal utility of gain via a logarithmic transformation: `Utility = bias + sensitivity * log(split_self + 1) - alpha_ineq * inequity`. While maintaining reasonably good BIC (~34.2) and accuracy (~0.817), this model unfortunately failed to achieve acceptable parameter recovery, with both `sensitivity` (r~0.67) and `alpha_ineq` (r~0.67) falling below the target threshold (r > 0.75).\n\nThis follows a pattern where introducing non-linearity (log-inequity in Run 5, log-gain in Run 6) improved fit compared to a simple linear model (Run 1) but compromised parameter recovery. This suggests that the standard ways of incorporating non-linearity might be creating identifiability issues between the gain and inequity sensitivity parameters, possibly due to inherent correlations when using absolute monetary values.\n\n**Your Goal:** Develop a model that achieves **excellent parameter recovery (all r > 0.75)** while also reaching **good model fit (Target BIC < 34, Accuracy > 0.82)**. We need to break the trade-off observed between fit and recovery.\n\n**New Direction: Normalization / Proportional Values**\n\nInstead of focusing solely on different non-linear functions, let's explore a structural change: **normalization**. The hypothesis is that agents might evaluate offers not just based on absolute monetary amounts, but based on proportions relative to the total available amount (`combined_earning`). Using proportional gain and proportional inequity might decouple the parameters and improve identifiability.\n\n**Proposed Model Structure (Primary Focus):**\n\nTest a simple linear utility model, structurally similar to the first successful model (Run 1), but operating on *proportions* instead of absolute values:\n\n1.  Calculate the participant's deserved share as a proportion:\n    *   `total_tokens = token_self + token_opp`\n    *   `contribution_ratio = (token_self / total_tokens) if total_tokens > 0 else 0.5`\n    *   `deserved_perc = contribution_ratio`\n2.  Calculate the participant's received share as a proportion:\n    *   `split_perc = (split_self / combined_earning) if combined_earning > 0 else 0`\n3.  Calculate the disadvantageous inequity in proportional terms:\n    *   `inequity_perc = max(0, deserved_perc - split_perc)`\n4.  Calculate Utility linearly based on these proportions:\n    *   `Utility = bias + sensitivity_prop * split_perc - alpha_ineq_prop * inequity_perc`\n\nThis model uses 3 learnable parameters:\n*   `bias`: Baseline acceptance tendency.\n*   `sensitivity_prop`: Sensitivity to the *proportion* of the total earnings offered.\n*   `alpha_ineq_prop`: Sensitivity (aversion) to the *proportional* difference between the deserved share and the received share.\n\n**Emphasis:**\n*   Implement the **proportional value model** described above.\n*   This approach aims to directly address the parameter recovery issues seen in Runs 5 and 6 by changing the scale/nature of the inputs (proportions vs. absolute values) while using a linear form that previously showed good recovery.\n*   Ensure your model uses exactly 3 learnable parameters (`bias`, `sensitivity_prop`, `alpha_ineq_prop`).\n*   Define appropriate, generous but finite numerical bounds for these parameters. Consider that sensitivity to proportions (0-1 range) might require different scaling than sensitivity to absolute amounts (\u00a30-\u00a3X).\n*   Think creatively about alternative model structures if you strongly believe this normalization approach won't work, but prioritize testing this proportional model first, justifying any deviations clearly.\n\nPlease provide your reasoning step-by-step, justify your chosen model structure by explaining how it addresses the limitations of the previous model and aims to meet all performance goals (BIC, Accuracy, Recovery), and detail the model specification in the required format (<MODEL>, <VARIABLES>, <target_variable>, <SUMMARY>).\n</instructions>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, let's break this down step by step.\n\n**Reasoning:**\n\n1.  **Problem:** Previous models struggled with a trade-off: non-linear models (log-gain, log-inequity) improved fit (BIC, Accuracy) but degraded parameter recovery, while a simple linear model had better recovery but potentially suboptimal fit. The goal is to achieve both excellent recovery (r > 0.75) and good fit (BIC < 34, Acc > 0.82).\n2.  **Hypothesis:** The poor recovery in non-linear models might stem from using absolute monetary values (`split_self`, absolute inequity). Different trial stakes (`combined_earning`) mean the same absolute difference represents different levels of \"unfairness\" proportionally. This varying scale could induce correlations between gain sensitivity and inequity aversion parameters, hindering recovery. Using proportions relative to the total stake might normalize the decision process across trials and decouple the parameters.\n3.  **Proposed Solution (Normalization/Proportional Model):** Implement a linear utility model based on *proportions* rather than absolute values, as specified in the instructions.\n    *   **Gain Term:** Use the proportion of the total pot offered to the participant (`split_perc = split_self / combined_earning`).\n    *   **Fairness/Inequity Term:** Define fairness based on relative contribution (`contribution_ratio = token_self / (token_self + token_opp)`). Calculate disadvantageous inequity as the difference between the deserved proportion and the received proportion (`inequity_perc = max(0, contribution_ratio - split_perc)`).\n    *   **Utility Function:** Combine these terms linearly: `Utility = bias + sensitivity_prop * split_perc - alpha_ineq_prop * inequity_perc`.\n4.  **Parameter Definitions:**\n    *   `bias`: Captures baseline acceptance tendency, independent of offer specifics. A positive bias means a tendency to accept even slightly unfavorable offers, while a negative bias means a tendency to reject even slightly favorable ones. Bounds: [-10, 10] seems generous enough to capture individual differences.\n    *   `sensitivity_prop`: Measures how much utility increases per unit *increase* in the *proportion* of the pot offered. Should be non-negative. Bounds: [0, 20]. A value of 10 would mean going from receiving 0% to 100% increases utility by 10 (before considering inequity). This range allows for significant sensitivity.\n    *   `alpha_ineq_prop`: Measures how much utility decreases per unit *increase* in *proportional disadvantageous inequity*. Should be non-negative, reflecting aversion to getting less than the deserved proportion. Bounds: [0, 20]. Similar reasoning to `sensitivity_prop`; allows for strong aversion to proportional unfairness.\n5.  **Addressing Goals:**\n    *   **Parameter Recovery:** By using normalized inputs (`split_perc`, `inequity_perc`), we expect less correlation between the parameters derived from these inputs compared to absolute values, potentially improving recovery. The linear structure itself previously showed good recovery.\n    *   **Model Fit (BIC/Accuracy):** While simpler than the log-transformed models, using proportions might capture the underlying decision process more accurately than using raw monetary values, potentially leading to good fit comparable to or better than the simple linear model (Run 1) and potentially competing with the non-linear models.\n    *   **Applicability:** The model uses only variables available in the dataset (`token_self`, `token_opp`, `split_self`, `combined_earning`) to calculate its inputs.\n    *   **Utility Prediction:** The model calculates utility, which can be mapped to acceptance probability.\n\n6.  **Implementation Details:** Need intermediate calculations for `total_tokens`, `contribution_ratio`, `deserved_perc`, `split_perc`, and `inequity_perc`, handling potential division-by-zero cases as specified (use 0.5 contribution ratio if `total_tokens == 0`, use 0 split percentage if `combined_earning == 0`).\n\nThis proportional linear model directly implements the strategy requested, aiming to resolve the fit-recovery trade-off by changing the representation of gain and inequity.\n\n<MODEL>\ntotal_tokens = token_self + token_opp\ncontribution_ratio = (token_self / total_tokens) if total_tokens > 0 else 0.5\ndeserved_perc = contribution_ratio\nsplit_perc = (split_self / combined_earning) if combined_earning > 0 else 0\ninequity_perc = max(0, deserved_perc - split_perc)\nUtility = bias + sensitivity_prop * split_perc - alpha_ineq_prop * inequity_perc\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"Utility\": {\n      \"description\": \"Predicted utility of accepting the offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline tendency to accept the offer, independent of gain or inequity.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sensitivity_prop\": {\n      \"description\": \"Sensitivity to the proportion of the total earnings offered to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_ineq_prop\": {\n      \"description\": \"Sensitivity (aversion) to disadvantageous inequity, measured as the difference between the deserved proportion and the received proportion.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens contributed by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens contributed by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount of money offered to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money to be split in the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"total_tokens\": {\n      \"description\": \"Sum of tokens contributed by participant and opponent.\",\n      \"range\": {\n          \"min\": 0,\n          \"max\": \"inf\",\n          \"inclusive_min\": true,\n          \"inclusive_max\": false\n       },\n       \"learnable\": false,\n       \"source\": \"calculated\"\n    },\n     \"contribution_ratio\": {\n       \"description\": \"Proportion of total tokens contributed by the participant.\",\n       \"range\": {\n           \"min\": 0,\n           \"max\": 1,\n           \"inclusive_min\": true,\n           \"inclusive_max\": true\n        },\n        \"learnable\": false,\n        \"source\": \"calculated\"\n    },\n     \"deserved_perc\": {\n       \"description\": \"Proportion of the total earnings the participant 'deserves' based on contribution ratio.\",\n       \"range\": {\n           \"min\": 0,\n           \"max\": 1,\n           \"inclusive_min\": true,\n           \"inclusive_max\": true\n        },\n        \"learnable\": false,\n        \"source\": \"calculated\"\n    },\n    \"split_perc\": {\n      \"description\": \"Proportion of the total earnings offered to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"inequity_perc\": {\n      \"description\": \"Disadvantageous inequity measured in proportional terms: max(0, deserved_perc - split_perc).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA linear utility model for responder acceptance decisions based on proportional values. Utility is calculated as a baseline acceptance tendency (`bias`), plus sensitivity to the proportion of the total earnings offered (`sensitivity_prop` * `split_perc`), minus sensitivity to proportional disadvantageous inequity (`alpha_ineq_prop` * `inequity_perc`). Proportional inequity is defined relative to the participant's contribution ratio (`token_self / (token_self + token_opp)`). The model uses three learnable parameters: `bias`, `sensitivity_prop`, and `alpha_ineq_prop`.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['bias', 'sensitivity_prop', 'alpha_ineq_prop']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                total_tokens = token_self + token_opp\ncontribution_ratio = (token_self / total_tokens) if total_tokens > 0 else 0.5\ndeserved_perc = contribution_ratio\nsplit_perc = (split_self / combined_earning) if combined_earning > 0 else 0\ninequity_perc = max(0, deserved_perc - split_perc)\nUtility = bias + sensitivity_prop * split_perc - alpha_ineq_prop * inequity_perc\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"Utility\": {\n      \"description\": \"Predicted utility of accepting the offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline tendency to accept the offer, independent of gain or inequity.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sensitivity_prop\": {\n      \"description\": \"Sensitivity to the proportion of the total earnings offered to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_ineq_prop\": {\n      \"description\": \"Sensitivity (aversion) to disadvantageous inequity, measured as the difference between the deserved proportion and the received proportion.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens contributed by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens contributed by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount of money offered to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money to be split in the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"total_tokens\": {\n      \"description\": \"Sum of tokens contributed by participant and opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"contribution_ratio\": {\n      \"description\": \"Proportion of total tokens contributed by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deserved_perc\": {\n      \"description\": \"Proportion of the total earnings the participant 'deserves' based on contribution ratio.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_perc\": {\n      \"description\": \"Proportion of the total earnings offered to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"inequity_perc\": {\n      \"description\": \"Disadvantageous inequity measured in proportional terms: max(0, deserved_perc - split_perc).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, bias=0, sensitivity_prop=1, alpha_ineq_prop=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        total_tokens = token_self + token_opp\n        contribution_ratio = (token_self / total_tokens) if total_tokens > 0 else 0.5\n        deserved_perc = contribution_ratio\n        split_perc = (split_self / combined_earning) if combined_earning > 0 else 0\n        inequity_perc = max(0, deserved_perc - split_perc)\n        Utility = bias + sensitivity_prop * split_perc - alpha_ineq_prop * inequity_perc\n        model_predictions.append(Utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 4, \"token_self\": 6, \"combined_earning\": 76, \"split_opp\": 34.2, \"split_self\": 41.8, \"splitperc_opp\": 45, \"splitperc_self\": 55, \"accept\": 1.0, \"accepted_amount\": 41.8, \"accepted_perc\": 55.0, \"proposed_perc\": 55.0, \"proposed_amount\": 41.8}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 7, \"token_self\": 3, \"combined_earning\": 50, \"split_opp\": 30.0, \"split_self\": 20.0, \"splitperc_opp\": 60, \"splitperc_self\": 40, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 40.0, \"proposed_amount\": 20.0}, {\"ID\": 3, \"group\": \"control\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 84, \"split_opp\": 33.6, \"split_self\": 50.4, \"splitperc_opp\": 40, \"splitperc_self\": 60, \"accept\": 1.0, \"accepted_amount\": 50.4, \"accepted_perc\": 60.0, \"proposed_perc\": 60.0, \"proposed_amount\": 50.4}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1745950101.752278
    }
  ],
  "learnable_parameters": {
    "bias": {
      "description": "Baseline tendency to accept the offer, independent of gain or inequity.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "sensitivity_prop": {
      "description": "Sensitivity to the proportion of the total earnings offered to the participant.",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha_ineq_prop": {
      "description": "Sensitivity (aversion) to disadvantageous inequity, measured as the difference between the deserved proportion and the received proportion.",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "total_tokens = token_self + token_opp\ncontribution_ratio = (token_self / total_tokens) if total_tokens > 0 else 0.5\ndeserved_perc = contribution_ratio\nsplit_perc = (split_self / combined_earning) if combined_earning > 0 else 0\ninequity_perc = max(0, deserved_perc - split_perc)\nUtility = bias + sensitivity_prop * split_perc - alpha_ineq_prop * inequity_perc",
  "variable_descriptions": {
    "Utility": {
      "description": "Predicted utility of accepting the offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "bias": {
      "description": "Baseline tendency to accept the offer, independent of gain or inequity.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "sensitivity_prop": {
      "description": "Sensitivity to the proportion of the total earnings offered to the participant.",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha_ineq_prop": {
      "description": "Sensitivity (aversion) to disadvantageous inequity, measured as the difference between the deserved proportion and the received proportion.",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "token_self": {
      "description": "Number of tokens contributed by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens contributed by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Amount of money offered to the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money to be split in the trial.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "total_tokens": {
      "description": "Sum of tokens contributed by participant and opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "contribution_ratio": {
      "description": "Proportion of total tokens contributed by the participant.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "deserved_perc": {
      "description": "Proportion of the total earnings the participant 'deserves' based on contribution ratio.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_perc": {
      "description": "Proportion of the total earnings offered to the participant.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "inequity_perc": {
      "description": "Disadvantageous inequity measured in proportional terms: max(0, deserved_perc - split_perc).",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A linear utility model for responder acceptance decisions based on proportional values. Utility is calculated as a baseline acceptance tendency (`bias`), plus sensitivity to the proportion of the total earnings offered (`sensitivity_prop` * `split_perc`), minus sensitivity to proportional disadvantageous inequity (`alpha_ineq_prop` * `inequity_perc`). Proportional inequity is defined relative to the participant's contribution ratio (`token_self / (token_self + token_opp)`). The model uses three learnable parameters: `bias`, `sensitivity_prop`, and `alpha_ineq_prop`.",
  "target_variable": "accept",
  "full_reasoning": "Okay, let's break this down step by step.\n\n**Reasoning:**\n\n1.  **Problem:** Previous models struggled with a trade-off: non-linear models (log-gain, log-inequity) improved fit (BIC, Accuracy) but degraded parameter recovery, while a simple linear model had better recovery but potentially suboptimal fit. The goal is to achieve both excellent recovery (r > 0.75) and good fit (BIC < 34, Acc > 0.82).\n2.  **Hypothesis:** The poor recovery in non-linear models might stem from using absolute monetary values (`split_self`, absolute inequity). Different trial stakes (`combined_earning`) mean the same absolute difference represents different levels of \"unfairness\" proportionally. This varying scale could induce correlations between gain sensitivity and inequity aversion parameters, hindering recovery. Using proportions relative to the total stake might normalize the decision process across trials and decouple the parameters.\n3.  **Proposed Solution (Normalization/Proportional Model):** Implement a linear utility model based on *proportions* rather than absolute values, as specified in the instructions.\n    *   **Gain Term:** Use the proportion of the total pot offered to the participant (`split_perc = split_self / combined_earning`).\n    *   **Fairness/Inequity Term:** Define fairness based on relative contribution (`contribution_ratio = token_self / (token_self + token_opp)`). Calculate disadvantageous inequity as the difference between the deserved proportion and the received proportion (`inequity_perc = max(0, contribution_ratio - split_perc)`).\n    *   **Utility Function:** Combine these terms linearly: `Utility = bias + sensitivity_prop * split_perc - alpha_ineq_prop * inequity_perc`.\n4.  **Parameter Definitions:**\n    *   `bias`: Captures baseline acceptance tendency, independent of offer specifics. A positive bias means a tendency to accept even slightly unfavorable offers, while a negative bias means a tendency to reject even slightly favorable ones. Bounds: [-10, 10] seems generous enough to capture individual differences.\n    *   `sensitivity_prop`: Measures how much utility increases per unit *increase* in the *proportion* of the pot offered. Should be non-negative. Bounds: [0, 20]. A value of 10 would mean going from receiving 0% to 100% increases utility by 10 (before considering inequity). This range allows for significant sensitivity.\n    *   `alpha_ineq_prop`: Measures how much utility decreases per unit *increase* in *proportional disadvantageous inequity*. Should be non-negative, reflecting aversion to getting less than the deserved proportion. Bounds: [0, 20]. Similar reasoning to `sensitivity_prop`; allows for strong aversion to proportional unfairness.\n5.  **Addressing Goals:**\n    *   **Parameter Recovery:** By using normalized inputs (`split_perc`, `inequity_perc`), we expect less correlation between the parameters derived from these inputs compared to absolute values, potentially improving recovery. The linear structure itself previously showed good recovery.\n    *   **Model Fit (BIC/Accuracy):** While simpler than the log-transformed models, using proportions might capture the underlying decision process more accurately than using raw monetary values, potentially leading to good fit comparable to or better than the simple linear model (Run 1) and potentially competing with the non-linear models.\n    *   **Applicability:** The model uses only variables available in the dataset (`token_self`, `token_opp`, `split_self`, `combined_earning`) to calculate its inputs.\n    *   **Utility Prediction:** The model calculates utility, which can be mapped to acceptance probability.\n\n6.  **Implementation Details:** Need intermediate calculations for `total_tokens`, `contribution_ratio`, `deserved_perc`, `split_perc`, and `inequity_perc`, handling potential division-by-zero cases as specified (use 0.5 contribution ratio if `total_tokens == 0`, use 0 split percentage if `combined_earning == 0`).\n\nThis proportional linear model directly implements the strategy requested, aiming to resolve the fit-recovery trade-off by changing the representation of gain and inequity.\n\n<MODEL>\ntotal_tokens = token_self + token_opp\ncontribution_ratio = (token_self / total_tokens) if total_tokens > 0 else 0.5\ndeserved_perc = contribution_ratio\nsplit_perc = (split_self / combined_earning) if combined_earning > 0 else 0\ninequity_perc = max(0, deserved_perc - split_perc)\nUtility = bias + sensitivity_prop * split_perc - alpha_ineq_prop * inequity_perc\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"Utility\": {\n      \"description\": \"Predicted utility of accepting the offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"bias\": {\n      \"description\": \"Baseline tendency to accept the offer, independent of gain or inequity.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"sensitivity_prop\": {\n      \"description\": \"Sensitivity to the proportion of the total earnings offered to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_ineq_prop\": {\n      \"description\": \"Sensitivity (aversion) to disadvantageous inequity, measured as the difference between the deserved proportion and the received proportion.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens contributed by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens contributed by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Amount of money offered to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money to be split in the trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"total_tokens\": {\n      \"description\": \"Sum of tokens contributed by participant and opponent.\",\n      \"range\": {\n          \"min\": 0,\n          \"max\": \"inf\",\n          \"inclusive_min\": true,\n          \"inclusive_max\": false\n       },\n       \"learnable\": false,\n       \"source\": \"calculated\"\n    },\n     \"contribution_ratio\": {\n       \"description\": \"Proportion of total tokens contributed by the participant.\",\n       \"range\": {\n           \"min\": 0,\n           \"max\": 1,\n           \"inclusive_min\": true,\n           \"inclusive_max\": true\n        },\n        \"learnable\": false,\n        \"source\": \"calculated\"\n    },\n     \"deserved_perc\": {\n       \"description\": \"Proportion of the total earnings the participant 'deserves' based on contribution ratio.\",\n       \"range\": {\n           \"min\": 0,\n           \"max\": 1,\n           \"inclusive_min\": true,\n           \"inclusive_max\": true\n        },\n        \"learnable\": false,\n        \"source\": \"calculated\"\n    },\n    \"split_perc\": {\n      \"description\": \"Proportion of the total earnings offered to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"inequity_perc\": {\n      \"description\": \"Disadvantageous inequity measured in proportional terms: max(0, deserved_perc - split_perc).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA linear utility model for responder acceptance decisions based on proportional values. Utility is calculated as a baseline acceptance tendency (`bias`), plus sensitivity to the proportion of the total earnings offered (`sensitivity_prop` * `split_perc`), minus sensitivity to proportional disadvantageous inequity (`alpha_ineq_prop` * `inequity_perc`). Proportional inequity is defined relative to the participant's contribution ratio (`token_self / (token_self + token_opp)`). The model uses three learnable parameters: `bias`, `sensitivity_prop`, and `alpha_ineq_prop`.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: total_tokens = token_self + token_opp\ncontribution_ratio = (token_self / total_tokens) if total_tokens > 0 else 0.5\ndeserved_perc = contribution_ratio\nsplit_perc = (split_self / combined_earning) if combined_earning > 0 else 0\ninequity_perc = max(0, deserved_perc - split_perc)\nUtility = bias + sensitivity_prop * split_perc - alpha_ineq_prop * inequity_perc\nSummary: A linear utility model for responder acceptance decisions based on proportional values. Utility is calculated as a baseline acceptance tendency (`bias`), plus sensitivity to the proportion of the total earnings offered (`sensitivity_prop` * `split_perc`), minus sensitivity to proportional disadvantageous inequity (`alpha_ineq_prop` * `inequity_perc`). Proportional inequity is defined relative to the participant's contribution ratio (`token_self / (token_self + token_opp)`). The model uses three learnable parameters: `bias`, `sensitivity_prop`, and `alpha_ineq_prop`.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, bias=0, sensitivity_prop=1, alpha_ineq_prop=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        total_tokens = token_self + token_opp\n        contribution_ratio = (token_self / total_tokens) if total_tokens > 0 else 0.5\n        deserved_perc = contribution_ratio\n        split_perc = (split_self / combined_earning) if combined_earning > 0 else 0\n        inequity_perc = max(0, deserved_perc - split_perc)\n        Utility = bias + sensitivity_prop * split_perc - alpha_ineq_prop * inequity_perc\n        model_predictions.append(Utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7893772893772893,
  "group_accuracies": {
    "Control": 0.83656330749354,
    "Cocaine": 0.7471064814814815
  },
  "group_parameter_averages": {
    "Control": {
      "bias": 1.129221004423217,
      "sensitivity_prop": 14.055987019981142,
      "alpha_ineq_prop": 8.799015615272562
    },
    "Cocaine": {
      "bias": -2.734482972012734,
      "sensitivity_prop": 12.381528065591743,
      "alpha_ineq_prop": 5.910360039063625
    }
  },
  "fitting_results": [
    {
      "bias": -9.232380650079222,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 6.55548587199885,
      "success": true,
      "log_likelihood": -2.9375021619053943,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -1.0670315121435752,
      "sensitivity_prop": 9.518191697709051,
      "alpha_ineq_prop": 8.947161766678722,
      "success": true,
      "log_likelihood": -15.822213441866358,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 2.9359658473470835,
      "sensitivity_prop": 4.427883335135153,
      "alpha_ineq_prop": 20.0,
      "success": true,
      "log_likelihood": -8.573212088521602,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -3.199248522115227,
      "sensitivity_prop": 14.838130608322329,
      "alpha_ineq_prop": 9.888180974874041,
      "success": true,
      "log_likelihood": -13.328742119818664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 3.4537147131796124,
      "sensitivity_prop": 0.19897639422820773,
      "alpha_ineq_prop": 20.0,
      "success": true,
      "log_likelihood": -7.531417522229166,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -2.844995500009662,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 9.101080786264168,
      "success": true,
      "log_likelihood": -11.0262625186207,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 0.0,
      "success": true,
      "log_likelihood": -2.6274734921805595e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -1.0442864514306605,
      "sensitivity_prop": 15.865751945999712,
      "alpha_ineq_prop": 10.817020685139546,
      "success": true,
      "log_likelihood": -11.409355753251214,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 0.0,
      "success": true,
      "log_likelihood": -2.627473492180559e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.5155472831394072,
      "sensitivity_prop": 7.623043858415855,
      "alpha_ineq_prop": 20.0,
      "success": true,
      "log_likelihood": -10.342736966010458,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -1.9082835565947533,
      "sensitivity_prop": 17.144905593061797,
      "alpha_ineq_prop": 20.0,
      "success": true,
      "log_likelihood": -5.2779021974729226,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -8.539053598216405,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 8.621715147894538,
      "success": true,
      "log_likelihood": -5.196686123840832,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -1.5060410923035539,
      "sensitivity_prop": 14.825584710012235,
      "alpha_ineq_prop": 20.0,
      "success": true,
      "log_likelihood": -9.495507564461551,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 0.1074237252007008,
      "success": true,
      "log_likelihood": -2.7318572206274657e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity_prop": 19.479289143817603,
      "alpha_ineq_prop": 0.0,
      "success": true,
      "log_likelihood": -2.8249564146442086e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity_prop": 19.350981263940103,
      "alpha_ineq_prop": 0.0,
      "success": true,
      "log_likelihood": -2.876350775428099e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 0.0,
      "success": true,
      "log_likelihood": -2.6274734921805595e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.9680836967822954,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 12.26492862017644,
      "success": true,
      "log_likelihood": -4.379955388590922,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 5.645194947096425,
      "sensitivity_prop": 13.416114887645223,
      "alpha_ineq_prop": 20.0,
      "success": true,
      "log_likelihood": -4.519110524263836,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 0.0,
      "success": true,
      "log_likelihood": -2.6274734921805584e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 1.8336581290029041,
      "sensitivity_prop": 5.611607203093959,
      "alpha_ineq_prop": 15.261592154741733,
      "success": true,
      "log_likelihood": -13.226591554902416,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 1.1664699799459783,
      "sensitivity_prop": 15.07576201536346,
      "alpha_ineq_prop": 9.912212605699777,
      "success": true,
      "log_likelihood": -7.797145799609337,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -6.781937669825803,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 1.1308192461520274,
      "success": true,
      "log_likelihood": -11.091605844811165,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -4.370888031253925,
      "sensitivity_prop": 18.059973602974384,
      "alpha_ineq_prop": 4.1948920068771445,
      "success": true,
      "log_likelihood": -14.900437637156694,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 4.026120871987129,
      "sensitivity_prop": 0.0,
      "alpha_ineq_prop": 20.0,
      "success": true,
      "log_likelihood": -12.322103512062775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.9422804992763247,
      "sensitivity_prop": 8.32396136346977,
      "alpha_ineq_prop": 13.715847911302845,
      "success": true,
      "log_likelihood": -13.024666254041687,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -4.180819202289249,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 6.706664221943125,
      "success": true,
      "log_likelihood": -8.80911075093374,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -4.370338319462867,
      "sensitivity_prop": 18.03933851844911,
      "alpha_ineq_prop": 20.0,
      "success": true,
      "log_likelihood": -5.092915497168921,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 5.780241024576208,
      "sensitivity_prop": 2.0066419435585114,
      "alpha_ineq_prop": 14.01791746941788,
      "success": true,
      "log_likelihood": -8.090192328570492,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 2.734812858466683,
      "sensitivity_prop": 3.1528851075425033,
      "alpha_ineq_prop": 9.149516326243129,
      "success": true,
      "log_likelihood": -14.077856823908371,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 0.0,
      "success": true,
      "log_likelihood": -2.6274734921805598e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -9.232379953905214,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 6.555491315343818,
      "success": true,
      "log_likelihood": -2.937502161904791,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -6.577919364987403,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 0.0,
      "success": true,
      "log_likelihood": -13.686038537115085,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -5.321652611813918,
      "sensitivity_prop": 19.797185121493065,
      "alpha_ineq_prop": 8.274589185381403,
      "success": true,
      "log_likelihood": -12.352723679112701,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 10.0,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 0.0,
      "success": true,
      "log_likelihood": -2.6274734921805595e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -4.404123047923079,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 2.645390008123355,
      "success": true,
      "log_likelihood": -10.880387643818018,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -0.7008647763329606,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 14.903551967206191,
      "success": true,
      "log_likelihood": -7.904590835383471,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 1.704928633757685,
      "sensitivity_prop": 4.1709754475398935,
      "alpha_ineq_prop": 14.763086014641448,
      "success": true,
      "log_likelihood": -14.174276640223116,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.8792335280931401,
      "sensitivity_prop": 5.510651348424137,
      "alpha_ineq_prop": 7.520943659549923,
      "success": true,
      "log_likelihood": -16.949764278435396,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 0.18659094507582824,
      "sensitivity_prop": 12.040406172633684,
      "alpha_ineq_prop": 2.659454862562409,
      "success": true,
      "log_likelihood": -7.967908818251147,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -1.3228639323935556,
      "sensitivity_prop": 9.918900016549559,
      "alpha_ineq_prop": 4.87359034847857,
      "success": true,
      "log_likelihood": -17.59155199572577,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -1.16657516743918,
      "sensitivity_prop": 6.010282978000327,
      "alpha_ineq_prop": 15.769114574828432,
      "success": true,
      "log_likelihood": -11.0808906912334,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": 3.5553431929918324,
      "sensitivity_prop": 1.758180948088474e-05,
      "alpha_ineq_prop": 0.0,
      "success": true,
      "log_likelihood": -4.56949962509219,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "bias": -5.129708341154418,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 2.273352369573909,
      "success": true,
      "log_likelihood": -11.967233985774296,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.0854309416789283,
      "sensitivity_prop": 19.088929682680607,
      "alpha_ineq_prop": 8.201163839138994,
      "success": true,
      "log_likelihood": -12.19633415376535,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.271420438602322,
      "sensitivity_prop": 12.521829593887016,
      "alpha_ineq_prop": 0.894033894088527,
      "success": true,
      "log_likelihood": -16.60707984715016,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -5.067181804535935,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 3.5829270845170145,
      "success": true,
      "log_likelihood": -11.993972830716958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.9867166257902156,
      "sensitivity_prop": 10.631783220815763,
      "alpha_ineq_prop": 4.294307719356665,
      "success": true,
      "log_likelihood": -17.811827214970524,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 3.2601280989015504,
      "sensitivity_prop": 0.0,
      "alpha_ineq_prop": 20.0,
      "success": true,
      "log_likelihood": -10.920654126192417,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.345313118487662,
      "sensitivity_prop": 8.249355503566587,
      "alpha_ineq_prop": 0.0,
      "success": true,
      "log_likelihood": -22.205420898783196,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.003883299677314,
      "sensitivity_prop": 11.150944310564476,
      "alpha_ineq_prop": 1.2526006024213372,
      "success": true,
      "log_likelihood": -17.766874858977534,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -8.984936164175066,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 0.0,
      "success": true,
      "log_likelihood": -7.024052273092031,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -5.719008640678808,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 0.4306558032949972,
      "success": true,
      "log_likelihood": -14.446495154402955,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.6525625364278467,
      "sensitivity_prop": 10.231659296315037,
      "alpha_ineq_prop": 0.0,
      "success": true,
      "log_likelihood": -20.74891640524448,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.9804062977153691,
      "sensitivity_prop": 0.0,
      "alpha_ineq_prop": 13.569450024176222,
      "success": true,
      "log_likelihood": -15.907461605773188,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.2590852897562665,
      "sensitivity_prop": 11.090126891960594,
      "alpha_ineq_prop": 20.0,
      "success": true,
      "log_likelihood": -6.5756050446026055,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -5.351893354511417,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 17.390364858318254,
      "success": true,
      "log_likelihood": -8.394333074293316,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 2.0794419188101694,
      "sensitivity_prop": 0.0,
      "alpha_ineq_prop": 0.0,
      "success": true,
      "log_likelihood": -12.557955443149385,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -8.808105068846341,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 5.440780265425338,
      "success": true,
      "log_likelihood": -4.5449193261289444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.1145649575975214,
      "sensitivity_prop": 17.712760593909866,
      "alpha_ineq_prop": 0.0,
      "success": true,
      "log_likelihood": -12.296716949912408,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.2728741935188035,
      "sensitivity_prop": 10.936275440233198,
      "alpha_ineq_prop": 1.9474992819502857,
      "success": true,
      "log_likelihood": -18.954225787479654,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.1822643729220936,
      "sensitivity_prop": 10.79771047511829,
      "alpha_ineq_prop": 10.338366932472963,
      "success": true,
      "log_likelihood": -14.51459486188453,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -9.232373275867229,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 6.555524266912299,
      "success": true,
      "log_likelihood": -2.937502161924233,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -5.290062685256868,
      "sensitivity_prop": 16.918998908968163,
      "alpha_ineq_prop": 0.6932630039033989,
      "success": true,
      "log_likelihood": -17.072287457142274,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -6.5594065904778684,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 12.669465988825317,
      "success": true,
      "log_likelihood": -6.45731272214957,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -4.322695360671321,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 6.043560597935412,
      "success": true,
      "log_likelihood": -11.021497656540992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.817156345547846,
      "sensitivity_prop": 18.050068393732232,
      "alpha_ineq_prop": 0.0,
      "success": true,
      "log_likelihood": -7.2447963656946675,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 3.0162844162262195,
      "sensitivity_prop": 5.784513833094468,
      "alpha_ineq_prop": 9.501115789298744,
      "success": true,
      "log_likelihood": -10.087394627389983,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -5.080037203256855,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 2.505366112031193,
      "success": true,
      "log_likelihood": -12.927417946494039,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 4.1491590208158105,
      "sensitivity_prop": 0.0,
      "alpha_ineq_prop": 6.72068442206243,
      "success": true,
      "log_likelihood": -9.209111258918986,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -7.780379767278917,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 20.0,
      "success": true,
      "log_likelihood": -2.5620616182107874,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -8.984936572896846,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 0.0,
      "success": true,
      "log_likelihood": -6.024052273575525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.73502470336687,
      "sensitivity_prop": 14.310612989577681,
      "alpha_ineq_prop": 6.781057736320756,
      "success": true,
      "log_likelihood": -15.067606816597683,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.155537436402732,
      "sensitivity_prop": 13.926449078511743,
      "alpha_ineq_prop": 1.1409517631356376,
      "success": true,
      "log_likelihood": -14.240920900111393,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.6485415517603739,
      "sensitivity_prop": 6.355742336872139,
      "alpha_ineq_prop": 1.2609268442858776,
      "success": true,
      "log_likelihood": -22.590006700246843,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.787046082638332,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 3.285741201992851,
      "success": true,
      "log_likelihood": -11.416312336194189,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 7.618686855493347,
      "sensitivity_prop": 0.0,
      "alpha_ineq_prop": 15.062348024014732,
      "success": true,
      "log_likelihood": -5.271633895783106,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -3.859269470875559,
      "sensitivity_prop": 3.911860764595537,
      "alpha_ineq_prop": 1.3479722799310587,
      "success": true,
      "log_likelihood": -7.458974626757574,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -0.44022443769386715,
      "sensitivity_prop": 3.967234303154508,
      "alpha_ineq_prop": 1.2918362367122762,
      "success": true,
      "log_likelihood": -22.857609050987936,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -9.232379174951276,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 6.555499639032247,
      "success": true,
      "log_likelihood": -2.9375021619047876,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -2.58107543941353,
      "sensitivity_prop": 9.046173450385858,
      "alpha_ineq_prop": 0.0,
      "success": true,
      "log_likelihood": -21.773258028482612,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.4282803275337235,
      "sensitivity_prop": 3.4047365487591166,
      "alpha_ineq_prop": 0.0,
      "success": true,
      "log_likelihood": -10.157069807605357,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -8.869981290465258,
      "sensitivity_prop": 19.5855054234079,
      "alpha_ineq_prop": 3.022195975006327,
      "success": true,
      "log_likelihood": -7.750824211005812,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -4.259755745898923,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 8.817020359363548,
      "success": true,
      "log_likelihood": -8.511021228205415,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.8655030848474852,
      "sensitivity_prop": 0.708079363589991,
      "alpha_ineq_prop": 2.9250089183274075,
      "success": true,
      "log_likelihood": -23.17067349457622,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -8.229377310197311,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 12.807951356538387,
      "success": true,
      "log_likelihood": -3.66612770707435,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 0.07342306298840424,
      "sensitivity_prop": 6.834409207637141,
      "alpha_ineq_prop": 5.0269183962963035,
      "success": true,
      "log_likelihood": -17.539437755204478,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 1.0133372981745257,
      "sensitivity_prop": 0.0,
      "alpha_ineq_prop": 16.419004999368834,
      "success": true,
      "log_likelihood": -12.039878411523178,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": 9.601932818578621,
      "sensitivity_prop": 0.0,
      "alpha_ineq_prop": 20.0,
      "success": true,
      "log_likelihood": -4.392086638407637,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -5.487787467388112,
      "sensitivity_prop": 20.0,
      "alpha_ineq_prop": 3.6483652890244493,
      "success": true,
      "log_likelihood": -9.993007723774696,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "bias": -1.75376879602961,
      "sensitivity_prop": 9.09758753706572,
      "alpha_ineq_prop": 0.0,
      "success": true,
      "log_likelihood": -19.417255337588447,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "bias": {
        "r": 0.9124759212807118,
        "p": 8.064576298686937e-40
      },
      "sensitivity_prop": {
        "r": 0.5151937574692225,
        "p": 4.1469960767799706e-08
      },
      "alpha_ineq_prop": {
        "r": 0.49196104925399975,
        "p": 2.012191457602303e-07
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 31.005456200483376,
  "bic_Control": 26.488631571664513,
  "bic_Cocaine": 35.05177826380028,
  "bic_results": {
    "average_bic": 31.005456200483376,
    "individual_bics": [
      16.62556113917912,
      42.39498369910105,
      27.896980992411535,
      37.408041055005654,
      25.813391859826663,
      32.80308185260973,
      10.750609364838175,
      33.56926832187076,
      10.750609364838175,
      31.436030747389246,
      21.306361210314176,
      21.143929063049995,
      29.741571944291433,
      10.750611452512743,
      10.750613314496624,
      10.75061434238384,
      10.750609364838175,
      19.510467592550174,
      19.788777863896,
      10.750609364838175,
      37.20373992517317,
      26.344848414587005,
      32.93376850499066,
      40.55143208968172,
      35.394763839493876,
      36.79988932345171,
      28.36877831723581,
      20.936387809706172,
      26.930941472509314,
      38.90627046318507,
      10.750609364838175,
      16.62556113917791,
      38.122633889598504,
      35.45600417359373,
      10.750609364838175,
      32.511332103004364,
      26.559738486135274,
      39.09911009581457,
      44.65008537223912,
      26.686374451870627,
      45.93366080681987,
      32.912338197835126,
      19.88955606555271,
      34.68502478691693,
      35.143225122899025,
      43.96471650966865,
      34.738502476802246,
      46.37421124530938,
      32.59186506775316,
      55.16139861293472,
      46.2843065333234,
      24.79866136155239,
      39.64354712417424,
      52.248389625857286,
      42.565480026914706,
      23.90176690457354,
      27.539222963954963,
      35.866467701667105,
      19.84039546762622,
      35.343990715193144,
      48.65900839032764,
      39.77974653913739,
      16.625561139216796,
      44.895131729652874,
      23.66518225966747,
      32.793552128450315,
      25.240149546757664,
      30.925346070148297,
      36.605392708356405,
      29.168779333206302,
      15.874680051789905,
      22.798661362519383,
      40.8857704485637,
      39.232398615591116,
      55.93057021586202,
      33.583181487756704,
      21.293824606934542,
      25.66850606888348,
      56.465774917344206,
      16.625561139177904,
      54.29707287233356,
      31.064696430579044,
      26.252205237379954,
      27.77259927177916,
      57.09190380452077,
      18.08281222951703,
      45.82943232577729,
      34.83031363841469,
      19.534730092183604,
      30.736572262917722,
      49.58506749054523
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        16.62556113917912,
        42.39498369910105,
        27.896980992411535,
        37.408041055005654,
        25.813391859826663,
        32.80308185260973,
        10.750609364838175,
        33.56926832187076,
        10.750609364838175,
        31.436030747389246,
        21.306361210314176,
        21.143929063049995,
        29.741571944291433,
        10.750611452512743,
        10.750613314496624,
        10.75061434238384,
        10.750609364838175,
        19.510467592550174,
        19.788777863896,
        10.750609364838175,
        37.20373992517317,
        26.344848414587005,
        32.93376850499066,
        40.55143208968172,
        35.394763839493876,
        36.79988932345171,
        28.36877831723581,
        20.936387809706172,
        26.930941472509314,
        38.90627046318507,
        10.750609364838175,
        16.62556113917791,
        38.122633889598504,
        35.45600417359373,
        10.750609364838175,
        32.511332103004364,
        26.559738486135274,
        39.09911009581457,
        44.65008537223912,
        26.686374451870627,
        45.93366080681987,
        32.912338197835126,
        19.88955606555271
      ],
      "Cocaine": [
        34.68502478691693,
        35.143225122899025,
        43.96471650966865,
        34.738502476802246,
        46.37421124530938,
        32.59186506775316,
        55.16139861293472,
        46.2843065333234,
        24.79866136155239,
        39.64354712417424,
        52.248389625857286,
        42.565480026914706,
        23.90176690457354,
        27.539222963954963,
        35.866467701667105,
        19.84039546762622,
        35.343990715193144,
        48.65900839032764,
        39.77974653913739,
        16.625561139216796,
        44.895131729652874,
        23.66518225966747,
        32.793552128450315,
        25.240149546757664,
        30.925346070148297,
        36.605392708356405,
        29.168779333206302,
        15.874680051789905,
        22.798661362519383,
        40.8857704485637,
        39.232398615591116,
        55.93057021586202,
        33.583181487756704,
        21.293824606934542,
        25.66850606888348,
        56.465774917344206,
        16.625561139177904,
        54.29707287233356,
        31.064696430579044,
        26.252205237379954,
        27.77259927177916,
        57.09190380452077,
        18.08281222951703,
        45.82943232577729,
        34.83031363841469,
        19.534730092183604,
        30.736572262917722,
        49.58506749054523
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- bias: r = 0.912\n- sensitivity_prop: r = 0.515\n- alpha_ineq_prop: r = 0.492",
  "previous_models": [
    "Specification: total_tokens = token_self + token_opp\ncontribution_ratio = (token_self / total_tokens) if total_tokens > 0 else 0.5\ndeserved_perc = contribution_ratio\nsplit_perc = (split_self / combined_earning) if combined_earning > 0 else 0\ninequity_perc = max(0, deserved_perc - split_perc)\nUtility = bias + sensitivity_prop * split_perc - alpha_ineq_prop * inequity_perc\nSummary: A linear utility model for responder acceptance decisions based on proportional values. Utility is calculated as a baseline acceptance tendency (`bias`), plus sensitivity to the proportion of the total earnings offered (`sensitivity_prop` * `split_perc`), minus sensitivity to proportional disadvantageous inequity (`alpha_ineq_prop` * `inequity_perc`). Proportional inequity is defined relative to the participant's contribution ratio (`token_self / (token_self + token_opp)`). The model uses three learnable parameters: `bias`, `sensitivity_prop`, and `alpha_ineq_prop`.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 31.005456200483376\nOverall Accuracy: 0.7894\nGroup Accuracies:\n- Control: 0.8366\n- Cocaine: 0.7471\n\nParameter Recovery:\n- bias: r = 0.912\n- sensitivity_prop: r = 0.515\n- alpha_ineq_prop: r = 0.492"
  ]
}