{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should directly predict a numerical value (not a binary choice). The model's predictions will be compared to actual values using mean squared error.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, let's break down the ultimatum game from the responder's perspective and build a computational model.\n\n**Key Psychological Mechanisms**\n\n1.  **Fairness Perception:** Responders evaluate offers based on their perception of fairness. This perception is influenced by the proposed split but also by contextual factors like the relative contributions of the proposer and responder.\n2.  **Inequity Aversion:** People tend to dislike unequal outcomes, even if the inequality benefits them. This aversion can lead to rejecting offers perceived as unfair, even if accepting would yield a positive payoff.\n3.  **Loss Aversion:** The pain of losing something is psychologically more powerful than the pleasure of gaining the same thing. Responders might frame a low offer as a loss relative to a \"fair\" baseline.\n4.  **Contribution Consideration:** Responders should react more positively to offers when their token contribution is greater than the opponent. This will likely be on a range, where the closer it is to an equal split the closer their reaction would be to how they would react when the contributions were equal.\n\n**Interaction of Mechanisms**\n\nThese mechanisms interact in a complex way. Fairness perception acts as a filter through which offers are evaluated. Inequity aversion and loss aversion provide the motivational force behind rejection. Contribution considerations would be a modifier to the fairness perception.\n\n**Mathematical Form**\n\nI will create a model with the following structure:\n\n1.  **Fairness Evaluation:** A function that calculates the subjective fairness of the offer. This will be influenced by the proposed split percentage and the relative contributions of the proposer and responder. I will use the percentage offered to the opponent, but I will modify that by the ratio of contribution from self and opponent.\n2.  **Utility Calculation:** A utility function that combines the monetary value of the offer with the fairness evaluation and a noise component. This utility will be a single number that encapsulates the relative \"value\" of accepting the offer compared to rejecting it. The noise component will simply allow that the model will not be perfect.\n3.  **Prediction:** The utility calculation is what the model will output. This will be on an unbound scale, where negative numbers imply a less than 50% likelihood of accepting.\n\n**Parameters**\n\n1.  **inequity_aversion:** A parameter that quantifies the responder's sensitivity to unfairness. Higher values indicate greater aversion to unequal splits.\n2.  **contribution_sensitivity:** A parameter that dictates how sensitive the responder is to the different contributions from the proposer and responder.\n3.  **monetary_sensitivity:** How sensitive the responder is to money. This essentially is the magnitude of the value associated with the offer.\n\n**Mapping to Observable Behavior**\n\nThe model predicts the utility of accepting the offer. Higher utility indicates a greater likelihood of accepting.\nThe model should target \"accept = whether the participant responded accept (1) or reject (0)\"\n\n```\n<MODEL>\nU = monetary_sensitivity * split_opp +  inequity_aversion * (splitperc_opp - (token_opp / (token_self + token_opp))) + contribution_sensitivity * (token_self - token_opp)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"inequity_aversion\": {\n      \"description\": \"Sensitivity to inequality/unfairness. Higher values means more sensitive\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"contribution_sensitivity\": {\n      \"description\": \"Sensitivity to differing contributions\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"monetary_sensitivity\": {\n      \"description\": \"Sensitivity to the monetary value of the offer\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed split for the opponent (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_opp\": {\n      \"description\": \"Proposed split percentage for the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nA utility model for the ultimatum game where the utility of accepting an offer is based on the amount offered to the opponent, weighted by sensitivity to money and unfairness. The unfairness component considers the relative contribution of self versus opponent, and there is an overall sensitivity to contribution that is included.\n</SUMMARY>\n```"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['inequity_aversion', 'contribution_sensitivity', 'monetary_sensitivity']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = monetary_sensitivity * split_opp +  inequity_aversion * (splitperc_opp - (token_opp / (token_self + token_opp))) + contribution_sensitivity * (token_self - token_opp)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"inequity_aversion\": {\n      \"description\": \"Sensitivity to inequality/unfairness. Higher values means more sensitive\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"contribution_sensitivity\": {\n      \"description\": \"Sensitivity to differing contributions\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"monetary_sensitivity\": {\n      \"description\": \"Sensitivity to the monetary value of the offer\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed split for the opponent (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_opp\": {\n      \"description\": \"Proposed split percentage for the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "python\nimport json\nimport math\n\ndef simulate_model(trial_data, inequity_aversion=0, contribution_sensitivity=0, monetary_sensitivity=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_opp = trial.get(\"split_opp\", 0)\n        splitperc_opp = trial.get(\"splitperc_opp\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        # Calculate utility\n        if (token_self + token_opp) == 0:\n            inequity_term = 0  # Avoid division by zero if both are 0\n        else:\n            inequity_term = splitperc_opp - (token_opp / (token_self + token_opp))\n\n        contribution_term = token_self - token_opp\n        utility = monetary_sensitivity * split_opp + inequity_aversion * inequity_term + contribution_sensitivity * contribution_term\n\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1745948373.082672
    }
  ],
  "learnable_parameters": {
    "inequity_aversion": {
      "description": "Sensitivity to inequality/unfairness. Higher values means more sensitive",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "contribution_sensitivity": {
      "description": "Sensitivity to differing contributions",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "monetary_sensitivity": {
      "description": "Sensitivity to the monetary value of the offer",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = monetary_sensitivity * split_opp +  inequity_aversion * (splitperc_opp - (token_opp / (token_self + token_opp))) + contribution_sensitivity * (token_self - token_opp)",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "inequity_aversion": {
      "description": "Sensitivity to inequality/unfairness. Higher values means more sensitive",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "contribution_sensitivity": {
      "description": "Sensitivity to differing contributions",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "monetary_sensitivity": {
      "description": "Sensitivity to the monetary value of the offer",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_opp": {
      "description": "Proposed split for the opponent (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "splitperc_opp": {
      "description": "Proposed split percentage for the opponent",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A utility model for the ultimatum game where the utility of accepting an offer is based on the amount offered to the opponent, weighted by sensitivity to money and unfairness. The unfairness component considers the relative contribution of self versus opponent, and there is an overall sensitivity to contribution that is included.",
  "target_variable": "accept",
  "full_reasoning": "Okay, let's break down the ultimatum game from the responder's perspective and build a computational model.\n\n**Key Psychological Mechanisms**\n\n1.  **Fairness Perception:** Responders evaluate offers based on their perception of fairness. This perception is influenced by the proposed split but also by contextual factors like the relative contributions of the proposer and responder.\n2.  **Inequity Aversion:** People tend to dislike unequal outcomes, even if the inequality benefits them. This aversion can lead to rejecting offers perceived as unfair, even if accepting would yield a positive payoff.\n3.  **Loss Aversion:** The pain of losing something is psychologically more powerful than the pleasure of gaining the same thing. Responders might frame a low offer as a loss relative to a \"fair\" baseline.\n4.  **Contribution Consideration:** Responders should react more positively to offers when their token contribution is greater than the opponent. This will likely be on a range, where the closer it is to an equal split the closer their reaction would be to how they would react when the contributions were equal.\n\n**Interaction of Mechanisms**\n\nThese mechanisms interact in a complex way. Fairness perception acts as a filter through which offers are evaluated. Inequity aversion and loss aversion provide the motivational force behind rejection. Contribution considerations would be a modifier to the fairness perception.\n\n**Mathematical Form**\n\nI will create a model with the following structure:\n\n1.  **Fairness Evaluation:** A function that calculates the subjective fairness of the offer. This will be influenced by the proposed split percentage and the relative contributions of the proposer and responder. I will use the percentage offered to the opponent, but I will modify that by the ratio of contribution from self and opponent.\n2.  **Utility Calculation:** A utility function that combines the monetary value of the offer with the fairness evaluation and a noise component. This utility will be a single number that encapsulates the relative \"value\" of accepting the offer compared to rejecting it. The noise component will simply allow that the model will not be perfect.\n3.  **Prediction:** The utility calculation is what the model will output. This will be on an unbound scale, where negative numbers imply a less than 50% likelihood of accepting.\n\n**Parameters**\n\n1.  **inequity_aversion:** A parameter that quantifies the responder's sensitivity to unfairness. Higher values indicate greater aversion to unequal splits.\n2.  **contribution_sensitivity:** A parameter that dictates how sensitive the responder is to the different contributions from the proposer and responder.\n3.  **monetary_sensitivity:** How sensitive the responder is to money. This essentially is the magnitude of the value associated with the offer.\n\n**Mapping to Observable Behavior**\n\nThe model predicts the utility of accepting the offer. Higher utility indicates a greater likelihood of accepting.\nThe model should target \"accept = whether the participant responded accept (1) or reject (0)\"\n\n```\n<MODEL>\nU = monetary_sensitivity * split_opp +  inequity_aversion * (splitperc_opp - (token_opp / (token_self + token_opp))) + contribution_sensitivity * (token_self - token_opp)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"inequity_aversion\": {\n      \"description\": \"Sensitivity to inequality/unfairness. Higher values means more sensitive\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"contribution_sensitivity\": {\n      \"description\": \"Sensitivity to differing contributions\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"monetary_sensitivity\": {\n      \"description\": \"Sensitivity to the monetary value of the offer\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_opp\": {\n      \"description\": \"Proposed split for the opponent (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_opp\": {\n      \"description\": \"Proposed split percentage for the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nA utility model for the ultimatum game where the utility of accepting an offer is based on the amount offered to the opponent, weighted by sensitivity to money and unfairness. The unfairness component considers the relative contribution of self versus opponent, and there is an overall sensitivity to contribution that is included.\n</SUMMARY>\n```",
  "prediction_type": "numerical_variable_estimation",
  "current_model": "Specification: U = monetary_sensitivity * split_opp +  inequity_aversion * (splitperc_opp - (token_opp / (token_self + token_opp))) + contribution_sensitivity * (token_self - token_opp)\nSummary: A utility model for the ultimatum game where the utility of accepting an offer is based on the amount offered to the opponent, weighted by sensitivity to money and unfairness. The unfairness component considers the relative contribution of self versus opponent, and there is an overall sensitivity to contribution that is included.\nTarget Variable: accept\nPrediction Type: numerical_variable_estimation",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, inequity_aversion=0, contribution_sensitivity=0, monetary_sensitivity=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_opp = trial.get(\"split_opp\", 0)\n        splitperc_opp = trial.get(\"splitperc_opp\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        # Calculate utility\n        if (token_self + token_opp) == 0:\n            inequity_term = 0  # Avoid division by zero if both are 0\n        else:\n            inequity_term = splitperc_opp - (token_opp / (token_self + token_opp))\n\n        contribution_term = token_self - token_opp\n        utility = monetary_sensitivity * split_opp + inequity_aversion * inequity_term + contribution_sensitivity * contribution_term\n\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "group_parameter_averages": {
    "Control": {
      "inequity_aversion": 0.010501201336125055,
      "contribution_sensitivity": -0.1118656111451215,
      "monetary_sensitivity": -0.015973788955826154
    },
    "Cocaine": {
      "inequity_aversion": 0.007388117659186579,
      "contribution_sensitivity": -0.057408689256082515,
      "monetary_sensitivity": -0.005398864287577725
    }
  },
  "fitting_results": [
    {
      "inequity_aversion": 0.0008725647798113062,
      "contribution_sensitivity": -0.00011634745022082571,
      "monetary_sensitivity": -0.0003067174052411693,
      "success": true,
      "mse": 0.07988734090234667,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.009447664184710974,
      "contribution_sensitivity": -0.1679263603605348,
      "monetary_sensitivity": -0.024680364878398003,
      "success": true,
      "mse": 0.2727853126378483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.007452378427210938,
      "contribution_sensitivity": -0.33432699025205936,
      "monetary_sensitivity": -0.00483281926456231,
      "success": true,
      "mse": 0.22085541599002798,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.0033053274790201645,
      "contribution_sensitivity": -0.1671073835079614,
      "monetary_sensitivity": 0.015714177906307032,
      "success": true,
      "mse": 0.26231174833139287,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.008476760202972026,
      "contribution_sensitivity": -0.41779741164222145,
      "monetary_sensitivity": -0.022198137257150106,
      "success": true,
      "mse": 0.161059147584949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.012952215981024634,
      "contribution_sensitivity": -0.12672679734293119,
      "monetary_sensitivity": -0.038114468805449386,
      "success": true,
      "mse": 0.278540356839928,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.01468643063737903,
      "contribution_sensitivity": -0.001958343129161573,
      "monetary_sensitivity": -0.0050440584962791165,
      "success": true,
      "mse": 0.02178890253020906,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.014668428293786532,
      "contribution_sensitivity": -0.1686241497621246,
      "monetary_sensitivity": -0.048545510787705325,
      "success": true,
      "mse": 0.2552492296350961,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.014686443034788879,
      "contribution_sensitivity": -0.001958198016248181,
      "monetary_sensitivity": -0.005044159126000343,
      "success": true,
      "mse": 0.02178890252969521,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.008047766460405902,
      "contribution_sensitivity": -0.2510747389556831,
      "monetary_sensitivity": -0.025798422050371295,
      "success": true,
      "mse": 0.22432898426864034,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.007193469158042877,
      "contribution_sensitivity": -0.29262579821725776,
      "monetary_sensitivity": -0.013268418757751017,
      "success": true,
      "mse": 0.23297200209728683,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.00012690399413770823,
      "contribution_sensitivity": -0.041683913670054334,
      "monetary_sensitivity": 0.008807122358999171,
      "success": true,
      "mse": 0.10241390599969691,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.010395045079172894,
      "contribution_sensitivity": -0.2513853162521028,
      "monetary_sensitivity": -0.04256864916578148,
      "success": true,
      "mse": 0.2301000687879537,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.014686434410342876,
      "contribution_sensitivity": -0.001958188233707192,
      "monetary_sensitivity": -0.005044089436202402,
      "success": true,
      "mse": 0.021788902530029755,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.014686433578807672,
      "contribution_sensitivity": -0.00195825807757929,
      "monetary_sensitivity": -0.005044082737719822,
      "success": true,
      "mse": 0.021788902530067975,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.01468644958429181,
      "contribution_sensitivity": -0.0019582088180804483,
      "monetary_sensitivity": -0.005044207893682208,
      "success": true,
      "mse": 0.021788902529472094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.014686460356111142,
      "contribution_sensitivity": -0.001958169790321511,
      "monetary_sensitivity": -0.005044287962882512,
      "success": true,
      "mse": 0.02178890252917304,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.010994146003618721,
      "contribution_sensitivity": -0.04313255189434135,
      "monetary_sensitivity": 0.005540671024006949,
      "success": true,
      "mse": 0.18741038803094132,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.01412468133397777,
      "contribution_sensitivity": -0.1268832485536232,
      "monetary_sensitivity": -0.015822036278722158,
      "success": true,
      "mse": 0.1419587857814717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.014686440764111955,
      "contribution_sensitivity": -0.0019581924639112164,
      "monetary_sensitivity": -0.005044141672935335,
      "success": true,
      "mse": 0.02178890252977908,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.01242631102567491,
      "contribution_sensitivity": -0.25165684653241205,
      "monetary_sensitivity": -0.04250870089714451,
      "success": true,
      "mse": 0.24345249787908457,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.01538426011478792,
      "contribution_sensitivity": -0.08538458580073195,
      "monetary_sensitivity": -0.029854256206411918,
      "success": true,
      "mse": 0.16917420528124102,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.003059142394007608,
      "contribution_sensitivity": 0.04125880140747129,
      "monetary_sensitivity": 0.010615685049305464,
      "success": true,
      "mse": 0.26583042536248447,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.00688817951811144,
      "contribution_sensitivity": -0.08425162222619507,
      "monetary_sensitivity": -0.0011163726967737043,
      "success": true,
      "mse": 0.29796763406406895,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.013120977653905004,
      "contribution_sensitivity": -0.3767494805711697,
      "monetary_sensitivity": -0.05371718034259202,
      "success": true,
      "mse": 0.17528518967711543,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.006598992153120955,
      "contribution_sensitivity": -0.2092132951968091,
      "monetary_sensitivity": 0.008377119982080404,
      "success": true,
      "mse": 0.26738505194292633,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.011257338132909874,
      "contribution_sensitivity": -0.04316763361948714,
      "monetary_sensitivity": -0.03497806714344505,
      "success": true,
      "mse": 0.3051500411447877,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.00584273824543322,
      "contribution_sensitivity": -0.25077902665783847,
      "monetary_sensitivity": -0.020519661182370152,
      "success": true,
      "mse": 0.1783598545867469,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.014485951058358955,
      "contribution_sensitivity": -0.1269305012979826,
      "monetary_sensitivity": -0.018098285533829157,
      "success": true,
      "mse": 0.13130968566224388,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.015279728833376624,
      "contribution_sensitivity": -0.12703749517384377,
      "monetary_sensitivity": -0.03840915409203364,
      "success": true,
      "mse": 0.2031314759046069,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.014686444002358152,
      "contribution_sensitivity": -0.001958466702113831,
      "monetary_sensitivity": -0.005044145377603496,
      "success": true,
      "mse": 0.021788902529713668,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.0008725650331374471,
      "contribution_sensitivity": -0.00011635019287222978,
      "monetary_sensitivity": -0.00030671951143478125,
      "success": true,
      "mse": 0.07988734090233583,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.006382791863176201,
      "contribution_sensitivity": 0.12414895604648647,
      "monetary_sensitivity": -0.010051914256916667,
      "success": true,
      "mse": 0.27416960624717024,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.0075660902288009835,
      "contribution_sensitivity": -0.08434215742215546,
      "monetary_sensitivity": -0.022763464603187993,
      "success": true,
      "mse": 0.26761232747540126,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.014686470108121005,
      "contribution_sensitivity": -0.0019582408864885505,
      "monetary_sensitivity": -0.005044367693224509,
      "success": true,
      "mse": 0.021788902528985705,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.0035235015214610185,
      "contribution_sensitivity": -0.00046983299885583474,
      "monetary_sensitivity": 0.03893582201518666,
      "success": true,
      "mse": 0.29317971562432654,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.00980648077592834,
      "contribution_sensitivity": -0.1679742685810683,
      "monetary_sensitivity": -0.005594229411829139,
      "success": true,
      "mse": 0.26444159611526785,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.010571477251721034,
      "contribution_sensitivity": -0.29307619949391167,
      "monetary_sensitivity": -0.03345194544580721,
      "success": true,
      "mse": 0.22800546775360184,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.014603381115892492,
      "contribution_sensitivity": -0.16861396676489643,
      "monetary_sensitivity": -0.04662360882400561,
      "success": true,
      "mse": 0.24156258491395421,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.01598410169947143,
      "contribution_sensitivity": -0.002143838198228733,
      "monetary_sensitivity": -0.026974139278681045,
      "success": true,
      "mse": 0.11554709488294725,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.017600767640355546,
      "contribution_sensitivity": -0.12734512271206924,
      "monetary_sensitivity": -0.07838362621681579,
      "success": true,
      "mse": 0.24381517492712435,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.0033468785052055837,
      "contribution_sensitivity": -0.1671129151638202,
      "monetary_sensitivity": -0.005048007185007508,
      "success": true,
      "mse": 0.16667307063086886,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.016714644834335834,
      "contribution_sensitivity": -0.002228624111106388,
      "monetary_sensitivity": -0.024931105560462463,
      "success": true,
      "mse": 0.044141260309618624,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.009837772914985594,
      "contribution_sensitivity": -0.0013117778701916827,
      "monetary_sensitivity": -0.022844240216461188,
      "success": true,
      "mse": 0.30645138071984507,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.009641234096890121,
      "contribution_sensitivity": -0.12628558337998863,
      "monetary_sensitivity": -0.014109305061625376,
      "success": true,
      "mse": 0.28937575487127454,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.008441235313343402,
      "contribution_sensitivity": -0.001125133565001002,
      "monetary_sensitivity": 0.010457992415962191,
      "success": true,
      "mse": 0.25563424187961176,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.013181432349228604,
      "contribution_sensitivity": -0.04342419748479117,
      "monetary_sensitivity": -0.05354370173687852,
      "success": true,
      "mse": 0.2904245746907954,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.0030968719398634824,
      "contribution_sensitivity": -0.08374626026405026,
      "monetary_sensitivity": 0.01513593503393193,
      "success": true,
      "mse": 0.26250797785525254,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.01231878596672236,
      "contribution_sensitivity": -0.37664267124927375,
      "monetary_sensitivity": -0.056535241412985326,
      "success": true,
      "mse": 0.15816825918079647,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.0030186303177368876,
      "contribution_sensitivity": 0.04126417847710786,
      "monetary_sensitivity": 0.0330077241204275,
      "success": true,
      "mse": 0.2759778946582936,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.011789993639352299,
      "contribution_sensitivity": -0.04323884711940377,
      "monetary_sensitivity": -0.020280301949003113,
      "success": true,
      "mse": 0.2616485381076394,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.0025791437896066963,
      "contribution_sensitivity": 0.041322774648708746,
      "monetary_sensitivity": -0.008604012445752224,
      "success": true,
      "mse": 0.12570378451750847,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.005622228455178233,
      "contribution_sensitivity": 0.04091702568252271,
      "monetary_sensitivity": 0.009054882544105122,
      "success": true,
      "mse": 0.30288144757352753,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.003445228151438506,
      "contribution_sensitivity": 0.08287380046789046,
      "monetary_sensitivity": 0.03546403438002863,
      "success": true,
      "mse": 0.27409273899094766,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.003470193837981564,
      "contribution_sensitivity": -0.41712936181682647,
      "monetary_sensitivity": 0.0153036646910003,
      "success": true,
      "mse": 0.1313981486834408,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.005897543856903315,
      "contribution_sensitivity": -0.2924530153905341,
      "monetary_sensitivity": -0.014544550677755588,
      "success": true,
      "mse": 0.1912276478804587,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.005722293893016671,
      "contribution_sensitivity": -0.16742964037136893,
      "monetary_sensitivity": -0.019760711822255674,
      "success": true,
      "mse": 0.20261075789015914,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.010698878254845369,
      "contribution_sensitivity": 0.0819068106681121,
      "monetary_sensitivity": 0.01534462377336811,
      "success": true,
      "mse": 0.10313955165687948,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.001229275356758393,
      "contribution_sensitivity": -0.0001638881320213539,
      "monetary_sensitivity": -0.00048793781757846026,
      "success": true,
      "mse": 0.10435015758364317,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.009744338899011959,
      "contribution_sensitivity": 0.04036739651537288,
      "monetary_sensitivity": 0.009619026761042187,
      "success": true,
      "mse": 0.2155541772347242,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.012552051752924707,
      "contribution_sensitivity": -0.043340285093912335,
      "monetary_sensitivity": -0.03665125924413443,
      "success": true,
      "mse": 0.2786599841303988,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.01274843415414685,
      "contribution_sensitivity": -0.21003308899536244,
      "monetary_sensitivity": -0.05204175727613737,
      "success": true,
      "mse": 0.25196329424207686,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.0008726200635194201,
      "contribution_sensitivity": -0.0001162169346645728,
      "monetary_sensitivity": -0.0003071667075157299,
      "success": true,
      "mse": 0.07988734090114143,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.0030554701671730105,
      "contribution_sensitivity": -0.0004073916852440069,
      "monetary_sensitivity": 0.021209902397899452,
      "success": true,
      "mse": 0.28499469192056637,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.0026015990450853374,
      "contribution_sensitivity": -0.08368000100461125,
      "monetary_sensitivity": -0.0005334378894405304,
      "success": true,
      "mse": 0.18581155118940207,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.008692312108784857,
      "contribution_sensitivity": -0.04282611566093555,
      "monetary_sensitivity": -0.013432296525991731,
      "success": true,
      "mse": 0.3073104543658295,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.016131427570844622,
      "contribution_sensitivity": -0.0021509140644256864,
      "monetary_sensitivity": -0.028413358438683485,
      "success": true,
      "mse": 0.11856342158772276,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.015215326770818632,
      "contribution_sensitivity": -0.08536209179029336,
      "monetary_sensitivity": -0.027774997003654878,
      "success": true,
      "mse": 0.16008287831681955,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.0025133252761383854,
      "contribution_sensitivity": -0.00033344122869940823,
      "monetary_sensitivity": 0.037596357816456275,
      "success": true,
      "mse": 0.29935007844209366,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.013002851787032338,
      "contribution_sensitivity": -0.0850671764785527,
      "monetary_sensitivity": -0.0013069515611285735,
      "success": true,
      "mse": 0.09733302439419565,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.0004172903291148538,
      "contribution_sensitivity": -0.12505564474976485,
      "monetary_sensitivity": 0.006648038685738343,
      "success": true,
      "mse": 0.09301566321603819,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.0026388715991577166,
      "contribution_sensitivity": 0.041314722074151544,
      "monetary_sensitivity": -0.00932312861327235,
      "success": true,
      "mse": 0.1260453617482834,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.008581551568506774,
      "contribution_sensitivity": -0.12614417995964244,
      "monetary_sensitivity": -0.01480751577216488,
      "success": true,
      "mse": 0.28905103096038304,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.008268868371321021,
      "contribution_sensitivity": -0.0011025074566088846,
      "monetary_sensitivity": 0.018533366277694252,
      "success": true,
      "mse": 0.22888734274022837,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.007527964124341023,
      "contribution_sensitivity": -0.0010035888716012076,
      "monetary_sensitivity": -0.007046345050755858,
      "success": true,
      "mse": 0.27994574045138426,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.01891180880461593,
      "contribution_sensitivity": -0.04418823530348912,
      "monetary_sensitivity": -0.0804453554609025,
      "success": true,
      "mse": 0.24449190798651588,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.013655064701598742,
      "contribution_sensitivity": -0.0851540142202033,
      "monetary_sensitivity": -0.0036862280858951752,
      "success": true,
      "mse": 0.07836811304952383,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.001829521425745066,
      "contribution_sensitivity": -0.0002442622667776692,
      "monetary_sensitivity": -0.009075278331902274,
      "success": true,
      "mse": 0.052478588260332415,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.0026076182077729073,
      "contribution_sensitivity": -0.04201628419184378,
      "monetary_sensitivity": 0.04718023318401451,
      "success": true,
      "mse": 0.252998882824657,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.0008726146369868983,
      "contribution_sensitivity": -0.00011542666171847545,
      "monetary_sensitivity": -0.00030709923295289257,
      "success": true,
      "mse": 0.07988734090164383,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.009902875089447559,
      "contribution_sensitivity": -0.0013203865468532838,
      "monetary_sensitivity": -0.023815615400711466,
      "success": true,
      "mse": 0.28209663683754627,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.014580885328153059,
      "contribution_sensitivity": 0.0397225432088745,
      "monetary_sensitivity": -0.014278038734700823,
      "success": true,
      "mse": 0.09961076234753158,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.001420742044081792,
      "contribution_sensitivity": -0.0001884863862235258,
      "monetary_sensitivity": -0.0013652687909138188,
      "success": true,
      "mse": 0.10332600964168287,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.001662133182193883,
      "contribution_sensitivity": -0.08355509860358803,
      "monetary_sensitivity": 0.037476103622191594,
      "success": true,
      "mse": 0.29611912664721074,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.011018924325748724,
      "contribution_sensitivity": -0.08480256144448003,
      "monetary_sensitivity": -0.02127500704743052,
      "success": true,
      "mse": 0.2528198510545821,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.0022770424148836873,
      "contribution_sensitivity": -0.041970306694076656,
      "monetary_sensitivity": -0.009102914896156118,
      "success": true,
      "mse": 0.10271640920544292,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.013836097075144937,
      "contribution_sensitivity": -0.12684482972772998,
      "monetary_sensitivity": -0.03686959842728115,
      "success": true,
      "mse": 0.2443057028618263,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.0027591974585157017,
      "contribution_sensitivity": -0.20870122795300822,
      "monetary_sensitivity": 0.0011718804677695346,
      "success": true,
      "mse": 0.1516953454155648,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.01405977814149042,
      "contribution_sensitivity": -0.08520797188376147,
      "monetary_sensitivity": -0.0072444760388142015,
      "success": true,
      "mse": 0.08180747890203541,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": -0.0012986237363770946,
      "contribution_sensitivity": 0.00017305767469509814,
      "monetary_sensitivity": 0.05860216122557735,
      "success": true,
      "mse": 0.2844816210604733,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "inequity_aversion": 0.011978922819180574,
      "contribution_sensitivity": -0.001597281207873228,
      "monetary_sensitivity": -0.02113831553010184,
      "success": true,
      "mse": 0.25477857095721385,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "inequity_aversion": {
        "r": 0.9999999999912302,
        "p": 0.0
      },
      "contribution_sensitivity": {
        "r": 0.9999999999971234,
        "p": 0.0
      },
      "monetary_sensitivity": {
        "r": 0.9999999999867935,
        "p": 0.0
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 44.78294132823591,
  "bic_Control": 37.30960936474239,
  "bic_Cocaine": 51.47780121219884,
  "bic_results": {
    "average_bic": 44.78294132823591,
    "individual_bics": [
      21.937167687062075,
      66.14760423051823,
      58.54523856338761,
      64.73815348231129,
      47.17872142035216,
      66.899207605118,
      -24.8346306876421,
      63.755596965318034,
      -24.834630688491057,
      59.107032712884035,
      60.467999374975804,
      30.87975131263767,
      60.0214558183647,
      -24.83463068793834,
      -24.834630687875187,
      -24.834630688859715,
      -24.834630689353798,
      52.63376998663868,
      42.63426504466307,
      -24.8346306883525,
      62.05212750762465,
      48.94838460452405,
      65.21785100955533,
      69.32639648575727,
      50.225856062612806,
      65.42777258108056,
      70.18387054045236,
      50.8518550840075,
      39.8270488190377,
      55.53366478503163,
      -24.83463068846059,
      21.937167687057187,
      66.32983013111998,
      65.45835934645945,
      -24.83463068966334,
      68.74322941885485,
      65.02927622077775,
      59.692247124272015,
      61.771570413594006,
      35.22335617409223,
      62.10571766707558,
      48.41217354358817,
      0.5811594697531497,
      70.33706931902584,
      68.27307836743493,
      63.80985764979644,
      68.4033216693496,
      64.76507420512584,
      46.52667948763997,
      66.5664889076545,
      64.64701840423801,
      38.256357179257876,
      69.91523396800851,
      66.31973561609017,
      39.85129376697685,
      53.35966647650105,
      55.4412619871442,
      31.13392706308358,
      31.554018334766614,
      57.67058325818509,
      66.91466553723488,
      63.28914425152733,
      21.93716768651895,
      67.723881151931,
      52.325328963508454,
      70.43784675315055,
      36.15106990711688,
      46.959841304481316,
      69.49303506160605,
      29.04792138701217,
      27.41458558613873,
      38.35404798009053,
      68.2326581714602,
      59.83121862137003,
      67.0803899731333,
      62.20550080186024,
      21.24595760211388,
      6.809529937632821,
      63.43680379092612,
      21.937167686745358,
      67.35593022078217,
      29.880668882986132,
      31.1989499098534,
      69.10236697974923,
      63.41131978426465,
      30.985928922614395,
      62.178072743030526,
      45.02241247289098,
      22.792213230531676,
      67.65901258570645,
      63.68915463729702
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        21.937167687062075,
        66.14760423051823,
        58.54523856338761,
        64.73815348231129,
        47.17872142035216,
        66.899207605118,
        -24.8346306876421,
        63.755596965318034,
        -24.834630688491057,
        59.107032712884035,
        60.467999374975804,
        30.87975131263767,
        60.0214558183647,
        -24.83463068793834,
        -24.834630687875187,
        -24.834630688859715,
        -24.834630689353798,
        52.63376998663868,
        42.63426504466307,
        -24.8346306883525,
        62.05212750762465,
        48.94838460452405,
        65.21785100955533,
        69.32639648575727,
        50.225856062612806,
        65.42777258108056,
        70.18387054045236,
        50.8518550840075,
        39.8270488190377,
        55.53366478503163,
        -24.83463068846059,
        21.937167687057187,
        66.32983013111998,
        65.45835934645945,
        -24.83463068966334,
        68.74322941885485,
        65.02927622077775,
        59.692247124272015,
        61.771570413594006,
        35.22335617409223,
        62.10571766707558,
        48.41217354358817,
        0.5811594697531497
      ],
      "Cocaine": [
        70.33706931902584,
        68.27307836743493,
        63.80985764979644,
        68.4033216693496,
        64.76507420512584,
        46.52667948763997,
        66.5664889076545,
        64.64701840423801,
        38.256357179257876,
        69.91523396800851,
        66.31973561609017,
        39.85129376697685,
        53.35966647650105,
        55.4412619871442,
        31.13392706308358,
        31.554018334766614,
        57.67058325818509,
        66.91466553723488,
        63.28914425152733,
        21.93716768651895,
        67.723881151931,
        52.325328963508454,
        70.43784675315055,
        36.15106990711688,
        46.959841304481316,
        69.49303506160605,
        29.04792138701217,
        27.41458558613873,
        38.35404798009053,
        68.2326581714602,
        59.83121862137003,
        67.0803899731333,
        62.20550080186024,
        21.24595760211388,
        6.809529937632821,
        63.43680379092612,
        21.937167686745358,
        67.35593022078217,
        29.880668882986132,
        31.1989499098534,
        69.10236697974923,
        63.41131978426465,
        30.985928922614395,
        62.178072743030526,
        45.02241247289098,
        22.792213230531676,
        67.65901258570645,
        63.68915463729702
      ]
    },
    "num_parameters": 3,
    "prediction_type": "numerical",
    "bic_formula": "BIC calculated from MSE using Gaussian error assumption"
  },
  "recovery_summary": "Parameter Recovery:\n- inequity_aversion: r = 1.000\n- contribution_sensitivity: r = 1.000\n- monetary_sensitivity: r = 1.000",
  "previous_models": [
    "Specification: U = monetary_sensitivity * split_opp +  inequity_aversion * (splitperc_opp - (token_opp / (token_self + token_opp))) + contribution_sensitivity * (token_self - token_opp)\nSummary: A utility model for the ultimatum game where the utility of accepting an offer is based on the amount offered to the opponent, weighted by sensitivity to money and unfairness. The unfairness component considers the relative contribution of self versus opponent, and there is an overall sensitivity to contribution that is included.\nTarget Variable: accept\nPrediction Type: numerical_variable_estimation\nBIC: 44.78294132823591\n\nParameter Recovery:\n- inequity_aversion: r = 1.000\n- contribution_sensitivity: r = 1.000\n- monetary_sensitivity: r = 1.000"
  ]
}