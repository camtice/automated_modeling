{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should directly predict a numerical value (not a binary choice). The model's predictions will be compared to actual values using mean squared error.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, let's think step by step about modeling responder behavior in the Ultimatum Game, considering the specific dataset provided.\n\n**1. Key Psychological Mechanisms:**\n\n*   **Fairness Perception:** Responders evaluate the fairness of the proposed split. This is influenced by the proposed amount relative to the total amount available (`combined_earning`), as well as the relative contributions of the responder and proposer (`token_self`, `token_opp`, and `trial_type`). An offer is perceived as fair if it aligns with the responder's expectation of what they deserve.\n*   **Loss Aversion:** Responders are more sensitive to losses than to gains. Rejecting an unfair offer, even though it means receiving nothing, might be seen as avoiding the loss of being treated unfairly.\n*   **Inequity Aversion:** Responders dislike unequal outcomes. They may reject offers that give the proposer a significantly larger share, even if the responder receives a positive amount.\n*   **Contribution Consideration:** Responders take into account their contribution to the pot when determining fairness. Someone who contributed more may be less likely to accept a stingy proposal.\n*   **Cognitive Noise:** Decisions are not always perfectly rational. There's some randomness or error in the decision-making process.\n\n**2. Interaction of Mechanisms:**\n\nThese mechanisms interact in a complex way. Fairness perception forms the foundation, with loss aversion and inequity aversion acting as modifiers. The strength of these modifiers likely depends on individual differences and the specific context (e.g., how unfair the offer is). Contribution consideration will modulate the fairness expectation. The overall utility of accepting or rejecting is then subject to some degree of random noise.\n\n**3. Mathematical Form:**\n\nA utility function seems appropriate. We can calculate a utility for accepting the offer and compare it to a baseline utility (which could be zero, representing the utility of rejecting).\n\nHere's a possible utility function:\n\n```\nU = alpha * Fairness - beta * Inequity + gamma * Contribution - delta * (LossAversion * (Fairness<0)) + noise\n```\n\nWhere:\n\n*   `Fairness` reflects the perceived fairness of the offer. A positive value indicates a fair or generous offer, while a negative value suggests an unfair one. We'll scale this to the size of the pot.\n*   `Inequity` reflects the difference in earnings between the proposer and responder. A larger inequity (proposer earning much more) reduces utility.\n*   `Contribution` reflects whether your contribution was more, less, or equal, scaled to the size of the pot.\n*   `LossAversion` is some aversion to getting a proposal that is more unfair than the threshold of 0.\n*   `noise` represents random noise in the decision process, drawn from a normal distribution.\n\n`Fairness` can be calculated as: `splitperc_opp - fairness_threshold`.\n`fairness_threshold` represents the responder's expectation of a fair share. This will be another parameter we need to learn. If `splitperc_opp` is greater than the `fairness_threshold`, the offer is considered fair (positive fairness). If it's less, it's considered unfair (negative fairness).\n\n`Inequity` can be calculated as the difference between what the proposer earns and what the responder earns: `splitperc_self - splitperc_opp`.\n\n`Contribution` can be set to 1 if `trial_type == 3` (participant more), -1 if `trial_type == 2` (opponent more), and 0 if `trial_type == 1` (equal).\n\nThe probability of accepting the offer could then be modeled using a sigmoid function:\n\n`P(accept) = 1 / (1 + exp(-U))`\n\nA utility score less than 0 will mean that the participant is less than 50% to accept.\n\n**4. Parameters:**\n\n*   `alpha`: Sensitivity to fairness. (Learnable)\n*   `beta`: Sensitivity to inequity. (Learnable)\n*   `gamma`: Sensitivity to contribution. (Learnable)\n*   `fairness_threshold`: The percentage split considered fair. (Learnable)\n*   `delta`: Sensitivity to the degree the unfairness of a proposal, with 0 being no loss aversion and larger number being more aversion. (Learnable)\n*   `noise`: Standard deviation of the noise distribution. (Fixed, but could be learnable as well if we wanted)\n\n**5. Mapping to Observable Behavior:**\n\nThe model predicts the probability of accepting the offer (`accept`). Higher utility scores translate to a higher probability of acceptance.\n\n```python\nimport numpy as np\n\ndef utility_function(alpha, beta, gamma, fairness_threshold, delta, noise, splitperc_opp, splitperc_self, trial_type):\n  \"\"\"Calculates the utility of accepting an offer.\"\"\"\n\n  # Fairness: proposed offer relative to fairness threshold\n  fairness = splitperc_opp - fairness_threshold\n\n  # Inequity: difference between proposer and responder earnings\n  inequity = splitperc_self - splitperc_opp\n\n  # Contribution: +1 if participant contributed more, -1 if opponent did, 0 if equal\n  if trial_type == 3:\n    contribution = 1\n  elif trial_type == 2:\n    contribution = -1\n  else:\n    contribution = 0\n    \n  # Loss Aversion\n  loss_aversion = 1 if fairness < 0 else 0\n\n  # Calculate utility\n  U = alpha * fairness - beta * inequity + gamma * contribution - delta * (loss_aversion * (fairness<0)) + np.random.normal(0, noise)\n\n  return U\n\n# Example usage:\nalpha = 0.5\nbeta = 0.3\ngamma = 0.2\nfairness_threshold = 0.4\ndelta = 0.1\nnoise = 1\nsplitperc_opp = 0.3\nsplitperc_self = 0.7\ntrial_type = 3  # Participant contributed more\n\nutility = utility_function(alpha, beta, gamma, fairness_threshold, delta, noise, splitperc_opp, splitperc_self, trial_type)\nprint(f\"Utility: {utility}\")\n\n```\n\nNow, let's write the model specification.\n\n<MODEL>\nU = alpha * (splitperc_opp - fairness_threshold) - beta * (splitperc_self - splitperc_opp) + gamma * contribution - delta * ((splitperc_opp - fairness_threshold < 0) * (splitperc_opp - fairness_threshold)) + noise\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity to fairness (positive = more sensitive)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to inequity (positive = more averse)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity to contribution (positive = values their own contribution)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_threshold\": {\n      \"description\": \"The percentage split considered fair\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta\": {\n      \"description\": \"Sensitivity to loss aversion, representing the weight of the unfairness when negative\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"splitperc_opp\": {\n      \"description\": \"Percentage split offered to the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Percentage split offered to the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"contribution\": {\n      \"description\": \"+1 if participant contributed more, -1 if opponent did, 0 if equal\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"trial_type\": {\n      \"description\": \"how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n        \"noise\": {\n      \"description\": \"Standard deviation of the noise distribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts the utility of accepting an offer in the Ultimatum Game. It considers fairness (relative to a learned fairness threshold), inequity aversion, contribution, loss aversion to being treated unfairly, and random noise.  The model learns the sensitivity parameters for fairness, inequity, contribution, loss aversion, and the fairness threshold itself. Noise is fixed.\n</SUMMARY>\n"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta', 'gamma', 'fairness_threshold', 'delta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = alpha * (splitperc_opp - fairness_threshold) - beta * (splitperc_self - splitperc_opp) + gamma * contribution - delta * ((splitperc_opp - fairness_threshold < 0) * (splitperc_opp - fairness_threshold)) + noise\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity to fairness (positive = more sensitive)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to inequity (positive = more averse)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity to contribution (positive = values their own contribution)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_threshold\": {\n      \"description\": \"The percentage split considered fair\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta\": {\n      \"description\": \"Sensitivity to loss aversion, representing the weight of the unfairness when negative\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"splitperc_opp\": {\n      \"description\": \"Percentage split offered to the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Percentage split offered to the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"contribution\": {\n      \"description\": \"+1 if participant contributed more, -1 if opponent did, 0 if equal\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"trial_type\": {\n      \"description\": \"how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"noise\": {\n      \"description\": \"Standard deviation of the noise distribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 4641\n\n                ",
      "output": "```python\nimport json\nimport math\nimport random\n\ndef simulate_model(trial_data, alpha=1.0, beta=1.0, gamma=1.0, fairness_threshold=0.5, delta=1.0):\n    \"\"\"\n    Simulates the model and returns a list of model predictions.\n\n    Args:\n        trial_data (list of dict): A list of dictionaries, where each dictionary represents a trial.\n        alpha (float): Sensitivity to fairness.\n        beta (float): Sensitivity to inequity.\n        gamma (float): Sensitivity to contribution.\n        fairness_threshold (float): The percentage split considered fair.\n        delta (float): Sensitivity to loss aversion.\n\n    Returns:\n        list: A list of model predictions for each trial.\n    \"\"\"\n    model_predictions = []\n    for trial in trial_data:\n        splitperc_opp = trial.get(\"splitperc_opp\", 0.5)  # Default to 0.5 if not provided\n        splitperc_self = trial.get(\"splitperc_self\", 0.5)\n        trial_type = trial.get(\"trial_type\", 1)\n        noise = 1 #Fixed noise\n\n        #Contribution\n        if trial_type == 3:\n            contribution = 1\n        elif trial_type == 2:\n            contribution = -1\n        else:\n            contribution = 0\n        \n        #Loss Aversion\n        unfairness = splitperc_opp - fairness_threshold\n        loss_aversion = 1 if unfairness < 0 else 0\n\n        # Calculate utility\n        U = alpha * unfairness - beta * (splitperc_self - splitperc_opp) + gamma * contribution - delta * (loss_aversion * (unfairness)) + random.gauss(0, noise)\n\n        model_predictions.append(U)  # Store the utility value\n    return model_predictions\n\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 10, \"split_opp\": 5.0, \"split_self\": 5.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 5.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 5.0}, {\"ID\": 1, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 10, \"split_opp\": 2.0, \"split_self\": 8.0, \"splitperc_opp\": 20, \"splitperc_self\": 80, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 80.0, \"proposed_amount\": 8.0}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 10, \"split_opp\": 6.0, \"split_self\": 4.0, \"splitperc_opp\": 60, \"splitperc_self\": 40, \"accept\": 1.0, \"accepted_amount\": 6.0, \"accepted_perc\": 60.0, \"proposed_perc\": 40.0, \"proposed_amount\": 4.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1745947997.907976
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Sensitivity to fairness (positive = more sensitive)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Sensitivity to inequity (positive = more averse)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity to contribution (positive = values their own contribution)",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fairness_threshold": {
      "description": "The percentage split considered fair",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "delta": {
      "description": "Sensitivity to loss aversion, representing the weight of the unfairness when negative",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = alpha * (splitperc_opp - fairness_threshold) - beta * (splitperc_self - splitperc_opp) + gamma * contribution - delta * ((splitperc_opp - fairness_threshold < 0) * (splitperc_opp - fairness_threshold)) + noise",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Sensitivity to fairness (positive = more sensitive)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Sensitivity to inequity (positive = more averse)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity to contribution (positive = values their own contribution)",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fairness_threshold": {
      "description": "The percentage split considered fair",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "delta": {
      "description": "Sensitivity to loss aversion, representing the weight of the unfairness when negative",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "splitperc_opp": {
      "description": "Percentage split offered to the opponent",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "splitperc_self": {
      "description": "Percentage split offered to the participant",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "contribution": {
      "description": "+1 if participant contributed more, -1 if opponent did, 0 if equal",
      "range": {
        "min": -1,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "trial_type": {
      "description": "how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]",
      "range": {
        "min": 1,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "noise": {
      "description": "Standard deviation of the noise distribution",
      "range": {
        "min": 0,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "fixed"
    }
  },
  "model_summary": "This model predicts the utility of accepting an offer in the Ultimatum Game. It considers fairness (relative to a learned fairness threshold), inequity aversion, contribution, loss aversion to being treated unfairly, and random noise.  The model learns the sensitivity parameters for fairness, inequity, contribution, loss aversion, and the fairness threshold itself. Noise is fixed.",
  "target_variable": "accept",
  "full_reasoning": "Okay, let's think step by step about modeling responder behavior in the Ultimatum Game, considering the specific dataset provided.\n\n**1. Key Psychological Mechanisms:**\n\n*   **Fairness Perception:** Responders evaluate the fairness of the proposed split. This is influenced by the proposed amount relative to the total amount available (`combined_earning`), as well as the relative contributions of the responder and proposer (`token_self`, `token_opp`, and `trial_type`). An offer is perceived as fair if it aligns with the responder's expectation of what they deserve.\n*   **Loss Aversion:** Responders are more sensitive to losses than to gains. Rejecting an unfair offer, even though it means receiving nothing, might be seen as avoiding the loss of being treated unfairly.\n*   **Inequity Aversion:** Responders dislike unequal outcomes. They may reject offers that give the proposer a significantly larger share, even if the responder receives a positive amount.\n*   **Contribution Consideration:** Responders take into account their contribution to the pot when determining fairness. Someone who contributed more may be less likely to accept a stingy proposal.\n*   **Cognitive Noise:** Decisions are not always perfectly rational. There's some randomness or error in the decision-making process.\n\n**2. Interaction of Mechanisms:**\n\nThese mechanisms interact in a complex way. Fairness perception forms the foundation, with loss aversion and inequity aversion acting as modifiers. The strength of these modifiers likely depends on individual differences and the specific context (e.g., how unfair the offer is). Contribution consideration will modulate the fairness expectation. The overall utility of accepting or rejecting is then subject to some degree of random noise.\n\n**3. Mathematical Form:**\n\nA utility function seems appropriate. We can calculate a utility for accepting the offer and compare it to a baseline utility (which could be zero, representing the utility of rejecting).\n\nHere's a possible utility function:\n\n```\nU = alpha * Fairness - beta * Inequity + gamma * Contribution - delta * (LossAversion * (Fairness<0)) + noise\n```\n\nWhere:\n\n*   `Fairness` reflects the perceived fairness of the offer. A positive value indicates a fair or generous offer, while a negative value suggests an unfair one. We'll scale this to the size of the pot.\n*   `Inequity` reflects the difference in earnings between the proposer and responder. A larger inequity (proposer earning much more) reduces utility.\n*   `Contribution` reflects whether your contribution was more, less, or equal, scaled to the size of the pot.\n*   `LossAversion` is some aversion to getting a proposal that is more unfair than the threshold of 0.\n*   `noise` represents random noise in the decision process, drawn from a normal distribution.\n\n`Fairness` can be calculated as: `splitperc_opp - fairness_threshold`.\n`fairness_threshold` represents the responder's expectation of a fair share. This will be another parameter we need to learn. If `splitperc_opp` is greater than the `fairness_threshold`, the offer is considered fair (positive fairness). If it's less, it's considered unfair (negative fairness).\n\n`Inequity` can be calculated as the difference between what the proposer earns and what the responder earns: `splitperc_self - splitperc_opp`.\n\n`Contribution` can be set to 1 if `trial_type == 3` (participant more), -1 if `trial_type == 2` (opponent more), and 0 if `trial_type == 1` (equal).\n\nThe probability of accepting the offer could then be modeled using a sigmoid function:\n\n`P(accept) = 1 / (1 + exp(-U))`\n\nA utility score less than 0 will mean that the participant is less than 50% to accept.\n\n**4. Parameters:**\n\n*   `alpha`: Sensitivity to fairness. (Learnable)\n*   `beta`: Sensitivity to inequity. (Learnable)\n*   `gamma`: Sensitivity to contribution. (Learnable)\n*   `fairness_threshold`: The percentage split considered fair. (Learnable)\n*   `delta`: Sensitivity to the degree the unfairness of a proposal, with 0 being no loss aversion and larger number being more aversion. (Learnable)\n*   `noise`: Standard deviation of the noise distribution. (Fixed, but could be learnable as well if we wanted)\n\n**5. Mapping to Observable Behavior:**\n\nThe model predicts the probability of accepting the offer (`accept`). Higher utility scores translate to a higher probability of acceptance.\n\n```python\nimport numpy as np\n\ndef utility_function(alpha, beta, gamma, fairness_threshold, delta, noise, splitperc_opp, splitperc_self, trial_type):\n  \"\"\"Calculates the utility of accepting an offer.\"\"\"\n\n  # Fairness: proposed offer relative to fairness threshold\n  fairness = splitperc_opp - fairness_threshold\n\n  # Inequity: difference between proposer and responder earnings\n  inequity = splitperc_self - splitperc_opp\n\n  # Contribution: +1 if participant contributed more, -1 if opponent did, 0 if equal\n  if trial_type == 3:\n    contribution = 1\n  elif trial_type == 2:\n    contribution = -1\n  else:\n    contribution = 0\n    \n  # Loss Aversion\n  loss_aversion = 1 if fairness < 0 else 0\n\n  # Calculate utility\n  U = alpha * fairness - beta * inequity + gamma * contribution - delta * (loss_aversion * (fairness<0)) + np.random.normal(0, noise)\n\n  return U\n\n# Example usage:\nalpha = 0.5\nbeta = 0.3\ngamma = 0.2\nfairness_threshold = 0.4\ndelta = 0.1\nnoise = 1\nsplitperc_opp = 0.3\nsplitperc_self = 0.7\ntrial_type = 3  # Participant contributed more\n\nutility = utility_function(alpha, beta, gamma, fairness_threshold, delta, noise, splitperc_opp, splitperc_self, trial_type)\nprint(f\"Utility: {utility}\")\n\n```\n\nNow, let's write the model specification.\n\n<MODEL>\nU = alpha * (splitperc_opp - fairness_threshold) - beta * (splitperc_self - splitperc_opp) + gamma * contribution - delta * ((splitperc_opp - fairness_threshold < 0) * (splitperc_opp - fairness_threshold)) + noise\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity to fairness (positive = more sensitive)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to inequity (positive = more averse)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity to contribution (positive = values their own contribution)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_threshold\": {\n      \"description\": \"The percentage split considered fair\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"delta\": {\n      \"description\": \"Sensitivity to loss aversion, representing the weight of the unfairness when negative\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"splitperc_opp\": {\n      \"description\": \"Percentage split offered to the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Percentage split offered to the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"contribution\": {\n      \"description\": \"+1 if participant contributed more, -1 if opponent did, 0 if equal\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"trial_type\": {\n      \"description\": \"how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n        \"noise\": {\n      \"description\": \"Standard deviation of the noise distribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5\n      },\n      \"learnable\": false,\n      \"source\": \"fixed\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts the utility of accepting an offer in the Ultimatum Game. It considers fairness (relative to a learned fairness threshold), inequity aversion, contribution, loss aversion to being treated unfairly, and random noise.  The model learns the sensitivity parameters for fairness, inequity, contribution, loss aversion, and the fairness threshold itself. Noise is fixed.\n</SUMMARY>\n",
  "prediction_type": "numerical_variable_estimation",
  "current_model": "Specification: U = alpha * (splitperc_opp - fairness_threshold) - beta * (splitperc_self - splitperc_opp) + gamma * contribution - delta * ((splitperc_opp - fairness_threshold < 0) * (splitperc_opp - fairness_threshold)) + noise\nSummary: This model predicts the utility of accepting an offer in the Ultimatum Game. It considers fairness (relative to a learned fairness threshold), inequity aversion, contribution, loss aversion to being treated unfairly, and random noise.  The model learns the sensitivity parameters for fairness, inequity, contribution, loss aversion, and the fairness threshold itself. Noise is fixed.\nTarget Variable: accept\nPrediction Type: numerical_variable_estimation",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=1.0, beta=1.0, gamma=1.0, fairness_threshold=0.5, delta=1.0):\n    \"\"\"\n    Simulates the model and returns a list of model predictions.\n\n    Args:\n        trial_data (list of dict): A list of dictionaries, where each dictionary represents a trial.\n        alpha (float): Sensitivity to fairness.\n        beta (float): Sensitivity to inequity.\n        gamma (float): Sensitivity to contribution.\n        fairness_threshold (float): The percentage split considered fair.\n        delta (float): Sensitivity to loss aversion.\n\n    Returns:\n        list: A list of model predictions for each trial.\n    \"\"\"\n    model_predictions = []\n    for trial in trial_data:\n        splitperc_opp = trial.get(\"splitperc_opp\", 0.5)  # Default to 0.5 if not provided\n        splitperc_self = trial.get(\"splitperc_self\", 0.5)\n        trial_type = trial.get(\"trial_type\", 1)\n        noise = 1 #Fixed noise\n\n        #Contribution\n        if trial_type == 3:\n            contribution = 1\n        elif trial_type == 2:\n            contribution = -1\n        else:\n            contribution = 0\n        \n        #Loss Aversion\n        unfairness = splitperc_opp - fairness_threshold\n        loss_aversion = 1 if unfairness < 0 else 0\n\n        # Calculate utility\n        U = alpha * unfairness - beta * (splitperc_self - splitperc_opp) + gamma * contribution - delta * (loss_aversion * (unfairness)) + random.gauss(0, noise)\n\n        model_predictions.append(U)  # Store the utility value\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "group_parameter_averages": {
    "Control": {
      "alpha": 3.239252741421952,
      "beta": 3.198055631854241,
      "gamma": 0.524240684212429,
      "fairness_threshold": 0.4686899746634388,
      "delta": 5.40387099703497
    },
    "Cocaine": {
      "alpha": 3.332481356206956,
      "beta": 3.9370205258368176,
      "gamma": 0.24801558748315977,
      "fairness_threshold": 0.5212760314766575,
      "delta": 4.871779233951127
    }
  },
  "fitting_results": [
    {
      "alpha": 4.461696747100798,
      "beta": 0.28326567478059156,
      "gamma": 6.67010944409275,
      "fairness_threshold": 0.027087537375552435,
      "delta": 3.916297176726701,
      "success": true,
      "mse": 107260.91572507519,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 2.7110436173353945,
      "beta": 1.2033195120672933,
      "gamma": 5.588164739109819,
      "fairness_threshold": 0.07378290660745956,
      "delta": 7.192074814317984,
      "success": true,
      "mse": 59089.73418619417,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.9517212555590457,
      "beta": 8.13459816106457,
      "gamma": 2.8970436491552705,
      "fairness_threshold": 0.15263010128615073,
      "delta": 4.5367269199863784,
      "success": true,
      "mse": 185468.11896213097,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 4.545408469190549,
      "beta": 8.974139020140923,
      "gamma": -8.307813405285728,
      "fairness_threshold": 0.5547568726377744,
      "delta": 2.207200119960434,
      "success": true,
      "mse": 509427.1698355688,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.6819129296504445,
      "beta": 2.8641666688776204,
      "gamma": 2.35906819837792,
      "fairness_threshold": 0.5864981932828004,
      "delta": 2.719456801589199,
      "success": true,
      "mse": 30546.464207607452,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.024579322452203064,
      "beta": 2.4134564346475207,
      "gamma": 2.3763480695049157,
      "fairness_threshold": 0.16430641676192692,
      "delta": 1.6554612922994638,
      "success": true,
      "mse": 12121.292158780952,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 2.5734624951161327,
      "beta": 0.4947933133235955,
      "gamma": -7.494069366529746,
      "fairness_threshold": 0.847763386169991,
      "delta": 2.9869234573920833,
      "success": true,
      "mse": 40194.44420411,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.1051844675061125,
      "beta": 4.677029216454391,
      "gamma": 1.4752806116763906,
      "fairness_threshold": 0.7304560912736677,
      "delta": 3.8104979900666978,
      "success": true,
      "mse": 47249.96493288607,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 1.0733460296807653,
      "beta": 1.5096575514522346,
      "gamma": 3.3892928937699955,
      "fairness_threshold": 0.18298337396316094,
      "delta": 5.940883817797322,
      "success": true,
      "mse": 19825.610164131238,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 6.87236680197301,
      "beta": 0.7971990465014344,
      "gamma": -5.102344303404054,
      "fairness_threshold": 0.5794239751971085,
      "delta": 8.997382352218734,
      "success": true,
      "mse": 266792.5857406633,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 8.984127739381758,
      "beta": 5.25455020007318,
      "gamma": 9.523323798897971,
      "fairness_threshold": 0.12526526604708116,
      "delta": 1.136054392809149,
      "success": true,
      "mse": 743118.2775109983,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 6.787486112609893,
      "beta": 1.3471499968681355,
      "gamma": 6.903547667987617,
      "fairness_threshold": 0.5502652839908082,
      "delta": 5.8482869294741615,
      "success": true,
      "mse": 285419.44064234657,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 2.401517240007831,
      "beta": 0.1425724202358722,
      "gamma": 4.6890497166391105,
      "fairness_threshold": 0.7299106052701425,
      "delta": 8.706888605871443,
      "success": true,
      "mse": 30264.50023898296,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.22829573864159497,
      "beta": 0.6736260811753586,
      "gamma": -3.6166292421114363,
      "fairness_threshold": 0.2426048421388425,
      "delta": 8.002935594687688,
      "success": true,
      "mse": 2022.3005906385479,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.622626045872982,
      "beta": 8.640954169455371,
      "gamma": -8.666652443870142,
      "fairness_threshold": 0.21640631341008262,
      "delta": 3.608077523536472,
      "success": true,
      "mse": 185731.83445315575,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.8867563985101411,
      "beta": 1.150837917741664,
      "gamma": -0.3086113224203294,
      "fairness_threshold": 0.4046016349962463,
      "delta": 3.8848428377793445,
      "success": true,
      "mse": 12500.913162817336,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 1.5803527971208378,
      "beta": 5.904555244795043,
      "gamma": 3.9729941605675916,
      "fairness_threshold": 0.8051041745202276,
      "delta": 3.5275311854987215,
      "success": true,
      "mse": 138514.60874873176,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 3.541440369276605,
      "beta": 6.821782626774466,
      "gamma": 7.837128453958971,
      "fairness_threshold": 0.3237068892559368,
      "delta": 8.077208765540087,
      "success": true,
      "mse": 301465.8945322178,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.09119637453585626,
      "beta": 0.4550355868411423,
      "gamma": -7.287855259948096,
      "fairness_threshold": 0.04705330888195944,
      "delta": 5.686573308820913,
      "success": true,
      "mse": 724.3906192064767,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 7.862308935081031,
      "beta": 4.124291040832778,
      "gamma": -2.1124556291170933,
      "fairness_threshold": 0.4069521278914649,
      "delta": 9.452478285687171,
      "success": true,
      "mse": 533753.7805037893,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 4.945938905453738,
      "beta": 3.139608958790284,
      "gamma": -9.907119995655064,
      "fairness_threshold": 0.9214480771070624,
      "delta": 6.37386143392687,
      "success": true,
      "mse": 231566.9067468325,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 4.910241710803751,
      "beta": 6.909300402885963,
      "gamma": -8.107600728769146,
      "fairness_threshold": 0.6764534456654736,
      "delta": 4.49151131915208,
      "success": true,
      "mse": 417602.92518124497,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 2.014439732275942,
      "beta": 1.9723418662106134,
      "gamma": 9.492758572748315,
      "fairness_threshold": 0.813573800542556,
      "delta": 7.91694889217954,
      "success": true,
      "mse": 51408.42928194118,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 3.5995804991866462,
      "beta": 3.3127769267076217,
      "gamma": 9.170630062487337,
      "fairness_threshold": 0.02722734902061763,
      "delta": 2.070368929580241,
      "success": true,
      "mse": 158822.88262766937,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 9.091111983879626,
      "beta": 0.8872592361084888,
      "gamma": -8.860120547691555,
      "fairness_threshold": 0.1817880474736967,
      "delta": 1.4049710623323652,
      "success": true,
      "mse": 461426.5767252112,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 9.346378857907991,
      "beta": 2.344357974621422,
      "gamma": 9.335341853147646,
      "fairness_threshold": 0.4787021384147102,
      "delta": 0.8217557773518251,
      "success": true,
      "mse": 573380.7232895152,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 2.099248432063135,
      "beta": 4.53520958027381,
      "gamma": 5.233063280322137,
      "fairness_threshold": 0.36282082940181526,
      "delta": 0.03916366587912933,
      "success": true,
      "mse": 120635.77253252368,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 1.7515321531536006,
      "beta": 0.03970675557948539,
      "gamma": -4.998748712417148,
      "fairness_threshold": 0.9073205382126726,
      "delta": 8.767811288132105,
      "success": true,
      "mse": 15341.741242234853,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 9.326786208343323,
      "beta": 5.203310229737565,
      "gamma": -3.654489824370136,
      "fairness_threshold": 0.3487072256980178,
      "delta": 3.1844967354693656,
      "success": true,
      "mse": 776370.0931739372,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 2.7596192421068024,
      "beta": 4.736548413877497,
      "gamma": -8.820711548806079,
      "fairness_threshold": 0.8016587644425468,
      "delta": 3.0469926209736493,
      "success": true,
      "mse": 160523.2368911776,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.5184280526536869,
      "beta": 4.364913597009905,
      "gamma": 0.2671906463255238,
      "fairness_threshold": 0.8759904455724118,
      "delta": 6.7420632432639005,
      "success": true,
      "mse": 53165.34442199762,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 3.5699210546502114,
      "beta": 0.48056468752505876,
      "gamma": -2.812340472528771,
      "fairness_threshold": 0.5947737372032087,
      "delta": 6.818332104617823,
      "success": true,
      "mse": 73441.31607407508,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 7.384402844429496,
      "beta": 5.3101807957763505,
      "gamma": 9.193599810366615,
      "fairness_threshold": 0.12128122223435706,
      "delta": 9.178399609319268,
      "success": true,
      "mse": 565322.6332291435,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 1.8733395993721171,
      "beta": 7.048286233033491,
      "gamma": -6.414769657540011,
      "fairness_threshold": 0.7644594046465707,
      "delta": 9.7115607483816,
      "success": true,
      "mse": 196967.77597632408,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 1.3227628147116148,
      "beta": 7.333653034561236,
      "gamma": -5.185464774768299,
      "fairness_threshold": 0.39366009997519463,
      "delta": 6.417812844069879,
      "success": true,
      "mse": 175772.24655648926,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 1.5186827011017516,
      "beta": 2.995499465127016,
      "gamma": 6.63524548161149,
      "fairness_threshold": 0.9625799327096568,
      "delta": 8.94844747433461,
      "success": true,
      "mse": 56335.239719916266,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 3.2471694941104405,
      "beta": 0.4044578268912218,
      "gamma": 2.4190953944926905,
      "fairness_threshold": 0.1979145635964304,
      "delta": 1.3229428614057168,
      "success": true,
      "mse": 60430.457895821324,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 1.1703765057109534,
      "beta": 1.042615748536105,
      "gamma": 0.8814967516917283,
      "fairness_threshold": 0.5176351199040444,
      "delta": 4.055860346088853,
      "success": true,
      "mse": 16157.25132020335,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 2.184257812360699,
      "beta": 3.302476986434146,
      "gamma": 5.112013494419285,
      "fairness_threshold": 0.4671039232671218,
      "delta": 9.828509564377857,
      "success": true,
      "mse": 88663.9881916574,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 3.322148045610097,
      "beta": 2.368252478601022,
      "gamma": -7.055978546200033,
      "fairness_threshold": 0.3240290670359686,
      "delta": 7.842506707393566,
      "success": true,
      "mse": 112908.38308767552,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 3.826088177379145,
      "beta": 0.49915239164015585,
      "gamma": 5.18218185055564,
      "fairness_threshold": 0.9260321632869921,
      "delta": 7.921511964182327,
      "success": true,
      "mse": 83028.90677943207,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 0.38885127823088683,
      "beta": 0.5048051279726864,
      "gamma": 6.405518451780789,
      "fairness_threshold": 0.6552595002890893,
      "delta": 9.420448863493368,
      "success": true,
      "mse": 2449.7878137353237,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 2.129731889045284,
      "beta": 2.9141335677280367,
      "gamma": 4.246638148879794,
      "fairness_threshold": 0.08169021386926921,
      "delta": 4.146392644537612,
      "success": true,
      "mse": 76842.87101662542,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Control",
      "n_trials": 51
    },
    {
      "alpha": 4.740542059826996,
      "beta": 3.760688784055694,
      "gamma": -0.39103051144636897,
      "fairness_threshold": 0.4870903558643862,
      "delta": 4.3261117311855495,
      "success": true,
      "mse": 246417.0172951151,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 5.914934038851162,
      "beta": 2.2714251582590728,
      "gamma": -1.553113554447595,
      "fairness_threshold": 0.664160314363407,
      "delta": 9.498776717086328,
      "success": true,
      "mse": 262259.3735724622,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 4.583396240316044,
      "beta": 7.323415313908789,
      "gamma": 4.32127644971098,
      "fairness_threshold": 0.01955105554330737,
      "delta": 9.102211746885043,
      "success": true,
      "mse": 416161.8347819822,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.13957972148702946,
      "beta": 4.23544716324231,
      "gamma": 6.409763746867238,
      "fairness_threshold": 0.7679722219198448,
      "delta": 6.762357579476465,
      "success": true,
      "mse": 39983.902487656596,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 1.3446857227914775,
      "beta": 0.9145092751171605,
      "gamma": 6.719485574916608,
      "fairness_threshold": 0.2593466619588025,
      "delta": 9.746739129189498,
      "success": true,
      "mse": 17975.8644774962,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 7.256996148928514,
      "beta": 2.7842222241902883,
      "gamma": -4.094612815851756,
      "fairness_threshold": 0.0647660150259687,
      "delta": 3.4101032944897884,
      "success": true,
      "mse": 400352.6852846858,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.07390914943610416,
      "beta": 1.7973277277786004,
      "gamma": 0.5557243794353517,
      "fairness_threshold": 0.6220055179906387,
      "delta": 6.451410996847667,
      "success": true,
      "mse": 7306.803303701952,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.7152490184335372,
      "beta": 0.43701638889984346,
      "gamma": 2.6629670788232214,
      "fairness_threshold": 0.9059738544496815,
      "delta": 0.885179423474504,
      "success": true,
      "mse": 4692.818843238288,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 1.7390022915820336,
      "beta": 3.3012260554376924,
      "gamma": -4.339826789707242,
      "fairness_threshold": 0.6939500478061873,
      "delta": 5.58770471731696,
      "success": true,
      "mse": 71320.53729416669,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 1.012767746079791,
      "beta": 1.6501461147588503,
      "gamma": 0.9739243288830614,
      "fairness_threshold": 0.10171893285568251,
      "delta": 3.1572543199179406,
      "success": true,
      "mse": 20582.178420569046,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 5.134191649097622,
      "beta": 2.822322923093643,
      "gamma": 3.276392379087685,
      "fairness_threshold": 0.8252334637834957,
      "delta": 4.209109390298401,
      "success": true,
      "mse": 231229.76251394718,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 4.721595862677286,
      "beta": 3.5279138168410755,
      "gamma": -2.243546948418358,
      "fairness_threshold": 0.018226207702212113,
      "delta": 8.113906250493242,
      "success": true,
      "mse": 237198.95426400425,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.29767337864584464,
      "beta": 4.430384886607379,
      "gamma": 7.381629170776582,
      "fairness_threshold": 0.24119134054071142,
      "delta": 6.370810196693122,
      "success": true,
      "mse": 48234.89530681443,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.4889799184468553,
      "beta": 4.756400901421643,
      "gamma": -7.012160194787877,
      "fairness_threshold": 0.8582307996178091,
      "delta": 9.147621231817178,
      "success": true,
      "mse": 61021.1466349295,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 1.6274715000323141,
      "beta": 7.90918096814789,
      "gamma": 3.0237199765813,
      "fairness_threshold": 0.8283560707056731,
      "delta": 1.364184711638878,
      "success": true,
      "mse": 216229.15476217386,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 2.8441974686635363,
      "beta": 8.035795076308952,
      "gamma": 2.0369565792240802,
      "fairness_threshold": 0.35373049660401457,
      "delta": 0.12244343410608328,
      "success": true,
      "mse": 308609.12056059483,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 1.4698284393754077,
      "beta": 7.1796637085917565,
      "gamma": 7.763422140462598,
      "fairness_threshold": 0.3490658026920453,
      "delta": 5.301651846448729,
      "success": true,
      "mse": 178324.50829250543,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 3.396607675766831,
      "beta": 2.938735335463997,
      "gamma": 1.7583103542285305,
      "fairness_threshold": 0.1216890060930532,
      "delta": 5.232668435171023,
      "success": true,
      "mse": 134973.05831922946,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 1.3984572077917965,
      "beta": 9.423238081722522,
      "gamma": -8.457008962038788,
      "fairness_threshold": 0.88613289819163,
      "delta": 1.3855384045313266,
      "success": true,
      "mse": 268368.88676327065,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.359545285717109,
      "beta": 1.8532662151471533,
      "gamma": -0.3925300383092772,
      "fairness_threshold": 0.2904144418001875,
      "delta": 2.172033530112742,
      "success": true,
      "mse": 11663.99301807304,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 7.356647693839779,
      "beta": 8.125031031448456,
      "gamma": 3.036640390870828,
      "fairness_threshold": 0.8128284463679701,
      "delta": 6.730788857036202,
      "success": true,
      "mse": 754928.5058803326,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.7048057707900373,
      "beta": 4.098419969176965,
      "gamma": -0.7486536470763994,
      "fairness_threshold": 0.5320719909741817,
      "delta": 7.034927265604397,
      "success": true,
      "mse": 53805.93672109539,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 8.111842563478424,
      "beta": 8.841711875196054,
      "gamma": -5.1508412230458775,
      "fairness_threshold": 0.14904596120988617,
      "delta": 8.212878613856091,
      "success": true,
      "mse": 918846.6648705512,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 1.4979223957393693,
      "beta": 0.5878596151695132,
      "gamma": -7.262004366151277,
      "fairness_threshold": 0.6464939554142451,
      "delta": 3.4929202970763127,
      "success": true,
      "mse": 16860.290014345024,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 2.0643365687516386,
      "beta": 1.150225962484657,
      "gamma": 3.3280411547627837,
      "fairness_threshold": 0.23227120901655413,
      "delta": 2.499058723260402,
      "success": true,
      "mse": 37913.477436607565,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 1.6955274924041788,
      "beta": 0.4465711398463969,
      "gamma": 6.18070715750389,
      "fairness_threshold": 0.9118628993100092,
      "delta": 0.27513320974150907,
      "success": true,
      "mse": 18825.645852243455,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 4.204636643638707,
      "beta": 1.8044320323829084,
      "gamma": 6.805598403453468,
      "fairness_threshold": 0.9945743847942133,
      "delta": 4.034180582998602,
      "success": true,
      "mse": 137236.52424815283,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.5418633170054182,
      "beta": 7.0337791617026415,
      "gamma": -6.965488676629927,
      "fairness_threshold": 0.9751625095996732,
      "delta": 4.212584092008459,
      "success": true,
      "mse": 124629.6743222063,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 7.941883191324502,
      "beta": 7.375643436199656,
      "gamma": -6.7479786906941275,
      "fairness_threshold": 0.22376791666572918,
      "delta": 6.99615624015726,
      "success": true,
      "mse": 777267.2018286715,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 6.866651757015496,
      "beta": 4.088603308361324,
      "gamma": 2.407014587690387,
      "fairness_threshold": 0.1837020955683858,
      "delta": 1.0430680456726371,
      "success": true,
      "mse": 437323.6792091588,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 1.6053684762580187,
      "beta": 5.613775189683775,
      "gamma": -5.516408422117583,
      "fairness_threshold": 0.6981317283354691,
      "delta": 1.4363920976875633,
      "success": true,
      "mse": 130016.31993828442,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 3.2289887790726532,
      "beta": 3.649432973264516,
      "gamma": 9.832394883502545,
      "fairness_threshold": 0.9947327323524223,
      "delta": 2.0017071400358604,
      "success": true,
      "mse": 147783.05912191258,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 6.114722708945094,
      "beta": 1.8382614711758505,
      "gamma": 4.681337648317535,
      "fairness_threshold": 0.43676314738561145,
      "delta": 7.930507636387209,
      "success": true,
      "mse": 258543.93403614467,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 2.7249546083365686,
      "beta": 3.7862450149487663,
      "gamma": -3.0427194065514547,
      "fairness_threshold": 0.6328107499633177,
      "delta": 4.979475665893678,
      "success": true,
      "mse": 126838.09252527243,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.909766119002317,
      "beta": 0.7291465689229616,
      "gamma": -4.602484029003385,
      "fairness_threshold": 0.5636946689379413,
      "delta": 6.298825827308702,
      "success": true,
      "mse": 9101.50429297505,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 3.8136996687874736,
      "beta": 7.689481952890721,
      "gamma": 6.267073682434703,
      "fairness_threshold": 0.15665945291623987,
      "delta": 6.508959906714904,
      "success": true,
      "mse": 368746.2923575065,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 2.725768219264823,
      "beta": 4.556343429785749,
      "gamma": 4.389196232250931,
      "fairness_threshold": 0.5337784950752417,
      "delta": 7.486105684369696,
      "success": true,
      "mse": 153393.65173606348,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 6.962971518648779,
      "beta": 4.634316505265979,
      "gamma": 0.5534101767417186,
      "fairness_threshold": 0.7675260129630841,
      "delta": 4.855257374213156,
      "success": true,
      "mse": 473756.88696744357,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 5.548833453327913,
      "beta": 2.3920916905689746,
      "gamma": -0.43213495875783015,
      "fairness_threshold": 0.15498880780647165,
      "delta": 6.742966831923856,
      "success": true,
      "mse": 244128.22783664826,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 5.3063079582529955,
      "beta": 1.18824799341993,
      "gamma": -3.660555517528612,
      "fairness_threshold": 0.08208294217951641,
      "delta": 7.056708518722217,
      "success": true,
      "mse": 181610.50346010324,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 4.669652915158161,
      "beta": 0.9365352629966692,
      "gamma": -6.2485381004189415,
      "fairness_threshold": 0.640291876170646,
      "delta": 3.4951599193475977,
      "success": true,
      "mse": 134970.7938698727,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 0.3269311299117052,
      "beta": 2.0642374913534356,
      "gamma": -7.021015608439728,
      "fairness_threshold": 0.9581247338883241,
      "delta": 7.3813215242145755,
      "success": true,
      "mse": 13152.044616533598,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 1.9973770460807798,
      "beta": 8.068744512925536,
      "gamma": 5.191218725372021,
      "fairness_threshold": 0.6802216932184418,
      "delta": 3.50403850106098,
      "success": true,
      "mse": 248491.4194319366,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 3.6097148205983296,
      "beta": 5.078185735541304,
      "gamma": 2.928673035225814,
      "fairness_threshold": 0.916794528071191,
      "delta": 5.4896275538735315,
      "success": true,
      "mse": 224907.07103423873,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 1.6484258172674202,
      "beta": 3.3915063630856186,
      "gamma": -6.396877232442432,
      "fairness_threshold": 0.5261350583124034,
      "delta": 2.1803004136008557,
      "success": true,
      "mse": 70270.79756125217,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 6.0230130050994815,
      "beta": 2.9538413240937222,
      "gamma": 6.704857089816706,
      "fairness_threshold": 0.49413297016302854,
      "delta": 1.2100184096973872,
      "success": true,
      "mse": 302423.8336631164,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 5.760939291361893,
      "beta": 4.383560753315787,
      "gamma": -8.34415911772806,
      "fairness_threshold": 0.21678991016991078,
      "delta": 5.986541382694541,
      "success": true,
      "mse": 355723.4571733181,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    },
    {
      "alpha": 6.73594164462463,
      "beta": 1.118427355965069,
      "gamma": 3.338701683844,
      "fairness_threshold": 0.5470031285407123,
      "delta": 2.4219758273154244,
      "success": true,
      "mse": 270842.558265345,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "numerical",
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 51
    }
  ],
  "recovery_warnings": [
    "Error in iteration 37: Error in parameter fitting: All optimization attempts failed. Errors: []",
    "Error in iteration 40: Error in parameter fitting: All optimization attempts failed. Errors: []"
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.3636528989842728,
        "p": 0.0002326467917949546
      },
      "beta": {
        "r": 0.09839237079779858,
        "p": 0.3351067465550766
      },
      "gamma": {
        "r": 0.043592996416577816,
        "p": 0.6699516709260224
      },
      "fairness_threshold": {
        "r": 0.08365653180421312,
        "p": 0.41280432832336555
      },
      "delta": {
        "r": -0.11961475581384477,
        "p": 0.24073563821007657
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 751.0258927849446,
  "bic_Control": 742.0897450541394,
  "bic_Cocaine": 759.0311917937911,
  "bic_results": {
    "average_bic": 751.0258927849446,
    "individual_bics": [
      755.1248586571108,
      724.7182953300168,
      783.0534108726148,
      834.584009579633,
      691.068073771335,
      643.9295208032629,
      705.0665456705873,
      713.3144252792823,
      669.0220795509975,
      801.5964255065452,
      853.8399940578273,
      805.0383285934859,
      690.5951240134643,
      552.6024020286002,
      783.1258758186973,
      645.5022642065226,
      768.1661434967393,
      807.8278791926921,
      500.2427281358227,
      836.9630447974577,
      794.374688914131,
      824.4474608842883,
      717.6162875727995,
      775.1436491933513,
      829.536847936128,
      840.6154244444017,
      761.1179467222639,
      655.9458200490782,
      856.0724736434835,
      775.6867520002614,
      719.3301227141212,
      735.8071977726521,
      839.8936044006972,
      786.1214250019266,
      780.3150220505274,
      722.283711388667,
      725.8625334081174,
      658.5871940783495,
      745.4139221545068,
      757.7417905355965,
      742.0650076809072,
      562.3824499011257,
      738.1162755179154,
      797.5446677201737,
      800.7224112444114,
      824.2711625155421,
      704.798701479169,
      664.0269075630874,
      822.2960172423731,
      618.1154773301997,
      595.534082942361,
      734.3127784319192,
      670.9320821619133,
      794.3003825931875,
      795.6002399593373,
      714.366596913648,
      726.3586217610757,
      790.8796538757105,
      809.0222279791197,
      781.0502312890386,
      766.8452124949225,
      801.8968641172097,
      641.9682131891867,
      854.6441533575048,
      719.9409520404229,
      864.6654599598965,
      660.7593966198931,
      702.0870171358195,
      666.3826019257821,
      767.6933782494203,
      762.7790612471435,
      856.1313709763726,
      826.800731664861,
      764.937036787308,
      771.4693922432439,
      799.9947252703793,
      763.6748597459606,
      629.3168028244415,
      818.1019292805556,
      773.369760500357,
      830.8817867432836,
      797.0687519484896,
      781.9814572280839,
      766.8443568583427,
      648.0918165434921,
      797.9722018686579,
      792.886430041028,
      733.5565498483546,
      807.989680045969,
      816.2682125663376,
      802.3647997769872
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        755.1248586571108,
        724.7182953300168,
        783.0534108726148,
        834.584009579633,
        691.068073771335,
        643.9295208032629,
        705.0665456705873,
        713.3144252792823,
        669.0220795509975,
        801.5964255065452,
        853.8399940578273,
        805.0383285934859,
        690.5951240134643,
        552.6024020286002,
        783.1258758186973,
        645.5022642065226,
        768.1661434967393,
        807.8278791926921,
        500.2427281358227,
        836.9630447974577,
        794.374688914131,
        824.4474608842883,
        717.6162875727995,
        775.1436491933513,
        829.536847936128,
        840.6154244444017,
        761.1179467222639,
        655.9458200490782,
        856.0724736434835,
        775.6867520002614,
        719.3301227141212,
        735.8071977726521,
        839.8936044006972,
        786.1214250019266,
        780.3150220505274,
        722.283711388667,
        725.8625334081174,
        658.5871940783495,
        745.4139221545068,
        757.7417905355965,
        742.0650076809072,
        562.3824499011257,
        738.1162755179154
      ],
      "Cocaine": [
        797.5446677201737,
        800.7224112444114,
        824.2711625155421,
        704.798701479169,
        664.0269075630874,
        822.2960172423731,
        618.1154773301997,
        595.534082942361,
        734.3127784319192,
        670.9320821619133,
        794.3003825931875,
        795.6002399593373,
        714.366596913648,
        726.3586217610757,
        790.8796538757105,
        809.0222279791197,
        781.0502312890386,
        766.8452124949225,
        801.8968641172097,
        641.9682131891867,
        854.6441533575048,
        719.9409520404229,
        864.6654599598965,
        660.7593966198931,
        702.0870171358195,
        666.3826019257821,
        767.6933782494203,
        762.7790612471435,
        856.1313709763726,
        826.800731664861,
        764.937036787308,
        771.4693922432439,
        799.9947252703793,
        763.6748597459606,
        629.3168028244415,
        818.1019292805556,
        773.369760500357,
        830.8817867432836,
        797.0687519484896,
        781.9814572280839,
        766.8443568583427,
        648.0918165434921,
        797.9722018686579,
        792.886430041028,
        733.5565498483546,
        807.989680045969,
        816.2682125663376,
        802.3647997769872
      ]
    },
    "num_parameters": 5,
    "prediction_type": "numerical",
    "bic_formula": "BIC calculated from MSE using Gaussian error assumption"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.364\n- beta: r = 0.098\n- gamma: r = 0.044\n- fairness_threshold: r = 0.084\n- delta: r = -0.120",
  "previous_models": [
    "Specification: U = alpha * (splitperc_opp - fairness_threshold) - beta * (splitperc_self - splitperc_opp) + gamma * contribution - delta * ((splitperc_opp - fairness_threshold < 0) * (splitperc_opp - fairness_threshold)) + noise\nSummary: This model predicts the utility of accepting an offer in the Ultimatum Game. It considers fairness (relative to a learned fairness threshold), inequity aversion, contribution, loss aversion to being treated unfairly, and random noise.  The model learns the sensitivity parameters for fairness, inequity, contribution, loss aversion, and the fairness threshold itself. Noise is fixed.\nTarget Variable: accept\nPrediction Type: numerical_variable_estimation\nBIC: 751.0258927849446\n\nParameter Recovery:\n- alpha: r = 0.364\n- beta: r = 0.098\n- gamma: r = 0.044\n- fairness_threshold: r = 0.084\n- delta: r = -0.120"
  ]
}