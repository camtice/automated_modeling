{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, let's design a computational model for the responder's acceptance decision in this ultimatum game experiment.\n\nStep-by-step reasoning:\n\n1.  **Identify the Target Behavior:** The model must predict the participant's decision to accept or reject an offer when acting as a responder. This corresponds to the `accept` variable in the dataset, specifically when `trial_role == 1`.\n2.  **Determine the Decision Mechanism:** The request specifies predicting utility for a binary choice, converted to probability via a logistic function with temperature 1. This is a standard approach where higher utility for accepting leads to a higher probability of acceptance. Rejecting is assumed to have a baseline utility of 0. Thus, we model the utility of accepting.\n3.  **Identify Key Influences on Utility:** As a responder, a participant's decision is likely driven by self-interest (how much they are offered) and fairness considerations (how fair the offer is perceived to be).\n4.  **Incorporate Self-Interest:** The participant receives `split_self` (\u00a3) or `split_perc_self` (%) if they accept. `split_perc_self` is a good candidate as it normalizes the offer relative to the total pot size (`combined_earning`), making it comparable across trials with different total amounts. Higher `split_perc_self` should increase the utility of accepting.\n5.  **Incorporate Fairness/Entitlement:** Fairness can be evaluated against different standards, such as a 50/50 split or a split proportional to contribution. The dataset includes `token_self` and `token_opp`, which reflect contributions. A participant might feel more entitled to a larger share if they contributed more. This suggests incorporating the participant's contribution proportion (`token_self / (token_self + token_opp)`) into the fairness evaluation.\n6.  **Structure the Utility Function:** A common approach is a linear combination of relevant factors. Let's combine the self-interest (offered percentage) and the fairness based on contribution.\n    *   Simple linear model: `U = w_1 * split_perc_self + w_2 * token_self_proportion`. This captures that utility increases with offer (`w_1 > 0`) and potentially decreases if self-contribution is high for a given offer (`w_2 < 0`), reflecting entitlement. This model has two parameters and an implicit intercept (could add `beta0`).\n    *   Deviation from Fairness Model: An alternative is to model utility based on the deviation of the offer from a perceived fair share. A plausible fair share, based on contribution, is `combined_earning * (token_self / (token_self + token_opp))` in absolute terms, or `100 * (token_self / (token_self + token_opp))` as a percentage. Let's use the percentage: `perc_fair_prop = 100 * token_self / (token_self + token_opp)`. The deviation is `split_perc_self - perc_fair_prop`. Utility could be `U = beta_0 + beta_dev * (split_perc_self - perc_fair_prop)`. This form directly captures sensitivity to the difference between the offered percentage and the contribution-based percentage. If `beta_dev > 0`, offers above the proportional share increase utility relative to offers below it. This model has two learnable parameters: a baseline `beta_0` and a deviation sensitivity `beta_dev`.\n7.  **Choose Model Parsimony and Parameter Recovery:** The deviation model `U = beta_0 + beta_dev * (split_perc_self - perc_fair_prop)` is more parsimonious (2 learnable parameters) than the simple linear model with an intercept (3 learnable parameters). Furthermore, by linking the weight on `split_perc_self` and `perc_fair_prop` via `beta_dev`, it is less susceptible to multicollinearity issues if `split_perc_self` and `perc_fair_prop` are correlated in the data, which helps parameter recovery. This model aligns well with the requirement to prioritize parameter recovery and use fewer parameters.\n8.  **Map Variables to Data:**\n    *   `split_perc_self` is directly available.\n    *   `perc_fair_prop = 100 * token_self / (token_self + token_opp)`. This requires `token_self` and `token_opp` from the data. We need to handle the case `token_self + token_opp = 0`, although based on the task description, it implies contributions are positive for tokens to be found. Assuming `token_self + token_opp > 0` for trials where offers are made (implied by `combined_earning > 0`).\n    *   `beta_0`, `beta_dev` are learnable parameters.\n    *   `U` is the calculated utility.\n9.  **Specify Parameter Bounds:** Learnable parameters `beta_0` and `beta_dev` need generous finite bounds. Given the components of the utility function are percentages (0-100) and their difference (-100 to 100), values for the weights around [-10, 10] seem reasonable to allow for significant impact on utility within the logistic function's active range, while being generous.\n10. **Format Output:** Structure the model, variables, target variable, and summary according to the specified tags and JSON format. Ensure all variables used in the model formula are described, and variables used for calculation are linked back to data sources.\n\nThis thought process leads to the specified model structure, variable list, and descriptions.\n\n```\n<MODEL>\nutility_accept = beta_0 + beta_deviation_sensitivity * (split_percentage_self - 100 * token_self_proportion)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility_accept\": {\n      \"description\": \"Calculated utility of accepting the proposed offer relative to rejecting (utility of rejecting assumed 0).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_0\": {\n      \"description\": \"Baseline utility parameter, representing a general bias towards accepting or rejecting independent of the offer or contribution fairness.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_deviation_sensitivity\": {\n      \"description\": \"Sensitivity parameter controlling the influence of the deviation between the offered percentage and the participant's proportional contribution percentage. A positive value implies greater utility for offers exceeding the proportional share.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_percentage_self\": {\n      \"description\": \"The proposed share for the participant, expressed as a percentage of the combined earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self_proportion\": {\n      \"description\": \"Participant's proportion of the total tokens found by both players (token_self / (token_self + token_opp)). Assumes token_self + token_opp > 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant. Used as source data for calculating token_self_proportion.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent. Used as source data for calculating token_self_proportion.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model predicting responder acceptance based on self-interest and contribution-based fairness. Utility to accept is a linear function of a baseline parameter (beta_0) and a term capturing the deviation of the proposed percentage from the participant's proportional contribution percentage, scaled by a sensitivity parameter (beta_deviation_sensitivity). Utility is converted to acceptance probability via a logistic function (temperature 1). The model uses two learnable parameters with generous finite bounds [-10, 10].\n</SUMMARY>\n```"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_0', 'beta_deviation_sensitivity']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                utility_accept = beta_0 + beta_deviation_sensitivity * (split_percentage_self - 100 * token_self_proportion)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"utility_accept\": {\n      \"description\": \"Calculated utility of accepting the proposed offer relative to rejecting (utility of rejecting assumed 0).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_0\": {\n      \"description\": \"Baseline utility parameter, representing a general bias towards accepting or rejecting independent of the offer or contribution fairness.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_deviation_sensitivity\": {\n      \"description\": \"Sensitivity parameter controlling the influence of the deviation between the offered percentage and the participant's proportional contribution percentage. A positive value implies greater utility for offers exceeding the proportional share.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_percentage_self\": {\n      \"description\": \"The proposed share for the participant, expressed as a percentage of the combined earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self_proportion\": {\n      \"description\": \"Participant's proportion of the total tokens found by both players (token_self / (token_self + token_opp)). Assumes token_self + token_opp > 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant. Used as source data for calculating token_self_proportion.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent. Used as source data for calculating token_self_proportion.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_0=0.0, beta_deviation_sensitivity=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_percentage_self = trial.get(\"splitperc_self\", 0)\n\n        # Calculate token_self_proportion, handling the case where token_self + token_opp = 0\n        if (token_self + token_opp) > 0:\n            token_self_proportion = token_self / (token_self + token_opp)\n        else:\n            token_self_proportion = 0.5  # Assign a neutral value if no tokens found\n\n        # Calculate utility\n        utility_accept = beta_0 + beta_deviation_sensitivity * (split_percentage_self - 100 * token_self_proportion)\n\n        model_predictions.append(utility_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\":1, \"group\":\"control\", \"trial_number\":1, \"trial_type\":1, \"trial_role\":1, \"token_opp\":6, \"token_self\":6, \"combined_earning\":24, \"split_opp\":12.0, \"split_self\":12.0, \"splitperc_opp\":50, \"splitperc_self\":50, \"accept\":1.0, \"accepted_amount\":12.0, \"accepted_perc\":50.0, \"proposed_perc\":50.0, \"proposed_amount\":12.0}, {\"ID\":2, \"group\":\"control\", \"trial_number\":2, \"trial_type\":1, \"trial_role\":1, \"token_opp\":6, \"token_self\":6, \"combined_earning\":24, \"split_opp\":18.0, \"split_self\":6.0, \"splitperc_opp\":75, \"splitperc_self\":25, \"accept\":0.0, \"accepted_amount\":0.0, \"accepted_perc\":0.0, \"proposed_perc\":25.0, \"proposed_amount\":6.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1746022814.0972219
    }
  ],
  "learnable_parameters": {
    "beta_0": {
      "description": "Baseline utility parameter, representing a general bias towards accepting or rejecting independent of the offer or contribution fairness.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_deviation_sensitivity": {
      "description": "Sensitivity parameter controlling the influence of the deviation between the offered percentage and the participant's proportional contribution percentage. A positive value implies greater utility for offers exceeding the proportional share.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "utility_accept = beta_0 + beta_deviation_sensitivity * (split_percentage_self - 100 * token_self_proportion)",
  "variable_descriptions": {
    "utility_accept": {
      "description": "Calculated utility of accepting the proposed offer relative to rejecting (utility of rejecting assumed 0).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_0": {
      "description": "Baseline utility parameter, representing a general bias towards accepting or rejecting independent of the offer or contribution fairness.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_deviation_sensitivity": {
      "description": "Sensitivity parameter controlling the influence of the deviation between the offered percentage and the participant's proportional contribution percentage. A positive value implies greater utility for offers exceeding the proportional share.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_percentage_self": {
      "description": "The proposed share for the participant, expressed as a percentage of the combined earning.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self_proportion": {
      "description": "Participant's proportion of the total tokens found by both players (token_self / (token_self + token_opp)). Assumes token_self + token_opp > 0.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "token_self": {
      "description": "Number of tokens found by the participant. Used as source data for calculating token_self_proportion.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent. Used as source data for calculating token_self_proportion.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A utility model predicting responder acceptance based on self-interest and contribution-based fairness. Utility to accept is a linear function of a baseline parameter (beta_0) and a term capturing the deviation of the proposed percentage from the participant's proportional contribution percentage, scaled by a sensitivity parameter (beta_deviation_sensitivity). Utility is converted to acceptance probability via a logistic function (temperature 1). The model uses two learnable parameters with generous finite bounds [-10, 10].",
  "target_variable": "accept",
  "full_reasoning": "Okay, let's design a computational model for the responder's acceptance decision in this ultimatum game experiment.\n\nStep-by-step reasoning:\n\n1.  **Identify the Target Behavior:** The model must predict the participant's decision to accept or reject an offer when acting as a responder. This corresponds to the `accept` variable in the dataset, specifically when `trial_role == 1`.\n2.  **Determine the Decision Mechanism:** The request specifies predicting utility for a binary choice, converted to probability via a logistic function with temperature 1. This is a standard approach where higher utility for accepting leads to a higher probability of acceptance. Rejecting is assumed to have a baseline utility of 0. Thus, we model the utility of accepting.\n3.  **Identify Key Influences on Utility:** As a responder, a participant's decision is likely driven by self-interest (how much they are offered) and fairness considerations (how fair the offer is perceived to be).\n4.  **Incorporate Self-Interest:** The participant receives `split_self` (\u00a3) or `split_perc_self` (%) if they accept. `split_perc_self` is a good candidate as it normalizes the offer relative to the total pot size (`combined_earning`), making it comparable across trials with different total amounts. Higher `split_perc_self` should increase the utility of accepting.\n5.  **Incorporate Fairness/Entitlement:** Fairness can be evaluated against different standards, such as a 50/50 split or a split proportional to contribution. The dataset includes `token_self` and `token_opp`, which reflect contributions. A participant might feel more entitled to a larger share if they contributed more. This suggests incorporating the participant's contribution proportion (`token_self / (token_self + token_opp)`) into the fairness evaluation.\n6.  **Structure the Utility Function:** A common approach is a linear combination of relevant factors. Let's combine the self-interest (offered percentage) and the fairness based on contribution.\n    *   Simple linear model: `U = w_1 * split_perc_self + w_2 * token_self_proportion`. This captures that utility increases with offer (`w_1 > 0`) and potentially decreases if self-contribution is high for a given offer (`w_2 < 0`), reflecting entitlement. This model has two parameters and an implicit intercept (could add `beta0`).\n    *   Deviation from Fairness Model: An alternative is to model utility based on the deviation of the offer from a perceived fair share. A plausible fair share, based on contribution, is `combined_earning * (token_self / (token_self + token_opp))` in absolute terms, or `100 * (token_self / (token_self + token_opp))` as a percentage. Let's use the percentage: `perc_fair_prop = 100 * token_self / (token_self + token_opp)`. The deviation is `split_perc_self - perc_fair_prop`. Utility could be `U = beta_0 + beta_dev * (split_perc_self - perc_fair_prop)`. This form directly captures sensitivity to the difference between the offered percentage and the contribution-based percentage. If `beta_dev > 0`, offers above the proportional share increase utility relative to offers below it. This model has two learnable parameters: a baseline `beta_0` and a deviation sensitivity `beta_dev`.\n7.  **Choose Model Parsimony and Parameter Recovery:** The deviation model `U = beta_0 + beta_dev * (split_perc_self - perc_fair_prop)` is more parsimonious (2 learnable parameters) than the simple linear model with an intercept (3 learnable parameters). Furthermore, by linking the weight on `split_perc_self` and `perc_fair_prop` via `beta_dev`, it is less susceptible to multicollinearity issues if `split_perc_self` and `perc_fair_prop` are correlated in the data, which helps parameter recovery. This model aligns well with the requirement to prioritize parameter recovery and use fewer parameters.\n8.  **Map Variables to Data:**\n    *   `split_perc_self` is directly available.\n    *   `perc_fair_prop = 100 * token_self / (token_self + token_opp)`. This requires `token_self` and `token_opp` from the data. We need to handle the case `token_self + token_opp = 0`, although based on the task description, it implies contributions are positive for tokens to be found. Assuming `token_self + token_opp > 0` for trials where offers are made (implied by `combined_earning > 0`).\n    *   `beta_0`, `beta_dev` are learnable parameters.\n    *   `U` is the calculated utility.\n9.  **Specify Parameter Bounds:** Learnable parameters `beta_0` and `beta_dev` need generous finite bounds. Given the components of the utility function are percentages (0-100) and their difference (-100 to 100), values for the weights around [-10, 10] seem reasonable to allow for significant impact on utility within the logistic function's active range, while being generous.\n10. **Format Output:** Structure the model, variables, target variable, and summary according to the specified tags and JSON format. Ensure all variables used in the model formula are described, and variables used for calculation are linked back to data sources.\n\nThis thought process leads to the specified model structure, variable list, and descriptions.\n\n```\n<MODEL>\nutility_accept = beta_0 + beta_deviation_sensitivity * (split_percentage_self - 100 * token_self_proportion)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility_accept\": {\n      \"description\": \"Calculated utility of accepting the proposed offer relative to rejecting (utility of rejecting assumed 0).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_0\": {\n      \"description\": \"Baseline utility parameter, representing a general bias towards accepting or rejecting independent of the offer or contribution fairness.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_deviation_sensitivity\": {\n      \"description\": \"Sensitivity parameter controlling the influence of the deviation between the offered percentage and the participant's proportional contribution percentage. A positive value implies greater utility for offers exceeding the proportional share.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_percentage_self\": {\n      \"description\": \"The proposed share for the participant, expressed as a percentage of the combined earning.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self_proportion\": {\n      \"description\": \"Participant's proportion of the total tokens found by both players (token_self / (token_self + token_opp)). Assumes token_self + token_opp > 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant. Used as source data for calculating token_self_proportion.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent. Used as source data for calculating token_self_proportion.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model predicting responder acceptance based on self-interest and contribution-based fairness. Utility to accept is a linear function of a baseline parameter (beta_0) and a term capturing the deviation of the proposed percentage from the participant's proportional contribution percentage, scaled by a sensitivity parameter (beta_deviation_sensitivity). Utility is converted to acceptance probability via a logistic function (temperature 1). The model uses two learnable parameters with generous finite bounds [-10, 10].\n</SUMMARY>\n```",
  "prediction_type": "utility",
  "current_model": "Specification: utility_accept = beta_0 + beta_deviation_sensitivity * (split_percentage_self - 100 * token_self_proportion)\nSummary: A utility model predicting responder acceptance based on self-interest and contribution-based fairness. Utility to accept is a linear function of a baseline parameter (beta_0) and a term capturing the deviation of the proposed percentage from the participant's proportional contribution percentage, scaled by a sensitivity parameter (beta_deviation_sensitivity). Utility is converted to acceptance probability via a logistic function (temperature 1). The model uses two learnable parameters with generous finite bounds [-10, 10].\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_0=0.0, beta_deviation_sensitivity=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_percentage_self = trial.get(\"splitperc_self\", 0)\n\n        # Calculate token_self_proportion, handling the case where token_self + token_opp = 0\n        if (token_self + token_opp) > 0:\n            token_self_proportion = token_self / (token_self + token_opp)\n        else:\n            token_self_proportion = 0.5  # Assign a neutral value if no tokens found\n\n        # Calculate utility\n        utility_accept = beta_0 + beta_deviation_sensitivity * (split_percentage_self - 100 * token_self_proportion)\n\n        model_predictions.append(utility_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7783882783882783,
  "group_accuracies": {
    "Control": 0.8339793281653747,
    "Cocaine": 0.7285879629629629
  },
  "group_parameter_averages": {
    "Control": {
      "beta_0": 5.480657435416834,
      "beta_deviation_sensitivity": 0.3225300881203212
    },
    "Cocaine": {
      "beta_0": 2.543760077030626,
      "beta_deviation_sensitivity": 0.3721670782457964
    }
  },
  "fitting_results": [
    {
      "beta_0": 2.0507115405968602e-07,
      "beta_deviation_sensitivity": 8.86393600663268,
      "success": true,
      "log_likelihood": -47.437996217401086,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 2.38828785777338,
      "beta_deviation_sensitivity": 0.11877837974287908,
      "success": true,
      "log_likelihood": -17.130826495526467,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 7.445287430502966,
      "beta_deviation_sensitivity": 0.3498739314912681,
      "success": true,
      "log_likelihood": -7.80543746230619,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 2.0690927076727266,
      "beta_deviation_sensitivity": 0.13135843806807898,
      "success": true,
      "log_likelihood": -15.926373627969376,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 10.0,
      "beta_deviation_sensitivity": 0.5622288832975639,
      "success": true,
      "log_likelihood": -5.008989312226147,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 3.7722464267866203,
      "beta_deviation_sensitivity": 0.13794617203566586,
      "success": true,
      "log_likelihood": -14.923937507327778,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 10.0,
      "beta_deviation_sensitivity": -0.08889520866745057,
      "success": true,
      "log_likelihood": -0.0006919762767592861,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 4.316787980833624,
      "beta_deviation_sensitivity": 0.15077207200306914,
      "success": true,
      "log_likelihood": -13.77183518450256,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 10.0,
      "beta_deviation_sensitivity": -0.08882863542312547,
      "success": true,
      "log_likelihood": -0.000691976630030966,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 3.363621333377519,
      "beta_deviation_sensitivity": 0.22414717839263584,
      "success": true,
      "log_likelihood": -10.913739547739278,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 8.451971582612963,
      "beta_deviation_sensitivity": 0.47553016003983384,
      "success": true,
      "log_likelihood": -5.8688369533833535,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": -0.717383657696811,
      "beta_deviation_sensitivity": 0.12104815747185954,
      "success": true,
      "log_likelihood": -8.759947827591427,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 3.4765297678195966,
      "beta_deviation_sensitivity": 0.2137043043512287,
      "success": true,
      "log_likelihood": -11.503835380353625,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 10.0,
      "beta_deviation_sensitivity": -0.08888887029311517,
      "success": true,
      "log_likelihood": -0.0006919762851487321,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 10.0,
      "beta_deviation_sensitivity": -0.08889724561201591,
      "success": true,
      "log_likelihood": -0.0006919762751903049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 10.0,
      "beta_deviation_sensitivity": -7.26915748327452,
      "success": true,
      "log_likelihood": -46.051792456318935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 10.0,
      "beta_deviation_sensitivity": -0.08889742105961175,
      "success": true,
      "log_likelihood": -0.0006919762750820208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 6.960043431970889,
      "beta_deviation_sensitivity": 0.1716487786022226,
      "success": true,
      "log_likelihood": -8.453144975714254,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 10.0,
      "beta_deviation_sensitivity": 0.24282884485955836,
      "success": true,
      "log_likelihood": -5.118099164469577,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 10.0,
      "beta_deviation_sensitivity": -0.08889183102584956,
      "success": true,
      "log_likelihood": -0.000691976280568751,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 3.8985664022346014,
      "beta_deviation_sensitivity": 0.17125080812080284,
      "success": true,
      "log_likelihood": -13.624651440406383,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 6.155920867738338,
      "beta_deviation_sensitivity": 0.14862199692534675,
      "success": true,
      "log_likelihood": -9.251176699603231,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 9.999999999999998,
      "beta_deviation_sensitivity": 10.0,
      "success": true,
      "log_likelihood": -207.23274916470973,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 2.061980821163487,
      "beta_deviation_sensitivity": 0.09473173483767913,
      "success": true,
      "log_likelihood": -18.981322533343594,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 4.03245452016479,
      "beta_deviation_sensitivity": 0.20069543292588685,
      "success": true,
      "log_likelihood": -12.291892203120367,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 3.9577047163879113,
      "beta_deviation_sensitivity": 0.16376770845132999,
      "success": true,
      "log_likelihood": -13.882515768403177,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 2.6989308683854225,
      "beta_deviation_sensitivity": 0.1166559955724932,
      "success": true,
      "log_likelihood": -17.143404516710262,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 3.646485665833579,
      "beta_deviation_sensitivity": 0.36485915189167534,
      "success": true,
      "log_likelihood": -6.299207453712252,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 10.0,
      "beta_deviation_sensitivity": -10.0,
      "success": true,
      "log_likelihood": -138.15519637444126,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 3.930928083633146,
      "beta_deviation_sensitivity": 0.1050160519319477,
      "success": true,
      "log_likelihood": -14.184645679018987,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 10.0,
      "beta_deviation_sensitivity": -0.08890362162300806,
      "success": true,
      "log_likelihood": -0.0006919762738277042,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": -8.015567750753923e-05,
      "beta_deviation_sensitivity": 4.947260335345609,
      "success": true,
      "log_likelihood": -47.437949728516685,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 7.375388695316045e-05,
      "beta_deviation_sensitivity": 9.999818076315737,
      "success": true,
      "log_likelihood": -277.69647211463024,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 1.7177909105769127,
      "beta_deviation_sensitivity": 0.12182095512537558,
      "success": true,
      "log_likelihood": -16.340695614757426,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 10.0,
      "beta_deviation_sensitivity": -0.08890326463306757,
      "success": true,
      "log_likelihood": -0.000691976273761847,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 2.532769251306782,
      "beta_deviation_sensitivity": 0.08750499555008505,
      "success": true,
      "log_likelihood": -18.589364712500632,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 5.597063123395237,
      "beta_deviation_sensitivity": 0.18915300306910235,
      "success": true,
      "log_likelihood": -11.396040978425312,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 3.2200874550311167,
      "beta_deviation_sensitivity": 0.1602103532123584,
      "success": true,
      "log_likelihood": -14.378135179607765,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 2.9363462391941044,
      "beta_deviation_sensitivity": 0.09705390367249167,
      "success": true,
      "log_likelihood": -17.396586187140368,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 4.514576716122547,
      "beta_deviation_sensitivity": 0.07891214662702027,
      "success": true,
      "log_likelihood": -8.830178869925717,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 2.3218056754431915,
      "beta_deviation_sensitivity": 0.08529754064174207,
      "success": true,
      "log_likelihood": -19.143839620896024,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 0.9183797413786257,
      "beta_deviation_sensitivity": 0.16614290368972323,
      "success": true,
      "log_likelihood": -10.987906400548873,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 10.0,
      "beta_deviation_sensitivity": -7.213517030109376,
      "success": true,
      "log_likelihood": -69.07764329745726,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_0": 1.9789034489588855,
      "beta_deviation_sensitivity": 0.08362916978653835,
      "success": true,
      "log_likelihood": -19.78156450523534,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 3.357914110944422,
      "beta_deviation_sensitivity": 0.12921253990585488,
      "success": true,
      "log_likelihood": -15.814356573266199,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 2.3086340156915006,
      "beta_deviation_sensitivity": 0.059257091766547115,
      "success": true,
      "log_likelihood": -18.877093436430147,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 2.022172354957217,
      "beta_deviation_sensitivity": 0.09283149911241792,
      "success": true,
      "log_likelihood": -19.13761860560366,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 1.0266611178931695,
      "beta_deviation_sensitivity": 0.08060620736630389,
      "success": true,
      "log_likelihood": -19.485436961295626,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 3.800039666460087,
      "beta_deviation_sensitivity": 0.23277423727696958,
      "success": true,
      "log_likelihood": -10.760776442617768,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 0.6412141652778355,
      "beta_deviation_sensitivity": 0.026251618999623912,
      "success": true,
      "log_likelihood": -24.209363041482003,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 2.1213809465145883,
      "beta_deviation_sensitivity": 0.05794844027442835,
      "success": true,
      "log_likelihood": -19.723806339633168,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": -1.0082360889349035e-05,
      "beta_deviation_sensitivity": 4.247867627444137,
      "success": true,
      "log_likelihood": -93.48468720602723,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 1.5508164527122255,
      "beta_deviation_sensitivity": 0.07028567631869878,
      "success": true,
      "log_likelihood": -21.02770460300796,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 0.8913432987757098,
      "beta_deviation_sensitivity": 0.027020412083831734,
      "success": true,
      "log_likelihood": -23.743444178691238,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 1.8691890694905007,
      "beta_deviation_sensitivity": 0.13104482555208194,
      "success": true,
      "log_likelihood": -15.709015685801642,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 4.88866683248835,
      "beta_deviation_sensitivity": 0.38184427766315066,
      "success": true,
      "log_likelihood": -6.485186863344345,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 1.5965394196687608,
      "beta_deviation_sensitivity": 0.17736957731151715,
      "success": true,
      "log_likelihood": -11.62435322206988,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 1.352832658736963,
      "beta_deviation_sensitivity": -0.045448190648744335,
      "success": true,
      "log_likelihood": -11.742822394308106,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": -0.8087061202677713,
      "beta_deviation_sensitivity": 0.10625031411522795,
      "success": true,
      "log_likelihood": -9.32695419553556,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 2.7480499599339003,
      "beta_deviation_sensitivity": 0.05596211643912723,
      "success": true,
      "log_likelihood": -16.02165902096943,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 1.7982815984238072,
      "beta_deviation_sensitivity": 0.06257530553184829,
      "success": true,
      "log_likelihood": -20.978819164262077,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 2.6823594957776447,
      "beta_deviation_sensitivity": 0.13341867496369614,
      "success": true,
      "log_likelihood": -16.08199294889207,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 4.154363867831792e-07,
      "beta_deviation_sensitivity": 8.922185856093677,
      "success": true,
      "log_likelihood": -47.43799621740109,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 1.0646487080393345,
      "beta_deviation_sensitivity": 0.06662813299621356,
      "success": true,
      "log_likelihood": -21.181022882250968,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 0.7455116538688136,
      "beta_deviation_sensitivity": 0.14839157040928302,
      "success": true,
      "log_likelihood": -11.772620938822202,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 2.5891055415709414,
      "beta_deviation_sensitivity": 0.11163609885815244,
      "success": true,
      "log_likelihood": -17.523797606663827,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 4.37478998083439,
      "beta_deviation_sensitivity": 0.07456505997575348,
      "success": true,
      "log_likelihood": -8.958043609971766,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 10.0,
      "beta_deviation_sensitivity": -10.0,
      "success": true,
      "log_likelihood": -161.1810473044816,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 2.0155316322207,
      "beta_deviation_sensitivity": 0.08531766371545037,
      "success": true,
      "log_likelihood": -19.640780515756575,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 4.117685064868306,
      "beta_deviation_sensitivity": 0.06639404288395553,
      "success": true,
      "log_likelihood": -9.192775802757717,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 10.0,
      "beta_deviation_sensitivity": 10.0,
      "success": true,
      "log_likelihood": -9.07943454835172e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": -0.7957981047065015,
      "beta_deviation_sensitivity": 0.07044791312525338,
      "success": true,
      "log_likelihood": -12.422830656268177,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 2.373685690456896,
      "beta_deviation_sensitivity": 0.10959758519115148,
      "success": true,
      "log_likelihood": -17.792291640272946,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 2.8390665114688116,
      "beta_deviation_sensitivity": 0.06639506244999284,
      "success": true,
      "log_likelihood": -16.57108001804526,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 0.6486147481569805,
      "beta_deviation_sensitivity": 0.0323781837871308,
      "success": true,
      "log_likelihood": -23.926682984065668,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 3.023113224128196,
      "beta_deviation_sensitivity": 0.09356025306121514,
      "success": true,
      "log_likelihood": -17.11701282460474,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 7.608810000291616,
      "beta_deviation_sensitivity": 0.15038381416947424,
      "success": true,
      "log_likelihood": -5.270868077176944,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": -2.4364352981720234,
      "beta_deviation_sensitivity": 0.02246067215010119,
      "success": true,
      "log_likelihood": -7.6118379491412504,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 1.128303232419294,
      "beta_deviation_sensitivity": 0.03245032236593009,
      "success": true,
      "log_likelihood": -23.08173140047123,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": -1.1476751201665991,
      "beta_deviation_sensitivity": 0.12103679719751975,
      "success": true,
      "log_likelihood": -7.230308462333998,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 0.807594964299669,
      "beta_deviation_sensitivity": 0.03438891402041225,
      "success": true,
      "log_likelihood": -23.755220893688495,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 10.0,
      "beta_deviation_sensitivity": -7.877971939620174,
      "success": true,
      "log_likelihood": -115.12934322053825,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": -1.1784132517255044e-06,
      "beta_deviation_sensitivity": 8.698451989640727,
      "success": true,
      "log_likelihood": -116.51554900623019,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 2.6188024469844113,
      "beta_deviation_sensitivity": 0.13025383590733544,
      "success": true,
      "log_likelihood": -16.301701458607244,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 1.1493708163061283,
      "beta_deviation_sensitivity": 0.03342356976598447,
      "success": true,
      "log_likelihood": -23.026838989915156,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 2.2389028753451102e-07,
      "beta_deviation_sensitivity": 8.697825572322188,
      "success": true,
      "log_likelihood": -24.412145287360886,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 10.0,
      "beta_deviation_sensitivity": -8.583076735534762,
      "success": true,
      "log_likelihood": -299.33615288469343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 0.3585144115395642,
      "beta_deviation_sensitivity": 0.11130563390022612,
      "success": true,
      "log_likelihood": -13.697517477827045,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 9.919351282450908,
      "beta_deviation_sensitivity": 0.20771995407123167,
      "success": true,
      "log_likelihood": -4.390017246933527,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 1.7043743621424252,
      "beta_deviation_sensitivity": 0.09252060605166854,
      "success": true,
      "log_likelihood": -19.156872592815034,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_0": 1.5672360774774667,
      "beta_deviation_sensitivity": 0.03464790557988191,
      "success": true,
      "log_likelihood": -21.17586578148348,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_0": {
        "r": 0.5894506245819425,
        "p": 1.1040000000186091e-10
      },
      "beta_deviation_sensitivity": {
        "r": 0.9001833210560056,
        "p": 3.7308662055951255e-37
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 66.06436979723472,
  "bic_Control": 62.09735892162273,
  "bic_Cocaine": 69.61815037330379,
  "bic_results": {
    "average_bic": 66.06436979723472,
    "individual_bics": [
      102.04303031171439,
      41.42869086796515,
      22.7779128015246,
      39.01978513285097,
      17.185016501364515,
      37.014912891567775,
      7.168421829465738,
      34.71070824591734,
      7.1684218301722815,
      28.994516972390777,
      18.904711783678927,
      24.686933532095075,
      30.174708637619467,
      7.168421829482518,
      7.1684218294626,
      99.27062278955009,
      7.168421829462384,
      24.07332782834073,
      17.40323620585137,
      7.168421829473357,
      34.41634075772499,
      25.66939127611868,
      421.6325362063317,
      45.129682943599406,
      31.750822283152957,
      34.93206941371857,
      41.45384691033274,
      19.765452784336723,
      283.47743062579474,
      35.536329234950195,
      7.168421829459875,
      102.04293733394559,
      562.5599821061727,
      39.84842910642707,
      7.168421829459744,
      44.34576730191348,
      29.95911983376284,
      35.92330823612775,
      41.960210251192954,
      24.827395616763653,
      45.45471711870427,
      29.142850678009964,
      145.32232447182673,
      46.7301668873829,
      38.795751023444616,
      44.92122474977251,
      45.44227508811954,
      46.13791179950347,
      28.688590762147754,
      55.585763959876225,
      46.61465055617855,
      194.13641228896668,
      49.22244708292814,
      54.653926234294694,
      38.5850692485155,
      20.13741160360091,
      30.41574432105198,
      30.65268266552843,
      25.820946267983338,
      39.21035591885108,
      49.12467620543637,
      39.331023774696355,
      102.0430303117144,
      49.529083641414154,
      30.712279754556626,
      42.21463309023987,
      25.083125096855753,
      329.52913248587544,
      46.44859890842537,
      25.552589482427656,
      7.1672194656031865,
      32.012699189448576,
      42.75162115745811,
      40.30919791300274,
      55.02040384504355,
      41.401063526121696,
      17.70877403126611,
      22.39071377519472,
      53.33050067785468,
      21.627654801580213,
      54.67747966428921,
      237.4257243179887,
      240.1981358893726,
      39.770440794126706,
      53.22071585674253,
      55.99132845163399,
      605.8393436462991,
      34.56207283256631,
      15.947072370779274,
      45.48078306254229,
      49.51876943987918
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        102.04303031171439,
        41.42869086796515,
        22.7779128015246,
        39.01978513285097,
        17.185016501364515,
        37.014912891567775,
        7.168421829465738,
        34.71070824591734,
        7.1684218301722815,
        28.994516972390777,
        18.904711783678927,
        24.686933532095075,
        30.174708637619467,
        7.168421829482518,
        7.1684218294626,
        99.27062278955009,
        7.168421829462384,
        24.07332782834073,
        17.40323620585137,
        7.168421829473357,
        34.41634075772499,
        25.66939127611868,
        421.6325362063317,
        45.129682943599406,
        31.750822283152957,
        34.93206941371857,
        41.45384691033274,
        19.765452784336723,
        283.47743062579474,
        35.536329234950195,
        7.168421829459875,
        102.04293733394559,
        562.5599821061727,
        39.84842910642707,
        7.168421829459744,
        44.34576730191348,
        29.95911983376284,
        35.92330823612775,
        41.960210251192954,
        24.827395616763653,
        45.45471711870427,
        29.142850678009964,
        145.32232447182673
      ],
      "Cocaine": [
        46.7301668873829,
        38.795751023444616,
        44.92122474977251,
        45.44227508811954,
        46.13791179950347,
        28.688590762147754,
        55.585763959876225,
        46.61465055617855,
        194.13641228896668,
        49.22244708292814,
        54.653926234294694,
        38.5850692485155,
        20.13741160360091,
        30.41574432105198,
        30.65268266552843,
        25.820946267983338,
        39.21035591885108,
        49.12467620543637,
        39.331023774696355,
        102.0430303117144,
        49.529083641414154,
        30.712279754556626,
        42.21463309023987,
        25.083125096855753,
        329.52913248587544,
        46.44859890842537,
        25.552589482427656,
        7.1672194656031865,
        32.012699189448576,
        42.75162115745811,
        40.30919791300274,
        55.02040384504355,
        41.401063526121696,
        17.70877403126611,
        22.39071377519472,
        53.33050067785468,
        21.627654801580213,
        54.67747966428921,
        237.4257243179887,
        240.1981358893726,
        39.770440794126706,
        53.22071585674253,
        55.99132845163399,
        605.8393436462991,
        34.56207283256631,
        15.947072370779274,
        45.48078306254229,
        49.51876943987918
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_0: r = 0.589\n- beta_deviation_sensitivity: r = 0.900",
  "previous_models": [
    "Specification: utility_accept = beta_0 + beta_deviation_sensitivity * (split_percentage_self - 100 * token_self_proportion)\nSummary: A utility model predicting responder acceptance based on self-interest and contribution-based fairness. Utility to accept is a linear function of a baseline parameter (beta_0) and a term capturing the deviation of the proposed percentage from the participant's proportional contribution percentage, scaled by a sensitivity parameter (beta_deviation_sensitivity). Utility is converted to acceptance probability via a logistic function (temperature 1). The model uses two learnable parameters with generous finite bounds [-10, 10].\nTarget Variable: accept\nPrediction Type: utility\nBIC: 66.06436979723472\nOverall Accuracy: 0.7784\nGroup Accuracies:\n- Control: 0.8340\n- Cocaine: 0.7286\n\nParameter Recovery:\n- beta_0: r = 0.589\n- beta_deviation_sensitivity: r = 0.900"
  ]
}