{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, let's design a computational model for the responder's decision in this ultimatum game, keeping in mind the requirements for parameter recovery and parsimony.\n\nFirst, the psychological mechanisms at play for a responder are primarily self-interest (accepting to gain money) and fairness considerations (rejecting unfair offers, even at a personal cost). The pre-task contributions add another layer to fairness perception, potentially anchoring what a participant considers a 'fair' split based on who contributed more to the total pot.\n\nThese mechanisms interact as a trade-off. A responder weighs the material gain of accepting the proposed amount against the disutility of accepting an offer perceived as unfair. The perception of fairness is likely influenced by both the absolute or percentage split offered and the relative contributions of the proposer and responder.\n\nA utility model for the decision to accept fits the requirements. We can model the utility of accepting an offer, with the decision to accept being made if this utility is positive (leading to >50% probability via the logistic function), and reject otherwise. The utility of rejecting is implicitly zero.\n\nWe can model the utility of accepting as a function of the proposed percentage for the self (`split_perc_self`) and how this proposed percentage compares to a reference point based on contributions (`token_self`, `token_opp`). A simple linear utility function incorporating these factors allows for capturing both pure monetary preference and fairness/entitlement based on contributions.\n\nLet's define a reference fairness percentage based on token contributions. If total tokens (`token_self` + `token_opp`) are greater than zero, this reference is `(token_self / (token_self + token_opp)) * 100`. If total tokens are zero (meaning `combined_earning` is likely zero, and `split_self` is zero), a 50% split is a reasonable default for fairness.\n\nThe utility of accepting (`utility_accept`) could then be a linear combination of a baseline utility (`omega_0`), the proposed percentage for self (`split_perc_self`), and the deviation of the proposed percentage from the token-based fairness reference percentage.\n\n`utility_accept = omega_0 + omega_1 * split_perc_self + omega_2 * (split_perc_self - token_ratio_self_perc_ref)`\n\n*   `omega_0`: Baseline utility or acceptance threshold.\n*   `omega_1`: Sensitivity to the proposed percentage itself. Should be positive (higher offers are better).\n*   `omega_2`: Sensitivity to the difference between the proposed percentage and the token-based fairness reference. If positive, utility increases when the proposed percentage is *above* the token-based reference (capturing preference for getting more than your token share, and aversion to getting less). This term models inequity aversion relative to contribution.\n\nThis model has 3 learnable parameters (`omega_0`, `omega_1`, `omega_2`), which is relatively parsimonious for 36 responder trials. The predictors (`split_perc_self` and the deviation term) are related but derived from different aspects of the trial structure (the offer vs. the contribution phase), which should help parameter identifiability. The logistic function (with temperature 1) `P(accept) = 1 / (1 + exp(-utility_accept))` maps the utility to the probability of acceptance.\n\n<MODEL>\nutility_accept = omega_0 + omega_1 * split_perc_self + omega_2 * (split_perc_self - token_ratio_self_perc_ref)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility_accept\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n        },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"omega_0\": {\n      \"description\": \"Intercept or baseline utility for accepting.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"omega_1\": {\n      \"description\": \"Sensitivity parameter for the proposed percentage for self. Higher values mean stronger preference for larger percentage offers.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"omega_2\": {\n      \"description\": \"Sensitivity parameter for the deviation from the token-based fairness reference percentage. Higher values mean stronger preference for offers exceeding the contribution-based fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the combined earning proposed to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_ratio_self_perc_ref\": {\n      \"description\": \"The percentage of total tokens contributed by the participant, used as a fairness reference. Calculated as (token_self / (token_self + token_opp)) * 100 if token_self + token_opp > 0, and 50 otherwise.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA linear utility model predicting the decision to accept or reject an ultimatum game offer. Utility is based on a baseline, the percentage of the total earning proposed to the participant, and the difference between the proposed percentage and a fairness reference percentage derived from relative token contributions. The model uses three learnable parameters: an intercept (omega_0), sensitivity to the proposed percentage (omega_1), and sensitivity to the deviation from the contribution-based fairness reference (omega_2). The probability of acceptance is determined by a logistic function applied to the utility.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['omega_0', 'omega_1', 'omega_2']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                utility_accept = omega_0 + omega_1 * split_perc_self + omega_2 * (split_perc_self - token_ratio_self_perc_ref)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"utility_accept\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"omega_0\": {\n      \"description\": \"Intercept or baseline utility for accepting.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"omega_1\": {\n      \"description\": \"Sensitivity parameter for the proposed percentage for self. Higher values mean stronger preference for larger percentage offers.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"omega_2\": {\n      \"description\": \"Sensitivity parameter for the deviation from the token-based fairness reference percentage. Higher values mean stronger preference for offers exceeding the contribution-based fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the combined earning proposed to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_ratio_self_perc_ref\": {\n      \"description\": \"The percentage of total tokens contributed by the participant, used as a fairness reference. Calculated as (token_self / (token_self + token_opp)) * 100 if token_self + token_opp > 0, and 50 otherwise.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, omega_0=0, omega_1=1, omega_2=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        if token_self + token_opp > 0:\n            token_ratio_self_perc_ref = (token_self / (token_self + token_opp)) * 100\n        else:\n            token_ratio_self_perc_ref = 50\n\n        utility_accept = omega_0 + omega_1 * split_perc_self + omega_2 * (split_perc_self - token_ratio_self_perc_ref)\n\n        model_predictions.append(utility_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\":1,\"group\":\"control\",\"trial_number\":1,\"trial_type\":1,\"trial_role\":2,\"token_opp\":5,\"token_self\":5,\"combined_earning\":10,\"split_opp\":5.0,\"split_self\":5.0,\"splitperc_opp\":50,\"splitperc_self\":50,\"accept\":1.0,\"accepted_amount\":5.0,\"accepted_perc\":50.0,\"proposed_perc\":50.0,\"proposed_amount\":5.0},{\"ID\":2,\"group\":\"control\",\"trial_number\":2,\"trial_type\":1,\"trial_role\":2,\"token_opp\":5,\"token_self\":5,\"combined_earning\":10,\"split_opp\":4.0,\"split_self\":6.0,\"splitperc_opp\":40,\"splitperc_self\":60,\"accept\":1.0,\"accepted_amount\":6.0,\"accepted_perc\":60.0,\"proposed_perc\":60.0,\"proposed_amount\":6.0},{\"ID\":3,\"group\":\"control\",\"trial_number\":3,\"trial_type\":1,\"trial_role\":2,\"token_opp\":5,\"token_self\":5,\"combined_earning\":10,\"split_opp\":8.0,\"split_self\":2.0,\"splitperc_opp\":80,\"splitperc_self\":20,\"accept\":0.0,\"accepted_amount\":0.0,\"accepted_perc\":0.0,\"proposed_perc\":20.0,\"proposed_amount\":2.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1746023119.401053
    }
  ],
  "learnable_parameters": {
    "omega_0": {
      "description": "Intercept or baseline utility for accepting.",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "omega_1": {
      "description": "Sensitivity parameter for the proposed percentage for self. Higher values mean stronger preference for larger percentage offers.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "omega_2": {
      "description": "Sensitivity parameter for the deviation from the token-based fairness reference percentage. Higher values mean stronger preference for offers exceeding the contribution-based fair share.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "utility_accept = omega_0 + omega_1 * split_perc_self + omega_2 * (split_perc_self - token_ratio_self_perc_ref)",
  "variable_descriptions": {
    "utility_accept": {
      "description": "Utility of accepting the proposed offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "omega_0": {
      "description": "Intercept or baseline utility for accepting.",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "omega_1": {
      "description": "Sensitivity parameter for the proposed percentage for self. Higher values mean stronger preference for larger percentage offers.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "omega_2": {
      "description": "Sensitivity parameter for the deviation from the token-based fairness reference percentage. Higher values mean stronger preference for offers exceeding the contribution-based fair share.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_perc_self": {
      "description": "The percentage of the combined earning proposed to the participant.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_ratio_self_perc_ref": {
      "description": "The percentage of total tokens contributed by the participant, used as a fairness reference. Calculated as (token_self / (token_self + token_opp)) * 100 if token_self + token_opp > 0, and 50 otherwise.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A linear utility model predicting the decision to accept or reject an ultimatum game offer. Utility is based on a baseline, the percentage of the total earning proposed to the participant, and the difference between the proposed percentage and a fairness reference percentage derived from relative token contributions. The model uses three learnable parameters: an intercept (omega_0), sensitivity to the proposed percentage (omega_1), and sensitivity to the deviation from the contribution-based fairness reference (omega_2). The probability of acceptance is determined by a logistic function applied to the utility.",
  "target_variable": "accept",
  "full_reasoning": "Okay, let's design a computational model for the responder's decision in this ultimatum game, keeping in mind the requirements for parameter recovery and parsimony.\n\nFirst, the psychological mechanisms at play for a responder are primarily self-interest (accepting to gain money) and fairness considerations (rejecting unfair offers, even at a personal cost). The pre-task contributions add another layer to fairness perception, potentially anchoring what a participant considers a 'fair' split based on who contributed more to the total pot.\n\nThese mechanisms interact as a trade-off. A responder weighs the material gain of accepting the proposed amount against the disutility of accepting an offer perceived as unfair. The perception of fairness is likely influenced by both the absolute or percentage split offered and the relative contributions of the proposer and responder.\n\nA utility model for the decision to accept fits the requirements. We can model the utility of accepting an offer, with the decision to accept being made if this utility is positive (leading to >50% probability via the logistic function), and reject otherwise. The utility of rejecting is implicitly zero.\n\nWe can model the utility of accepting as a function of the proposed percentage for the self (`split_perc_self`) and how this proposed percentage compares to a reference point based on contributions (`token_self`, `token_opp`). A simple linear utility function incorporating these factors allows for capturing both pure monetary preference and fairness/entitlement based on contributions.\n\nLet's define a reference fairness percentage based on token contributions. If total tokens (`token_self` + `token_opp`) are greater than zero, this reference is `(token_self / (token_self + token_opp)) * 100`. If total tokens are zero (meaning `combined_earning` is likely zero, and `split_self` is zero), a 50% split is a reasonable default for fairness.\n\nThe utility of accepting (`utility_accept`) could then be a linear combination of a baseline utility (`omega_0`), the proposed percentage for self (`split_perc_self`), and the deviation of the proposed percentage from the token-based fairness reference percentage.\n\n`utility_accept = omega_0 + omega_1 * split_perc_self + omega_2 * (split_perc_self - token_ratio_self_perc_ref)`\n\n*   `omega_0`: Baseline utility or acceptance threshold.\n*   `omega_1`: Sensitivity to the proposed percentage itself. Should be positive (higher offers are better).\n*   `omega_2`: Sensitivity to the difference between the proposed percentage and the token-based fairness reference. If positive, utility increases when the proposed percentage is *above* the token-based reference (capturing preference for getting more than your token share, and aversion to getting less). This term models inequity aversion relative to contribution.\n\nThis model has 3 learnable parameters (`omega_0`, `omega_1`, `omega_2`), which is relatively parsimonious for 36 responder trials. The predictors (`split_perc_self` and the deviation term) are related but derived from different aspects of the trial structure (the offer vs. the contribution phase), which should help parameter identifiability. The logistic function (with temperature 1) `P(accept) = 1 / (1 + exp(-utility_accept))` maps the utility to the probability of acceptance.\n\n<MODEL>\nutility_accept = omega_0 + omega_1 * split_perc_self + omega_2 * (split_perc_self - token_ratio_self_perc_ref)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility_accept\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n        },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"omega_0\": {\n      \"description\": \"Intercept or baseline utility for accepting.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"omega_1\": {\n      \"description\": \"Sensitivity parameter for the proposed percentage for self. Higher values mean stronger preference for larger percentage offers.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"omega_2\": {\n      \"description\": \"Sensitivity parameter for the deviation from the token-based fairness reference percentage. Higher values mean stronger preference for offers exceeding the contribution-based fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the combined earning proposed to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_ratio_self_perc_ref\": {\n      \"description\": \"The percentage of total tokens contributed by the participant, used as a fairness reference. Calculated as (token_self / (token_self + token_opp)) * 100 if token_self + token_opp > 0, and 50 otherwise.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA linear utility model predicting the decision to accept or reject an ultimatum game offer. Utility is based on a baseline, the percentage of the total earning proposed to the participant, and the difference between the proposed percentage and a fairness reference percentage derived from relative token contributions. The model uses three learnable parameters: an intercept (omega_0), sensitivity to the proposed percentage (omega_1), and sensitivity to the deviation from the contribution-based fairness reference (omega_2). The probability of acceptance is determined by a logistic function applied to the utility.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: utility_accept = omega_0 + omega_1 * split_perc_self + omega_2 * (split_perc_self - token_ratio_self_perc_ref)\nSummary: A linear utility model predicting the decision to accept or reject an ultimatum game offer. Utility is based on a baseline, the percentage of the total earning proposed to the participant, and the difference between the proposed percentage and a fairness reference percentage derived from relative token contributions. The model uses three learnable parameters: an intercept (omega_0), sensitivity to the proposed percentage (omega_1), and sensitivity to the deviation from the contribution-based fairness reference (omega_2). The probability of acceptance is determined by a logistic function applied to the utility.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, omega_0=0, omega_1=1, omega_2=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        if token_self + token_opp > 0:\n            token_ratio_self_perc_ref = (token_self / (token_self + token_opp)) * 100\n        else:\n            token_ratio_self_perc_ref = 50\n\n        utility_accept = omega_0 + omega_1 * split_perc_self + omega_2 * (split_perc_self - token_ratio_self_perc_ref)\n\n        model_predictions.append(utility_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.8495115995115995,
  "group_accuracies": {
    "Control": 0.8824289405684754,
    "Cocaine": 0.8200231481481481
  },
  "group_parameter_averages": {
    "Control": {
      "omega_0": -6.0204467111934905,
      "omega_1": 4.434159636775202,
      "omega_2": 2.376148139856235
    },
    "Cocaine": {
      "omega_0": -7.789693565334541,
      "omega_1": 2.4443311949084894,
      "omega_2": 2.375816536976929
    }
  },
  "fitting_results": [
    {
      "omega_0": -79.10037013566274,
      "omega_1": 0.0,
      "omega_2": 9.967580727610859,
      "success": true,
      "log_likelihood": -46.051705064574946,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -1.030549895035564,
      "omega_1": 0.09329362835330798,
      "omega_2": 0.0888726487026642,
      "success": true,
      "log_likelihood": -15.774611267732533,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -56.97044123748512,
      "omega_1": 10.0,
      "omega_2": 9.97882498971034,
      "success": true,
      "log_likelihood": -115.1293010293914,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -3.1533683205498115,
      "omega_1": 0.14621176519420342,
      "omega_2": 0.09803049739010075,
      "success": true,
      "log_likelihood": -13.286301959743179,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": 10.01233329603344,
      "omega_1": 0.0,
      "omega_2": 0.5628996583524699,
      "success": true,
      "log_likelihood": -5.008985787462153,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -3.2493549817256753,
      "omega_1": 0.21435993469100234,
      "omega_2": 0.09008534427961346,
      "success": true,
      "log_likelihood": -11.011930996659306,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -5.376046858452762,
      "omega_1": 10.0,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -1.0393670205258323,
      "omega_1": 0.15827586394389292,
      "omega_2": 0.10800998691763047,
      "success": true,
      "log_likelihood": -11.405936612936811,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": 47.05670528534382,
      "omega_1": 10.0,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": 8.988302001082383,
      "omega_1": 0.0,
      "omega_2": 0.5662499979603886,
      "success": true,
      "log_likelihood": -15.383887592948636,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -6.152785212902803,
      "omega_1": 6.557000483825156,
      "omega_2": 10.0,
      "success": true,
      "log_likelihood": -0.0008434579016625632,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -88.497181289666,
      "omega_1": 3.3208130614490003,
      "omega_2": 4.693025546008094,
      "success": true,
      "log_likelihood": -51.597099811427945,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -28.69788869837531,
      "omega_1": 9.019388995030637,
      "omega_2": 9.303843388433938,
      "success": true,
      "log_likelihood": -207.22278410475073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": 7.234223521247427,
      "omega_1": 10.0,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -57.07123870431421,
      "omega_1": 10.0,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": 14.397169915974494,
      "omega_1": 10.0,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": 56.96106262331617,
      "omega_1": 10.0,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": 41.62414563037565,
      "omega_1": 8.78853734551132,
      "omega_2": 5.149957689888596,
      "success": true,
      "log_likelihood": -23.02586216028418,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -50.79073157290807,
      "omega_1": 9.365234845398565,
      "omega_2": 3.1600408138987333,
      "success": true,
      "log_likelihood": -46.05175990887554,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": 32.73722243907362,
      "omega_1": 10.0,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": 1.1352481059236892,
      "omega_1": 0.07021305096857261,
      "omega_2": 0.14092157008903541,
      "success": true,
      "log_likelihood": -13.243760629760672,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -89.39032540293067,
      "omega_1": 9.069827900381604,
      "omega_2": 0.9467753335721103,
      "success": true,
      "log_likelihood": -46.05170185648257,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -60.868916820056604,
      "omega_1": 4.602843890193686,
      "omega_2": 3.8614358780404117,
      "success": true,
      "log_likelihood": -138.29955317435198,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -4.329931279743069,
      "omega_1": 0.17925511657017168,
      "omega_2": 0.04219644730373118,
      "success": true,
      "log_likelihood": -14.88212661810583,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": 77.59470042313606,
      "omega_1": 0.18959647986180966,
      "omega_2": 4.193838470821702,
      "success": true,
      "log_likelihood": -49.76698751950175,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": 0.9440400953205653,
      "omega_1": 0.08255548229100462,
      "omega_2": 0.136515238819928,
      "success": true,
      "log_likelihood": -13.010770751873038,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -14.539014973623823,
      "omega_1": 0.55546879359632,
      "omega_2": 0.05479040009718595,
      "success": true,
      "log_likelihood": -6.3465609688034315,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": 20.34002214586864,
      "omega_1": 1.5898932550885123,
      "omega_2": 8.39359055372098,
      "success": true,
      "log_likelihood": -24.412197514136604,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -66.50372827098826,
      "omega_1": 10.0,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": -92.10337485117975,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": 93.50036441452124,
      "omega_1": 8.326782962329403,
      "omega_2": 6.236892264789873,
      "success": true,
      "log_likelihood": -138.15516386043737,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -41.44557870022652,
      "omega_1": 10.0,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -38.048465233768546,
      "omega_1": 3.841799988012868e-07,
      "omega_2": 10.0,
      "success": true,
      "log_likelihood": -69.07383350298636,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -20.207779354133653,
      "omega_1": 0.6237169712883452,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": -18.000581695098305,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -25.72524925570478,
      "omega_1": 0.7741287708202236,
      "omega_2": 2.5418144722021583e-06,
      "success": true,
      "log_likelihood": -22.596761749068257,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -48.92114079089874,
      "omega_1": 10.0,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -9.90480768692647,
      "omega_1": 0.38466464572756354,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": -9.672269787106005,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -2.3431574023375203,
      "omega_1": 0.2721616207976466,
      "omega_2": 0.15539219726731526,
      "success": true,
      "log_likelihood": -7.754828973418879,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": 1.7059071933946937,
      "omega_1": 0.040354130291132835,
      "omega_2": 0.14605299707946282,
      "success": true,
      "log_likelihood": -14.131764014039174,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -4.7098067843349405,
      "omega_1": 5.674740134611565,
      "omega_2": 2.504964256644511,
      "success": true,
      "log_likelihood": -184.2072690898917,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": 68.73619550951346,
      "omega_1": 6.366988016217724,
      "omega_2": 1.3496659423605017,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": -10.601245446721862,
      "omega_1": 0.40147401151046747,
      "omega_2": 0.0013188249833928996,
      "success": true,
      "log_likelihood": -25.268819919071106,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": 41.67120809029511,
      "omega_1": 0.0,
      "omega_2": 10.0,
      "success": true,
      "log_likelihood": -46.052663228760345,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": 35.15041205825881,
      "omega_1": 3.8010828412108366,
      "omega_2": 0.24259580726006424,
      "success": true,
      "log_likelihood": -23.02585092644049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "omega_0": 4.373579689079127,
      "omega_1": 0.00032205589423171804,
      "omega_2": 0.20813500281777741,
      "success": true,
      "log_likelihood": -24.753597296309195,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -3.0750138852549376,
      "omega_1": 0.19032624112523708,
      "omega_2": 0.08186688400134311,
      "success": true,
      "log_likelihood": -12.190721545719232,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": 98.83563205466366,
      "omega_1": 8.341708361391122,
      "omega_2": 6.394540717337245,
      "success": true,
      "log_likelihood": -138.15522519985527,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -8.502943076769228,
      "omega_1": 0.306189608784604,
      "omega_2": 0.020188712587084996,
      "success": true,
      "log_likelihood": -11.416440044621096,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -10.762597351086145,
      "omega_1": 0.33019898197362746,
      "omega_2": 6.623469412591037e-05,
      "success": true,
      "log_likelihood": -22.73676908333981,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": 3.799971380783363,
      "omega_1": 0.0,
      "omega_2": 0.2327702818314248,
      "success": true,
      "log_likelihood": -10.760776442670064,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -1.9677843244090254,
      "omega_1": 0.07088383642445557,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": -22.255102739066828,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -50.90918601048461,
      "omega_1": 2.08166912854474,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": -91.33246034551273,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -44.87123742845653,
      "omega_1": 0.12281295565038476,
      "omega_2": 4.521526151495133,
      "success": true,
      "log_likelihood": -92.10345817836111,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -7.01614172499948,
      "omega_1": 0.2411508731144585,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": -14.300608555414877,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -10.6652766373276,
      "omega_1": 0.39997724778092786,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": -32.53577012997812,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": 44.73551534988551,
      "omega_1": 0.14583008817720247,
      "omega_2": 9.967854104336325,
      "success": true,
      "log_likelihood": -162.56724249581808,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -19.30493995766401,
      "omega_1": 1.7671549376110887,
      "omega_2": 2.8876474990121044,
      "success": true,
      "log_likelihood": -23.938976866149446,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -6.190275878506194,
      "omega_1": 0.223717249512166,
      "omega_2": 0.17545828240101838,
      "success": true,
      "log_likelihood": -8.315763162776374,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": 16.883001226596466,
      "omega_1": 10.0,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": -92.1034037165618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -22.20476303446961,
      "omega_1": 0.49606977103844563,
      "omega_2": 9.147880380848413,
      "success": true,
      "log_likelihood": -69.23934039685174,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": 42.40071730704985,
      "omega_1": 7.080253516281158,
      "omega_2": 4.368118143576337,
      "success": true,
      "log_likelihood": -115.12934783468118,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": 65.22800228050873,
      "omega_1": 3.4114255063619656,
      "omega_2": 10.0,
      "success": true,
      "log_likelihood": -185.9929638729392,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -1.1574214892334609,
      "omega_1": 0.1064556563296275,
      "omega_2": 0.10266047767196432,
      "success": true,
      "log_likelihood": -14.48103539530685,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -71.56824649762665,
      "omega_1": 1.5996727111518347,
      "omega_2": 10.0,
      "success": true,
      "log_likelihood": -46.05243301386511,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -5.16086346556696,
      "omega_1": 0.16644133317679052,
      "omega_2": 0.009359732630576763,
      "success": true,
      "log_likelihood": -17.057310793967606,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -20.170466775597934,
      "omega_1": 0.5807358832656736,
      "omega_2": 0.17414461352016014,
      "success": true,
      "log_likelihood": -4.750777288233731,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -7.477049706988618,
      "omega_1": 0.302898058626294,
      "omega_2": 0.05031701776910571,
      "success": true,
      "log_likelihood": -10.519131726780799,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -4.842667835681171,
      "omega_1": 10.0,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -33.33898161436995,
      "omega_1": 3.264580297193282,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": -70.98696207354679,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -7.472083031388315,
      "omega_1": 0.27393039539328246,
      "omega_2": 0.012252868417899186,
      "success": true,
      "log_likelihood": -12.600669805961786,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": 16.924621790162956,
      "omega_1": 10.0,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": -69.07755278652137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -34.297941684458564,
      "omega_1": 1.5308676411562958,
      "omega_2": 10.0,
      "success": true,
      "log_likelihood": 2.8487692202751746e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -95.38432765748131,
      "omega_1": 1.0390742108439273,
      "omega_2": 3.1742196498830655,
      "success": true,
      "log_likelihood": -92.10348060922861,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -100.0,
      "omega_1": 6.22772896828238,
      "omega_2": 4.5461647915008845,
      "success": true,
      "log_likelihood": -69.13723019947412,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": 80.8167259043484,
      "omega_1": 6.3855647003473255,
      "omega_2": 1.399988858906711,
      "success": true,
      "log_likelihood": -184.20680743672386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -54.80560353432637,
      "omega_1": 7.298566216582914,
      "omega_2": 8.06085430075699,
      "success": true,
      "log_likelihood": -192.3049319876556,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -11.052172765242638,
      "omega_1": 0.46202229704861325,
      "omega_2": 0.0036083467374308465,
      "success": true,
      "log_likelihood": -12.068641107904241,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": 7.608911836602195,
      "omega_1": 0.0,
      "omega_2": 0.15038618890272223,
      "success": true,
      "log_likelihood": -5.270868077372064,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -31.12252267135421,
      "omega_1": 0.6941254387148336,
      "omega_2": 10.0,
      "success": true,
      "log_likelihood": -69.13917499405088,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -0.23033297458441443,
      "omega_1": 0.03503501910831313,
      "omega_2": 0.016709317857867556,
      "success": true,
      "log_likelihood": -22.79517853940009,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -95.49628142111216,
      "omega_1": 0.0,
      "omega_2": 10.0,
      "success": true,
      "log_likelihood": -46.05170185648122,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": 77.54988622588425,
      "omega_1": 8.235212241126172,
      "omega_2": 7.016221420601259,
      "success": true,
      "log_likelihood": -299.3361967904532,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": 67.72131173411454,
      "omega_1": 10.0,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -1.1876715314279265,
      "omega_1": 0.01508245217271057,
      "omega_2": 0.08967471614887103,
      "success": true,
      "log_likelihood": -11.080283814888043,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -12.74732984282655,
      "omega_1": 0.4801389263468174,
      "omega_2": 0.08444771717029073,
      "success": true,
      "log_likelihood": -6.63795623626097,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": 1.0877159316680873,
      "omega_1": 0.0015720993236868726,
      "omega_2": 0.03269975645040103,
      "success": true,
      "log_likelihood": -23.026243030182183,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -100.0,
      "omega_1": 2.42208217823154,
      "omega_2": 0.9980668356136688,
      "success": true,
      "log_likelihood": -0.08342272666340388,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -8.783885213038321,
      "omega_1": 0.3785515048041402,
      "omega_2": 5.6815156017179994e-05,
      "success": true,
      "log_likelihood": -26.741335977977833,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": 0.3586301612257756,
      "omega_1": 0.0,
      "omega_2": 0.11130795425837021,
      "success": true,
      "log_likelihood": -13.697517465508444,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -2.468940456542108,
      "omega_1": 10.0,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": -46.05170185648088,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -16.24083008370972,
      "omega_1": 0.5268955751741061,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": -7.470059195335066,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "omega_0": -1.7537344466461533,
      "omega_1": 0.09097319154111942,
      "omega_2": 0.0,
      "success": true,
      "log_likelihood": -19.417255344285273,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "omega_0": {
        "r": 0.6017578693662837,
        "p": 3.5555827350002405e-11
      },
      "omega_1": {
        "r": 0.6385410227465695,
        "p": 8.855884774450427e-13
      },
      "omega_2": {
        "r": 0.6786733969925752,
        "p": 8.557401558747381e-15
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 104.07394883177831,
  "bic_Control": 84.52197091487177,
  "bic_Cocaine": 121.58926238234041,
  "bic_results": {
    "average_bic": 104.07394883177831,
    "individual_bics": [
      102.85396694451822,
      42.2997793508334,
      241.00915887415113,
      37.32316073485469,
      20.768528390292637,
      32.774418808686946,
      10.75055680816833,
      33.56243004124195,
      10.75055680816833,
      41.518332001265605,
      10.752243731171657,
      113.94475643822422,
      425.1961250248698,
      10.75055680816833,
      10.75055680816833,
      10.75055680816833,
      10.75055680816833,
      56.802281135936695,
      102.8540766331194,
      10.75055680816833,
      37.23807807488967,
      102.85396052833347,
      287.3496631640723,
      40.514810051579985,
      110.28453185437182,
      36.772098319114406,
      23.443678752975195,
      59.57495184364154,
      194.95730651772783,
      287.06088453624307,
      10.75055680816833,
      148.89822382134105,
      46.751720205564936,
      55.94408031350484,
      10.75055680816833,
      30.09509638958034,
      26.26021476220609,
      39.01408484344668,
      379.1650949951517,
      148.90566238841103,
      61.28819665351054,
      102.85588327288902,
      56.80225866824931,
      60.25775140798672,
      35.1319999068068,
      287.06100721507886,
      33.58343690461052,
      56.224094982047944,
      32.272109700708455,
      55.26076229350198,
      193.41547750639378,
      194.95747317209054,
      39.351773926198085,
      75.82209707532456,
      335.8850418070045,
      58.62851054766722,
      27.38208314092108,
      194.95736424849193,
      149.22923760907182,
      241.0092524847307,
      382.73648456124675,
      39.712627605982036,
      102.85542284309855,
      44.865178403303545,
      20.252111391835793,
      31.78882026892993,
      148.90566238841095,
      152.7244809624619,
      35.9518964272919,
      148.90566238841106,
      10.750556809670792,
      194.95751803382555,
      149.02501721431656,
      379.16417168881605,
      395.36042079067954,
      34.88783903117681,
      21.29229297011246,
      149.02890680347008,
      56.34091389416851,
      102.85396052833077,
      609.4229503962747,
      148.90566238841095,
      32.91112444514442,
      24.026469287890272,
      56.8030428757327,
      10.917402268695138,
      64.233228771324,
      38.14559174638522,
      102.85396052833009,
      25.690675206038463,
      49.58506750393887
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        102.85396694451822,
        42.2997793508334,
        241.00915887415113,
        37.32316073485469,
        20.768528390292637,
        32.774418808686946,
        10.75055680816833,
        33.56243004124195,
        10.75055680816833,
        41.518332001265605,
        10.752243731171657,
        113.94475643822422,
        425.1961250248698,
        10.75055680816833,
        10.75055680816833,
        10.75055680816833,
        10.75055680816833,
        56.802281135936695,
        102.8540766331194,
        10.75055680816833,
        37.23807807488967,
        102.85396052833347,
        287.3496631640723,
        40.514810051579985,
        110.28453185437182,
        36.772098319114406,
        23.443678752975195,
        59.57495184364154,
        194.95730651772783,
        287.06088453624307,
        10.75055680816833,
        148.89822382134105,
        46.751720205564936,
        55.94408031350484,
        10.75055680816833,
        30.09509638958034,
        26.26021476220609,
        39.01408484344668,
        379.1650949951517,
        148.90566238841103,
        61.28819665351054,
        102.85588327288902,
        56.80225866824931
      ],
      "Cocaine": [
        60.25775140798672,
        35.1319999068068,
        287.06100721507886,
        33.58343690461052,
        56.224094982047944,
        32.272109700708455,
        55.26076229350198,
        193.41547750639378,
        194.95747317209054,
        39.351773926198085,
        75.82209707532456,
        335.8850418070045,
        58.62851054766722,
        27.38208314092108,
        194.95736424849193,
        149.22923760907182,
        241.0092524847307,
        382.73648456124675,
        39.712627605982036,
        102.85542284309855,
        44.865178403303545,
        20.252111391835793,
        31.78882026892993,
        148.90566238841095,
        152.7244809624619,
        35.9518964272919,
        148.90566238841106,
        10.750556809670792,
        194.95751803382555,
        149.02501721431656,
        379.16417168881605,
        395.36042079067954,
        34.88783903117681,
        21.29229297011246,
        149.02890680347008,
        56.34091389416851,
        102.85396052833077,
        609.4229503962747,
        148.90566238841095,
        32.91112444514442,
        24.026469287890272,
        56.8030428757327,
        10.917402268695138,
        64.233228771324,
        38.14559174638522,
        102.85396052833009,
        25.690675206038463,
        49.58506750393887
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- omega_0: r = 0.602\n- omega_1: r = 0.639\n- omega_2: r = 0.679",
  "previous_models": [
    "Specification: utility_accept = omega_0 + omega_1 * split_perc_self + omega_2 * (split_perc_self - token_ratio_self_perc_ref)\nSummary: A linear utility model predicting the decision to accept or reject an ultimatum game offer. Utility is based on a baseline, the percentage of the total earning proposed to the participant, and the difference between the proposed percentage and a fairness reference percentage derived from relative token contributions. The model uses three learnable parameters: an intercept (omega_0), sensitivity to the proposed percentage (omega_1), and sensitivity to the deviation from the contribution-based fairness reference (omega_2). The probability of acceptance is determined by a logistic function applied to the utility.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 104.07394883177831\nOverall Accuracy: 0.8495\nGroup Accuracies:\n- Control: 0.8824\n- Cocaine: 0.8200\n\nParameter Recovery:\n- omega_0: r = 0.602\n- omega_1: r = 0.639\n- omega_2: r = 0.679"
  ]
}