{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "\n\nNew Instructions for Run 18:\n\n1. Candidate Families (\u22643 Learnable Parameters, fixed \u03c4=1)  \n   a. Piecewise Inequity Aversion (3 params):  \n      U = \u03b1 + \u03b2_neg\u00b7neg_dev_std + \u03b2_pos\u00b7pos_dev_std  \n      \u2022 neg_dev = max(0.5 \u2013 z_share, 0)  \n      \u2022 pos_dev = max(z_share \u2013 0.5, 0)  \n      \u2022 Standardize neg_dev, pos_dev \u2192 neg_dev_std, pos_dev_std  \n   b. Quadratic\u2010Orthonormal (3 params):  \n      U = \u03b1 + \u03b2\u2081\u00b7dev_std + \u03b2\u2082\u00b7dev_sq_orth  \n      \u2022 dev = |z_share\u20130.5|; dev_std = zscore(dev)  \n      \u2022 dev_sq = dev_std\u00b2; dev_sq_orth = dev_sq \u2013 proj(dev_sq, dev_std)  \n   c. Power\u2010Transform (2 params):  \n      U = \u03b1 + \u03b2\u00b7dev_std^\u03ba,\u2003\u03ba\u2208[0.5,2] learnable  \n   d. Exp\u2013Power Hybrid (3 params):  \n      U = \u03b1 + \u03b2\u00b7dev_std^\u03ba \u00b7 (1 \u2013 exp(\u2013\u03bb\u00b7dev_std)),\u2003\u03ba\u2208[0.5,2], \u03bb\u2208[0.5,5]  \n\n2. Feature Pipeline  \n   \u2022 z_share = split_self / combined_earning (skip trials where combined_earning=0)  \n   \u2022 Center at 0.5 \u2192 dev features (neg_dev, pos_dev, dev)  \n   \u2022 Standardize each feature (zero mean, unit SD on training set)  \n   \u2022 Build dev_sq, orthonormalize via Gram\u2013Schmidt  \n\n3. Choice Rule  \n   \u2022 Fixed-temperature logistic link:  \n     P_accept = 1 / (1 + exp(\u2013U))  \n\n4. Priors & Parameter Bounds  \n   \u2022 \u03b1, \u03b2, \u03b2\u2081, \u03b2\u2082, \u03b2_neg, \u03b2_pos \u223c Normal(0,0.05) truncated to [\u20130.2,0.2]  \n   \u2022 \u03ba \u223c Uniform(0.5,2]  \n   \u2022 \u03bb \u223c Uniform(0.5,5]  \n\n5. Two\u2010Stage Recovery & Identification  \n   Stage 1: Simulate 3,000 datasets from priors \u2192 MAP fits \u2192 require all Pearson r \u2265 0.85  \n   Stage 2: If any r < 0.85, drop the smallest\u2010impact parameter (by variance explained), retest; if still fails, drop that family  \n\n6. Model Selection & Validation  \n   \u2022 5\u2010fold cross\u2010validation \u2192 report out\u2010of\u2010sample accuracy, BIC, LOO\u2010CV  \n   \u2022 Posterior predictive check: compare empirical vs. predicted P_accept in 6 quantile bins  \n   \u2022 Select final model: \u0394BIC \u2265 4 vs. runner\u2010up, all r \u2265 0.85, accuracy \u2265 +10% over 2\u2010param baseline  \n\n7. Deliverables  \n   \u2022 <MODEL>\u2026</MODEL>: exact utility formula only  \n   \u2022 <VARIABLES>\u2026</VARIABLES>: all features & parameters with ranges, priors, learnable flags  \n   \u2022 <target_variable>accept</target_variable>  \n\n8. Summary (<SUMMARY>\u2026</SUMMARY>)  \n   \u2022 State the family chosen, describe each term, emphasize shrinkage settings, fixed \u03c4, recovery threshold (r \u2265 0.85), any parameters pruned  \n\nEncouragement: You may propose novel \u22643\u2010parameter transforms (e.g. dev\u00b7log(1+dev), thresholded splines, tanh\u2010scaled dev) or bespoke asymmetries, but always apply orthonormalization or piecewise separation to ensure identifiability and meet the stringent recovery & selection criteria.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: \n\nNew Instructions for Run 18:\n\n1. Candidate Families (\u22643 Learnable Parameters, fixed \u03c4=1)  \n   a. Piecewise Inequity Aversion (3 params):  \n      U = \u03b1 + \u03b2_neg\u00b7neg_dev_std + \u03b2_pos\u00b7pos_dev_std  \n      \u2022 neg_dev = max(0.5 \u2013 z_share, 0)  \n      \u2022 pos_dev = max(z_share \u2013 0.5, 0)  \n      \u2022 Standardize neg_dev, pos_dev \u2192 neg_dev_std, pos_dev_std  \n   b. Quadratic\u2010Orthonormal (3 params):  \n      U = \u03b1 + \u03b2\u2081\u00b7dev_std + \u03b2\u2082\u00b7dev_sq_orth  \n      \u2022 dev = |z_share\u20130.5|; dev_std = zscore(dev)  \n      \u2022 dev_sq = dev_std\u00b2; dev_sq_orth = dev_sq \u2013 proj(dev_sq, dev_std)  \n   c. Power\u2010Transform (2 params):  \n      U = \u03b1 + \u03b2\u00b7dev_std^\u03ba,\u2003\u03ba\u2208[0.5,2] learnable  \n   d. Exp\u2013Power Hybrid (3 params):  \n      U = \u03b1 + \u03b2\u00b7dev_std^\u03ba \u00b7 (1 \u2013 exp(\u2013\u03bb\u00b7dev_std)),\u2003\u03ba\u2208[0.5,2], \u03bb\u2208[0.5,5]  \n\n2. Feature Pipeline  \n   \u2022 z_share = split_self / combined_earning (skip trials where combined_earning=0)  \n   \u2022 Center at 0.5 \u2192 dev features (neg_dev, pos_dev, dev)  \n   \u2022 Standardize each feature (zero mean, unit SD on training set)  \n   \u2022 Build dev_sq, orthonormalize via Gram\u2013Schmidt  \n\n3. Choice Rule  \n   \u2022 Fixed-temperature logistic link:  \n     P_accept = 1 / (1 + exp(\u2013U))  \n\n4. Priors & Parameter Bounds  \n   \u2022 \u03b1, \u03b2, \u03b2\u2081, \u03b2\u2082, \u03b2_neg, \u03b2_pos \u223c Normal(0,0.05) truncated to [\u20130.2,0.2]  \n   \u2022 \u03ba \u223c Uniform(0.5,2]  \n   \u2022 \u03bb \u223c Uniform(0.5,5]  \n\n5. Two\u2010Stage Recovery & Identification  \n   Stage 1: Simulate 3,000 datasets from priors \u2192 MAP fits \u2192 require all Pearson r \u2265 0.85  \n   Stage 2: If any r < 0.85, drop the smallest\u2010impact parameter (by variance explained), retest; if still fails, drop that family  \n\n6. Model Selection & Validation  \n   \u2022 5\u2010fold cross\u2010validation \u2192 report out\u2010of\u2010sample accuracy, BIC, LOO\u2010CV  \n   \u2022 Posterior predictive check: compare empirical vs. predicted P_accept in 6 quantile bins  \n   \u2022 Select final model: \u0394BIC \u2265 4 vs. runner\u2010up, all r \u2265 0.85, accuracy \u2265 +10% over 2\u2010param baseline  \n\n7. Deliverables  \n   \u2022 <MODEL>\u2026</MODEL>: exact utility formula only  \n   \u2022 <VARIABLES>\u2026</VARIABLES>: all features & parameters with ranges, priors, learnable flags  \n   \u2022 <target_variable>accept</target_variable>  \n\n8. Summary (<SUMMARY>\u2026</SUMMARY>)  \n   \u2022 State the family chosen, describe each term, emphasize shrinkage settings, fixed \u03c4, recovery threshold (r \u2265 0.85), any parameters pruned  \n\nEncouragement: You may propose novel \u22643\u2010parameter transforms (e.g. dev\u00b7log(1+dev), thresholded splines, tanh\u2010scaled dev) or bespoke asymmetries, but always apply orthonormalization or piecewise separation to ensure identifiability and meet the stringent recovery & selection criteria.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nU = alpha + beta_neg * neg_dev_std + beta_pos * pos_dev_std\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Amount proposed to participant in \u00a3\",\n      \"range\": { \"min\": 0, \"max\": \"combined_earning\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount available to split in \u00a3\",\n      \"range\": { \"min\": 0, \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"z_share\": {\n      \"description\": \"Proportion allocated to participant: split_self/combined_earning\",\n      \"range\": { \"min\": 0, \"max\": 1, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"neg_dev\": {\n      \"description\": \"Negative deviation from equal split: max(0.5 - z_share, 0)\",\n      \"range\": { \"min\": 0, \"max\": 0.5, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"pos_dev\": {\n      \"description\": \"Positive deviation from equal split: max(z_share - 0.5, 0)\",\n      \"range\": { \"min\": 0, \"max\": 0.5, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"neg_dev_std\": {\n      \"description\": \"Standardized neg_dev (z-scored on training set)\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"pos_dev_std\": {\n      \"description\": \"Standardized pos_dev (z-scored on training set)\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Intercept parameter\",\n      \"range\": { \"min\": -0.2, \"max\": 0.2, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"normal\", \"parameters\": { \"mean\": 0, \"sd\": 0.05 } },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_neg\": {\n      \"description\": \"Sensitivity to disadvantageous inequity (below 0.5)\",\n      \"range\": { \"min\": -0.2, \"max\": 0.2, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"normal\", \"parameters\": { \"mean\": 0, \"sd\": 0.05 } },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_pos\": {\n      \"description\": \"Sensitivity to advantageous inequity (above 0.5)\",\n      \"range\": { \"min\": -0.2, \"max\": 0.2, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"normal\", \"parameters\": { \"mean\": 0, \"sd\": 0.05 } },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA piecewise inequity\u2010aversion utility model separating under\u2010 and over\u2010equal splits. Negative and positive deviations from 0.5 are standardized and weighted by two sensitivity parameters (\u03b2_neg, \u03b2_pos) plus an intercept (\u03b1). All three parameters have Normal(0,0.05) priors truncated to [\u20130.2,0.2], with fixed logistic temperature (\u03c4=1). Parameter recovery requires Pearson r\u22650.85.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta_neg', 'beta_pos']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = alpha + beta_neg * neg_dev_std + beta_pos * pos_dev_std\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Amount proposed to participant in \\u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"combined_earning\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount available to split in \\u00a3\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"z_share\": {\n      \"description\": \"Proportion allocated to participant: split_self/combined_earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"neg_dev\": {\n      \"description\": \"Negative deviation from equal split: max(0.5 - z_share, 0)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"pos_dev\": {\n      \"description\": \"Positive deviation from equal split: max(z_share - 0.5, 0)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"neg_dev_std\": {\n      \"description\": \"Standardized neg_dev (z-scored on training set)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"pos_dev_std\": {\n      \"description\": \"Standardized pos_dev (z-scored on training set)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Intercept parameter\",\n      \"range\": {\n        \"min\": -0.2,\n        \"max\": 0.2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"parameters\": {\n          \"mean\": 0,\n          \"sd\": 0.05\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_neg\": {\n      \"description\": \"Sensitivity to disadvantageous inequity (below 0.5)\",\n      \"range\": {\n        \"min\": -0.2,\n        \"max\": 0.2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"parameters\": {\n          \"mean\": 0,\n          \"sd\": 0.05\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_pos\": {\n      \"description\": \"Sensitivity to advantageous inequity (above 0.5)\",\n      \"range\": {\n        \"min\": -0.2,\n        \"max\": 0.2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"parameters\": {\n          \"mean\": 0,\n          \"sd\": 0.05\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=0.0, beta_neg=0.0, beta_pos=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        neg_dev_std = trial.get(\"neg_dev_std\", 0)\n        pos_dev_std = trial.get(\"pos_dev_std\", 0)\n\n        U = alpha + beta_neg * neg_dev_std + beta_pos * pos_dev_std\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1746087610.414964
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Intercept parameter",
      "range": {
        "min": -0.2,
        "max": 0.2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "normal",
        "parameters": {
          "mean": 0,
          "sd": 0.05
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta_neg": {
      "description": "Sensitivity to disadvantageous inequity (below 0.5)",
      "range": {
        "min": -0.2,
        "max": 0.2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "normal",
        "parameters": {
          "mean": 0,
          "sd": 0.05
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta_pos": {
      "description": "Sensitivity to advantageous inequity (above 0.5)",
      "range": {
        "min": -0.2,
        "max": 0.2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "normal",
        "parameters": {
          "mean": 0,
          "sd": 0.05
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = alpha + beta_neg * neg_dev_std + beta_pos * pos_dev_std",
  "variable_descriptions": {
    "split_self": {
      "description": "Amount proposed to participant in \u00a3",
      "range": {
        "min": 0,
        "max": "combined_earning",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount available to split in \u00a3",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "z_share": {
      "description": "Proportion allocated to participant: split_self/combined_earning",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "neg_dev": {
      "description": "Negative deviation from equal split: max(0.5 - z_share, 0)",
      "range": {
        "min": 0,
        "max": 0.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "pos_dev": {
      "description": "Positive deviation from equal split: max(z_share - 0.5, 0)",
      "range": {
        "min": 0,
        "max": 0.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "neg_dev_std": {
      "description": "Standardized neg_dev (z-scored on training set)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "pos_dev_std": {
      "description": "Standardized pos_dev (z-scored on training set)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Intercept parameter",
      "range": {
        "min": -0.2,
        "max": 0.2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "normal",
        "parameters": {
          "mean": 0,
          "sd": 0.05
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta_neg": {
      "description": "Sensitivity to disadvantageous inequity (below 0.5)",
      "range": {
        "min": -0.2,
        "max": 0.2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "normal",
        "parameters": {
          "mean": 0,
          "sd": 0.05
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta_pos": {
      "description": "Sensitivity to advantageous inequity (above 0.5)",
      "range": {
        "min": -0.2,
        "max": 0.2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "normal",
        "parameters": {
          "mean": 0,
          "sd": 0.05
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A piecewise inequity\u2010aversion utility model separating under\u2010 and over\u2010equal splits. Negative and positive deviations from 0.5 are standardized and weighted by two sensitivity parameters (\u03b2_neg, \u03b2_pos) plus an intercept (\u03b1). All three parameters have Normal(0,0.05) priors truncated to [\u20130.2,0.2], with fixed logistic temperature (\u03c4=1). Parameter recovery requires Pearson r\u22650.85.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nU = alpha + beta_neg * neg_dev_std + beta_pos * pos_dev_std\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"split_self\": {\n      \"description\": \"Amount proposed to participant in \u00a3\",\n      \"range\": { \"min\": 0, \"max\": \"combined_earning\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount available to split in \u00a3\",\n      \"range\": { \"min\": 0, \"max\": \"inf\", \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"z_share\": {\n      \"description\": \"Proportion allocated to participant: split_self/combined_earning\",\n      \"range\": { \"min\": 0, \"max\": 1, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"neg_dev\": {\n      \"description\": \"Negative deviation from equal split: max(0.5 - z_share, 0)\",\n      \"range\": { \"min\": 0, \"max\": 0.5, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"pos_dev\": {\n      \"description\": \"Positive deviation from equal split: max(z_share - 0.5, 0)\",\n      \"range\": { \"min\": 0, \"max\": 0.5, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"neg_dev_std\": {\n      \"description\": \"Standardized neg_dev (z-scored on training set)\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"pos_dev_std\": {\n      \"description\": \"Standardized pos_dev (z-scored on training set)\",\n      \"range\": { \"min\": \"-inf\", \"max\": \"inf\" },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Intercept parameter\",\n      \"range\": { \"min\": -0.2, \"max\": 0.2, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"normal\", \"parameters\": { \"mean\": 0, \"sd\": 0.05 } },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_neg\": {\n      \"description\": \"Sensitivity to disadvantageous inequity (below 0.5)\",\n      \"range\": { \"min\": -0.2, \"max\": 0.2, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"normal\", \"parameters\": { \"mean\": 0, \"sd\": 0.05 } },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_pos\": {\n      \"description\": \"Sensitivity to advantageous inequity (above 0.5)\",\n      \"range\": { \"min\": -0.2, \"max\": 0.2, \"inclusive_min\": true, \"inclusive_max\": true },\n      \"distribution\": { \"type\": \"normal\", \"parameters\": { \"mean\": 0, \"sd\": 0.05 } },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA piecewise inequity\u2010aversion utility model separating under\u2010 and over\u2010equal splits. Negative and positive deviations from 0.5 are standardized and weighted by two sensitivity parameters (\u03b2_neg, \u03b2_pos) plus an intercept (\u03b1). All three parameters have Normal(0,0.05) priors truncated to [\u20130.2,0.2], with fixed logistic temperature (\u03c4=1). Parameter recovery requires Pearson r\u22650.85.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = alpha + beta_neg * neg_dev_std + beta_pos * pos_dev_std\nSummary: A piecewise inequity\u2010aversion utility model separating under\u2010 and over\u2010equal splits. Negative and positive deviations from 0.5 are standardized and weighted by two sensitivity parameters (\u03b2_neg, \u03b2_pos) plus an intercept (\u03b1). All three parameters have Normal(0,0.05) priors truncated to [\u20130.2,0.2], with fixed logistic temperature (\u03c4=1). Parameter recovery requires Pearson r\u22650.85.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=0.0, beta_neg=0.0, beta_pos=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        neg_dev_std = trial.get(\"neg_dev_std\", 0)\n        pos_dev_std = trial.get(\"pos_dev_std\", 0)\n\n        U = alpha + beta_neg * neg_dev_std + beta_pos * pos_dev_std\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5216727716727717,
  "group_accuracies": {
    "Control": 0.5251937984496124,
    "Cocaine": 0.5185185185185185
  },
  "group_parameter_averages": {
    "Control": {
      "alpha": 0.06098723981204829,
      "beta_neg": 0.004101807106772296,
      "beta_pos": 0.018332277641196295
    },
    "Cocaine": {
      "alpha": 0.030102136097771785,
      "beta_neg": -0.011128935989216443,
      "beta_pos": 0.00782795694570797
    }
  },
  "fitting_results": [
    {
      "alpha": -0.2,
      "beta_neg": -0.08991437690386538,
      "beta_pos": 0.08846959334268356,
      "success": true,
      "log_likelihood": -22.13299929106908,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 4.360043836241551e-08,
      "beta_neg": -0.053130008706214954,
      "beta_pos": 0.13413558305845363,
      "success": true,
      "log_likelihood": -24.953298492958034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.11122562959048955,
      "beta_neg": 0.0943554077054306,
      "beta_pos": 0.0873595304687807,
      "success": true,
      "log_likelihood": -24.897714324101933,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": 0.018335689352857176,
      "beta_pos": -0.008062308346649033,
      "success": true,
      "log_likelihood": -24.53299929058587,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": 0.04885592908842762,
      "beta_pos": -0.19527134981387606,
      "success": true,
      "log_likelihood": -24.732999290545603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": -0.049568156080978865,
      "beta_pos": -0.03271336011265649,
      "success": true,
      "log_likelihood": -24.132999290666405,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.1492718104158683,
      "beta_pos": -0.11032876261984237,
      "success": true,
      "log_likelihood": -21.532999291189878,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": -0.07609996779324174,
      "beta_pos": 0.15725164685977883,
      "success": true,
      "log_likelihood": -23.93299929070667,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.09995072665098925,
      "beta_pos": -0.1828941829717553,
      "success": true,
      "log_likelihood": -21.532999291189878,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": 0.1351423153318576,
      "beta_pos": -0.14456521456830027,
      "success": true,
      "log_likelihood": -24.332999290626137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": 0.0571259023039562,
      "beta_pos": -0.0972351951476167,
      "success": true,
      "log_likelihood": -24.732999290545603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": -0.03585371337371965,
      "beta_pos": 0.016051889667617697,
      "success": true,
      "log_likelihood": -22.332999291028813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": -0.042188694894335244,
      "beta_pos": 0.1858290185719041,
      "success": true,
      "log_likelihood": -24.532999290585874,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": -0.022422026664225797,
      "beta_pos": -0.04197623901285086,
      "success": true,
      "log_likelihood": -21.532999291189878,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.11352126173407012,
      "beta_pos": -0.16409522416987402,
      "success": true,
      "log_likelihood": -21.532999291189878,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.050129791855335726,
      "beta_pos": -0.029920219623753214,
      "success": true,
      "log_likelihood": -21.532999291189878,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": -0.14789334446048077,
      "beta_pos": 0.17609028500827456,
      "success": true,
      "log_likelihood": -21.532999291189878,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.1112843068439901,
      "beta_pos": -0.08707652821773047,
      "success": true,
      "log_likelihood": -22.532999290988542,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.15773317247587304,
      "beta_pos": 0.019886014967097576,
      "success": true,
      "log_likelihood": -22.33299929102881,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": -0.03551918803793913,
      "beta_pos": -0.011087193644744364,
      "success": true,
      "log_likelihood": -21.532999291189878,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.10949485337528048,
      "beta_pos": -0.17844391005858828,
      "success": true,
      "log_likelihood": -24.732999290545603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": -0.08893155380880949,
      "beta_pos": 0.09380620820935148,
      "success": true,
      "log_likelihood": -22.532999290988542,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": -0.10508782998704547,
      "beta_pos": -0.1610451677482737,
      "success": true,
      "log_likelihood": -24.132999290666408,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.111225644068696,
      "beta_neg": -0.08810130400309722,
      "beta_pos": 0.004878757003154016,
      "success": true,
      "log_likelihood": -24.89771432410192,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -1.5142310702032756e-08,
      "beta_neg": -0.11427464071815248,
      "beta_pos": 0.19994639176944673,
      "success": true,
      "log_likelihood": -24.953298492958023,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.16527923351970897,
      "beta_pos": 0.07061104965691994,
      "success": true,
      "log_likelihood": -24.53299929058587,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": -0.11718219816668199,
      "beta_pos": 0.11888845746901966,
      "success": true,
      "log_likelihood": -24.732999290545603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": -0.1953096927306015,
      "beta_pos": -0.12805001007882255,
      "success": true,
      "log_likelihood": -23.53299929078721,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.1585116952939989,
      "beta_pos": 0.16615465250265954,
      "success": true,
      "log_likelihood": -22.33299929102881,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.16542442472793023,
      "beta_pos": 0.1254716596787126,
      "success": true,
      "log_likelihood": -23.13299929086774,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": -0.11919008509830342,
      "beta_pos": 0.16849021715033385,
      "success": true,
      "log_likelihood": -21.532999291189878,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": -0.0871529315457341,
      "beta_pos": 0.12880820010655258,
      "success": true,
      "log_likelihood": -22.13299929106908,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": -0.09919482984403692,
      "beta_pos": -0.06765891945781752,
      "success": true,
      "log_likelihood": -24.53299929058587,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": -0.14223352966337305,
      "beta_pos": 0.09823847065736785,
      "success": true,
      "log_likelihood": -24.332999290626137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.07327408837727878,
      "beta_pos": 0.15865394309169195,
      "success": true,
      "log_likelihood": -21.532999291189878,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": -0.012667646402993948,
      "beta_pos": 0.1456224107650292,
      "success": true,
      "log_likelihood": -24.132999290666405,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": -0.12974139733649195,
      "beta_pos": 0.026546883799194176,
      "success": true,
      "log_likelihood": -23.73299929074694,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 9.800763180153532e-09,
      "beta_neg": 0.1837995485119409,
      "beta_pos": 0.12740973096636793,
      "success": true,
      "log_likelihood": -24.953298492958037,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": -0.16377318550030698,
      "beta_pos": -0.07803540434676251,
      "success": true,
      "log_likelihood": -23.93299929070667,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.1122069917578003,
      "beta_pos": 0.004064828050785119,
      "success": true,
      "log_likelihood": -22.132999291069076,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.05680398825830785,
      "beta_pos": -0.010061189462637454,
      "success": true,
      "log_likelihood": -24.332999290626137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": 0.10996753911040119,
      "beta_pos": 0.10305886805384556,
      "success": true,
      "log_likelihood": -23.13299929086774,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.021339330620535446,
      "beta_pos": -0.08891597290103098,
      "success": true,
      "log_likelihood": -21.73299929114961,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.1317637843583525,
      "beta_pos": -0.045507929521940854,
      "success": true,
      "log_likelihood": -24.732999290545603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": -0.042666192908344114,
      "beta_pos": 0.126531582601338,
      "success": true,
      "log_likelihood": -24.332999290626137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.08425606431594324,
      "beta_pos": 0.06308082350595223,
      "success": true,
      "log_likelihood": -23.532999290787206,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.11122495651016104,
      "beta_neg": -0.03562581448949603,
      "beta_pos": 0.07925009025811935,
      "success": true,
      "log_likelihood": -24.897714324103966,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": -0.162735550871632,
      "beta_pos": -0.15369178675845238,
      "success": true,
      "log_likelihood": -24.33299929062614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": -0.10531958134690932,
      "beta_pos": -0.19053186536646108,
      "success": true,
      "log_likelihood": -24.53299929058587,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.11122575466586561,
      "beta_neg": -0.04417691794475162,
      "beta_pos": 0.14172092914341472,
      "success": true,
      "log_likelihood": -24.897714324101976,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": -0.10830666301490109,
      "beta_pos": 0.014474560604134185,
      "success": true,
      "log_likelihood": -23.73299929074694,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": -0.0229875317000566,
      "beta_pos": 0.005596747501853738,
      "success": true,
      "log_likelihood": -22.532999290988545,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.1112256914902506,
      "beta_neg": -0.04120027764152606,
      "beta_pos": 0.09395229131842381,
      "success": true,
      "log_likelihood": -24.897714324101933,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": -0.00015628664507860712,
      "beta_pos": 0.03172792350422568,
      "success": true,
      "log_likelihood": -24.53299929058587,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": 0.05527018121769989,
      "beta_pos": -0.14756245244363658,
      "success": true,
      "log_likelihood": -24.33299929062614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": -0.027958783288603767,
      "beta_pos": 0.18049266336218112,
      "success": true,
      "log_likelihood": -23.932999290706675,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": -0.12085910033383573,
      "beta_pos": 0.1613624153860908,
      "success": true,
      "log_likelihood": -23.53299929078721,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": -0.17919752397862365,
      "beta_pos": -0.18531993137799332,
      "success": true,
      "log_likelihood": -22.33299929102881,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": -0.06440461060815306,
      "beta_pos": 0.11286201558400027,
      "success": true,
      "log_likelihood": -22.332999291028813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.055893956953648516,
      "beta_pos": 0.09876186731802672,
      "success": true,
      "log_likelihood": -22.932999290908008,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.02683464916843445,
      "beta_pos": 0.06799106206010458,
      "success": true,
      "log_likelihood": -24.332999290626137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -4.146668929320452e-08,
      "beta_neg": -0.032771872951143616,
      "beta_pos": -0.14078314485496524,
      "success": true,
      "log_likelihood": -24.953298492958037,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": -0.14300573608953507,
      "beta_pos": -0.10671577422788517,
      "success": true,
      "log_likelihood": -22.13299929106908,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": -0.012627218924143063,
      "beta_pos": -0.12941225268861017,
      "success": true,
      "log_likelihood": -24.732999290545607,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": -0.028873343939078533,
      "beta_pos": 0.1973746895022545,
      "success": true,
      "log_likelihood": -23.13299929086774,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.1949270959977209,
      "beta_pos": -0.08945815286856158,
      "success": true,
      "log_likelihood": -24.732999290545603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.10153299520420295,
      "beta_pos": -0.17114447494988638,
      "success": true,
      "log_likelihood": -22.132999291069076,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": -0.11504085485508911,
      "beta_pos": 0.07555740024807589,
      "success": true,
      "log_likelihood": -22.532999290988542,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.08456269207323591,
      "beta_pos": -0.02857611999890275,
      "success": true,
      "log_likelihood": -24.732999290545603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.038451655739323215,
      "beta_pos": 0.04828907390324741,
      "success": true,
      "log_likelihood": -22.132999291069076,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": 0.11725368740340886,
      "beta_pos": -0.13993665609864442,
      "success": true,
      "log_likelihood": -22.332999291028813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": 0.16850509270522224,
      "beta_pos": 0.16377577808603871,
      "success": true,
      "log_likelihood": -22.532999290988545,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.1112256389520747,
      "beta_neg": -0.19945201885667121,
      "beta_pos": -0.1157258309054574,
      "success": true,
      "log_likelihood": -24.89771432410191,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.10301534350325847,
      "beta_pos": -0.1429255631485019,
      "success": true,
      "log_likelihood": -23.13299929086774,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -1.1631478873227747e-07,
      "beta_neg": -0.0439013933325377,
      "beta_pos": 0.1329201156432706,
      "success": true,
      "log_likelihood": -24.953298492958083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": -0.16493125396661412,
      "beta_pos": 0.08944250164099887,
      "success": true,
      "log_likelihood": -23.73299929074694,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.08012918002138492,
      "beta_pos": -0.056594404328407205,
      "success": true,
      "log_likelihood": -21.932999291109343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": 0.14069579778281277,
      "beta_pos": -0.14057072599564988,
      "success": true,
      "log_likelihood": -21.932999291109347,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": -0.17463134915129697,
      "beta_pos": 0.07538451542634961,
      "success": true,
      "log_likelihood": -24.332999290626137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": -0.08156376040392704,
      "beta_pos": -0.1298315258257442,
      "success": true,
      "log_likelihood": -22.13299929106908,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.11122586678725373,
      "beta_neg": -0.04037482081209115,
      "beta_pos": 0.08853226979515327,
      "success": true,
      "log_likelihood": -24.89771432410216,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": -0.14286032822236733,
      "beta_pos": 0.1522316140948048,
      "success": true,
      "log_likelihood": -22.132999291069076,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": -0.0691207131517016,
      "beta_pos": 0.08746655988832874,
      "success": true,
      "log_likelihood": -22.332999291028813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -1.3034355292565824e-08,
      "beta_neg": 0.1722366983615382,
      "beta_pos": -0.023583818471951096,
      "success": true,
      "log_likelihood": -24.953298492958034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.0047488596065072,
      "beta_pos": 0.1538801542654636,
      "success": true,
      "log_likelihood": -24.332999290626137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": -0.19923708742529272,
      "beta_pos": -0.01091598703816049,
      "success": true,
      "log_likelihood": -22.332999291028813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": -0.11757880066782977,
      "beta_pos": 0.005399930810891407,
      "success": true,
      "log_likelihood": -23.73299929074694,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.2,
      "beta_neg": 0.19673455748660335,
      "beta_pos": -0.11027700282109731,
      "success": true,
      "log_likelihood": -23.132999290867744,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.1772430139391516,
      "beta_pos": 0.07834585922260512,
      "success": true,
      "log_likelihood": -21.932999291109343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.11122520489672674,
      "beta_neg": -0.12156827876681833,
      "beta_pos": 0.09164975624688504,
      "success": true,
      "log_likelihood": -24.897714324102733,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.2,
      "beta_neg": 0.17488943296721055,
      "beta_pos": 0.016752142162659217,
      "success": true,
      "log_likelihood": -23.73299929074694,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.17733323815239996,
        "p": 0.077554554455587
      },
      "beta_neg": {
        "r": -0.0286709371611937,
        "p": 0.7770519378450129
      },
      "beta_pos": {
        "r": 0.036366166426770624,
        "p": 0.7194391985135659
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 57.66797331968606,
  "bic_Control": 57.37889621910292,
  "bic_Cocaine": 57.92693822229179,
  "bic_results": {
    "average_bic": 57.66797331968606,
    "individual_bics": [
      55.016555397506494,
      60.657153801284394,
      60.545985463572194,
      59.81655539654007,
      60.21655539645954,
      59.016555396701136,
      53.81655539774809,
      58.61655539678168,
      53.81655539774809,
      59.41655539662061,
      60.21655539645954,
      55.41655539742595,
      59.81655539654008,
      53.81655539774809,
      53.81655539774809,
      53.81655539774809,
      53.81655539774809,
      55.81655539734541,
      55.41655539742595,
      53.81655539774809,
      60.21655539645954,
      55.81655539734541,
      59.01655539670115,
      60.545985463572165,
      60.65715380128438,
      59.81655539654007,
      60.21655539645954,
      57.816555396942746,
      55.41655539742595,
      57.016555397103815,
      53.81655539774809,
      55.016555397506494,
      59.81655539654007,
      59.41655539662061,
      53.81655539774809,
      59.016555396701136,
      58.216555396862205,
      60.65715380128441,
      58.61655539678168,
      55.01655539750648,
      59.41655539662061,
      57.016555397103815,
      54.21655539766755,
      60.21655539645954,
      59.41655539662061,
      57.816555396942746,
      60.54598546357626,
      59.41655539662061,
      59.81655539654007,
      60.54598546357228,
      58.216555396862205,
      55.816555397345425,
      60.545985463572194,
      59.81655539654007,
      59.41655539662061,
      58.61655539678168,
      57.816555396942746,
      55.41655539742595,
      55.41655539742595,
      56.61655539718434,
      59.41655539662061,
      60.65715380128441,
      55.016555397506494,
      60.21655539645954,
      57.016555397103815,
      60.21655539645954,
      55.01655539750648,
      55.81655539734541,
      60.21655539645954,
      55.01655539750648,
      55.41655539742595,
      55.816555397345425,
      60.54598546357215,
      57.016555397103815,
      60.657153801284494,
      58.216555396862205,
      54.61655539758702,
      54.61655539758702,
      59.41655539662061,
      55.016555397506494,
      60.54598546357265,
      55.01655539750648,
      55.41655539742595,
      60.657153801284394,
      59.41655539662061,
      55.41655539742595,
      58.216555396862205,
      57.016555397103815,
      54.61655539758702,
      60.5459854635738,
      58.216555396862205
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        55.016555397506494,
        60.657153801284394,
        60.545985463572194,
        59.81655539654007,
        60.21655539645954,
        59.016555396701136,
        53.81655539774809,
        58.61655539678168,
        53.81655539774809,
        59.41655539662061,
        60.21655539645954,
        55.41655539742595,
        59.81655539654008,
        53.81655539774809,
        53.81655539774809,
        53.81655539774809,
        53.81655539774809,
        55.81655539734541,
        55.41655539742595,
        53.81655539774809,
        60.21655539645954,
        55.81655539734541,
        59.01655539670115,
        60.545985463572165,
        60.65715380128438,
        59.81655539654007,
        60.21655539645954,
        57.816555396942746,
        55.41655539742595,
        57.016555397103815,
        53.81655539774809,
        55.016555397506494,
        59.81655539654007,
        59.41655539662061,
        53.81655539774809,
        59.016555396701136,
        58.216555396862205,
        60.65715380128441,
        58.61655539678168,
        55.01655539750648,
        59.41655539662061,
        57.016555397103815,
        54.21655539766755
      ],
      "Cocaine": [
        60.21655539645954,
        59.41655539662061,
        57.816555396942746,
        60.54598546357626,
        59.41655539662061,
        59.81655539654007,
        60.54598546357228,
        58.216555396862205,
        55.816555397345425,
        60.545985463572194,
        59.81655539654007,
        59.41655539662061,
        58.61655539678168,
        57.816555396942746,
        55.41655539742595,
        55.41655539742595,
        56.61655539718434,
        59.41655539662061,
        60.65715380128441,
        55.016555397506494,
        60.21655539645954,
        57.016555397103815,
        60.21655539645954,
        55.01655539750648,
        55.81655539734541,
        60.21655539645954,
        55.01655539750648,
        55.41655539742595,
        55.816555397345425,
        60.54598546357215,
        57.016555397103815,
        60.657153801284494,
        58.216555396862205,
        54.61655539758702,
        54.61655539758702,
        59.41655539662061,
        55.016555397506494,
        60.54598546357265,
        55.01655539750648,
        55.41655539742595,
        60.657153801284394,
        59.41655539662061,
        55.41655539742595,
        58.216555396862205,
        57.016555397103815,
        54.61655539758702,
        60.5459854635738,
        58.216555396862205
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.177\n- beta_neg: r = -0.029\n- beta_pos: r = 0.036",
  "previous_models": [
    "Specification: U = alpha + beta_neg * neg_dev_std + beta_pos * pos_dev_std\nSummary: A piecewise inequity\u2010aversion utility model separating under\u2010 and over\u2010equal splits. Negative and positive deviations from 0.5 are standardized and weighted by two sensitivity parameters (\u03b2_neg, \u03b2_pos) plus an intercept (\u03b1). All three parameters have Normal(0,0.05) priors truncated to [\u20130.2,0.2], with fixed logistic temperature (\u03c4=1). Parameter recovery requires Pearson r\u22650.85.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 57.66797331968606\nOverall Accuracy: 0.5217\nGroup Accuracies:\n- Control: 0.5252\n- Cocaine: 0.5185\n\nParameter Recovery:\n- alpha: r = 0.177\n- beta_neg: r = -0.029\n- beta_pos: r = 0.036"
  ]
}