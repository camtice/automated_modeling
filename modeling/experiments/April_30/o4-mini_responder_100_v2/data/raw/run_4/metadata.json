{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "\n\nBe bold and go beyond a single squared\u2010inequity term. Your goal is to build a compact (\u22643 learnable parameters), interpretable logistic utility model that (a) captures self\u2010interest and asymmetric fairness sensitivities, (b) yields a lower BIC, higher accuracy, and strong parameter recovery (r\u2009>\u20090.8 on all parameters), and (c) fits the responder \u201caccept\u201d outcome.\n\n1. Psychological Drivers & Transformations  \n   \u2022 Separate disadvantageous and advantageous inequity: define two fairness metrics\u2014one activated when share <50% (\u201cenvy\u201d), one when share >50% (\u201cguilt\u201d).  \n   \u2022 Consider a non\u2010linear sensitivity (e.g. power, absolute value) so that small deviations feel smaller than large ones.  \n   \u2022 Orthogonalize fairness from self\u2010interest by residualizing: regress fairness metrics on z_share and use residuals to ensure near zero correlation.\n\n2. Model Form & Constraints  \n   \u2022 Between <MODEL>\u2026</MODEL>, specify:  \n     \u2013 An intercept.  \n     \u2013 One weight for self\u2010interest (z_share).  \n     \u2013 One weight that applies piecewise to disadvantageous vs advantageous residualized fairness.  \n   \u2022 No more than three learnable parameters.  \n   \u2022 Bound each parameter tightly (e.g. [\u20133,3] or [\u20132,2]) to aid recovery.  \n   \u2022 Use a logistic link with temperature 1.\n\n3. Standardization & Orthogonalization  \n   \u2022 Compute z_share = (split_self/combined_earning \u2013 \u03bc_share)/\u03c3_share across responder trials.  \n   \u2022 Let raw_fairness = |split_self/combined_earning \u2013 0.5|.  \n   \u2022 Split raw_fairness into raw_dis = max(0, 0.5 \u2013 share) and raw_adv = max(0, share \u2013 0.5).  \n   \u2022 Residualize each: res_dis = raw_dis \u2212 \u0177_dis (fit raw_dis \u223c z_share), and similarly res_adv. Then z\u2010score res_dis and res_adv.\n\n4. Parameter Recovery & Fit Criteria  \n   \u2022 Simulate \u2265200 datasets using true parameters drawn uniformly from your specified bounds.  \n   \u2022 Re\u2010fit the model to each simulated dataset.  \n   \u2022 Require Pearson r\u2009>\u20090.80 for every learnable parameter.  \n   \u2022 Report average BIC across control and treatment groups; target a reduction of \u22655 points relative to the baseline.  \n   \u2022 Report accuracy on held\u2010out or cross\u2010validated responder trials.\n\n5. Variable Specification (<VARIABLES>\u2026</VARIABLES>)  \n   \u2022 For each learnable parameter: include description, finite bounds, uniform priors, and plan for recovery sims.  \n   \u2022 For calculated predictors: document the standardization and residualization steps.  \n   \u2022 Identify <target_variable>accept</target_variable>.\n\n6. Summary (<SUMMARY>\u2026</SUMMARY>)  \n   \u2022 Briefly describe the psychological rationale: asymmetric fairness (envy vs guilt), self\u2010interest.  \n   \u2022 Note the non\u2010linear/orthogonalization steps.  \n   \u2022 Explain why tighter bounds, residualization, and piecewise fairness should boost identifiability, lower BIC, and improve recovery and accuracy.\n\nBe creative\u2014piecewise or non\u2010linear transforms are encouraged so long as you remain within three learnable parameters.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: \n\nBe bold and go beyond a single squared\u2010inequity term. Your goal is to build a compact (\u22643 learnable parameters), interpretable logistic utility model that (a) captures self\u2010interest and asymmetric fairness sensitivities, (b) yields a lower BIC, higher accuracy, and strong parameter recovery (r\u2009>\u20090.8 on all parameters), and (c) fits the responder \u201caccept\u201d outcome.\n\n1. Psychological Drivers & Transformations  \n   \u2022 Separate disadvantageous and advantageous inequity: define two fairness metrics\u2014one activated when share <50% (\u201cenvy\u201d), one when share >50% (\u201cguilt\u201d).  \n   \u2022 Consider a non\u2010linear sensitivity (e.g. power, absolute value) so that small deviations feel smaller than large ones.  \n   \u2022 Orthogonalize fairness from self\u2010interest by residualizing: regress fairness metrics on z_share and use residuals to ensure near zero correlation.\n\n2. Model Form & Constraints  \n   \u2022 Between <MODEL>\u2026</MODEL>, specify:  \n     \u2013 An intercept.  \n     \u2013 One weight for self\u2010interest (z_share).  \n     \u2013 One weight that applies piecewise to disadvantageous vs advantageous residualized fairness.  \n   \u2022 No more than three learnable parameters.  \n   \u2022 Bound each parameter tightly (e.g. [\u20133,3] or [\u20132,2]) to aid recovery.  \n   \u2022 Use a logistic link with temperature 1.\n\n3. Standardization & Orthogonalization  \n   \u2022 Compute z_share = (split_self/combined_earning \u2013 \u03bc_share)/\u03c3_share across responder trials.  \n   \u2022 Let raw_fairness = |split_self/combined_earning \u2013 0.5|.  \n   \u2022 Split raw_fairness into raw_dis = max(0, 0.5 \u2013 share) and raw_adv = max(0, share \u2013 0.5).  \n   \u2022 Residualize each: res_dis = raw_dis \u2212 \u0177_dis (fit raw_dis \u223c z_share), and similarly res_adv. Then z\u2010score res_dis and res_adv.\n\n4. Parameter Recovery & Fit Criteria  \n   \u2022 Simulate \u2265200 datasets using true parameters drawn uniformly from your specified bounds.  \n   \u2022 Re\u2010fit the model to each simulated dataset.  \n   \u2022 Require Pearson r\u2009>\u20090.80 for every learnable parameter.  \n   \u2022 Report average BIC across control and treatment groups; target a reduction of \u22655 points relative to the baseline.  \n   \u2022 Report accuracy on held\u2010out or cross\u2010validated responder trials.\n\n5. Variable Specification (<VARIABLES>\u2026</VARIABLES>)  \n   \u2022 For each learnable parameter: include description, finite bounds, uniform priors, and plan for recovery sims.  \n   \u2022 For calculated predictors: document the standardization and residualization steps.  \n   \u2022 Identify <target_variable>accept</target_variable>.\n\n6. Summary (<SUMMARY>\u2026</SUMMARY>)  \n   \u2022 Briefly describe the psychological rationale: asymmetric fairness (envy vs guilt), self\u2010interest.  \n   \u2022 Note the non\u2010linear/orthogonalization steps.  \n   \u2022 Explain why tighter bounds, residualization, and piecewise fairness should boost identifiability, lower BIC, and improve recovery and accuracy.\n\nBe creative\u2014piecewise or non\u2010linear transforms are encouraged so long as you remain within three learnable parameters.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nU = alpha + beta * z_share + gamma * (res_dis_z * I_dis + res_adv_z * I_adv)\n</MODEL>\n<VARIABLES>\n{\n  \"variables\": {\n    \"alpha\": {\n      \"description\": \"Intercept term for baseline acceptance utility\",\n      \"range\": {\n        \"min\": -3,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -3,\n          \"max\": 3\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Weight on self\u2010interest (standardized share)\",\n      \"range\": {\n        \"min\": -3,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -3,\n          \"max\": 3\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Weight on residualized fairness (piecewise envy/guilt)\",\n      \"range\": {\n        \"min\": -3,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -3,\n          \"max\": 3\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"share\": {\n      \"description\": \"Proposed share to self: split_self / combined_earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"z_share\": {\n      \"description\": \"Z\u2010scored share across responder trials: (share \u2013 \u03bc_share)/\u03c3_share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"raw_dis\": {\n      \"description\": \"Raw disadvantageous inequity: max(0, 0.5 \u2013 share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"raw_adv\": {\n      \"description\": \"Raw advantageous inequity: max(0, share \u2013 0.5)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"res_dis_z\": {\n      \"description\": \"Z\u2010scored residualized disadvantageous fairness: residual of raw_dis \u223c z_share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"res_adv_z\": {\n      \"description\": \"Z\u2010scored residualized advantageous fairness: residual of raw_adv \u223c z_share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"I_dis\": {\n      \"description\": \"Indicator for disadvantageous trial: 1 if share < 0.5, else 0\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"I_adv\": {\n      \"description\": \"Indicator for advantageous trial: 1 if share \u2265 0.5, else 0\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nA logistic utility model combining self\u2010interest (standardized share) and asymmetric fairness sensitivities (disadvantageous vs advantageous inequity). Fairness metrics are orthogonalized from self\u2010interest by regressing raw inequity on z_share and z\u2010scoring residuals. Three tightly bounded parameters (intercept, self\u2010interest weight, fairness weight) ensure identifiability, strong recovery, and improved fit.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = alpha + beta * z_share + gamma * (res_dis_z * I_dis + res_adv_z * I_adv)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"alpha\": {\n      \"description\": \"Intercept term for baseline acceptance utility\",\n      \"range\": {\n        \"min\": -3,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -3,\n          \"max\": 3\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Weight on self\\u2010interest (standardized share)\",\n      \"range\": {\n        \"min\": -3,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -3,\n          \"max\": 3\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Weight on residualized fairness (piecewise envy/guilt)\",\n      \"range\": {\n        \"min\": -3,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -3,\n          \"max\": 3\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"share\": {\n      \"description\": \"Proposed share to self: split_self / combined_earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"z_share\": {\n      \"description\": \"Z\\u2010scored share across responder trials: (share \\u2013 \\u03bc_share)/\\u03c3_share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"raw_dis\": {\n      \"description\": \"Raw disadvantageous inequity: max(0, 0.5 \\u2013 share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"raw_adv\": {\n      \"description\": \"Raw advantageous inequity: max(0, share \\u2013 0.5)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"res_dis_z\": {\n      \"description\": \"Z\\u2010scored residualized disadvantageous fairness: residual of raw_dis \\u223c z_share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"res_adv_z\": {\n      \"description\": \"Z\\u2010scored residualized advantageous fairness: residual of raw_adv \\u223c z_share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"I_dis\": {\n      \"description\": \"Indicator for disadvantageous trial: 1 if share < 0.5, else 0\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"I_adv\": {\n      \"description\": \"Indicator for advantageous trial: 1 if share \\u2265 0.5, else 0\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=0, beta=0, gamma=0):\n    model_predictions = []\n    for trial in trial_data:\n        z_share = trial.get(\"z_share\", 0)\n        res_dis_z = trial.get(\"res_dis_z\", 0)\n        res_adv_z = trial.get(\"res_adv_z\", 0)\n        I_dis = trial.get(\"I_dis\", 0)\n        I_adv = trial.get(\"I_adv\", 0)\n\n        U = alpha + beta * z_share + gamma * (res_dis_z * I_dis + res_adv_z * I_adv)\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1746086921.382571
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Intercept term for baseline acceptance utility",
      "range": {
        "min": -3,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -3,
          "max": 3
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Weight on self\u2010interest (standardized share)",
      "range": {
        "min": -3,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -3,
          "max": 3
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Weight on residualized fairness (piecewise envy/guilt)",
      "range": {
        "min": -3,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -3,
          "max": 3
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = alpha + beta * z_share + gamma * (res_dis_z * I_dis + res_adv_z * I_adv)",
  "variable_descriptions": {
    "alpha": {
      "description": "Intercept term for baseline acceptance utility",
      "range": {
        "min": -3,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -3,
          "max": 3
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Weight on self\u2010interest (standardized share)",
      "range": {
        "min": -3,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -3,
          "max": 3
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Weight on residualized fairness (piecewise envy/guilt)",
      "range": {
        "min": -3,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "min": -3,
          "max": 3
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "share": {
      "description": "Proposed share to self: split_self / combined_earning",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "z_share": {
      "description": "Z\u2010scored share across responder trials: (share \u2013 \u03bc_share)/\u03c3_share",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "raw_dis": {
      "description": "Raw disadvantageous inequity: max(0, 0.5 \u2013 share)",
      "range": {
        "min": 0,
        "max": 0.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "raw_adv": {
      "description": "Raw advantageous inequity: max(0, share \u2013 0.5)",
      "range": {
        "min": 0,
        "max": 0.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "res_dis_z": {
      "description": "Z\u2010scored residualized disadvantageous fairness: residual of raw_dis \u223c z_share",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "res_adv_z": {
      "description": "Z\u2010scored residualized advantageous fairness: residual of raw_adv \u223c z_share",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "I_dis": {
      "description": "Indicator for disadvantageous trial: 1 if share < 0.5, else 0",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "I_adv": {
      "description": "Indicator for advantageous trial: 1 if share \u2265 0.5, else 0",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A logistic utility model combining self\u2010interest (standardized share) and asymmetric fairness sensitivities (disadvantageous vs advantageous inequity). Fairness metrics are orthogonalized from self\u2010interest by regressing raw inequity on z_share and z\u2010scoring residuals. Three tightly bounded parameters (intercept, self\u2010interest weight, fairness weight) ensure identifiability, strong recovery, and improved fit.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nU = alpha + beta * z_share + gamma * (res_dis_z * I_dis + res_adv_z * I_adv)\n</MODEL>\n<VARIABLES>\n{\n  \"variables\": {\n    \"alpha\": {\n      \"description\": \"Intercept term for baseline acceptance utility\",\n      \"range\": {\n        \"min\": -3,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -3,\n          \"max\": 3\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Weight on self\u2010interest (standardized share)\",\n      \"range\": {\n        \"min\": -3,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -3,\n          \"max\": 3\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Weight on residualized fairness (piecewise envy/guilt)\",\n      \"range\": {\n        \"min\": -3,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"min\": -3,\n          \"max\": 3\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"share\": {\n      \"description\": \"Proposed share to self: split_self / combined_earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"z_share\": {\n      \"description\": \"Z\u2010scored share across responder trials: (share \u2013 \u03bc_share)/\u03c3_share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"raw_dis\": {\n      \"description\": \"Raw disadvantageous inequity: max(0, 0.5 \u2013 share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"raw_adv\": {\n      \"description\": \"Raw advantageous inequity: max(0, share \u2013 0.5)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"res_dis_z\": {\n      \"description\": \"Z\u2010scored residualized disadvantageous fairness: residual of raw_dis \u223c z_share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"res_adv_z\": {\n      \"description\": \"Z\u2010scored residualized advantageous fairness: residual of raw_adv \u223c z_share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"I_dis\": {\n      \"description\": \"Indicator for disadvantageous trial: 1 if share < 0.5, else 0\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"I_adv\": {\n      \"description\": \"Indicator for advantageous trial: 1 if share \u2265 0.5, else 0\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nA logistic utility model combining self\u2010interest (standardized share) and asymmetric fairness sensitivities (disadvantageous vs advantageous inequity). Fairness metrics are orthogonalized from self\u2010interest by regressing raw inequity on z_share and z\u2010scoring residuals. Three tightly bounded parameters (intercept, self\u2010interest weight, fairness weight) ensure identifiability, strong recovery, and improved fit.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = alpha + beta * z_share + gamma * (res_dis_z * I_dis + res_adv_z * I_adv)\nSummary: A logistic utility model combining self\u2010interest (standardized share) and asymmetric fairness sensitivities (disadvantageous vs advantageous inequity). Fairness metrics are orthogonalized from self\u2010interest by regressing raw inequity on z_share and z\u2010scoring residuals. Three tightly bounded parameters (intercept, self\u2010interest weight, fairness weight) ensure identifiability, strong recovery, and improved fit.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=0, beta=0, gamma=0):\n    model_predictions = []\n    for trial in trial_data:\n        z_share = trial.get(\"z_share\", 0)\n        res_dis_z = trial.get(\"res_dis_z\", 0)\n        res_adv_z = trial.get(\"res_adv_z\", 0)\n        I_dis = trial.get(\"I_dis\", 0)\n        I_adv = trial.get(\"I_adv\", 0)\n\n        U = alpha + beta * z_share + gamma * (res_dis_z * I_dis + res_adv_z * I_adv)\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6611721611721612,
  "group_accuracies": {
    "Control": 0.6937984496124031,
    "Cocaine": 0.6319444444444444
  },
  "group_parameter_averages": {
    "Control": {
      "alpha": 0.7965226726763481,
      "beta": -0.1952436857844168,
      "gamma": -0.012779274109560531
    },
    "Cocaine": {
      "alpha": 0.03589147651968133,
      "beta": 0.23059828485209385,
      "gamma": -0.34502819091782855
    }
  },
  "fitting_results": [
    {
      "alpha": -2.397895257227677,
      "beta": -2.0758900955478,
      "gamma": 2.9363866170913573,
      "success": true,
      "log_likelihood": -10.326095382821789,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -8.250368222361601e-09,
      "beta": -0.024406118475636784,
      "gamma": -0.5256142839883973,
      "success": true,
      "log_likelihood": -24.95329849295803,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.11122575825392232,
      "beta": 1.6221205495961097,
      "gamma": -2.0001846270969947,
      "success": true,
      "log_likelihood": -24.89771432410199,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.3364714753364668,
      "beta": 0.8492503242376097,
      "gamma": -0.7521474941472035,
      "success": true,
      "log_likelihood": -24.450957568497454,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.22314322646731186,
      "beta": -1.407942853906702,
      "gamma": -2.684567676864553,
      "success": true,
      "log_likelihood": -24.73061675030412,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.5705408208822514,
      "beta": 1.5781755727233975,
      "gamma": 0.16449226478641288,
      "success": true,
      "log_likelihood": -23.545973163917246,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 3.0,
      "beta": 2.3692364696990733,
      "gamma": 0.6788955076038015,
      "success": true,
      "log_likelihood": -1.7491446528754737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.6931473499810323,
      "beta": 0.23104410065610725,
      "gamma": 2.523581344005451,
      "success": true,
      "log_likelihood": -22.91451005141338,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 3.0,
      "beta": -2.784910735899225,
      "gamma": 1.2919586942497023,
      "success": true,
      "log_likelihood": -1.7491446528754737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.45198666081514477,
      "beta": -2.494952405261071,
      "gamma": -1.4754129727758516,
      "success": true,
      "log_likelihood": -24.0569451887335,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.22314354157895938,
      "beta": -1.5371245637146123,
      "gamma": -2.845507099250432,
      "success": true,
      "log_likelihood": -24.73061675030364,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -2.079441996272696,
      "beta": 0.20899961149759783,
      "gamma": -2.991514274127918,
      "success": true,
      "log_likelihood": -12.557955443149522,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.33647217208999464,
      "beta": 0.8941498826653338,
      "gamma": 2.4588207209689052,
      "success": true,
      "log_likelihood": -24.450957568494957,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 3.0,
      "beta": -0.14786115787613907,
      "gamma": 2.875629202426305,
      "success": true,
      "log_likelihood": -1.7491446528754737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 3.0,
      "beta": -0.13746498933044338,
      "gamma": 0.4703278101054309,
      "success": true,
      "log_likelihood": -1.7491446528754737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 3.0,
      "beta": 0.7649944473554804,
      "gamma": -1.4576094333307545,
      "success": true,
      "log_likelihood": -1.7491446528754737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 3.0,
      "beta": -0.05280741093754582,
      "gamma": -0.4296622349154333,
      "success": true,
      "log_likelihood": -1.7491446528754737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 1.8245492375819252,
      "beta": 0.29935725378088573,
      "gamma": -2.8688888178132324,
      "success": true,
      "log_likelihood": -14.505888876009921,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 2.079441965720115,
      "beta": 0.37311060672012175,
      "gamma": -2.1657859565366335,
      "success": true,
      "log_likelihood": -12.557955443149488,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 3.0,
      "beta": 1.0478367174196856,
      "gamma": -0.07324256148714259,
      "success": true,
      "log_likelihood": -1.7491446528754737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2231436221622125,
      "beta": 1.8978770592096659,
      "gamma": 1.210544194577535,
      "success": true,
      "log_likelihood": -24.730616750303653,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 1.8245489246369513,
      "beta": 0.009264505763547426,
      "gamma": -0.8914180741275604,
      "success": true,
      "log_likelihood": -14.505888876010223,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.570545210298724,
      "beta": 0.8516685228538154,
      "gamma": 1.4174659685552475,
      "success": true,
      "log_likelihood": -23.54597316385005,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.11122599242806541,
      "beta": -1.1073363032403125,
      "gamma": -0.6368517976851997,
      "success": true,
      "log_likelihood": -24.897714324102473,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 9.429934358208809e-08,
      "beta": 1.6863825866340862,
      "gamma": 0.15569389918423582,
      "success": true,
      "log_likelihood": -24.95329849295808,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.3364720296372502,
      "beta": -1.0262297238902567,
      "gamma": 1.2797396826872394,
      "success": true,
      "log_likelihood": -24.450957568495124,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2231436164219465,
      "beta": -2.5952325980760262,
      "gamma": 1.0552385497871288,
      "success": true,
      "log_likelihood": -24.73061675030366,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.9555115228177294,
      "beta": 2.0456209350978565,
      "gamma": 2.684188818108135,
      "success": true,
      "log_likelihood": -21.27032085872099,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 2.0794416591389058,
      "beta": -1.4578288952014455,
      "gamma": 2.690774378828011,
      "success": true,
      "log_likelihood": -12.557955443149169,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 1.252763073258007,
      "beta": -1.5831436312378608,
      "gamma": -0.8797017506141822,
      "success": true,
      "log_likelihood": -19.069423158875598,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 3.0,
      "beta": -1.766830868276383,
      "gamma": -1.8661341566007867,
      "success": true,
      "log_likelihood": -1.7491446528754737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -2.397889160211435,
      "beta": 0.2369958651103059,
      "gamma": 2.0179425005750993,
      "success": true,
      "log_likelihood": -10.326095382873175,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.33647224067383946,
      "beta": -1.95682404488013,
      "gamma": -2.0701943349268173,
      "success": true,
      "log_likelihood": -24.450957568494918,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.4519850460861847,
      "beta": 1.083198851605367,
      "gamma": -2.8902664700560665,
      "success": true,
      "log_likelihood": -24.05694518872342,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 3.0,
      "beta": -0.489656960625811,
      "gamma": 1.1644159757007406,
      "success": true,
      "log_likelihood": -1.7491446528754737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.5705456572875306,
      "beta": -0.22144702819006445,
      "gamma": -1.6674069207179982,
      "success": true,
      "log_likelihood": -23.545973163852192,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.8209787983812585,
      "beta": 1.2454618897216454,
      "gamma": -1.873825757019259,
      "success": true,
      "log_likelihood": -22.157938154744606,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 3.3312433895563604e-08,
      "beta": -2.1352988614647566,
      "gamma": 1.5515115133654955,
      "success": true,
      "log_likelihood": -24.953298492958034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.693144466146188,
      "beta": -1.105699855223883,
      "gamma": 0.6191009522001951,
      "success": true,
      "log_likelihood": -22.914510051442733,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 2.397894897888109,
      "beta": -2.3577689103044213,
      "gamma": 1.5208399855130592,
      "success": true,
      "log_likelihood": -10.32609538282198,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.45198515935968425,
      "beta": -0.8431226652194486,
      "gamma": -0.7365909795531085,
      "success": true,
      "log_likelihood": -24.05694518872339,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -1.252760713567634,
      "beta": -0.31971859443417205,
      "gamma": 0.5250248378840379,
      "success": true,
      "log_likelihood": -19.069423158891386,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 3.0,
      "beta": 1.9392750301365318,
      "gamma": 1.9404454687208963,
      "success": true,
      "log_likelihood": -4.749144650871899,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.22314357364083193,
      "beta": -1.2752014978290602,
      "gamma": 0.981131054417741,
      "success": true,
      "log_likelihood": -24.730616750303636,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.451987556188474,
      "beta": -2.5374735164290225,
      "gamma": 0.7834731607369694,
      "success": true,
      "log_likelihood": -24.0569451887487,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.9555114368943719,
      "beta": -2.385587986525673,
      "gamma": 0.8848067114208611,
      "success": true,
      "log_likelihood": -21.270320858720957,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.11122548853635106,
      "beta": 1.0624216906038102,
      "gamma": 1.304351363410901,
      "success": true,
      "log_likelihood": -24.897714324102008,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.45198519027770606,
      "beta": -0.9911928079714807,
      "gamma": -0.006659022614614152,
      "success": true,
      "log_likelihood": -24.05694518872343,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.3364723658461598,
      "beta": -1.1566528278717836,
      "gamma": -0.7110463883937888,
      "success": true,
      "log_likelihood": -24.450957568495014,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.11122596374818176,
      "beta": 2.4857069352284853,
      "gamma": 2.0432000465499636,
      "success": true,
      "log_likelihood": -24.897714324102417,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.8209806164257822,
      "beta": 0.9647089641745916,
      "gamma": -1.7710477735781716,
      "success": true,
      "log_likelihood": -22.157938154732886,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -1.8245506620079417,
      "beta": 2.9396119529472804,
      "gamma": -1.4490675409574458,
      "success": true,
      "log_likelihood": -14.505888876013946,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.11122571978914397,
      "beta": 0.026519701012516883,
      "gamma": -2.314124807637672,
      "success": true,
      "log_likelihood": -24.897714324101948,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.33647185544950575,
      "beta": 0.012430590585071677,
      "gamma": -0.9320570941256676,
      "success": true,
      "log_likelihood": -24.45095756849557,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.4519823926648987,
      "beta": -0.20661315534556124,
      "gamma": -2.8237250304340105,
      "success": true,
      "log_likelihood": -24.056945188755297,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.6931467027513287,
      "beta": 0.6620631938841797,
      "gamma": 0.22247986550837684,
      "success": true,
      "log_likelihood": -22.914510051414187,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.9555114648675541,
      "beta": 0.9237316479844209,
      "gamma": -0.09068423987439544,
      "success": true,
      "log_likelihood": -21.27032085872096,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 2.0794438589864033,
      "beta": 0.7546201367990548,
      "gamma": 0.4814307160298439,
      "success": true,
      "log_likelihood": -12.557955443158676,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -2.0794417227872075,
      "beta": -2.5953424297969514,
      "gamma": 2.1313256167555306,
      "success": true,
      "log_likelihood": -12.557955443149217,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 1.4213852991058329,
      "beta": -1.3051128397637037,
      "gamma": 2.040923612353188,
      "success": true,
      "log_likelihood": -17.733731664225434,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.4519846946925309,
      "beta": 1.4895418430384284,
      "gamma": 0.16565520114112076,
      "success": true,
      "log_likelihood": -24.056945188724175,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -6.400430941957279e-08,
      "beta": -2.516957547255342,
      "gamma": -2.9199031469598093,
      "success": true,
      "log_likelihood": -24.953298492958048,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -2.397895438854461,
      "beta": 2.578621799834627,
      "gamma": -2.7175937029081005,
      "success": true,
      "log_likelihood": -10.326095382821821,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.2231435179938181,
      "beta": 2.2197676464728158,
      "gamma": 0.6304275340342005,
      "success": true,
      "log_likelihood": -24.73061675030365,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -1.2527629337290331,
      "beta": -0.0768551241702693,
      "gamma": 2.554613180424182,
      "success": true,
      "log_likelihood": -19.06942315887556,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.22314485105858245,
      "beta": 0.14855382649331972,
      "gamma": -2.805025341628372,
      "success": true,
      "log_likelihood": -24.730616750311157,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 2.397893493753439,
      "beta": -0.9899047529337528,
      "gamma": 0.6337926556415185,
      "success": true,
      "log_likelihood": -10.326095382826141,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 1.8245491693969276,
      "beta": 1.2885186051539446,
      "gamma": -2.5889622822192297,
      "success": true,
      "log_likelihood": -14.505888876009958,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.22314365960297297,
      "beta": 0.15976785616512146,
      "gamma": 1.5622637870339986,
      "success": true,
      "log_likelihood": -24.730616750303703,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 2.3978880610227042,
      "beta": 1.5852998821538815,
      "gamma": -0.905174307673752,
      "success": true,
      "log_likelihood": -10.326095382893325,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -2.079438750601339,
      "beta": 0.9277350186184625,
      "gamma": 0.1819176081851812,
      "success": true,
      "log_likelihood": -12.557955443163005,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -1.824549253668378,
      "beta": 1.375389815827937,
      "gamma": 0.18340930205315686,
      "success": true,
      "log_likelihood": -14.505888876009932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.11122567548236496,
      "beta": 1.144973693516791,
      "gamma": -0.025258381223970616,
      "success": true,
      "log_likelihood": -24.89771432410193,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 1.2527632402423539,
      "beta": -0.9542046050061086,
      "gamma": -2.2611014064672834,
      "success": true,
      "log_likelihood": -19.069423158875782,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -6.565081229235349e-08,
      "beta": -0.07839642373399514,
      "gamma": -1.4706571545093738,
      "success": true,
      "log_likelihood": -24.95329849295804,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.8209805313397147,
      "beta": 0.5679606402004898,
      "gamma": 0.9321528639221865,
      "success": true,
      "log_likelihood": -22.157938154732886,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 2.8332145328903517,
      "beta": 2.656610355690397,
      "gamma": 0.4774521210513969,
      "success": true,
      "log_likelihood": -7.724129579151913,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -2.8332150939705,
      "beta": -0.41403618235686057,
      "gamma": -2.969246637640328,
      "success": true,
      "log_likelihood": -7.724129579153463,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.45198463028245905,
      "beta": -1.4329974445748586,
      "gamma": -0.976441809477496,
      "success": true,
      "log_likelihood": -24.056945188724416,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -2.397895382141754,
      "beta": -1.2934456395111091,
      "gamma": -1.2675458943060298,
      "success": true,
      "log_likelihood": -10.326095382821803,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.11122573067312462,
      "beta": -2.806863909813805,
      "gamma": 1.9917582267940652,
      "success": true,
      "log_likelihood": -24.897714324101976,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 2.3978938076751883,
      "beta": 2.1889714512332796,
      "gamma": -2.922661987852158,
      "success": true,
      "log_likelihood": -10.326095382824724,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -2.0794414463601623,
      "beta": 1.559193566347827,
      "gamma": -0.13160550382235758,
      "success": true,
      "log_likelihood": -12.557955443149151,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -5.064309644509252e-08,
      "beta": 1.5077784813458486,
      "gamma": 0.3172921055072515,
      "success": true,
      "log_likelihood": -24.953298492958044,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.45198549931457677,
      "beta": 0.16458491664052177,
      "gamma": 0.6073640993407468,
      "success": true,
      "log_likelihood": -24.056945188723972,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -2.07944239920962,
      "beta": -1.4801994355487664,
      "gamma": -0.5421214578905613,
      "success": true,
      "log_likelihood": -12.557955443150455,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.8209800245438871,
      "beta": 2.813897898604406,
      "gamma": -0.370784962148178,
      "success": true,
      "log_likelihood": -22.157938154733927,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -1.2527630814518957,
      "beta": 2.6360382815704178,
      "gamma": 1.3464698753669566,
      "success": true,
      "log_likelihood": -19.0694231588756,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 2.8332130511861413,
      "beta": -2.2271186258818876,
      "gamma": -1.444461952820785,
      "success": true,
      "log_likelihood": -7.724129579150673,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.11122559911509969,
      "beta": 2.246237428213931,
      "gamma": -2.31599633210891,
      "success": true,
      "log_likelihood": -24.897714324101905,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.820982429619581,
      "beta": -1.2983833951213615,
      "gamma": -0.2860897124626476,
      "success": true,
      "log_likelihood": -22.157938154746336,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.9668074196929254,
        "p": 6.997068814670239e-60
      },
      "beta": {
        "r": 0.06444284962182019,
        "p": 0.5241319816381321
      },
      "gamma": {
        "r": -0.1520475113325004,
        "p": 0.13100414655331677
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 46.713047548755206,
  "bic_Control": 43.761806985177685,
  "bic_Cocaine": 49.3568672202934,
  "bic_results": {
    "average_bic": 46.713047548755206,
    "individual_bics": [
      31.40274758101191,
      60.657153801284394,
      60.54598546357231,
      59.65247195236324,
      60.21179031597657,
      57.84250314320282,
      14.248846121119279,
      56.57957691819509,
      14.248846121119279,
      58.86444719283533,
      60.211790315975605,
      35.866467701667375,
      59.65247195235824,
      14.248846121119279,
      14.248846121119279,
      14.248846121119279,
      14.248846121119279,
      39.76233456738817,
      35.866467701667304,
      14.248846121119279,
      60.211790315975634,
      39.76233456738878,
      57.84250314306843,
      60.545985463573274,
      60.657153801284494,
      59.65247195235858,
      60.21179031597565,
      53.29119853281031,
      35.866467701666664,
      48.88940313311953,
      14.248846121119279,
      31.40274758111468,
      59.65247195235817,
      58.86444719281518,
      14.248846121119279,
      57.84250314307272,
      55.06643312485754,
      60.657153801284394,
      56.57957691825379,
      31.402747581012292,
      58.864447192815106,
      48.889403133151106,
      20.24884611711213,
      60.211790315975605,
      58.864447192865725,
      53.29119853281024,
      60.54598546357235,
      58.86444719281519,
      59.652471952358354,
      60.54598546357316,
      55.066433124834106,
      39.76233456739622,
      60.54598546357222,
      59.65247195235948,
      58.86444719287893,
      56.57957691819671,
      53.291198532810256,
      35.86646770168568,
      35.866467701666764,
      46.2180201438192,
      58.864447192816684,
      60.65715380128442,
      31.402747581011972,
      60.211790315975634,
      48.889403133119444,
      60.21179031599064,
      31.402747581020613,
      39.76233456738825,
      60.21179031597573,
      31.40274758115498,
      35.86646770169434,
      39.762334567388194,
      60.545985463572194,
      48.8894031331199,
      60.65715380128441,
      55.066433124834106,
      26.198815973672154,
      26.19881597367526,
      58.86444719281717,
      31.402747581011937,
      60.54598546357228,
      31.402747581017778,
      35.866467701666636,
      60.65715380128442,
      58.86444719281627,
      35.86646770166924,
      55.06643312483618,
      48.88940313311953,
      26.198815973669674,
      60.54598546357214,
      55.06643312486101
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        31.40274758101191,
        60.657153801284394,
        60.54598546357231,
        59.65247195236324,
        60.21179031597657,
        57.84250314320282,
        14.248846121119279,
        56.57957691819509,
        14.248846121119279,
        58.86444719283533,
        60.211790315975605,
        35.866467701667375,
        59.65247195235824,
        14.248846121119279,
        14.248846121119279,
        14.248846121119279,
        14.248846121119279,
        39.76233456738817,
        35.866467701667304,
        14.248846121119279,
        60.211790315975634,
        39.76233456738878,
        57.84250314306843,
        60.545985463573274,
        60.657153801284494,
        59.65247195235858,
        60.21179031597565,
        53.29119853281031,
        35.866467701666664,
        48.88940313311953,
        14.248846121119279,
        31.40274758111468,
        59.65247195235817,
        58.86444719281518,
        14.248846121119279,
        57.84250314307272,
        55.06643312485754,
        60.657153801284394,
        56.57957691825379,
        31.402747581012292,
        58.864447192815106,
        48.889403133151106,
        20.24884611711213
      ],
      "Cocaine": [
        60.211790315975605,
        58.864447192865725,
        53.29119853281024,
        60.54598546357235,
        58.86444719281519,
        59.652471952358354,
        60.54598546357316,
        55.066433124834106,
        39.76233456739622,
        60.54598546357222,
        59.65247195235948,
        58.86444719287893,
        56.57957691819671,
        53.291198532810256,
        35.86646770168568,
        35.866467701666764,
        46.2180201438192,
        58.864447192816684,
        60.65715380128442,
        31.402747581011972,
        60.211790315975634,
        48.889403133119444,
        60.21179031599064,
        31.402747581020613,
        39.76233456738825,
        60.21179031597573,
        31.40274758115498,
        35.86646770169434,
        39.762334567388194,
        60.545985463572194,
        48.8894031331199,
        60.65715380128441,
        55.066433124834106,
        26.198815973672154,
        26.19881597367526,
        58.86444719281717,
        31.402747581011937,
        60.54598546357228,
        31.402747581017778,
        35.866467701666636,
        60.65715380128442,
        58.86444719281627,
        35.86646770166924,
        55.06643312483618,
        48.88940313311953,
        26.198815973669674,
        60.54598546357214,
        55.06643312486101
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.967\n- beta: r = 0.064\n- gamma: r = -0.152",
  "previous_models": [
    "Specification: U = alpha + beta * z_share + gamma * (res_dis_z * I_dis + res_adv_z * I_adv)\nSummary: A logistic utility model combining self\u2010interest (standardized share) and asymmetric fairness sensitivities (disadvantageous vs advantageous inequity). Fairness metrics are orthogonalized from self\u2010interest by regressing raw inequity on z_share and z\u2010scoring residuals. Three tightly bounded parameters (intercept, self\u2010interest weight, fairness weight) ensure identifiability, strong recovery, and improved fit.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 46.713047548755206\nOverall Accuracy: 0.6612\nGroup Accuracies:\n- Control: 0.6938\n- Cocaine: 0.6319\n\nParameter Recovery:\n- alpha: r = 0.967\n- beta: r = 0.064\n- gamma: r = -0.152"
  ]
}