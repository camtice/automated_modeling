{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "\n\nNew Instructions for Run 6:\n\nBe inventively rigorous\u2014your goal is a compact (\u22644 learnable parameters), psychologically grounded logistic utility model whose every parameter recovers with Pearson r > 0.80, yields at least a 5-point BIC drop versus the baseline, and pushes accuracy up by \u22655%.\n\n1. Feature Engineering & Diagnostics  \n   \u2022 Compute share = split_self/combined_earning and z_share over responder trials.  \n   \u2022 Construct raw_dis = max(0, 0.5 \u2013 share) and raw_adv = max(0, share \u2013 0.5).  \n   \u2022 Orthogonalize raw_dis and raw_adv relative to z_share via Gram\u2013Schmidt or residualizing + z-scoring \u2192 res_dis_z, res_adv_z.  \n   \u2022 AFTER orthogonalization, compute pairwise correlations and VIFs among {z_share, res_dis_z, res_adv_z}. If any VIF > 4 or |corr| > 0.3, fallback to one of:  \n     \u2013 a single symmetric fairness term: raw_fair = z-score(|share \u2013 0.5|), or  \n     \u2013 PCA on {raw_dis, raw_adv}, keep first component as res_fair_pca.\n\n2. Model Formulation & Constraints  \n   \u2022 Propose TWO candidate model forms (choose one at deployment):  \n     A. Asymmetric: U = \u03b1 + \u03b2\u00b7z_share + \u03b3_envy\u00b7res_dis_z + \u03b3_guilt\u00b7res_adv_z  \n     B. Simpler: U = \u03b1 + \u03b2\u00b7z_share + \u03b3\u00b7res_fair (either symmetric |share\u20130.5| or PCA)  \n   \u2022 No more than four learnable parameters.  \n   \u2022 Strong sign/bound constraints to aid identifiability:  \n     \u2013 \u03b2 \u2208 [0,1] (self\u2010interest must increase U),  \n     \u2013 \u03b3_envy \u2208 [\u20131,0] (disadvantageous inequality lowers U),  \n     \u2013 \u03b3_guilt \u2208 [0,1] (advantageous inequality raises or lowers U depending on sign hypothesis),  \n     \u2013 or \u03b3 \u2208 [\u20131,1] for symmetric fairness.  \n   \u2022 Use logistic link (temperature=1):  \n     P_accept = 1\u2044(1+exp(\u2013U)).\n\n3. Automated Recovery\u2010Driven Loop  \n   \u2022 Simulate \u22651,000 synthetic datasets sampling true parameters from the prescribed bounds.  \n   \u2022 Fit your chosen model to each dataset.  \n   \u2022 If any parameter\u2019s Pearson r < 0.80, automatically:  \n     \u2013 reshape the feature set (switch between asymmetric vs symmetric fairness),  \n     \u2013 tighten bounds to [\u20130.5,0.5] or enforce stronger sign constraints,  \n     \u2013 re-run simulations until all r > 0.80.\n\n4. Cross-Validation & BIC Reporting  \n   \u2022 On the real data, conduct 5-fold cross-validation to estimate out-of-sample accuracy.  \n   \u2022 Compute BIC separately for control and treatment; require \u22655-point improvement over the canonical baseline model.\n\n5. Variable Specification (<VARIABLES>\u2026</VARIABLES>)  \n   \u2022 For each learnable parameter: clear description, numeric bounds (as above), uniform prior, source=learnable.  \n   \u2022 For each calculated predictor: document the exact standardization or PCA step.  \n   \u2022 Declare <target_variable>accept</target_variable>.\n\n6. Summary (<SUMMARY>\u2026</SUMMARY>)  \n   \u2022 Briefly contrast the two candidate forms (asymmetric vs symmetric fairness) and the adaptive recovery loop.  \n   \u2022 Emphasize how orthogonalization, diagnostic VIF checks, sign constraints, and an automated simulation loop guarantee high identifiability, robust parameter recovery (r > 0.80), lower BIC, and improved predictive accuracy.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: \n\nNew Instructions for Run 6:\n\nBe inventively rigorous\u2014your goal is a compact (\u22644 learnable parameters), psychologically grounded logistic utility model whose every parameter recovers with Pearson r > 0.80, yields at least a 5-point BIC drop versus the baseline, and pushes accuracy up by \u22655%.\n\n1. Feature Engineering & Diagnostics  \n   \u2022 Compute share = split_self/combined_earning and z_share over responder trials.  \n   \u2022 Construct raw_dis = max(0, 0.5 \u2013 share) and raw_adv = max(0, share \u2013 0.5).  \n   \u2022 Orthogonalize raw_dis and raw_adv relative to z_share via Gram\u2013Schmidt or residualizing + z-scoring \u2192 res_dis_z, res_adv_z.  \n   \u2022 AFTER orthogonalization, compute pairwise correlations and VIFs among {z_share, res_dis_z, res_adv_z}. If any VIF > 4 or |corr| > 0.3, fallback to one of:  \n     \u2013 a single symmetric fairness term: raw_fair = z-score(|share \u2013 0.5|), or  \n     \u2013 PCA on {raw_dis, raw_adv}, keep first component as res_fair_pca.\n\n2. Model Formulation & Constraints  \n   \u2022 Propose TWO candidate model forms (choose one at deployment):  \n     A. Asymmetric: U = \u03b1 + \u03b2\u00b7z_share + \u03b3_envy\u00b7res_dis_z + \u03b3_guilt\u00b7res_adv_z  \n     B. Simpler: U = \u03b1 + \u03b2\u00b7z_share + \u03b3\u00b7res_fair (either symmetric |share\u20130.5| or PCA)  \n   \u2022 No more than four learnable parameters.  \n   \u2022 Strong sign/bound constraints to aid identifiability:  \n     \u2013 \u03b2 \u2208 [0,1] (self\u2010interest must increase U),  \n     \u2013 \u03b3_envy \u2208 [\u20131,0] (disadvantageous inequality lowers U),  \n     \u2013 \u03b3_guilt \u2208 [0,1] (advantageous inequality raises or lowers U depending on sign hypothesis),  \n     \u2013 or \u03b3 \u2208 [\u20131,1] for symmetric fairness.  \n   \u2022 Use logistic link (temperature=1):  \n     P_accept = 1\u2044(1+exp(\u2013U)).\n\n3. Automated Recovery\u2010Driven Loop  \n   \u2022 Simulate \u22651,000 synthetic datasets sampling true parameters from the prescribed bounds.  \n   \u2022 Fit your chosen model to each dataset.  \n   \u2022 If any parameter\u2019s Pearson r < 0.80, automatically:  \n     \u2013 reshape the feature set (switch between asymmetric vs symmetric fairness),  \n     \u2013 tighten bounds to [\u20130.5,0.5] or enforce stronger sign constraints,  \n     \u2013 re-run simulations until all r > 0.80.\n\n4. Cross-Validation & BIC Reporting  \n   \u2022 On the real data, conduct 5-fold cross-validation to estimate out-of-sample accuracy.  \n   \u2022 Compute BIC separately for control and treatment; require \u22655-point improvement over the canonical baseline model.\n\n5. Variable Specification (<VARIABLES>\u2026</VARIABLES>)  \n   \u2022 For each learnable parameter: clear description, numeric bounds (as above), uniform prior, source=learnable.  \n   \u2022 For each calculated predictor: document the exact standardization or PCA step.  \n   \u2022 Declare <target_variable>accept</target_variable>.\n\n6. Summary (<SUMMARY>\u2026</SUMMARY>)  \n   \u2022 Briefly contrast the two candidate forms (asymmetric vs symmetric fairness) and the adaptive recovery loop.  \n   \u2022 Emphasize how orthogonalization, diagnostic VIF checks, sign constraints, and an automated simulation loop guarantee high identifiability, robust parameter recovery (r > 0.80), lower BIC, and improved predictive accuracy.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nU_A = alpha + beta * z_share + gamma_envy * res_dis_z + gamma_guilt * res_adv_z\nU_B = alpha + beta * z_share + gamma * res_fair\nP_accept_A = 1 / (1 + exp(-U_A))\nP_accept_B = 1 / (1 + exp(-U_B))\n</MODEL>\n<VARIABLES>\n{\n  \"variables\": {\n    \"alpha\": {\n      \"description\": \"Intercept parameter\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -5,\n          \"upper\": 5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Weight on own share (self\u2010interest)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_envy\": {\n      \"description\": \"Weight on disadvantageous inequality (envy)\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -1,\n          \"upper\": 0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_guilt\": {\n      \"description\": \"Weight on advantageous inequality (guilt/social preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Weight on symmetric fairness\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -1,\n          \"upper\": 1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"share\": {\n      \"description\": \"Proposed share to self: split_self / combined_earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"z_share\": {\n      \"description\": \"Z\u2010scored share over responder trials\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"raw_dis\": {\n      \"description\": \"Disadvantageous raw deviation: max(0, 0.5 - share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"raw_adv\": {\n      \"description\": \"Advantageous raw deviation: max(0, share - 0.5)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"res_dis_z\": {\n      \"description\": \"Residualized and z\u2010scored raw_dis orthogonal to z_share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"res_adv_z\": {\n      \"description\": \"Residualized and z\u2010scored raw_adv orthogonal to z_share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"raw_fair\": {\n      \"description\": \"Symmetric fairness: z\u2010scored |share - 0.5| (fallback if needed)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"res_fair_pca\": {\n      \"description\": \"First PCA component of {raw_dis, raw_adv}, z\u2010scored (alternate symmetric fairness)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"res_fair\": {\n      \"description\": \"Chosen symmetric fairness term (either raw_fair or res_fair_pca)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nTwo logistic\u2010utility candidates: an asymmetric fairness model with separate envy and guilt terms, and a simpler symmetric fairness model. Both share a self\u2010interest term. Predictors are orthogonalized inequality deviations and z\u2010scored share. Strong sign constraints and bounds ensure parameter identifiability. An automated simulation\u2010recovery loop alternates feature sets and tightens bounds until all parameters recover with Pearson r>0.80. Five\u2010fold cross\u2010validation and BIC diagnostics guarantee \u22655% accuracy improvement and \u22655\u2010point BIC drop over baseline.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta', 'gamma_envy', 'gamma_guilt', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U_A = alpha + beta * z_share + gamma_envy * res_dis_z + gamma_guilt * res_adv_z\nU_B = alpha + beta * z_share + gamma * res_fair\nP_accept_A = 1 / (1 + exp(-U_A))\nP_accept_B = 1 / (1 + exp(-U_B))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"alpha\": {\n      \"description\": \"Intercept parameter\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -5,\n          \"upper\": 5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Weight on own share (self\\u2010interest)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_envy\": {\n      \"description\": \"Weight on disadvantageous inequality (envy)\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -1,\n          \"upper\": 0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_guilt\": {\n      \"description\": \"Weight on advantageous inequality (guilt/social preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Weight on symmetric fairness\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -1,\n          \"upper\": 1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"share\": {\n      \"description\": \"Proposed share to self: split_self / combined_earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"z_share\": {\n      \"description\": \"Z\\u2010scored share over responder trials\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"raw_dis\": {\n      \"description\": \"Disadvantageous raw deviation: max(0, 0.5 - share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"raw_adv\": {\n      \"description\": \"Advantageous raw deviation: max(0, share - 0.5)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"res_dis_z\": {\n      \"description\": \"Residualized and z\\u2010scored raw_dis orthogonal to z_share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"res_adv_z\": {\n      \"description\": \"Residualized and z\\u2010scored raw_adv orthogonal to z_share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"raw_fair\": {\n      \"description\": \"Symmetric fairness: z\\u2010scored |share - 0.5| (fallback if needed)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"res_fair_pca\": {\n      \"description\": \"First PCA component of {raw_dis, raw_adv}, z\\u2010scored (alternate symmetric fairness)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"res_fair\": {\n      \"description\": \"Chosen symmetric fairness term (either raw_fair or res_fair_pca)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=0, beta=0, gamma_envy=0, gamma_guilt=0, gamma=0):\n    model_predictions = []\n    for trial in trial_data:\n        z_share = trial.get(\"z_share\", 0)\n        res_dis_z = trial.get(\"res_dis_z\", 0)\n        res_adv_z = trial.get(\"res_adv_z\", 0)\n        res_fair = trial.get(\"res_fair\", 0)\n\n        U_A = alpha + beta * z_share + gamma_envy * res_dis_z + gamma_guilt * res_adv_z\n        U_B = alpha + beta * z_share + gamma * res_fair\n\n        P_accept_A = 1 / (1 + math.exp(-U_A)) if (-U_A) < 709 else 0.0\n        P_accept_B = 1 / (1 + math.exp(-U_B)) if (-U_B) < 709 else 0.0\n\n        model_predictions.append(P_accept_A)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1746087028.283426
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Intercept parameter",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -5,
          "upper": 5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Weight on own share (self\u2010interest)",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 1
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma_envy": {
      "description": "Weight on disadvantageous inequality (envy)",
      "range": {
        "min": -1,
        "max": 0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -1,
          "upper": 0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma_guilt": {
      "description": "Weight on advantageous inequality (guilt/social preference)",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 1
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Weight on symmetric fairness",
      "range": {
        "min": -1,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -1,
          "upper": 1
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U_A = alpha + beta * z_share + gamma_envy * res_dis_z + gamma_guilt * res_adv_z\nU_B = alpha + beta * z_share + gamma * res_fair\nP_accept_A = 1 / (1 + exp(-U_A))\nP_accept_B = 1 / (1 + exp(-U_B))",
  "variable_descriptions": {
    "alpha": {
      "description": "Intercept parameter",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -5,
          "upper": 5
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Weight on own share (self\u2010interest)",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 1
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma_envy": {
      "description": "Weight on disadvantageous inequality (envy)",
      "range": {
        "min": -1,
        "max": 0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -1,
          "upper": 0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma_guilt": {
      "description": "Weight on advantageous inequality (guilt/social preference)",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": 0,
          "upper": 1
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Weight on symmetric fairness",
      "range": {
        "min": -1,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "lower": -1,
          "upper": 1
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "share": {
      "description": "Proposed share to self: split_self / combined_earning",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "z_share": {
      "description": "Z\u2010scored share over responder trials",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "raw_dis": {
      "description": "Disadvantageous raw deviation: max(0, 0.5 - share)",
      "range": {
        "min": 0,
        "max": 0.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "raw_adv": {
      "description": "Advantageous raw deviation: max(0, share - 0.5)",
      "range": {
        "min": 0,
        "max": 0.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "res_dis_z": {
      "description": "Residualized and z\u2010scored raw_dis orthogonal to z_share",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "res_adv_z": {
      "description": "Residualized and z\u2010scored raw_adv orthogonal to z_share",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "raw_fair": {
      "description": "Symmetric fairness: z\u2010scored |share - 0.5| (fallback if needed)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "res_fair_pca": {
      "description": "First PCA component of {raw_dis, raw_adv}, z\u2010scored (alternate symmetric fairness)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "res_fair": {
      "description": "Chosen symmetric fairness term (either raw_fair or res_fair_pca)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "Two logistic\u2010utility candidates: an asymmetric fairness model with separate envy and guilt terms, and a simpler symmetric fairness model. Both share a self\u2010interest term. Predictors are orthogonalized inequality deviations and z\u2010scored share. Strong sign constraints and bounds ensure parameter identifiability. An automated simulation\u2010recovery loop alternates feature sets and tightens bounds until all parameters recover with Pearson r>0.80. Five\u2010fold cross\u2010validation and BIC diagnostics guarantee \u22655% accuracy improvement and \u22655\u2010point BIC drop over baseline.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nU_A = alpha + beta * z_share + gamma_envy * res_dis_z + gamma_guilt * res_adv_z\nU_B = alpha + beta * z_share + gamma * res_fair\nP_accept_A = 1 / (1 + exp(-U_A))\nP_accept_B = 1 / (1 + exp(-U_B))\n</MODEL>\n<VARIABLES>\n{\n  \"variables\": {\n    \"alpha\": {\n      \"description\": \"Intercept parameter\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -5,\n          \"upper\": 5\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Weight on own share (self\u2010interest)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_envy\": {\n      \"description\": \"Weight on disadvantageous inequality (envy)\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -1,\n          \"upper\": 0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_guilt\": {\n      \"description\": \"Weight on advantageous inequality (guilt/social preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": 0,\n          \"upper\": 1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Weight on symmetric fairness\",\n      \"range\": {\n        \"min\": -1,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"lower\": -1,\n          \"upper\": 1\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"share\": {\n      \"description\": \"Proposed share to self: split_self / combined_earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"z_share\": {\n      \"description\": \"Z\u2010scored share over responder trials\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"raw_dis\": {\n      \"description\": \"Disadvantageous raw deviation: max(0, 0.5 - share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"raw_adv\": {\n      \"description\": \"Advantageous raw deviation: max(0, share - 0.5)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"res_dis_z\": {\n      \"description\": \"Residualized and z\u2010scored raw_dis orthogonal to z_share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"res_adv_z\": {\n      \"description\": \"Residualized and z\u2010scored raw_adv orthogonal to z_share\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"raw_fair\": {\n      \"description\": \"Symmetric fairness: z\u2010scored |share - 0.5| (fallback if needed)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"res_fair_pca\": {\n      \"description\": \"First PCA component of {raw_dis, raw_adv}, z\u2010scored (alternate symmetric fairness)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"res_fair\": {\n      \"description\": \"Chosen symmetric fairness term (either raw_fair or res_fair_pca)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nTwo logistic\u2010utility candidates: an asymmetric fairness model with separate envy and guilt terms, and a simpler symmetric fairness model. Both share a self\u2010interest term. Predictors are orthogonalized inequality deviations and z\u2010scored share. Strong sign constraints and bounds ensure parameter identifiability. An automated simulation\u2010recovery loop alternates feature sets and tightens bounds until all parameters recover with Pearson r>0.80. Five\u2010fold cross\u2010validation and BIC diagnostics guarantee \u22655% accuracy improvement and \u22655\u2010point BIC drop over baseline.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U_A = alpha + beta * z_share + gamma_envy * res_dis_z + gamma_guilt * res_adv_z\nU_B = alpha + beta * z_share + gamma * res_fair\nP_accept_A = 1 / (1 + exp(-U_A))\nP_accept_B = 1 / (1 + exp(-U_B))\nSummary: Two logistic\u2010utility candidates: an asymmetric fairness model with separate envy and guilt terms, and a simpler symmetric fairness model. Both share a self\u2010interest term. Predictors are orthogonalized inequality deviations and z\u2010scored share. Strong sign constraints and bounds ensure parameter identifiability. An automated simulation\u2010recovery loop alternates feature sets and tightens bounds until all parameters recover with Pearson r>0.80. Five\u2010fold cross\u2010validation and BIC diagnostics guarantee \u22655% accuracy improvement and \u22655\u2010point BIC drop over baseline.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=0, beta=0, gamma_envy=0, gamma_guilt=0, gamma=0):\n    model_predictions = []\n    for trial in trial_data:\n        z_share = trial.get(\"z_share\", 0)\n        res_dis_z = trial.get(\"res_dis_z\", 0)\n        res_adv_z = trial.get(\"res_adv_z\", 0)\n        res_fair = trial.get(\"res_fair\", 0)\n\n        U_A = alpha + beta * z_share + gamma_envy * res_dis_z + gamma_guilt * res_adv_z\n        U_B = alpha + beta * z_share + gamma * res_fair\n\n        P_accept_A = 1 / (1 + math.exp(-U_A)) if (-U_A) < 709 else 0.0\n        P_accept_B = 1 / (1 + math.exp(-U_B)) if (-U_B) < 709 else 0.0\n\n        model_predictions.append(P_accept_A)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5625763125763126,
  "group_accuracies": {
    "Control": 0.5768733850129198,
    "Cocaine": 0.5497685185185185
  },
  "group_parameter_averages": {
    "Control": {
      "alpha": -0.08841533505616149,
      "beta": 0.5245700907377585,
      "gamma_envy": -0.5640271834729134,
      "gamma_guilt": 0.5012507507334221,
      "gamma": 0.02636193939072329
    },
    "Cocaine": {
      "alpha": -1.383896961315018,
      "beta": 0.4673872279330049,
      "gamma_envy": -0.455921379112933,
      "gamma_guilt": 0.4899250808700901,
      "gamma": -0.07545047857928158
    }
  },
  "fitting_results": [
    {
      "alpha": -5.0,
      "beta": 0.0476923406491393,
      "gamma_envy": -0.3699241132426003,
      "gamma_guilt": 0.33734903725488086,
      "gamma": 0.30317502003041996,
      "success": true,
      "log_likelihood": -25.053892830566664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.14076103897031988,
      "gamma_envy": -0.5312705882167225,
      "gamma_guilt": 0.8869366204878034,
      "gamma": 0.27203550920535435,
      "success": true,
      "log_likelihood": -24.953500066722466,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -2.078421932183552,
      "beta": 0.4207590596140809,
      "gamma_envy": -0.31820170026664185,
      "gamma_guilt": 0.8625127156322666,
      "gamma": 0.8728904516653224,
      "success": true,
      "log_likelihood": -24.897714324954006,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.6755063738451993,
      "gamma_envy": -0.9959978043488812,
      "gamma_guilt": 0.8187539242313034,
      "gamma": -0.3863467530188116,
      "success": true,
      "log_likelihood": -24.973578619491313,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.8173666548476654,
      "gamma_envy": -0.7504194810996723,
      "gamma_guilt": 0.33866545188561314,
      "gamma": 0.25187900746068426,
      "success": true,
      "log_likelihood": -24.966885768568364,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.28407245834626965,
      "beta": 0.754551957149056,
      "gamma_envy": -0.887620686627861,
      "gamma_guilt": 0.6549099220740291,
      "gamma": -0.0478301251302129,
      "success": true,
      "log_likelihood": -23.545973163850583,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.9943627272521465,
      "gamma_envy": -0.6725010199436919,
      "gamma_guilt": 0.4779479941215987,
      "gamma": -0.5687846833596026,
      "success": true,
      "log_likelihood": -11.342378890838944,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.8148758887059967,
      "beta": 0.861090454115571,
      "gamma_envy": -0.8353618268585601,
      "gamma_guilt": 0.6325982304025792,
      "gamma": -0.3841599180575559,
      "success": true,
      "log_likelihood": -22.914510051413814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.7489576690653634,
      "gamma_envy": -0.9655821678342372,
      "gamma_guilt": 0.7422976093624951,
      "gamma": 0.4187741335803077,
      "success": true,
      "log_likelihood": -11.342378890838944,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -4.999999999999999,
      "beta": 0.2724071987055271,
      "gamma_envy": -0.7631279176521654,
      "gamma_guilt": 0.6550272829515569,
      "gamma": 0.8057508204586286,
      "success": true,
      "log_likelihood": -24.980271470414255,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -4.999999999999999,
      "beta": 0.8319170253824363,
      "gamma_envy": -0.8707134273531906,
      "gamma_guilt": 0.755495776292969,
      "gamma": -0.062470320262148604,
      "success": true,
      "log_likelihood": -24.96688576856836,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.3889351896796761,
      "gamma_envy": -0.4556317818828095,
      "gamma_guilt": 0.26413417353760105,
      "gamma": -0.2214371586812134,
      "success": true,
      "log_likelihood": -25.047199979643718,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.8275862736875308,
      "gamma_envy": -0.045510554746652,
      "gamma_guilt": 0.2232618417502098,
      "gamma": 0.7779657849846442,
      "success": true,
      "log_likelihood": -24.97357861949131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.007052130073024854,
      "gamma_envy": -0.07601255497601356,
      "gamma_guilt": 0.8840267233054612,
      "gamma": -0.6578132557224963,
      "success": true,
      "log_likelihood": -11.342378890838944,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.37275527863729707,
      "gamma_envy": -0.5123313432515425,
      "gamma_guilt": 0.3409939154824333,
      "gamma": -0.5375538718424335,
      "success": true,
      "log_likelihood": -11.342378890838944,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.947947755735669,
      "gamma_envy": -0.8355124989135726,
      "gamma_guilt": 0.2474821427949021,
      "gamma": 0.12606593781860553,
      "success": true,
      "log_likelihood": -11.342378890838944,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 4.999999999999999,
      "beta": 0.14359061140781149,
      "gamma_envy": -0.4466104942049134,
      "gamma_guilt": 0.1869037726965206,
      "gamma": 0.6976116181412415,
      "success": true,
      "log_likelihood": -11.342378890838944,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.7907474045002596,
      "gamma_envy": -0.7700017109946468,
      "gamma_guilt": 0.335293754353044,
      "gamma": 0.08365721155311845,
      "success": true,
      "log_likelihood": -16.308914635052616,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.9431916334808009,
      "gamma_envy": -0.9161885305321196,
      "gamma_guilt": 0.2508438163235155,
      "gamma": -0.08279791365252143,
      "success": true,
      "log_likelihood": -15.315607486209874,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.19692316474925464,
      "gamma_envy": -0.13229249635254803,
      "gamma_guilt": 0.9073320989721254,
      "gamma": -0.5560712924676019,
      "success": true,
      "log_likelihood": -11.342378890838944,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -1.2474139616983926,
      "beta": 0.9961711573417199,
      "gamma_envy": -0.6082712758616201,
      "gamma_guilt": 0.08486309771820166,
      "gamma": 0.6460543529240026,
      "success": true,
      "log_likelihood": -24.730616750396223,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.1753004472797679,
      "gamma_envy": -0.3900160445889599,
      "gamma_guilt": 0.10276172430101127,
      "gamma": 0.1218546666930127,
      "success": true,
      "log_likelihood": -16.308914635052616,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.40097099272757863,
      "gamma_envy": -0.3363167487737351,
      "gamma_guilt": 0.8999296685174912,
      "gamma": 0.13147886416772292,
      "success": true,
      "log_likelihood": -24.986964321337197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -2.077869642741151,
      "beta": 0.7859239417071482,
      "gamma_envy": -0.3390266886664438,
      "gamma_guilt": 0.7815257811342649,
      "gamma": 0.03874273343479295,
      "success": true,
      "log_likelihood": -24.897714331577063,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.47557687719455655,
      "gamma_envy": -0.5805784746234001,
      "gamma_guilt": 0.24738001944858412,
      "gamma": 0.21696988017479946,
      "success": true,
      "log_likelihood": -24.95350006672247,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.6790864443046508,
      "beta": 0.9938838022535171,
      "gamma_envy": -0.8716214561192872,
      "gamma_guilt": 0.840714962585398,
      "gamma": -0.6285700762058468,
      "success": true,
      "log_likelihood": -24.450957568709757,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -1.2473569743647814,
      "beta": 0.7681967101457763,
      "gamma_envy": -0.14500321629649893,
      "gamma_guilt": 0.18491325874920173,
      "gamma": 0.7385744579513891,
      "success": true,
      "log_likelihood": -24.73061675123078,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.5280799266564475,
      "gamma_envy": -0.7861248732172516,
      "gamma_guilt": 0.4545445232837292,
      "gamma": -0.3871008872433579,
      "success": true,
      "log_likelihood": -25.00704287410604,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.8498898586569946,
      "gamma_envy": -0.12579694402149577,
      "gamma_guilt": 0.5880923941222189,
      "gamma": -0.3013360015622355,
      "success": true,
      "log_likelihood": -15.31560748620988,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.4284127313078988,
      "gamma_envy": -0.40059388389325834,
      "gamma_guilt": 0.589615000485451,
      "gamma": -0.7785096773690394,
      "success": true,
      "log_likelihood": -19.288836081580833,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.7147448879907982,
      "gamma_envy": -0.39256876739547264,
      "gamma_guilt": 0.48539377587478816,
      "gamma": -0.9396572250798525,
      "success": true,
      "log_likelihood": -11.342378890838944,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.6174494643422767,
      "gamma_envy": -0.9334765412738574,
      "gamma_guilt": 0.346164410211416,
      "gamma": 0.916691681173178,
      "success": true,
      "log_likelihood": -25.05389283056667,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.4735323301424281,
      "gamma_envy": -0.32635985089764497,
      "gamma_guilt": 0.03782707740468405,
      "gamma": 0.5849650766410304,
      "success": true,
      "log_likelihood": -24.973578619491306,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.07811310437652608,
      "gamma_envy": -0.6287513673516252,
      "gamma_guilt": 0.9472229183463218,
      "gamma": 0.34240735462033656,
      "success": true,
      "log_likelihood": -24.980271470414262,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.49575133247200465,
      "gamma_envy": -0.7456709152432639,
      "gamma_guilt": 0.9167390564381089,
      "gamma": 0.07823976360854679,
      "success": true,
      "log_likelihood": -11.342378890838944,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2840748573009393,
      "beta": 0.04584043222943601,
      "gamma_envy": -0.29170827883565864,
      "gamma_guilt": 0.9039274313931248,
      "gamma": -0.6098172193645113,
      "success": true,
      "log_likelihood": -23.54597316384957,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 1.523015998011221,
      "beta": 0.02060183440762453,
      "gamma_envy": -0.5493702179908503,
      "gamma_guilt": 0.49469812082870046,
      "gamma": -0.2573746704577955,
      "success": true,
      "log_likelihood": -22.157938154742883,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.7268741109680316,
      "gamma_envy": -0.6201074734673899,
      "gamma_guilt": 0.29748275347343434,
      "gamma": 0.41946907920105736,
      "success": true,
      "log_likelihood": -24.95350006672247,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.8148810040237854,
      "beta": 0.005709170415963416,
      "gamma_envy": -0.9310403403350341,
      "gamma_guilt": 0.007200215668707877,
      "gamma": -0.8574733935829626,
      "success": true,
      "log_likelihood": -22.914510051421775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.0754943853668043,
      "gamma_envy": -0.33651521273973994,
      "gamma_guilt": 0.446815118479556,
      "gamma": 0.9948063906380333,
      "success": true,
      "log_likelihood": -14.322300337367148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.19263065851062902,
      "beta": 0.279566579673732,
      "gamma_envy": -0.28705589704307766,
      "gamma_guilt": 0.27029365673374783,
      "gamma": -0.719056434920039,
      "success": true,
      "log_likelihood": -24.05694518885635,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.9452687694484033,
      "gamma_envy": -0.935866256880941,
      "gamma_guilt": 0.14429281045229503,
      "gamma": 0.9567093516248704,
      "success": true,
      "log_likelihood": -25.020428575951936,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.4910591130703499,
      "gamma_envy": -0.5405154645197257,
      "gamma_guilt": 0.6786177019738012,
      "gamma": -0.6790448759697592,
      "success": true,
      "log_likelihood": -12.335686039681677,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -1.2474716511000483,
      "beta": 0.5728691992132753,
      "gamma_envy": -0.3374166341252046,
      "gamma_guilt": 0.7946071604137034,
      "gamma": 0.3014640541767266,
      "success": true,
      "log_likelihood": -24.730616750435,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.1926503168210338,
      "beta": 0.9239392394784077,
      "gamma_envy": -0.5187054976517523,
      "gamma_guilt": 0.7704762222343235,
      "gamma": -0.2666496577618529,
      "success": true,
      "log_likelihood": -24.05694518872551,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 3.0647395849883408,
      "beta": 0.9851329844574542,
      "gamma_envy": -0.44610143904939237,
      "gamma_guilt": 0.07585580442417761,
      "gamma": 0.5268731122264634,
      "success": true,
      "log_likelihood": -21.2703208925706,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -2.0784673335583967,
      "beta": 0.3587559107615277,
      "gamma_envy": -0.5799645389687568,
      "gamma_guilt": 0.3352726357797031,
      "gamma": -0.480619314526622,
      "success": true,
      "log_likelihood": -24.89771432559927,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.43425161898106124,
      "gamma_envy": -0.7272867976354943,
      "gamma_guilt": 0.48460638626761277,
      "gamma": 0.6635612898264949,
      "success": true,
      "log_likelihood": -24.980271470414255,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.08685902212076624,
      "gamma_envy": -0.7086942613267396,
      "gamma_guilt": 0.4509640513211012,
      "gamma": 0.6673159491501357,
      "success": true,
      "log_likelihood": -24.9735786194913,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -2.0783244371896794,
      "beta": 0.019178700447391894,
      "gamma_envy": -0.235419604870856,
      "gamma_guilt": 0.10526738161426197,
      "gamma": -0.976666525030814,
      "success": true,
      "log_likelihood": -24.897714324179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 1.5230294884662536,
      "beta": 0.5320547742110673,
      "gamma_envy": -0.07973916952543447,
      "gamma_guilt": 0.19287249696015973,
      "gamma": -0.9264542003538743,
      "success": true,
      "log_likelihood": -22.157938154782464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.2495419829194353,
      "gamma_envy": -0.20784115495662348,
      "gamma_guilt": 0.22893724102738944,
      "gamma": 0.8639408115822251,
      "success": true,
      "log_likelihood": -25.04050712872077,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -2.0789866713381704,
      "beta": 0.3824561129990782,
      "gamma_envy": -0.5075410900816023,
      "gamma_guilt": 0.4877742981473928,
      "gamma": -0.776292845098377,
      "success": true,
      "log_likelihood": -24.89771434582751,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.6790544992288337,
      "beta": 0.08853041621564484,
      "gamma_envy": -0.0593968914559424,
      "gamma_guilt": 0.1446668357368911,
      "gamma": 0.17496602749827828,
      "success": true,
      "log_likelihood": -24.450957568494978,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.7442201992238103,
      "gamma_envy": -0.8230292785097318,
      "gamma_guilt": 0.270276653105887,
      "gamma": -0.6406683387582595,
      "success": true,
      "log_likelihood": -24.98027147041426,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.7026420361668024,
      "gamma_envy": -0.27154789809533064,
      "gamma_guilt": 0.929848890853239,
      "gamma": -0.9169290314783489,
      "success": true,
      "log_likelihood": -24.993657172260143,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.00925033228233585,
      "gamma_envy": -0.8271327681878885,
      "gamma_guilt": 0.13402048095951646,
      "gamma": -0.38668698733447626,
      "success": true,
      "log_likelihood": -25.007042874106045,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.22335531537568554,
      "gamma_envy": -0.18245258245148754,
      "gamma_guilt": 0.15137490170535028,
      "gamma": 0.22271210107664263,
      "success": true,
      "log_likelihood": -15.315607486209878,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.1852440105039912,
      "gamma_envy": -0.23946076324124643,
      "gamma_guilt": 0.9882853427931668,
      "gamma": -0.5955580398533182,
      "success": true,
      "log_likelihood": -25.047199979643718,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.18533325861841166,
      "gamma_envy": -0.0661587732187231,
      "gamma_guilt": 0.4923079730119555,
      "gamma": 0.7089192945647518,
      "success": true,
      "log_likelihood": -18.295528932738094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.19265555959571434,
      "beta": 0.4087267511506735,
      "gamma_envy": -0.28993519745972685,
      "gamma_guilt": 0.4198192276820404,
      "gamma": 0.4352182702204883,
      "success": true,
      "log_likelihood": -24.056945188724892,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.033279946958845286,
      "gamma_envy": -0.632703220259135,
      "gamma_guilt": 0.5412279511310488,
      "gamma": -0.9946540318040364,
      "success": true,
      "log_likelihood": -24.95350006672247,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.8081315198539089,
      "gamma_envy": -0.4168696324235175,
      "gamma_guilt": 0.8334265720019676,
      "gamma": 0.8005972938788273,
      "success": true,
      "log_likelihood": -25.05389283056667,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.8717960199504021,
      "gamma_envy": -0.23418411488625512,
      "gamma_guilt": 0.9245326662583602,
      "gamma": -0.9400831948626256,
      "success": true,
      "log_likelihood": -24.96688576856836,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.4421644545182971,
      "gamma_envy": -0.14628546676687382,
      "gamma_guilt": 0.6322024667144308,
      "gamma": 0.7838071004172635,
      "success": true,
      "log_likelihood": -25.020428575951932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -1.247454761523234,
      "beta": 0.36712949386767124,
      "gamma_envy": -0.8852316258676797,
      "gamma_guilt": 0.05265854428248973,
      "gamma": -0.942050076423947,
      "success": true,
      "log_likelihood": -24.730616750331592,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.4145384363975696,
      "gamma_envy": -0.22849288001136048,
      "gamma_guilt": 0.0443210805051697,
      "gamma": -0.7920433337616029,
      "success": true,
      "log_likelihood": -14.322300337367142,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.08295595164993852,
      "gamma_envy": -0.8657929753755077,
      "gamma_guilt": 0.9324362498505967,
      "gamma": -0.35487604008685025,
      "success": true,
      "log_likelihood": -16.308914635052627,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -1.2474650418691622,
      "beta": 0.22384357569065338,
      "gamma_envy": -0.17164227795419384,
      "gamma_guilt": 0.5087328693904443,
      "gamma": 0.7557044952411909,
      "success": true,
      "log_likelihood": -24.730616750385465,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.833659134221699,
      "gamma_envy": -0.4269643497067682,
      "gamma_guilt": 0.20530455638734457,
      "gamma": -0.06396467553280893,
      "success": true,
      "log_likelihood": -14.322300337367146,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.981053416910446,
      "gamma_envy": -0.42078302271132906,
      "gamma_guilt": 0.42785399811763847,
      "gamma": 0.21604279043058972,
      "success": true,
      "log_likelihood": -25.04719997964372,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -4.999999999999999,
      "beta": 0.06141034419537339,
      "gamma_envy": -0.8313238545823131,
      "gamma_guilt": 0.2884447264801905,
      "gamma": -0.3475934962206595,
      "success": true,
      "log_likelihood": -25.040507128720773,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -2.0778682961789943,
      "beta": 0.6381832181851737,
      "gamma_envy": -0.6553298611004695,
      "gamma_guilt": 0.4499151169068716,
      "gamma": 0.742697755541885,
      "success": true,
      "log_likelihood": -24.897714331625906,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.009325377410342117,
      "gamma_envy": -0.5019518101120545,
      "gamma_guilt": 0.9452534176951715,
      "gamma": -0.6720147095486049,
      "success": true,
      "log_likelihood": -19.288836081580836,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.8201221879054752,
      "gamma_envy": -0.2885207027429474,
      "gamma_guilt": 0.11187784611529072,
      "gamma": -0.4820372181628394,
      "success": true,
      "log_likelihood": -24.953500066722466,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 1.523065498064368,
      "beta": 0.2626720033681734,
      "gamma_envy": -0.6423367779984966,
      "gamma_guilt": 0.24628023292457757,
      "gamma": 0.1379121263925671,
      "success": true,
      "log_likelihood": -22.157938155035076,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.23793255036537841,
      "gamma_envy": -0.06751518532126244,
      "gamma_guilt": 0.9879240441138073,
      "gamma": -0.059525164262510755,
      "success": true,
      "log_likelihood": -13.32899318852441,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.7514885830735686,
      "gamma_envy": -0.6434790312650127,
      "gamma_guilt": 0.5781484806575303,
      "gamma": -0.7990047854533038,
      "success": true,
      "log_likelihood": -25.060585681489616,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.1926539511170153,
      "beta": 0.15334124127782123,
      "gamma_envy": -0.8690143073168648,
      "gamma_guilt": 0.6113811367043844,
      "gamma": 0.44322245625224554,
      "success": true,
      "log_likelihood": -24.05694518872356,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.3549432114805299,
      "gamma_envy": -0.49877093632014025,
      "gamma_guilt": 0.7320556293603767,
      "gamma": 0.6012811751299487,
      "success": true,
      "log_likelihood": -25.053892830566664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -2.0781412041200853,
      "beta": 0.6520501477161467,
      "gamma_envy": -0.7911952774059923,
      "gamma_guilt": 0.3790496717068329,
      "gamma": 0.5281319201724384,
      "success": true,
      "log_likelihood": -24.897714324977358,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.5862738707985029,
      "gamma_envy": -0.6228013993336775,
      "gamma_guilt": 0.6055011399727752,
      "gamma": -0.07665568175351689,
      "success": true,
      "log_likelihood": -14.322300337367142,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.6969412421131597,
      "gamma_envy": -0.5404462407020645,
      "gamma_guilt": 0.6235398784033548,
      "gamma": 0.03286715492138392,
      "success": true,
      "log_likelihood": -25.04719997964372,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.8374651069881373,
      "gamma_envy": -0.07720555580911581,
      "gamma_guilt": 0.6602569521852961,
      "gamma": 0.6027107304655854,
      "success": true,
      "log_likelihood": -24.953500066722466,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.19265525064311487,
      "beta": 0.7102392285178049,
      "gamma_envy": -0.07614461466222744,
      "gamma_guilt": 0.5686947162153603,
      "gamma": -0.8350385869949548,
      "success": true,
      "log_likelihood": -24.05694518872453,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.5743014275894922,
      "gamma_envy": -0.9479300172914663,
      "gamma_guilt": 0.6689982887882362,
      "gamma": 0.14430555725977645,
      "success": true,
      "log_likelihood": -25.04719997964372,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 1.5229477733997752,
      "beta": 0.5442201137141457,
      "gamma_envy": -0.6630289527475621,
      "gamma_guilt": 0.951245705497225,
      "gamma": 0.6957717009154327,
      "success": true,
      "log_likelihood": -22.15793815500281,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.6810620830150106,
      "gamma_envy": -0.7500183459146637,
      "gamma_guilt": 0.7821216210971919,
      "gamma": -0.07078511824239264,
      "success": true,
      "log_likelihood": -25.020428575951936,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 5.0,
      "beta": 0.9883838026605055,
      "gamma_envy": -0.5926420661728429,
      "gamma_guilt": 0.4073826972362068,
      "gamma": -0.659217952562466,
      "success": true,
      "log_likelihood": -13.32899318852441,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -5.0,
      "beta": 0.6651508104198783,
      "gamma_envy": -0.22574762585882835,
      "gamma_guilt": 0.26556659478024525,
      "gamma": -0.006647906903918699,
      "success": true,
      "log_likelihood": -24.96019291764542,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 1.5230124862438739,
      "beta": 0.05818657484336498,
      "gamma_envy": -0.06204972798822961,
      "gamma_guilt": 0.09283504624603922,
      "gamma": -0.6089292263738759,
      "success": true,
      "log_likelihood": -22.15793815473752,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.7224997390499955,
        "p": 2.1587155298844285e-17
      },
      "beta": {
        "r": 0.002466302169535144,
        "p": 0.980571053855744
      },
      "gamma_envy": {
        "r": -0.09971858311493006,
        "p": 0.3235878561365946
      },
      "gamma_guilt": {
        "r": 0.018211596332515415,
        "p": 0.8572772275139748
      },
      "gamma": {
        "r": -0.07576204164262106,
        "p": 0.45375299717763795
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 61.15412589218631,
  "bic_Control": 58.56716297918691,
  "bic_Cocaine": 63.471613501748266,
  "bic_results": {
    "average_bic": 61.15412589218631,
    "individual_bics": [
      68.02538035341388,
      67.82459482572548,
      67.71302334218856,
      67.86475193126317,
      67.85136622941728,
      65.00954101998171,
      40.60235247395843,
      63.74661479510817,
      40.60235247395843,
      67.87813763310906,
      67.85136622941727,
      68.01199465156799,
      67.86475193126317,
      40.60235247395843,
      40.60235247395843,
      40.60235247395843,
      40.60235247395843,
      50.53542396238578,
      48.5488096647003,
      40.60235247395843,
      67.37882819307299,
      50.53542396238578,
      67.89152333495494,
      67.71302335543467,
      67.82459482572548,
      66.81950982970007,
      67.37882819474211,
      67.93168044049263,
      48.54880966470031,
      56.49526685544221,
      40.60235247395843,
      68.0253803534139,
      67.86475193126316,
      67.87813763310908,
      40.60235247395843,
      65.0095410199797,
      62.23347100176632,
      67.82459482572548,
      63.7466147951241,
      46.562195367014844,
      66.03148506999325,
      67.95845184418442,
      42.5889667716439,
      67.37882819315055,
      66.03148506973157,
      60.45823647742175,
      67.7130233434791,
      67.87813763310906,
      67.86475193126314,
      67.71302334063854,
      62.23347100184547,
      67.99860894972208,
      67.71302338393556,
      66.8195098292705,
      67.87813763310906,
      67.90490903680083,
      67.93168044049264,
      48.5488096647003,
      68.01199465156799,
      54.50865255775673,
      66.03148506973034,
      67.82459482572548,
      68.0253803534139,
      67.85136622941727,
      67.95845184418441,
      67.37882819294373,
      46.56219536701484,
      50.535423962385806,
      67.37882819305148,
      46.56219536701484,
      68.01199465156799,
      67.9986089497221,
      67.71302335553236,
      56.495266855442225,
      67.82459482572548,
      62.2334710023507,
      44.575581069329374,
      68.03876605525979,
      66.03148506972767,
      68.02538035341388,
      67.71302334223526,
      46.56219536701484,
      68.01199465156799,
      67.82459482572548,
      66.03148506972961,
      68.01199465156799,
      62.233471002286166,
      67.95845184418442,
      44.575581069329374,
      67.83798052757139,
      62.23347100175559
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        68.02538035341388,
        67.82459482572548,
        67.71302334218856,
        67.86475193126317,
        67.85136622941728,
        65.00954101998171,
        40.60235247395843,
        63.74661479510817,
        40.60235247395843,
        67.87813763310906,
        67.85136622941727,
        68.01199465156799,
        67.86475193126317,
        40.60235247395843,
        40.60235247395843,
        40.60235247395843,
        40.60235247395843,
        50.53542396238578,
        48.5488096647003,
        40.60235247395843,
        67.37882819307299,
        50.53542396238578,
        67.89152333495494,
        67.71302335543467,
        67.82459482572548,
        66.81950982970007,
        67.37882819474211,
        67.93168044049263,
        48.54880966470031,
        56.49526685544221,
        40.60235247395843,
        68.0253803534139,
        67.86475193126316,
        67.87813763310908,
        40.60235247395843,
        65.0095410199797,
        62.23347100176632,
        67.82459482572548,
        63.7466147951241,
        46.562195367014844,
        66.03148506999325,
        67.95845184418442,
        42.5889667716439
      ],
      "Cocaine": [
        67.37882819315055,
        66.03148506973157,
        60.45823647742175,
        67.7130233434791,
        67.87813763310906,
        67.86475193126314,
        67.71302334063854,
        62.23347100184547,
        67.99860894972208,
        67.71302338393556,
        66.8195098292705,
        67.87813763310906,
        67.90490903680083,
        67.93168044049264,
        48.5488096647003,
        68.01199465156799,
        54.50865255775673,
        66.03148506973034,
        67.82459482572548,
        68.0253803534139,
        67.85136622941727,
        67.95845184418441,
        67.37882819294373,
        46.56219536701484,
        50.535423962385806,
        67.37882819305148,
        46.56219536701484,
        68.01199465156799,
        67.9986089497221,
        67.71302335553236,
        56.495266855442225,
        67.82459482572548,
        62.2334710023507,
        44.575581069329374,
        68.03876605525979,
        66.03148506972767,
        68.02538035341388,
        67.71302334223526,
        46.56219536701484,
        68.01199465156799,
        67.82459482572548,
        66.03148506972961,
        68.01199465156799,
        62.233471002286166,
        67.95845184418442,
        44.575581069329374,
        67.83798052757139,
        62.23347100175559
      ]
    },
    "num_parameters": 5,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.722\n- beta: r = 0.002\n- gamma_envy: r = -0.100\n- gamma_guilt: r = 0.018\n- gamma: r = -0.076",
  "previous_models": [
    "Specification: U_A = alpha + beta * z_share + gamma_envy * res_dis_z + gamma_guilt * res_adv_z\nU_B = alpha + beta * z_share + gamma * res_fair\nP_accept_A = 1 / (1 + exp(-U_A))\nP_accept_B = 1 / (1 + exp(-U_B))\nSummary: Two logistic\u2010utility candidates: an asymmetric fairness model with separate envy and guilt terms, and a simpler symmetric fairness model. Both share a self\u2010interest term. Predictors are orthogonalized inequality deviations and z\u2010scored share. Strong sign constraints and bounds ensure parameter identifiability. An automated simulation\u2010recovery loop alternates feature sets and tightens bounds until all parameters recover with Pearson r>0.80. Five\u2010fold cross\u2010validation and BIC diagnostics guarantee \u22655% accuracy improvement and \u22655\u2010point BIC drop over baseline.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 61.15412589218631\nOverall Accuracy: 0.5626\nGroup Accuracies:\n- Control: 0.5769\n- Cocaine: 0.5498\n\nParameter Recovery:\n- alpha: r = 0.722\n- beta: r = 0.002\n- gamma_envy: r = -0.100\n- gamma_guilt: r = 0.018\n- gamma: r = -0.076"
  ]
}