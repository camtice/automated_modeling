{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\n\nOkay, let's look at the previous run's results. The BIC was 33.43, accuracy around 79.6%, which is better than the first model. The parameter recovery for alpha improved to 0.804, beta to 0.761, and gamma to 0.625. So alpha's recovery is much better now, but gamma's is lower. The main goal now is to further improve accuracy and BIC while maintaining or enhancing parameter recovery, especially for gamma.\n\nThe previous instructions focused on nonlinear fairness integration, asymmetric sensitivity, context-dependent weighting, and parameter orthogonality. The model from run 2 added a third parameter (gamma) which helped alpha's recovery but gamma's recovery is moderate. Maybe gamma is not capturing a distinct psychological process, leading to some covariance with other parameters.\n\nTo improve gamma's recovery, the model needs to ensure that gamma represents a unique component not explained by other parameters. Perhaps gamma is a baseline acceptance bias that's independent of the fairness calculation. However, if the model's utility function already includes a term that captures baseline tendencies, maybe gamma is redundant or not well-identified.\n\nAnother angle: the current model uses a linear combination of fairness terms scaled by beta and added to gamma. If beta and gamma are correlated, their recovery might suffer. To decouple them, perhaps introduce a nonlinear interaction between beta and the fairness deviation, or allow beta to have different components for different aspects.\n\nThe previous run's instructions suggested using trial_type-dependent fairness rules. The current model doesn't use trial_type, so incorporating it could help. For example, when trial_type is 3 (participant contributed more), alpha could be higher, but that would require an interaction term with trial_type, adding parameters. However, the design constraint is a maximum of 3 parameters. So maybe use trial_type to modulate alpha without adding new parameters. For instance, alpha = sigmoid(delta * trial_type), where delta is a learnable parameter. But that would require a new parameter, which exceeds the limit. Alternatively, use trial_type as a multiplier in the utility function.\n\nAlternatively, use the ratio of token_self to token_opp as a dynamic weight for alpha. For example, alpha could be calculated as token_self / (token_self + token_opp), which is data-driven and doesn't require a learnable parameter. But that would remove alpha as a learnable parameter, which might not be ideal. Alternatively, scale alpha by this ratio, introducing a multiplicative term.\n\nAnother idea: introduce a nonlinear transformation of the fairness deviation. For example, take the absolute value of the deviation, or square it, to capture different sensitivity to the magnitude of unfairness. This could be controlled by a new parameter, but again, parameter count is limited. Maybe replace the linear beta scaling with a power function, e.g., beta * (deviation)^gamma, but that would repurpose gamma, which might not be ideal.\n\nTo improve gamma's recovery, perhaps make it context-dependent. For example, gamma could vary with trial_type, but that would require additional parameters. Alternatively, split gamma into two terms: one for when the offer is above the reference and one for below. But that adds parameters.\n\nGiven the constraint of 3 parameters, the model needs to find a way to better differentiate the roles of alpha, beta, and gamma. Maybe gamma should interact with another variable that's orthogonal to the fairness calculation. For example, include a term that's only active when the offer is extremely low or high, allowing gamma to capture baseline acceptance in those cases.\n\nAlternatively, use a nonlinear function for the utility, such as a logistic transformation of the fairness deviation before scaling by beta. This could help in cases where the utility has diminishing returns, which might separate the effects of beta and gamma.\n\nAnother approach is to model the utility as a combination of two separate fairness deviations: one for equity and one for equality, each scaled by their own sensitivity parameters. Then, gamma is added as a baseline. This would require two sensitivity parameters (beta_equity, beta_equality) and gamma, totaling three parameters. This way, alpha is replaced by the relative scaling of the two betas, but that might not directly help. Alternatively, keep alpha as the weight between equity and equality, but have separate sensitivities for each, leading to more parameters. But with the 3-parameter limit, this isn't feasible.\n\nWait, the current model has alpha, beta, gamma. Maybe reparameterize to have beta_equity and beta_equality instead of alpha and beta. For example: U = beta_equity * (split_self - 3*token_self) + beta_equality * (split_self - 0.5*combined_earning) + gamma. This model uses two sensitivity parameters for equity and equality deviations, and a baseline. This could allow for better parameter recovery if the two betas are orthogonal. However, this would replace alpha with two parameters, totaling three (beta_equity, beta_equality, gamma). This might capture the same information as the alpha-weighted model but with different parameterization. Whether this improves recovery depends on the data structure.\n\nAlternatively, use a multiplicative term between alpha and beta to reduce covariance. For example, U = (alpha * beta) * (split_self - 3*token_self) + ((1 - alpha) * beta) * (split_self - 0.5*combined_earning) + gamma. This ties beta to both terms, which might not help. Alternatively, have separate beta terms for equity and equality: U = beta_equity * (split_self - 3*token_self) + beta_equality * (split_self - 0.5*combined_earning) + gamma. This model has three parameters and might allow better identification if equity and equality deviations are not perfectly correlated.\n\nAnother thought: the current model's fairness reference is a weighted average. Perhaps participants use a different reference, such as the maximum of equity and equality. Or a nonlinear combination. For example, U = beta * (split_self - max(3*token_self, 0.5*combined_earning)) + gamma. This would change the reference point but might not require additional parameters. However, the max function is non-differentiable, which could complicate parameter estimation. Alternatively, use a softmax function with a temperature parameter, but that adds another parameter.\n\nConsidering the instructions for run 3, the focus should be on further improving parameter recovery (especially gamma) and accuracy. The new instructions should encourage models that:\n\n1. Introduce orthogonal terms to decouple gamma from alpha and beta.\n2. Explore nonlinear transformations of the fairness deviation to capture different sensitivity effects.\n3. Utilize trial_type or token ratios to modulate fairness calculations without adding parameters.\n4. Test alternative reference points (e.g., hybrid max/mean, context-dependent thresholds).\n5. Consider asymmetric sensitivity parameters for over vs. under offers relative to both equity and equality norms.\n\nBy guiding the model towards these directions, the next iteration might achieve better performance.\n</think>\n\n**Instructions for Run 3/10:**  \nIntroduce *dynamic nonlinear scaling* to disentangle gamma from fairness computations. Prioritize:  \n\n1. **Reference Point Specialization**  \n   - Implement distinct parameters for deviations above/below *both* equity and equality norms  \n   - Example: `U = \u03b2_equity_under*(fairness_gap_equity)\u207b + \u03b2_equity_over*(gap)\u207a + ... + \u03b3`  \n\n2. **Contextual Baseline Modulation**  \n   - Make gamma sensitive to absolute contribution ratios:  \n     `\u03b3 = \u03b3_base + \u03b3_scale * (token_self/(token_self+token_opp))`  \n\n3. **Dual-Path Fairness**  \n   - Process equity/equality violations through separate nonlinear transforms before combining:  \n     ```  \n     U_equity = \u03b21 * tanh(split_self - equity_ref)  \n     U_equality = \u03b22 * (split_self - equality_ref)^3  \n     U = \u03b1*U_equity + (1-\u03b1)*U_equality + \u03b3  \n     ```  \n\n4. **Parameter Constraints**  \n   - Enforce \u03b2_equity > \u03b2_equality when token_self > token_opp via:  \n     `\u03b2_equity = \u03b2_base * (1 + relu(token_self - token_opp))`  \n\n*Design constraint:* Maximum 3 learnable parameters. Sacrifice symmetry in fairness terms if it improves identifiability.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\n\nOkay, let's look at the previous run's results. The BIC was 33.43, accuracy around 79.6%, which is better than the first model. The parameter recovery for alpha improved to 0.804, beta to 0.761, and gamma to 0.625. So alpha's recovery is much better now, but gamma's is lower. The main goal now is to further improve accuracy and BIC while maintaining or enhancing parameter recovery, especially for gamma.\n\nThe previous instructions focused on nonlinear fairness integration, asymmetric sensitivity, context-dependent weighting, and parameter orthogonality. The model from run 2 added a third parameter (gamma) which helped alpha's recovery but gamma's recovery is moderate. Maybe gamma is not capturing a distinct psychological process, leading to some covariance with other parameters.\n\nTo improve gamma's recovery, the model needs to ensure that gamma represents a unique component not explained by other parameters. Perhaps gamma is a baseline acceptance bias that's independent of the fairness calculation. However, if the model's utility function already includes a term that captures baseline tendencies, maybe gamma is redundant or not well-identified.\n\nAnother angle: the current model uses a linear combination of fairness terms scaled by beta and added to gamma. If beta and gamma are correlated, their recovery might suffer. To decouple them, perhaps introduce a nonlinear interaction between beta and the fairness deviation, or allow beta to have different components for different aspects.\n\nThe previous run's instructions suggested using trial_type-dependent fairness rules. The current model doesn't use trial_type, so incorporating it could help. For example, when trial_type is 3 (participant contributed more), alpha could be higher, but that would require an interaction term with trial_type, adding parameters. However, the design constraint is a maximum of 3 parameters. So maybe use trial_type to modulate alpha without adding new parameters. For instance, alpha = sigmoid(delta * trial_type), where delta is a learnable parameter. But that would require a new parameter, which exceeds the limit. Alternatively, use trial_type as a multiplier in the utility function.\n\nAlternatively, use the ratio of token_self to token_opp as a dynamic weight for alpha. For example, alpha could be calculated as token_self / (token_self + token_opp), which is data-driven and doesn't require a learnable parameter. But that would remove alpha as a learnable parameter, which might not be ideal. Alternatively, scale alpha by this ratio, introducing a multiplicative term.\n\nAnother idea: introduce a nonlinear transformation of the fairness deviation. For example, take the absolute value of the deviation, or square it, to capture different sensitivity to the magnitude of unfairness. This could be controlled by a new parameter, but again, parameter count is limited. Maybe replace the linear beta scaling with a power function, e.g., beta * (deviation)^gamma, but that would repurpose gamma, which might not be ideal.\n\nTo improve gamma's recovery, perhaps make it context-dependent. For example, gamma could vary with trial_type, but that would require additional parameters. Alternatively, split gamma into two terms: one for when the offer is above the reference and one for below. But that adds parameters.\n\nGiven the constraint of 3 parameters, the model needs to find a way to better differentiate the roles of alpha, beta, and gamma. Maybe gamma should interact with another variable that's orthogonal to the fairness calculation. For example, include a term that's only active when the offer is extremely low or high, allowing gamma to capture baseline acceptance in those cases.\n\nAlternatively, use a nonlinear function for the utility, such as a logistic transformation of the fairness deviation before scaling by beta. This could help in cases where the utility has diminishing returns, which might separate the effects of beta and gamma.\n\nAnother approach is to model the utility as a combination of two separate fairness deviations: one for equity and one for equality, each scaled by their own sensitivity parameters. Then, gamma is added as a baseline. This would require two sensitivity parameters (beta_equity, beta_equality) and gamma, totaling three parameters. This way, alpha is replaced by the relative scaling of the two betas, but that might not directly help. Alternatively, keep alpha as the weight between equity and equality, but have separate sensitivities for each, leading to more parameters. But with the 3-parameter limit, this isn't feasible.\n\nWait, the current model has alpha, beta, gamma. Maybe reparameterize to have beta_equity and beta_equality instead of alpha and beta. For example: U = beta_equity * (split_self - 3*token_self) + beta_equality * (split_self - 0.5*combined_earning) + gamma. This model uses two sensitivity parameters for equity and equality deviations, and a baseline. This could allow for better parameter recovery if the two betas are orthogonal. However, this would replace alpha with two parameters, totaling three (beta_equity, beta_equality, gamma). This might capture the same information as the alpha-weighted model but with different parameterization. Whether this improves recovery depends on the data structure.\n\nAlternatively, use a multiplicative term between alpha and beta to reduce covariance. For example, U = (alpha * beta) * (split_self - 3*token_self) + ((1 - alpha) * beta) * (split_self - 0.5*combined_earning) + gamma. This ties beta to both terms, which might not help. Alternatively, have separate beta terms for equity and equality: U = beta_equity * (split_self - 3*token_self) + beta_equality * (split_self - 0.5*combined_earning) + gamma. This model has three parameters and might allow better identification if equity and equality deviations are not perfectly correlated.\n\nAnother thought: the current model's fairness reference is a weighted average. Perhaps participants use a different reference, such as the maximum of equity and equality. Or a nonlinear combination. For example, U = beta * (split_self - max(3*token_self, 0.5*combined_earning)) + gamma. This would change the reference point but might not require additional parameters. However, the max function is non-differentiable, which could complicate parameter estimation. Alternatively, use a softmax function with a temperature parameter, but that adds another parameter.\n\nConsidering the instructions for run 3, the focus should be on further improving parameter recovery (especially gamma) and accuracy. The new instructions should encourage models that:\n\n1. Introduce orthogonal terms to decouple gamma from alpha and beta.\n2. Explore nonlinear transformations of the fairness deviation to capture different sensitivity effects.\n3. Utilize trial_type or token ratios to modulate fairness calculations without adding parameters.\n4. Test alternative reference points (e.g., hybrid max/mean, context-dependent thresholds).\n5. Consider asymmetric sensitivity parameters for over vs. under offers relative to both equity and equality norms.\n\nBy guiding the model towards these directions, the next iteration might achieve better performance.\n</think>\n\n**Instructions for Run 3/10:**  \nIntroduce *dynamic nonlinear scaling* to disentangle gamma from fairness computations. Prioritize:  \n\n1. **Reference Point Specialization**  \n   - Implement distinct parameters for deviations above/below *both* equity and equality norms  \n   - Example: `U = \u03b2_equity_under*(fairness_gap_equity)\u207b + \u03b2_equity_over*(gap)\u207a + ... + \u03b3`  \n\n2. **Contextual Baseline Modulation**  \n   - Make gamma sensitive to absolute contribution ratios:  \n     `\u03b3 = \u03b3_base + \u03b3_scale * (token_self/(token_self+token_opp))`  \n\n3. **Dual-Path Fairness**  \n   - Process equity/equality violations through separate nonlinear transforms before combining:  \n     ```  \n     U_equity = \u03b21 * tanh(split_self - equity_ref)  \n     U_equality = \u03b22 * (split_self - equality_ref)^3  \n     U = \u03b1*U_equity + (1-\u03b1)*U_equality + \u03b3  \n     ```  \n\n4. **Parameter Constraints**  \n   - Enforce \u03b2_equity > \u03b2_equality when token_self > token_opp via:  \n     `\u03b2_equity = \u03b2_base * (1 + relu(token_self - token_opp))`  \n\n*Design constraint:* Maximum 3 learnable parameters. Sacrifice symmetry in fairness terms if it improves identifiability.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<think>\nOkay, let's tackle this step by step. The goal is to design a model that predicts whether a participant accepts a proposal (target variable 'accept') based on the given dataset. The model needs to focus on responder behavior, use the provided variables appropriately, and ensure parameter recovery is possible.\n\nFirst, I need to identify which variables are relevant for the responder's decision. The key variables here are 'split_self' (the proposed share for the participant), 'token_self' (their contribution), 'token_opp' (opponent's contribution), and 'combined_earning' (total money). The responder's decision likely depends on how fair the proposed split is relative to their contribution and the total.\n\nThe model should calculate a utility based on fairness considerations. A common approach is to compare the proposed split to some reference point, like equity (based on contributions) or equality (equal split). So, the utility might involve the difference between the proposed share and these reference points.\n\nLet's define two reference points:\n1. Equity reference: Each participant's share should be proportional to their contribution. So, the participant's fair share would be (token_self / (token_self + token_opp)) * combined_earning. But since each token is \u00a33, maybe it's simpler to use 3*token_self as their contribution's value. Wait, combined_earning is 3*(token_self + token_opp), so the equity share would be 3*token_self. So, split_self should be compared to 3*token_self.\n2. Equality reference: Each gets half, so 0.5*combined_earning.\n\nThe participant might weigh these two references. Let's introduce a parameter alpha that determines the weight between equity and equality. The utility could be the difference between the proposed split_self and a weighted average of these two references.\n\nBut the problem states that two equal split_self values don't represent the same fairness if the combined_earning differs. So, the model should account for the relative fairness, not just absolute amounts.\n\nNext, the utility function should include a term for the fairness deviation. Let's model the utility as a combination of the proposed split's deviation from the fairness reference, scaled by a sensitivity parameter (beta), plus a baseline acceptance tendency (gamma). If the utility is positive, the participant is more likely to accept.\n\nThe probability of accepting can be modeled using a logistic function of the utility. The model needs to predict the binary 'accept' variable, so the utility should be passed through a sigmoid function to get probabilities.\n\nNow, considering parameter recovery, the parameters alpha (weight between equity and equality), beta (sensitivity to unfairness), and gamma (baseline bias) should have finite bounds. Alpha should be between 0 and 1, beta positive (since higher sensitivity means stronger reaction to unfairness), and gamma can be any real number but with practical bounds.\n\nPutting this together:\n\nUtility U = beta * [split_self - (alpha*(3*token_self) + (1-alpha)*(0.5*combined_earning))] + gamma\n\nThe probability of accepting is 1 / (1 + exp(-U)). If U > 0, the probability is above 0.5.\n\nThis model uses three parameters: alpha, beta, gamma. Each has clear roles and bounds. Alpha is a weight, so [0,1]. Beta is sensitivity, positive but with a reasonable upper bound (e.g., 0 to 10). Gamma can be, say, between -5 and 5 to cover plausible baseline biases.\n\nVariables in the model:\n- split_self: from data\n- token_self: from data\n- combined_earning: from data\n- alpha: learnable, [0,1]\n- beta: learnable, [0,10]\n- gamma: learnable, [-5,5]\n\nThis setup ensures the model uses the necessary variables, has learnable parameters with bounds, and the utility is structured to predict acceptance based on fairness considerations.\n</think>\n\n<MODEL>\nU = beta * (split_self - (alpha * 3 * token_self + (1 - alpha) * 0.5 * combined_earning)) + gamma\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Weight between equity (contribution-based) and equality (50/50) fairness norms\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to deviations from fairness reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Baseline acceptance bias\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's contribution in tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money in shared pot (\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA hybrid fairness utility model where responders evaluate offers against a weighted combination of equity (value proportional to contribution) and equality (equal split) norms. The alpha parameter controls the relative weighting between contribution-based and equal division fairness standards. Beta scales sensitivity to deviations from this personalized fairness reference, while gamma captures baseline acceptance tendencies. Utility is converted to acceptance probability via logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = beta * (split_self - (alpha * 3 * token_self + (1 - alpha) * 0.5 * combined_earning)) + gamma\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Weight between equity (contribution-based) and equality (50/50) fairness norms\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to deviations from fairness reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Baseline acceptance bias\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \\u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's contribution in tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money in shared pot (\\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=0.5, beta=1, gamma=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        U = beta * (split_self - (alpha * 3 * token_self + (1 - alpha) * 0.5 * combined_earning)) + gamma\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"group1\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 30, \"split_opp\": 15.0, \"split_self\": 15.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 15.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 15.0}, {\"ID\": 1, \"group\": \"group1\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 8, \"token_self\": 2, \"combined_earning\": 30, \"split_opp\": 24.0, \"split_self\": 6.0, \"splitperc_opp\": 80, \"splitperc_self\": 20, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 20.0, \"proposed_amount\": 6.0}]'\n\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744017732.302757
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Weight between equity (contribution-based) and equality (50/50) fairness norms",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform"
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Sensitivity to deviations from fairness reference",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform"
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Baseline acceptance bias",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform"
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = beta * (split_self - (alpha * 3 * token_self + (1 - alpha) * 0.5 * combined_earning)) + gamma",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the proposal",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Weight between equity (contribution-based) and equality (50/50) fairness norms",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform"
      },
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Sensitivity to deviations from fairness reference",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform"
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Baseline acceptance bias",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform"
      },
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share for participant in \u00a3",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Participant's contribution in tokens",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total money in shared pot (\u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A hybrid fairness utility model where responders evaluate offers against a weighted combination of equity (value proportional to contribution) and equality (equal split) norms. The alpha parameter controls the relative weighting between contribution-based and equal division fairness standards. Beta scales sensitivity to deviations from this personalized fairness reference, while gamma captures baseline acceptance tendencies. Utility is converted to acceptance probability via logistic function.",
  "target_variable": "accept",
  "full_reasoning": "<think>\nOkay, let's tackle this step by step. The goal is to design a model that predicts whether a participant accepts a proposal (target variable 'accept') based on the given dataset. The model needs to focus on responder behavior, use the provided variables appropriately, and ensure parameter recovery is possible.\n\nFirst, I need to identify which variables are relevant for the responder's decision. The key variables here are 'split_self' (the proposed share for the participant), 'token_self' (their contribution), 'token_opp' (opponent's contribution), and 'combined_earning' (total money). The responder's decision likely depends on how fair the proposed split is relative to their contribution and the total.\n\nThe model should calculate a utility based on fairness considerations. A common approach is to compare the proposed split to some reference point, like equity (based on contributions) or equality (equal split). So, the utility might involve the difference between the proposed share and these reference points.\n\nLet's define two reference points:\n1. Equity reference: Each participant's share should be proportional to their contribution. So, the participant's fair share would be (token_self / (token_self + token_opp)) * combined_earning. But since each token is \u00a33, maybe it's simpler to use 3*token_self as their contribution's value. Wait, combined_earning is 3*(token_self + token_opp), so the equity share would be 3*token_self. So, split_self should be compared to 3*token_self.\n2. Equality reference: Each gets half, so 0.5*combined_earning.\n\nThe participant might weigh these two references. Let's introduce a parameter alpha that determines the weight between equity and equality. The utility could be the difference between the proposed split_self and a weighted average of these two references.\n\nBut the problem states that two equal split_self values don't represent the same fairness if the combined_earning differs. So, the model should account for the relative fairness, not just absolute amounts.\n\nNext, the utility function should include a term for the fairness deviation. Let's model the utility as a combination of the proposed split's deviation from the fairness reference, scaled by a sensitivity parameter (beta), plus a baseline acceptance tendency (gamma). If the utility is positive, the participant is more likely to accept.\n\nThe probability of accepting can be modeled using a logistic function of the utility. The model needs to predict the binary 'accept' variable, so the utility should be passed through a sigmoid function to get probabilities.\n\nNow, considering parameter recovery, the parameters alpha (weight between equity and equality), beta (sensitivity to unfairness), and gamma (baseline bias) should have finite bounds. Alpha should be between 0 and 1, beta positive (since higher sensitivity means stronger reaction to unfairness), and gamma can be any real number but with practical bounds.\n\nPutting this together:\n\nUtility U = beta * [split_self - (alpha*(3*token_self) + (1-alpha)*(0.5*combined_earning))] + gamma\n\nThe probability of accepting is 1 / (1 + exp(-U)). If U > 0, the probability is above 0.5.\n\nThis model uses three parameters: alpha, beta, gamma. Each has clear roles and bounds. Alpha is a weight, so [0,1]. Beta is sensitivity, positive but with a reasonable upper bound (e.g., 0 to 10). Gamma can be, say, between -5 and 5 to cover plausible baseline biases.\n\nVariables in the model:\n- split_self: from data\n- token_self: from data\n- combined_earning: from data\n- alpha: learnable, [0,1]\n- beta: learnable, [0,10]\n- gamma: learnable, [-5,5]\n\nThis setup ensures the model uses the necessary variables, has learnable parameters with bounds, and the utility is structured to predict acceptance based on fairness considerations.\n</think>\n\n<MODEL>\nU = beta * (split_self - (alpha * 3 * token_self + (1 - alpha) * 0.5 * combined_earning)) + gamma\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Weight between equity (contribution-based) and equality (50/50) fairness norms\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to deviations from fairness reference\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Baseline acceptance bias\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's contribution in tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money in shared pot (\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA hybrid fairness utility model where responders evaluate offers against a weighted combination of equity (value proportional to contribution) and equality (equal split) norms. The alpha parameter controls the relative weighting between contribution-based and equal division fairness standards. Beta scales sensitivity to deviations from this personalized fairness reference, while gamma captures baseline acceptance tendencies. Utility is converted to acceptance probability via logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = beta * (split_self - (alpha * 3 * token_self + (1 - alpha) * 0.5 * combined_earning)) + gamma\nSummary: A hybrid fairness utility model where responders evaluate offers against a weighted combination of equity (value proportional to contribution) and equality (equal split) norms. The alpha parameter controls the relative weighting between contribution-based and equal division fairness standards. Beta scales sensitivity to deviations from this personalized fairness reference, while gamma captures baseline acceptance tendencies. Utility is converted to acceptance probability via logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=0.5, beta=1, gamma=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        U = beta * (split_self - (alpha * 3 * token_self + (1 - alpha) * 0.5 * combined_earning)) + gamma\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7945665445665446,
  "fitting_results": [
    {
      "alpha": 0.0,
      "beta": 10.0,
      "gamma": 3.5214037183575218,
      "success": true,
      "log_likelihood": -0.17669106348867775,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6121505348581756,
      "beta": 1.0708994682891604,
      "gamma": 2.5019378948246436,
      "success": true,
      "log_likelihood": -17.274329904820075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 1.3698351841141563,
      "gamma": 3.481102636790079,
      "success": true,
      "log_likelihood": -13.10744117585739,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6221688753262015,
      "beta": 1.0429513514009736,
      "gamma": 1.9192440419921148,
      "success": true,
      "log_likelihood": -17.400899376511862,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 2.0021776260015236,
      "gamma": 4.000019876033702,
      "success": true,
      "log_likelihood": -9.277638269963434,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.4558496614109471,
      "beta": 1.6119832360826551,
      "gamma": 4.854885300888798,
      "success": true,
      "log_likelihood": -12.61999972598643,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -0.24175254198398927,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6648930549322795,
      "beta": 1.5523565050439752,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -11.100831189146296,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -0.24175254198398927,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8048663791678518,
      "beta": 1.5796572014904047,
      "gamma": 2.67228326121148,
      "success": true,
      "log_likelihood": -12.701887039440905,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8917394318036074,
      "beta": 1.8983372292012213,
      "gamma": 3.8009438361569354,
      "success": true,
      "log_likelihood": -10.346511524247619,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.24518763617963435,
      "beta": 2.3344570776679325,
      "gamma": 0.9822559517254821,
      "success": true,
      "log_likelihood": -6.690264764473621,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6406149272968032,
      "beta": 2.4812980348237503,
      "gamma": 4.576254564097864,
      "success": true,
      "log_likelihood": -9.510156562378832,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -0.24175254198398927,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -0.24175254198398927,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -0.24175254198398927,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.0,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -0.24175254198398927,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.34180733725918505,
      "beta": 0.9924867055811166,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -10.175144105093498,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.8880333098473838,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -6.901352641335642,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -0.24175254198398927,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9440516291823132,
      "beta": 1.2369129944842878,
      "gamma": 3.3548494597132166,
      "success": true,
      "log_likelihood": -14.338655975547603,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6621357542714192,
      "beta": 1.0026590405871938,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -8.372830607825762,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 1.455157649050213,
      "gamma": 2.3779996082404606,
      "success": true,
      "log_likelihood": -15.95866271090126,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.3228743890612432,
      "beta": 0.9538034162506076,
      "gamma": 2.3836793039235133,
      "success": true,
      "log_likelihood": -18.837529850868478,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 1.7763423678727677,
      "gamma": 4.194546123374943,
      "success": true,
      "log_likelihood": -10.3865541937951,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9831549548146151,
      "beta": 0.8125026524356747,
      "gamma": 2.429025384727269,
      "success": true,
      "log_likelihood": -17.907292708247763,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.10552586488193946,
      "beta": 2.0720978144898416,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -10.957326073473535,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7788794834699295,
      "beta": 4.553348030677631,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -4.513769189276711,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.8624509489009653,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -8.08296919197335,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8286772801993738,
      "beta": 0.822688963365563,
      "gamma": 3.734148036037304,
      "success": true,
      "log_likelihood": -14.198925046246654,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -0.24175254198398927,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "gamma": 3.5214031971420754,
      "success": true,
      "log_likelihood": -0.17669106348869298,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 1.335130917631412,
      "gamma": 2.516172115328708,
      "success": true,
      "log_likelihood": -16.914114154179572,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.22346555471956084,
      "beta": 1.7406678849353705,
      "gamma": 3.0847506225910912,
      "success": true,
      "log_likelihood": -14.589292136804422,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8894276986838188,
      "beta": 0.0,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -0.24175254198398927,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.428223193770766e-06,
      "beta": 0.806146882347731,
      "gamma": 2.6431541845659168,
      "success": true,
      "log_likelihood": -18.849061221666393,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7634115963155386,
      "beta": 1.2806880853337306,
      "gamma": 4.528151469198927,
      "success": true,
      "log_likelihood": -13.171451750187897,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 1.265759559140986,
      "gamma": 2.991499772934182,
      "success": true,
      "log_likelihood": -13.966481522809321,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8055405434504891,
      "beta": 0.931719295913206,
      "gamma": 3.2627935707316476,
      "success": true,
      "log_likelihood": -16.185401670114857,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.8194056132250029,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -7.801861365897784,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.44737226407281017,
      "beta": 1.4004539319390372,
      "gamma": 4.0503771786678575,
      "success": true,
      "log_likelihood": -14.348967181299807,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7803829818556047,
      "beta": 1.293834318626665,
      "gamma": 0.8387678352545537,
      "success": true,
      "log_likelihood": -12.474633543823316,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.431603728391663e-08,
      "beta": 0.4550656926619183,
      "gamma": 4.908328612669203,
      "success": true,
      "log_likelihood": -4.294553518571012,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.0103440561630734e-08,
      "beta": 1.491842898446141,
      "gamma": 3.775744528530819,
      "success": true,
      "log_likelihood": -15.272457241113962,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.4868233290662557,
      "beta": 1.1477023097306616,
      "gamma": 3.401253336879679,
      "success": true,
      "log_likelihood": -16.059352414739323,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.612266835500056,
      "gamma": 2.5966432855119947,
      "success": true,
      "log_likelihood": -18.408498726866743,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.09879749522064159,
      "beta": 2.1740532108195327,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -11.499937399276407,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.38863637860388184,
      "beta": 0.736581056864474,
      "gamma": 1.1679364688668579,
      "success": true,
      "log_likelihood": -20.155081719197412,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 2.2928418253797447,
      "gamma": 4.152832251601625,
      "success": true,
      "log_likelihood": -8.219775068038903,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.2748894157348065,
      "gamma": 0.7790768436949584,
      "success": true,
      "log_likelihood": -24.14506988197162,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.22796579938452113,
      "beta": 0.7449051305712031,
      "gamma": 2.8120469682141938,
      "success": true,
      "log_likelihood": -18.039497645316683,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.520921561484355,
      "gamma": 1.717155969619699,
      "success": true,
      "log_likelihood": -7.21031578826341,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.9310044777336902,
      "gamma": 2.323783217422981,
      "success": true,
      "log_likelihood": -19.295065177684418,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.3977796528679015,
      "gamma": 1.320588112825609,
      "success": true,
      "log_likelihood": -22.96150108929542,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.7319989369179412,
      "gamma": 1.1097676821330689,
      "success": true,
      "log_likelihood": -18.607051473897315,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8959363955570938,
      "beta": 2.6692208376235578,
      "gamma": 3.5898322000359015,
      "success": true,
      "log_likelihood": -8.18237952389633,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.4990443621038041,
      "beta": 2.65090763069687,
      "gamma": 3.3702692930800495,
      "success": true,
      "log_likelihood": -9.786919882599094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "gamma": 2.0794423316835524,
      "success": true,
      "log_likelihood": -12.557955443150261,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 3.743723677850424,
      "gamma": 2.2024774679291177,
      "success": true,
      "log_likelihood": -4.163253362948141,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.5850073507137005,
      "gamma": 3.0634688344861356,
      "success": true,
      "log_likelihood": -15.511453556500596,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.18699800275803818,
      "beta": 0.8391370557067596,
      "gamma": 2.5732259659914853,
      "success": true,
      "log_likelihood": -18.9944709304854,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6487121939821824,
      "beta": 1.5221721722329338,
      "gamma": 3.5197833625480044,
      "success": true,
      "log_likelihood": -13.77225735219502,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "gamma": 3.521403777802533,
      "success": true,
      "log_likelihood": -0.17669106348867916,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.7031527020050944,
      "gamma": 1.3862555832685077,
      "success": true,
      "log_likelihood": -21.14507639447193,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.2844118718221483,
      "beta": 2.8038051671973263,
      "gamma": 3.156808633667601,
      "success": true,
      "log_likelihood": -8.914965364770389,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.13248095783654235,
      "beta": 1.3919015793902179,
      "gamma": 3.553190799881412,
      "success": true,
      "log_likelihood": -15.78045273426642,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.161187405149579e-09,
      "beta": 0.8406717250833473,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -7.054780739723445,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.738983341448983,
      "beta": 0.8799433951978417,
      "gamma": 4.693875936370807,
      "success": true,
      "log_likelihood": -10.554034665913452,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.8227828800591227,
      "gamma": 2.223233738763012,
      "success": true,
      "log_likelihood": -19.91160052675227,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.32388443019019003,
      "gamma": 3.351943327836237,
      "success": true,
      "log_likelihood": -9.754721097828305,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8712463000171803,
      "beta": 10.0,
      "gamma": 2.996337921652593,
      "success": true,
      "log_likelihood": -0.6691408173159534,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 3.7338694309780145,
      "gamma": 2.95597428551858,
      "success": true,
      "log_likelihood": -4.936691172062321,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.45284285357219634,
      "beta": 1.0908039514384071,
      "gamma": 2.708513551474063,
      "success": true,
      "log_likelihood": -17.47581428690052,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.508208763616499,
      "gamma": 2.637216739471907,
      "success": true,
      "log_likelihood": -17.209134877205727,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.445507541098103e-06,
      "beta": 0.4685383472061924,
      "gamma": 1.1206517998135712,
      "success": true,
      "log_likelihood": -22.990960532466794,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.16360500164513242,
      "beta": 1.5890409929252942,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -8.539850107191583,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.6272024503719786,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -6.304689529531439,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3757994466183346e-07,
      "beta": 1.1634948188057077,
      "gamma": -1.0051727157584092,
      "success": true,
      "log_likelihood": -6.284001532298554,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9457748113251955,
      "beta": 0.125053856054523,
      "gamma": 0.7614083501307696,
      "success": true,
      "log_likelihood": -23.81284819428298,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "gamma": 3.5214034157839453,
      "success": true,
      "log_likelihood": -0.17669106348868138,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.5795318091784974,
      "gamma": 1.5082868319278204,
      "success": true,
      "log_likelihood": -22.07236622414187,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.24945136695243872,
      "gamma": 3.065596523968153,
      "success": true,
      "log_likelihood": -10.106604263820103,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 1.7284193744924345,
      "gamma": 0.4822247195904983,
      "success": true,
      "log_likelihood": -8.263949225853741,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.28671766832115597,
      "beta": 1.1295034419134558,
      "gamma": 2.6122219943058416,
      "success": true,
      "log_likelihood": -17.750827347122588,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.23383045809103828,
      "gamma": 1.0395327333223123,
      "success": true,
      "log_likelihood": -23.201218077986784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.29799483412488365,
      "beta": 9.06311640559065,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -1.1932950231878223,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6796981065683544,
      "beta": 0.7884254157662441,
      "gamma": 2.9931108307269487,
      "success": true,
      "log_likelihood": -17.10992651316973,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.8292804305417161,
      "gamma": 0.16931377878485965,
      "success": true,
      "log_likelihood": -14.472753563694955,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.6613126241834784,
      "gamma": 5.0,
      "success": true,
      "log_likelihood": -5.4346378741775085,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.9407053673908364,
      "gamma": 2.039640977753879,
      "success": true,
      "log_likelihood": -19.44683385741284,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.4967360257548213,
      "gamma": 2.1169316449461713,
      "success": true,
      "log_likelihood": -20.094040730853195,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.7771485312101984,
        "p": 0.008164269996333845
      },
      "beta": {
        "r": 0.7054250529181902,
        "p": 0.02266704050899424
      },
      "gamma": {
        "r": 0.8116824753468945,
        "p": 0.004353792522296552
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 33.595981781882976,
  "bic_results": {
    "average_bic": 33.595981781882976,
    "individual_bics": [
      11.103938942345685,
      45.299216625008484,
      36.96543916708311,
      45.55235556839206,
      29.3058333552952,
      35.99055626734119,
      11.234061899336309,
      32.95221919366092,
      11.234061899336309,
      36.15433089425014,
      31.44357986386357,
      24.131086344315573,
      29.770869940125994,
      11.234061899336309,
      11.234061899336309,
      11.234061899336309,
      11.234061899336309,
      31.100845025555326,
      24.553262098039614,
      11.234061899336309,
      39.42786876646353,
      27.496218031019854,
      42.66788223717085,
      48.42561651710528,
      31.52366520295853,
      46.56514223186386,
      32.665208962315404,
      19.77809519392175,
      26.91649519931503,
      39.14840690786164,
      11.234061899336309,
      11.103938942345717,
      44.57878512372747,
      39.929141088977175,
      11.234061899336309,
      48.44867925870112,
      37.093460315744125,
      38.683519860986976,
      43.12136015559804,
      26.354279547163898,
      39.448491177967945,
      35.69982390301496,
      19.339663852510355,
      41.29547129759625,
      42.86926164484697,
      47.56755426910182,
      33.750431613921144,
      51.06072025376315,
      27.190106951446136,
      59.04069657931157,
      46.8295521060017,
      25.17118839189515,
      49.34068717073717,
      56.673558993959176,
      47.964659763162956,
      27.11531586316099,
      30.324396580566518,
      35.86646770166885,
      19.077063541264614,
      41.77346392836952,
      48.739498676339124,
      38.295071519758366,
      11.103938942345689,
      53.040709604312184,
      28.580487544909108,
      42.31146228390117,
      24.860118294815223,
      31.858626147195235,
      50.573757868872875,
      30.25999901102494,
      12.088838450000237,
      20.623939159492974,
      45.70218538916937,
      45.16882656977978,
      56.732477880301914,
      27.830257029751497,
      23.35993587443121,
      23.318559879965438,
      58.3762532039343,
      11.103938942345694,
      54.895289263652074,
      30.963765343008536,
      27.278455267075813,
      46.2522115096135,
      57.1529929713419,
      13.137146861743975,
      44.97040984170779,
      39.696063942758244,
      21.61983256372335,
      49.64422453019401,
      50.938638277074716
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.777\n- beta: r = 0.705\n- gamma: r = 0.812",
  "previous_models": [
    "Specification: U = beta * (split_self - (alpha * 3 * token_self + (1 - alpha) * 0.5 * combined_earning)) + gamma\nSummary: A hybrid fairness utility model where responders evaluate offers against a weighted combination of equity (value proportional to contribution) and equality (equal split) norms. The alpha parameter controls the relative weighting between contribution-based and equal division fairness standards. Beta scales sensitivity to deviations from this personalized fairness reference, while gamma captures baseline acceptance tendencies. Utility is converted to acceptance probability via logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 33.595981781882976\nOverall Accuracy: 0.7946\n\nParameter Recovery:\n- alpha: r = 0.777\n- beta: r = 0.705\n- gamma: r = 0.812"
  ]
}