{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\n\nOkay, let's analyze the previous results. The last model had a BIC of around 33.6, accuracy of ~79.5%, and parameter recovery for gamma improved to 0.812. Alpha and beta recovery were 0.777 and 0.705, respectively. The goal now is to further improve all metrics.\n\nThe previous instructions introduced dynamic nonlinear scaling, but the model still uses three parameters. Gamma's recovery is better, but beta's is lower. Maybe beta is still entangled with other terms. To improve beta's recovery, we need to make its effect more distinct.\n\nThe previous model used separate nonlinear transforms for equity and equality deviations. However, using tanh and cubic terms might not be the most effective. Perhaps introducing asymmetric sensitivity for over vs. under offers in both equity and equality could help. For example, people might be more sensitive to receiving less than the equity reference but less sensitive to receiving more. Similarly for equality.\n\nBut with a 3-parameter limit, we need a way to capture asymmetry without adding too many parameters. Maybe use a single parameter to control the asymmetry. For instance, a parameter that scales the negative deviations more than positive ones.\n\nAnother angle: incorporate the trial_type variable. The model hasn't used it yet. For example, in trial_type 3 (participant contributed more), responders might weight equity more heavily. But how to integrate this without adding parameters? Maybe modulate alpha based on trial_type. For example, alpha = base_alpha + delta * (trial_type == 3), but delta would be a new parameter. Alternatively, use trial_type as a multiplier in the utility function without adding parameters.\n\nAlternatively, use the ratio of token_self to token_opp as a dynamic weight. For example, alpha could be a function of this ratio, but that would require a learnable parameter to scale it. Maybe alpha = sigmoid(theta * (token_self - token_opp)), where theta is a parameter. But that adds a parameter, exceeding the limit.\n\nWait, the design constraint is max 3 parameters. So, need to work within that. Let's think of a way to make beta capture different sensitivities based on the direction of the deviation. For example, beta could be split into beta_positive and beta_negative, but that would require two parameters. Instead, use a single parameter to represent the ratio between positive and negative sensitivities. For instance, beta_negative = beta * gamma, but that might complicate interpretation.\n\nAlternatively, use an asymmetric function like beta * (deviation) if deviation >0 else (beta * delta) * deviation, where delta is a new parameter. But again, parameter count is an issue.\n\nAnother idea: introduce a nonlinear interaction between alpha and the deviation. For example, U = beta * [split_self - (alpha * equity_ref + (1-alpha) * equality_ref)] + gamma * alpha. This ties gamma to alpha, which might not help. Alternatively, gamma could be modulated by the fairness deviation's sign.\n\nAlternatively, model the utility as a piecewise function. For example, if the offer is below the equity reference, use beta_equity_under; if above, beta_equity_over. Similarly for equality. But with 3 parameters, this would require combining terms. Maybe have one beta for under both references and another for over, but that's two parameters plus gamma.\n\nAlternatively, use the product of alpha and beta to create interaction effects, allowing beta to have different effects based on alpha's value. But this might not directly address parameter recovery.\n\nTo improve beta's recovery, perhaps make it context-dependent on the trial's characteristics. For example, beta could increase when the participant's contribution is higher, using token_self as a multiplier: beta_effective = beta * (1 + token_self / K), where K is a constant. But this introduces a hyperparameter (K) which isn't learnable, so it's not ideal.\n\nAnother approach: use the absolute value of the deviation scaled by beta, but with a separate term for the sign. For example, U = beta * |deviation| + gamma * sign(deviation). This separates the magnitude and direction effects, but requires two parameters (beta and gamma), leaving room for a third, perhaps alpha.\n\nWait, the current model has alpha, beta, gamma. If we reparameterize to have beta_magnitude and beta_sign, but that would exceed three parameters. Alternatively, combine gamma with the sign term: U = beta * |deviation| + (gamma * sign(deviation)). This uses two parameters, leaving room for alpha. But how does this fit with fairness norms?\n\nAlternatively, model the utility as a combination of two separate fairness deviations (equity and equality), each with their own asymmetric sensitivity parameters. For example:\n\nU = [beta_equity_under * (equity_dev < 0) * equity_dev + beta_equity_over * (equity_dev >=0) * equity_dev] + [beta_equality_under * (equality_dev <0) * equality_dev + beta_equality_over * (equality_dev >=0) * equality_dev] + gamma\n\nBut this requires four parameters, which is too many. To stay within three, perhaps combine the under/over sensitivities for equity and equality into a single parameter each, but that's still two parameters plus gamma. Not feasible.\n\nAlternative idea: Use a single asymmetry parameter that scales the negative deviations differently. For example, U = beta * (deviation + lambda * min(deviation, 0)), where lambda is a learnable parameter. This way, negative deviations (unfavorable) are scaled by beta*(1 + lambda), while positive deviations remain scaled by beta. This introduces lambda as a third parameter, replacing gamma. But gamma was important for baseline bias. Maybe this trade-off isn't worth it.\n\nAlternatively, keep gamma and introduce a single asymmetry parameter for beta. For example, U = beta * (deviation + alpha * min(deviation, 0)) + gamma. But this uses alpha for asymmetry, conflicting with its original role. Not ideal.\n\nHmm. Given the constraints, perhaps the best approach is to introduce a nonlinear transformation of the deviation that naturally decouples parameters. For example, using a hyperbolic tangent (tanh) to capture diminishing sensitivity to large deviations. This would allow beta to scale the entire curve, while gamma remains a baseline. The model would be:\n\nU = beta * tanh(deviation / scale) + gamma\n\nBut 'scale' is a new parameter. To avoid adding parameters, fix 'scale' as a constant (e.g., 10), but that's arbitrary. Alternatively, absorb it into beta: U = beta * tanh(deviation) + gamma. This might work, as tanh is bounded, and beta scales the sensitivity. However, this could limit the model's ability to capture large deviations, potentially reducing accuracy.\n\nAlternatively, use an exponential function: U = beta * (exp(deviation) - 1) + gamma. This introduces nonlinear scaling, which might help differentiate beta and gamma. But the exponential could cause numerical issues.\n\nAnother angle: Include an interaction term between the fairness deviation and the contribution ratio. For example, U = beta * deviation * (token_self / (token_self + token_opp)) + gamma. This makes beta's effect depend on the participant's contribution proportion, which could improve identifiability. However, this introduces a data-dependent modulation of beta without adding parameters.\n\nWait, this approach uses existing variables (token_self, token_opp) to modulate beta's effect. For example, if the participant contributed more, their sensitivity to deviations might be higher. This could help beta capture more context-dependent effects, improving recovery.\n\nPutting this together:\n\nU = beta * (split_self - (alpha * 3 * token_self + (1 - alpha) * 0.5 * combined_earning)) * (token_self / (token_self + token_opp)) + gamma\n\nHere, beta is scaled by the participant's contribution ratio. This could make beta's effect more pronounced when the participant contributed more, potentially improving its identifiability. Additionally, gamma remains a separate baseline.\n\nThis model still uses three parameters (alpha, beta, gamma) but introduces a data-driven modulation of beta. This might help in decoupling beta and gamma, as beta's effect is now context-dependent, while gamma remains a constant bias. This could improve parameter recovery for beta and gamma.\n\nAnother possibility is to make gamma depend on the trial_type. For example, gamma could be higher in trials where the participant contributed more (trial_type 3). But without adding parameters, this would require using trial_type as a multiplier. For example:\n\ngamma_effective = gamma * (1 + trial_type == 3)\n\nBut trial_type is categorical (1,2,3), so this might not be directly applicable. Alternatively, use trial_type as a dummy variable. However, this would require additional parameters unless trial_type is used as a fixed effect without a learnable weight.\n\nAlternatively, allow gamma to vary with the contribution ratio:\n\ngamma_effective = gamma * (token_self / (token_self + token_opp))\n\nThis again uses existing data to modulate gamma, making it context-dependent without adding parameters. This could help gamma capture varying baseline acceptance based on contribution, improving its recovery.\n\nCombining these ideas, the model could be:\n\nU = beta * deviation + gamma * (token_self / (token_self + token_opp))\n\nWhere deviation is split_self minus the weighted fairness reference. This ties gamma to the contribution ratio, potentially making it more identifiable.\n\nAlternatively, both beta and gamma could be modulated:\n\nU = (beta * (token_self / (token_self + token_opp))) * deviation + gamma\n\nThis way, beta's sensitivity and gamma's baseline",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\n\nOkay, let's analyze the previous results. The last model had a BIC of around 33.6, accuracy of ~79.5%, and parameter recovery for gamma improved to 0.812. Alpha and beta recovery were 0.777 and 0.705, respectively. The goal now is to further improve all metrics.\n\nThe previous instructions introduced dynamic nonlinear scaling, but the model still uses three parameters. Gamma's recovery is better, but beta's is lower. Maybe beta is still entangled with other terms. To improve beta's recovery, we need to make its effect more distinct.\n\nThe previous model used separate nonlinear transforms for equity and equality deviations. However, using tanh and cubic terms might not be the most effective. Perhaps introducing asymmetric sensitivity for over vs. under offers in both equity and equality could help. For example, people might be more sensitive to receiving less than the equity reference but less sensitive to receiving more. Similarly for equality.\n\nBut with a 3-parameter limit, we need a way to capture asymmetry without adding too many parameters. Maybe use a single parameter to control the asymmetry. For instance, a parameter that scales the negative deviations more than positive ones.\n\nAnother angle: incorporate the trial_type variable. The model hasn't used it yet. For example, in trial_type 3 (participant contributed more), responders might weight equity more heavily. But how to integrate this without adding parameters? Maybe modulate alpha based on trial_type. For example, alpha = base_alpha + delta * (trial_type == 3), but delta would be a new parameter. Alternatively, use trial_type as a multiplier in the utility function without adding parameters.\n\nAlternatively, use the ratio of token_self to token_opp as a dynamic weight. For example, alpha could be a function of this ratio, but that would require a learnable parameter to scale it. Maybe alpha = sigmoid(theta * (token_self - token_opp)), where theta is a parameter. But that adds a parameter, exceeding the limit.\n\nWait, the design constraint is max 3 parameters. So, need to work within that. Let's think of a way to make beta capture different sensitivities based on the direction of the deviation. For example, beta could be split into beta_positive and beta_negative, but that would require two parameters. Instead, use a single parameter to represent the ratio between positive and negative sensitivities. For instance, beta_negative = beta * gamma, but that might complicate interpretation.\n\nAlternatively, use an asymmetric function like beta * (deviation) if deviation >0 else (beta * delta) * deviation, where delta is a new parameter. But again, parameter count is an issue.\n\nAnother idea: introduce a nonlinear interaction between alpha and the deviation. For example, U = beta * [split_self - (alpha * equity_ref + (1-alpha) * equality_ref)] + gamma * alpha. This ties gamma to alpha, which might not help. Alternatively, gamma could be modulated by the fairness deviation's sign.\n\nAlternatively, model the utility as a piecewise function. For example, if the offer is below the equity reference, use beta_equity_under; if above, beta_equity_over. Similarly for equality. But with 3 parameters, this would require combining terms. Maybe have one beta for under both references and another for over, but that's two parameters plus gamma.\n\nAlternatively, use the product of alpha and beta to create interaction effects, allowing beta to have different effects based on alpha's value. But this might not directly address parameter recovery.\n\nTo improve beta's recovery, perhaps make it context-dependent on the trial's characteristics. For example, beta could increase when the participant's contribution is higher, using token_self as a multiplier: beta_effective = beta * (1 + token_self / K), where K is a constant. But this introduces a hyperparameter (K) which isn't learnable, so it's not ideal.\n\nAnother approach: use the absolute value of the deviation scaled by beta, but with a separate term for the sign. For example, U = beta * |deviation| + gamma * sign(deviation). This separates the magnitude and direction effects, but requires two parameters (beta and gamma), leaving room for a third, perhaps alpha.\n\nWait, the current model has alpha, beta, gamma. If we reparameterize to have beta_magnitude and beta_sign, but that would exceed three parameters. Alternatively, combine gamma with the sign term: U = beta * |deviation| + (gamma * sign(deviation)). This uses two parameters, leaving room for alpha. But how does this fit with fairness norms?\n\nAlternatively, model the utility as a combination of two separate fairness deviations (equity and equality), each with their own asymmetric sensitivity parameters. For example:\n\nU = [beta_equity_under * (equity_dev < 0) * equity_dev + beta_equity_over * (equity_dev >=0) * equity_dev] + [beta_equality_under * (equality_dev <0) * equality_dev + beta_equality_over * (equality_dev >=0) * equality_dev] + gamma\n\nBut this requires four parameters, which is too many. To stay within three, perhaps combine the under/over sensitivities for equity and equality into a single parameter each, but that's still two parameters plus gamma. Not feasible.\n\nAlternative idea: Use a single asymmetry parameter that scales the negative deviations differently. For example, U = beta * (deviation + lambda * min(deviation, 0)), where lambda is a learnable parameter. This way, negative deviations (unfavorable) are scaled by beta*(1 + lambda), while positive deviations remain scaled by beta. This introduces lambda as a third parameter, replacing gamma. But gamma was important for baseline bias. Maybe this trade-off isn't worth it.\n\nAlternatively, keep gamma and introduce a single asymmetry parameter for beta. For example, U = beta * (deviation + alpha * min(deviation, 0)) + gamma. But this uses alpha for asymmetry, conflicting with its original role. Not ideal.\n\nHmm. Given the constraints, perhaps the best approach is to introduce a nonlinear transformation of the deviation that naturally decouples parameters. For example, using a hyperbolic tangent (tanh) to capture diminishing sensitivity to large deviations. This would allow beta to scale the entire curve, while gamma remains a baseline. The model would be:\n\nU = beta * tanh(deviation / scale) + gamma\n\nBut 'scale' is a new parameter. To avoid adding parameters, fix 'scale' as a constant (e.g., 10), but that's arbitrary. Alternatively, absorb it into beta: U = beta * tanh(deviation) + gamma. This might work, as tanh is bounded, and beta scales the sensitivity. However, this could limit the model's ability to capture large deviations, potentially reducing accuracy.\n\nAlternatively, use an exponential function: U = beta * (exp(deviation) - 1) + gamma. This introduces nonlinear scaling, which might help differentiate beta and gamma. But the exponential could cause numerical issues.\n\nAnother angle: Include an interaction term between the fairness deviation and the contribution ratio. For example, U = beta * deviation * (token_self / (token_self + token_opp)) + gamma. This makes beta's effect depend on the participant's contribution proportion, which could improve identifiability. However, this introduces a data-dependent modulation of beta without adding parameters.\n\nWait, this approach uses existing variables (token_self, token_opp) to modulate beta's effect. For example, if the participant contributed more, their sensitivity to deviations might be higher. This could help beta capture more context-dependent effects, improving recovery.\n\nPutting this together:\n\nU = beta * (split_self - (alpha * 3 * token_self + (1 - alpha) * 0.5 * combined_earning)) * (token_self / (token_self + token_opp)) + gamma\n\nHere, beta is scaled by the participant's contribution ratio. This could make beta's effect more pronounced when the participant contributed more, potentially improving its identifiability. Additionally, gamma remains a separate baseline.\n\nThis model still uses three parameters (alpha, beta, gamma) but introduces a data-driven modulation of beta. This might help in decoupling beta and gamma, as beta's effect is now context-dependent, while gamma remains a constant bias. This could improve parameter recovery for beta and gamma.\n\nAnother possibility is to make gamma depend on the trial_type. For example, gamma could be higher in trials where the participant contributed more (trial_type 3). But without adding parameters, this would require using trial_type as a multiplier. For example:\n\ngamma_effective = gamma * (1 + trial_type == 3)\n\nBut trial_type is categorical (1,2,3), so this might not be directly applicable. Alternatively, use trial_type as a dummy variable. However, this would require additional parameters unless trial_type is used as a fixed effect without a learnable weight.\n\nAlternatively, allow gamma to vary with the contribution ratio:\n\ngamma_effective = gamma * (token_self / (token_self + token_opp))\n\nThis again uses existing data to modulate gamma, making it context-dependent without adding parameters. This could help gamma capture varying baseline acceptance based on contribution, improving its recovery.\n\nCombining these ideas, the model could be:\n\nU = beta * deviation + gamma * (token_self / (token_self + token_opp))\n\nWhere deviation is split_self minus the weighted fairness reference. This ties gamma to the contribution ratio, potentially making it more identifiable.\n\nAlternatively, both beta and gamma could be modulated:\n\nU = (beta * (token_self / (token_self + token_opp))) * deviation + gamma\n\nThis way, beta's sensitivity and gamma's baseline\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<think>\nAlright, let's tackle this problem step by step. The goal is to design a computational model that predicts whether a participant (as a responder) accepts or rejects a proposal. The model needs to focus on responder behavior, use the given dataset variables appropriately, and ensure parameter recovery is feasible. \n\nFirst, I need to identify which variables are relevant for the responder's decision. The target variable is \"accept\", which is binary (1 or 0). The key factors influencing this decision likely involve fairness considerations based on both the participant's and opponent's contributions (token_self and token_opp) and the proposed splits (split_self and split_opp). \n\nThe challenge is to model the utility the responder derives from the proposed split. Utility here should combine both equity (contribution-based fairness) and equality (equal split) considerations. Participants might compare the proposed split to what they consider fair under both norms. \n\nLet's consider equity first. The fair share under equity would be proportional to their contribution. Since each token is worth \u00a33, the participant's contribution in monetary terms is 3 * token_self, and the opponent's is 3 * token_opp. The total combined earning is combined_earning = 3*(token_self + token_opp). The equity reference would be (3 * token_self) / combined_earning * combined_earning, which simplifies to 3 * token_self. Wait, no\u2014that's just their contribution. But the split_self is the amount offered to the participant. So the equity reference is the participant's contribution (3*token_self), and the equality reference is half of combined_earning (0.5*combined_earning). \n\nThe participant's perceived fairness might be a weighted combination of these two references. Let's introduce a parameter alpha that determines the weight given to equity versus equality. The fairness reference would be: \nfair_reference = alpha * (3 * token_self) + (1 - alpha) * (0.5 * combined_earning)\n\nThe deviation from this fair reference is then split_self - fair_reference. If the offer (split_self) is higher than the reference, the utility increases; if lower, it decreases. \n\nNext, the utility function could be linear in this deviation, scaled by a parameter beta, which represents sensitivity to unfairness. Additionally, there might be a baseline bias (gamma) affecting the likelihood of acceptance regardless of fairness. \n\nSo the utility U would be:\nU = beta * (split_self - [alpha*(3*token_self) + (1-alpha)*(0.5*combined_earning)]) + gamma\n\nThe probability of accepting is then determined by a logistic function of U:\nP(accept=1) = 1 / (1 + exp(-U))\n\nThis model uses three parameters: alpha (mixing equity and equality), beta (sensitivity to deviation), and gamma (baseline bias). \n\nNow, considering parameter bounds:\n- alpha should be between 0 and 1 since it's a weight.\n- beta can be any real number, but to set finite bounds, perhaps [-10, 10] as extreme sensitivities are unlikely.\n- gamma also can be any real number, but similar bounds [-10, 10] would be reasonable.\n\nThis setup ensures that the model uses relevant variables (token_self, combined_earning, split_self) and the three learnable parameters are within defined bounds. The utility U is unbounded, which aligns with the requirement. \n\nTesting this model for parameter recovery would involve simulating data with known parameters and checking if the estimation process recovers them accurately. The model's simplicity aids in recovery, and the logistic link function connects utility to the binary outcome appropriately.\n</think>\n\n<MODEL>\nU = beta * (split_self - (alpha * 3 * token_self + (1 - alpha) * 0.5 * combined_earning)) + gamma\n</MODEL>\n\n<target_variable>accept</target_variable>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Weighting between equity (contribution-based) and equality (50/50 split) norms\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to deviations from fairness reference\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Baseline bias toward acceptance/rejection\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's contribution in tokens\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money in shared pot (\u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA fairness-based utility model combining equity and equality norms. The utility is calculated as a linear function of the deviation between the proposed offer and a weighted fairness reference (alpha controls equity/equality weighting). Includes sensitivity (beta) and baseline bias (gamma) parameters. The fairness reference blends the participant's contribution value (3*token_self) and an equal split (0.5*combined_earning). Logistic transformation converts utility to acceptance probability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = beta * (split_self - (alpha * 3 * token_self + (1 - alpha) * 0.5 * combined_earning)) + gamma\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Weighting between equity (contribution-based) and equality (50/50 split) norms\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to deviations from fairness reference\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Baseline bias toward acceptance/rejection\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \\u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's contribution in tokens\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money in shared pot (\\u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=0.5, beta=1.0, gamma=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        utility = beta * (split_self - (alpha * 3 * token_self + (1 - alpha) * 0.5 * combined_earning)) + gamma\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744017799.6272378
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Weighting between equity (contribution-based) and equality (50/50 split) norms",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Sensitivity to deviations from fairness reference",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Baseline bias toward acceptance/rejection",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = beta * (split_self - (alpha * 3 * token_self + (1 - alpha) * 0.5 * combined_earning)) + gamma",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Weighting between equity (contribution-based) and equality (50/50 split) norms",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Sensitivity to deviations from fairness reference",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Baseline bias toward acceptance/rejection",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share for participant in \u00a3",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Participant's contribution in tokens",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total money in shared pot (\u00a3)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A fairness-based utility model combining equity and equality norms. The utility is calculated as a linear function of the deviation between the proposed offer and a weighted fairness reference (alpha controls equity/equality weighting). Includes sensitivity (beta) and baseline bias (gamma) parameters. The fairness reference blends the participant's contribution value (3*token_self) and an equal split (0.5*combined_earning). Logistic transformation converts utility to acceptance probability.",
  "target_variable": "accept",
  "full_reasoning": "<think>\nAlright, let's tackle this problem step by step. The goal is to design a computational model that predicts whether a participant (as a responder) accepts or rejects a proposal. The model needs to focus on responder behavior, use the given dataset variables appropriately, and ensure parameter recovery is feasible. \n\nFirst, I need to identify which variables are relevant for the responder's decision. The target variable is \"accept\", which is binary (1 or 0). The key factors influencing this decision likely involve fairness considerations based on both the participant's and opponent's contributions (token_self and token_opp) and the proposed splits (split_self and split_opp). \n\nThe challenge is to model the utility the responder derives from the proposed split. Utility here should combine both equity (contribution-based fairness) and equality (equal split) considerations. Participants might compare the proposed split to what they consider fair under both norms. \n\nLet's consider equity first. The fair share under equity would be proportional to their contribution. Since each token is worth \u00a33, the participant's contribution in monetary terms is 3 * token_self, and the opponent's is 3 * token_opp. The total combined earning is combined_earning = 3*(token_self + token_opp). The equity reference would be (3 * token_self) / combined_earning * combined_earning, which simplifies to 3 * token_self. Wait, no\u2014that's just their contribution. But the split_self is the amount offered to the participant. So the equity reference is the participant's contribution (3*token_self), and the equality reference is half of combined_earning (0.5*combined_earning). \n\nThe participant's perceived fairness might be a weighted combination of these two references. Let's introduce a parameter alpha that determines the weight given to equity versus equality. The fairness reference would be: \nfair_reference = alpha * (3 * token_self) + (1 - alpha) * (0.5 * combined_earning)\n\nThe deviation from this fair reference is then split_self - fair_reference. If the offer (split_self) is higher than the reference, the utility increases; if lower, it decreases. \n\nNext, the utility function could be linear in this deviation, scaled by a parameter beta, which represents sensitivity to unfairness. Additionally, there might be a baseline bias (gamma) affecting the likelihood of acceptance regardless of fairness. \n\nSo the utility U would be:\nU = beta * (split_self - [alpha*(3*token_self) + (1-alpha)*(0.5*combined_earning)]) + gamma\n\nThe probability of accepting is then determined by a logistic function of U:\nP(accept=1) = 1 / (1 + exp(-U))\n\nThis model uses three parameters: alpha (mixing equity and equality), beta (sensitivity to deviation), and gamma (baseline bias). \n\nNow, considering parameter bounds:\n- alpha should be between 0 and 1 since it's a weight.\n- beta can be any real number, but to set finite bounds, perhaps [-10, 10] as extreme sensitivities are unlikely.\n- gamma also can be any real number, but similar bounds [-10, 10] would be reasonable.\n\nThis setup ensures that the model uses relevant variables (token_self, combined_earning, split_self) and the three learnable parameters are within defined bounds. The utility U is unbounded, which aligns with the requirement. \n\nTesting this model for parameter recovery would involve simulating data with known parameters and checking if the estimation process recovers them accurately. The model's simplicity aids in recovery, and the logistic link function connects utility to the binary outcome appropriately.\n</think>\n\n<MODEL>\nU = beta * (split_self - (alpha * 3 * token_self + (1 - alpha) * 0.5 * combined_earning)) + gamma\n</MODEL>\n\n<target_variable>accept</target_variable>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Weighting between equity (contribution-based) and equality (50/50 split) norms\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to deviations from fairness reference\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Baseline bias toward acceptance/rejection\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's contribution in tokens\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money in shared pot (\u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA fairness-based utility model combining equity and equality norms. The utility is calculated as a linear function of the deviation between the proposed offer and a weighted fairness reference (alpha controls equity/equality weighting). Includes sensitivity (beta) and baseline bias (gamma) parameters. The fairness reference blends the participant's contribution value (3*token_self) and an equal split (0.5*combined_earning). Logistic transformation converts utility to acceptance probability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = beta * (split_self - (alpha * 3 * token_self + (1 - alpha) * 0.5 * combined_earning)) + gamma\nSummary: A fairness-based utility model combining equity and equality norms. The utility is calculated as a linear function of the deviation between the proposed offer and a weighted fairness reference (alpha controls equity/equality weighting). Includes sensitivity (beta) and baseline bias (gamma) parameters. The fairness reference blends the participant's contribution value (3*token_self) and an equal split (0.5*combined_earning). Logistic transformation converts utility to acceptance probability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=0.5, beta=1.0, gamma=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        utility = beta * (split_self - (alpha * 3 * token_self + (1 - alpha) * 0.5 * combined_earning)) + gamma\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.8009768009768009,
  "fitting_results": [
    {
      "alpha": 0.0,
      "beta": 10.0,
      "gamma": 3.5214036976162277,
      "success": true,
      "log_likelihood": -0.17669106348867722,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6121461198211233,
      "beta": 1.0709117424688006,
      "gamma": 2.5019751366657657,
      "success": true,
      "log_likelihood": -17.274329905455446,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 1.3698162860944156,
      "gamma": 3.4810556605533374,
      "success": true,
      "log_likelihood": -13.107441176696685,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6221583556799296,
      "beta": 1.042908395505468,
      "gamma": 1.9191843235236365,
      "success": true,
      "log_likelihood": -17.40089937694076,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 2.0019973855829334,
      "gamma": 3.999555625377382,
      "success": true,
      "log_likelihood": -9.277638211098074,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.4558460954826021,
      "beta": 1.6119172977546035,
      "gamma": 4.8547193598350695,
      "success": true,
      "log_likelihood": -12.619999724892478,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": -9.808145697866173,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -0.0001363334258735829,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6598743155673964,
      "beta": 1.7866090250906363,
      "gamma": 5.765214696474759,
      "success": true,
      "log_likelihood": -11.01737957263073,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -0.00013631742895436376,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8048812060793736,
      "beta": 1.5796567561042005,
      "gamma": 2.6722817326095694,
      "success": true,
      "log_likelihood": -12.70188703884904,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.891744239039049,
      "beta": 1.8983034037193813,
      "gamma": 3.8008863914442514,
      "success": true,
      "log_likelihood": -10.346511523534607,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.2451852931761679,
      "beta": 2.3344559104433444,
      "gamma": 0.9822487406454838,
      "success": true,
      "log_likelihood": -6.690264764330907,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6405928333430868,
      "beta": 2.4813887649882167,
      "gamma": 4.576425396699834,
      "success": true,
      "log_likelihood": -9.510156561715018,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -0.00013631742895436376,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -0.00013631742895436376,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": -6.3697553400868445,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -0.00013753422107247543,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -0.00013631742895436376,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": -9.99653170068228,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -115.12245839633142,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 1.5443701442603766,
      "gamma": 8.028242102782642,
      "success": true,
      "log_likelihood": -6.268059753551756,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -0.00013631742895436373,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9441008086804219,
      "beta": 1.2369010339440674,
      "gamma": 3.354915297039379,
      "success": true,
      "log_likelihood": -14.33865599461593,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6588635842418591,
      "beta": 1.3999606387896824,
      "gamma": 6.706681876807317,
      "success": true,
      "log_likelihood": -8.06192274090799,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 1.4551444324580258,
      "gamma": 2.3779925727909625,
      "success": true,
      "log_likelihood": -15.958662711786824,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.3228802494365221,
      "beta": 0.953811809515537,
      "gamma": 2.3836943686586602,
      "success": true,
      "log_likelihood": -18.83752985187299,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 1.7763609249933723,
      "gamma": 4.1945889263514315,
      "success": true,
      "log_likelihood": -10.386554193426424,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.983125295975931,
      "beta": 0.8124839829768737,
      "gamma": 2.4289988257520174,
      "success": true,
      "log_likelihood": -17.907292713101207,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.09437507399084516,
      "beta": 2.629704202296196,
      "gamma": 6.315101204644258,
      "success": true,
      "log_likelihood": -10.753494534026096,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7436867822042389,
      "beta": 8.716192559459003,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -3.649141202625122,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 1.059477001273216,
      "gamma": 5.920858057183339,
      "success": true,
      "log_likelihood": -7.9808958161188315,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8284211899268126,
      "beta": 0.822739813732201,
      "gamma": 3.7341696726358564,
      "success": true,
      "log_likelihood": -14.198925172192752,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -0.00013631742895436379,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "gamma": 3.521403741695517,
      "success": true,
      "log_likelihood": -0.1766910634886778,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 1.335138079836525,
      "gamma": 2.5162690025587904,
      "success": true,
      "log_likelihood": -16.914114174257758,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.22346859115454984,
      "beta": 1.7406553519049672,
      "gamma": 3.0847308241777465,
      "success": true,
      "log_likelihood": -14.589292136880115,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -0.0001363174289543638,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.8061257218121683,
      "gamma": 2.64311297813748,
      "success": true,
      "log_likelihood": -18.849061218418328,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7634439666875008,
      "beta": 1.2807171647251305,
      "gamma": 4.5282087643249,
      "success": true,
      "log_likelihood": -13.171451760982361,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 1.2657605242918544,
      "gamma": 2.991502030493414,
      "success": true,
      "log_likelihood": -13.966481522805966,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8054557484506817,
      "beta": 0.9316400563728873,
      "gamma": 3.262473449244119,
      "success": true,
      "log_likelihood": -16.18540172847894,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.9017427529589173,
      "gamma": 5.37423115815691,
      "success": true,
      "log_likelihood": -7.78260602591876,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.44737512770695353,
      "beta": 1.4004615081721095,
      "gamma": 4.050397524830198,
      "success": true,
      "log_likelihood": -14.348967181067216,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7803411027761301,
      "beta": 1.2938225552598257,
      "gamma": 0.8387552166837455,
      "success": true,
      "log_likelihood": -12.474633533216947,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.4550981293497835,
      "gamma": 4.908477967468934,
      "success": true,
      "log_likelihood": -4.294553516692829,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 1.4920049935444493,
      "gamma": 3.7760877265314594,
      "success": true,
      "log_likelihood": -15.272457292192087,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.48680180485746477,
      "beta": 1.1477548417578156,
      "gamma": 3.4013342797495225,
      "success": true,
      "log_likelihood": -16.059352429660382,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.6122679953920275,
      "gamma": 2.59674016901887,
      "success": true,
      "log_likelihood": -18.408498710229527,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.09055799342892971,
      "beta": 2.5719916927004944,
      "gamma": 5.906489481668712,
      "success": true,
      "log_likelihood": -11.400049114126535,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.38865615020141847,
      "beta": 0.7365687774607169,
      "gamma": 1.1679041582724317,
      "success": true,
      "log_likelihood": -20.155081718990548,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 2.292875050531238,
      "gamma": 4.15287036401471,
      "success": true,
      "log_likelihood": -8.219775066776982,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.27488180193018835,
      "gamma": 0.7790924145584843,
      "success": true,
      "log_likelihood": -24.14506987650404,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.22792802744012317,
      "beta": 0.7449018828663055,
      "gamma": 2.812074050909122,
      "success": true,
      "log_likelihood": -18.039497636979995,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 2.5209013886709504,
      "gamma": 1.7170850889496154,
      "success": true,
      "log_likelihood": -7.210315790025714,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.9310671011059449,
      "gamma": 2.3239271616903245,
      "success": true,
      "log_likelihood": -19.295065190583024,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.3977752639941866,
      "gamma": 1.3205789866275097,
      "success": true,
      "log_likelihood": -22.96150108911447,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.7320027548269371,
      "gamma": 1.1097825049803829,
      "success": true,
      "log_likelihood": -18.607051473836993,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8959403129219919,
      "beta": 2.6690693848761873,
      "gamma": 3.5896078484149023,
      "success": true,
      "log_likelihood": -8.182379517485026,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.4990491692868219,
      "beta": 2.651094537702059,
      "gamma": 3.370523702813955,
      "success": true,
      "log_likelihood": -9.786919899345497,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": -0.47395932518808387,
      "gamma": 1.2297615142228913,
      "success": true,
      "log_likelihood": -11.388035783168243,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 3.743688798779982,
      "gamma": 2.2024451606310196,
      "success": true,
      "log_likelihood": -4.163253362746905,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.5850120771111915,
      "gamma": 3.0634771509852077,
      "success": true,
      "log_likelihood": -15.511453556367048,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.18699314979401402,
      "beta": 0.8391345940831101,
      "gamma": 2.5732219190883088,
      "success": true,
      "log_likelihood": -18.994470930689484,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6487130928670216,
      "beta": 1.5221622856566694,
      "gamma": 3.5197771653268846,
      "success": true,
      "log_likelihood": -13.772257352996418,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "gamma": 3.5214023425715424,
      "success": true,
      "log_likelihood": -0.1766910634888139,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.47718034139862e-05,
      "beta": 0.7031509987992861,
      "gamma": 1.3862434769691165,
      "success": true,
      "log_likelihood": -21.14507639628321,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.284402463156837,
      "beta": 2.804054737437103,
      "gamma": 3.1571738381711674,
      "success": true,
      "log_likelihood": -8.914965394430233,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.13245790199047225,
      "beta": 1.3918827370949023,
      "gamma": 3.5531629597593035,
      "success": true,
      "log_likelihood": -15.780452740241547,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -69.07768910755036,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7390048724510456,
      "beta": 0.8799529436222951,
      "gamma": 4.693927773592375,
      "success": true,
      "log_likelihood": -10.554034667147588,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.8227683484961607,
      "gamma": 2.22321237716483,
      "success": true,
      "log_likelihood": -19.911600528244378,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": -10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -68.94764376786807,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.8712452828985491,
      "beta": 10.0,
      "gamma": 2.996342341976821,
      "success": true,
      "log_likelihood": -0.6691408175379139,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 3.73389411224179,
      "gamma": 2.955885206546268,
      "success": true,
      "log_likelihood": -4.936691162460838,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.4528174146735042,
      "beta": 1.0907929099418325,
      "gamma": 2.7084364464930806,
      "success": true,
      "log_likelihood": -17.475814291405985,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.50821324840158,
      "gamma": 2.6371625201744733,
      "success": true,
      "log_likelihood": -17.209134865942612,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.597447372165566e-08,
      "beta": 0.46854174859367054,
      "gamma": 1.1206583041275322,
      "success": true,
      "log_likelihood": -22.990960532469522,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.18269833626362242,
      "beta": 2.581793384707178,
      "gamma": 8.070971965813515,
      "success": true,
      "log_likelihood": -7.583858799932266,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.6406175626896127,
      "gamma": 5.069462309244234,
      "success": true,
      "log_likelihood": -6.304069484614808,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 1.163479119772793,
      "gamma": -1.0052191116026306,
      "success": true,
      "log_likelihood": -6.284001531522012,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9446601235060493,
      "beta": 0.12505234498652032,
      "gamma": 0.7612164506692397,
      "success": true,
      "log_likelihood": -23.812847911678848,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 10.0,
      "gamma": 3.5214037281836994,
      "success": true,
      "log_likelihood": -0.17669106348867744,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.5795233890850647,
      "gamma": 1.5082856141253291,
      "success": true,
      "log_likelihood": -22.0723662217538,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.2494506819674349,
      "gamma": 3.0655917894254947,
      "success": true,
      "log_likelihood": -10.106604263823478,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 1.7284237103568247,
      "gamma": 0.4822311060633282,
      "success": true,
      "log_likelihood": -8.263949225908554,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.28671359463513635,
      "beta": 1.1295382118696813,
      "gamma": 2.6122850750417146,
      "success": true,
      "log_likelihood": -17.750827351099826,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.23383703594123553,
      "gamma": 1.039550008244181,
      "success": true,
      "log_likelihood": -23.201218078620027,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.29832990522962244,
      "beta": 10.0,
      "gamma": 5.7456166520173495,
      "success": true,
      "log_likelihood": -1.0966848951275159,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.6796806293510977,
      "beta": 0.7884344016794609,
      "gamma": 2.9931204952788786,
      "success": true,
      "log_likelihood": -17.109926514046705,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.0,
      "beta": 0.8292801314125066,
      "gamma": 0.16931313603176518,
      "success": true,
      "log_likelihood": -14.472753563698195,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": -9.924764903708814,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -46.04395125667073,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.9407049081442643,
      "gamma": 2.0396281396109073,
      "success": true,
      "log_likelihood": -19.44683385755294,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.5571337824866214e-08,
      "beta": 0.49675169475561143,
      "gamma": 2.1169931744510273,
      "success": true,
      "log_likelihood": -20.094040727984748,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.2503197969935469,
        "p": 0.48546575390143326
      },
      "beta": {
        "r": 0.9253632567772655,
        "p": 0.00012397972126209245
      },
      "gamma": {
        "r": 0.7046325593213463,
        "p": 0.022887575854360853
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 39.31152999836746,
  "bic_results": {
    "average_bic": 39.31152999836746,
    "individual_bics": [
      11.103938942345685,
      45.29921662627922,
      36.965439168761705,
      45.552355569249855,
      29.305833237564478,
      35.99055626515329,
      10.750829482220079,
      32.78531596062979,
      10.75082945022624,
      36.154330893066415,
      31.443579862437545,
      24.131086344030145,
      29.770869938798366,
      10.75082945022624,
      10.75082945022624,
      10.750831883810475,
      10.75082945022624,
      240.99547360803118,
      23.28667632247184,
      10.75082945022624,
      39.427868804600195,
      26.87440229718431,
      42.66788223894198,
      48.425616519114314,
      31.523665202221178,
      46.56514224157074,
      32.25754588342052,
      18.048839220618575,
      26.712348447605994,
      39.14840715975383,
      10.75082945022624,
      11.103938942345685,
      44.57878516388385,
      39.929141089128564,
      10.75082945022624,
      48.44867925220498,
      37.093460337333056,
      38.68351986098026,
      43.121360272326214,
      26.31576886720585,
      39.44849117750276,
      35.699823881802224,
      19.339663848753986,
      41.2954713997525,
      42.8692616746891,
      47.56755423582739,
      33.550655043621404,
      51.06072025334943,
      27.190106948922296,
      59.040696568376404,
      46.82955208932832,
      25.171188395419758,
      49.340687196534375,
      56.67355899359727,
      47.96465976304232,
      27.115315850338384,
      30.324396614059324,
      33.52662838170482,
      19.07706354086214,
      41.77346392810243,
      48.7394986767473,
      38.295071521361166,
      11.103938942345959,
      53.040709607934744,
      28.580487604228797,
      42.31146229585143,
      148.90593503046904,
      31.858626149663507,
      50.57375787185708,
      148.64584435110447,
      12.088838450444158,
      20.623939140290005,
      45.702185398180305,
      45.16882654725356,
      56.73247788030737,
      25.918274415232865,
      23.35869578459795,
      23.318559878412355,
      58.37625263872603,
      11.103938942345685,
      54.895289258875934,
      30.963765343015286,
      27.27845526718544,
      46.252211517567986,
      57.15299297260839,
      12.943926605623362,
      44.97040984346174,
      39.696063942764724,
      102.83845932870979,
      49.644224530474204,
      50.93863827133782
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.250\n- beta: r = 0.925\n- gamma: r = 0.705",
  "previous_models": [
    "Specification: U = beta * (split_self - (alpha * 3 * token_self + (1 - alpha) * 0.5 * combined_earning)) + gamma\nSummary: A fairness-based utility model combining equity and equality norms. The utility is calculated as a linear function of the deviation between the proposed offer and a weighted fairness reference (alpha controls equity/equality weighting). Includes sensitivity (beta) and baseline bias (gamma) parameters. The fairness reference blends the participant's contribution value (3*token_self) and an equal split (0.5*combined_earning). Logistic transformation converts utility to acceptance probability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 39.31152999836746\nOverall Accuracy: 0.8010\n\nParameter Recovery:\n- alpha: r = 0.250\n- beta: r = 0.925\n- gamma: r = 0.705"
  ]
}