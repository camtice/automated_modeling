{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 2, we want to push performance by reducing covariance between parameters and introducing a flexible transformation that may capture non-linearities in the fairness expectation. The idea is to allow the model to account for diminishing sensitivity or curvature in the evaluation of fairness, which could be important given how contributions translate to expectations. Adding an extra learnable parameter (e.g., gamma) to shape the token ratio exponent can still keep the model parsimonious if implemented carefully. At the same time, we must ensure that the new parameter\u2019s bounds are generous yet realistic so that the model can explore different curvatures without becoming unstable in estimation. We also emphasize clear variable mapping so that all components from the task are used. Keep the standard logistic transformation for linking utility to choice.\n</think>\n\nPlease use the following updated instructions for Run 2:\n\n1. Develop a computational model to predict the utility underlying the binary choice (accept/reject) that incorporates a non-linear transformation of the fairness expectation. In addition to the baseline bias parameter (beta0) and fairness sensitivity parameter (lambda_param), introduce a new learnable parameter (gamma) that modulates the contribution ratio. This will allow the model to capture potential non-linearities (e.g., diminishing sensitivity) when comparing the actual split to the expected fair share.\n\n2. The expected share should be computed as:\n   (token_self / (token_self + token_opp))^gamma * combined_earning.\n   Then, the decision utility is calculated as:\n   U = beta0 + lambda_param * (split_self - expected_share).\n\n3. Be very considerate of potential high covariance among learnable parameters. By introducing gamma in a way that reparameterizes the fairness expectation (instead of forcing a strictly linear effect), you can potentially decrease the correlation between beta0, lambda_param, and gamma. Set generous yet realistic bounds for all learnable parameters:\n   - beta0: between \u201310 and 10,\n   - lambda_param: between \u201320 and 20,\n   - gamma: between 0.5 and 2.0.\n\n4. Present your model using clear mathematical notation between <MODEL> and </MODEL> tags and list variable descriptions in JSON format between <VARIABLES> and </VARIABLES> tags. Ensure each variable used is mapped correctly to observable data and that the target variable is specified with <target_variable>accept</target_variable>.\n\n5. In your summary (<SUMMARY> tags), concisely describe the model\u2019s purpose: its use of a baseline bias, fairness sensitivity, and a non-linear modulation (via gamma) of the fairness expectation to adjust for potential diminishing sensitivity effects. Emphasize that the model aims to reduce parameter covariance while improving parameter recovery, overall accuracy, and lowering the BIC.\n\n6. Encourage out-of-the-box thinking. Do not hesitate to include a brief rationale (if needed outside of the formal model code) for why a non-linear transformation might better capture participant processing of fairness, and how this may lead to better performance metrics without overcomplicating the model.\n\nThese updated instructions should guide you towards a model design that improves accuracy, BIC, and parameter recovery through thoughtful reparameterization and a slight expansion of learnable parameters.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 2, we want to push performance by reducing covariance between parameters and introducing a flexible transformation that may capture non-linearities in the fairness expectation. The idea is to allow the model to account for diminishing sensitivity or curvature in the evaluation of fairness, which could be important given how contributions translate to expectations. Adding an extra learnable parameter (e.g., gamma) to shape the token ratio exponent can still keep the model parsimonious if implemented carefully. At the same time, we must ensure that the new parameter\u2019s bounds are generous yet realistic so that the model can explore different curvatures without becoming unstable in estimation. We also emphasize clear variable mapping so that all components from the task are used. Keep the standard logistic transformation for linking utility to choice.\n</think>\n\nPlease use the following updated instructions for Run 2:\n\n1. Develop a computational model to predict the utility underlying the binary choice (accept/reject) that incorporates a non-linear transformation of the fairness expectation. In addition to the baseline bias parameter (beta0) and fairness sensitivity parameter (lambda_param), introduce a new learnable parameter (gamma) that modulates the contribution ratio. This will allow the model to capture potential non-linearities (e.g., diminishing sensitivity) when comparing the actual split to the expected fair share.\n\n2. The expected share should be computed as:\n   (token_self / (token_self + token_opp))^gamma * combined_earning.\n   Then, the decision utility is calculated as:\n   U = beta0 + lambda_param * (split_self - expected_share).\n\n3. Be very considerate of potential high covariance among learnable parameters. By introducing gamma in a way that reparameterizes the fairness expectation (instead of forcing a strictly linear effect), you can potentially decrease the correlation between beta0, lambda_param, and gamma. Set generous yet realistic bounds for all learnable parameters:\n   - beta0: between \u201310 and 10,\n   - lambda_param: between \u201320 and 20,\n   - gamma: between 0.5 and 2.0.\n\n4. Present your model using clear mathematical notation between <MODEL> and </MODEL> tags and list variable descriptions in JSON format between <VARIABLES> and </VARIABLES> tags. Ensure each variable used is mapped correctly to observable data and that the target variable is specified with <target_variable>accept</target_variable>.\n\n5. In your summary (<SUMMARY> tags), concisely describe the model\u2019s purpose: its use of a baseline bias, fairness sensitivity, and a non-linear modulation (via gamma) of the fairness expectation to adjust for potential diminishing sensitivity effects. Emphasize that the model aims to reduce parameter covariance while improving parameter recovery, overall accuracy, and lowering the BIC.\n\n6. Encourage out-of-the-box thinking. Do not hesitate to include a brief rationale (if needed outside of the formal model code) for why a non-linear transformation might better capture participant processing of fairness, and how this may lead to better performance metrics without overcomplicating the model.\n\nThese updated instructions should guide you towards a model design that improves accuracy, BIC, and parameter recovery through thoughtful reparameterization and a slight expansion of learnable parameters.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nU = beta0 + lambda_param * (split_self - ((token_self/(token_self+token_opp))^gamma * combined_earning))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta0\": {\n      \"description\": \"Baseline bias parameter capturing inherent acceptance tendency\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Fairness sensitivity parameter that scales the deviation from fair share\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -20,\n          \"high\": 20\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Non-linear curvature parameter that modulates the fairness expectation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 2.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 2.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing their contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing opponent's contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial, computed as tokens times \u00a33\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share of the money for the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"U\": {\n      \"description\": \"Decision utility computed from baseline bias and fairness discrepancy\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThe model computes decision utility from a baseline bias (beta0) and a scaled fairness discrepancy term using lambda_param. A flexible, non-linear transformation of the fairness expectation is introduced via gamma, which modulates the expected share computed as (token_self/(token_self+token_opp))^gamma * combined_earning. The resulting utility is passed through a logistic function to predict the binary accept/reject decision, aiming to reduce parameter covariance and improve parameter recovery while capturing potential diminishing sensitivity effects.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta0', 'lambda_param', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = beta0 + lambda_param * (split_self - ((token_self/(token_self+token_opp))^gamma * combined_earning))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"beta0\": {\n      \"description\": \"Baseline bias parameter capturing inherent acceptance tendency\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Fairness sensitivity parameter that scales the deviation from fair share\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -20,\n          \"high\": 20\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Non-linear curvature parameter that modulates the fairness expectation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 2.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 2.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing their contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing opponent's contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial, computed as tokens times \\u00a33\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share of the money for the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"U\": {\n      \"description\": \"Decision utility computed from baseline bias and fairness discrepancy\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta0=0, lambda_param=0, gamma=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        if (token_self + token_opp) == 0:\n            fairness_expectation = 0  # Avoid division by zero\n        else:\n            fairness_expectation = (token_self / (token_self + token_opp))**gamma * combined_earning\n\n        U = beta0 + lambda_param * (split_self - fairness_expectation)\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1744034073.731683
    }
  ],
  "learnable_parameters": {
    "beta0": {
      "description": "Baseline bias parameter capturing inherent acceptance tendency",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Fairness sensitivity parameter that scales the deviation from fair share",
      "range": {
        "min": -20,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -20,
          "high": 20
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Non-linear curvature parameter that modulates the fairness expectation",
      "range": {
        "min": 0.5,
        "max": 2.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 2.0
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = beta0 + lambda_param * (split_self - ((token_self/(token_self+token_opp))^gamma * combined_earning))",
  "variable_descriptions": {
    "beta0": {
      "description": "Baseline bias parameter capturing inherent acceptance tendency",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Fairness sensitivity parameter that scales the deviation from fair share",
      "range": {
        "min": -20,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -20,
          "high": 20
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Non-linear curvature parameter that modulates the fairness expectation",
      "range": {
        "min": 0.5,
        "max": 2.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 2.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "token_self": {
      "description": "Number of tokens found by the participant, representing their contribution",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent, representing opponent's contribution",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned in the trial, computed as tokens times \u00a33",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Proposed share of the money for the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "U": {
      "description": "Decision utility computed from baseline bias and fairness discrepancy",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "The model computes decision utility from a baseline bias (beta0) and a scaled fairness discrepancy term using lambda_param. A flexible, non-linear transformation of the fairness expectation is introduced via gamma, which modulates the expected share computed as (token_self/(token_self+token_opp))^gamma * combined_earning. The resulting utility is passed through a logistic function to predict the binary accept/reject decision, aiming to reduce parameter covariance and improve parameter recovery while capturing potential diminishing sensitivity effects.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nU = beta0 + lambda_param * (split_self - ((token_self/(token_self+token_opp))^gamma * combined_earning))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta0\": {\n      \"description\": \"Baseline bias parameter capturing inherent acceptance tendency\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Fairness sensitivity parameter that scales the deviation from fair share\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -20,\n          \"high\": 20\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Non-linear curvature parameter that modulates the fairness expectation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 2.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 2.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing their contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing opponent's contribution\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned in the trial, computed as tokens times \u00a33\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share of the money for the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"U\": {\n      \"description\": \"Decision utility computed from baseline bias and fairness discrepancy\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThe model computes decision utility from a baseline bias (beta0) and a scaled fairness discrepancy term using lambda_param. A flexible, non-linear transformation of the fairness expectation is introduced via gamma, which modulates the expected share computed as (token_self/(token_self+token_opp))^gamma * combined_earning. The resulting utility is passed through a logistic function to predict the binary accept/reject decision, aiming to reduce parameter covariance and improve parameter recovery while capturing potential diminishing sensitivity effects.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = beta0 + lambda_param * (split_self - ((token_self/(token_self+token_opp))^gamma * combined_earning))\nSummary: The model computes decision utility from a baseline bias (beta0) and a scaled fairness discrepancy term using lambda_param. A flexible, non-linear transformation of the fairness expectation is introduced via gamma, which modulates the expected share computed as (token_self/(token_self+token_opp))^gamma * combined_earning. The resulting utility is passed through a logistic function to predict the binary accept/reject decision, aiming to reduce parameter covariance and improve parameter recovery while capturing potential diminishing sensitivity effects.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta0=0, lambda_param=0, gamma=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        if (token_self + token_opp) == 0:\n            fairness_expectation = 0  # Avoid division by zero\n        else:\n            fairness_expectation = (token_self / (token_self + token_opp))**gamma * combined_earning\n\n        U = beta0 + lambda_param * (split_self - fairness_expectation)\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7808302808302808,
  "fitting_results": [
    {
      "beta0": -1.9143390552616641,
      "lambda_param": 1.24404823234161,
      "gamma": 1.1852419273327546,
      "success": true,
      "log_likelihood": -6.907567773123811,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 1.3339767814394792,
      "lambda_param": 0.9080107615955574,
      "gamma": 1.2518357315739992,
      "success": true,
      "log_likelihood": -17.57153866266656,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -0.7467121811450173,
      "lambda_param": 3.0901602571456257,
      "gamma": 1.958835577131725,
      "success": true,
      "log_likelihood": -8.146994818732725,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -1.133723249904691,
      "lambda_param": 1.251984878111314,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -15.252918989042383,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 0.5976534012913101,
      "lambda_param": 4.016682406605904,
      "gamma": 1.6127543492340386,
      "success": true,
      "log_likelihood": -5.879304592943455,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 2.722536173757402,
      "lambda_param": 1.2672746262999826,
      "gamma": 1.3090433416594804,
      "success": true,
      "log_likelihood": -13.90944539018254,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": -3.2327236970129114,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -5.215466290631699e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 4.7103929266465485,
      "lambda_param": 1.5499937859828619,
      "gamma": 1.0963172810649602,
      "success": true,
      "log_likelihood": -11.659078014419402,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 9.936906355769365,
      "lambda_param": -3.3032467587517615,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -5.256135946923819e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 0.9892387077227708,
      "lambda_param": 1.4971516052259042,
      "gamma": 1.2957899029047173,
      "success": true,
      "log_likelihood": -12.464352195194483,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -2.3927139405800952,
      "lambda_param": 4.733637879400875,
      "gamma": 1.9001524426250287,
      "success": true,
      "log_likelihood": -5.763805021943124,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -3.5834710208000264,
      "lambda_param": 1.1683783022236696,
      "gamma": 1.8461053552560645,
      "success": true,
      "log_likelihood": -8.021631144815007,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 2.471360480269346,
      "lambda_param": 1.8713446149124116,
      "gamma": 1.144193216466254,
      "success": true,
      "log_likelihood": -10.225159415983427,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": -10.758238356114495,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -2.177993484223952e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": -10.380616268802935,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -2.9411931876547122e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": -10.361386566233767,
      "gamma": 0.5478402457973951,
      "success": true,
      "log_likelihood": -5.232199667110293e-07,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 8.573654494915454,
      "lambda_param": -14.841761468209876,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -2.5563540358725255e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 2.5854273825691076,
      "lambda_param": 1.2603203435013446,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -9.036218911091726,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 5.656084505891714,
      "lambda_param": 2.516352926974286,
      "gamma": 1.8616498937334138,
      "success": true,
      "log_likelihood": -4.8803492041915515,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": -2.880385706906392,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -6.937095606732041e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 2.419726243387439,
      "lambda_param": 1.2914625141622544,
      "gamma": 1.233754854775665,
      "success": true,
      "log_likelihood": -14.118166055613623,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 5.0815414137236266,
      "lambda_param": 1.408665181410619,
      "gamma": 1.3585242826212498,
      "success": true,
      "log_likelihood": -8.162500045876826,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -1.0109917421781687,
      "lambda_param": 0.6474240740341966,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -19.447382997846702,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -0.18934654085778813,
      "lambda_param": 0.7910230965963471,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -19.245210905424656,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 3.211428555064543,
      "lambda_param": 1.9285776041896614,
      "gamma": 1.1941890093048175,
      "success": true,
      "log_likelihood": -10.070186067657492,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 0.0636919726655896,
      "lambda_param": 1.1827184317353914,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -15.728291806672607,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 2.8735124855558514,
      "lambda_param": 0.9473429244307178,
      "gamma": 0.9317160874808483,
      "success": true,
      "log_likelihood": -16.594721469232447,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 3.167910186826178,
      "lambda_param": 3.8611995279125764,
      "gamma": 1.0483903129695147,
      "success": true,
      "log_likelihood": -5.6134111849248525,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 4.019381944802046,
      "lambda_param": 1.365747004227729,
      "gamma": 1.711908724031157,
      "success": true,
      "log_likelihood": -7.307237645923048,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 3.4278121455529726,
      "lambda_param": 0.7911058298481812,
      "gamma": 1.079801015624174,
      "success": true,
      "log_likelihood": -14.236277940092675,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": -14.7004016820145,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": 1.9684227567772853e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -1.9136973713842875,
      "lambda_param": 1.2439754317850473,
      "gamma": 1.1851132556064536,
      "success": true,
      "log_likelihood": -6.907567813946302,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 1.3345200392651104,
      "lambda_param": 0.3551854996700624,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -22.297640255429524,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 1.2654298009363838,
      "lambda_param": 0.8529124300822071,
      "gamma": 1.0221186768371087,
      "success": true,
      "log_likelihood": -17.42116229739903,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": -20.0,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": 3.5592291334660646e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 0.4441286313417217,
      "lambda_param": 0.7908754844044649,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -18.23536387164474,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 1.1273741496978282,
      "lambda_param": 1.90164449620787,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -10.2029424996909,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 2.010964580920561,
      "lambda_param": 1.3697236542331412,
      "gamma": 1.2525524039112508,
      "success": true,
      "log_likelihood": -13.628750056682833,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 3.051198478010543,
      "lambda_param": 0.8675727189506188,
      "gamma": 1.0211311772878222,
      "success": true,
      "log_likelihood": -16.277633822715853,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 5.876754791524128,
      "lambda_param": 0.5837609192361725,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -8.352011892428864,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 4.680246206724018,
      "lambda_param": 0.9911099060580028,
      "gamma": 0.652308492740941,
      "success": true,
      "log_likelihood": -15.099697370020287,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -1.1815777103074379,
      "lambda_param": 1.1675417376923654,
      "gamma": 1.452432143235268,
      "success": true,
      "log_likelihood": -12.061624796787981,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 6.061545822631721,
      "lambda_param": -12.022493408150195,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -23.025851466809822,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 1.9266827994077746,
      "lambda_param": 0.6652455080014948,
      "gamma": 0.9847384055762267,
      "success": true,
      "log_likelihood": -19.60846412845028,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 0.464003182572358,
      "lambda_param": 1.0913614254886288,
      "gamma": 1.910295707467083,
      "success": true,
      "log_likelihood": -16.071184378215914,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 0.9065899835506073,
      "lambda_param": 0.5509748505890538,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -18.45216704990284,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 3.736891748325202,
      "lambda_param": 0.9026612629335682,
      "gamma": 0.649949951101064,
      "success": true,
      "log_likelihood": -16.68660557791309,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -0.907658479475047,
      "lambda_param": 0.7102102700019342,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -19.287952562303374,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 3.251111106755783,
      "lambda_param": 2.416073788595535,
      "gamma": 1.134777999924101,
      "success": true,
      "log_likelihood": -8.034943976615722,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 0.012811685843717033,
      "lambda_param": 0.23417908473488086,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -24.128191630905675,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 1.2810278951513878,
      "lambda_param": 0.5660386549269234,
      "gamma": 1.590552576522157,
      "success": true,
      "log_likelihood": -18.895844882060505,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 0.5850003003840731,
      "lambda_param": 0.6006778222403829,
      "gamma": 0.5002787306020904,
      "success": true,
      "log_likelihood": -12.214380643535277,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -0.10208893669343516,
      "lambda_param": 0.5391544505360231,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -21.608028950865982,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 0.22728148838148757,
      "lambda_param": 0.3017203166257431,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -23.250381571336693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -0.610220958178786,
      "lambda_param": 0.9934994106530011,
      "gamma": 1.7475212386058683,
      "success": true,
      "log_likelihood": -16.649807243250176,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -1.2302556630482824,
      "lambda_param": 3.569690013932682,
      "gamma": 1.5887010387936402,
      "success": true,
      "log_likelihood": -6.315389072506419,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 0.6304669067858522,
      "lambda_param": 1.5052158594539444,
      "gamma": 1.1489334123405388,
      "success": true,
      "log_likelihood": -11.382914797866363,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 0.8792011884336459,
      "lambda_param": -0.4728481729135057,
      "gamma": 0.8208248125667083,
      "success": true,
      "log_likelihood": -11.36262962888535,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -2.2306500723562563,
      "lambda_param": 0.989742849794518,
      "gamma": 1.4378958711550665,
      "success": true,
      "log_likelihood": -9.066536832204813,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 1.3988395958510065,
      "lambda_param": 0.4097332584268708,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -16.3534052317431,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 2.3133111060371983,
      "lambda_param": 0.5252234730335205,
      "gamma": 0.7819910443114276,
      "success": true,
      "log_likelihood": -20.318353000396012,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 2.9124473331967837,
      "lambda_param": 1.2204059187980658,
      "gamma": 0.9942131169273292,
      "success": true,
      "log_likelihood": -14.339342126580235,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -1.9144941086899128,
      "lambda_param": 1.244064848610085,
      "gamma": 1.1852774760916478,
      "success": true,
      "log_likelihood": -6.907567771081437,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -0.4983266917751437,
      "lambda_param": 0.5278293483657555,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -21.560091307634686,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -1.463838222047618,
      "lambda_param": 1.1982973507684693,
      "gamma": 1.5377282142509383,
      "success": true,
      "log_likelihood": -11.837655764363669,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -0.049414841196784055,
      "lambda_param": 0.8511951119709518,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -18.5863529732085,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 6.6629990481899,
      "lambda_param": 0.6960865185810858,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -7.76000342641636,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 3.882138585782561,
      "lambda_param": 0.8566245601111522,
      "gamma": 1.2519203511481978,
      "success": true,
      "log_likelihood": -10.584267025161756,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -0.02171733608423408,
      "lambda_param": 0.7410933692022501,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -19.579419869483534,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 2.6907087670626484,
      "lambda_param": 0.3990751105825853,
      "gamma": 1.7145726826906202,
      "success": true,
      "log_likelihood": -9.61212280758393,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": 20.0,
      "gamma": 1.1583811706025453,
      "success": true,
      "log_likelihood": -0.005747029040069049,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 0.7434404328638042,
      "lambda_param": 0.7056532772710483,
      "gamma": 0.5517529217553967,
      "success": true,
      "log_likelihood": -11.70769303442458,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 0.026125484400004326,
      "lambda_param": 0.9549634044925088,
      "gamma": 1.8611106606072783,
      "success": true,
      "log_likelihood": -17.70475004515291,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 1.2387542484171694,
      "lambda_param": 0.5012591265389542,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -16.942554546255696,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -0.13996786065901357,
      "lambda_param": 0.31777187564343995,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -23.59759465874907,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 7.593320158044991,
      "lambda_param": 1.251052620116398,
      "gamma": 0.5123401481331896,
      "success": true,
      "log_likelihood": -11.241628090364044,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 1.7349473187792637,
      "lambda_param": -13.38608199094292,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -46.05171768491566,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -3.540628712400555,
      "lambda_param": 0.5704601089856937,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -6.817216407031812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 0.35708735271652,
      "lambda_param": 0.27593552784688696,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -23.059232928643123,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -1.9146004590861736,
      "lambda_param": 1.2440726730343146,
      "gamma": 1.1853003343789614,
      "success": true,
      "log_likelihood": -6.907567771656091,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 1.3394893251384112,
      "lambda_param": 0.3188550966326508,
      "gamma": 0.6876038388852405,
      "success": true,
      "log_likelihood": -23.179392173465043,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 2.4380781408492447,
      "lambda_param": -0.07384658184512344,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -10.30118220302814,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -2.9198019558329626,
      "lambda_param": 0.6842546096477637,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -10.349503689051392,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -0.5958357166816941,
      "lambda_param": 1.3769290247804649,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -14.781802801349645,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 1.109288404156921,
      "lambda_param": 0.23161758659886908,
      "gamma": 0.9215785327014367,
      "success": true,
      "log_likelihood": -23.198882029250427,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 0.3420385468999154,
      "lambda_param": 1.8816728898829624,
      "gamma": 0.9130771947320843,
      "success": true,
      "log_likelihood": -6.720565938117614,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 2.5862180711540685,
      "lambda_param": 0.704740725405001,
      "gamma": 1.0791455624917183,
      "success": true,
      "log_likelihood": -17.28733276122545,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -1.5309156384396565,
      "lambda_param": 0.9356732361361138,
      "gamma": 1.629419997135104,
      "success": true,
      "log_likelihood": -13.604620312601048,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": -19.702175241854135,
      "gamma": 0.5000000000000001,
      "success": true,
      "log_likelihood": -46.05170185653105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -0.5881093334268818,
      "lambda_param": 0.9668862056153414,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -17.700007036478144,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 2.2181179254133525,
      "lambda_param": 0.28783277328126444,
      "gamma": 0.541500061845793,
      "success": true,
      "log_likelihood": -20.781898650246823,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta0": {
        "r": 0.6887143073529858,
        "p": 2.3852980159470286e-15
      },
      "lambda_param": {
        "r": 0.9088068484072157,
        "p": 5.512177332176843e-39
      },
      "gamma": {
        "r": 0.7444337925247946,
        "p": 6.897687500892602e-19
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 37.17250429350765,
  "bic_results": {
    "average_bic": 37.17250429350765,
    "individual_bics": [
      24.56569236161595,
      45.89363414070145,
      27.04454645283378,
      41.2563947934531,
      22.509166001255238,
      38.56944759573341,
      10.750567246300912,
      34.068712844207134,
      10.750567327640224,
      35.6792612057573,
      22.27816685925458,
      26.793819104998345,
      31.200875647335184,
      10.750556858928201,
      10.750556874192194,
      10.750557861808264,
      10.750556820481039,
      28.822994637551783,
      20.511255223751434,
      10.750570689559543,
      38.986888926595576,
      27.07555690712198,
      49.64532281106173,
      49.24097862621764,
      30.890928950683314,
      42.207140428713544,
      43.93999975383322,
      21.977379185218034,
      25.365032107214425,
      39.22311269555368,
      10.750556811431485,
      24.565692443260936,
      55.34583732622738,
      45.592881410166385,
      10.750556808249872,
      47.221284558657814,
      31.15644181475013,
      38.00805692873399,
      43.30582446080004,
      27.45458060022606,
      40.9499515554089,
      34.87380640894429,
      56.80225974898798,
      49.967485072268886,
      42.89292557180016,
      47.65489091517401,
      44.12376797119451,
      49.326461939975076,
      26.820444768599774,
      59.00694007717968,
      48.542246579489344,
      35.179318102438884,
      53.9666147171003,
      57.25131995804172,
      44.05017130186869,
      23.381334960381167,
      33.51638641110105,
      33.47581607313903,
      28.883630479777956,
      43.457367278854534,
      51.38726281616036,
      39.429241068528796,
      24.565692357531205,
      53.8707394306377,
      34.42586834409567,
      47.923262761785324,
      26.27056366820105,
      31.919090865691842,
      49.9093965543354,
      29.97480243053619,
      10.76205087344847,
      34.165942884217486,
      46.16005690567415,
      44.635665907879726,
      57.945746132866475,
      33.23381299609642,
      102.85399218519964,
      24.384989629431956,
      56.86902267265458,
      24.565692358680515,
      57.10934116229842,
      31.352921221424612,
      31.449564193471115,
      40.314162418067625,
      57.14832087386918,
      24.19168869160356,
      45.32522233781923,
      37.959797440570426,
      102.85396052843042,
      46.15057088832462,
      52.314354115861974
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta0: r = 0.689\n- lambda_param: r = 0.909\n- gamma: r = 0.744",
  "previous_models": [
    "Specification: U = beta0 + lambda_param * (split_self - ((token_self/(token_self+token_opp))^gamma * combined_earning))\nSummary: The model computes decision utility from a baseline bias (beta0) and a scaled fairness discrepancy term using lambda_param. A flexible, non-linear transformation of the fairness expectation is introduced via gamma, which modulates the expected share computed as (token_self/(token_self+token_opp))^gamma * combined_earning. The resulting utility is passed through a logistic function to predict the binary accept/reject decision, aiming to reduce parameter covariance and improve parameter recovery while capturing potential diminishing sensitivity effects.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 37.17250429350765\nOverall Accuracy: 0.7808\n\nParameter Recovery:\n- beta0: r = 0.689\n- lambda_param: r = 0.909\n- gamma: r = 0.744"
  ]
}