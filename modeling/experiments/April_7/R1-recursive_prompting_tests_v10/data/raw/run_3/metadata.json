{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor Run 3, we suggest pushing the limits of out\u2010of\u2010the\u2010box thinking while preserving the core formulation that showed promise in previous runs. In addition to the previous model, emphasize rigorous reparameterization to counter potential covariance. Consider ways to further decorrelate beta0, lambda_param, and gamma (for example, by suggesting normalization, alternative parameter transforms, or even a flexible baseline function). The instructions below encourage creative modifications that could refine the fairness expectation computation, such as testing a log\u2010transformation or adding a scaling factor to the token contribution ratio, while keeping the formulation parsimonious. Remember that the overall structure (baseline bias plus scaled discrepancy between offered split and expected fair share) with a non\u2010linear exponent gamma remains the core, but the solver is now encouraged to experiment with slight modifications that could reduce parameter correlation and improve recovery and predictive accuracy. Ensure that bounds remain realistic: beta0 \u2208 [\u201310, 10], lambda_param \u2208 [\u201320, 20], gamma \u2208 [0.5, 2.0]. Also, the mapping from computed utility to binary choice should be via the standard logistic transformation. Be precise in the model\u2019s math and variable descriptions, and keep the presentation clear and unambiguous.\n</think>\n\nUpdated Instructions for Run 3:\n\n1. Develop a computational model to predict the utility underlying the binary choice (accept/reject) that maintains the original structure but allows room for innovative reparameterization to reduce covariance among parameters. In this model, the baseline bias parameter (beta0), fairness sensitivity parameter (lambda_param), and a non-linear curvature parameter (gamma) shape the decision utility.\n\n2. Compute the fairness expectation as:\n   (token_self / (token_self + token_opp))^gamma * combined_earning.\n   Then, calculate the decision utility as:\n   U = beta0 + lambda_param * (split_self - expected_share),\n   where expected_share is defined as above.\n\n3. To further improve parameter recovery and lower the BIC, encourage consideration of any reparameterization strategies (e.g., normalizing token contributions, applying a log transformation to the token ratio, or including a flexible scaling adjustment) that might help reduce covariance among beta0, lambda_param, and gamma without overcomplicating the model.\n\n4. Set generous yet realistic bounds for the learnable parameters:\n   - beta0: between \u201310 and 10,\n   - lambda_param: between \u201320 and 20,\n   - gamma: between 0.5 and 2.0.\n\n5. Present your model using clear mathematical notation enclosed between <MODEL> and </MODEL> tags, and list variable descriptions in JSON format enclosed between <VARIABLES> and </VARIABLES> tags. Make sure each variable is clearly mapped to observable data, and specify the target variable with <target_variable>accept</target_variable>.\n\n6. In the summary (<SUMMARY> tags), concisely describe that the model computes decision utility through a blend of baseline bias, fairness sensitivity, and a non-linear modulation of the fairness expectation. Note that the approach emphasizes reducing parameter covariance and enhancing parameter recovery and predictive accuracy, while allowing creative modifications (like token ratio transformations) to further improve performance metrics.\n\n7. Encourage out-of-the-box experimentation to adjust the non-linear transformation if it can robustly capture diminishing sensitivity in fairness evaluations. Creativity in exploring alternative transformations or scaling methods is welcome as long as the core structure is maintained.\n\nThese instructions should guide the design of a model that not only adheres to the functional form but also innovates on its parameter structure to achieve better accuracy, lower BIC, and improved parameter recovery.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor Run 3, we suggest pushing the limits of out\u2010of\u2010the\u2010box thinking while preserving the core formulation that showed promise in previous runs. In addition to the previous model, emphasize rigorous reparameterization to counter potential covariance. Consider ways to further decorrelate beta0, lambda_param, and gamma (for example, by suggesting normalization, alternative parameter transforms, or even a flexible baseline function). The instructions below encourage creative modifications that could refine the fairness expectation computation, such as testing a log\u2010transformation or adding a scaling factor to the token contribution ratio, while keeping the formulation parsimonious. Remember that the overall structure (baseline bias plus scaled discrepancy between offered split and expected fair share) with a non\u2010linear exponent gamma remains the core, but the solver is now encouraged to experiment with slight modifications that could reduce parameter correlation and improve recovery and predictive accuracy. Ensure that bounds remain realistic: beta0 \u2208 [\u201310, 10], lambda_param \u2208 [\u201320, 20], gamma \u2208 [0.5, 2.0]. Also, the mapping from computed utility to binary choice should be via the standard logistic transformation. Be precise in the model\u2019s math and variable descriptions, and keep the presentation clear and unambiguous.\n</think>\n\nUpdated Instructions for Run 3:\n\n1. Develop a computational model to predict the utility underlying the binary choice (accept/reject) that maintains the original structure but allows room for innovative reparameterization to reduce covariance among parameters. In this model, the baseline bias parameter (beta0), fairness sensitivity parameter (lambda_param), and a non-linear curvature parameter (gamma) shape the decision utility.\n\n2. Compute the fairness expectation as:\n   (token_self / (token_self + token_opp))^gamma * combined_earning.\n   Then, calculate the decision utility as:\n   U = beta0 + lambda_param * (split_self - expected_share),\n   where expected_share is defined as above.\n\n3. To further improve parameter recovery and lower the BIC, encourage consideration of any reparameterization strategies (e.g., normalizing token contributions, applying a log transformation to the token ratio, or including a flexible scaling adjustment) that might help reduce covariance among beta0, lambda_param, and gamma without overcomplicating the model.\n\n4. Set generous yet realistic bounds for the learnable parameters:\n   - beta0: between \u201310 and 10,\n   - lambda_param: between \u201320 and 20,\n   - gamma: between 0.5 and 2.0.\n\n5. Present your model using clear mathematical notation enclosed between <MODEL> and </MODEL> tags, and list variable descriptions in JSON format enclosed between <VARIABLES> and </VARIABLES> tags. Make sure each variable is clearly mapped to observable data, and specify the target variable with <target_variable>accept</target_variable>.\n\n6. In the summary (<SUMMARY> tags), concisely describe that the model computes decision utility through a blend of baseline bias, fairness sensitivity, and a non-linear modulation of the fairness expectation. Note that the approach emphasizes reducing parameter covariance and enhancing parameter recovery and predictive accuracy, while allowing creative modifications (like token ratio transformations) to further improve performance metrics.\n\n7. Encourage out-of-the-box experimentation to adjust the non-linear transformation if it can robustly capture diminishing sensitivity in fairness evaluations. Creativity in exploring alternative transformations or scaling methods is welcome as long as the core structure is maintained.\n\nThese instructions should guide the design of a model that not only adheres to the functional form but also innovates on its parameter structure to achieve better accuracy, lower BIC, and improved parameter recovery.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nexpected_share = (token_self / (token_self + token_opp))^(gamma) * combined_earning\nU = beta0 + lambda_param * (split_self - expected_share)\nP = 1 / (1 + exp(-U))\n</MODEL>\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta0\": {\n      \"description\": \"Baseline bias parameter influencing decision utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Fairness sensitivity parameter scaling the discrepancy between the offered share and expected fair share\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -20,\n          \"high\": 20\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Curvature parameter modulating the non-linear transformation of the token ratio in the fairness expectation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 2.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 2.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned; each token adds \u00a33\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"expected_share\": {\n      \"description\": \"Fairness expectation computed by non-linearly transforming the token ratio and scaling by the combined earning\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Decision utility combining baseline bias and fairness discrepancy\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P\": {\n      \"description\": \"Probability of accepting the proposal, obtained by logistic transformation of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"accept\": {\n      \"description\": \"Observed binary decision, where 1 indicates acceptance and 0 indicates rejection\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nA computational model that computes decision utility by combining a baseline bias, beta0, with a scaled discrepancy between the offered share (split_self) and a fairness expectation. The fairness expectation is derived by applying a non-linear transformation (with curvature gamma) to the ratio of tokens found by the participant relative to the total tokens, and then scaling by the combined earning. The utility is mapped to a binary choice probability via a logistic function, with learnable parameters beta0 \u2208 [\u201310, 10], lambda_param \u2208 [\u201320, 20], and gamma \u2208 [0.5, 2.0]. The model emphasizes reparameterization to reduce parameter covariance and improve parameter recovery and predictive accuracy.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta0', 'lambda_param', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                expected_share = (token_self / (token_self + token_opp))^(gamma) * combined_earning\nU = beta0 + lambda_param * (split_self - expected_share)\nP = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"beta0\": {\n      \"description\": \"Baseline bias parameter influencing decision utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Fairness sensitivity parameter scaling the discrepancy between the offered share and expected fair share\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -20,\n          \"high\": 20\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Curvature parameter modulating the non-linear transformation of the token ratio in the fairness expectation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 2.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 2.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned; each token adds \\u00a33\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"expected_share\": {\n      \"description\": \"Fairness expectation computed by non-linearly transforming the token ratio and scaling by the combined earning\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Decision utility combining baseline bias and fairness discrepancy\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P\": {\n      \"description\": \"Probability of accepting the proposal, obtained by logistic transformation of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"accept\": {\n      \"description\": \"Observed binary decision, where 1 indicates acceptance and 0 indicates rejection\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta0=0, lambda_param=1, gamma=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        # Handle the case where both token_self and token_opp are zero\n        if token_self == 0 and token_opp == 0:\n            expected_share = 0  # Or some other sensible default\n        else:\n            expected_share = (token_self / (token_self + token_opp))**gamma * combined_earning\n\n        U = beta0 + lambda_param * (split_self - expected_share)\n        P = 1 / (1 + math.exp(-U))\n        model_predictions.append(P)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1744034142.338437
    }
  ],
  "learnable_parameters": {
    "beta0": {
      "description": "Baseline bias parameter influencing decision utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Fairness sensitivity parameter scaling the discrepancy between the offered share and expected fair share",
      "range": {
        "min": -20,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -20,
          "high": 20
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Curvature parameter modulating the non-linear transformation of the token ratio in the fairness expectation",
      "range": {
        "min": 0.5,
        "max": 2.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 2.0
        }
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "expected_share = (token_self / (token_self + token_opp))^(gamma) * combined_earning\nU = beta0 + lambda_param * (split_self - expected_share)\nP = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "beta0": {
      "description": "Baseline bias parameter influencing decision utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -10,
          "high": 10
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Fairness sensitivity parameter scaling the discrepancy between the offered share and expected fair share",
      "range": {
        "min": -20,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": -20,
          "high": 20
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Curvature parameter modulating the non-linear transformation of the token ratio in the fairness expectation",
      "range": {
        "min": 0.5,
        "max": 2.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {
          "low": 0.5,
          "high": 2.0
        }
      },
      "learnable": true,
      "source": "learnable"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total amount of money earned; each token adds \u00a33",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "The proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "expected_share": {
      "description": "Fairness expectation computed by non-linearly transforming the token ratio and scaling by the combined earning",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Decision utility combining baseline bias and fairness discrepancy",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P": {
      "description": "Probability of accepting the proposal, obtained by logistic transformation of U",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "accept": {
      "description": "Observed binary decision, where 1 indicates acceptance and 0 indicates rejection",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A computational model that computes decision utility by combining a baseline bias, beta0, with a scaled discrepancy between the offered share (split_self) and a fairness expectation. The fairness expectation is derived by applying a non-linear transformation (with curvature gamma) to the ratio of tokens found by the participant relative to the total tokens, and then scaling by the combined earning. The utility is mapped to a binary choice probability via a logistic function, with learnable parameters beta0 \u2208 [\u201310, 10], lambda_param \u2208 [\u201320, 20], and gamma \u2208 [0.5, 2.0]. The model emphasizes reparameterization to reduce parameter covariance and improve parameter recovery and predictive accuracy.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nexpected_share = (token_self / (token_self + token_opp))^(gamma) * combined_earning\nU = beta0 + lambda_param * (split_self - expected_share)\nP = 1 / (1 + exp(-U))\n</MODEL>\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta0\": {\n      \"description\": \"Baseline bias parameter influencing decision utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -10,\n          \"high\": 10\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Fairness sensitivity parameter scaling the discrepancy between the offered share and expected fair share\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": -20,\n          \"high\": 20\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Curvature parameter modulating the non-linear transformation of the token ratio in the fairness expectation\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 2.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {\n          \"low\": 0.5,\n          \"high\": 2.0\n        }\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total amount of money earned; each token adds \u00a33\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"expected_share\": {\n      \"description\": \"Fairness expectation computed by non-linearly transforming the token ratio and scaling by the combined earning\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Decision utility combining baseline bias and fairness discrepancy\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P\": {\n      \"description\": \"Probability of accepting the proposal, obtained by logistic transformation of U\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"accept\": {\n      \"description\": \"Observed binary decision, where 1 indicates acceptance and 0 indicates rejection\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n<target_variable>accept</target_variable>\n<SUMMARY>\nA computational model that computes decision utility by combining a baseline bias, beta0, with a scaled discrepancy between the offered share (split_self) and a fairness expectation. The fairness expectation is derived by applying a non-linear transformation (with curvature gamma) to the ratio of tokens found by the participant relative to the total tokens, and then scaling by the combined earning. The utility is mapped to a binary choice probability via a logistic function, with learnable parameters beta0 \u2208 [\u201310, 10], lambda_param \u2208 [\u201320, 20], and gamma \u2208 [0.5, 2.0]. The model emphasizes reparameterization to reduce parameter covariance and improve parameter recovery and predictive accuracy.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: expected_share = (token_self / (token_self + token_opp))^(gamma) * combined_earning\nU = beta0 + lambda_param * (split_self - expected_share)\nP = 1 / (1 + exp(-U))\nSummary: A computational model that computes decision utility by combining a baseline bias, beta0, with a scaled discrepancy between the offered share (split_self) and a fairness expectation. The fairness expectation is derived by applying a non-linear transformation (with curvature gamma) to the ratio of tokens found by the participant relative to the total tokens, and then scaling by the combined earning. The utility is mapped to a binary choice probability via a logistic function, with learnable parameters beta0 \u2208 [\u201310, 10], lambda_param \u2208 [\u201320, 20], and gamma \u2208 [0.5, 2.0]. The model emphasizes reparameterization to reduce parameter covariance and improve parameter recovery and predictive accuracy.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta0=0, lambda_param=1, gamma=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        # Handle the case where both token_self and token_opp are zero\n        if token_self == 0 and token_opp == 0:\n            expected_share = 0  # Or some other sensible default\n        else:\n            expected_share = (token_self / (token_self + token_opp))**gamma * combined_earning\n\n        U = beta0 + lambda_param * (split_self - expected_share)\n        P = 1 / (1 + math.exp(-U))\n        model_predictions.append(P)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5894383394383395,
  "fitting_results": [
    {
      "beta0": 0.5581572267776919,
      "lambda_param": 8.797130716361803,
      "gamma": 0.7047667693837103,
      "success": true,
      "log_likelihood": -24.587241287641707,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 9.99883717043636,
      "lambda_param": 20.0,
      "gamma": 1.2846667684269437,
      "success": true,
      "log_likelihood": -20.454436161972016,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -4.937472458430937,
      "lambda_param": 20.0,
      "gamma": 1.8240123694036707,
      "success": true,
      "log_likelihood": -18.954717541882204,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": 19.35797664345717,
      "gamma": 1.5662306621557374,
      "success": true,
      "log_likelihood": -22.21272359861189,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -1.03343553733763,
      "lambda_param": 20.0,
      "gamma": 1.713477584981677,
      "success": true,
      "log_likelihood": -20.220446417728063,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 7.104432068145164,
      "gamma": 1.5626787336565653,
      "success": true,
      "log_likelihood": -19.100442714170065,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 8.221950587166816,
      "lambda_param": -16.495537142232333,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -11.27742074647592,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -8.192188252706202,
      "lambda_param": 20.0,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -18.838969657271498,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 4.592597280928619,
      "lambda_param": -10.25898620046185,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -11.277422901040405,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 20.0,
      "gamma": 1.1322267990797705,
      "success": true,
      "log_likelihood": -21.18989856276266,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": 17.502897640918686,
      "gamma": 1.7804804846466398,
      "success": true,
      "log_likelihood": -19.912272106084206,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": 4.744941323935207,
      "gamma": 1.3988185219210423,
      "success": true,
      "log_likelihood": -24.526351929834185,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -4.263787907316488,
      "lambda_param": 18.36052829726422,
      "gamma": 1.5151313519577945,
      "success": true,
      "log_likelihood": -20.872833451723352,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 3.0441584007756255,
      "lambda_param": -10.947581943757843,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -11.27742702307035,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 7.377230585211915,
      "lambda_param": -4.687408887226704,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -11.2774273111038,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 0.9939583643276206,
      "lambda_param": -13.769865978962532,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -11.277427582759431,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 0.1588899698341209,
      "lambda_param": -15.068130121812683,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -11.27742712867846,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 9.210368151526476,
      "lambda_param": 5.195750352103519,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -15.379658720755323,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 4.544563933188284,
      "gamma": 1.6782447135642047,
      "success": true,
      "log_likelihood": -13.717505387961124,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 0.1458719899347851,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -11.277847667815754,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 20.0,
      "gamma": 1.526755793401446,
      "success": true,
      "log_likelihood": -19.51927768399506,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 14.083022116756956,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -14.78377017736305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": 20.0,
      "gamma": 1.1544001765591678,
      "success": true,
      "log_likelihood": -23.436028127899295,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": 17.522172037020223,
      "gamma": 1.7799159701270437,
      "success": true,
      "log_likelihood": -20.912295726852363,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 19.346439521673716,
      "gamma": 1.5813354133550923,
      "success": true,
      "log_likelihood": -19.37483093298177,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -1.2277590977378996,
      "lambda_param": 20.0,
      "gamma": 1.7021113708304336,
      "success": true,
      "log_likelihood": -19.24129850147155,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 2.3710057054178235,
      "lambda_param": 20.0,
      "gamma": 1.338068261879403,
      "success": true,
      "log_likelihood": -20.821447126640223,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -6.12350020174554,
      "lambda_param": 20.0,
      "gamma": 1.2971445953219065,
      "success": true,
      "log_likelihood": -21.925697611163002,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 9.198651142808226,
      "lambda_param": 16.442665628042352,
      "gamma": 1.9551859103503575,
      "success": true,
      "log_likelihood": -15.19581246449057,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 19.994567554467917,
      "gamma": 1.7114118938113942,
      "success": true,
      "log_likelihood": -18.342943360364956,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -2.465566709175663,
      "lambda_param": -18.696293245096843,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -11.277427790809323,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": 2.4500603107504793,
      "gamma": 1.9998971178908036,
      "success": true,
      "log_likelihood": -24.751476655505584,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 1.235791794826431,
      "lambda_param": 18.62780264613834,
      "gamma": 1.3586361568927716,
      "success": true,
      "log_likelihood": -24.82959307823393,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 17.31717214643213,
      "gamma": 1.1048530082105603,
      "success": true,
      "log_likelihood": -22.200024349154116,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 7.123772460470803,
      "lambda_param": -9.41660873324554,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -11.277421054029153,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 4.677966343525853,
      "lambda_param": 20.0,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -21.01525704849232,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 9.998493435678222,
      "lambda_param": 14.448501407084901,
      "gamma": 1.8930823016604685,
      "success": true,
      "log_likelihood": -17.2061476718282,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 9.698609465940063,
      "lambda_param": 20.0,
      "gamma": 1.290934733282562,
      "success": true,
      "log_likelihood": -20.453697868205232,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 6.150568121074799,
      "gamma": 1.4403604696361694,
      "success": true,
      "log_likelihood": -19.401533851693415,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": -20.0,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -14.277420745037494,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 4.978967817390228,
      "gamma": 0.9995822257243692,
      "success": true,
      "log_likelihood": -19.934667189601434,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 7.483033295599946,
      "lambda_param": 20.0,
      "gamma": 1.0245130508721119,
      "success": true,
      "log_likelihood": -22.721865301726687,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -0.28728887690651306,
      "lambda_param": -15.481144996929752,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -12.277428225882739,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -6.0882160431658985,
      "lambda_param": 20.0,
      "gamma": 1.2964257381575164,
      "success": true,
      "log_likelihood": -21.925697875425772,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 0.5941265467810473,
      "lambda_param": -14.793538679938733,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -25.277425743023688,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 14.083007249769178,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -19.783722330807752,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 7.041444135589326,
      "lambda_param": -13.966155858811897,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -28.277420755833354,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -9.591083162594305,
      "lambda_param": 20.0,
      "gamma": 1.2796635992960756,
      "success": true,
      "log_likelihood": -22.794681077956913,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -0.6352365510132137,
      "lambda_param": 20.0,
      "gamma": 1.5444754765090367,
      "success": true,
      "log_likelihood": -21.229053987815522,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 5.115561241541505,
      "lambda_param": 20.0,
      "gamma": 0.6677925653183896,
      "success": true,
      "log_likelihood": -24.573503501596942,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -1.4541968681093804,
      "lambda_param": 19.99605140243371,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -21.3556457775357,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 1.8952658959139714,
      "lambda_param": 14.597700187941983,
      "gamma": 0.6901092529136991,
      "success": true,
      "log_likelihood": -24.574467927318885,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": 9.429583215590675,
      "gamma": 1.7456641445378598,
      "success": true,
      "log_likelihood": -22.728298684151145,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": 8.539135862905207,
      "gamma": 1.5319010530387391,
      "success": true,
      "log_likelihood": -23.71259836990574,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 5.176064557777834,
      "lambda_param": 20.0,
      "gamma": 1.0722373245438412,
      "success": true,
      "log_likelihood": -22.696599286176657,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -8.7204117972308,
      "lambda_param": 18.61122965422939,
      "gamma": 1.5230384163338981,
      "success": true,
      "log_likelihood": -21.238692550475008,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -1.9504916445355698,
      "lambda_param": 9.1955656297218,
      "gamma": 1.1168361778335567,
      "success": true,
      "log_likelihood": -23.453927940899884,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 8.337922557384188,
      "lambda_param": -2.1896739788890835,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -15.277434747437638,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -8.225598950297396,
      "lambda_param": 18.37441097089708,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -24.95329849258527,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 2.471330846111947,
      "lambda_param": -18.85076431862557,
      "gamma": 0.5334237107281914,
      "success": true,
      "log_likelihood": -18.277422295896244,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 5.995346842469866,
      "lambda_param": 19.944932705263504,
      "gamma": 1.4199412541132064,
      "success": true,
      "log_likelihood": -21.113519055988057,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 8.75722062969843,
      "gamma": 1.1998775208719281,
      "success": true,
      "log_likelihood": -20.318674422366836,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 0.19339415547065197,
      "lambda_param": 18.676089406462445,
      "gamma": 0.7207876459304353,
      "success": true,
      "log_likelihood": -24.57357719504373,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -2.6894881788923026,
      "lambda_param": 11.44183871251742,
      "gamma": 1.0206476439870535,
      "success": true,
      "log_likelihood": -24.196618696986395,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": 20.0,
      "gamma": 1.1552469001305563,
      "success": true,
      "log_likelihood": -23.435919457825115,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 2.3702076444427664,
      "lambda_param": 20.0,
      "gamma": 1.3380978005947952,
      "success": true,
      "log_likelihood": -20.821447120481384,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 0.9037605215003416,
      "lambda_param": -17.409381648110774,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -14.277421338895772,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 14.083273676110425,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -15.783768181721662,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 2.4024901986368903,
      "lambda_param": 20.0,
      "gamma": 1.3372908847077722,
      "success": true,
      "log_likelihood": -21.821636384856582,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 0.2349557451467012,
      "lambda_param": -17.897805429090404,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -14.277421570078143,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -8.394898481215092,
      "lambda_param": 15.437505580616694,
      "gamma": 1.1637588376126293,
      "success": true,
      "log_likelihood": -23.442498609583275,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -1.4177444704215114,
      "lambda_param": 10.389686550509579,
      "gamma": 0.7510730170125173,
      "success": true,
      "log_likelihood": -24.580206346670966,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 2.36567415691959,
      "lambda_param": 20.0,
      "gamma": 1.338148374532587,
      "success": true,
      "log_likelihood": -21.821446930815753,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 14.100524748934257,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -17.780424564426994,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 7.0232519131679245,
      "gamma": 1.0375763439808383,
      "success": true,
      "log_likelihood": -22.8490009449392,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 20.0,
      "gamma": 1.9882158612993206,
      "success": true,
      "log_likelihood": -19.16972299784771,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -1.0310308390546057,
      "lambda_param": -16.23055759109137,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -13.277430085353982,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -5.761805904547241,
      "lambda_param": 7.064890220758269,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -24.953310015947824,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": 7.355018194508762,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -21.594760632328367,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -5.192499459831467,
      "lambda_param": 12.8483855065032,
      "gamma": 0.8170293845032974,
      "success": true,
      "log_likelihood": -24.57567022376192,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 1.187693903476489,
      "lambda_param": 9.993495845589619,
      "gamma": 1.0356534315195538,
      "success": true,
      "log_likelihood": -23.477995533127615,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 2.7163418995460336,
      "lambda_param": -11.129289716028326,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -14.277428422222696,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": 2.245786005509595,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -24.857755581460566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 9.34318875894103,
      "lambda_param": 13.155203119672013,
      "gamma": 1.43175614221149,
      "success": true,
      "log_likelihood": -22.520053778059165,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 2.447469137663629,
      "lambda_param": 20.0,
      "gamma": 1.3362682968049207,
      "success": true,
      "log_likelihood": -21.82171347498452,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 9.923923500295075,
      "lambda_param": 19.136008178204516,
      "gamma": 0.8070139407102394,
      "success": true,
      "log_likelihood": -24.193747946147933,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 10.003682628186523,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -19.450725718922705,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -6.414437722474164,
      "lambda_param": 7.0268078385586765,
      "gamma": 0.5,
      "success": true,
      "log_likelihood": -24.953304632248056,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 3.2670333063515113,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -12.742186860243224,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": 4.793270784917415,
      "gamma": 2.0,
      "success": true,
      "log_likelihood": -22.760861421675767,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 1.9082371367239006,
      "gamma": 0.5284531581959808,
      "success": true,
      "log_likelihood": -20.78507268206204,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta0": {
        "r": 0.1907546948291311,
        "p": 0.05729417668627653
      },
      "lambda_param": {
        "r": 0.45169657738219476,
        "p": 2.391930586091961e-06
      },
      "gamma": {
        "r": 0.11369548701650097,
        "p": 0.2600312870316265
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 50.37083093876789,
  "bic_results": {
    "average_bic": 50.37083093876789,
    "individual_bics": [
      59.92503939065175,
      51.659429139312365,
      48.659991899132734,
      55.17600401259212,
      51.19144965082445,
      48.951442243708456,
      33.30539830832017,
      48.42849612991132,
      33.30540261744914,
      53.130353940893656,
      50.575101027536746,
      59.8032606750367,
      52.49622371881503,
      33.30541086150903,
      33.30541143757593,
      33.30541198088719,
      33.30541107272525,
      41.50987425687897,
      38.18556759129058,
      33.30625215099984,
      49.789112183358455,
      40.31809717009443,
      57.622613071166924,
      52.575148269073054,
      49.50021868133187,
      49.233153818311436,
      52.39345106864877,
      54.60195203769433,
      41.14218174434947,
      47.43644353609824,
      33.30541239698698,
      60.253510126379496,
      60.409742971836195,
      55.15060551367657,
      33.30539892342664,
      52.78107091235297,
      45.16285215902474,
      51.65795255177879,
      49.55362451875516,
      39.30539830544332,
      50.619891194571196,
      56.1942874188217,
      35.30541326713381,
      54.60195256621988,
      61.30540830141571,
      50.31800147698384,
      67.30539832703504,
      56.33991897128216,
      53.20866479099938,
      59.89756381856222,
      53.461848370439725,
      59.8994926700061,
      56.207154183670625,
      58.17575355517981,
      56.14375538772164,
      53.22794191631834,
      57.6584126971681,
      41.305426310243604,
      60.657153800538865,
      47.305401407160815,
      52.97759492734444,
      51.38790566010201,
      59.89771120545579,
      59.143794209341124,
      57.62239573101856,
      52.3934510563311,
      39.305399493159875,
      42.31809317881165,
      54.39382958508149,
      39.30539995552462,
      57.63555403453488,
      59.91096950871027,
      54.393450676999834,
      46.311405944222315,
      56.448558705246725,
      49.090002811063755,
      37.305416986076295,
      60.65717684726398,
      53.94007808002506,
      59.90189726289218,
      57.706547881623564,
      39.30541365981372,
      60.46606797828946,
      55.790664371486656,
      54.39398376533737,
      59.1380527076642,
      49.65200825321374,
      60.65716607986444,
      36.23493053585478,
      56.27227965871987,
      52.320702179492415
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta0: r = 0.191\n- lambda_param: r = 0.452\n- gamma: r = 0.114",
  "previous_models": [
    "Specification: expected_share = (token_self / (token_self + token_opp))^(gamma) * combined_earning\nU = beta0 + lambda_param * (split_self - expected_share)\nP = 1 / (1 + exp(-U))\nSummary: A computational model that computes decision utility by combining a baseline bias, beta0, with a scaled discrepancy between the offered share (split_self) and a fairness expectation. The fairness expectation is derived by applying a non-linear transformation (with curvature gamma) to the ratio of tokens found by the participant relative to the total tokens, and then scaling by the combined earning. The utility is mapped to a binary choice probability via a logistic function, with learnable parameters beta0 \u2208 [\u201310, 10], lambda_param \u2208 [\u201320, 20], and gamma \u2208 [0.5, 2.0]. The model emphasizes reparameterization to reduce parameter covariance and improve parameter recovery and predictive accuracy.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 50.37083093876789\nOverall Accuracy: 0.5894\n\nParameter Recovery:\n- beta0: r = 0.191\n- lambda_param: r = 0.452\n- gamma: r = 0.114"
  ]
}