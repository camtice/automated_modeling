{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nFor run 5, we need to build on our previous models by encouraging even more creative reparameterization strategies. The goal is to improve overall model performance, parameter recovery, and BIC. We want the model to maintain the core structure while innovating in how the fairness expectation is computed. We should suggest experimenting with alternative transformations (e.g., different normalization techniques, alternative scales or shifting constants) and possibly letting the transformation function be partly learned rather than simply using the fixed ratio raised to gamma. We will also insist on realistic but generous bounds for beta0, lambda_param, and gamma, and encourage thinking outside the most obvious choices.\n</think>\n\nUpdated Instructions for Run 5:\n\n1. Develop a computational model that predicts the utility underlying a binary decision (accept/reject) using an innovative reformulation of a baseline bias, fairness sensitivity, and a non-linear transformation of the fairness expectation. The core model should have a baseline term (beta0), a sensitivity parameter (lambda_param), and a non-linear curvature parameter (gamma).\n\n2. Define the fairness expectation as a transformation of the token ratio:\n   \u2022 Begin with the ratio of token_self to the sum (token_self + token_opp).\n   \u2022 Experiment with alternative transformations such as:\n     - Normalization (e.g., standardizing the tokens by their sum or mean values),\n     - Log transformation (e.g., using log(token_self + c) over a function of token_self and token_opp, where c is a constant),\n     - Incorporating a flexible shifting or scaling factor prior to applying the non-linear transformation.\n   \u2022 Finally, multiply the transformed ratio by the combined_earning to obtain the fairness expectation.\n\n3. Compute decision utility as:\n   U = beta0 + lambda_param * (split_self - fairness_expectation).\n\n4. Map the utility to a predicted acceptance probability via the logistic function:\n   P = 1 / (1 + exp(-U)).\n\n5. Set generous but realistic bounds for the learnable parameters:\n   \u2022 beta0: between \u201310 and 10,\n   \u2022 lambda_param: between \u201320 and 20,\n   \u2022 gamma: between 0.5 and 2.0.\n   Feel free to incorporate additional parameters for scaling or shifting if needed, provided all new parameters also have realistic bounds.\n\n6. Present your model using clear mathematical notation between <MODEL> and </MODEL> tags, and provide complete variable descriptions in JSON format between <VARIABLES> and </VARIABLES>. Specify the target variable using <target_variable>accept</target_variable>.\n\n7. In the summary (<SUMMARY> tags), concisely explain that the model calculates decision utility by combining baseline bias, fairness sensitivity, and a creatively transformed fairness expectation. Emphasize that innovative reparameterization strategies (e.g., alternative normalizations, log transformations, and scaling adjustments) are incorporated to reduce parameter covariance and improve parameter recovery and predictive accuracy.\n\n8. Encourage out-of-the-box experimentation with the token ratio transformation while ensuring the core framework remains interpretable and applicable to the dataset. Innovative ideas that deviate subtly from the standard formulation but maintain clarity are highly welcome.\n\nThese instructions should guide the creation of a model that aims to optimize accuracy, lower BIC, and significantly enhance parameter recovery, leveraging creative reparameterization approaches without deviating from the fundamental structure.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nFor run 5, we need to build on our previous models by encouraging even more creative reparameterization strategies. The goal is to improve overall model performance, parameter recovery, and BIC. We want the model to maintain the core structure while innovating in how the fairness expectation is computed. We should suggest experimenting with alternative transformations (e.g., different normalization techniques, alternative scales or shifting constants) and possibly letting the transformation function be partly learned rather than simply using the fixed ratio raised to gamma. We will also insist on realistic but generous bounds for beta0, lambda_param, and gamma, and encourage thinking outside the most obvious choices.\n</think>\n\nUpdated Instructions for Run 5:\n\n1. Develop a computational model that predicts the utility underlying a binary decision (accept/reject) using an innovative reformulation of a baseline bias, fairness sensitivity, and a non-linear transformation of the fairness expectation. The core model should have a baseline term (beta0), a sensitivity parameter (lambda_param), and a non-linear curvature parameter (gamma).\n\n2. Define the fairness expectation as a transformation of the token ratio:\n   \u2022 Begin with the ratio of token_self to the sum (token_self + token_opp).\n   \u2022 Experiment with alternative transformations such as:\n     - Normalization (e.g., standardizing the tokens by their sum or mean values),\n     - Log transformation (e.g., using log(token_self + c) over a function of token_self and token_opp, where c is a constant),\n     - Incorporating a flexible shifting or scaling factor prior to applying the non-linear transformation.\n   \u2022 Finally, multiply the transformed ratio by the combined_earning to obtain the fairness expectation.\n\n3. Compute decision utility as:\n   U = beta0 + lambda_param * (split_self - fairness_expectation).\n\n4. Map the utility to a predicted acceptance probability via the logistic function:\n   P = 1 / (1 + exp(-U)).\n\n5. Set generous but realistic bounds for the learnable parameters:\n   \u2022 beta0: between \u201310 and 10,\n   \u2022 lambda_param: between \u201320 and 20,\n   \u2022 gamma: between 0.5 and 2.0.\n   Feel free to incorporate additional parameters for scaling or shifting if needed, provided all new parameters also have realistic bounds.\n\n6. Present your model using clear mathematical notation between <MODEL> and </MODEL> tags, and provide complete variable descriptions in JSON format between <VARIABLES> and </VARIABLES>. Specify the target variable using <target_variable>accept</target_variable>.\n\n7. In the summary (<SUMMARY> tags), concisely explain that the model calculates decision utility by combining baseline bias, fairness sensitivity, and a creatively transformed fairness expectation. Emphasize that innovative reparameterization strategies (e.g., alternative normalizations, log transformations, and scaling adjustments) are incorporated to reduce parameter covariance and improve parameter recovery and predictive accuracy.\n\n8. Encourage out-of-the-box experimentation with the token ratio transformation while ensuring the core framework remains interpretable and applicable to the dataset. Innovative ideas that deviate subtly from the standard formulation but maintain clarity are highly welcome.\n\nThese instructions should guide the creation of a model that aims to optimize accuracy, lower BIC, and significantly enhance parameter recovery, leveraging creative reparameterization approaches without deviating from the fundamental structure.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nfairness_ratio = (token_self + shift_const) / (token_self + token_opp + 2*shift_const)\nfairness_expectation = combined_earning * (fairness_ratio)^gamma\nU = beta0 + lambda_param * (split_self - fairness_expectation)\nP = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta0\": {\n      \"description\": \"Baseline bias parameter that offsets utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Sensitivity parameter to the discrepancy between the proposed share and fairness expectation\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Non-linear curvature parameter that modulates the transformation of the token ratio\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 2.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"shift_const\": {\n      \"description\": \"Shifting constant that smooths and reparameterizes the token ratio transformation\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined money earned (each token is valued at \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accept\": {\n      \"description\": \"Binary outcome variable indicating whether the participant accepted (1) or rejected (0) the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA decision utility model that computes utility as a baseline bias (beta0) plus sensitivity (lambda_param) to the deviation between the proposed share (split_self) and a fairness expectation. The fairness expectation is innovatively derived from a transformed token ratio\u2014normalized with a shifting constant (shift_const) and raised to a non-linear curvature (gamma)\u2014and scaled by the combined earning. The utility is then mapped to an acceptance probability using a logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta0', 'lambda_param', 'gamma', 'shift_const']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                fairness_ratio = (token_self + shift_const) / (token_self + token_opp + 2*shift_const)\nfairness_expectation = combined_earning * (fairness_ratio)^gamma\nU = beta0 + lambda_param * (split_self - fairness_expectation)\nP = 1/(1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"beta0\": {\n      \"description\": \"Baseline bias parameter that offsets utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Sensitivity parameter to the discrepancy between the proposed share and fairness expectation\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Non-linear curvature parameter that modulates the transformation of the token ratio\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 2.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"shift_const\": {\n      \"description\": \"Shifting constant that smooths and reparameterizes the token ratio transformation\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined money earned (each token is valued at \\u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accept\": {\n      \"description\": \"Binary outcome variable indicating whether the participant accepted (1) or rejected (0) the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta0=0.0, lambda_param=1.0, gamma=1.0, shift_const=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        fairness_ratio = (token_self + shift_const) / (token_self + token_opp + 2 * shift_const)\n        fairness_expectation = combined_earning * (fairness_ratio ** gamma)\n        U = beta0 + lambda_param * (split_self - fairness_expectation)\n        P = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"group1\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 30, \"split_opp\": 15.0, \"split_self\": 15.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 15.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 15.0}, {\"ID\": 1, \"group\": \"group1\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 2, \"token_self\": 8, \"combined_earning\": 30, \"split_opp\": 9.0, \"split_self\": 21.0, \"splitperc_opp\": 30, \"splitperc_self\": 70, \"accept\": 1.0, \"accepted_amount\": 21.0, \"accepted_perc\": 70.0, \"proposed_perc\": 70.0, \"proposed_amount\": 21.0}, {\"ID\": 2, \"group\": \"group1\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 8, \"token_self\": 2, \"combined_earning\": 30, \"split_opp\": 21.0, \"split_self\": 9.0, \"splitperc_opp\": 70, \"splitperc_self\": 30, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 30.0, \"proposed_amount\": 9.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744034299.59538
    }
  ],
  "learnable_parameters": {
    "beta0": {
      "description": "Baseline bias parameter that offsets utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Sensitivity parameter to the discrepancy between the proposed share and fairness expectation",
      "range": {
        "min": -20,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Non-linear curvature parameter that modulates the transformation of the token ratio",
      "range": {
        "min": 0.5,
        "max": 2.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "shift_const": {
      "description": "Shifting constant that smooths and reparameterizes the token ratio transformation",
      "range": {
        "min": 0.1,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "fairness_ratio = (token_self + shift_const) / (token_self + token_opp + 2*shift_const)\nfairness_expectation = combined_earning * (fairness_ratio)^gamma\nU = beta0 + lambda_param * (split_self - fairness_expectation)\nP = 1/(1 + exp(-U))",
  "variable_descriptions": {
    "beta0": {
      "description": "Baseline bias parameter that offsets utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Sensitivity parameter to the discrepancy between the proposed share and fairness expectation",
      "range": {
        "min": -20,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Non-linear curvature parameter that modulates the transformation of the token ratio",
      "range": {
        "min": 0.5,
        "max": 2.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "shift_const": {
      "description": "Shifting constant that smooths and reparameterizes the token ratio transformation",
      "range": {
        "min": 0.1,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": {
        "type": "uniform",
        "parameters": {}
      },
      "learnable": true,
      "source": "learnable"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total combined money earned (each token is valued at \u00a33)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Proposed share for the participant (in \u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "accept": {
      "description": "Binary outcome variable indicating whether the participant accepted (1) or rejected (0) the proposal",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A decision utility model that computes utility as a baseline bias (beta0) plus sensitivity (lambda_param) to the deviation between the proposed share (split_self) and a fairness expectation. The fairness expectation is innovatively derived from a transformed token ratio\u2014normalized with a shifting constant (shift_const) and raised to a non-linear curvature (gamma)\u2014and scaled by the combined earning. The utility is then mapped to an acceptance probability using a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nfairness_ratio = (token_self + shift_const) / (token_self + token_opp + 2*shift_const)\nfairness_expectation = combined_earning * (fairness_ratio)^gamma\nU = beta0 + lambda_param * (split_self - fairness_expectation)\nP = 1/(1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"beta0\": {\n      \"description\": \"Baseline bias parameter that offsets utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Sensitivity parameter to the discrepancy between the proposed share and fairness expectation\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Non-linear curvature parameter that modulates the transformation of the token ratio\",\n      \"range\": {\n        \"min\": 0.5,\n        \"max\": 2.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"shift_const\": {\n      \"description\": \"Shifting constant that smooths and reparameterizes the token ratio transformation\",\n      \"range\": {\n        \"min\": 0.1,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": {\n        \"type\": \"uniform\",\n        \"parameters\": {}\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total combined money earned (each token is valued at \u00a33)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accept\": {\n      \"description\": \"Binary outcome variable indicating whether the participant accepted (1) or rejected (0) the proposal\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA decision utility model that computes utility as a baseline bias (beta0) plus sensitivity (lambda_param) to the deviation between the proposed share (split_self) and a fairness expectation. The fairness expectation is innovatively derived from a transformed token ratio\u2014normalized with a shifting constant (shift_const) and raised to a non-linear curvature (gamma)\u2014and scaled by the combined earning. The utility is then mapped to an acceptance probability using a logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: fairness_ratio = (token_self + shift_const) / (token_self + token_opp + 2*shift_const)\nfairness_expectation = combined_earning * (fairness_ratio)^gamma\nU = beta0 + lambda_param * (split_self - fairness_expectation)\nP = 1/(1 + exp(-U))\nSummary: A decision utility model that computes utility as a baseline bias (beta0) plus sensitivity (lambda_param) to the deviation between the proposed share (split_self) and a fairness expectation. The fairness expectation is innovatively derived from a transformed token ratio\u2014normalized with a shifting constant (shift_const) and raised to a non-linear curvature (gamma)\u2014and scaled by the combined earning. The utility is then mapped to an acceptance probability using a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta0=0.0, lambda_param=1.0, gamma=1.0, shift_const=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        fairness_ratio = (token_self + shift_const) / (token_self + token_opp + 2 * shift_const)\n        fairness_expectation = combined_earning * (fairness_ratio ** gamma)\n        U = beta0 + lambda_param * (split_self - fairness_expectation)\n        P = 1 / (1 + math.exp(-U))\n\n        model_predictions.append(P)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6031746031746031,
  "fitting_results": [
    {
      "beta0": -4.247080742331653,
      "lambda_param": 20.0,
      "gamma": 1.2201406648068958,
      "shift_const": 10.0,
      "success": true,
      "log_likelihood": -23.819993482635578,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 8.956862071629239,
      "lambda_param": 20.0,
      "gamma": 1.353930021197006,
      "shift_const": 4.375666936061263,
      "success": true,
      "log_likelihood": -20.803357400500484,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -6.203529984154381,
      "lambda_param": 20.0,
      "gamma": 1.8380542582282042,
      "shift_const": 0.14013267641203456,
      "success": true,
      "log_likelihood": -18.73420887823375,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": 13.124101228463537,
      "gamma": 1.7766211079586391,
      "shift_const": 10.0,
      "success": true,
      "log_likelihood": -21.43342086205215,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -1.854254657891203,
      "lambda_param": 20.0,
      "gamma": 1.6934980610681012,
      "shift_const": 0.24764696484137944,
      "success": true,
      "log_likelihood": -19.93773197556876,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 5.5568893307705185,
      "lambda_param": 20.0,
      "gamma": 1.689556362129382,
      "shift_const": 4.977390421758321,
      "success": true,
      "log_likelihood": -17.509475916428574,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 2.565059582719686,
      "lambda_param": -14.522180083468838,
      "gamma": 0.5,
      "shift_const": 5.504291039430576,
      "success": true,
      "log_likelihood": -11.277420745732746,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 7.427125188892205,
      "gamma": 1.4006590082726653,
      "shift_const": 3.6025127845890323,
      "success": true,
      "log_likelihood": -17.61352602031512,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 8.051605005197809,
      "lambda_param": -14.465576478314732,
      "gamma": 0.5,
      "shift_const": 7.315606041981742,
      "success": true,
      "log_likelihood": -11.277420745731655,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 9.670737249463086,
      "lambda_param": 20.0,
      "gamma": 1.2869429896314624,
      "shift_const": 0.6403776659883761,
      "success": true,
      "log_likelihood": -21.455723921664642,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -4.885205891664297,
      "lambda_param": 20.0,
      "gamma": 1.7605270617980122,
      "shift_const": 0.9811455370660607,
      "success": true,
      "log_likelihood": -18.942534315307928,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -7.500439564882221,
      "lambda_param": 18.539810291677103,
      "gamma": 1.1339979112466139,
      "shift_const": 3.204057361159343,
      "success": true,
      "log_likelihood": -24.193941719224142,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 0.95396200965458,
      "lambda_param": 20.0,
      "gamma": 1.556908799227927,
      "shift_const": 0.9117850423545437,
      "success": true,
      "log_likelihood": -19.689314546573577,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 7.379832447220689,
      "lambda_param": -19.107061832216473,
      "gamma": 0.7009741006325609,
      "shift_const": 7.920790801700197,
      "success": true,
      "log_likelihood": -11.27742074575392,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 0.321495800099108,
      "gamma": 2.0,
      "shift_const": 9.856874232127847,
      "success": true,
      "log_likelihood": -11.27782270471524,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 4.525063812601751,
      "lambda_param": -17.67548832457913,
      "gamma": 0.5,
      "shift_const": 5.234554873335958,
      "success": true,
      "log_likelihood": -11.277420745731652,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 5.826559782490506,
      "lambda_param": -17.745863872320086,
      "gamma": 0.5,
      "shift_const": 6.155329444818405,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 13.478568287019256,
      "gamma": 2.0,
      "shift_const": 3.7887346043178427,
      "success": true,
      "log_likelihood": -14.319997880917896,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 6.420943809888614,
      "gamma": 1.874160591030194,
      "shift_const": 0.41197338769440717,
      "success": true,
      "log_likelihood": -13.589863440946655,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -6.5701598561028804,
      "lambda_param": -10.955384967166799,
      "gamma": 0.5,
      "shift_const": 4.335815318346747,
      "success": true,
      "log_likelihood": -11.277426593035974,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 9.768155947660913,
      "gamma": 1.2986635591247613,
      "shift_const": 1.0846130588806127,
      "success": true,
      "log_likelihood": -18.938832822237192,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 7.533139187522151,
      "gamma": 2.0,
      "shift_const": 10.0,
      "success": true,
      "log_likelihood": -14.470612285220547,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": 13.229980436579151,
      "gamma": 1.9875297872038844,
      "shift_const": 10.0,
      "success": true,
      "log_likelihood": -22.136249010649454,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -7.53464130448655,
      "lambda_param": 20.0,
      "gamma": 1.7573395667465872,
      "shift_const": 0.5035398549246776,
      "success": true,
      "log_likelihood": -20.304072222890262,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 19.03976462954117,
      "gamma": 1.5598968045846793,
      "shift_const": 0.1,
      "success": true,
      "log_likelihood": -19.48899581896333,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -8.802552514229621,
      "lambda_param": 20.0,
      "gamma": 2.0,
      "shift_const": 2.0935529337772985,
      "success": true,
      "log_likelihood": -19.411087845509677,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 13.465559524365842,
      "gamma": 1.5201945582959953,
      "shift_const": 10.0,
      "success": true,
      "log_likelihood": -18.340082317524924,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 20.0,
      "gamma": 1.1315901518920959,
      "shift_const": 0.4621158806203334,
      "success": true,
      "log_likelihood": -21.581759416355393,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 20.0,
      "gamma": 2.0,
      "shift_const": 7.839587196425171,
      "success": true,
      "log_likelihood": -14.666953021330835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 7.1588672413756935,
      "gamma": 1.3630285209274269,
      "shift_const": 0.6473644262214108,
      "success": true,
      "log_likelihood": -17.524839621099495,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 0.31340477573345005,
      "gamma": 2.0,
      "shift_const": 9.042127629858783,
      "success": true,
      "log_likelihood": -11.277822891518202,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -2.008899886886737,
      "lambda_param": 20.0,
      "gamma": 1.180711889129621,
      "shift_const": 10.0,
      "success": true,
      "log_likelihood": -23.819617211316224,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 6.207760379516399,
      "lambda_param": 17.35347640944503,
      "gamma": 1.3756142750733145,
      "shift_const": 6.166172424522126,
      "success": true,
      "log_likelihood": -22.870241807304758,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 6.816809243152,
      "lambda_param": 20.0,
      "gamma": 1.3358820642881186,
      "shift_const": 10.0,
      "success": true,
      "log_likelihood": -22.63581992071797,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -5.786208519176563,
      "lambda_param": -15.202509543213823,
      "gamma": 0.5,
      "shift_const": 8.538100060045242,
      "success": true,
      "log_likelihood": -11.277420746291874,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -8.748015546875513,
      "lambda_param": 20.0,
      "gamma": 1.925520227245735,
      "shift_const": 6.105227166202191,
      "success": true,
      "log_likelihood": -18.14864342006556,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -2.828267156080452,
      "lambda_param": 20.0,
      "gamma": 2.0,
      "shift_const": 4.088441729360591,
      "success": true,
      "log_likelihood": -16.99923793622012,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 8.5554970552233,
      "lambda_param": 20.0,
      "gamma": 1.3605650262106344,
      "shift_const": 4.242675329869634,
      "success": true,
      "log_likelihood": -20.80128693315583,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 8.964001882339456,
      "gamma": 1.5963081293935708,
      "shift_const": 0.2563698835599302,
      "success": true,
      "log_likelihood": -19.365159257238417,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 0.7612626260885416,
      "lambda_param": -15.12365944803463,
      "gamma": 0.5,
      "shift_const": 9.688424323029485,
      "success": true,
      "log_likelihood": -14.277420745027268,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 6.629362846265488,
      "lambda_param": 20.0,
      "gamma": 1.5256445964805871,
      "shift_const": 1.3451304755923337,
      "success": true,
      "log_likelihood": -19.18322853420755,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -5.862309749610415,
      "lambda_param": 20.0,
      "gamma": 1.240178666569781,
      "shift_const": 1.350515685671848,
      "success": true,
      "log_likelihood": -23.435102671270045,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 1.1266590141420536,
      "lambda_param": -12.679554906574976,
      "gamma": 0.5,
      "shift_const": 7.374028756246568,
      "success": true,
      "log_likelihood": -12.277420745550945,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 16.595665242061603,
      "gamma": 1.5423060450271187,
      "shift_const": 10.0,
      "success": true,
      "log_likelihood": -18.904015005687135,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 7.572582326896642,
      "lambda_param": 20.0,
      "gamma": 1.6698193782914912,
      "shift_const": 5.992639775822194,
      "success": true,
      "log_likelihood": -18.45284484135302,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 13.388875834302077,
      "gamma": 2.0,
      "shift_const": 3.731745865508356,
      "success": true,
      "log_likelihood": -19.32238818665723,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 8.668371828533473,
      "lambda_param": 20.0,
      "gamma": 1.549765088299281,
      "shift_const": 10.0,
      "success": true,
      "log_likelihood": -19.142776367879073,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -6.552705528646651,
      "lambda_param": 16.933504231471023,
      "gamma": 1.4250130336814604,
      "shift_const": 2.0878543231975812,
      "success": true,
      "log_likelihood": -22.55593353471998,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -1.8254345213879288,
      "lambda_param": 20.0,
      "gamma": 1.6924096931729102,
      "shift_const": 0.24854167139013328,
      "success": true,
      "log_likelihood": -20.938108038654097,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -3.565167751887505,
      "lambda_param": 20.0,
      "gamma": 1.6459559179619148,
      "shift_const": 7.53095957141358,
      "success": true,
      "log_likelihood": -22.035946480408256,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 11.138939993390677,
      "gamma": 1.549841226796739,
      "shift_const": 10.0,
      "success": true,
      "log_likelihood": -18.50645407980169,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 12.176889881056038,
      "gamma": 0.9193067866929638,
      "shift_const": 10.0,
      "success": true,
      "log_likelihood": -23.627647029599284,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -2.721485570611487,
      "lambda_param": 20.0,
      "gamma": 1.7327807424569874,
      "shift_const": 6.571176507068503,
      "success": true,
      "log_likelihood": -19.600423892075664,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -4.525429565310995,
      "lambda_param": 20.0,
      "gamma": 1.66716429365412,
      "shift_const": 7.377229954602936,
      "success": true,
      "log_likelihood": -22.035202166815154,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -1.9041915941278782,
      "lambda_param": 20.0,
      "gamma": 1.3101992264147582,
      "shift_const": 0.1,
      "success": true,
      "log_likelihood": -22.894623442370793,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": 6.793679760005373,
      "gamma": 1.9999953299938231,
      "shift_const": 9.999999839917194,
      "success": true,
      "log_likelihood": -22.923224451831622,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 20.0,
      "gamma": 1.123205770188665,
      "shift_const": 2.793797650375696,
      "success": true,
      "log_likelihood": -22.696489887991838,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -4.739901757989704,
      "lambda_param": -18.496333756050156,
      "gamma": 0.5,
      "shift_const": 0.5135482988514583,
      "success": true,
      "log_likelihood": -15.277420951094905,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -2.286633769969871,
      "lambda_param": 9.856741251787406,
      "gamma": 0.5,
      "shift_const": 2.8530417099459036,
      "success": true,
      "log_likelihood": -24.953298471774453,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 3.898717714524755,
      "lambda_param": 20.0,
      "gamma": 2.0,
      "shift_const": 10.0,
      "success": true,
      "log_likelihood": -16.38366510308685,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -4.472434197903028,
      "lambda_param": 20.0,
      "gamma": 1.6660918782502903,
      "shift_const": 7.395870021066593,
      "success": true,
      "log_likelihood": -20.03523605181233,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 12.474595117734534,
      "gamma": 1.329048305551858,
      "shift_const": 1.7084243188712462,
      "success": true,
      "log_likelihood": -19.15639018682042,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -2.510985566939006,
      "lambda_param": 20.0,
      "gamma": 1.1901106013368739,
      "shift_const": 10.0,
      "success": true,
      "log_likelihood": -23.819636144397663,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": 13.217505705281082,
      "gamma": 1.9879341118088998,
      "shift_const": 10.0,
      "success": true,
      "log_likelihood": -21.13580553743484,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 20.0,
      "gamma": 1.127284516932273,
      "shift_const": 3.0570053096447154,
      "success": true,
      "log_likelihood": -22.697373413619232,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -2.6909784224851188,
      "lambda_param": 20.0,
      "gamma": 1.732643372994228,
      "shift_const": 6.531390924492253,
      "success": true,
      "log_likelihood": -18.598193284240953,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 4.143785323156518,
      "lambda_param": -11.220922657601497,
      "gamma": 0.5,
      "shift_const": 2.0452700846318494,
      "success": true,
      "log_likelihood": -14.277420745686591,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 13.409663599949,
      "gamma": 2.0,
      "shift_const": 3.746607138260559,
      "success": true,
      "log_likelihood": -15.322509049927163,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": 14.807180655472207,
      "gamma": 1.9895349815573151,
      "shift_const": 10.0,
      "success": true,
      "log_likelihood": -19.9302603006684,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 3.2156673001197413,
      "lambda_param": -7.599686983278907,
      "gamma": 0.6565224400109012,
      "shift_const": 4.997297518462284,
      "success": true,
      "log_likelihood": -14.277431264711447,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 1.3999687205467948,
      "lambda_param": 15.552229337992955,
      "gamma": 0.5,
      "shift_const": 6.420365598273585,
      "success": true,
      "log_likelihood": -24.953298492946285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -1.484259066311972,
      "lambda_param": 20.0,
      "gamma": 1.1710116503234669,
      "shift_const": 10.0,
      "success": true,
      "log_likelihood": -23.819624257238544,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -8.051722171215209,
      "lambda_param": 20.0,
      "gamma": 1.7897701833464694,
      "shift_const": 10.0,
      "success": true,
      "log_likelihood": -19.279428266626446,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 1.9676608687485688,
      "lambda_param": 9.443847754987196,
      "gamma": 1.965492661699062,
      "shift_const": 6.933146506821312,
      "success": true,
      "log_likelihood": -17.67164462272575,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": 14.711571150510359,
      "gamma": 1.9915368135289475,
      "shift_const": 10.0,
      "success": true,
      "log_likelihood": -22.927296845076352,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 10.186994110090344,
      "gamma": 1.6601537785435452,
      "shift_const": 7.785571279881794,
      "success": true,
      "log_likelihood": -16.950585709280972,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 7.2596839250955,
      "lambda_param": -5.149337104772436,
      "gamma": 0.5,
      "shift_const": 9.50923465265411,
      "success": true,
      "log_likelihood": -13.277420793996598,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 3.7628630383899115,
      "lambda_param": 15.243442171235067,
      "gamma": 0.5,
      "shift_const": 5.384694128981621,
      "success": true,
      "log_likelihood": -24.953298493328543,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": 17.526745660407446,
      "gamma": 1.6614550943686215,
      "shift_const": 1.0861784059672406,
      "success": true,
      "log_likelihood": -21.360622519101376,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": -0.4968486645355855,
      "gamma": 2.0,
      "shift_const": 9.731963135509401,
      "success": true,
      "log_likelihood": -24.95403387109583,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 20.0,
      "gamma": 1.123941845782993,
      "shift_const": 2.8151921802437685,
      "success": true,
      "log_likelihood": -22.696494155603975,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -3.138383621507728,
      "lambda_param": -18.8530195478769,
      "gamma": 0.5,
      "shift_const": 4.265549031613511,
      "success": true,
      "log_likelihood": -14.277420745027223,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 4.527822338721411,
      "lambda_param": 19.220708865068758,
      "gamma": 0.5,
      "shift_const": 4.573107040701028,
      "success": true,
      "log_likelihood": -24.95329849296018,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": 20.0,
      "gamma": 2.0,
      "shift_const": 3.8211154419417936,
      "success": true,
      "log_likelihood": -18.866871301417834,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 5.433393459370568,
      "lambda_param": 15.035439965633804,
      "gamma": 1.2774918277256426,
      "shift_const": 0.2315622229672665,
      "success": true,
      "log_likelihood": -21.820234731857745,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 1.2020450283489068,
      "lambda_param": 13.129861268817839,
      "gamma": 1.1718615030900004,
      "shift_const": 7.704422752785267,
      "success": true,
      "log_likelihood": -23.752179762025243,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 10.549870367315677,
      "gamma": 2.0,
      "shift_const": 0.1,
      "success": true,
      "log_likelihood": -19.567808206157437,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": 4.466441446465162,
      "gamma": 1.5390688838008904,
      "shift_const": 10.0,
      "success": true,
      "log_likelihood": -24.630944722678215,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 6.591269064747638,
      "lambda_param": -18.42337558603626,
      "gamma": 0.5,
      "shift_const": 1.2745499245200618,
      "success": true,
      "log_likelihood": -13.277420745261596,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": -10.0,
      "lambda_param": 13.224199406936703,
      "gamma": 1.9877281418539652,
      "shift_const": 10.0,
      "success": true,
      "log_likelihood": -19.136225564040938,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "beta0": 10.0,
      "lambda_param": 16.40282614965332,
      "gamma": 1.5394746783986333,
      "shift_const": 10.0,
      "success": true,
      "log_likelihood": -18.90202104388076,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta0": {
        "r": 0.1523724554104332,
        "p": 0.13017312781432205
      },
      "lambda_param": {
        "r": 0.33477188111128153,
        "p": 0.0006630510343403274
      },
      "gamma": {
        "r": 0.011482613710487925,
        "p": 0.9097243705085296
      },
      "shift_const": {
        "r": 0.08333346258312035,
        "p": 0.4097733085151971
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 52.2625645855149,
  "bic_results": {
    "average_bic": 52.2625645855149,
    "individual_bics": [
      61.9740627190956,
      55.94079055482541,
      51.80249351029194,
      57.20091747792874,
      54.209539704961955,
      49.35302758668159,
      36.88891724528993,
      49.56112779445468,
      36.88891724528775,
      57.24552359715372,
      52.2191443844403,
      62.72195919227272,
      53.71270484697159,
      36.88891724533228,
      36.88972116325492,
      36.88891724528774,
      36.88891724528774,
      42.97407151566023,
      41.51380263571775,
      36.88892893989639,
      52.21174139829883,
      43.27530032426553,
      58.60657377512335,
      54.94222019960496,
      53.3120673917511,
      53.15625144484379,
      51.014240388874285,
      57.49759458653523,
      43.66798179648611,
      49.38375499602343,
      36.88972153686085,
      61.97331017645689,
      60.07455936843395,
      59.60571559526038,
      36.888917246408184,
      50.63136259395556,
      48.332551626264674,
      55.936649620136095,
      53.06439426830127,
      42.88891724387898,
      52.70053282223954,
      61.204281096364525,
      38.88891724492633,
      52.14210576519871,
      51.239765436530476,
      52.97885212713889,
      52.61962848958258,
      59.4459428232644,
      56.210291831132636,
      58.40596871464095,
      51.34698391342782,
      61.58936981302301,
      53.53492353797577,
      58.40448008745474,
      60.12332263856602,
      60.18052465748768,
      59.72705552980811,
      44.88891765601425,
      64.24067269737334,
      47.10140595999815,
      54.4045478574491,
      52.646856127465284,
      61.97334804261976,
      56.60568682869412,
      59.7288225810629,
      51.53046232230635,
      42.88891724519762,
      44.97909385367876,
      54.19459635516124,
      42.888938283247334,
      64.24067273971701,
      61.973324268301525,
      52.89293228707733,
      49.67736499927594,
      60.18866944397715,
      48.23524717238638,
      40.88891734181763,
      64.24067274048153,
      57.05532079202719,
      64.2421434960161,
      59.727064065032394,
      42.888917243878886,
      64.2406727397448,
      52.06781835666011,
      57.97454521753993,
      61.83843527787492,
      53.46969216613931,
      63.59596519918087,
      40.88891724434763,
      52.60652688190632,
      52.13811784158597
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 4,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta0: r = 0.152\n- lambda_param: r = 0.335\n- gamma: r = 0.011\n- shift_const: r = 0.083",
  "previous_models": [
    "Specification: fairness_ratio = (token_self + shift_const) / (token_self + token_opp + 2*shift_const)\nfairness_expectation = combined_earning * (fairness_ratio)^gamma\nU = beta0 + lambda_param * (split_self - fairness_expectation)\nP = 1/(1 + exp(-U))\nSummary: A decision utility model that computes utility as a baseline bias (beta0) plus sensitivity (lambda_param) to the deviation between the proposed share (split_self) and a fairness expectation. The fairness expectation is innovatively derived from a transformed token ratio\u2014normalized with a shifting constant (shift_const) and raised to a non-linear curvature (gamma)\u2014and scaled by the combined earning. The utility is then mapped to an acceptance probability using a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 52.2625645855149\nOverall Accuracy: 0.6032\n\nParameter Recovery:\n- beta0: r = 0.152\n- lambda_param: r = 0.335\n- gamma: r = 0.011\n- shift_const: r = 0.083"
  ]
}