{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nOkay, let's look at the previous model's results. The BIC was 31.89, accuracy was around 81.5%, and parameter recovery varied. Gamma had a lower recovery (r=0.555), while alpha and beta were better. The model used gamma, alpha, and beta as parameters. The formula was U = gamma + alpha*(split_self - 3*token_self) + beta*split_self.\n\nHmm, gamma's low recovery suggests it might be collinear with other terms or not well-identified. Maybe the baseline term isn't necessary, or perhaps it's being overshadowed by the other parameters. The model has three parameters, which might be causing some covariance issues. The instructions previously emphasized reducing parameters, but maybe there's a way to simplify further.\n\nThe accuracy is already decent, but improving BIC would require a model with better fit without overcomplicating. Since BIC penalizes complexity, maybe reducing the number of parameters could help. Alternatively, reparameterizing to avoid covariance.\n\nLooking at the parameter recovery: alpha is good, beta is okay, gamma is poor. Maybe gamma isn't capturing a meaningful psychological construct here. Perhaps the baseline bias isn't necessary if the other terms account for the utility sufficiently. Removing gamma could reduce parameters and improve recovery.\n\nAlternatively, maybe the model can combine alpha and beta into a single parameter. For example, instead of having separate terms for (split_self - 3*token_self) and split_self, maybe express it as a weighted combination. Wait, the current model's utility can be rewritten as gamma + (alpha + beta)*split_self - 3*alpha*token_self. This shows that split_self's coefficient is (alpha + beta), and token_self's is -3*alpha. If we let theta = alpha + beta and phi = alpha, then the model becomes gamma + theta*split_self - 3*phi*token_self. But this still has three parameters. Maybe not helpful.\n\nAlternatively, if we set gamma to zero, the model would have two parameters. But would that hurt accuracy? The previous model's gamma might not be contributing much if its recovery is low. Testing a model without gamma could be a direction.\n\nAnother angle: the term (split_self - 3*token_self) might not be the best way to represent fairness. Maybe participants compare their split to the opponent's split. For example, split_self vs split_opp. Or the ratio of splits. But split_opp is part of the data. Alternatively, using the difference between split_self and split_opp. But in the responder role, the opponent's split is split_opp, which is the amount the opponent takes. So maybe the participant cares about how much the opponent is getting compared to themselves. That could be another term, like split_self - split_opp, but that's similar to split_self + split_opp = combined_earning, so it's related.\n\nAlternatively, using the percentage split (splitperc_self) compared to a fair percentage. For example, if the fair percentage is (token_self / (token_self + token_opp)) * 100, then the difference between splitperc_self and that fair percentage could be a term. This might better capture proportional fairness.\n\nAnother thought: the model could include an interaction term between split_self and token_self. For example, split_self * token_self. But that might complicate things.\n\nWait, the previous model's alpha term is (split_self - 3*token_self). Since 3*token_self is the fair share based on contribution, maybe participants have different fairness references. For example, some might use equal split (combined_earning/2) instead. Including both terms with a parameter to weight them could help, but that adds another parameter. However, given the previous model's BIC, maybe a more complex model isn't warranted. But if it improves fit and recovery, it could be worth testing.\n\nAlternatively, the model could use a nonlinear function, like a sigmoid around the fairness term, to capture threshold effects. But that complicates the model and might not be necessary.\n\nThe instructions need to guide the model towards better performance. Since gamma had poor recovery, suggesting to remove it or find a way to make it more identifiable. Also, considering alternative fairness calculations. Encouraging the model to explore different fairness norms (contribution-based vs equal split) and possibly combining them with a single parameter. Or using a ratio instead of a difference.\n\nAnother idea: instead of linear terms, use a piecewise function where the utility changes differently when the offer is above or below the fair share. For example, a term that's only active when split_self < fair_share, indicating aversion to unfairness. But this adds complexity.\n\nThe key is to balance model simplicity with psychological plausibility. The previous model did well but has room for improvement. The new instructions should encourage exploring different fairness mechanisms, possibly reducing parameters, and improving identifiability.\n\nSo, the new instructions might suggest:\n\n- Consider alternative fairness computations (e.g., proportional to contribution, equal split, or hybrid).\n- Explore models with fewer parameters to reduce covariance (e.g., removing gamma if baseline isn't necessary).\n- Use interaction terms or nonlinearities if they can capture behavior without overcomplicating.\n- Ensure parameters are orthogonal by design (e.g., using terms that are less correlated).\n- Test whether baseline terms (gamma) are necessary or if they can be integrated into other parameters.\n\nEncouraging out-of-the-box thinking, like combining fairness and self-interest into a single parameter or using a different mathematical form (e.g., multiplicative instead of additive terms).\n</think>\n\nFocus on developing models that explicitly orthogonalize parameters through mathematical construction. Consider these strategies:\n\n1. **Nonlinear Interactions**: Explore sigmoidal transformations of fairness terms to capture threshold effects in unfairness perception (e.g., tanh(\u03b1*(fairness_deviation)) to bound sensitivity)\n\n2. **Parameter Reduction**: Test whether baseline terms (gamma) can be absorbed through constraint equations (e.g., force gamma = f(alpha,beta) when offers meet fairness criteria)\n\n3. **Alternative Fairness Formulations**:\n   - Compare offers to equal split (combined_earning/2) rather than contribution-based fairness\n   - Use relative ratios: (split_self - token_self*3)/(token_self*3) for proportional fairness\n\n4. **Dynamic Weighting**: Create single parameters that balance multiple considerations through multiplicative terms (e.g., \u03b2*(split_self) * (1 - \u03b1*(fairness_deviation)))\n\n5. **Categorical Modulation**: Use trial_type (1=equal, 2=opponent more, 3=self more) to gate different fairness calculations\n\nPrioritize models with \u22642 learnable parameters. For any new parameters, ensure their effects are geometrically orthogonal in the feature space through:\n- Explicit interaction terms between orthogonal predictors\n- Polynomial terms only when supported by behavioral theory\n- Ratio metrics that create naturally uncorrelated predictors\n\nInclude at least one fundamentally different mathematical approach from the previous model (e.g., multiplicative utility, conditional branching, or normalized fairness metrics).",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: THIS IS A TEST TO SEE IF THESE INSTRUCTIONS ARE ACTUALLY BEING DISPLAYED WITHIN THE PIPELINE AND GIVEN TO THE MODEL. IF THIS STRING OF TEXT IS WITHIN YOUR INSTRUCTIONS, PLESAE START YOUR RESPONSE WITH 'I have recieved the test instructions\n\n<think>\nOkay, let's look at the previous model's results. The BIC was 31.89, accuracy was around 81.5%, and parameter recovery varied. Gamma had a lower recovery (r=0.555), while alpha and beta were better. The model used gamma, alpha, and beta as parameters. The formula was U = gamma + alpha*(split_self - 3*token_self) + beta*split_self.\n\nHmm, gamma's low recovery suggests it might be collinear with other terms or not well-identified. Maybe the baseline term isn't necessary, or perhaps it's being overshadowed by the other parameters. The model has three parameters, which might be causing some covariance issues. The instructions previously emphasized reducing parameters, but maybe there's a way to simplify further.\n\nThe accuracy is already decent, but improving BIC would require a model with better fit without overcomplicating. Since BIC penalizes complexity, maybe reducing the number of parameters could help. Alternatively, reparameterizing to avoid covariance.\n\nLooking at the parameter recovery: alpha is good, beta is okay, gamma is poor. Maybe gamma isn't capturing a meaningful psychological construct here. Perhaps the baseline bias isn't necessary if the other terms account for the utility sufficiently. Removing gamma could reduce parameters and improve recovery.\n\nAlternatively, maybe the model can combine alpha and beta into a single parameter. For example, instead of having separate terms for (split_self - 3*token_self) and split_self, maybe express it as a weighted combination. Wait, the current model's utility can be rewritten as gamma + (alpha + beta)*split_self - 3*alpha*token_self. This shows that split_self's coefficient is (alpha + beta), and token_self's is -3*alpha. If we let theta = alpha + beta and phi = alpha, then the model becomes gamma + theta*split_self - 3*phi*token_self. But this still has three parameters. Maybe not helpful.\n\nAlternatively, if we set gamma to zero, the model would have two parameters. But would that hurt accuracy? The previous model's gamma might not be contributing much if its recovery is low. Testing a model without gamma could be a direction.\n\nAnother angle: the term (split_self - 3*token_self) might not be the best way to represent fairness. Maybe participants compare their split to the opponent's split. For example, split_self vs split_opp. Or the ratio of splits. But split_opp is part of the data. Alternatively, using the difference between split_self and split_opp. But in the responder role, the opponent's split is split_opp, which is the amount the opponent takes. So maybe the participant cares about how much the opponent is getting compared to themselves. That could be another term, like split_self - split_opp, but that's similar to split_self + split_opp = combined_earning, so it's related.\n\nAlternatively, using the percentage split (splitperc_self) compared to a fair percentage. For example, if the fair percentage is (token_self / (token_self + token_opp)) * 100, then the difference between splitperc_self and that fair percentage could be a term. This might better capture proportional fairness.\n\nAnother thought: the model could include an interaction term between split_self and token_self. For example, split_self * token_self. But that might complicate things.\n\nWait, the previous model's alpha term is (split_self - 3*token_self). Since 3*token_self is the fair share based on contribution, maybe participants have different fairness references. For example, some might use equal split (combined_earning/2) instead. Including both terms with a parameter to weight them could help, but that adds another parameter. However, given the previous model's BIC, maybe a more complex model isn't warranted. But if it improves fit and recovery, it could be worth testing.\n\nAlternatively, the model could use a nonlinear function, like a sigmoid around the fairness term, to capture threshold effects. But that complicates the model and might not be necessary.\n\nThe instructions need to guide the model towards better performance. Since gamma had poor recovery, suggesting to remove it or find a way to make it more identifiable. Also, considering alternative fairness calculations. Encouraging the model to explore different fairness norms (contribution-based vs equal split) and possibly combining them with a single parameter. Or using a ratio instead of a difference.\n\nAnother idea: instead of linear terms, use a piecewise function where the utility changes differently when the offer is above or below the fair share. For example, a term that's only active when split_self < fair_share, indicating aversion to unfairness. But this adds complexity.\n\nThe key is to balance model simplicity with psychological plausibility. The previous model did well but has room for improvement. The new instructions should encourage exploring different fairness mechanisms, possibly reducing parameters, and improving identifiability.\n\nSo, the new instructions might suggest:\n\n- Consider alternative fairness computations (e.g., proportional to contribution, equal split, or hybrid).\n- Explore models with fewer parameters to reduce covariance (e.g., removing gamma if baseline isn't necessary).\n- Use interaction terms or nonlinearities if they can capture behavior without overcomplicating.\n- Ensure parameters are orthogonal by design (e.g., using terms that are less correlated).\n- Test whether baseline terms (gamma) are necessary or if they can be integrated into other parameters.\n\nEncouraging out-of-the-box thinking, like combining fairness and self-interest into a single parameter or using a different mathematical form (e.g., multiplicative instead of additive terms).\n</think>\n\nFocus on developing models that explicitly orthogonalize parameters through mathematical construction. Consider these strategies:\n\n1. **Nonlinear Interactions**: Explore sigmoidal transformations of fairness terms to capture threshold effects in unfairness perception (e.g., tanh(\u03b1*(fairness_deviation)) to bound sensitivity)\n\n2. **Parameter Reduction**: Test whether baseline terms (gamma) can be absorbed through constraint equations (e.g., force gamma = f(alpha,beta) when offers meet fairness criteria)\n\n3. **Alternative Fairness Formulations**:\n   - Compare offers to equal split (combined_earning/2) rather than contribution-based fairness\n   - Use relative ratios: (split_self - token_self*3)/(token_self*3) for proportional fairness\n\n4. **Dynamic Weighting**: Create single parameters that balance multiple considerations through multiplicative terms (e.g., \u03b2*(split_self) * (1 - \u03b1*(fairness_deviation)))\n\n5. **Categorical Modulation**: Use trial_type (1=equal, 2=opponent more, 3=self more) to gate different fairness calculations\n\nPrioritize models with \u22642 learnable parameters. For any new parameters, ensure their effects are geometrically orthogonal in the feature space through:\n- Explicit interaction terms between orthogonal predictors\n- Polynomial terms only when supported by behavioral theory\n- Ratio metrics that create naturally uncorrelated predictors\n\nInclude at least one fundamentally different mathematical approach from the previous model (e.g., multiplicative utility, conditional branching, or normalized fairness metrics).\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<think>\nAlright, let's tackle this step by step. The goal is to design a computational model that predicts whether a participant accepts or rejects a proposal, focusing on responder behavior. The model needs to be suitable for parameter recovery and use the given dataset variables appropriately.\n\nFirst, I need to identify the key variables that influence the responder's decision. The target variable is 'accept', which is binary. The main factors likely involve fairness considerations based on the contributions (tokens) and the proposed splits.\n\nThe previous model used parameters gamma, alpha, and beta, but gamma had poor recovery. To improve this, I should consider reducing parameters. Let's aim for two parameters instead of three.\n\nFairness can be calculated in different ways. The dataset includes 'token_self' and 'token_opp', which determine each party's contribution. A fair split might be proportional to their contributions. For example, the fair share for the participant would be (token_self / (token_self + token_opp)) * combined_earning. The proposed split (split_self) can be compared to this fair share.\n\nAnother approach is to consider the deviation from the equal split (combined_earning/2). Participants might have different sensitivities to offers below or above these fairness benchmarks.\n\nLet's model the utility as a function of both proportional fairness and equal split fairness, weighted by parameters. This way, we can capture individual differences in fairness norms.\n\nUsing a sigmoid function (logistic) can convert the utility into a probability of acceptance. The utility function could be:\n\nU = \u03b1*(split_self - fair_prop) + \u03b2*(split_self - fair_equal)\n\nWhere:\n- fair_prop = (token_self / (token_self + token_opp)) * combined_earning\n- fair_equal = combined_earning / 2\n\nThis combines two fairness considerations into the utility. Parameters \u03b1 and \u03b2 represent the sensitivity to proportional and equal fairness, respectively.\n\nTo ensure parameters are orthogonal, we can standardize the fairness deviations. However, since the model should work with raw data, we'll keep them as is but note that the parameters' scales will adjust during fitting.\n\nThe probability of accepting is then logistic(U). The model has two parameters, \u03b1 and \u03b2, which should have finite bounds. Let's set them between -10 and 10 to allow sufficient flexibility without being too restrictive.\n\nThis approach reduces parameters from three to two, addresses different fairness norms, and should improve parameter recovery by separating the fairness components.\n</think>\n\nI have recieved the test instructions\n\n<MODEL>\nU = alpha * (split_self - (token_self * 3)) + beta * (split_self - (combined_earning / 2))\nP(accept) = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity to contribution-based fairness (difference from token-proportional share)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to equal split fairness (difference from 50% allocation)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token contribution\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money in shared pot\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nDual-fairness utility model combining contribution-based and equal-split fairness norms. Computes utility as weighted sum of deviations from: 1) contribution-proportional fairness (3\u00d7token_self) and 2) equal split (combined_earning/2). Two orthogonal parameters (\u03b1,\u03b2) capture individual sensitivity to each fairness type, enabling clear parameter recovery. Logistic function converts utility to acceptance probability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = alpha * (split_self - (token_self * 3)) + beta * (split_self - (combined_earning / 2))\nP(accept) = 1 / (1 + exp(-U))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity to contribution-based fairness (difference from token-proportional share)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to equal split fairness (difference from 50% allocation)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \\u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token contribution\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money in shared pot\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=0.0, beta=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0.0)\n        token_self = trial.get(\"token_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        # Calculate Utility\n        U = alpha * (split_self - (token_self * 3)) + beta * (split_self - (combined_earning / 2))\n\n        # Calculate Probability of Accepting\n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            p_accept = 0.0 if U < 0 else 1.0  # Handle potential overflow\n\n        model_predictions.append(p_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 6, \"token_self\": 4, \"combined_earning\": 20, \"split_opp\": 9.0, \"split_self\": 11.0, \"splitperc_opp\": 45, \"splitperc_self\": 55, \"accept\": 1.0, \"accepted_amount\": 11.0, \"accepted_perc\": 55.0, \"proposed_perc\": 55.0, \"proposed_amount\": 11.0}, {\"ID\": 1, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 6, \"token_self\": 4, \"combined_earning\": 20, \"split_opp\": 13.0, \"split_self\": 7.0, \"splitperc_opp\": 65, \"splitperc_self\": 35, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 35.0, \"proposed_amount\": 7.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744026655.0065448
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Sensitivity to contribution-based fairness (difference from token-proportional share)",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Sensitivity to equal split fairness (difference from 50% allocation)",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = alpha * (split_self - (token_self * 3)) + beta * (split_self - (combined_earning / 2))\nP(accept) = 1 / (1 + exp(-U))",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Sensitivity to contribution-based fairness (difference from token-proportional share)",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Sensitivity to equal split fairness (difference from 50% allocation)",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share for participant in \u00a3",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Participant's token contribution",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Total money in shared pot",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "Dual-fairness utility model combining contribution-based and equal-split fairness norms. Computes utility as weighted sum of deviations from: 1) contribution-proportional fairness (3\u00d7token_self) and 2) equal split (combined_earning/2). Two orthogonal parameters (\u03b1,\u03b2) capture individual sensitivity to each fairness type, enabling clear parameter recovery. Logistic function converts utility to acceptance probability.",
  "target_variable": "accept",
  "full_reasoning": "<think>\nAlright, let's tackle this step by step. The goal is to design a computational model that predicts whether a participant accepts or rejects a proposal, focusing on responder behavior. The model needs to be suitable for parameter recovery and use the given dataset variables appropriately.\n\nFirst, I need to identify the key variables that influence the responder's decision. The target variable is 'accept', which is binary. The main factors likely involve fairness considerations based on the contributions (tokens) and the proposed splits.\n\nThe previous model used parameters gamma, alpha, and beta, but gamma had poor recovery. To improve this, I should consider reducing parameters. Let's aim for two parameters instead of three.\n\nFairness can be calculated in different ways. The dataset includes 'token_self' and 'token_opp', which determine each party's contribution. A fair split might be proportional to their contributions. For example, the fair share for the participant would be (token_self / (token_self + token_opp)) * combined_earning. The proposed split (split_self) can be compared to this fair share.\n\nAnother approach is to consider the deviation from the equal split (combined_earning/2). Participants might have different sensitivities to offers below or above these fairness benchmarks.\n\nLet's model the utility as a function of both proportional fairness and equal split fairness, weighted by parameters. This way, we can capture individual differences in fairness norms.\n\nUsing a sigmoid function (logistic) can convert the utility into a probability of acceptance. The utility function could be:\n\nU = \u03b1*(split_self - fair_prop) + \u03b2*(split_self - fair_equal)\n\nWhere:\n- fair_prop = (token_self / (token_self + token_opp)) * combined_earning\n- fair_equal = combined_earning / 2\n\nThis combines two fairness considerations into the utility. Parameters \u03b1 and \u03b2 represent the sensitivity to proportional and equal fairness, respectively.\n\nTo ensure parameters are orthogonal, we can standardize the fairness deviations. However, since the model should work with raw data, we'll keep them as is but note that the parameters' scales will adjust during fitting.\n\nThe probability of accepting is then logistic(U). The model has two parameters, \u03b1 and \u03b2, which should have finite bounds. Let's set them between -10 and 10 to allow sufficient flexibility without being too restrictive.\n\nThis approach reduces parameters from three to two, addresses different fairness norms, and should improve parameter recovery by separating the fairness components.\n</think>\n\nI have recieved the test instructions\n\n<MODEL>\nU = alpha * (split_self - (token_self * 3)) + beta * (split_self - (combined_earning / 2))\nP(accept) = 1 / (1 + exp(-U))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity to contribution-based fairness (difference from token-proportional share)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to equal split fairness (difference from 50% allocation)\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token contribution\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Total money in shared pot\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nDual-fairness utility model combining contribution-based and equal-split fairness norms. Computes utility as weighted sum of deviations from: 1) contribution-proportional fairness (3\u00d7token_self) and 2) equal split (combined_earning/2). Two orthogonal parameters (\u03b1,\u03b2) capture individual sensitivity to each fairness type, enabling clear parameter recovery. Logistic function converts utility to acceptance probability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = alpha * (split_self - (token_self * 3)) + beta * (split_self - (combined_earning / 2))\nP(accept) = 1 / (1 + exp(-U))\nSummary: Dual-fairness utility model combining contribution-based and equal-split fairness norms. Computes utility as weighted sum of deviations from: 1) contribution-proportional fairness (3\u00d7token_self) and 2) equal split (combined_earning/2). Two orthogonal parameters (\u03b1,\u03b2) capture individual sensitivity to each fairness type, enabling clear parameter recovery. Logistic function converts utility to acceptance probability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=0.0, beta=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0.0)\n        token_self = trial.get(\"token_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        # Calculate Utility\n        U = alpha * (split_self - (token_self * 3)) + beta * (split_self - (combined_earning / 2))\n\n        # Calculate Probability of Accepting\n        try:\n            p_accept = 1 / (1 + math.exp(-U))\n        except OverflowError:\n            p_accept = 0.0 if U < 0 else 1.0  # Handle potential overflow\n\n        model_predictions.append(p_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5918803418803419,
  "fitting_results": [
    {
      "alpha": 0.012847540969478719,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -24.297449357753734,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -5.258453080101327,
      "success": true,
      "log_likelihood": -21.358297172787914,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -6.252732542987734,
      "success": true,
      "log_likelihood": -21.044375579964413,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -4.021905766782062,
      "success": true,
      "log_likelihood": -22.98217893097423,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -7.073534682837927,
      "success": true,
      "log_likelihood": -20.568248628149426,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.0317760241923506,
      "beta": -1.2592166740754926,
      "success": true,
      "log_likelihood": -22.001148019658494,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.006938591482480401,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -11.760600491924007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.006731107147570797,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -23.76059439584005,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.006951957805124305,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -11.760600491915932,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -5.251525464505196,
      "success": true,
      "log_likelihood": -21.361651639985983,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -4.067259373594475,
      "success": true,
      "log_likelihood": -21.9678611042281,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.012848996952705971,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -24.29744935758594,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -4.06444857535813,
      "success": true,
      "log_likelihood": -21.96856860614287,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.006902750934218407,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -11.760600492004334,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.006934514072691327,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -11.760600491928837,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.0069518873540075155,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -11.760600491915943,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.007114339252438742,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -11.760600492767132,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.0069540148448753005,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -16.76060047569818,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.006541269801879664,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -15.76060049665021,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.006972092799347408,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -11.760600491926201,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -5.266368583140388,
      "success": true,
      "log_likelihood": -21.35451648268453,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.0069601201154512685,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -16.76060047585748,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -0.25629058388099807,
      "success": true,
      "log_likelihood": -23.795693112833508,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.6641375537078344,
      "beta": -1.9786940321403894,
      "success": true,
      "log_likelihood": -23.015453056501087,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.93953849957387,
      "beta": -6.337747675258713,
      "success": true,
      "log_likelihood": -20.538440599497637,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -6.252740541432117,
      "success": true,
      "log_likelihood": -21.044390020883956,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -4.064456898185971,
      "success": true,
      "log_likelihood": -21.96856860465431,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -3.4686600733072948,
      "success": true,
      "log_likelihood": -22.716339392867123,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.006962309934774112,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -15.760600476093629,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.006947827303133726,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -19.760600460265394,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.006955087713254329,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -11.760600491915758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.012892479198844453,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -24.29744935781171,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 2.977354328441058,
      "success": true,
      "log_likelihood": -23.989447820996283,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -3.468660253318798,
      "success": true,
      "log_likelihood": -22.71633939199435,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.006948593069899987,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -11.760600491916843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -3.4696925442229443,
      "success": true,
      "log_likelihood": -22.715928445611322,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -9.86998891852155,
      "success": true,
      "log_likelihood": -21.251029219483474,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -7.068301101739113,
      "success": true,
      "log_likelihood": -20.57335393409219,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -5.274416660299409,
      "success": true,
      "log_likelihood": -21.35586933973213,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.006823056736714579,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -14.76060049178228,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -4.065512023005889,
      "success": true,
      "log_likelihood": -21.96773919420795,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -2.2117708957246376,
      "success": true,
      "log_likelihood": -23.12562118236179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.0069331458132322965,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -12.760600491695667,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -3.4698315911169852,
      "success": true,
      "log_likelihood": -22.715929017861185,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.39749415534936,
      "beta": -6.543663909326288,
      "success": true,
      "log_likelihood": -22.517382661659624,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0778407125139743,
      "beta": -2.6067001213869143,
      "success": true,
      "log_likelihood": -21.687327426225817,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -3.4706238409865855,
      "success": true,
      "log_likelihood": -22.715533855558714,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.175468853475131,
      "beta": -1.2296166365760894,
      "success": true,
      "log_likelihood": -23.637479822842714,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -6.24433066537118,
      "success": true,
      "log_likelihood": -21.055357202584343,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.136896698324154,
      "beta": -0.3682659735443928,
      "success": true,
      "log_likelihood": -24.704852295934963,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -6.35637492456791,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -22.189726348224266,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -9.86294737350545e-05,
      "beta": 5.176610150592935,
      "success": true,
      "log_likelihood": -24.287055402627516,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -3.452694459340678,
      "success": true,
      "log_likelihood": -23.71039851124278,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.4996253812084948,
      "beta": 0.9242177486782851,
      "success": true,
      "log_likelihood": -23.863065473161235,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -7.865888833056085,
      "success": true,
      "log_likelihood": -21.404661936548884,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -4.047697479179163,
      "success": true,
      "log_likelihood": -21.99607263759019,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -1.147933076719405,
      "success": true,
      "log_likelihood": -23.659031833121645,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.007774054158859309,
      "beta": -3.3129792090542862,
      "success": true,
      "log_likelihood": -15.715927034473216,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.012744536212714,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -24.29744330720606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.00695027694774161,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -18.76060047506185,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -5.2548542029196295,
      "success": true,
      "log_likelihood": -22.356345940102063,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -4.065468696327556,
      "success": true,
      "log_likelihood": -21.967762144532852,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.012852994312797223,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -24.29744935775357,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -4.8443993006638,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -23.912642619214207,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -0.26414243342367616,
      "success": true,
      "log_likelihood": -23.794709524961767,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -4.064436989322822,
      "success": true,
      "log_likelihood": -21.968568604710704,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.006953303484546457,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -14.760600491210655,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.006956003761429104,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -16.760600475854442,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -4.038906042424406,
      "success": true,
      "log_likelihood": -22.95511351225196,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.006241649149242556,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -14.760600207878626,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -0.24978203529693382,
      "success": true,
      "log_likelihood": -23.79857845118112,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -4.140718582019862,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -24.122675269364713,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 9.833589810571015,
      "beta": -9.022826239013876,
      "success": true,
      "log_likelihood": -23.868360138599257,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.0069711797519715,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -19.760600459639946,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -4.038721820147429,
      "success": true,
      "log_likelihood": -23.954331729337774,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.8683626552801942,
      "beta": -1.1744330297389323,
      "success": true,
      "log_likelihood": -21.865161103104043,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.00701041599084657,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -13.760600491548365,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.012858238502101025,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -25.297449342665317,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -3.447281062819932,
      "success": true,
      "log_likelihood": -22.73522543614505,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.012851225334829809,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -24.29744935775341,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -1.1479499453516515,
      "success": true,
      "log_likelihood": -23.659031712750895,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.00693888182419521,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -14.760600476020276,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -2.3145184921653086,
      "beta": 10.0,
      "success": true,
      "log_likelihood": -24.388686223775238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.736037058392605,
      "beta": -0.8902368975991433,
      "success": true,
      "log_likelihood": -23.619250429418674,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -3.470565534991843,
      "success": true,
      "log_likelihood": -22.71554932309189,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 3.010152345609307,
      "success": true,
      "log_likelihood": -23.990087186163034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.497672186587167,
      "beta": -8.104688795795141,
      "success": true,
      "log_likelihood": -21.638985687292823,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 2.9680586260730886,
      "success": true,
      "log_likelihood": -24.989626746823873,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.006943227848458449,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -13.760600476564788,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": -0.27254321988439417,
      "success": true,
      "log_likelihood": -23.79369048079969,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.006559209103740719,
      "beta": -10.0,
      "success": true,
      "log_likelihood": -22.760600464102897,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.6054331971939159,
        "p": 2.511119551584953e-11
      },
      "beta": {
        "r": 0.5000782058361133,
        "p": 1.1743041948083663e-07
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 48.27018048904587,
  "bic_results": {
    "average_bic": 48.27018048904587,
    "individual_bics": [
      55.76193659241969,
      49.883632222488046,
      49.255789036841044,
      53.131395738860675,
      48.30353513321107,
      51.169333916229206,
      30.688238860760237,
      54.68822666859232,
      30.688238860744086,
      49.89034115688418,
      51.102760085368416,
      55.7619365920841,
      51.10417508919796,
      30.68823886092089,
      30.688238860769893,
      30.688238860744107,
      30.688238862446482,
      40.68823882830858,
      38.688238870212636,
      30.68823886076462,
      49.87607084228128,
      40.68823882862718,
      54.758424102579234,
      53.19794398991439,
      48.24391907590749,
      49.25581791868013,
      51.104175086220835,
      52.599716662646465,
      38.688238829099475,
      46.688238797443006,
      30.688238860743738,
      55.76193659253564,
      55.14593351890478,
      52.59971666090092,
      30.688238860745905,
      52.59889476813486,
      49.669096315879166,
      48.3137457450966,
      49.87877655637648,
      36.68823886047678,
      51.10251626532812,
      53.4182802416358,
      32.68823886030356,
      52.59889591263459,
      52.20180320023147,
      50.54169272936385,
      52.59810558802965,
      54.441997522597646,
      49.277752282080904,
      56.57674246878214,
      51.54649057336075,
      55.74114868216725,
      54.58783489939778,
      54.89316882323469,
      49.976361750009985,
      51.159183152092595,
      54.48510154315551,
      38.598891945858654,
      55.761924491324336,
      44.68823882703592,
      51.879729757116344,
      51.10256216597792,
      55.76193659241936,
      54.99232311534063,
      54.75645692683575,
      51.104175086333626,
      36.68823885933353,
      40.6882388286211,
      53.077264901416136,
      36.688238292669475,
      54.764194779274455,
      55.412388415641644,
      54.90375815411073,
      46.68823879619211,
      55.075701335587766,
      50.897360083120304,
      34.68823886000895,
      57.76193656224285,
      52.63748874920232,
      55.76193659241904,
      54.48510130241401,
      36.68823882895277,
      55.944410324462694,
      54.405538735749566,
      52.598136523095995,
      55.14721224923829,
      50.445009251497865,
      57.146291370559965,
      34.6882388300418,
      54.7544188385116,
      52.68823880511801
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.605\n- beta: r = 0.500",
  "previous_models": [
    "Specification: U = alpha * (split_self - (token_self * 3)) + beta * (split_self - (combined_earning / 2))\nP(accept) = 1 / (1 + exp(-U))\nSummary: Dual-fairness utility model combining contribution-based and equal-split fairness norms. Computes utility as weighted sum of deviations from: 1) contribution-proportional fairness (3\u00d7token_self) and 2) equal split (combined_earning/2). Two orthogonal parameters (\u03b1,\u03b2) capture individual sensitivity to each fairness type, enabling clear parameter recovery. Logistic function converts utility to acceptance probability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 48.27018048904587\nOverall Accuracy: 0.5919\n\nParameter Recovery:\n- alpha: r = 0.605\n- beta: r = 0.500"
  ]
}