{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<think>\nOkay, let's tackle this problem step by step. The goal is to design a computational model that predicts whether a participant (acting as the responder) accepts or rejects a proposal in the given experiment. The model needs to focus on responder behavior, use the provided variables appropriately, and ensure parameter recovery is feasible. Also, the utility function should be such that a negative utility corresponds to less than 50% probability of acceptance.\n\nFirst, I need to understand the key variables involved. The main target is \"accept\", which is binary (1 or 0). The model should predict this based on the utility of the proposal from the responder's perspective.\n\nThe variables provided include token contributions (token_self and token_opp), combined earnings, split amounts, percentages, etc. Since the task involves fairness considerations, the model should account for how the proposed split compares to what the responder might consider fair based on their own and the opponent's contributions.\n\nIn the experiment, each token is worth \u00a33, so combined_earning is 3*(token_self + token_opp). The split_self and split_opp are the proposed amounts. The responder's decision likely depends on how fair the split is relative to their contribution. For example, if the responder contributed more tokens, they might expect a larger share.\n\nA common approach in such scenarios is to model fairness using inequity aversion, where individuals prefer equitable outcomes and may reject unfair offers even at a cost to themselves. Fehr and Schmidt's model of inequity aversion could be a starting point. However, since the combined earnings vary, the fairness perception might be based on the proportion contributed versus the proportion received.\n\nLet me think about the utility function. The utility of accepting could be the proposed amount (split_self) minus some measure of the fair share. The fair share might be based on the participant's contribution (token_self) relative to the total (token_self + token_opp). So, fair_share = (token_self / (token_self + token_opp)) * combined_earning. The difference between the proposed split_self and the fair_share could be a key term.\n\nBut maybe the participant's perception of fairness isn't purely based on their contribution. There could be a parameter that weights the importance of equity. For example, a parameter \u03b1 that scales the difference between the proposed split and the fair share. If the proposed split is less than the fair share, the utility decreases, making rejection more likely.\n\nAdditionally, there might be a baseline acceptance bias, like a parameter \u03b2 representing the general tendency to accept offers regardless of fairness. This could account for participants who are more lenient or strategic.\n\nAnother consideration is the absolute amount of the split. Even if the split is unfair, a higher absolute amount might still lead to acceptance. So, the utility could have a term for the proposed split_self itself, scaled by a parameter \u03b3. This would capture the material self-interest of the responder.\n\nPutting this together, the utility U could be:\n\nU = \u03b3 * split_self - \u03b1 * max(fair_share - split_self, 0) + \u03b2\n\nHere, \u03b3 is the sensitivity to the proposed amount, \u03b1 is the sensitivity to unfairness (when the split is less than the fair share), and \u03b2 is the baseline acceptance tendency. The max function ensures that only disadvantageous inequity (split_self < fair_share) is penalized.\n\nThe probability of accepting would then be a logistic function of U. If U is positive, the probability is greater than 0.5; if negative, less than 0.5. This aligns with the requirement that utility less than 0 corresponds to less than 50% likelihood.\n\nNow, considering parameter bounds. The parameters \u03b1 and \u03b3 should be positive because they represent sensitivities. The baseline \u03b2 could be positive or negative, but to keep it bounded, maybe between -5 and 5. Let's set:\n\n- \u03b1: [0, 10] (sensitivity to unfairness)\n- \u03b3: [0, 10] (sensitivity to self-gain)\n- \u03b2: [-5, 5] (baseline tendency)\n\nThese ranges are generous but finite. The parameters are learnable and need to be estimated from the data.\n\nThe variables used in the model are:\n\n- split_self: from the data (proposed share for the participant)\n- token_self and token_opp: to calculate fair_share\n- combined_earning: calculated as 3*(token_self + token_opp), but since combined_earning is already a variable, we can use that directly.\n\nWait, combined_earning is given as 3*(token_self + token_opp). So fair_share would be (token_self / (token_self + token_opp)) * combined_earning. But combined_earning is 3*(sum of tokens), so fair_share simplifies to 3*token_self. Wait, that's interesting. Because combined_earning is 3*(token_self + token_opp), so the fair_share based on contribution would be (token_self / (token_self + token_opp)) * combined_earning = 3*token_self. Because combined_earning is 3*(sum tokens), so (token_self / sum) * 3*sum = 3*token_self. So the fair_share is actually 3*token_self. That's a key insight. So the fair share based on contribution is exactly 3*token_self. Therefore, the difference between split_self and 3*token_self is the measure of fairness. If split_self is less than 3*token_self, the offer is unfair (participant gets less than their contribution), and vice versa.\n\nSo the utility function can be simplified. The fair_share is 3*token_self. So the model can use (split_self - 3*token_self) as the fairness term. But perhaps participants don't perfectly weight their own contribution. Maybe they have a parameter that adjusts how much they weight their own contribution versus the opponent's. Alternatively, maybe the model should use the difference between the proposed split and the fair share (split_self - fair_share), which is split_self - 3*token_self. If this is negative, the participant is getting less than their contribution, which is unfair.\n\nSo the utility could be:\n\nU = \u03b3 * split_self + \u03b1 * (split_self - 3*token_self) + \u03b2\n\nWait, but if split_self is less than 3*token_self, then (split_self - 3*token_self) is negative. If \u03b1 is positive, then that term would decrease utility. But maybe participants are only averse to disadvantageous inequity. So perhaps the model should only penalize when split_self < fair_share. So using max(3*token_self - split_self, 0) as the unfairness term. Then:\n\nU = \u03b3 * split_self - \u03b1 * max(3*token_self - split_self, 0) + \u03b2\n\nThis way, if the proposed split is less than the fair share (3*token_self), the utility is reduced by \u03b1 times the difference. The \u03b3 term captures the positive effect of higher splits, and \u03b2 is the baseline.\n\nAlternatively, maybe the participant compares their split percentage (splitperc_self) to their contribution percentage. The contribution percentage would be (token_self / (token_self + token_opp)) * 100. The split percentage is splitperc_self. The difference between these could be another way to model inequity. For example, if splitperc_self is less than their contribution percentage, that's unfair.\n\nBut using the actual monetary amounts might be more straightforward. Since combined_earning is known, and split_self is in \u00a3, comparing split_self to 3*token_self (their contribution's monetary value) is a direct measure.\n\nSo the model would have:\n\nU = \u03b3 * split_self - \u03b1 * max(3*token_self - split_self, 0) + \u03b2\n\nThis captures the material gain (split_self), the loss from disadvantageous inequity (if split_self < 3*token_self), and a baseline.\n\nBut wait, maybe the opponent's contribution also plays a role. For example, if the opponent contributed more, maybe the participant is more lenient. But according to the problem statement, the model should utilize variables appropriately but not necessarily all. Since the focus is on responder behavior, perhaps the key variables are split_self, token_self, and token_opp (to compute fair_share). However, in the utility function above, token_opp is used via 3*token_self (since combined_earning is 3*(token_self + token_opp), but fair_share is 3*token_self). So token_opp isn't directly used except in the fair_share calculation. Wait, no: 3*token_self is the participant's contribution in \u00a3, and split_self is the proposed amount. The fair_share is based solely on their own contribution. But maybe participants also consider the opponent's contribution. For example, if the opponent contributed more, maybe the participant expects a different split. Hmm, this complicates things. But given the parameter recovery requirement, perhaps keeping the model simple with fewer parameters is better.\n\nAlternatively, the model could consider the ratio of the proposed split to the fair share. For example, (split_self / (3*token_self)) as a measure of how fair the offer is. If this ratio is less than 1, it's unfair. But then the utility could be:\n\nU = \u03b3 * split_self + \u03b1 * (split_self / (3*token_self)) + \u03b2\n\nBut this might not capture the nonlinearity of rejection. Alternatively, using a difference term as before.\n\nAnother angle: the participant's utility could depend on both their own payoff and the opponent's payoff, with some aversion to inequality. For example, Fehr-Schmidt model:\n\nU = split_self - \u03b1 * max(split_opp - split_self, 0) - \u03b2 * max(split_self - split_opp, 0)\n\nBut in this case, split_opp is the opponent's proposed share. However, in the dataset, when the participant is the responder, the split_opp is the opponent's proposed share (as proposer). Wait, trial_role is 1 for responder. So in responder trials, split_self is what the participant (responder) is offered, and split_opp is what the proposer (opponent) is keeping. So in responder trials, split_opp + split_self = combined_earning. So split_opp = combined_earning - split_self.\n\nSo the Fehr-Schmidt model would compare the participant's share to the opponent's share. If split_self < split_opp, the participant experiences disadvantageous inequity, weighted by \u03b1. If split_self > split_opp, advantageous inequity, weighted by \u03b2 (but \u03b2 is typically smaller than \u03b1). However, in this problem, the model needs to predict accept/reject based on the utility. So the utility could be:\n\nU = split_self - \u03b1 * max(split_opp - split_self, 0) - \u03b2 * max(split_self - split_opp, 0) + \u03b3\n\nBut this introduces two parameters (\u03b1 and \u03b2) plus a baseline \u03b3. However, the problem states to have a slight bias for fewer parameters. Also, parameter recovery could be challenging if parameters are correlated. Maybe simplify by only considering disadvantageous inequity, as people are more sensitive to being underpaid than overpaid. So set \u03b2=0, leading to:\n\nU = split_self - \u03b1 * max(split_opp - split_self, 0) + \u03b3\n\nBut split_opp is equal to combined_earning - split_self. So max( (combined_earning - split_self) - split_self, 0 ) = max(combined_earning - 2*split_self, 0). So the term becomes \u03b1 * max(combined_earning - 2*split_self, 0). Hmm, not sure if that's the best approach.\n\nAlternatively, using the difference between the proposed split and the fair share (3*token_self) as before. Let's compare the two approaches:\n\nApproach 1: Fair share based on own contribution (3*token_self). Utility is split_self minus penalty for being below fair share.\n\nApproach 2: Inequity aversion based on difference between self and opponent's split (Fehr-Schmidt style).\n\nWhich is more appropriate given the dataset? The dataset includes token_self and token_opp, which directly relate to contributions. The combined_earning is fixed as 3*(sum of tokens), so the fair share based on contribution is clear. Approach 1 directly uses the participant's contribution, which is a concrete measure, while Approach 2 uses the split amounts which might already reflect the contributions.\n\nBut the problem states that two equal split_self variables do not represent the same fairness if the combined_earning is different. For example, a split_self of \u00a36 could be fair if the participant contributed 2 tokens (3*2=6), but unfair if they contributed 3 tokens (3*3=9, so \u00a36 is less than fair share). Therefore, the model should account for the participant's contribution (token_self) in determining fairness. Hence, Approach 1 is more aligned with the problem's specifics.\n\nSo proceeding with Approach 1:\n\nU = \u03b3 * split_self - \u03b1 * max(3*token_self - split_self, 0) + \u03b2\n\nHere, \u03b3 represents the sensitivity to the absolute amount offered, \u03b1 is the sensitivity to receiving less than the fair share (3*token_self), and \u03b2 is a bias term. All parameters are learnable.\n\nThe probability of accepting is then logistic(U). If U > 0, P(accept) > 0.5; if U < 0, P(accept) < 0.5.\n\nNow, considering the parameters:\n\n- \u03b1 (alpha): Must be non-negative as it's a penalty for unfairness. Bounds [0, 10] (generous upper limit).\n- \u03b3 (gamma): Sensitivity to the offered amount. Should be positive, so [0, 10].\n- \u03b2 (beta): Baseline tendency, can be positive or negative. Bounds [-5, 5].\n\nThese ranges are reasonable and prevent parameters from going to infinity, aiding in parameter recovery.\n\nVariables used in the model:\n\n- split_self: from data.\n- token_self: from data.\n- 3*token_self: calculated as fair_share.\n\nBut in the dataset, combined_earning is 3*(token_self + token_opp), so 3*token_self is part of that. However, the model uses 3*token_self directly, which can be calculated from token_self (since each token is \u00a33). So token_self is a data variable, and 3*token_self is calculated.\n\nBut in the model formula, we can write it as 3*token_self. So the variables involved are split_self (data), token_self (data), and the calculated fair_share (3*token_self).\n\nNow, mapping to the variables in the dataset:\n\nThe model uses split_self, token_self. These are available in the dataset. So the model is feasible with the provided variables.\n\nAnother consideration: The problem mentions that the utility variable may be unbounded, but the parameters must have finite bounds. The model's U is a linear combination of terms involving split_self and the max function, scaled by parameters with finite bounds. So U can range from -infinity to +infinity depending on the parameter values and data, which is acceptable.\n\nNow, checking if all variables in the model are accounted for in the dataset. Yes: split_self and token_self are present. The other terms (3*token_self) are derived from token_self.\n\nThus, the model should work with the given dataset.\n\nNow, writing the formal model:\n\n<MODEL>\nU = gamma * split_self - alpha * max(3 * token_self - split_self, 0) + beta\n</MODEL>\n\nVariables:\n\n- gamma: learnable, [0, 10]\n- alpha: learnable, [0, 10]\n- beta: learnable, [-5, 5]\n- split_self: from data\n- token_self: from data\n\nThe max function is part of the utility calculation.\n\nThe target variable is \"accept\", which is binary. The probability of accept is 1 / (1 + exp(-U)), so the model predicts the log-odds of acceptance.\n\nNow, variable descriptions in JSON:\n\nFor each variable in the model:\n\n- gamma: learnable, range [0,10], inclusive.\n- alpha: learnable, range [0,10], inclusive.\n- beta: learnable, range [-5,5], inclusive.\n- split_self: from data, type int64 or float64.\n- token_self: from data, int64.\n\nThe calculated terms (3*token_self and max(...)) are not variables but part of the formula.\n\nSo the JSON would list gamma, alpha, beta as learnable parameters with their ranges. split_self and token_self are data variables.\n\nThus, the variables section:\n\n{\n  \"variables\": {\n    \"gamma\": {\n      \"description\": \"Sensitivity to the proposed amount for oneself\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity to disadvantageous inequity (receiving less than fair share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline acceptance tendency\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in \u00a3\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nThe target variable is \"accept\".\n\nThe summary should concisely describe the model. It combines the proposed amount, a penalty for being below the fair share (3*token_self), and a baseline tendency. The parameters are gamma, alpha, and beta. The model uses logistic regression on this utility to predict acceptance.\n\nSo the summary would be:\n\n<SUMMARY>\nA utility model combining self-interest (proposed amount), disadvantageous inequity aversion (difference between fair share based on own contribution and proposed amount), and a baseline tendency. The fair share is calculated as three times the participant's tokens (token_self). Utility is a linear function of these terms, with learnable parameters for sensitivity to each component.\n</SUMMARY>\n</think>\n\n<MODEL>\nU = gamma * split_self - alpha * max(3 * token_self - split_self, 0) + beta\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"gamma\": {\n      \"description\": \"Sensitivity to the proposed monetary amount for oneself\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity to disadvantageous inequity (penalty when proposed amount is less than fair share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline tendency to accept offers independent of fairness\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in \u00a3\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (used to compute fair share)\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA linear utility model where acceptance depends on the proposed amount, a penalty for receiving less than the fair share (3 \u00d7 token_self), and a baseline bias. Parameters govern sensitivity to self-gain, inequity aversion, and general acceptance tendency. The fair share is explicitly computed from the participant's contribution.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['gamma', 'alpha', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = gamma * split_self - alpha * max(3 * token_self - split_self, 0) + beta\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"gamma\": {\n      \"description\": \"Sensitivity to the proposed monetary amount for oneself\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity to disadvantageous inequity (penalty when proposed amount is less than fair share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline tendency to accept offers independent of fairness\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in \\u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (used to compute fair share)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, gamma=1, alpha=1, beta=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        utility = gamma * split_self - alpha * max(3 * token_self - split_self, 0) + beta\n        model_predictions.append(utility) # or 1 / (1 + math.exp(-utility)) for probability\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '''\n[\n  {\n    \"ID\": 1,\n    \"group\": \"1\",\n    \"trial_number\": 1,\n    \"trial_type\": 2,\n    \"trial_role\": 1,\n    \"token_opp\": 1,\n    \"token_self\": 2,\n    \"combined_earning\": 9,\n    \"split_opp\": 4.5,\n    \"split_self\": 4.5,\n    \"splitperc_opp\": 50,\n    \"splitperc_self\": 50,\n    \"accept\": 1.0,\n    \"accepted_amount\": 4.5,\n    \"accepted_perc\": 50.0,\n    \"proposed_perc\": 50.0,\n    \"proposed_amount\": 4.5\n  },\n  {\n    \"ID\": 2,\n    \"group\": \"1\",\n    \"trial_number\": 2,\n    \"trial_type\": 2,\n    \"trial_role\": 1,\n    \"token_opp\": 1,\n    \"token_self\": 2,\n    \"combined_earning\": 9,\n    \"split_opp\": 6.3,\n    \"split_self\": 2.7,\n    \"splitperc_opp\": 70,\n    \"splitperc_self\": 30,\n    \"accept\": 0.0,\n    \"accepted_amount\": 0.0,\n    \"accepted_perc\": 0.0,\n    \"proposed_perc\": 30.0,\n    \"proposed_amount\": 2.7\n  }\n]\n'''\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1744030919.3936949
    }
  ],
  "learnable_parameters": {
    "gamma": {
      "description": "Sensitivity to the proposed monetary amount for oneself",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha": {
      "description": "Sensitivity to disadvantageous inequity (penalty when proposed amount is less than fair share)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Baseline tendency to accept offers independent of fairness",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = gamma * split_self - alpha * max(3 * token_self - split_self, 0) + beta",
  "variable_descriptions": {
    "gamma": {
      "description": "Sensitivity to the proposed monetary amount for oneself",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha": {
      "description": "Sensitivity to disadvantageous inequity (penalty when proposed amount is less than fair share)",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Baseline tendency to accept offers independent of fairness",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share for the participant in \u00a3",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant (used to compute fair share)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A utility model combining self-interest (proposed amount), disadvantageous inequity aversion (difference between fair share based on own contribution and proposed amount), and a baseline tendency. The fair share is calculated as three times the participant's tokens (token_self). Utility is a linear function of these terms, with learnable parameters for sensitivity to each component.",
  "target_variable": "accept",
  "full_reasoning": "<think>\nOkay, let's tackle this problem step by step. The goal is to design a computational model that predicts whether a participant (acting as the responder) accepts or rejects a proposal in the given experiment. The model needs to focus on responder behavior, use the provided variables appropriately, and ensure parameter recovery is feasible. Also, the utility function should be such that a negative utility corresponds to less than 50% probability of acceptance.\n\nFirst, I need to understand the key variables involved. The main target is \"accept\", which is binary (1 or 0). The model should predict this based on the utility of the proposal from the responder's perspective.\n\nThe variables provided include token contributions (token_self and token_opp), combined earnings, split amounts, percentages, etc. Since the task involves fairness considerations, the model should account for how the proposed split compares to what the responder might consider fair based on their own and the opponent's contributions.\n\nIn the experiment, each token is worth \u00a33, so combined_earning is 3*(token_self + token_opp). The split_self and split_opp are the proposed amounts. The responder's decision likely depends on how fair the split is relative to their contribution. For example, if the responder contributed more tokens, they might expect a larger share.\n\nA common approach in such scenarios is to model fairness using inequity aversion, where individuals prefer equitable outcomes and may reject unfair offers even at a cost to themselves. Fehr and Schmidt's model of inequity aversion could be a starting point. However, since the combined earnings vary, the fairness perception might be based on the proportion contributed versus the proportion received.\n\nLet me think about the utility function. The utility of accepting could be the proposed amount (split_self) minus some measure of the fair share. The fair share might be based on the participant's contribution (token_self) relative to the total (token_self + token_opp). So, fair_share = (token_self / (token_self + token_opp)) * combined_earning. The difference between the proposed split_self and the fair_share could be a key term.\n\nBut maybe the participant's perception of fairness isn't purely based on their contribution. There could be a parameter that weights the importance of equity. For example, a parameter \u03b1 that scales the difference between the proposed split and the fair share. If the proposed split is less than the fair share, the utility decreases, making rejection more likely.\n\nAdditionally, there might be a baseline acceptance bias, like a parameter \u03b2 representing the general tendency to accept offers regardless of fairness. This could account for participants who are more lenient or strategic.\n\nAnother consideration is the absolute amount of the split. Even if the split is unfair, a higher absolute amount might still lead to acceptance. So, the utility could have a term for the proposed split_self itself, scaled by a parameter \u03b3. This would capture the material self-interest of the responder.\n\nPutting this together, the utility U could be:\n\nU = \u03b3 * split_self - \u03b1 * max(fair_share - split_self, 0) + \u03b2\n\nHere, \u03b3 is the sensitivity to the proposed amount, \u03b1 is the sensitivity to unfairness (when the split is less than the fair share), and \u03b2 is the baseline acceptance tendency. The max function ensures that only disadvantageous inequity (split_self < fair_share) is penalized.\n\nThe probability of accepting would then be a logistic function of U. If U is positive, the probability is greater than 0.5; if negative, less than 0.5. This aligns with the requirement that utility less than 0 corresponds to less than 50% likelihood.\n\nNow, considering parameter bounds. The parameters \u03b1 and \u03b3 should be positive because they represent sensitivities. The baseline \u03b2 could be positive or negative, but to keep it bounded, maybe between -5 and 5. Let's set:\n\n- \u03b1: [0, 10] (sensitivity to unfairness)\n- \u03b3: [0, 10] (sensitivity to self-gain)\n- \u03b2: [-5, 5] (baseline tendency)\n\nThese ranges are generous but finite. The parameters are learnable and need to be estimated from the data.\n\nThe variables used in the model are:\n\n- split_self: from the data (proposed share for the participant)\n- token_self and token_opp: to calculate fair_share\n- combined_earning: calculated as 3*(token_self + token_opp), but since combined_earning is already a variable, we can use that directly.\n\nWait, combined_earning is given as 3*(token_self + token_opp). So fair_share would be (token_self / (token_self + token_opp)) * combined_earning. But combined_earning is 3*(sum of tokens), so fair_share simplifies to 3*token_self. Wait, that's interesting. Because combined_earning is 3*(token_self + token_opp), so the fair_share based on contribution would be (token_self / (token_self + token_opp)) * combined_earning = 3*token_self. Because combined_earning is 3*(sum tokens), so (token_self / sum) * 3*sum = 3*token_self. So the fair_share is actually 3*token_self. That's a key insight. So the fair share based on contribution is exactly 3*token_self. Therefore, the difference between split_self and 3*token_self is the measure of fairness. If split_self is less than 3*token_self, the offer is unfair (participant gets less than their contribution), and vice versa.\n\nSo the utility function can be simplified. The fair_share is 3*token_self. So the model can use (split_self - 3*token_self) as the fairness term. But perhaps participants don't perfectly weight their own contribution. Maybe they have a parameter that adjusts how much they weight their own contribution versus the opponent's. Alternatively, maybe the model should use the difference between the proposed split and the fair share (split_self - fair_share), which is split_self - 3*token_self. If this is negative, the participant is getting less than their contribution, which is unfair.\n\nSo the utility could be:\n\nU = \u03b3 * split_self + \u03b1 * (split_self - 3*token_self) + \u03b2\n\nWait, but if split_self is less than 3*token_self, then (split_self - 3*token_self) is negative. If \u03b1 is positive, then that term would decrease utility. But maybe participants are only averse to disadvantageous inequity. So perhaps the model should only penalize when split_self < fair_share. So using max(3*token_self - split_self, 0) as the unfairness term. Then:\n\nU = \u03b3 * split_self - \u03b1 * max(3*token_self - split_self, 0) + \u03b2\n\nThis way, if the proposed split is less than the fair share (3*token_self), the utility is reduced by \u03b1 times the difference. The \u03b3 term captures the positive effect of higher splits, and \u03b2 is the baseline.\n\nAlternatively, maybe the participant compares their split percentage (splitperc_self) to their contribution percentage. The contribution percentage would be (token_self / (token_self + token_opp)) * 100. The split percentage is splitperc_self. The difference between these could be another way to model inequity. For example, if splitperc_self is less than their contribution percentage, that's unfair.\n\nBut using the actual monetary amounts might be more straightforward. Since combined_earning is known, and split_self is in \u00a3, comparing split_self to 3*token_self (their contribution's monetary value) is a direct measure.\n\nSo the model would have:\n\nU = \u03b3 * split_self - \u03b1 * max(3*token_self - split_self, 0) + \u03b2\n\nThis captures the material gain (split_self), the loss from disadvantageous inequity (if split_self < 3*token_self), and a baseline.\n\nBut wait, maybe the opponent's contribution also plays a role. For example, if the opponent contributed more, maybe the participant is more lenient. But according to the problem statement, the model should utilize variables appropriately but not necessarily all. Since the focus is on responder behavior, perhaps the key variables are split_self, token_self, and token_opp (to compute fair_share). However, in the utility function above, token_opp is used via 3*token_self (since combined_earning is 3*(token_self + token_opp), but fair_share is 3*token_self). So token_opp isn't directly used except in the fair_share calculation. Wait, no: 3*token_self is the participant's contribution in \u00a3, and split_self is the proposed amount. The fair_share is based solely on their own contribution. But maybe participants also consider the opponent's contribution. For example, if the opponent contributed more, maybe the participant expects a different split. Hmm, this complicates things. But given the parameter recovery requirement, perhaps keeping the model simple with fewer parameters is better.\n\nAlternatively, the model could consider the ratio of the proposed split to the fair share. For example, (split_self / (3*token_self)) as a measure of how fair the offer is. If this ratio is less than 1, it's unfair. But then the utility could be:\n\nU = \u03b3 * split_self + \u03b1 * (split_self / (3*token_self)) + \u03b2\n\nBut this might not capture the nonlinearity of rejection. Alternatively, using a difference term as before.\n\nAnother angle: the participant's utility could depend on both their own payoff and the opponent's payoff, with some aversion to inequality. For example, Fehr-Schmidt model:\n\nU = split_self - \u03b1 * max(split_opp - split_self, 0) - \u03b2 * max(split_self - split_opp, 0)\n\nBut in this case, split_opp is the opponent's proposed share. However, in the dataset, when the participant is the responder, the split_opp is the opponent's proposed share (as proposer). Wait, trial_role is 1 for responder. So in responder trials, split_self is what the participant (responder) is offered, and split_opp is what the proposer (opponent) is keeping. So in responder trials, split_opp + split_self = combined_earning. So split_opp = combined_earning - split_self.\n\nSo the Fehr-Schmidt model would compare the participant's share to the opponent's share. If split_self < split_opp, the participant experiences disadvantageous inequity, weighted by \u03b1. If split_self > split_opp, advantageous inequity, weighted by \u03b2 (but \u03b2 is typically smaller than \u03b1). However, in this problem, the model needs to predict accept/reject based on the utility. So the utility could be:\n\nU = split_self - \u03b1 * max(split_opp - split_self, 0) - \u03b2 * max(split_self - split_opp, 0) + \u03b3\n\nBut this introduces two parameters (\u03b1 and \u03b2) plus a baseline \u03b3. However, the problem states to have a slight bias for fewer parameters. Also, parameter recovery could be challenging if parameters are correlated. Maybe simplify by only considering disadvantageous inequity, as people are more sensitive to being underpaid than overpaid. So set \u03b2=0, leading to:\n\nU = split_self - \u03b1 * max(split_opp - split_self, 0) + \u03b3\n\nBut split_opp is equal to combined_earning - split_self. So max( (combined_earning - split_self) - split_self, 0 ) = max(combined_earning - 2*split_self, 0). So the term becomes \u03b1 * max(combined_earning - 2*split_self, 0). Hmm, not sure if that's the best approach.\n\nAlternatively, using the difference between the proposed split and the fair share (3*token_self) as before. Let's compare the two approaches:\n\nApproach 1: Fair share based on own contribution (3*token_self). Utility is split_self minus penalty for being below fair share.\n\nApproach 2: Inequity aversion based on difference between self and opponent's split (Fehr-Schmidt style).\n\nWhich is more appropriate given the dataset? The dataset includes token_self and token_opp, which directly relate to contributions. The combined_earning is fixed as 3*(sum of tokens), so the fair share based on contribution is clear. Approach 1 directly uses the participant's contribution, which is a concrete measure, while Approach 2 uses the split amounts which might already reflect the contributions.\n\nBut the problem states that two equal split_self variables do not represent the same fairness if the combined_earning is different. For example, a split_self of \u00a36 could be fair if the participant contributed 2 tokens (3*2=6), but unfair if they contributed 3 tokens (3*3=9, so \u00a36 is less than fair share). Therefore, the model should account for the participant's contribution (token_self) in determining fairness. Hence, Approach 1 is more aligned with the problem's specifics.\n\nSo proceeding with Approach 1:\n\nU = \u03b3 * split_self - \u03b1 * max(3*token_self - split_self, 0) + \u03b2\n\nHere, \u03b3 represents the sensitivity to the absolute amount offered, \u03b1 is the sensitivity to receiving less than the fair share (3*token_self), and \u03b2 is a bias term. All parameters are learnable.\n\nThe probability of accepting is then logistic(U). If U > 0, P(accept) > 0.5; if U < 0, P(accept) < 0.5.\n\nNow, considering the parameters:\n\n- \u03b1 (alpha): Must be non-negative as it's a penalty for unfairness. Bounds [0, 10] (generous upper limit).\n- \u03b3 (gamma): Sensitivity to the offered amount. Should be positive, so [0, 10].\n- \u03b2 (beta): Baseline tendency, can be positive or negative. Bounds [-5, 5].\n\nThese ranges are reasonable and prevent parameters from going to infinity, aiding in parameter recovery.\n\nVariables used in the model:\n\n- split_self: from data.\n- token_self: from data.\n- 3*token_self: calculated as fair_share.\n\nBut in the dataset, combined_earning is 3*(token_self + token_opp), so 3*token_self is part of that. However, the model uses 3*token_self directly, which can be calculated from token_self (since each token is \u00a33). So token_self is a data variable, and 3*token_self is calculated.\n\nBut in the model formula, we can write it as 3*token_self. So the variables involved are split_self (data), token_self (data), and the calculated fair_share (3*token_self).\n\nNow, mapping to the variables in the dataset:\n\nThe model uses split_self, token_self. These are available in the dataset. So the model is feasible with the provided variables.\n\nAnother consideration: The problem mentions that the utility variable may be unbounded, but the parameters must have finite bounds. The model's U is a linear combination of terms involving split_self and the max function, scaled by parameters with finite bounds. So U can range from -infinity to +infinity depending on the parameter values and data, which is acceptable.\n\nNow, checking if all variables in the model are accounted for in the dataset. Yes: split_self and token_self are present. The other terms (3*token_self) are derived from token_self.\n\nThus, the model should work with the given dataset.\n\nNow, writing the formal model:\n\n<MODEL>\nU = gamma * split_self - alpha * max(3 * token_self - split_self, 0) + beta\n</MODEL>\n\nVariables:\n\n- gamma: learnable, [0, 10]\n- alpha: learnable, [0, 10]\n- beta: learnable, [-5, 5]\n- split_self: from data\n- token_self: from data\n\nThe max function is part of the utility calculation.\n\nThe target variable is \"accept\", which is binary. The probability of accept is 1 / (1 + exp(-U)), so the model predicts the log-odds of acceptance.\n\nNow, variable descriptions in JSON:\n\nFor each variable in the model:\n\n- gamma: learnable, range [0,10], inclusive.\n- alpha: learnable, range [0,10], inclusive.\n- beta: learnable, range [-5,5], inclusive.\n- split_self: from data, type int64 or float64.\n- token_self: from data, int64.\n\nThe calculated terms (3*token_self and max(...)) are not variables but part of the formula.\n\nSo the JSON would list gamma, alpha, beta as learnable parameters with their ranges. split_self and token_self are data variables.\n\nThus, the variables section:\n\n{\n  \"variables\": {\n    \"gamma\": {\n      \"description\": \"Sensitivity to the proposed amount for oneself\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity to disadvantageous inequity (receiving less than fair share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline acceptance tendency\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in \u00a3\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nThe target variable is \"accept\".\n\nThe summary should concisely describe the model. It combines the proposed amount, a penalty for being below the fair share (3*token_self), and a baseline tendency. The parameters are gamma, alpha, and beta. The model uses logistic regression on this utility to predict acceptance.\n\nSo the summary would be:\n\n<SUMMARY>\nA utility model combining self-interest (proposed amount), disadvantageous inequity aversion (difference between fair share based on own contribution and proposed amount), and a baseline tendency. The fair share is calculated as three times the participant's tokens (token_self). Utility is a linear function of these terms, with learnable parameters for sensitivity to each component.\n</SUMMARY>\n</think>\n\n<MODEL>\nU = gamma * split_self - alpha * max(3 * token_self - split_self, 0) + beta\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"gamma\": {\n      \"description\": \"Sensitivity to the proposed monetary amount for oneself\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity to disadvantageous inequity (penalty when proposed amount is less than fair share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Baseline tendency to accept offers independent of fairness\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for the participant in \u00a3\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant (used to compute fair share)\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA linear utility model where acceptance depends on the proposed amount, a penalty for receiving less than the fair share (3 \u00d7 token_self), and a baseline bias. Parameters govern sensitivity to self-gain, inequity aversion, and general acceptance tendency. The fair share is explicitly computed from the participant's contribution.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = gamma * split_self - alpha * max(3 * token_self - split_self, 0) + beta\nSummary: A utility model combining self-interest (proposed amount), disadvantageous inequity aversion (difference between fair share based on own contribution and proposed amount), and a baseline tendency. The fair share is calculated as three times the participant's tokens (token_self). Utility is a linear function of these terms, with learnable parameters for sensitivity to each component.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, gamma=1, alpha=1, beta=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        utility = gamma * split_self - alpha * max(3 * token_self - split_self, 0) + beta\n        model_predictions.append(utility) # or 1 / (1 + math.exp(-utility)) for probability\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.812881562881563,
  "fitting_results": [
    {
      "gamma": 0.7066623880497934,
      "alpha": 0.9557238184565009,
      "beta": -4.225535547813858,
      "success": true,
      "log_likelihood": -6.077184892906993,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.5422489544961065,
      "alpha": 0.9055457310710683,
      "beta": 0.2495734042001002,
      "success": true,
      "log_likelihood": -16.26250190747252,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.0923285780357994,
      "alpha": 1.8771286146979678,
      "beta": 0.8717747732703598,
      "success": true,
      "log_likelihood": -9.893465234227158,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.2777533882908907,
      "alpha": 1.1768818034775612,
      "beta": -2.4656947153571873,
      "success": true,
      "log_likelihood": -12.257923096594968,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.5309149447845594,
      "alpha": 2.220997464471717,
      "beta": 2.592895310125315,
      "success": true,
      "log_likelihood": -8.65032196134331,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.0298838519710762,
      "alpha": 1.4023667763649754,
      "beta": 1.0533333224992647,
      "success": true,
      "log_likelihood": -10.831116512883042,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -8.363175789660418e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.806324414398212,
      "alpha": 1.671885488980005,
      "beta": 2.8973863376314704,
      "success": true,
      "log_likelihood": -9.823428173921132,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -8.363175789660421e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.757441985965183,
      "alpha": 1.6411429760642182,
      "beta": 0.06645648334445262,
      "success": true,
      "log_likelihood": -11.165569400184065,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 6.892092436278873,
      "alpha": 10.0,
      "beta": -2.979914553397132,
      "success": true,
      "log_likelihood": -0.9756392300293809,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.8708363245384723,
      "alpha": 1.0045288865732978,
      "beta": -4.41702200061878,
      "success": true,
      "log_likelihood": -6.993487398068619,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.8944167701862048,
      "alpha": 2.2729028323257734,
      "beta": 1.04878870981261,
      "success": true,
      "log_likelihood": -8.618546899040904,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -8.363175789660418e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -8.363175789660418e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -8.363175789660417e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -8.363175789660416e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 7.313309360836811,
      "alpha": 2.4590832184344,
      "beta": -5.0,
      "success": true,
      "log_likelihood": -0.7816575602360599,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.96883823954945,
      "alpha": 1.4442354731632803,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -5.275156669544732,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -8.363175789660416e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.3116009776636868,
      "alpha": 1.235853126004331,
      "beta": 2.2766021091612596,
      "success": true,
      "log_likelihood": -13.966380311332482,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.9353583203902669,
      "alpha": 1.1794012782221197,
      "beta": 3.4167666116007727,
      "success": true,
      "log_likelihood": -7.02615377769116,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.0073843709244612,
      "alpha": 0.48158487072384515,
      "beta": -3.2944906639633804,
      "success": true,
      "log_likelihood": -15.459488825109936,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.7949676731645212,
      "alpha": 0.6674414390677927,
      "beta": -0.9988637122817055,
      "success": true,
      "log_likelihood": -16.68726257037569,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.0,
      "alpha": 1.7914976287830062,
      "beta": 4.237638737636097,
      "success": true,
      "log_likelihood": -10.409785808592028,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.8141078633500415,
      "alpha": 0.8810225295623663,
      "beta": -0.1484954683560698,
      "success": true,
      "log_likelihood": -14.888736956668604,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.2481068196706566,
      "alpha": 1.3088535512367439,
      "beta": -0.7598555099808055,
      "success": true,
      "log_likelihood": -11.49302863954653,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.395090989373021,
      "alpha": 5.206863667684689,
      "beta": 0.419503613829126,
      "success": true,
      "log_likelihood": -3.925525591482006,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.38880221578371005,
      "alpha": 0.9745972995413311,
      "beta": 4.428421337788828,
      "success": true,
      "log_likelihood": -7.701058343102519,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.17102094477825974,
      "alpha": 0.7475512755796755,
      "beta": 2.977566788411365,
      "success": true,
      "log_likelihood": -14.144819508512573,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -8.363175789660417e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.7066849417058225,
      "alpha": 0.9557117147991988,
      "beta": -4.225686474969724,
      "success": true,
      "log_likelihood": -6.077184893769934,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.6847554624664417,
      "alpha": 0.25673400666479634,
      "beta": -2.2152504519072442,
      "success": true,
      "log_likelihood": -19.42122377878605,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.7255423764852148,
      "alpha": 0.9364062410847219,
      "beta": -1.119611546702977,
      "success": true,
      "log_likelihood": -15.062416061213753,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -8.36317578966042e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.3787500253808065,
      "alpha": 0.5725472081644766,
      "beta": -5.0,
      "success": true,
      "log_likelihood": -9.481681598795635,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.1030919588075454,
      "alpha": 1.8352108456468845,
      "beta": -0.10269873457691925,
      "success": true,
      "log_likelihood": -7.00817300650501,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.3828209641415946,
      "alpha": 1.3282142136549133,
      "beta": 1.7928163913062756,
      "success": true,
      "log_likelihood": -13.418036865200465,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.17239984105817316,
      "alpha": 0.8483423658009983,
      "beta": 2.485031198775861,
      "success": true,
      "log_likelihood": -16.16485029745279,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.2888862662709986,
      "alpha": 0.5017970515821624,
      "beta": 3.1584217913411865,
      "success": true,
      "log_likelihood": -8.535353552187363,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.08839748882649137,
      "alpha": 1.0125652695901624,
      "beta": 2.8705102525951487,
      "success": true,
      "log_likelihood": -15.691135822092257,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.4750012067892144,
      "alpha": 1.0852629401723182,
      "beta": -1.2874559615469,
      "success": true,
      "log_likelihood": -12.071796912609294,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -23.025851013672234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.8722600152101193,
      "alpha": 0.7101851051631068,
      "beta": -0.9669512980360012,
      "success": true,
      "log_likelihood": -15.86859795636134,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.9716211947008094,
      "alpha": 1.0052534722345046,
      "beta": -0.11333995552848637,
      "success": true,
      "log_likelihood": -13.254468728277384,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.0461349831218851,
      "alpha": 0.2508684273092233,
      "beta": -1.5358816441602428,
      "success": true,
      "log_likelihood": -15.17914839864642,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.6412800696964491,
      "alpha": 0.9943621156310744,
      "beta": 0.30869070995783776,
      "success": true,
      "log_likelihood": -15.213175211716734,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.7202497300709647,
      "alpha": 0.4769184460224438,
      "beta": -2.025313770123711,
      "success": true,
      "log_likelihood": -17.715917431010983,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.0,
      "alpha": 2.319453725013189,
      "beta": 4.2091232359171675,
      "success": true,
      "log_likelihood": -8.245801045058778,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.4746738904485155,
      "alpha": 0.003860159484900599,
      "beta": -1.5380648726750814,
      "success": true,
      "log_likelihood": -22.68260551955402,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.5685416472293668,
      "alpha": 0.44867932104845387,
      "beta": 0.2077524440654673,
      "success": true,
      "log_likelihood": -17.32549339323394,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.5112743618918251,
      "alpha": 0.4499592537228623,
      "beta": -3.078388014047198,
      "success": true,
      "log_likelihood": -11.409180135884517,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.9075549327689008,
      "alpha": 0.3538002577441446,
      "beta": -2.1259202538815267,
      "success": true,
      "log_likelihood": -17.68762849213928,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.8004024232538035,
      "alpha": 0.0,
      "beta": -2.3457928947187043,
      "success": true,
      "log_likelihood": -19.772884683356324,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.058079700870469195,
      "alpha": 0.7322036982113896,
      "beta": 0.9314390823818696,
      "success": true,
      "log_likelihood": -18.848102189594908,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.9213860560342155,
      "alpha": 5.548633726571345,
      "beta": -2.6746449678721014,
      "success": true,
      "log_likelihood": -3.9621695307289437,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.6929669223235332,
      "alpha": 1.6465427051453623,
      "beta": -0.8688021355168567,
      "success": true,
      "log_likelihood": -10.25202747237046,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 10.0,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -91.39470619783565,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.7470947386311582,
      "alpha": 0.8294374050692479,
      "beta": -4.02337115296824,
      "success": true,
      "log_likelihood": -7.766224008618657,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.9537485168823141,
      "alpha": 0.13201601517129602,
      "beta": -1.0075008519192088,
      "success": true,
      "log_likelihood": -13.857633151680979,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.34618820219163005,
      "alpha": 0.4968507810160869,
      "beta": 0.566289152505283,
      "success": true,
      "log_likelihood": -19.659790048174646,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.3351344197624858,
      "alpha": 1.2658107237288354,
      "beta": 1.816059024184277,
      "success": true,
      "log_likelihood": -13.914497000355766,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.7065734308244283,
      "alpha": 0.9556709880440568,
      "beta": -4.225185861714431,
      "success": true,
      "log_likelihood": -6.077184918014848,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.7362863264787708,
      "alpha": 0.2842750789440489,
      "beta": -2.1847297186330996,
      "success": true,
      "log_likelihood": -19.125225040279382,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.1650139883913906,
      "alpha": 1.3827172032573194,
      "beta": -3.679939861726704,
      "success": true,
      "log_likelihood": -9.182541290462858,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.0751088068300314,
      "alpha": 0.8689950446364476,
      "beta": -1.2496950844567283,
      "success": true,
      "log_likelihood": -14.028700170990255,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.5190511717015847,
      "alpha": 0.5752665024471846,
      "beta": 2.854501030789416,
      "success": true,
      "log_likelihood": -7.694984889172628,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.32030860406481865,
      "alpha": 0.7413975754994911,
      "beta": 3.294717313144683,
      "success": true,
      "log_likelihood": -10.373167061009028,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.6540371896082782,
      "alpha": 0.477624482378804,
      "beta": -4.01706931676098,
      "success": true,
      "log_likelihood": -12.567595494091638,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.0,
      "alpha": 0.32530081522173704,
      "beta": 3.3637091967221373,
      "success": true,
      "log_likelihood": -9.773742446112328,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.672645143112129,
      "alpha": 10.0,
      "beta": -4.351476418730356,
      "success": true,
      "log_likelihood": -0.4239685062645781,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.5957812904552685,
      "alpha": 0.5578241218679441,
      "beta": -3.297143291814459,
      "success": true,
      "log_likelihood": -10.619230448338225,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.770446201277402,
      "alpha": 0.870209276228941,
      "beta": -0.43378815555563155,
      "success": true,
      "log_likelihood": -15.551664894815053,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.9702444153136984,
      "alpha": 0.16844045952166845,
      "beta": -1.1603017156099935,
      "success": true,
      "log_likelihood": -14.541141120911986,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.32912137787850465,
      "alpha": 0.2504697491801949,
      "beta": -0.5479486115049476,
      "success": true,
      "log_likelihood": -22.545851971899666,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.47383344463838134,
      "alpha": 1.285112855516642,
      "beta": 3.0722606703845283,
      "success": true,
      "log_likelihood": -11.832866663763978,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.07121624398948444,
      "alpha": 0.6203215873378156,
      "beta": 4.772871829709267,
      "success": true,
      "log_likelihood": -6.302963277114767,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.2943953667925261,
      "alpha": 0.5879843740072961,
      "beta": -3.1081415069648894,
      "success": true,
      "log_likelihood": -6.456591937149582,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.5230505741080462,
      "alpha": 0.0,
      "beta": -1.3209618409951942,
      "success": true,
      "log_likelihood": -21.682994743524283,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.7066715786919646,
      "alpha": 0.9557151168297126,
      "beta": -4.225599736344899,
      "success": true,
      "log_likelihood": -6.07718489282722,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.25357631113384166,
      "alpha": 0.2709424538191539,
      "beta": -0.10824453908493094,
      "success": true,
      "log_likelihood": -22.804479797324394,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 9.906362947287422,
      "alpha": 0.0,
      "beta": 5.0,
      "success": true,
      "log_likelihood": -69.07421174379111,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.457955502421635,
      "alpha": 0.8238292942557989,
      "beta": -2.7201150348866157,
      "success": true,
      "log_likelihood": -8.860958646395007,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.6666728835830296,
      "alpha": 1.7667763211293226,
      "beta": -5.0,
      "success": true,
      "log_likelihood": -5.073748331937936,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.0,
      "alpha": 0.22625334769075753,
      "beta": 1.030458359831271,
      "success": true,
      "log_likelihood": -23.315179336056445,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.46528679584134497,
      "alpha": 1.5219674078135803,
      "beta": -2.2250680700433287,
      "success": true,
      "log_likelihood": -7.154354833076446,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.24215159372810527,
      "alpha": 0.6626879280155259,
      "beta": 1.874211146596508,
      "success": true,
      "log_likelihood": -17.022305349797172,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.2598623081571635,
      "alpha": 0.9968445989941838,
      "beta": -0.5552578703056339,
      "success": true,
      "log_likelihood": -13.240537252522033,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.5739234334375077,
      "alpha": 0.7788982133469209,
      "beta": 4.205378772337484,
      "success": true,
      "log_likelihood": -4.980463201382203,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.0017650115000456,
      "alpha": 0.8371094597966113,
      "beta": -5.0,
      "success": true,
      "log_likelihood": -6.923412824057082,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.2131573433779927,
      "alpha": 0.2519014163837953,
      "beta": 0.7642768011119127,
      "success": true,
      "log_likelihood": -20.636838636318007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "gamma": {
        "r": 0.7332493594980585,
        "p": 4.1655049796653466e-18
      },
      "alpha": {
        "r": 0.8434133466131007,
        "p": 3.435022063333818e-28
      },
      "beta": {
        "r": 0.5565975766219595,
        "p": 1.820649428476955e-09
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 35.52462459861749,
  "bic_results": {
    "average_bic": 35.52462459861749,
    "individual_bics": [
      22.904926601182318,
      43.275560630313365,
      30.537487283822646,
      35.26640300855827,
      28.051200738054952,
      32.41278984113441,
      10.750556982631846,
      30.397413163210594,
      10.750556982631846,
      33.081695615736464,
      12.701835275427092,
      24.737531611505567,
      27.98765061345014,
      10.750556982631846,
      10.750556982631846,
      10.750556982631846,
      10.750556982631846,
      12.313871935840451,
      21.300870154457794,
      10.750556982631846,
      38.6833174380333,
      24.80286437075065,
      41.6695344655882,
      44.125081956119715,
      31.570128432552387,
      40.52803072870554,
      33.73661409446139,
      18.60160799833234,
      26.152673501573368,
      39.04019583239348,
      10.750556982631846,
      22.904926602908198,
      49.59300437294043,
      40.87538893779583,
      10.750556982631846,
      29.7139200129596,
      24.76690282837835,
      37.58663054576926,
      43.080257410273916,
      27.821263919743057,
      42.13282845955284,
      34.894150640586915,
      56.8022588427128,
      42.48775272809101,
      37.2594942719231,
      41.10885361266117,
      41.1769072388018,
      46.1823916773903,
      27.242158905485887,
      56.115767854476374,
      45.40154360183621,
      33.568917087137365,
      46.12581379964689,
      50.296326182080975,
      48.44676119455815,
      18.67489587682622,
      31.25461176010925,
      193.53996921103962,
      26.283004832605645,
      38.465823118730285,
      50.070136911717626,
      38.57955081607986,
      22.90492665139803,
      49.00100689592709,
      29.115639396294046,
      38.80795715734884,
      26.140526593713588,
      31.496890937386386,
      35.88574780355161,
      30.298041707592986,
      11.598493827897487,
      31.98901771204478,
      41.853886604998436,
      39.8328390571923,
      55.84226075916766,
      34.41629014289629,
      23.356483369597864,
      23.663740689667495,
      54.11654630241689,
      22.904926601022773,
      56.35951641001712,
      148.89898030295055,
      28.472474108158345,
      20.898053479244204,
      57.38091548748122,
      25.05926648152122,
      44.79516751496267,
      37.2316313204124,
      20.711483218132734,
      24.597382463482496,
      52.02423408800435
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- gamma: r = 0.733\n- alpha: r = 0.843\n- beta: r = 0.557",
  "previous_models": [
    "Specification: U = gamma * split_self - alpha * max(3 * token_self - split_self, 0) + beta\nSummary: A utility model combining self-interest (proposed amount), disadvantageous inequity aversion (difference between fair share based on own contribution and proposed amount), and a baseline tendency. The fair share is calculated as three times the participant's tokens (token_self). Utility is a linear function of these terms, with learnable parameters for sensitivity to each component.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 35.52462459861749\nOverall Accuracy: 0.8129\n\nParameter Recovery:\n- gamma: r = 0.733\n- alpha: r = 0.843\n- beta: r = 0.557"
  ]
}