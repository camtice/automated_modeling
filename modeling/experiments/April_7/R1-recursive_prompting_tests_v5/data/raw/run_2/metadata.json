{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\nOkay, let's analyze the previous results to figure out how to improve the instructions. The previous model had a BIC of 35.52, which is pretty low, but there's room for improvement. The accuracy was 81.3%, which is good but could be higher. The parameter recovery for gamma was 0.733, alpha was 0.843, and beta was 0.557. Beta's recovery is lower, suggesting it's harder to estimate, maybe due to covariance with other parameters or being a less influential term.\n\nFirst, the beta parameter's lower recovery might be because it's a baseline term that's not as strongly tied to the data. Maybe the model could benefit from rethinking the necessity of beta. If beta is causing issues, perhaps removing it or combining it with another term could reduce covariance. Alternatively, adjusting the model to make beta's role more distinct might help.\n\nThe alpha parameter had good recovery, indicating the inequity aversion component is well-captured. Gamma's recovery was decent but lower than alpha. This might mean that the self-interest term (gamma) is somewhat correlated with other terms. Maybe introducing a nonlinearity could help disentangle these effects. For example, using a sigmoid or exponential function for gamma or alpha to capture diminishing returns or thresholds.\n\nThe current model uses a linear combination of terms. Perhaps introducing interaction terms or nonlinear components could better capture the decision-making process. For instance, the disutility from inequity might only kick in after a certain threshold, which could be modeled with a step function or a quadratic term.\n\nAnother angle is considering the opponent's contribution. The previous model didn't use token_opp, but maybe participants also consider how much the opponent contributed relative to themselves. Adding a term that compares token_self to token_opp could provide additional explanatory power. For example, if the opponent contributed more, the participant might be more accepting of a lower split_self.\n\nThe problem statement mentioned that two equal split_self values don't represent the same fairness if combined_earning differs. The current model accounts for this via the fair share (3*token_self), but maybe the model should also consider the total amount available. For example, a \u00a33 difference might matter more when the total is small. Including a term that normalizes the inequity by the combined_earning could help.\n\nAdditionally, the utility function's linearity might be too simplistic. People might have nonlinear responses to money (diminishing marginal utility) or to inequity. Using a logarithmic or power function for split_self could better represent how participants value different amounts.\n\nThe instructions should encourage exploring these possibilities. Specifically, suggest considering nonlinear terms, interaction effects, and alternative fairness calculations. Also, address parameter covariance by possibly reducing the number of parameters or making them orthogonal. For example, if beta is problematic, the model might omit it or tie it to another parameter.\n\nEmphasize testing models that incorporate both advantageous and disadvantageous inequity, even if the previous model only used disadvantageous. Also, suggest models that use percentage splits (splitperc_self) instead of absolute amounts, as percentages might be more intuitive for participants.\n\nFinally, encourage models that include both self-interest and fairness components but in a way that parameters are less correlated. Maybe using a ratio of split_self to fair share instead of a difference, or combining terms in a multiplicative rather than additive way.\n</think>\n\nFocus on these aspects for improved model specification:\n\n1. **Nonlinear Utility Components**  \n   - Explore diminishing sensitivity to monetary amounts (e.g., log(split_self) or sqrt(split_self))  \n   - Consider threshold effects for inequity aversion (e.g., only penalize offers below 80% of fair share)  \n\n2. **Alternative Fairness Representations**  \n   - Compare split_self to opponent's contribution-adjusted fair share (e.g., 3*token_opp)  \n   - Model relative deprivation: (split_self - split_opp)/(split_self + split_opp)  \n\n3. **Parameter Orthogonalization**  \n   - Replace baseline \u03b2 with task-invariant terms (e.g., trial_number decay) to reduce covariance  \n   - Use ratio parameters instead of additive terms (e.g., \u03b3/\u03b1 balance between self-interest vs fairness)  \n\n4. **Contextual Sensitivity**  \n   - Scale inequity aversion by total stakes: \u03b1 * (3*token_self - split_self)/combined_earning  \n   - Include trial_type as modulator of \u03b1 (e.g., stronger aversion in \"participant more\" trials)  \n\n5. **Psychometric Refinement**  \n   - Use softplus instead of max() for smooth inequity penalty  \n   - Add stochasticity parameter for choice consistency  \n\nPrioritize models with \u22644 parameters. If using baseline terms, anchor them to observable trial features rather than free-floating constants. Test asymmetric responses to over/under-offers.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\nOkay, let's analyze the previous results to figure out how to improve the instructions. The previous model had a BIC of 35.52, which is pretty low, but there's room for improvement. The accuracy was 81.3%, which is good but could be higher. The parameter recovery for gamma was 0.733, alpha was 0.843, and beta was 0.557. Beta's recovery is lower, suggesting it's harder to estimate, maybe due to covariance with other parameters or being a less influential term.\n\nFirst, the beta parameter's lower recovery might be because it's a baseline term that's not as strongly tied to the data. Maybe the model could benefit from rethinking the necessity of beta. If beta is causing issues, perhaps removing it or combining it with another term could reduce covariance. Alternatively, adjusting the model to make beta's role more distinct might help.\n\nThe alpha parameter had good recovery, indicating the inequity aversion component is well-captured. Gamma's recovery was decent but lower than alpha. This might mean that the self-interest term (gamma) is somewhat correlated with other terms. Maybe introducing a nonlinearity could help disentangle these effects. For example, using a sigmoid or exponential function for gamma or alpha to capture diminishing returns or thresholds.\n\nThe current model uses a linear combination of terms. Perhaps introducing interaction terms or nonlinear components could better capture the decision-making process. For instance, the disutility from inequity might only kick in after a certain threshold, which could be modeled with a step function or a quadratic term.\n\nAnother angle is considering the opponent's contribution. The previous model didn't use token_opp, but maybe participants also consider how much the opponent contributed relative to themselves. Adding a term that compares token_self to token_opp could provide additional explanatory power. For example, if the opponent contributed more, the participant might be more accepting of a lower split_self.\n\nThe problem statement mentioned that two equal split_self values don't represent the same fairness if combined_earning differs. The current model accounts for this via the fair share (3*token_self), but maybe the model should also consider the total amount available. For example, a \u00a33 difference might matter more when the total is small. Including a term that normalizes the inequity by the combined_earning could help.\n\nAdditionally, the utility function's linearity might be too simplistic. People might have nonlinear responses to money (diminishing marginal utility) or to inequity. Using a logarithmic or power function for split_self could better represent how participants value different amounts.\n\nThe instructions should encourage exploring these possibilities. Specifically, suggest considering nonlinear terms, interaction effects, and alternative fairness calculations. Also, address parameter covariance by possibly reducing the number of parameters or making them orthogonal. For example, if beta is problematic, the model might omit it or tie it to another parameter.\n\nEmphasize testing models that incorporate both advantageous and disadvantageous inequity, even if the previous model only used disadvantageous. Also, suggest models that use percentage splits (splitperc_self) instead of absolute amounts, as percentages might be more intuitive for participants.\n\nFinally, encourage models that include both self-interest and fairness components but in a way that parameters are less correlated. Maybe using a ratio of split_self to fair share instead of a difference, or combining terms in a multiplicative rather than additive way.\n</think>\n\nFocus on these aspects for improved model specification:\n\n1. **Nonlinear Utility Components**  \n   - Explore diminishing sensitivity to monetary amounts (e.g., log(split_self) or sqrt(split_self))  \n   - Consider threshold effects for inequity aversion (e.g., only penalize offers below 80% of fair share)  \n\n2. **Alternative Fairness Representations**  \n   - Compare split_self to opponent's contribution-adjusted fair share (e.g., 3*token_opp)  \n   - Model relative deprivation: (split_self - split_opp)/(split_self + split_opp)  \n\n3. **Parameter Orthogonalization**  \n   - Replace baseline \u03b2 with task-invariant terms (e.g., trial_number decay) to reduce covariance  \n   - Use ratio parameters instead of additive terms (e.g., \u03b3/\u03b1 balance between self-interest vs fairness)  \n\n4. **Contextual Sensitivity**  \n   - Scale inequity aversion by total stakes: \u03b1 * (3*token_self - split_self)/combined_earning  \n   - Include trial_type as modulator of \u03b1 (e.g., stronger aversion in \"participant more\" trials)  \n\n5. **Psychometric Refinement**  \n   - Use softplus instead of max() for smooth inequity penalty  \n   - Add stochasticity parameter for choice consistency  \n\nPrioritize models with \u22644 parameters. If using baseline terms, anchor them to observable trial features rather than free-floating constants. Test asymmetric responses to over/under-offers.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<think>\nOkay, let's tackle this step by step. The goal is to design a computational model that predicts whether a participant (as the responder) accepts or rejects a proposal. The model needs to focus on responder behavior, use the given variables appropriately, and ensure parameters can be recovered well.\n\nFirst, I need to identify which variables are relevant. The target is 'accept', so the model should predict this binary outcome. Since we're focusing on responder behavior, we should filter the data where trial_role is 1 (responder). \n\nThe key variables likely influencing the decision are the proposed shares (split_self and split_opp), the tokens found by self and opponent (token_self and token_opp), and the combined earnings. The trial_type might also play a role in how fairness is perceived.\n\nThe model should calculate a utility based on these variables. A common approach is to combine self-interest and fairness considerations. For self-interest, the utility could be the proposed share for the participant (split_self). For fairness, the participant might compare their share to what's considered fair. \n\nWhat's a fair share? Since each token is worth \u00a33, the participant's contribution is 3*token_self, and the opponent's is 3*token_opp. The total combined earning is the sum, so a fair split might be proportional to their contribution. However, the problem states that equal split_self values don't represent the same fairness if combined earnings differ. So, the fair share should be (3*token_self) / (combined_earning) * combined_earning, which simplifies to 3*token_self. Wait, that's just their contribution. But the split is from the combined earnings, which is 3*(token_self + token_opp). So the fair share would be (3*token_self) / (3*(token_self + token_opp)) * combined_earning. But combined_earning is 3*(token_self + token_opp), so the fair share is exactly 3*token_self. Therefore, the fair split for the participant is 3*token_self, and any split_self below that is unfair.\n\nSo, the participant's utility could be a function of how much they get (split_self) minus some aversion to unfairness. The unfairness could be the difference between their fair share (3*token_self) and the proposed split_self. If split_self is less than 3*token_self, that's disadvantageous inequity, which they might dislike. \n\nSo, the utility function might look like:\n\nUtility = \u03b3 * split_self - \u03b1 * max(0, 3*token_self - split_self)\n\nHere, \u03b3 represents the sensitivity to the monetary gain (self-interest), and \u03b1 represents the aversion to disadvantageous inequity. Both \u03b3 and \u03b1 are learnable parameters. The max function ensures that only offers below the fair share are penalized.\n\nTo predict the probability of accepting, we pass the utility through a logistic function. The probability of accepting is 1 / (1 + exp(-Utility)). If Utility is greater than 0, the probability is above 0.5.\n\nNow, considering parameter bounds. Gamma (\u03b3) should be positive because more money is better. Alpha (\u03b1) should also be positive because aversion to unfairness would reduce utility. So, we can set gamma's min to 0 and a reasonable max, say 5. For alpha, similar bounds. \n\nBut wait, the problem mentions that the utility variable may be unbounded, but parameters need finite bounds. So gamma and alpha are bounded, but the utility itself can be any real number.\n\nAnother consideration: maybe the participant also cares about the opponent's share relative to their own. For example, if the opponent is getting more than their fair share, the participant might be averse to that. But the problem states that the model should predict responder behavior, which is when the participant is the responder, so the proposer's split is the opponent's proposal. However, the current model only considers the participant's share relative to their fair contribution. Including the opponent's share could add another term, but that might complicate the model. Let's stick to the simpler model first.\n\nWait, the trial_type variable indicates whether the contribution was equal, opponent more, or participant more. This might influence the fairness perception. For example, in trials where the participant contributed more (trial_type=3), they might expect a higher share and be more sensitive to unfair splits. However, including trial_type would require adding interaction terms, which could increase model complexity. Since parameter recovery is a priority, maybe keep the model simple with just gamma and alpha.\n\nAlternatively, trial_type could modulate the alpha parameter. For instance, different alphas for each trial type. But that would add more parameters, which might complicate recovery. Let's proceed with the basic model first.\n\nSo, the final model is:\n\nUtility = \u03b3 * split_self - \u03b1 * max(0, fair_share - split_self)\n\nWhere fair_share = 3 * token_self.\n\nThe probability of accepting is logistic(Utility). The parameters gamma and alpha are learnable with bounds [0, 5], for example.\n\nNow, variable descriptions:\n\n- gamma: sensitivity to monetary gain, learnable, range [0,5]\n- alpha: aversion to disadvantageous inequity, learnable, range [0,5]\n- split_self: from data\n- token_self: from data\n- fair_share: calculated as 3*token_self\n\nThe target variable is 'accept'.\n\nThis model uses only the necessary variables, focuses on responder behavior, and has two learnable parameters with clear interpretations. The bounds are generous but finite, aiding parameter recovery.\n</think>\n\n<MODEL>\nU = gamma * split_self - alpha * max(0, 3*token_self - split_self)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"gamma\": {\n      \"description\": \"Marginal utility of money (self-interest sensitivity)\",\n      \"range\": {\n        \"min\": 0.001,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Disadvantageous inequity aversion coefficient\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token count\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA dual-component utility model combining linear monetary gain and disadvantageous inequity aversion. Compares proposed share to contribution-based fair share (3\u00d7token_self). Uses two psychologically interpretable parameters: \u03b3 captures self-interest strength, \u03b1 quantifies rejection of offers below contribution value. Logistic choice rule converts utility to acceptance probability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['gamma', 'alpha']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = gamma * split_self - alpha * max(0, 3*token_self - split_self)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"gamma\": {\n      \"description\": \"Marginal utility of money (self-interest sensitivity)\",\n      \"range\": {\n        \"min\": 0.001,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Disadvantageous inequity aversion coefficient\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \\u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token count\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, gamma=1.0, alpha=1.0):\n    \"\"\"\n    Simulates the utility of accepting an offer based on the provided model.\n\n    Args:\n        trial_data (list of dict): A list of dictionaries, where each dictionary\n                                  represents a trial and contains the following keys:\n                                  - split_self (float): The proposed share for the participant.\n                                  - token_self (int): The participant's token count.\n        gamma (float): Marginal utility of money (self-interest sensitivity).\n        alpha (float): Disadvantageous inequity aversion coefficient.\n\n    Returns:\n        list of float: A list of model predictions (utilities) for each trial.\n    \"\"\"\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0.0)\n        token_self = trial.get(\"token_self\", 0)\n\n        # Calculate utility\n        utility = gamma * split_self - alpha * max(0, 3 * token_self - split_self)\n        model_predictions.append(utility)\n\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"A\", \"trial_number\": 1, \"trial_type\": 3, \"trial_role\": 1, \"token_opp\": 3, \"token_self\": 7, \"combined_earning\": 30, \"split_opp\": 13.0, \"split_self\": 17.0, \"splitperc_opp\": 43, \"splitperc_self\": 57, \"accept\": 1.0, \"accepted_amount\": 17.0, \"accepted_perc\": 57.0, \"proposed_perc\": 57.0, \"proposed_amount\": 17.0}, {\"ID\": 2, \"group\": \"A\", \"trial_number\": 2, \"trial_type\": 3, \"trial_role\": 1, \"token_opp\": 3, \"token_self\": 7, \"combined_earning\": 30, \"split_opp\": 20.0, \"split_self\": 10.0, \"splitperc_opp\": 67, \"splitperc_self\": 33, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 33.0, \"proposed_amount\": 10.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744030991.84432
    }
  ],
  "learnable_parameters": {
    "gamma": {
      "description": "Marginal utility of money (self-interest sensitivity)",
      "range": {
        "min": 0.001,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha": {
      "description": "Disadvantageous inequity aversion coefficient",
      "range": {
        "min": 0,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = gamma * split_self - alpha * max(0, 3*token_self - split_self)",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "gamma": {
      "description": "Marginal utility of money (self-interest sensitivity)",
      "range": {
        "min": 0.001,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha": {
      "description": "Disadvantageous inequity aversion coefficient",
      "range": {
        "min": 0,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share for participant in \u00a3",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Participant's token count",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A dual-component utility model combining linear monetary gain and disadvantageous inequity aversion. Compares proposed share to contribution-based fair share (3\u00d7token_self). Uses two psychologically interpretable parameters: \u03b3 captures self-interest strength, \u03b1 quantifies rejection of offers below contribution value. Logistic choice rule converts utility to acceptance probability.",
  "target_variable": "accept",
  "full_reasoning": "<think>\nOkay, let's tackle this step by step. The goal is to design a computational model that predicts whether a participant (as the responder) accepts or rejects a proposal. The model needs to focus on responder behavior, use the given variables appropriately, and ensure parameters can be recovered well.\n\nFirst, I need to identify which variables are relevant. The target is 'accept', so the model should predict this binary outcome. Since we're focusing on responder behavior, we should filter the data where trial_role is 1 (responder). \n\nThe key variables likely influencing the decision are the proposed shares (split_self and split_opp), the tokens found by self and opponent (token_self and token_opp), and the combined earnings. The trial_type might also play a role in how fairness is perceived.\n\nThe model should calculate a utility based on these variables. A common approach is to combine self-interest and fairness considerations. For self-interest, the utility could be the proposed share for the participant (split_self). For fairness, the participant might compare their share to what's considered fair. \n\nWhat's a fair share? Since each token is worth \u00a33, the participant's contribution is 3*token_self, and the opponent's is 3*token_opp. The total combined earning is the sum, so a fair split might be proportional to their contribution. However, the problem states that equal split_self values don't represent the same fairness if combined earnings differ. So, the fair share should be (3*token_self) / (combined_earning) * combined_earning, which simplifies to 3*token_self. Wait, that's just their contribution. But the split is from the combined earnings, which is 3*(token_self + token_opp). So the fair share would be (3*token_self) / (3*(token_self + token_opp)) * combined_earning. But combined_earning is 3*(token_self + token_opp), so the fair share is exactly 3*token_self. Therefore, the fair split for the participant is 3*token_self, and any split_self below that is unfair.\n\nSo, the participant's utility could be a function of how much they get (split_self) minus some aversion to unfairness. The unfairness could be the difference between their fair share (3*token_self) and the proposed split_self. If split_self is less than 3*token_self, that's disadvantageous inequity, which they might dislike. \n\nSo, the utility function might look like:\n\nUtility = \u03b3 * split_self - \u03b1 * max(0, 3*token_self - split_self)\n\nHere, \u03b3 represents the sensitivity to the monetary gain (self-interest), and \u03b1 represents the aversion to disadvantageous inequity. Both \u03b3 and \u03b1 are learnable parameters. The max function ensures that only offers below the fair share are penalized.\n\nTo predict the probability of accepting, we pass the utility through a logistic function. The probability of accepting is 1 / (1 + exp(-Utility)). If Utility is greater than 0, the probability is above 0.5.\n\nNow, considering parameter bounds. Gamma (\u03b3) should be positive because more money is better. Alpha (\u03b1) should also be positive because aversion to unfairness would reduce utility. So, we can set gamma's min to 0 and a reasonable max, say 5. For alpha, similar bounds. \n\nBut wait, the problem mentions that the utility variable may be unbounded, but parameters need finite bounds. So gamma and alpha are bounded, but the utility itself can be any real number.\n\nAnother consideration: maybe the participant also cares about the opponent's share relative to their own. For example, if the opponent is getting more than their fair share, the participant might be averse to that. But the problem states that the model should predict responder behavior, which is when the participant is the responder, so the proposer's split is the opponent's proposal. However, the current model only considers the participant's share relative to their fair contribution. Including the opponent's share could add another term, but that might complicate the model. Let's stick to the simpler model first.\n\nWait, the trial_type variable indicates whether the contribution was equal, opponent more, or participant more. This might influence the fairness perception. For example, in trials where the participant contributed more (trial_type=3), they might expect a higher share and be more sensitive to unfair splits. However, including trial_type would require adding interaction terms, which could increase model complexity. Since parameter recovery is a priority, maybe keep the model simple with just gamma and alpha.\n\nAlternatively, trial_type could modulate the alpha parameter. For instance, different alphas for each trial type. But that would add more parameters, which might complicate recovery. Let's proceed with the basic model first.\n\nSo, the final model is:\n\nUtility = \u03b3 * split_self - \u03b1 * max(0, fair_share - split_self)\n\nWhere fair_share = 3 * token_self.\n\nThe probability of accepting is logistic(Utility). The parameters gamma and alpha are learnable with bounds [0, 5], for example.\n\nNow, variable descriptions:\n\n- gamma: sensitivity to monetary gain, learnable, range [0,5]\n- alpha: aversion to disadvantageous inequity, learnable, range [0,5]\n- split_self: from data\n- token_self: from data\n- fair_share: calculated as 3*token_self\n\nThe target variable is 'accept'.\n\nThis model uses only the necessary variables, focuses on responder behavior, and has two learnable parameters with clear interpretations. The bounds are generous but finite, aiding parameter recovery.\n</think>\n\n<MODEL>\nU = gamma * split_self - alpha * max(0, 3*token_self - split_self)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"gamma\": {\n      \"description\": \"Marginal utility of money (self-interest sensitivity)\",\n      \"range\": {\n        \"min\": 0.001,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha\": {\n      \"description\": \"Disadvantageous inequity aversion coefficient\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in \u00a3\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's token count\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA dual-component utility model combining linear monetary gain and disadvantageous inequity aversion. Compares proposed share to contribution-based fair share (3\u00d7token_self). Uses two psychologically interpretable parameters: \u03b3 captures self-interest strength, \u03b1 quantifies rejection of offers below contribution value. Logistic choice rule converts utility to acceptance probability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = gamma * split_self - alpha * max(0, 3*token_self - split_self)\nSummary: A dual-component utility model combining linear monetary gain and disadvantageous inequity aversion. Compares proposed share to contribution-based fair share (3\u00d7token_self). Uses two psychologically interpretable parameters: \u03b3 captures self-interest strength, \u03b1 quantifies rejection of offers below contribution value. Logistic choice rule converts utility to acceptance probability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, gamma=1.0, alpha=1.0):\n    \"\"\"\n    Simulates the utility of accepting an offer based on the provided model.\n\n    Args:\n        trial_data (list of dict): A list of dictionaries, where each dictionary\n                                  represents a trial and contains the following keys:\n                                  - split_self (float): The proposed share for the participant.\n                                  - token_self (int): The participant's token count.\n        gamma (float): Marginal utility of money (self-interest sensitivity).\n        alpha (float): Disadvantageous inequity aversion coefficient.\n\n    Returns:\n        list of float: A list of model predictions (utilities) for each trial.\n    \"\"\"\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0.0)\n        token_self = trial.get(\"token_self\", 0)\n\n        # Calculate utility\n        utility = gamma * split_self - alpha * max(0, 3 * token_self - split_self)\n        model_predictions.append(utility)\n\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7838827838827839,
  "fitting_results": [
    {
      "gamma": 0.001,
      "alpha": 1.905893155682861,
      "success": true,
      "log_likelihood": -7.931564951945147,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.589926247819431,
      "alpha": 0.8820927805374552,
      "success": true,
      "log_likelihood": -16.281262682883114,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.2499279578916693,
      "alpha": 1.7944584222312903,
      "success": true,
      "log_likelihood": -10.046565395876211,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.709077314433934,
      "alpha": 1.2306255493534555,
      "success": true,
      "log_likelihood": -13.653156181725938,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.0143633579211948,
      "alpha": 1.9344818991734793,
      "success": true,
      "log_likelihood": -9.848024472877494,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.2098138120152837,
      "alpha": 1.2701513777189974,
      "success": true,
      "log_likelihood": -11.042332344767635,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 5.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228865,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.2084467800531793,
      "alpha": 1.220861488032114,
      "success": true,
      "log_likelihood": -11.096668638702011,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 5.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -0.0064721874752288674,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.7720894888366356,
      "alpha": 1.6379122293979196,
      "success": true,
      "log_likelihood": -11.166531339982072,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.9465762564625484,
      "alpha": 5.0,
      "success": true,
      "log_likelihood": -2.2405174095475404,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.07083048202277359,
      "alpha": 1.706026470542693,
      "success": true,
      "log_likelihood": -9.090310470112193,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.1176767434348824,
      "alpha": 2.208412987768042,
      "success": true,
      "log_likelihood": -8.816156965073633,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 5.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228864,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 5.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228864,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 5.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228867,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 5.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228865,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 4.388208095984745,
      "alpha": 2.1036531410206396,
      "success": true,
      "log_likelihood": -2.74617147709452,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.7858530168048554,
      "alpha": 0.7612580772375237,
      "success": true,
      "log_likelihood": -6.650035489800922,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 5.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228866,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.6998764416602519,
      "alpha": 0.9650169351374788,
      "success": true,
      "log_likelihood": -15.240283487100957,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.5732659122888617,
      "alpha": 0.7540457571869159,
      "success": true,
      "log_likelihood": -7.939517180053124,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.34016763438723624,
      "alpha": 0.7095146456558737,
      "success": true,
      "log_likelihood": -18.32423207027672,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.5961090996058467,
      "alpha": 0.7557213334941896,
      "success": true,
      "log_likelihood": -16.99121846569565,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.6848261074688933,
      "alpha": 1.1913980647218074,
      "success": true,
      "log_likelihood": -13.939297530001115,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.7853758377621605,
      "alpha": 0.8955016135502192,
      "success": true,
      "log_likelihood": -14.894718696247887,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.0935060516223742,
      "alpha": 1.368813765283416,
      "success": true,
      "log_likelihood": -11.622843834134212,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.4477492992998948,
      "alpha": 5.0,
      "success": true,
      "log_likelihood": -3.93866518874655,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.1910249273020506,
      "alpha": 0.43122820490184144,
      "success": true,
      "log_likelihood": -9.361863495537133,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.6843234508989774,
      "alpha": 0.38585853243758744,
      "success": true,
      "log_likelihood": -15.902796867866375,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 5.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228866,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.001,
      "alpha": 1.905896036053577,
      "success": true,
      "log_likelihood": -7.93156495195218,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.2651502807639214,
      "alpha": 0.46929036946843744,
      "success": true,
      "log_likelihood": -21.058375178685502,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.4929947924191417,
      "alpha": 1.009931130495346,
      "success": true,
      "log_likelihood": -15.412194969715665,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 5.0,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -0.006472187475228865,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.953695779713037,
      "alpha": 0.7933637064751928,
      "success": true,
      "log_likelihood": -13.36377464308635,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 2.079252857195925,
      "alpha": 1.8443853904173022,
      "success": true,
      "log_likelihood": -7.009324202417428,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.70912025489744,
      "alpha": 1.1391348203414693,
      "success": true,
      "log_likelihood": -14.225669128126398,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.5912190802223486,
      "alpha": 0.5433903455280489,
      "success": true,
      "log_likelihood": -17.719069088663094,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.952117487306911,
      "alpha": 0.159838192502945,
      "success": true,
      "log_likelihood": -9.541669266218527,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.5638850680190972,
      "alpha": 0.6531466595490641,
      "success": true,
      "log_likelihood": -17.746254323592463,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.22427707539560965,
      "alpha": 1.241056725492297,
      "success": true,
      "log_likelihood": -12.42617940645559,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.9348738697234729,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -7.745036530296309,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.6779459096757127,
      "alpha": 0.7962608279110011,
      "success": true,
      "log_likelihood": -16.139319574860785,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.949564472678477,
      "alpha": 1.0165845283093313,
      "success": true,
      "log_likelihood": -13.2575532808942,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.6980998159679108,
      "alpha": 0.3979400155686179,
      "success": true,
      "log_likelihood": -15.740340539695849,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.6998733180634578,
      "alpha": 0.965025325958383,
      "success": true,
      "log_likelihood": -15.240283488237074,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.32431455488339667,
      "alpha": 0.6492988691168977,
      "success": true,
      "log_likelihood": -18.995917545495914,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.7185361630905275,
      "alpha": 1.6099241133333324,
      "success": true,
      "log_likelihood": -11.269891204949836,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1936247193324116,
      "alpha": 0.17282115017108055,
      "success": true,
      "log_likelihood": -23.589996984357743,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.6091808820937604,
      "alpha": 0.4264674705363225,
      "success": true,
      "log_likelihood": -17.337692821014553,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.001,
      "alpha": 0.8959062947894562,
      "success": true,
      "log_likelihood": -13.306871256431176,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.47689512283490343,
      "alpha": 0.5442925552072033,
      "success": true,
      "log_likelihood": -19.084444854118765,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.327691509462289,
      "alpha": 0.22948255709158336,
      "success": true,
      "log_likelihood": -21.649576330736856,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.22317045827785104,
      "alpha": 0.6166281864309429,
      "success": true,
      "log_likelihood": -19.145851304340532,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.9044004989297239,
      "alpha": 4.727739825855119,
      "success": true,
      "log_likelihood": -4.334577663556635,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.5016609155796027,
      "alpha": 1.7106977721073289,
      "success": true,
      "log_likelihood": -10.386539880549247,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.5688318208769756,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -13.680488206467722,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.03734158440578204,
      "alpha": 1.4678571708482537,
      "success": true,
      "log_likelihood": -9.825736629779389,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.7156621785362608,
      "alpha": 0.232311763806,
      "success": true,
      "log_likelihood": -14.062138468517489,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.45015426404296355,
      "alpha": 0.43464963827220476,
      "success": true,
      "log_likelihood": -19.766504713144386,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.6652938138472138,
      "alpha": 1.0719318447317234,
      "success": true,
      "log_likelihood": -14.763159511588839,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.001,
      "alpha": 1.9058939972248754,
      "success": true,
      "log_likelihood": -7.931564951945935,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.3153579099061178,
      "alpha": 0.48856718730482895,
      "success": true,
      "log_likelihood": -20.702526780263867,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.34828742080754077,
      "alpha": 1.5200629514017487,
      "success": true,
      "log_likelihood": -11.083994119331146,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.8156616336498855,
      "alpha": 0.9696824494610548,
      "success": true,
      "log_likelihood": -14.437445105829374,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.1547978156108651,
      "alpha": 0.27069303031206626,
      "success": true,
      "log_likelihood": -8.407405638166068,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.9350301923203603,
      "alpha": 0.353488432733772,
      "success": true,
      "log_likelihood": -11.779558638993853,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.7077283425981976,
      "alpha": 0.7352198651629926,
      "success": true,
      "log_likelihood": -16.02928880651522,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.6780235916952995,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -11.540124489367077,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.2992278765155702,
      "alpha": 5.0,
      "success": true,
      "log_likelihood": -1.9338074776613106,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.018620011602452694,
      "alpha": 0.9997204141703624,
      "success": true,
      "log_likelihood": -12.598482049272988,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.6853119179418857,
      "alpha": 0.9085738239884718,
      "success": true,
      "log_likelihood": -15.60614830602765,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.7014303210281765,
      "alpha": 0.2832491440184275,
      "success": true,
      "log_likelihood": -14.83372668307812,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.2303053957762347,
      "alpha": 0.31097072047912033,
      "success": true,
      "log_likelihood": -22.66357189447281,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.9436792320972585,
      "alpha": 0.8567853412861965,
      "success": true,
      "log_likelihood": -13.469173044819774,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.03969504633971,
      "alpha": 0.1021888750545054,
      "success": true,
      "log_likelihood": -7.802173684501909,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.001,
      "alpha": 1.7287489426449283,
      "success": true,
      "log_likelihood": -8.483368988889161,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.2658147296920049,
      "alpha": 0.13349925957166592,
      "success": true,
      "log_likelihood": -22.370656052666995,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.001,
      "alpha": 1.9058955846936108,
      "success": true,
      "log_likelihood": -7.931564951950268,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.2342280934136043,
      "alpha": 0.283115092281888,
      "success": true,
      "log_likelihood": -22.809114635743416,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.666946472081262,
      "alpha": 0.0,
      "success": true,
      "log_likelihood": -11.741860654220291,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.001,
      "alpha": 1.3467358118227177,
      "success": true,
      "log_likelihood": -10.064119302597684,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.2528643692769053,
      "alpha": 1.6313139921100228,
      "success": true,
      "log_likelihood": -10.339432461628968,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.16979807866198723,
      "alpha": 0.09922711977031103,
      "success": true,
      "log_likelihood": -23.819155639730305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.08301960091673423,
      "alpha": 2.157076640208449,
      "success": true,
      "log_likelihood": -7.785436408295736,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.5727312406490654,
      "alpha": 0.44277198527397116,
      "success": true,
      "log_likelihood": -17.959641902198335,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.1582566802119181,
      "alpha": 1.0789198248762397,
      "success": true,
      "log_likelihood": -13.317159678563737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 1.5512449190385502,
      "alpha": 0.33779818496447545,
      "success": true,
      "log_likelihood": -5.817840692294694,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.772961178055792,
      "alpha": 0.9893996673365709,
      "success": true,
      "log_likelihood": -14.67936824904907,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "gamma": 0.3534814625657653,
      "alpha": 0.16635472939004295,
      "success": true,
      "log_likelihood": -20.833123314036367,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "gamma": {
        "r": 0.8281642582082507,
        "p": 2.210254668230469e-26
      },
      "alpha": {
        "r": 0.81129872102174,
        "p": 1.4069943063801907e-24
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 30.75714369830527,
  "bic_results": {
    "average_bic": 30.75714369830527,
    "individual_bics": [
      23.030167780802515,
      39.729563242678445,
      27.26016866866464,
      34.4733502403641,
      26.863086822667206,
      29.25170256644749,
      7.179982251862677,
      29.360375154316245,
      7.179982251862677,
      29.50010055687636,
      11.6480726960073,
      25.347658817136605,
      24.799351807059487,
      7.179982251862677,
      7.179982251862677,
      7.179982251862677,
      7.179982251862677,
      12.65938083110126,
      20.467108856514066,
      7.179982251862677,
      37.64760485111413,
      23.046072237018468,
      43.81550201746566,
      41.149474808303516,
      35.04563293691445,
      36.956475269407996,
      30.412725545180642,
      15.04436825440532,
      25.890764867986483,
      38.97263161264497,
      7.179982251862677,
      23.03016778081658,
      49.28378823428322,
      37.99142781634355,
      7.179982251862677,
      33.89458716308492,
      21.185686281747074,
      35.618376133165015,
      42.605176054238406,
      26.250376409349272,
      42.659546524097145,
      32.0193966898234,
      22.65711093750484,
      39.44567702663379,
      33.68214443870062,
      38.64771895630392,
      37.64760485338637,
      45.158872967904045,
      29.70682028681189,
      54.347031845627704,
      41.842423518941324,
      33.78078038977457,
      45.33592758514975,
      50.46619053838593,
      45.45874048559328,
      15.83619320402549,
      27.94011763801071,
      34.52801428984766,
      26.818511136470995,
      35.291314813947196,
      46.70004730320099,
      36.693356900089896,
      23.030167780804092,
      48.57209143743995,
      29.335026115574514,
      36.04192808857097,
      23.981849153244355,
      30.726155154899928,
      39.225615489942655,
      30.247286855646372,
      11.03465283223484,
      32.364001975458194,
      38.37933448896752,
      36.83449124306846,
      52.49418166585784,
      34.10538396655177,
      22.771385245916036,
      24.13377585469054,
      51.90834998224621,
      23.030167780812754,
      52.78526714839905,
      30.650759185352804,
      27.29527648210759,
      27.84590280017016,
      54.80534915637283,
      22.737910693503693,
      43.08632168130889,
      33.80135723403969,
      18.802719261501608,
      36.52577437501036,
      48.83328450498495
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- gamma: r = 0.828\n- alpha: r = 0.811",
  "previous_models": [
    "Specification: U = gamma * split_self - alpha * max(0, 3*token_self - split_self)\nSummary: A dual-component utility model combining linear monetary gain and disadvantageous inequity aversion. Compares proposed share to contribution-based fair share (3\u00d7token_self). Uses two psychologically interpretable parameters: \u03b3 captures self-interest strength, \u03b1 quantifies rejection of offers below contribution value. Logistic choice rule converts utility to acceptance probability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 30.75714369830527\nOverall Accuracy: 0.7839\n\nParameter Recovery:\n- gamma: r = 0.828\n- alpha: r = 0.811"
  ]
}