{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\n\nOkay, let's analyze the previous run's results. The BIC was 104.72, which is higher than the first model's 42.73, indicating worse fit. The accuracy dropped to ~58.7%, which is quite low. Parameter recovery for theta_plus was almost nonexistent (r=0.008), and theta_minus was moderate (r=0.517). Clearly, the model structure from the second run isn't working well.\n\nThe main issue seems to be parameter recovery, especially for theta_plus. The low recovery suggests that the model might have identifiability issues or high covariance between parameters. The previous instructions suggested reparameterization and alternative reference points, but the implemented model didn't perform well. \n\nLooking at the model specification from the second run: \"U = split_self + theta_plus * max(D, 0) + theta_minus * min(D, 0) where D = split_self - 3*token_self\". Maybe the way D is calculated is problematic. If participants don't perceive fairness based solely on their own contribution, the model's reference point is incorrect. Alternatively, the linear terms might not capture the actual decision-making process, leading to poor parameter estimation.\n\nThe previous instructions already suggested exploring non-linear effects and alternative reference points. The new model needs to address these points more effectively. Let's think about possible improvements:\n\n1. **Non-linear transformations**: Instead of linear terms for D, use logarithmic or quadratic terms to capture diminishing or increasing sensitivity. For example, log(1 + D) for advantageous inequity and -log(1 - D) for disadvantageous. This could better model how people perceive large deviations.\n\n2. **Hybrid fairness reference**: Combine contribution-based and equal-split fairness. For example, calculate D as split_self - (alpha * 3*token_self + (1-alpha) * combined_earning/2), where alpha is a learnable parameter. This allows the model to adaptively weight different fairness norms.\n\n3. **Reparameterization**: To reduce covariance between theta_plus and theta_minus, express them in terms of a base sensitivity and asymmetry ratio. For example, theta_plus = base * (1 + asymmetry), theta_minus = base * (1 - asymmetry). This ensures that the parameters are orthogonal, improving recovery.\n\n4. **Intercept term**: Add a baseline utility parameter (beta_0) to account for general acceptance tendency regardless of splits. This could capture any systematic bias towards accepting or rejecting offers.\n\n5. **Trial-type interaction**: Use trial_type (1=equal, 2=opponent more, 3=participant more) to modulate theta_plus and theta_minus. For example, theta_plus could be higher in trials where the participant contributed more, reflecting heightened sensitivity to advantageous inequity in such contexts.\n\nHowever, adding too many parameters might increase BIC. The challenge is to introduce these elements without exceeding 3 learnable parameters. For example, a hybrid fairness model with alpha (fairness weight) and base sensitivity could be paired with an asymmetry parameter, totaling 3 parameters. Alternatively, a non-linear model with a single curvature parameter for both advantageous and disadvantageous terms.\n\nAnother angle: the poor recovery of theta_plus might indicate that advantageous inequity has little effect on decisions. Perhaps theta_plus should be constrained to zero, simplifying the model to only consider disadvantageous inequity. But this might reduce accuracy if advantageous inequity does play a role.\n\nAlternatively, the model could use a single theta parameter that applies to both types of inequity but with different signs. For example, U = split_self + theta * (max(D,0) - gamma * min(D,0)), where gamma is a fixed multiplier (e.g., 2) to account for stronger aversion to disadvantage. This reduces parameters to theta and gamma, but gamma could be fixed based on prior knowledge.\n\nConsidering all this, the new instructions should push for innovative model structures that address the identifiability issues, incorporate non-linear or hybrid fairness, and possibly introduce strategic baselines or reparameterization. Emphasize testing these ideas while keeping parameters \u22643 and ensuring they can be reliably recovered.\n</think>\n\n**Final Instructions for Run 3/3:**  \nRadically reconceptualize fairness perception dynamics using these strategies:  \n\n1. **Dynamic Reference Points**  \n   - Model fairness expectations as `\u03b1*(3\u00d7token_self) + (1-\u03b1)*(combined_earning/2)` where \u03b1 \u2208 [0,1] learns contribution-vs-equality weighting  \n   - Add curvature parameter \u03b2 to control diminishing returns: `sign(D)*ln(1+|D/\u03b2|)` for both inequity types  \n\n2. **Contextualized Sensitivity**  \n   - Let trial_type modulate theta weights:  \n     `theta_plus_effective = theta_plus * (1 + \u03b3*I_{trial_type=3})`  \n     `theta_minus_effective = theta_minus * (1 + \u03b4*I_{trial_type=2})`  \n   - Where \u03b3/\u03b4 control sensitivity amplification when participant/opponent contributed more  \n\n3. **Neuroeconomic Priors**  \n   - Constrain theta_minus \u2264 -0.5|theta_plus| to enforce loss aversion principle  \n   - Initialize beta_0 (intercept) near logit(observed acceptance rate)  \n\nKeep \u22643 learnable parameters through smart coupling (e.g., make \u03b3=\u03b4 if needed). Prioritize models where simulation shows all parameters recover with r > 0.92 simultaneously. Include explicit identifiability checks through Hessian analysis in your model justification.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\n\nOkay, let's analyze the previous run's results. The BIC was 104.72, which is higher than the first model's 42.73, indicating worse fit. The accuracy dropped to ~58.7%, which is quite low. Parameter recovery for theta_plus was almost nonexistent (r=0.008), and theta_minus was moderate (r=0.517). Clearly, the model structure from the second run isn't working well.\n\nThe main issue seems to be parameter recovery, especially for theta_plus. The low recovery suggests that the model might have identifiability issues or high covariance between parameters. The previous instructions suggested reparameterization and alternative reference points, but the implemented model didn't perform well. \n\nLooking at the model specification from the second run: \"U = split_self + theta_plus * max(D, 0) + theta_minus * min(D, 0) where D = split_self - 3*token_self\". Maybe the way D is calculated is problematic. If participants don't perceive fairness based solely on their own contribution, the model's reference point is incorrect. Alternatively, the linear terms might not capture the actual decision-making process, leading to poor parameter estimation.\n\nThe previous instructions already suggested exploring non-linear effects and alternative reference points. The new model needs to address these points more effectively. Let's think about possible improvements:\n\n1. **Non-linear transformations**: Instead of linear terms for D, use logarithmic or quadratic terms to capture diminishing or increasing sensitivity. For example, log(1 + D) for advantageous inequity and -log(1 - D) for disadvantageous. This could better model how people perceive large deviations.\n\n2. **Hybrid fairness reference**: Combine contribution-based and equal-split fairness. For example, calculate D as split_self - (alpha * 3*token_self + (1-alpha) * combined_earning/2), where alpha is a learnable parameter. This allows the model to adaptively weight different fairness norms.\n\n3. **Reparameterization**: To reduce covariance between theta_plus and theta_minus, express them in terms of a base sensitivity and asymmetry ratio. For example, theta_plus = base * (1 + asymmetry), theta_minus = base * (1 - asymmetry). This ensures that the parameters are orthogonal, improving recovery.\n\n4. **Intercept term**: Add a baseline utility parameter (beta_0) to account for general acceptance tendency regardless of splits. This could capture any systematic bias towards accepting or rejecting offers.\n\n5. **Trial-type interaction**: Use trial_type (1=equal, 2=opponent more, 3=participant more) to modulate theta_plus and theta_minus. For example, theta_plus could be higher in trials where the participant contributed more, reflecting heightened sensitivity to advantageous inequity in such contexts.\n\nHowever, adding too many parameters might increase BIC. The challenge is to introduce these elements without exceeding 3 learnable parameters. For example, a hybrid fairness model with alpha (fairness weight) and base sensitivity could be paired with an asymmetry parameter, totaling 3 parameters. Alternatively, a non-linear model with a single curvature parameter for both advantageous and disadvantageous terms.\n\nAnother angle: the poor recovery of theta_plus might indicate that advantageous inequity has little effect on decisions. Perhaps theta_plus should be constrained to zero, simplifying the model to only consider disadvantageous inequity. But this might reduce accuracy if advantageous inequity does play a role.\n\nAlternatively, the model could use a single theta parameter that applies to both types of inequity but with different signs. For example, U = split_self + theta * (max(D,0) - gamma * min(D,0)), where gamma is a fixed multiplier (e.g., 2) to account for stronger aversion to disadvantage. This reduces parameters to theta and gamma, but gamma could be fixed based on prior knowledge.\n\nConsidering all this, the new instructions should push for innovative model structures that address the identifiability issues, incorporate non-linear or hybrid fairness, and possibly introduce strategic baselines or reparameterization. Emphasize testing these ideas while keeping parameters \u22643 and ensuring they can be reliably recovered.\n</think>\n\n**Final Instructions for Run 3/3:**  \nRadically reconceptualize fairness perception dynamics using these strategies:  \n\n1. **Dynamic Reference Points**  \n   - Model fairness expectations as `\u03b1*(3\u00d7token_self) + (1-\u03b1)*(combined_earning/2)` where \u03b1 \u2208 [0,1] learns contribution-vs-equality weighting  \n   - Add curvature parameter \u03b2 to control diminishing returns: `sign(D)*ln(1+|D/\u03b2|)` for both inequity types  \n\n2. **Contextualized Sensitivity**  \n   - Let trial_type modulate theta weights:  \n     `theta_plus_effective = theta_plus * (1 + \u03b3*I_{trial_type=3})`  \n     `theta_minus_effective = theta_minus * (1 + \u03b4*I_{trial_type=2})`  \n   - Where \u03b3/\u03b4 control sensitivity amplification when participant/opponent contributed more  \n\n3. **Neuroeconomic Priors**  \n   - Constrain theta_minus \u2264 -0.5|theta_plus| to enforce loss aversion principle  \n   - Initialize beta_0 (intercept) near logit(observed acceptance rate)  \n\nKeep \u22643 learnable parameters through smart coupling (e.g., make \u03b3=\u03b4 if needed). Prioritize models where simulation shows all parameters recover with r > 0.92 simultaneously. Include explicit identifiability checks through Hessian analysis in your model justification.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<think>\nOkay, let's tackle this step by step. The goal is to design a computational model that predicts whether a participant (as the responder) accepts or rejects a proposal. The model needs to focus on responder behavior, use the given variables appropriately, and ensure parameter recovery is feasible.\n\nFirst, I need to identify which variables are relevant for the responder's decision. The target variable is \"accept\", which is binary (0 or 1). The key factors influencing this decision likely involve fairness considerations based on the participant's and opponent's contributions (token_self and token_opp) and the proposed splits (split_self and split_opp). \n\nThe challenge is to model the utility of accepting the proposal, which should be a function that captures fairness, self-interest, and possibly other factors. Since the model needs to predict a binary choice, the utility will be converted into a probability via a logistic function.\n\nLet's consider an inequity aversion model, where participants dislike unequal outcomes. This is a common approach in behavioral economics. The utility could depend on the difference between the participant's share and what they consider a fair share. \n\nThe fair share might be based on their contribution. Each token is worth \u00a33, so the participant's contribution is 3*token_self, and the opponent's is 3*token_opp. The combined_earning is the sum, which is 3*(token_self + token_opp). A fair split could be proportional to contributions. Alternatively, some participants might expect an equal split (combined_earning / 2), regardless of contributions.\n\nTo capture this, the model could calculate the difference between the proposed split (split_self) and the fair reference point. Let's define two possible reference points: contribution-based (3*token_self) and equal split (combined_earning / 2). However, using both might complicate the model. Alternatively, we can let the model learn a parameter that weights between these two references.\n\nBut to keep the model simple and ensure parameter recovery, maybe focus on one reference. Given the task description mentions that equal split variables don't represent the same fairness due to varying combined earnings, perhaps the contribution-based reference is more appropriate. \n\nSo, the utility could be based on the difference between the proposed split_self and the participant's contribution (3*token_self). Let's call this difference D = split_self - 3*token_self. If D is positive, the participant is getting more than their contribution; if negative, less. \n\nInequity aversion models often have separate parameters for advantageous and disadvantageous inequity. So, the utility might be:\n\nUtility = split_self + theta_plus * max(D, 0) + theta_minus * min(D, 0)\n\nHere, theta_plus and theta_minus are parameters capturing sensitivity to advantageous and disadvantageous inequity, respectively. If theta_minus is negative, getting less than your contribution reduces utility, making rejection more likely. Theta_plus could be positive or negative, depending on whether getting more than your contribution is valued or seen as unfair.\n\nThe probability of accepting is then a logistic function of the utility: P(accept) = 1 / (1 + exp(-Utility)).\n\nThis model uses split_self, token_self, and has two learnable parameters (theta_plus, theta_minus). Theta_plus and theta_minus need bounds. Theta_minus is likely negative, as getting less than your contribution should decrease utility. Theta_plus could be positive (valuing surplus) or negative (aversion to overcompensation). But to keep bounds finite, maybe set theta_plus between -5 and 5, and theta_minus between -5 and 0.\n\nWait, the problem states that the utility variable may be unbounded, but parameters must have finite bounds. So theta_plus and theta_minus need reasonable ranges. Theta_minus (disadvantageous inequity) should be negative, as getting less than your contribution is bad. Theta_plus could be positive (if getting more is good) or negative (if people dislike advantageous inequity). But in many models, people are averse to both types, so both parameters would be negative. However, in this case, split_self is part of the utility, so if theta_plus is positive, it would mean that getting more than your contribution increases utility beyond the monetary value. Alternatively, if theta_plus is negative, it means that even advantageous inequity reduces utility (altruistic preference). Hmm, this needs careful consideration.\n\nAlternatively, perhaps the utility function should be:\n\nUtility = split_self + theta_plus * (split_self - split_opp) if split_self > split_opp,\n\nUtility = split_self + theta_minus * (split_self - split_opp) if split_self <= split_opp.\n\nBut this complicates the model, as it requires comparing split_self and split_opp. However, the trial_type variable indicates whether the split is equal, opponent more, or participant more. But trial_type is categorical, and including it might require dummy variables, complicating the model.\n\nAlternatively, stick with the contribution-based reference. Let's proceed with the initial idea:\n\nUtility = split_self + theta_plus * max(D, 0) + theta_minus * min(D, 0),\n\nwhere D = split_self - 3*token_self.\n\nThis way, when D is positive (participant gets more than their contribution), theta_plus modulates that. If theta_plus is negative, it means they dislike getting more than their contribution (inequity aversion). If theta_plus is positive, they like it. Similarly, theta_minus (negative) would mean they dislike getting less.\n\nThe parameters theta_plus and theta_minus need bounds. Let's set theta_plus in [-5, 5] and theta_minus in [-5, 0]. These are generous but finite.\n\nAnother consideration: the model should predict utility such that less than 0 corresponds to less than 50% chance of accepting. The logistic function converts Utility to a probability, so when Utility < 0, P(accept) < 0.5. That aligns with the requirement.\n\nNow, variables:\n\n- split_self: from data, in \u00a3.\n- token_self: from data, number of tokens.\n- D: calculated as split_self - 3*token_self.\n- theta_plus: learnable parameter, range [-5,5].\n- theta_minus: learnable parameter, range [-5,0].\n\nThe model's utility is a linear combination of these terms. The probability of acceptance is logistic(Utility).\n\nThis model uses only variables present in the dataset (split_self, token_self) and has two learnable parameters with finite bounds. It should be applicable to the dataset and predict responder behavior.\n\nNow, formalizing this:\n\n<MODEL>\nU = split_self + theta_plus * max(D, 0) + theta_minus * min(D, 0) where D = split_self - 3 * token_self\n</MODEL>\n\nVariables:\n\n- U: utility, calculated.\n- split_self: from data.\n- token_self: from data.\n- theta_plus: learnable, [-5,5].\n- theta_minus: learnable, [-5,0].\n- D: calculated.\n\nThe target variable is \"accept\".\n\nNow, variable descriptions in JSON:\n\nFor each variable in the model:\n\n- U: utility, calculated, no bounds.\n- split_self: data variable, source data.\n- token_self: data variable, source data.\n- theta_plus: learnable, min -5, max 5, inclusive.\n- theta_minus: learnable, min -5, max 0, inclusive.\n- D: calculated as split_self - 3*token_self.\n\nThe JSON should reflect this.\n\nSummary: The model assumes participants evaluate offers based on their monetary value and deviations from their contribution-based fair share, with separate sensitivities to advantageous and disadvantageous inequity.\n</think>\n\n<MODEL>\nU = split_self + theta_plus * max(D, 0) + theta_minus * min(D, 0) where D = split_self - 3 * token_self\n</MODEL>\n\n<target_variable>accept</target_variable>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"theta_plus\": {\n      \"description\": \"Sensitivity to advantageous inequity (receiving more than contribution)\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"theta_minus\": {\n      \"description\": \"Sensitivity to disadvantageous inequity (receiving less than contribution)\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in pounds\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"D\": {\n      \"description\": \"Difference between proposed share and contribution-based fair share (3 * token_self)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA dual-parameter inequity aversion model where utility depends on monetary payoff and deviations from contribution-based fairness. Participants evaluate offers relative to their earned entitlement (3\u00d7token_self), with separate learnable parameters (theta_plus/theta_minus) scaling reactions to advantageous/disadvantageous inequity. Logistic transformation of utility predicts acceptance probability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['theta_plus', 'theta_minus']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = split_self + theta_plus * max(D, 0) + theta_minus * min(D, 0) where D = split_self - 3 * token_self\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"theta_plus\": {\n      \"description\": \"Sensitivity to advantageous inequity (receiving more than contribution)\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"theta_minus\": {\n      \"description\": \"Sensitivity to disadvantageous inequity (receiving less than contribution)\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in pounds\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"D\": {\n      \"description\": \"Difference between proposed share and contribution-based fair share (3 * token_self)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, theta_plus=0, theta_minus=-1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        D = split_self - 3 * token_self\n        utility = split_self + theta_plus * max(D, 0) + theta_minus * min(D, 0)\n        model_predictions.append(utility)\n    return model_predictions\n```",
      "timestamp": 1744031710.2307498
    }
  ],
  "learnable_parameters": {
    "theta_plus": {
      "description": "Sensitivity to advantageous inequity (receiving more than contribution)",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "theta_minus": {
      "description": "Sensitivity to disadvantageous inequity (receiving less than contribution)",
      "range": {
        "min": -5,
        "max": 0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = split_self + theta_plus * max(D, 0) + theta_minus * min(D, 0) where D = split_self - 3 * token_self",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the proposal",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "theta_plus": {
      "description": "Sensitivity to advantageous inequity (receiving more than contribution)",
      "range": {
        "min": -5,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "theta_minus": {
      "description": "Sensitivity to disadvantageous inequity (receiving less than contribution)",
      "range": {
        "min": -5,
        "max": 0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "Proposed share for participant in pounds",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by participant",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "D": {
      "description": "Difference between proposed share and contribution-based fair share (3 * token_self)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A dual-parameter inequity aversion model where utility depends on monetary payoff and deviations from contribution-based fairness. Participants evaluate offers relative to their earned entitlement (3\u00d7token_self), with separate learnable parameters (theta_plus/theta_minus) scaling reactions to advantageous/disadvantageous inequity. Logistic transformation of utility predicts acceptance probability.",
  "target_variable": "accept",
  "full_reasoning": "<think>\nOkay, let's tackle this step by step. The goal is to design a computational model that predicts whether a participant (as the responder) accepts or rejects a proposal. The model needs to focus on responder behavior, use the given variables appropriately, and ensure parameter recovery is feasible.\n\nFirst, I need to identify which variables are relevant for the responder's decision. The target variable is \"accept\", which is binary (0 or 1). The key factors influencing this decision likely involve fairness considerations based on the participant's and opponent's contributions (token_self and token_opp) and the proposed splits (split_self and split_opp). \n\nThe challenge is to model the utility of accepting the proposal, which should be a function that captures fairness, self-interest, and possibly other factors. Since the model needs to predict a binary choice, the utility will be converted into a probability via a logistic function.\n\nLet's consider an inequity aversion model, where participants dislike unequal outcomes. This is a common approach in behavioral economics. The utility could depend on the difference between the participant's share and what they consider a fair share. \n\nThe fair share might be based on their contribution. Each token is worth \u00a33, so the participant's contribution is 3*token_self, and the opponent's is 3*token_opp. The combined_earning is the sum, which is 3*(token_self + token_opp). A fair split could be proportional to contributions. Alternatively, some participants might expect an equal split (combined_earning / 2), regardless of contributions.\n\nTo capture this, the model could calculate the difference between the proposed split (split_self) and the fair reference point. Let's define two possible reference points: contribution-based (3*token_self) and equal split (combined_earning / 2). However, using both might complicate the model. Alternatively, we can let the model learn a parameter that weights between these two references.\n\nBut to keep the model simple and ensure parameter recovery, maybe focus on one reference. Given the task description mentions that equal split variables don't represent the same fairness due to varying combined earnings, perhaps the contribution-based reference is more appropriate. \n\nSo, the utility could be based on the difference between the proposed split_self and the participant's contribution (3*token_self). Let's call this difference D = split_self - 3*token_self. If D is positive, the participant is getting more than their contribution; if negative, less. \n\nInequity aversion models often have separate parameters for advantageous and disadvantageous inequity. So, the utility might be:\n\nUtility = split_self + theta_plus * max(D, 0) + theta_minus * min(D, 0)\n\nHere, theta_plus and theta_minus are parameters capturing sensitivity to advantageous and disadvantageous inequity, respectively. If theta_minus is negative, getting less than your contribution reduces utility, making rejection more likely. Theta_plus could be positive or negative, depending on whether getting more than your contribution is valued or seen as unfair.\n\nThe probability of accepting is then a logistic function of the utility: P(accept) = 1 / (1 + exp(-Utility)).\n\nThis model uses split_self, token_self, and has two learnable parameters (theta_plus, theta_minus). Theta_plus and theta_minus need bounds. Theta_minus is likely negative, as getting less than your contribution should decrease utility. Theta_plus could be positive (valuing surplus) or negative (aversion to overcompensation). But to keep bounds finite, maybe set theta_plus between -5 and 5, and theta_minus between -5 and 0.\n\nWait, the problem states that the utility variable may be unbounded, but parameters must have finite bounds. So theta_plus and theta_minus need reasonable ranges. Theta_minus (disadvantageous inequity) should be negative, as getting less than your contribution is bad. Theta_plus could be positive (if getting more is good) or negative (if people dislike advantageous inequity). But in many models, people are averse to both types, so both parameters would be negative. However, in this case, split_self is part of the utility, so if theta_plus is positive, it would mean that getting more than your contribution increases utility beyond the monetary value. Alternatively, if theta_plus is negative, it means that even advantageous inequity reduces utility (altruistic preference). Hmm, this needs careful consideration.\n\nAlternatively, perhaps the utility function should be:\n\nUtility = split_self + theta_plus * (split_self - split_opp) if split_self > split_opp,\n\nUtility = split_self + theta_minus * (split_self - split_opp) if split_self <= split_opp.\n\nBut this complicates the model, as it requires comparing split_self and split_opp. However, the trial_type variable indicates whether the split is equal, opponent more, or participant more. But trial_type is categorical, and including it might require dummy variables, complicating the model.\n\nAlternatively, stick with the contribution-based reference. Let's proceed with the initial idea:\n\nUtility = split_self + theta_plus * max(D, 0) + theta_minus * min(D, 0),\n\nwhere D = split_self - 3*token_self.\n\nThis way, when D is positive (participant gets more than their contribution), theta_plus modulates that. If theta_plus is negative, it means they dislike getting more than their contribution (inequity aversion). If theta_plus is positive, they like it. Similarly, theta_minus (negative) would mean they dislike getting less.\n\nThe parameters theta_plus and theta_minus need bounds. Let's set theta_plus in [-5, 5] and theta_minus in [-5, 0]. These are generous but finite.\n\nAnother consideration: the model should predict utility such that less than 0 corresponds to less than 50% chance of accepting. The logistic function converts Utility to a probability, so when Utility < 0, P(accept) < 0.5. That aligns with the requirement.\n\nNow, variables:\n\n- split_self: from data, in \u00a3.\n- token_self: from data, number of tokens.\n- D: calculated as split_self - 3*token_self.\n- theta_plus: learnable parameter, range [-5,5].\n- theta_minus: learnable parameter, range [-5,0].\n\nThe model's utility is a linear combination of these terms. The probability of acceptance is logistic(Utility).\n\nThis model uses only variables present in the dataset (split_self, token_self) and has two learnable parameters with finite bounds. It should be applicable to the dataset and predict responder behavior.\n\nNow, formalizing this:\n\n<MODEL>\nU = split_self + theta_plus * max(D, 0) + theta_minus * min(D, 0) where D = split_self - 3 * token_self\n</MODEL>\n\nVariables:\n\n- U: utility, calculated.\n- split_self: from data.\n- token_self: from data.\n- theta_plus: learnable, [-5,5].\n- theta_minus: learnable, [-5,0].\n- D: calculated.\n\nThe target variable is \"accept\".\n\nNow, variable descriptions in JSON:\n\nFor each variable in the model:\n\n- U: utility, calculated, no bounds.\n- split_self: data variable, source data.\n- token_self: data variable, source data.\n- theta_plus: learnable, min -5, max 5, inclusive.\n- theta_minus: learnable, min -5, max 0, inclusive.\n- D: calculated as split_self - 3*token_self.\n\nThe JSON should reflect this.\n\nSummary: The model assumes participants evaluate offers based on their monetary value and deviations from their contribution-based fair share, with separate sensitivities to advantageous and disadvantageous inequity.\n</think>\n\n<MODEL>\nU = split_self + theta_plus * max(D, 0) + theta_minus * min(D, 0) where D = split_self - 3 * token_self\n</MODEL>\n\n<target_variable>accept</target_variable>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposal\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"theta_plus\": {\n      \"description\": \"Sensitivity to advantageous inequity (receiving more than contribution)\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"theta_minus\": {\n      \"description\": \"Sensitivity to disadvantageous inequity (receiving less than contribution)\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"Proposed share for participant in pounds\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"D\": {\n      \"description\": \"Difference between proposed share and contribution-based fair share (3 * token_self)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<SUMMARY>\nA dual-parameter inequity aversion model where utility depends on monetary payoff and deviations from contribution-based fairness. Participants evaluate offers relative to their earned entitlement (3\u00d7token_self), with separate learnable parameters (theta_plus/theta_minus) scaling reactions to advantageous/disadvantageous inequity. Logistic transformation of utility predicts acceptance probability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = split_self + theta_plus * max(D, 0) + theta_minus * min(D, 0) where D = split_self - 3 * token_self\nSummary: A dual-parameter inequity aversion model where utility depends on monetary payoff and deviations from contribution-based fairness. Participants evaluate offers relative to their earned entitlement (3\u00d7token_self), with separate learnable parameters (theta_plus/theta_minus) scaling reactions to advantageous/disadvantageous inequity. Logistic transformation of utility predicts acceptance probability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, theta_plus=0, theta_minus=-1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n\n        D = split_self - 3 * token_self\n        utility = split_self + theta_plus * max(D, 0) + theta_minus * min(D, 0)\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5845543345543346,
  "fitting_results": [
    {
      "theta_plus": -2.598991787938698,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -112.03210097242388,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -55.28373601771345,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -50.483736007169455,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -61.13373601494912,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -65.33373595930604,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -35.93373606721559,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": -5.0,
      "success": true,
      "log_likelihood": -0.04184931522718192,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -34.43373605134944,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": -5.0,
      "success": true,
      "log_likelihood": -0.04184931522718194,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -69.83373599363406,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -59.93373600372375,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": -2.5989899736363244,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -106.78210099148131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -66.98373596061268,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": -5.0,
      "success": true,
      "log_likelihood": -0.04184931522718192,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": -5.0,
      "success": true,
      "log_likelihood": -0.04184931522718194,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": -5.0,
      "success": true,
      "log_likelihood": -0.04184931522718194,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": -5.0,
      "success": true,
      "log_likelihood": -0.041849315227181924,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -9.53373609306516,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -10.583736089543153,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": -5.0,
      "success": true,
      "log_likelihood": -0.0418493152271819,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -51.08373599011272,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -12.983736088224475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -68.33373598102797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -48.83373600715403,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -61.283735960832715,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -42.53373601674306,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -44.1837360442058,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -85.13373593270872,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -11.933736090105164,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -25.43373605756208,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": -5.0,
      "success": true,
      "log_likelihood": -0.041849315227181924,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": -2.5989654271464104,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -112.0321009726219,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -63.533735978489,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -68.03373599670272,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": -5.0,
      "success": true,
      "log_likelihood": -0.041849315227181924,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -29.783736080661672,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -27.233736081008992,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -57.68373599757683,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -38.48373601330532,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -10.133736085094203,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -46.13373601435891,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -93.0837359102259,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": -0.17319973799965513,
      "success": true,
      "log_likelihood": -7.481338771202751,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -44.933736040706364,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -38.48373606188285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -25.283736076365326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -51.08373600297036,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -66.98373601507176,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -71.93373594545416,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": -2.5989860609502933,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -52.03210113737814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -31.43373607172023,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": -2.59888485069199,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -104.3821009957511,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -47.33373601415107,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": -2.599000925642595,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -41.23210117213801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -75.53373593748783,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -76.28373595137103,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -84.68373592550563,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": -0.12180378126615539,
      "success": true,
      "log_likelihood": -15.841280853148893,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": -2.5989401680538133,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -107.23210098532117,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -18.083736071842925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -43.43373602935875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -57.983735972965995,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": -2.5988617881697413,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -112.03210097711334,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -59.33373600144814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -89.7837359510327,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -43.8837360447281,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -9.23373609158642,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -15.233736070047515,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -40.13373606996669,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -12.53373605308483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -107.93373588154019,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": -2.5989889719770187,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -103.63210098823411,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -49.58373604048977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -20.483736082572015,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": -4.3914715240736975,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -53.77205698232456,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -32.633736051937866,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -7.8837360902709,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": -5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -113.81844555560333,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -42.38373604296376,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": -2.5989611819992757,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -112.0321009726896,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.05555555555555555,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -55.583735980077144,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -12.833736070394414,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": -5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -102.86844558445136,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -45.38373606521373,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -50.93373597788941,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -109.43373585019819,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1388888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -34.58373605176261,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": -4.391552910979162,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -90.97205687123498,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -6.533736093201983,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -47.33373606848333,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "theta_plus": 5.0,
      "theta_minus": 0.0,
      "success": true,
      "log_likelihood": -36.08373604705858,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "theta_plus": {
        "r": 0.762847768593358,
        "p": 2.887842450567111e-20
      },
      "theta_minus": {
        "r": 0.43761506011662615,
        "p": 5.2908206432831045e-06
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 104.24567207465613,
  "bic_results": {
    "average_bic": 104.24567207465613,
    "individual_bics": [
      231.23123982175997,
      117.73450991233912,
      108.13450989125113,
      129.43450990681046,
      137.8345097955243,
      79.0345100113434,
      7.250736507366583,
      76.0345099796111,
      7.250736507366584,
      146.83450986418035,
      127.03450988435972,
      220.73123985987485,
      141.13450979813757,
      7.250736507366583,
      7.250736507366584,
      7.250736507366584,
      7.250736507366583,
      26.234510063042542,
      28.33451005599853,
      7.250736507366583,
      109.33450985713766,
      33.13451005336117,
      143.83450983896816,
      104.83450989122028,
      129.73450979857765,
      92.23450991039834,
      95.53450996532382,
      177.43450974232965,
      31.034510057122546,
      58.03450999203638,
      7.250736507366583,
      231.23123982215603,
      134.23450983389023,
      143.23450987031765,
      7.250736507366583,
      66.73451003823557,
      61.6345100389302,
      122.53450987206588,
      84.13450990352285,
      27.434510047100623,
      99.43450990563004,
      193.334509697364,
      22.12971541931772,
      97.03450995832495,
      84.13451000067792,
      57.73451002964287,
      109.33450988285294,
      141.13450990705573,
      151.03450976782054,
      111.2312401516685,
      70.03451002035268,
      215.93123986841442,
      101.83450990521436,
      89.63124022118824,
      158.23450975188788,
      159.73450977965427,
      176.53450972792348,
      38.84959958321001,
      221.63123984755455,
      43.33451002059807,
      94.03450993562971,
      123.13450982284421,
      231.2312398311389,
      125.8345098798085,
      186.7345097789776,
      94.93450996636842,
      25.634510060085063,
      37.63451001700725,
      87.43451001684559,
      32.23450998308188,
      223.0345096399926,
      214.43123985338045,
      106.33450995789175,
      48.13451004205625,
      114.71115184156133,
      72.43450998078795,
      22.93451005745402,
      234.80392898811888,
      91.93450996283974,
      231.23123982229143,
      118.3345098370665,
      32.83451001770105,
      212.90392904581495,
      97.93451000733968,
      109.03450983269104,
      226.0345095773086,
      76.33450998043743,
      189.11115161938218,
      20.234510063316186,
      101.83451001387888,
      79.33450997102938
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- theta_plus: r = 0.763\n- theta_minus: r = 0.438",
  "previous_models": [
    "Specification: U = split_self + theta_plus * max(D, 0) + theta_minus * min(D, 0) where D = split_self - 3 * token_self\nSummary: A dual-parameter inequity aversion model where utility depends on monetary payoff and deviations from contribution-based fairness. Participants evaluate offers relative to their earned entitlement (3\u00d7token_self), with separate learnable parameters (theta_plus/theta_minus) scaling reactions to advantageous/disadvantageous inequity. Logistic transformation of utility predicts acceptance probability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 104.24567207465613\nOverall Accuracy: 0.5846\n\nParameter Recovery:\n- theta_plus: r = 0.763\n- theta_minus: r = 0.438"
  ]
}