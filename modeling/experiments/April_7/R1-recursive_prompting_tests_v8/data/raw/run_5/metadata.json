{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>\n\nOkay, let's look at the previous run results. The best model so far had a BIC of 62.78, which is better than the earlier models but still has room for improvement. The accuracy was 0.78, which is pretty good, but parameter recovery for beta was low (r=0.239), while alpha was excellent (r=0.923). This suggests that the model's beta parameter isn't being estimated well, possibly because it's not capturing a meaningful effect or there's collinearity with other terms.\n\nThe previous model combined fairness deviation (alpha) and absolute amount (beta). Since beta's recovery is poor, maybe the absolute amount isn't a strong driver of decisions, or it's confounded with the fairness term. To improve beta's recovery, the model needs to better isolate the effect of the absolute amount. Alternatively, replace beta with a different term that's more orthogonal to alpha's effect.\n\nThe high recovery for alpha indicates that the fairness component is well-specified. However, beta's low recovery suggests that the model might be missing a key factor that participants consider, or the current specification of beta isn't capturing it effectively.\n\nLooking at the previous instructions, they suggested non-linear transformations for disadvantageous inequality, trial-type contextualization, etc. But in the best model, the disadvantageous term was linear. Maybe introducing non-linearity there could help, but since alpha is already well-recovered, perhaps the focus should be on improving beta.\n\nAnother angle: participants might care about the relative amount compared to the opponent. For example, the ratio of split_self to split_opp, or the difference. Including such a term instead of the absolute split_self might capture more variance and improve beta's recovery.\n\nAlternatively, the absolute amount might interact with the fairness term. For instance, participants might tolerate unfairness more if the absolute amount is high. An interaction term like alpha * (splitperc_self - fair_percent) * split_self could capture this, but that adds a non-linear term and might complicate parameter estimation.\n\nGiven the constraint of two parameters, perhaps beta should be redefined to capture a different aspect, such as sensitivity to the opponent's share, or the total combined earning. For example, beta could represent sensitivity to the total pot size, which might influence acceptance decisions independently of fairness.\n\nAnother idea is to model the utility as a function of both the percentage deviation and the proportional split. For example, U = alpha * (splitperc_self - fair_percent) + beta * (split_self / combined_earning). This way, beta captures the proportion of the total pot offered, which might be more salient than the absolute amount.\n\nAlternatively, use a non-linear function for the absolute term, like log(split_self), to capture diminishing sensitivity to larger amounts. This could help if participants care more about percentage changes in the amount rather than absolute changes.\n\nTrial-type contextualization without adding parameters: For trials where the participant contributed more (trial_type=3), maybe they have a higher sensitivity to fairness. We could modify the alpha term by a factor based on trial_type, like alpha * (1 + 0.5*(trial_type==3)). This doesn't add a new parameter but allows alpha to vary contextually, potentially improving fit without increasing BIC much.\n\nAnother approach is to introduce a threshold for the absolute amount. For example, beta only affects utility when split_self is above a certain value. This could be modeled as beta * max(split_self - threshold, 0), where threshold is fixed (e.g., \u00a330). This might better capture participants' focus on meaningful amounts.\n\nConsidering the need to maintain two parameters and improve beta's recovery, the new instructions should encourage models that redefine the beta term to capture a different, orthogonal aspect of the decision, possibly incorporating non-linear transformations, interaction with trial context, or alternative reference points.\n</think>\n\n**Final Instructions for Run 5/5:**  \n**Radical Experimentation Phase** \u2013 Break symmetry between parameters and exploit dataset structure:  \n\n1. **Asymmetric Non-Linear Operators**:  \n   - For disadvantageous inequality (*splitperc_self < fair_percent*), use **concave transformations** (e.g., `sqrt(max(fair_percent \u2212 splitperc_self, 0))`) to model \"diminishing disutility\" for extreme unfairness.  \n   - For advantageous inequality (*splitperc_self > fair_percent*), use **convex transformations** (e.g., `(splitperc_self \u2212 fair_percent)^2`) to model \"guilt aversion acceleration\".  \n\n2. **Trial-Type Modulated Bounds**:  \n   - Restrict \u03b1 (fairness sensitivity) to `[\u22125, 15]` but **halve its effective range** for `trial_type=1` (equal contribution) via `\u03b1_effective = \u03b1 * (2 if trial_type != 1 else 1)`. No new parameters \u2013 uses existing trial_type data.  \n\n3. **Dynamic Reference Points**:  \n   - Replace static fair percentage with `fair_percent + \u03b3 * split_self`, where \u03b3 is a **fixed small constant** (e.g., 0.01) to implicitly link absolute offers to fairness expectations.  \n\n4. **Beta Redefinition**:  \n   - Redefine \u03b2 to capture **non-monotonic responses to absolute offers**:  \n     `\u03b2 * sin(split_self / 10)` (periodic sensitivity) or `\u03b2 * (split_self > 30)` (threshold effect).  \n\n**Constraints**:  \n- Keep **2 parameters** but force them into **orthogonal roles** (e.g., \u03b1 \u2208 [\u22125, 15], \u03b2 \u2208 [\u2212\u03c0, \u03c0]).  \n- Use **non-differentiable operations** (e.g., floor/ceil, conditional multipliers) to test robustness.  \n\n**Success Condition**: Prioritize models where \u03b2 recovery exceeds *r > 0.7* while maintaining \u03b1 recovery *r > 0.8*. Sacrifice BIC (< 60) if needed to achieve this.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>\n\nOkay, let's look at the previous run results. The best model so far had a BIC of 62.78, which is better than the earlier models but still has room for improvement. The accuracy was 0.78, which is pretty good, but parameter recovery for beta was low (r=0.239), while alpha was excellent (r=0.923). This suggests that the model's beta parameter isn't being estimated well, possibly because it's not capturing a meaningful effect or there's collinearity with other terms.\n\nThe previous model combined fairness deviation (alpha) and absolute amount (beta). Since beta's recovery is poor, maybe the absolute amount isn't a strong driver of decisions, or it's confounded with the fairness term. To improve beta's recovery, the model needs to better isolate the effect of the absolute amount. Alternatively, replace beta with a different term that's more orthogonal to alpha's effect.\n\nThe high recovery for alpha indicates that the fairness component is well-specified. However, beta's low recovery suggests that the model might be missing a key factor that participants consider, or the current specification of beta isn't capturing it effectively.\n\nLooking at the previous instructions, they suggested non-linear transformations for disadvantageous inequality, trial-type contextualization, etc. But in the best model, the disadvantageous term was linear. Maybe introducing non-linearity there could help, but since alpha is already well-recovered, perhaps the focus should be on improving beta.\n\nAnother angle: participants might care about the relative amount compared to the opponent. For example, the ratio of split_self to split_opp, or the difference. Including such a term instead of the absolute split_self might capture more variance and improve beta's recovery.\n\nAlternatively, the absolute amount might interact with the fairness term. For instance, participants might tolerate unfairness more if the absolute amount is high. An interaction term like alpha * (splitperc_self - fair_percent) * split_self could capture this, but that adds a non-linear term and might complicate parameter estimation.\n\nGiven the constraint of two parameters, perhaps beta should be redefined to capture a different aspect, such as sensitivity to the opponent's share, or the total combined earning. For example, beta could represent sensitivity to the total pot size, which might influence acceptance decisions independently of fairness.\n\nAnother idea is to model the utility as a function of both the percentage deviation and the proportional split. For example, U = alpha * (splitperc_self - fair_percent) + beta * (split_self / combined_earning). This way, beta captures the proportion of the total pot offered, which might be more salient than the absolute amount.\n\nAlternatively, use a non-linear function for the absolute term, like log(split_self), to capture diminishing sensitivity to larger amounts. This could help if participants care more about percentage changes in the amount rather than absolute changes.\n\nTrial-type contextualization without adding parameters: For trials where the participant contributed more (trial_type=3), maybe they have a higher sensitivity to fairness. We could modify the alpha term by a factor based on trial_type, like alpha * (1 + 0.5*(trial_type==3)). This doesn't add a new parameter but allows alpha to vary contextually, potentially improving fit without increasing BIC much.\n\nAnother approach is to introduce a threshold for the absolute amount. For example, beta only affects utility when split_self is above a certain value. This could be modeled as beta * max(split_self - threshold, 0), where threshold is fixed (e.g., \u00a330). This might better capture participants' focus on meaningful amounts.\n\nConsidering the need to maintain two parameters and improve beta's recovery, the new instructions should encourage models that redefine the beta term to capture a different, orthogonal aspect of the decision, possibly incorporating non-linear transformations, interaction with trial context, or alternative reference points.\n</think>\n\n**Final Instructions for Run 5/5:**  \n**Radical Experimentation Phase** \u2013 Break symmetry between parameters and exploit dataset structure:  \n\n1. **Asymmetric Non-Linear Operators**:  \n   - For disadvantageous inequality (*splitperc_self < fair_percent*), use **concave transformations** (e.g., `sqrt(max(fair_percent \u2212 splitperc_self, 0))`) to model \"diminishing disutility\" for extreme unfairness.  \n   - For advantageous inequality (*splitperc_self > fair_percent*), use **convex transformations** (e.g., `(splitperc_self \u2212 fair_percent)^2`) to model \"guilt aversion acceleration\".  \n\n2. **Trial-Type Modulated Bounds**:  \n   - Restrict \u03b1 (fairness sensitivity) to `[\u22125, 15]` but **halve its effective range** for `trial_type=1` (equal contribution) via `\u03b1_effective = \u03b1 * (2 if trial_type != 1 else 1)`. No new parameters \u2013 uses existing trial_type data.  \n\n3. **Dynamic Reference Points**:  \n   - Replace static fair percentage with `fair_percent + \u03b3 * split_self`, where \u03b3 is a **fixed small constant** (e.g., 0.01) to implicitly link absolute offers to fairness expectations.  \n\n4. **Beta Redefinition**:  \n   - Redefine \u03b2 to capture **non-monotonic responses to absolute offers**:  \n     `\u03b2 * sin(split_self / 10)` (periodic sensitivity) or `\u03b2 * (split_self > 30)` (threshold effect).  \n\n**Constraints**:  \n- Keep **2 parameters** but force them into **orthogonal roles** (e.g., \u03b1 \u2208 [\u22125, 15], \u03b2 \u2208 [\u2212\u03c0, \u03c0]).  \n- Use **non-differentiable operations** (e.g., floor/ceil, conditional multipliers) to test robustness.  \n\n**Success Condition**: Prioritize models where \u03b2 recovery exceeds *r > 0.7* while maintaining \u03b1 recovery *r > 0.8*. Sacrifice BIC (< 60) if needed to achieve this.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<think>\nOkay, let's tackle this step by step. The goal is to design a computational model that predicts whether a participant accepts or rejects a proposal, focusing on responder behavior. The model needs to use the given variables appropriately, prioritize parameter recovery, and predict utility where negative utility means less than 50% acceptance likelihood.\n\nFirst, I need to identify which variables are relevant for the responder's decision. The target is \"accept\", a binary variable. The key factors likely involve fairness and the offered amount. From the dataset, variables like split_self, splitperc_self, token_self, token_opp, and combined_earning seem important.\n\nThe model should predict utility based on fairness and absolute offer. The fairness component can be calculated as the difference between the participant's percentage split (splitperc_self) and what's considered fair. The fair percentage would be token_self divided by total tokens (token_self + token_opp) multiplied by 100. So, fair_percent = (token_self / (token_self + token_opp)) * 100.\n\nThe utility function could then be a combination of the deviation from fairness (splitperc_self - fair_percent) scaled by a parameter \u03b1 (fairness sensitivity) and the absolute offer (split_self) scaled by \u03b2 (absolute amount sensitivity). To ensure the utility translates to a probability via logistic function, we can model:\n\nU = \u03b1 * (splitperc_self - fair_percent) + \u03b2 * split_self\n\nThe probability of accepting is then logistic(U). If U < 0, the probability is below 50%.\n\nNow, parameters \u03b1 and \u03b2 need bounds. Since \u03b1 represents sensitivity to fairness deviation, it could be positive (preferring fairer offers) or negative (accepting unfair offers). But realistically, we'd expect \u03b1 to be positive. To be generous, set \u03b1's range from -5 to 15. \u03b2, the sensitivity to absolute amount, should be positive, so bounds from 0 to 2.\n\nVariables like splitperc_self, token_self, token_opp are from the data. fair_percent is calculated. The utility U is calculated, and the learnable parameters are \u03b1 and \u03b2.\n\nLet me check if all variables in the model are from the dataset or calculated. splitperc_self is given, token_self and token_opp are provided. Combined_earning is also there but not used directly here. The model uses only necessary variables.\n\nFor parameter recovery, having \u03b1 and \u03b2 with clear roles should help. The model is simple but captures both fairness and self-interest, which are common in behavioral economics models like inequity aversion.\n\nNow, structure the model formula and variables accordingly.\n</think>\n\n<MODEL>\nU = alpha * (splitperc_self - (token_self / (token_self + token_opp)) * 100) + beta * split_self\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity to fairness deviation (positive values penalize unfair offers)\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 15,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to absolute offer amount (positive values favor higher amounts)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Percentage share proposed for the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's contribution in tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Opponent's contribution in tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Absolute amount offered to participant (\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA dual-component utility model combining fairness deviation (relative to contribution-based equity) and absolute offer sensitivity. The fairness term compares the offered percentage to the contribution-proportional fair share, while the absolute term captures self-interest. Parameters \u03b1 (fairness sensitivity) and \u03b2 (amount sensitivity) are estimated via maximum likelihood, with utility converted to acceptance probability via logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = alpha * (splitperc_self - (token_self / (token_self + token_opp)) * 100) + beta * split_self\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity to fairness deviation (positive values penalize unfair offers)\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 15,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to absolute offer amount (positive values favor higher amounts)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Percentage share proposed for the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's contribution in tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Opponent's contribution in tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Absolute amount offered to participant (\\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=1, beta=1):\n    model_predictions = []\n    for trial in trial_data:\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        # Handle cases where token_self + token_opp is zero to avoid division by zero\n        if token_self + token_opp == 0:\n            fair_percent = 50  # Default to 50% if no tokens contributed\n        else:\n            fair_percent = (token_self / (token_self + token_opp)) * 100\n\n        U = alpha * (splitperc_self - fair_percent) + beta * split_self\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744033541.269929
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Sensitivity to fairness deviation (positive values penalize unfair offers)",
      "range": {
        "min": -5,
        "max": 15,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Sensitivity to absolute offer amount (positive values favor higher amounts)",
      "range": {
        "min": 0,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = alpha * (splitperc_self - (token_self / (token_self + token_opp)) * 100) + beta * split_self",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Sensitivity to fairness deviation (positive values penalize unfair offers)",
      "range": {
        "min": -5,
        "max": 15,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Sensitivity to absolute offer amount (positive values favor higher amounts)",
      "range": {
        "min": 0,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "splitperc_self": {
      "description": "Percentage share proposed for the participant",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Participant's contribution in tokens",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Opponent's contribution in tokens",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_self": {
      "description": "Absolute amount offered to participant (\u00a3)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A dual-component utility model combining fairness deviation (relative to contribution-based equity) and absolute offer sensitivity. The fairness term compares the offered percentage to the contribution-proportional fair share, while the absolute term captures self-interest. Parameters \u03b1 (fairness sensitivity) and \u03b2 (amount sensitivity) are estimated via maximum likelihood, with utility converted to acceptance probability via logistic function.",
  "target_variable": "accept",
  "full_reasoning": "<think>\nOkay, let's tackle this step by step. The goal is to design a computational model that predicts whether a participant accepts or rejects a proposal, focusing on responder behavior. The model needs to use the given variables appropriately, prioritize parameter recovery, and predict utility where negative utility means less than 50% acceptance likelihood.\n\nFirst, I need to identify which variables are relevant for the responder's decision. The target is \"accept\", a binary variable. The key factors likely involve fairness and the offered amount. From the dataset, variables like split_self, splitperc_self, token_self, token_opp, and combined_earning seem important.\n\nThe model should predict utility based on fairness and absolute offer. The fairness component can be calculated as the difference between the participant's percentage split (splitperc_self) and what's considered fair. The fair percentage would be token_self divided by total tokens (token_self + token_opp) multiplied by 100. So, fair_percent = (token_self / (token_self + token_opp)) * 100.\n\nThe utility function could then be a combination of the deviation from fairness (splitperc_self - fair_percent) scaled by a parameter \u03b1 (fairness sensitivity) and the absolute offer (split_self) scaled by \u03b2 (absolute amount sensitivity). To ensure the utility translates to a probability via logistic function, we can model:\n\nU = \u03b1 * (splitperc_self - fair_percent) + \u03b2 * split_self\n\nThe probability of accepting is then logistic(U). If U < 0, the probability is below 50%.\n\nNow, parameters \u03b1 and \u03b2 need bounds. Since \u03b1 represents sensitivity to fairness deviation, it could be positive (preferring fairer offers) or negative (accepting unfair offers). But realistically, we'd expect \u03b1 to be positive. To be generous, set \u03b1's range from -5 to 15. \u03b2, the sensitivity to absolute amount, should be positive, so bounds from 0 to 2.\n\nVariables like splitperc_self, token_self, token_opp are from the data. fair_percent is calculated. The utility U is calculated, and the learnable parameters are \u03b1 and \u03b2.\n\nLet me check if all variables in the model are from the dataset or calculated. splitperc_self is given, token_self and token_opp are provided. Combined_earning is also there but not used directly here. The model uses only necessary variables.\n\nFor parameter recovery, having \u03b1 and \u03b2 with clear roles should help. The model is simple but captures both fairness and self-interest, which are common in behavioral economics models like inequity aversion.\n\nNow, structure the model formula and variables accordingly.\n</think>\n\n<MODEL>\nU = alpha * (splitperc_self - (token_self / (token_self + token_opp)) * 100) + beta * split_self\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity to fairness deviation (positive values penalize unfair offers)\",\n      \"range\": {\n        \"min\": -5,\n        \"max\": 15,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity to absolute offer amount (positive values favor higher amounts)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"Percentage share proposed for the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Participant's contribution in tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Opponent's contribution in tokens\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_self\": {\n      \"description\": \"Absolute amount offered to participant (\u00a3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA dual-component utility model combining fairness deviation (relative to contribution-based equity) and absolute offer sensitivity. The fairness term compares the offered percentage to the contribution-proportional fair share, while the absolute term captures self-interest. Parameters \u03b1 (fairness sensitivity) and \u03b2 (amount sensitivity) are estimated via maximum likelihood, with utility converted to acceptance probability via logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = alpha * (splitperc_self - (token_self / (token_self + token_opp)) * 100) + beta * split_self\nSummary: A dual-component utility model combining fairness deviation (relative to contribution-based equity) and absolute offer sensitivity. The fairness term compares the offered percentage to the contribution-proportional fair share, while the absolute term captures self-interest. Parameters \u03b1 (fairness sensitivity) and \u03b2 (amount sensitivity) are estimated via maximum likelihood, with utility converted to acceptance probability via logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=1, beta=1):\n    model_predictions = []\n    for trial in trial_data:\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n\n        # Handle cases where token_self + token_opp is zero to avoid division by zero\n        if token_self + token_opp == 0:\n            fair_percent = 50  # Default to 50% if no tokens contributed\n        else:\n            fair_percent = (token_self / (token_self + token_opp)) * 100\n\n        U = alpha * (splitperc_self - fair_percent) + beta * split_self\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7692307692307693,
  "fitting_results": [
    {
      "alpha": 0.16993500611497667,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -8.46089674019752,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.08620358840666725,
      "beta": 0.4538203591263466,
      "success": true,
      "log_likelihood": -17.29618048656712,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.1874466527924671,
      "beta": 0.9927812172044216,
      "success": true,
      "log_likelihood": -10.667416331109063,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.14470656155730632,
      "beta": 0.6289605284416953,
      "success": true,
      "log_likelihood": -13.375243317690511,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.19608533225014735,
      "beta": 0.7720062481990033,
      "success": true,
      "log_likelihood": -11.257367049147211,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.08625268084891338,
      "beta": 0.7402112792495806,
      "success": true,
      "log_likelihood": -14.735357988711653,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.20779795360346243,
      "beta": 2.0,
      "success": true,
      "log_likelihood": -0.017020022340545726,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.07712995084345352,
      "beta": 0.7110081908136496,
      "success": true,
      "log_likelihood": -15.279149646208786,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 13.166619119046345,
      "beta": 1.2365486332108835,
      "success": true,
      "log_likelihood": -736.8278437837838,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 14.862235155399976,
      "beta": 2.0,
      "success": true,
      "log_likelihood": -230.25851545487617,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.47885087278080113,
      "beta": 2.0,
      "success": true,
      "log_likelihood": -4.710467934130812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.15400479639084882,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -9.268950855509898,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.15451645992159974,
      "beta": 0.5852161835106527,
      "success": true,
      "log_likelihood": -12.939873558226537,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.20779795386019856,
      "beta": 2.0,
      "success": true,
      "log_likelihood": -0.01702002234054555,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.20779813104060466,
      "beta": 2.0,
      "success": true,
      "log_likelihood": -0.0170200223405013,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.20779814674870392,
      "beta": 2.0,
      "success": true,
      "log_likelihood": -0.017020022340500037,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.20779811160883668,
      "beta": 2.0,
      "success": true,
      "log_likelihood": -0.01702002234050241,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.10224314980467189,
      "beta": 2.0,
      "success": true,
      "log_likelihood": -3.3039729677951835,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.07157073598094975,
      "beta": 1.5983042571591286,
      "success": true,
      "log_likelihood": -7.674662027137528,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.20779809671612764,
      "beta": 2.0,
      "success": true,
      "log_likelihood": -0.017020022340503285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.08724264470202912,
      "beta": 0.5105338178206466,
      "success": true,
      "log_likelihood": -16.862528619555285,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.056961448597765495,
      "beta": 1.2218887762998316,
      "success": true,
      "log_likelihood": -9.737035167633831,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.99995844768119,
      "beta": 1.9630138725880641,
      "success": true,
      "log_likelihood": -207.23266689050413,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.07927136957135053,
      "beta": 0.500765437187946,
      "success": true,
      "log_likelihood": -17.38855180273889,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0919004425082648,
      "beta": 0.40860873148147137,
      "success": true,
      "log_likelihood": -17.064254722342575,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.10841633576308868,
      "beta": 0.7472989659480559,
      "success": true,
      "log_likelihood": -13.994473177703759,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.09730414535354677,
      "beta": 0.659527758461588,
      "success": true,
      "log_likelihood": -15.152612329446077,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.32960775315395346,
      "beta": 0.8231366322897369,
      "success": true,
      "log_likelihood": -6.597328548312374,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.036899856909190884,
      "beta": 1.0472911366523865,
      "success": true,
      "log_likelihood": -10.182986599670109,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.03450289389813488,
      "beta": 0.5933116336380927,
      "success": true,
      "log_likelihood": -16.67974090313676,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.20779809830999446,
      "beta": 2.0,
      "success": true,
      "log_likelihood": -0.017020022340502854,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.7287937052992497,
      "beta": 0.04293775546936729,
      "success": true,
      "log_likelihood": -47.27197880259706,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 8.692112375280255,
      "beta": 0.05244391137321885,
      "success": true,
      "log_likelihood": -277.6547541272745,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.11291345490392198,
      "beta": 0.412873940718235,
      "success": true,
      "log_likelihood": -15.421582742075781,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.2077977979255075,
      "beta": 2.0,
      "success": true,
      "log_likelihood": -0.017020022340644807,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.09521050620818361,
      "beta": 0.9419261298568954,
      "success": true,
      "log_likelihood": -12.623447829051113,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.12219028973812975,
      "beta": 1.238647024679131,
      "success": true,
      "log_likelihood": -10.062060405337714,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.09577202248410957,
      "beta": 0.467266707778815,
      "success": true,
      "log_likelihood": -16.583783047594125,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.04453115588352957,
      "beta": 0.4504269327297681,
      "success": true,
      "log_likelihood": -19.34549841584006,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.008948448957478317,
      "beta": 0.8597210551668295,
      "success": true,
      "log_likelihood": -9.741287085133418,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.04365176859663464,
      "beta": 0.3553333230371692,
      "success": true,
      "log_likelihood": -20.725735762313985,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.1606269661023747,
      "beta": 0.21691709204308943,
      "success": true,
      "log_likelihood": -10.692767866436215,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.06352109838315668,
      "beta": 0.5917259256000207,
      "success": true,
      "log_likelihood": -6.344701304699857,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.07038241193996536,
      "beta": 0.5063894598841534,
      "success": true,
      "log_likelihood": -17.7914988037547,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.09055978735311192,
      "beta": 0.718627404916806,
      "success": true,
      "log_likelihood": -14.827357259706043,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.04333013628033884,
      "beta": 0.659642799347012,
      "success": true,
      "log_likelihood": -15.938638460138458,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.06992613174842348,
      "beta": 0.4279898057386193,
      "success": true,
      "log_likelihood": -18.55484631628226,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.08165820484341016,
      "beta": 0.30624360853229354,
      "success": true,
      "log_likelihood": -18.080995720575405,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.11952295759761261,
      "beta": 0.3899593312104162,
      "success": true,
      "log_likelihood": -14.857877027610913,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.02503990041419283,
      "beta": 0.20307689725465097,
      "success": true,
      "log_likelihood": -23.236365291372884,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.034848750322625,
      "beta": 0.49243775169715065,
      "success": true,
      "log_likelihood": -18.537144955883946,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.10358218840098044,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -13.012403413764787,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.06661533738378209,
      "beta": 0.45653411217281636,
      "success": true,
      "log_likelihood": -18.489435283863262,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.02846422019064393,
      "beta": 0.32113912371268594,
      "success": true,
      "log_likelihood": -21.50002937269845,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.08720633660540973,
      "beta": 0.23862913021757529,
      "success": true,
      "log_likelihood": -17.31800837997872,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5959516949395102,
      "beta": 2.0,
      "success": true,
      "log_likelihood": -5.313450724394659,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.16707354314810888,
      "beta": 0.3656392165737014,
      "success": true,
      "log_likelihood": -11.258720386181825,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.05890901302786955,
      "beta": 0.3221748470981237,
      "success": true,
      "log_likelihood": -11.357241549071658,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.14153906795808335,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -10.006664544429645,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.029924745170080303,
      "beta": 0.7328132641142723,
      "success": true,
      "log_likelihood": -13.936235000244636,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.03885731458954113,
      "beta": 0.3607122986432726,
      "success": true,
      "log_likelihood": -20.790038470208945,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.08299172492910435,
      "beta": 0.4083500386890199,
      "success": true,
      "log_likelihood": -17.75445163125905,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.417419394098278,
      "beta": 0.052039690905805874,
      "success": true,
      "log_likelihood": -47.39924687880943,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 15.0,
      "beta": 0.052052841949290864,
      "success": true,
      "log_likelihood": -300.6836071056148,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.16794826698890755,
      "beta": 0.2855634320689399,
      "success": true,
      "log_likelihood": -10.687144937124954,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.09537608442335264,
      "beta": 0.6539965151739066,
      "success": true,
      "log_likelihood": -15.276697069621934,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.014683209402040435,
      "beta": 0.9702088476484848,
      "success": true,
      "log_likelihood": -8.939722462674839,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.031910944111161306,
      "beta": 0.8447460761937682,
      "success": true,
      "log_likelihood": -12.364847518016669,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.09440315638818222,
      "beta": 0.7114521085170674,
      "success": true,
      "log_likelihood": -14.77425239668988,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.007473370623143867,
      "beta": 0.6269712879421705,
      "success": true,
      "log_likelihood": -11.497029737705311,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 12.715777814396748,
      "beta": 2.0,
      "success": true,
      "log_likelihood": -6.155823456871575e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.1018412332314613,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -13.183581049729076,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.08621150003019706,
      "beta": 0.5250623954423241,
      "success": true,
      "log_likelihood": -16.808581525053963,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0391589961425157,
      "beta": 0.7419321558666855,
      "success": true,
      "log_likelihood": -14.438958715536685,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.02877529233693478,
      "beta": 0.17863831304543693,
      "success": true,
      "log_likelihood": -23.300446744415574,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.04762009329125326,
      "beta": 0.5533546622908901,
      "success": true,
      "log_likelihood": -17.725875626911613,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.010852652448858927,
      "beta": 1.0308969288865755,
      "success": true,
      "log_likelihood": -7.8254641956248605,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.2858120099516293,
      "beta": 2.8768065446293604e-08,
      "success": true,
      "log_likelihood": -69.06117430727306,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.02412886783948688,
      "beta": 0.2980928533137758,
      "success": true,
      "log_likelihood": -21.85302225059024,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.16993277725911732,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -8.460896738863566,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.026379450061832097,
      "beta": 0.1872716096491412,
      "success": true,
      "log_likelihood": -23.348360000807627,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": -0.0408421017826631,
      "beta": 0.4541694928483731,
      "success": true,
      "log_likelihood": -10.646691325043314,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.10726428321449989,
      "beta": 0.0,
      "success": true,
      "log_likelihood": -12.661070408316615,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.20303646940559422,
      "beta": 1.1804895088275635,
      "success": true,
      "log_likelihood": -9.372343129137185,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.012493342472708354,
      "beta": 0.16713071847854288,
      "success": true,
      "log_likelihood": -23.782035159391825,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 15.0,
      "beta": 0.05204781371111869,
      "success": true,
      "log_likelihood": -24.3733959459337,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.036046016048004836,
      "beta": 0.45406629793577624,
      "success": true,
      "log_likelihood": -19.25890006367754,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.10940491374175615,
      "beta": 0.08802662714548154,
      "success": true,
      "log_likelihood": -13.611084969298117,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.03897755582863621,
      "beta": 1.5593743119684647,
      "success": true,
      "log_likelihood": -6.021589704509857,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.14183133105231477,
      "beta": 0.8340720645537056,
      "success": true,
      "log_likelihood": -12.411837328841296,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.013382700612811414,
      "beta": 0.3122338396279685,
      "success": true,
      "log_likelihood": -21.11954210979468,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.35548984396483435,
        "p": 0.0002839572630088645
      },
      "beta": {
        "r": 0.35558768441543886,
        "p": 0.0002827829510264012
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 72.37584320925212,
  "bic_results": {
    "average_bic": 72.37584320925212,
    "individual_bics": [
      24.088831357307257,
      41.75939885004646,
      28.501870539130344,
      33.91752451229324,
      29.681771975206644,
      36.63775385433553,
      7.201077921593312,
      37.72533716932979,
      1480.8227254444798,
      467.68406878666457,
      16.587973745173844,
      25.704939587932017,
      33.04678499336529,
      7.201077921593311,
      7.201077921593223,
      7.20107792159322,
      7.201077921593225,
      13.774983812502587,
      22.516361931187276,
      7.201077921593226,
      40.89209511602279,
      26.64110821217988,
      421.6323716579205,
      41.944141482389995,
      41.29554732159737,
      35.15598423231974,
      37.472262535804376,
      20.36169497353697,
      27.533011076252436,
      40.52651968318574,
      7.2010779215932255,
      101.71099548210634,
      562.4765461314612,
      38.01020336106378,
      7.20107792159351,
      32.41393353501444,
      27.291158687587647,
      40.33460397210047,
      45.858034708592335,
      26.649612047179055,
      48.61850940154019,
      28.552573609784652,
      19.856440486311932,
      42.750035484421616,
      36.82175239632431,
      39.04431479718914,
      44.276730509476735,
      43.32902931806303,
      36.88279193213405,
      53.63976845965799,
      44.24132778868011,
      33.19184470444179,
      44.14590844463874,
      50.16709662230912,
      41.80305463686966,
      17.793939325701537,
      29.684478649275867,
      29.881520975055537,
      27.180366965771512,
      35.03950787740149,
      48.74711481733011,
      42.67594113943032,
      101.96553163453108,
      608.5342520881418,
      28.54132775116213,
      37.72043201615609,
      25.0464828022619,
      31.89673291294556,
      36.71554267029198,
      30.16109735232284,
      7.167050188559133,
      33.534199976370374,
      40.784200927020144,
      36.04495530798559,
      53.767931365743365,
      42.61878913073544,
      22.81796626816194,
      145.28938649145834,
      50.8730823780927,
      24.088831354639353,
      53.86375787852747,
      28.460420526998846,
      32.48917869354545,
      25.91172413518659,
      54.73110819569587,
      55.91382976877962,
      45.6848380042673,
      34.389207815508456,
      19.210217285931932,
      31.990712534594813,
      49.406122096501576
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.355\n- beta: r = 0.356",
  "previous_models": [
    "Specification: U = alpha * (splitperc_self - (token_self / (token_self + token_opp)) * 100) + beta * split_self\nSummary: A dual-component utility model combining fairness deviation (relative to contribution-based equity) and absolute offer sensitivity. The fairness term compares the offered percentage to the contribution-proportional fair share, while the absolute term captures self-interest. Parameters \u03b1 (fairness sensitivity) and \u03b2 (amount sensitivity) are estimated via maximum likelihood, with utility converted to acceptance probability via logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 72.37584320925212\nOverall Accuracy: 0.7692\n\nParameter Recovery:\n- alpha: r = 0.355\n- beta: r = 0.356"
  ]
}