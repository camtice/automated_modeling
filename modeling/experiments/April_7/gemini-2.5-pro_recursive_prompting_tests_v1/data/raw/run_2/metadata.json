{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, let's refine the modeling approach. The previous model provided a baseline, but we need to significantly improve **parameter recovery** (aiming for correlations well above 0.7) while also seeking better **BIC** and **accuracy**. High covariance between parameters seemed to be an issue.\n\nFor this next run:\n\n1.  **Focus on Parameter Identifiability:** Think critically about how the chosen mathematical form impacts the ability to uniquely estimate each learnable parameter. Are there alternative ways to mathematically represent the core psychological concepts (like fairness or inequity aversion) that might lead to less parameter trade-off? For instance, how might the *scale* of the inequity matter relative to the potential reward?\n2.  **Explore Fairness Reference Points:** Don't assume the proportional share based *only* on tokens is the sole driver of fairness judgments. Consider alternative or mixed reference points. Could a simple 50/50 split expectation play a role, perhaps weighted against the contribution-based share? Could the relevant reference point shift based on the `trial_type` or other contextual factors? How might you model a blend of fairness norms?\n3.  **Consider Decision Noise:** Introduce stochasticity into the decision process. A common way is to add a 'temperature' parameter (`tau`) to the logistic function: `P(accept) = 1 / (1 + exp(-U / tau))`. This parameter captures variability/noise in choices not explained by the deterministic utility. Think about appropriate bounds for `tau` (must be positive).\n4.  **Re-evaluate Functional Forms:** Is the standard linear penalty for inequity (`alpha * max(...)`) the best? Explore non-linear forms or ways to scale the inequity penalty (e.g., relative to the total stakes or the fair share itself) that might better capture behavior *and* improve parameter distinction. Could utility depend non-linearly on the offered amount (`split_self`) itself?\n5.  **Parameter Count:** While aiming for parsimony is good, prioritize identifiability. Adding a well-motivated parameter (like decision temperature) is acceptable if it improves recovery and overall model performance. Avoid parameters that might capture very similar variance.\n6.  **Novelty Encouraged:** Move beyond the most standard implementations if you have a psychologically plausible alternative that might better fit the goals. Think about heuristics or simpler comparisons participants might use.\n\nReason step by step about:\n*   Key psychological mechanisms (revisiting fairness, self-interest, consistency/noise, potential reference point shifts).\n*   How these might interact *differently* than the previous model.\n*   Mathematical forms that capture these interactions *with better parameter identifiability*.\n*   Necessary parameters and their justification (including potential new ones like temperature).\n*   Mapping to observable behavior.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, let's refine the modeling approach. The previous model provided a baseline, but we need to significantly improve **parameter recovery** (aiming for correlations well above 0.7) while also seeking better **BIC** and **accuracy**. High covariance between parameters seemed to be an issue.\n\nFor this next run:\n\n1.  **Focus on Parameter Identifiability:** Think critically about how the chosen mathematical form impacts the ability to uniquely estimate each learnable parameter. Are there alternative ways to mathematically represent the core psychological concepts (like fairness or inequity aversion) that might lead to less parameter trade-off? For instance, how might the *scale* of the inequity matter relative to the potential reward?\n2.  **Explore Fairness Reference Points:** Don't assume the proportional share based *only* on tokens is the sole driver of fairness judgments. Consider alternative or mixed reference points. Could a simple 50/50 split expectation play a role, perhaps weighted against the contribution-based share? Could the relevant reference point shift based on the `trial_type` or other contextual factors? How might you model a blend of fairness norms?\n3.  **Consider Decision Noise:** Introduce stochasticity into the decision process. A common way is to add a 'temperature' parameter (`tau`) to the logistic function: `P(accept) = 1 / (1 + exp(-U / tau))`. This parameter captures variability/noise in choices not explained by the deterministic utility. Think about appropriate bounds for `tau` (must be positive).\n4.  **Re-evaluate Functional Forms:** Is the standard linear penalty for inequity (`alpha * max(...)`) the best? Explore non-linear forms or ways to scale the inequity penalty (e.g., relative to the total stakes or the fair share itself) that might better capture behavior *and* improve parameter distinction. Could utility depend non-linearly on the offered amount (`split_self`) itself?\n5.  **Parameter Count:** While aiming for parsimony is good, prioritize identifiability. Adding a well-motivated parameter (like decision temperature) is acceptable if it improves recovery and overall model performance. Avoid parameters that might capture very similar variance.\n6.  **Novelty Encouraged:** Move beyond the most standard implementations if you have a psychologically plausible alternative that might better fit the goals. Think about heuristics or simpler comparisons participants might use.\n\nReason step by step about:\n*   Key psychological mechanisms (revisiting fairness, self-interest, consistency/noise, potential reference point shifts).\n*   How these might interact *differently* than the previous model.\n*   Mathematical forms that capture these interactions *with better parameter identifiability*.\n*   Necessary parameters and their justification (including potential new ones like temperature).\n*   Mapping to observable behavior.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, let's design a model focusing on parameter recovery and incorporating insights from inequity aversion literature, while also adding decision noise.\n\n**Step-by-Step Reasoning:**\n\n1.  **Core Goal:** Model the responder's binary choice (`accept` = 1 or 0). Prioritize parameter recovery, accuracy, and BIC. Address potential parameter covariance issues from previous attempts.\n2.  **Key Mechanisms:**\n    *   **Self-interest:** The participant wants to maximize their payoff (`split_self`). This should positively influence utility.\n    *   **Fairness/Inequity Aversion:** Participants compare their proposed share (`split_self`) to a \"fair\" share. Deviations from fairness likely reduce utility.\n        *   *Disadvantageous Inequity:* Getting less than the fair share (`split_self` < `fair_share_self`). This is generally disliked (envy).\n        *   *Advantageous Inequity:* Getting more than the fair share (`split_self` > `fair_share_self`). This may also be disliked, but often less strongly (guilt).\n    *   **Fairness Reference Point:** The most salient reference point in this task is the share proportional to contribution: `fair_share_self = combined_earning * (token_self / (token_self + token_opp))`. We'll start with this as the primary reference. Let's handle the edge case where `token_self + token_opp = 0`. If `combined_earning` is also 0, `fair_share_self = 0`. If `combined_earning > 0` but tokens are 0 (which shouldn't happen based on task description \"each token found is \u00a33\"), we might define `fair_share_self` as `combined_earning / 2` or handle it as missing/exclude. Assuming `token_self + token_opp > 0` when `combined_earning > 0`.\n    *   **Decision Noise/Stochasticity:** Choices aren't perfectly deterministic based on utility. We need a parameter to capture this variability.\n\n3.  **Model Structure - Fehr-Schmidt Inspiration + Temperature:**\n    *   We'll adapt the Fehr-Schmidt (1999) utility function, which explicitly models asymmetric aversion to advantageous (`beta`) and disadvantageous (`alpha`) inequity.\n    *   Utility `U` will be calculated based on the offer and the fairness comparison.\n    *   Probability of acceptance `P(accept)` will be determined by a logistic function with a temperature parameter `tau`: `P(accept) = 1 / (1 + exp(-U / tau))`.\n\n4.  **Mathematical Formulation:**\n    *   Calculate the reference fair share:\n        `fair_share_self = combined_earning * (token_self / (token_self + token_opp))`\n        *(Need to ensure `token_self + token_opp > 0` if `combined_earning > 0`. Assume valid data where this holds)*\n    *   Calculate the utility `U` of accepting the offer:\n        `U = split_self - alpha * max(0, fair_share_self - split_self) - beta * max(0, split_self - fair_share_self)`\n        *   The first term `split_self` represents the direct monetary gain (self-interest).\n        *   The second term `alpha * max(0, fair_share_self - split_self)` represents the utility reduction due to disadvantageous inequity (envy), weighted by `alpha`.\n        *   The third term `beta * max(0, split_self - fair_share_self)` represents the utility reduction due to advantageous inequity (guilt), weighted by `beta`.\n    *   Calculate the probability of acceptance:\n        `P_accept = 1 / (1 + exp(-U / tau))`\n\n5.  **Parameter Considerations for Identifiability:**\n    *   **Distinct Roles:** `alpha` only affects utility when the offer is below the fair share; `beta` only affects utility when the offer is above the fair share. `split_self` has a direct positive effect always. This separation *should* help identifiability compared to models where fairness penalties might be simple linear terms across the board.\n    *   **Temperature `tau`:** This parameter scales the *entire* utility difference before converting to probability. It explicitly models choice stochasticity, separating it from the deterministic utility calculation based on `alpha` and `beta`. This is crucial for potentially reducing trade-offs between utility parameters and overall choice randomness. `tau` must be positive.\n    *   **Parameter Bounds:**\n        *   `alpha`: Sensitivity to getting less. Must be non-negative. People generally dislike unfairness against them. A range like [0, 5] or [0, 10] seems plausible, allowing strong aversion. Let's use [0, 10].\n        *   `beta`: Sensitivity to getting more. Must be non-negative. Often found to be smaller than `alpha` and typically not greater than 1 (people usually don't sacrifice their own payoff to reduce advantageous inequity beyond a certain point). Range [0, 1] seems appropriate.\n        *   `tau`: Decision temperature. Must be strictly positive. Captures noise/inverse sensitivity. If utility is in \u00a3, small values mean high sensitivity, large values mean low sensitivity (noisy choices). Range [0.01, 10] seems generous and avoids zero.\n\n6.  **Mapping to Requirements:**\n    *   Predicts responder behavior (`accept`) via probability `P_accept`. Yes.\n    *   Uses dataset variables (`split_self`, `combined_earning`, `token_self`, `token_opp`). Yes.\n    *   Predicts utility `U`, where `U < 0` leads to `P_accept < 0.5` (since `tau > 0`). Yes.\n    *   Finite numerical bounds for `alpha`, `beta`, `tau`. Yes.\n    *   Parameter recovery focus: The FS structure and the inclusion of `tau` are specifically chosen to improve identifiability over simpler linear models or models without explicit noise parameters.\n\n7.  **Final Model:** The Fehr-Schmidt model adapted for this task with contribution-based fairness and a logistic choice rule with temperature `tau`.\n\n```xml\n<MODEL>\nfair_share_self = combined_earning * (token_self / (token_self + token_opp))\nU = split_self - alpha * max(0, fair_share_self - split_self) - beta * max(0, split_self - fair_share_self)\nP_accept = 1 / (1 + exp(-U / tau))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed split.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n        \"description\": \"Probability of accepting the proposed split.\",\n        \"range\": {\n            \"min\": 0,\n            \"max\": 1,\n            \"inclusive_min\": false,\n            \"inclusive_max\": false\n        },\n        \"learnable\": false,\n        \"source\": \"calculated\"\n    },\n    \"fair_share_self\": {\n      \"description\": \"The share the participant would receive if the combined earning were split proportionally to tokens found.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity parameter for disadvantageous inequity (envy). Weight applied to the shortfall relative to the fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity parameter for advantageous inequity (guilt). Weight applied to the surplus relative to the fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"tau\": {\n        \"description\": \"Temperature parameter controlling the stochasticity of the choice. Higher values indicate more noise/less sensitivity to utility differences.\",\n        \"range\": {\n            \"min\": 0.01, \n            \"max\": 10,\n            \"inclusive_min\": true, \n            \"inclusive_max\": true \n        },\n        \"learnable\": true,\n        \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3).\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Amount of money earned in total for the trial.\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nAn inequity aversion model based on Fehr-Schmidt (1999), predicting the utility of accepting a proposal. Utility incorporates the monetary value of the offer (`split_self`) and subtracts penalties for both disadvantageous inequity (weighted by `alpha`) and advantageous inequity (weighted by `beta`), relative to a fair share determined by contribution (`token_self`, `token_opp`, `combined_earning`). The probability of acceptance is calculated using a logistic function with a temperature parameter (`tau`) to model choice stochasticity. Learnable parameters are `alpha`, `beta`, and `tau`.\n</SUMMARY>\n```"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta', 'tau']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                fair_share_self = combined_earning * (token_self / (token_self + token_opp))\nU = split_self - alpha * max(0, fair_share_self - split_self) - beta * max(0, split_self - fair_share_self)\nP_accept = 1 / (1 + exp(-U / tau))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed split.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n      \"description\": \"Probability of accepting the proposed split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_share_self\": {\n      \"description\": \"The share the participant would receive if the combined earning were split proportionally to tokens found.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity parameter for disadvantageous inequity (envy). Weight applied to the shortfall relative to the fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity parameter for advantageous inequity (guilt). Weight applied to the surplus relative to the fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"tau\": {\n      \"description\": \"Temperature parameter controlling the stochasticity of the choice. Higher values indicate more noise/less sensitivity to utility differences.\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \\u00a3).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Amount of money earned in total for the trial.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=1, beta=0.5, tau=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Handle edge case to prevent division by zero\n        if (token_self + token_opp) > 0:\n            fair_share_self = combined_earning * (token_self / (token_self + token_opp))\n        else:\n            fair_share_self = 0  # Or handle as missing, depending on data\n\n        U = split_self - alpha * max(0, fair_share_self - split_self) - beta * max(0, split_self - fair_share_self)\n\n        try:\n            p_accept = 1 / (1 + math.exp(-U / tau))\n        except OverflowError:\n            p_accept = 0.0 if U < 0 else 1.0\n\n        model_predictions.append(p_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 30, \"split_opp\": 15.0, \"split_self\": 15.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 15.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 15.0}, {\"ID\": 2, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 8, \"token_self\": 2, \"combined_earning\": 30, \"split_opp\": 24.0, \"split_self\": 6.0, \"splitperc_opp\": 80, \"splitperc_self\": 20, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 20.0, \"proposed_amount\": 6.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744035034.207634
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Sensitivity parameter for disadvantageous inequity (envy). Weight applied to the shortfall relative to the fair share.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Sensitivity parameter for advantageous inequity (guilt). Weight applied to the surplus relative to the fair share.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "tau": {
      "description": "Temperature parameter controlling the stochasticity of the choice. Higher values indicate more noise/less sensitivity to utility differences.",
      "range": {
        "min": 0.01,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "fair_share_self = combined_earning * (token_self / (token_self + token_opp))\nU = split_self - alpha * max(0, fair_share_self - split_self) - beta * max(0, split_self - fair_share_self)\nP_accept = 1 / (1 + exp(-U / tau))",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the proposed split.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "P_accept": {
      "description": "Probability of accepting the proposed split.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_share_self": {
      "description": "The share the participant would receive if the combined earning were split proportionally to tokens found.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Sensitivity parameter for disadvantageous inequity (envy). Weight applied to the shortfall relative to the fair share.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Sensitivity parameter for advantageous inequity (guilt). Weight applied to the surplus relative to the fair share.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "tau": {
      "description": "Temperature parameter controlling the stochasticity of the choice. Higher values indicate more noise/less sensitivity to utility differences.",
      "range": {
        "min": 0.01,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "The proposed share for the participant (in \u00a3).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "Amount of money earned in total for the trial.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "An inequity aversion model based on Fehr-Schmidt (1999), predicting the utility of accepting a proposal. Utility incorporates the monetary value of the offer (`split_self`) and subtracts penalties for both disadvantageous inequity (weighted by `alpha`) and advantageous inequity (weighted by `beta`), relative to a fair share determined by contribution (`token_self`, `token_opp`, `combined_earning`). The probability of acceptance is calculated using a logistic function with a temperature parameter (`tau`) to model choice stochasticity. Learnable parameters are `alpha`, `beta`, and `tau`.",
  "target_variable": "accept",
  "full_reasoning": "Okay, let's design a model focusing on parameter recovery and incorporating insights from inequity aversion literature, while also adding decision noise.\n\n**Step-by-Step Reasoning:**\n\n1.  **Core Goal:** Model the responder's binary choice (`accept` = 1 or 0). Prioritize parameter recovery, accuracy, and BIC. Address potential parameter covariance issues from previous attempts.\n2.  **Key Mechanisms:**\n    *   **Self-interest:** The participant wants to maximize their payoff (`split_self`). This should positively influence utility.\n    *   **Fairness/Inequity Aversion:** Participants compare their proposed share (`split_self`) to a \"fair\" share. Deviations from fairness likely reduce utility.\n        *   *Disadvantageous Inequity:* Getting less than the fair share (`split_self` < `fair_share_self`). This is generally disliked (envy).\n        *   *Advantageous Inequity:* Getting more than the fair share (`split_self` > `fair_share_self`). This may also be disliked, but often less strongly (guilt).\n    *   **Fairness Reference Point:** The most salient reference point in this task is the share proportional to contribution: `fair_share_self = combined_earning * (token_self / (token_self + token_opp))`. We'll start with this as the primary reference. Let's handle the edge case where `token_self + token_opp = 0`. If `combined_earning` is also 0, `fair_share_self = 0`. If `combined_earning > 0` but tokens are 0 (which shouldn't happen based on task description \"each token found is \u00a33\"), we might define `fair_share_self` as `combined_earning / 2` or handle it as missing/exclude. Assuming `token_self + token_opp > 0` when `combined_earning > 0`.\n    *   **Decision Noise/Stochasticity:** Choices aren't perfectly deterministic based on utility. We need a parameter to capture this variability.\n\n3.  **Model Structure - Fehr-Schmidt Inspiration + Temperature:**\n    *   We'll adapt the Fehr-Schmidt (1999) utility function, which explicitly models asymmetric aversion to advantageous (`beta`) and disadvantageous (`alpha`) inequity.\n    *   Utility `U` will be calculated based on the offer and the fairness comparison.\n    *   Probability of acceptance `P(accept)` will be determined by a logistic function with a temperature parameter `tau`: `P(accept) = 1 / (1 + exp(-U / tau))`.\n\n4.  **Mathematical Formulation:**\n    *   Calculate the reference fair share:\n        `fair_share_self = combined_earning * (token_self / (token_self + token_opp))`\n        *(Need to ensure `token_self + token_opp > 0` if `combined_earning > 0`. Assume valid data where this holds)*\n    *   Calculate the utility `U` of accepting the offer:\n        `U = split_self - alpha * max(0, fair_share_self - split_self) - beta * max(0, split_self - fair_share_self)`\n        *   The first term `split_self` represents the direct monetary gain (self-interest).\n        *   The second term `alpha * max(0, fair_share_self - split_self)` represents the utility reduction due to disadvantageous inequity (envy), weighted by `alpha`.\n        *   The third term `beta * max(0, split_self - fair_share_self)` represents the utility reduction due to advantageous inequity (guilt), weighted by `beta`.\n    *   Calculate the probability of acceptance:\n        `P_accept = 1 / (1 + exp(-U / tau))`\n\n5.  **Parameter Considerations for Identifiability:**\n    *   **Distinct Roles:** `alpha` only affects utility when the offer is below the fair share; `beta` only affects utility when the offer is above the fair share. `split_self` has a direct positive effect always. This separation *should* help identifiability compared to models where fairness penalties might be simple linear terms across the board.\n    *   **Temperature `tau`:** This parameter scales the *entire* utility difference before converting to probability. It explicitly models choice stochasticity, separating it from the deterministic utility calculation based on `alpha` and `beta`. This is crucial for potentially reducing trade-offs between utility parameters and overall choice randomness. `tau` must be positive.\n    *   **Parameter Bounds:**\n        *   `alpha`: Sensitivity to getting less. Must be non-negative. People generally dislike unfairness against them. A range like [0, 5] or [0, 10] seems plausible, allowing strong aversion. Let's use [0, 10].\n        *   `beta`: Sensitivity to getting more. Must be non-negative. Often found to be smaller than `alpha` and typically not greater than 1 (people usually don't sacrifice their own payoff to reduce advantageous inequity beyond a certain point). Range [0, 1] seems appropriate.\n        *   `tau`: Decision temperature. Must be strictly positive. Captures noise/inverse sensitivity. If utility is in \u00a3, small values mean high sensitivity, large values mean low sensitivity (noisy choices). Range [0.01, 10] seems generous and avoids zero.\n\n6.  **Mapping to Requirements:**\n    *   Predicts responder behavior (`accept`) via probability `P_accept`. Yes.\n    *   Uses dataset variables (`split_self`, `combined_earning`, `token_self`, `token_opp`). Yes.\n    *   Predicts utility `U`, where `U < 0` leads to `P_accept < 0.5` (since `tau > 0`). Yes.\n    *   Finite numerical bounds for `alpha`, `beta`, `tau`. Yes.\n    *   Parameter recovery focus: The FS structure and the inclusion of `tau` are specifically chosen to improve identifiability over simpler linear models or models without explicit noise parameters.\n\n7.  **Final Model:** The Fehr-Schmidt model adapted for this task with contribution-based fairness and a logistic choice rule with temperature `tau`.\n\n```xml\n<MODEL>\nfair_share_self = combined_earning * (token_self / (token_self + token_opp))\nU = split_self - alpha * max(0, fair_share_self - split_self) - beta * max(0, split_self - fair_share_self)\nP_accept = 1 / (1 + exp(-U / tau))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed split.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"P_accept\": {\n        \"description\": \"Probability of accepting the proposed split.\",\n        \"range\": {\n            \"min\": 0,\n            \"max\": 1,\n            \"inclusive_min\": false,\n            \"inclusive_max\": false\n        },\n        \"learnable\": false,\n        \"source\": \"calculated\"\n    },\n    \"fair_share_self\": {\n      \"description\": \"The share the participant would receive if the combined earning were split proportionally to tokens found.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\" \n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Sensitivity parameter for disadvantageous inequity (envy). Weight applied to the shortfall relative to the fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Sensitivity parameter for advantageous inequity (guilt). Weight applied to the surplus relative to the fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"tau\": {\n        \"description\": \"Temperature parameter controlling the stochasticity of the choice. Higher values indicate more noise/less sensitivity to utility differences.\",\n        \"range\": {\n            \"min\": 0.01, \n            \"max\": 10,\n            \"inclusive_min\": true, \n            \"inclusive_max\": true \n        },\n        \"learnable\": true,\n        \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3).\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"Amount of money earned in total for the trial.\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nAn inequity aversion model based on Fehr-Schmidt (1999), predicting the utility of accepting a proposal. Utility incorporates the monetary value of the offer (`split_self`) and subtracts penalties for both disadvantageous inequity (weighted by `alpha`) and advantageous inequity (weighted by `beta`), relative to a fair share determined by contribution (`token_self`, `token_opp`, `combined_earning`). The probability of acceptance is calculated using a logistic function with a temperature parameter (`tau`) to model choice stochasticity. Learnable parameters are `alpha`, `beta`, and `tau`.\n</SUMMARY>\n```",
  "prediction_type": "utility",
  "current_model": "Specification: fair_share_self = combined_earning * (token_self / (token_self + token_opp))\nU = split_self - alpha * max(0, fair_share_self - split_self) - beta * max(0, split_self - fair_share_self)\nP_accept = 1 / (1 + exp(-U / tau))\nSummary: An inequity aversion model based on Fehr-Schmidt (1999), predicting the utility of accepting a proposal. Utility incorporates the monetary value of the offer (`split_self`) and subtracts penalties for both disadvantageous inequity (weighted by `alpha`) and advantageous inequity (weighted by `beta`), relative to a fair share determined by contribution (`token_self`, `token_opp`, `combined_earning`). The probability of acceptance is calculated using a logistic function with a temperature parameter (`tau`) to model choice stochasticity. Learnable parameters are `alpha`, `beta`, and `tau`.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=1, beta=0.5, tau=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Handle edge case to prevent division by zero\n        if (token_self + token_opp) > 0:\n            fair_share_self = combined_earning * (token_self / (token_self + token_opp))\n        else:\n            fair_share_self = 0  # Or handle as missing, depending on data\n\n        U = split_self - alpha * max(0, fair_share_self - split_self) - beta * max(0, split_self - fair_share_self)\n\n        try:\n            p_accept = 1 / (1 + math.exp(-U / tau))\n        except OverflowError:\n            p_accept = 0.0 if U < 0 else 1.0\n\n        model_predictions.append(p_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.594017094017094,
  "fitting_results": [
    {
      "alpha": 10.0,
      "beta": 0.08293492150260987,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -25.433756520573983,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.5365346890426568,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -20.394672577215893,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.5964498479790952,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -19.875130642144367,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.49090089603937,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -22.394672576745812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.551907839768654,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -20.875133520063716,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1030153078948168,
      "beta": 1.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -18.59581764696071,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1896932797452806,
      "beta": 0.0,
      "tau": 0.3012055869625937,
      "success": true,
      "log_likelihood": -18.552377519178876,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.412229204582231,
      "beta": 0.2658176498662593,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -21.914214549120874,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.62299113335341,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -18.8751455101314,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.293627557343215,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -25.433756520573986,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7096383351845543,
      "beta": 0.2956636778068009,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -20.25504771491756,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "tau": 0.010000000000000273,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "tau": 0.010000000000000198,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7621743967897193,
      "beta": 0.3852300555449718,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -14.69639020468285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.45598014450584656,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -13.796967723701828,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.46931154048932566,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.4273305366773972,
      "beta": 0.5636220668784576,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -19.355711824562178,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.5690637987146526,
      "beta": 0.04484120186848405,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -15.176850678936603,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.0,
      "tau": 0.010000000000000179,
      "success": true,
      "log_likelihood": -23.433756521044064,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.809433372073391,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -21.255016097810277,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.4977932493764663,
      "beta": 0.1879911236574283,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -20.394672577215893,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1157546835348737,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -19.59581764672567,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.6931645631533248,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -21.154443565890862,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 6.812306740579856,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -21.91421496325018,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "tau": 0.010000000000000012,
      "success": true,
      "log_likelihood": -15.277420744791485,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1217261952136663,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -17.595817647195755,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.46856223647107037,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -25.433756520573983,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.141511944202479,
      "beta": 0.25276048488515535,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -24.154455854171484,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.864520935144975,
      "beta": 0.0,
      "tau": 0.6293626357172475,
      "success": true,
      "log_likelihood": -22.843411912733096,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -11.27742074573165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9156344626129445,
      "beta": 0.0,
      "tau": 0.5745722592741945,
      "success": true,
      "log_likelihood": -20.034710612370322,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9870871069217872,
      "beta": 0.0,
      "tau": 0.038934164987896494,
      "success": true,
      "log_likelihood": -17.399092737722206,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.5244385487279977,
      "beta": 0.0,
      "tau": 0.03034082917087081,
      "success": true,
      "log_likelihood": -20.85928037070087,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.2474365171624098,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -19.634901694981917,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -14.277420745026529,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7382815960035112,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -19.25501614851775,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.468420890051684,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -22.673985535086953,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.6035424036302209,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -12.277420745496608,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.8947648804898123,
      "beta": 0.46361318731217943,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -21.255016097810287,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2077545889722392,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -19.595817646725667,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.45285511402872275,
      "beta": 0.695368177630167,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -18.796981316719254,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.158601449964701,
      "beta": 0.0,
      "tau": 1.0013046808019885,
      "success": true,
      "log_likelihood": -21.253118840645808,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 4.329451203446662,
      "beta": 0.7572756077464066,
      "tau": 0.17727449869930706,
      "success": true,
      "log_likelihood": -22.849698125657948,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.6751343775714616,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -21.3946725769879,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.9488206458162323,
      "beta": 0.00520058104335181,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -23.255016155094495,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.7580112696164104,
      "beta": 0.028985646672139775,
      "tau": 0.04118832291737679,
      "success": true,
      "log_likelihood": -19.693743193920955,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.5533314752014299,
      "tau": 0.010000000000000021,
      "success": true,
      "log_likelihood": -25.43375652057398,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.2615058872603706,
      "beta": 0.4262649309705256,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -21.634902896116618,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2051747626594405,
      "beta": 0.8902080954673627,
      "tau": 1.635743165775917,
      "success": true,
      "log_likelihood": -23.493171569105016,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 7.695277562464417,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -22.67398553508695,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.507133371444467,
      "beta": 0.20801759200113112,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -21.91421454912993,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -23.43375652104397,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "tau": 0.010000000000000014,
      "success": true,
      "log_likelihood": -15.277420744791483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.6250832404323335,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -25.433756520573983,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.45397414715007706,
      "beta": 0.14309788959867661,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -16.796974342242702,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.7998132558716198,
      "beta": 0.18343232136326043,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -20.25501609804537,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.0919468446958573,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -19.6349015912594,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.6665088896990747,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -25.433756520573986,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.9407528775369127,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -23.255016102474105,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.0,
      "tau": 0.010000000000000038,
      "success": true,
      "log_likelihood": -23.433756521044064,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.5811883735270194,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -19.875189324871023,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -14.277420745026523,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.4696831613057758,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -14.7969627364128,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.7581273482547157,
      "beta": 0.05101066267933184,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -21.394672580540117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -14.277420745026525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.23281175573823978,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -23.43375652104407,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.6898622057832463,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -25.433756520573983,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.0772322291079774,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -20.634901590980526,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.9167350610512862,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -17.4561611680328,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 2.444452975821587,
      "beta": 1.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -22.394672576745812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2841996459203355,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -18.59581764696376,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -13.277420745261566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 1.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -26.433756520338946,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.511993750611484,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -21.91421454912993,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.7287748564762087,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -25.433756520573983,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -23.433756521043975,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -14.277420745026525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 1.0,
      "tau": 3.288708435913652,
      "success": true,
      "log_likelihood": -26.577616405962964,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3199127270798539,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -20.59581764588857,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 3.1729757517557338,
      "beta": 0.4757124951753564,
      "tau": 0.10121632632144893,
      "success": true,
      "log_likelihood": -22.09011061840405,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -24.43375652080902,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.3308387047058035,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -19.59581764602252,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 5.576507624983907,
      "beta": 1.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -23.91421454865985,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -13.277420745261566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.2987853326859022,
      "beta": 0.0,
      "tau": 0.25081174285921914,
      "success": true,
      "log_likelihood": -22.363980713545644,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "alpha": 1.1796408329313,
      "beta": 0.08663854162907893,
      "tau": 0.010000000000000009,
      "success": true,
      "log_likelihood": -20.595817646490627,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.20147064442831006,
        "p": 0.04442718296813615
      },
      "beta": {
        "r": -0.010552215942069466,
        "p": 0.9170119258999783
      },
      "tau": {
        "r": 0.06896885854180178,
        "p": 0.4953464354521327
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 49.949921767382904,
  "bic_results": {
    "average_bic": 49.949921767382904,
    "individual_bics": [
      61.6180698565163,
      51.53990196980011,
      50.50081809965707,
      55.53990196885995,
      52.50082385549577,
      47.94219210928975,
      33.305398306831634,
      47.85531185372608,
      33.305398306831634,
      54.57898591361008,
      48.500847835631134,
      61.6180698565163,
      51.260652245203445,
      33.305398306831634,
      33.305398306831634,
      33.305398306831634,
      33.305398306831634,
      40.143337224734026,
      38.344492262771986,
      33.305398306831634,
      49.46198046449268,
      41.10425817324153,
      57.61806985745646,
      53.26058901098888,
      51.53990196980011,
      49.94219210881967,
      53.05944394715006,
      54.57898674186869,
      41.3053983049513,
      45.942192109759844,
      33.305398306831634,
      61.6180698565163,
      59.0594685237113,
      56.43738064083452,
      33.305398306831634,
      50.81997804010898,
      45.54874229081274,
      52.46911755677007,
      50.02036020533217,
      39.30539830542139,
      49.260589112403835,
      56.09852788554224,
      35.305398306361546,
      53.26058901098891,
      49.94219210881967,
      48.344519448806835,
      53.25679449665995,
      56.44995306668423,
      53.53990196934413,
      57.26058912555732,
      50.138043203210245,
      61.618069856516286,
      54.02036260760157,
      57.73689995357836,
      56.098527885542225,
      54.57898591362819,
      57.61806985745628,
      41.3053983049513,
      61.6180698565163,
      44.34450549985374,
      51.260589011459075,
      50.02035999788713,
      61.6180698565163,
      57.260589020316544,
      57.61806985745646,
      50.50093546511037,
      39.30539830542138,
      40.34448228819393,
      53.53990197644856,
      39.30539830542138,
      57.618069857456476,
      61.6180698565163,
      52.02035999732938,
      45.66287915143393,
      55.53990196885995,
      47.942192109295846,
      37.30539830589146,
      63.61806985604622,
      54.57898591362819,
      61.6180698565163,
      57.61806985745628,
      39.30539830542138,
      63.905789627294254,
      51.94219210714547,
      54.930778052176436,
      59.61806985698637,
      49.942192107413376,
      58.578985912688026,
      37.30539830589146,
      55.478518242459614,
      51.94219210834959
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.201\n- beta: r = -0.011\n- tau: r = 0.069",
  "previous_models": [
    "Specification: fair_share_self = combined_earning * (token_self / (token_self + token_opp))\nU = split_self - alpha * max(0, fair_share_self - split_self) - beta * max(0, split_self - fair_share_self)\nP_accept = 1 / (1 + exp(-U / tau))\nSummary: An inequity aversion model based on Fehr-Schmidt (1999), predicting the utility of accepting a proposal. Utility incorporates the monetary value of the offer (`split_self`) and subtracts penalties for both disadvantageous inequity (weighted by `alpha`) and advantageous inequity (weighted by `beta`), relative to a fair share determined by contribution (`token_self`, `token_opp`, `combined_earning`). The probability of acceptance is calculated using a logistic function with a temperature parameter (`tau`) to model choice stochasticity. Learnable parameters are `alpha`, `beta`, and `tau`.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 49.949921767382904\nOverall Accuracy: 0.5940\n\nParameter Recovery:\n- alpha: r = 0.201\n- beta: r = -0.011\n- tau: r = 0.069"
  ]
}