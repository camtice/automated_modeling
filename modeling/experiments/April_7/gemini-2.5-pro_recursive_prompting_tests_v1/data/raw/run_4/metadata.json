{
  "task_description": "In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, the previous run was highly successful! The model using proportions (`split_perc`, `fair_perc`) and a single inequity aversion parameter (`k`) achieved excellent parameter recovery (k: r = 0.855), surpassing the target, along with the best BIC (42.20) and accuracy (0.600) so far. This confirms that simplifying the inequity structure and using relative measures helped address the identifiability issues seen in earlier models.\n\nFor the next run, the goal is to **further improve the model's fit (lower BIC) and predictive accuracy**, while **maintaining the excellent parameter recovery** (ideally r > 0.7 for all parameters) achieved previously. We can now try to carefully reintroduce complexity or mechanisms that might capture more nuances in the decision-making process, building upon the successful proportional framework.\n\nHere are some directions and suggestions:\n\n1.  **Incorporate Choice Stochasticity (Temperature):** The previous successful model used a fixed temperature (tau=1) in the logistic function. A very common way to improve model fit is to allow choice stochasticity to vary between individuals by introducing a learnable temperature parameter (`tau`).\n    *   **Hypothesis:** Now that the utility (`U`) is calculated based on proportions (ranging roughly between -k and 1), its scale might be more consistent across trials compared to models using absolute monetary values. This improved scaling might make `tau` identifiable when paired with the simplified `k`-based inequity term.\n    *   **Model Idea:** Start with the previous best model and add `tau`.\n        *   `fair_perc = (token_self / (token_opp + token_self)) if (token_opp + token_self) > 0 else 0.5`\n        *   `split_perc = split_self / combined_earning if combined_earning > 0 else 0`\n        *   `U = split_perc - k * abs(split_perc - fair_perc)`\n        *   `P_accept = 1 / (1 + exp(-U / tau))`\n    *   **Parameters:** `k` (inequity aversion, e.g., [0, 10]), `tau` (temperature/noise, e.g., [0.01, 5]). Ensure `tau` is strictly positive.\n    *   **Priority:** This is likely the most promising direction for improving fit while potentially maintaining good recovery.\n\n2.  **Explore Mixed Fairness References:** The current model assumes the *only* reference point is the proportional fair share based on tokens. Is it possible participants also consider a simpler 50/50 split heuristic?\n    *   **Model Idea:** Model the effective fair share as a weighted average of the proportional share and an equal split share (0.5).\n        *   `fair_perc_prop = (token_self / (token_opp + token_self)) if (token_opp + token_self) > 0 else 0.5`\n        *   `fair_perc_equal = 0.5`\n        *   `effective_fair_perc = w * fair_perc_prop + (1 - w) * fair_perc_equal`\n        *   `U = split_perc - k * abs(split_perc - effective_fair_perc)`\n        *   (Optionally, add `tau` here too: `P_accept = 1 / (1 + exp(-U / tau))`)\n    *   **Parameters:** `k` (inequity aversion), `w` (weight on proportional fairness, [0, 1]), potentially `tau`.\n    *   **Rationale:** This acknowledges that fairness perception might be multifaceted. Adding `w` increases complexity, so monitor recovery closely. Perhaps test this first *without* `tau` (i.e., tau=1) to isolate the effect of `w`.\n\n3.  **Revisit Asymmetric Inequity Aversion (Use Proportions):** The original Fehr-Schmidt model with separate `alpha` and `beta` had poor recovery. However, that model used *absolute* monetary differences. Could asymmetry be recoverable when applied to *proportions*?\n    *   **Model Idea:** Adapt the Fehr-Schmidt idea to the proportional framework.\n        *   `U = split_perc - alpha * max(0, fair_perc - split_perc) - beta * max(0, split_perc - fair_perc)`\n        *   (Optionally, add `tau`: `P_accept = 1 / (1 + exp(-U / tau))`)\n    *   **Parameters:** `alpha` (disadvantageous inequity aversion, e.g., [0, 10]), `beta` (advantageous inequity aversion, e.g., [0, 1]), potentially `tau`. Note the typical constraint `alpha >= beta >= 0`.\n    *   **Caution:** This brings back two inequity parameters, which previously caused identifiability problems. Approach this cautiously. Test it first *without* `tau` (tau=1). It might only be worth pursuing if the single `k` models (with or without `tau` or `w`) fail to significantly improve fit.\n\n**Focus:**\nPrioritize Model Idea 1 (adding `tau` to the best previous model) as it's a standard refinement. Consider Model Idea 2 (mixed reference point) as an interesting conceptual extension. Be more cautious with Model Idea 3 (asymmetric proportions) due to past recovery issues.\n\nAlways justify your chosen model structure and parameters, especially regarding how they build on the previous success and why you expect them to remain identifiable while improving fit/accuracy. Ensure parameter bounds are sensible and finite.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In the  experiment, each participant is given 36 different proposals to respond to. Each is designated by a trial number in the data set This gives 36 instances for the learnable parameters to be trained. There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDataset:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\nwill have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n2. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, the previous run was highly successful! The model using proportions (`split_perc`, `fair_perc`) and a single inequity aversion parameter (`k`) achieved excellent parameter recovery (k: r = 0.855), surpassing the target, along with the best BIC (42.20) and accuracy (0.600) so far. This confirms that simplifying the inequity structure and using relative measures helped address the identifiability issues seen in earlier models.\n\nFor the next run, the goal is to **further improve the model's fit (lower BIC) and predictive accuracy**, while **maintaining the excellent parameter recovery** (ideally r > 0.7 for all parameters) achieved previously. We can now try to carefully reintroduce complexity or mechanisms that might capture more nuances in the decision-making process, building upon the successful proportional framework.\n\nHere are some directions and suggestions:\n\n1.  **Incorporate Choice Stochasticity (Temperature):** The previous successful model used a fixed temperature (tau=1) in the logistic function. A very common way to improve model fit is to allow choice stochasticity to vary between individuals by introducing a learnable temperature parameter (`tau`).\n    *   **Hypothesis:** Now that the utility (`U`) is calculated based on proportions (ranging roughly between -k and 1), its scale might be more consistent across trials compared to models using absolute monetary values. This improved scaling might make `tau` identifiable when paired with the simplified `k`-based inequity term.\n    *   **Model Idea:** Start with the previous best model and add `tau`.\n        *   `fair_perc = (token_self / (token_opp + token_self)) if (token_opp + token_self) > 0 else 0.5`\n        *   `split_perc = split_self / combined_earning if combined_earning > 0 else 0`\n        *   `U = split_perc - k * abs(split_perc - fair_perc)`\n        *   `P_accept = 1 / (1 + exp(-U / tau))`\n    *   **Parameters:** `k` (inequity aversion, e.g., [0, 10]), `tau` (temperature/noise, e.g., [0.01, 5]). Ensure `tau` is strictly positive.\n    *   **Priority:** This is likely the most promising direction for improving fit while potentially maintaining good recovery.\n\n2.  **Explore Mixed Fairness References:** The current model assumes the *only* reference point is the proportional fair share based on tokens. Is it possible participants also consider a simpler 50/50 split heuristic?\n    *   **Model Idea:** Model the effective fair share as a weighted average of the proportional share and an equal split share (0.5).\n        *   `fair_perc_prop = (token_self / (token_opp + token_self)) if (token_opp + token_self) > 0 else 0.5`\n        *   `fair_perc_equal = 0.5`\n        *   `effective_fair_perc = w * fair_perc_prop + (1 - w) * fair_perc_equal`\n        *   `U = split_perc - k * abs(split_perc - effective_fair_perc)`\n        *   (Optionally, add `tau` here too: `P_accept = 1 / (1 + exp(-U / tau))`)\n    *   **Parameters:** `k` (inequity aversion), `w` (weight on proportional fairness, [0, 1]), potentially `tau`.\n    *   **Rationale:** This acknowledges that fairness perception might be multifaceted. Adding `w` increases complexity, so monitor recovery closely. Perhaps test this first *without* `tau` (i.e., tau=1) to isolate the effect of `w`.\n\n3.  **Revisit Asymmetric Inequity Aversion (Use Proportions):** The original Fehr-Schmidt model with separate `alpha` and `beta` had poor recovery. However, that model used *absolute* monetary differences. Could asymmetry be recoverable when applied to *proportions*?\n    *   **Model Idea:** Adapt the Fehr-Schmidt idea to the proportional framework.\n        *   `U = split_perc - alpha * max(0, fair_perc - split_perc) - beta * max(0, split_perc - fair_perc)`\n        *   (Optionally, add `tau`: `P_accept = 1 / (1 + exp(-U / tau))`)\n    *   **Parameters:** `alpha` (disadvantageous inequity aversion, e.g., [0, 10]), `beta` (advantageous inequity aversion, e.g., [0, 1]), potentially `tau`. Note the typical constraint `alpha >= beta >= 0`.\n    *   **Caution:** This brings back two inequity parameters, which previously caused identifiability problems. Approach this cautiously. Test it first *without* `tau` (tau=1). It might only be worth pursuing if the single `k` models (with or without `tau` or `w`) fail to significantly improve fit.\n\n**Focus:**\nPrioritize Model Idea 1 (adding `tau` to the best previous model) as it's a standard refinement. Consider Model Idea 2 (mixed reference point) as an interesting conceptual extension. Be more cautious with Model Idea 3 (asymmetric proportions) due to past recovery issues.\n\nAlways justify your chosen model structure and parameters, especially regarding how they build on the previous success and why you expect them to remain identifiable while improving fit/accuracy. Ensure parameter bounds are sensible and finite.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, let's proceed with designing the computational model based on the analysis and prioritizing Model Idea 1 (adding a learnable temperature parameter `tau` to the successful proportional inequity model).\n\n**Step-by-step Thinking:**\n\n1.  **Identify the Base Model:** The previous successful model calculated utility based on the offered proportion (`split_perc`) relative to a fair proportion (`fair_perc` derived from token contributions), penalized by a single inequity aversion parameter (`k`). The formula was `U = split_perc - k * abs(split_perc - fair_perc)`, and probability was calculated with `tau=1`.\n2.  **Identify the Target Improvement:** Introduce individual variability in choice stochasticity by making the temperature parameter `tau` learnable. This allows the model to capture participants who are more deterministic (low `tau`) or more random (high `tau`) in their responses for a given utility level.\n3.  **Define Input Variables:**\n    *   `token_self`: Participant's contribution (from data).\n    *   `token_opp`: Opponent's contribution (from data).\n    *   `splitperc_self`: Percentage share offered to the participant (from data). Note: This is already a percentage (0-100), so it needs division by 100 for calculations where proportions range from 0 to 1.\n4.  **Define Intermediate Calculations:**\n    *   `fair_perc`: The proportion considered fair based on relative token contributions. Handle the case where total tokens are zero (assign 0.5, representing an equal split expectation when contributions are undefined/zero).\n        `fair_perc = token_self / (token_opp + token_self)` if `(token_opp + token_self) > 0` else `0.5`\n    *   `current_split_perc`: The offered proportion, normalized to the range [0, 1].\n        `current_split_perc = splitperc_self / 100`\n5.  **Define Utility Calculation:** The utility `U` of accepting the offer remains the core calculation, comparing the offered proportion to the fair proportion, penalized by inequity aversion `k`.\n    `U = current_split_perc - k * abs(current_split_perc - fair_perc)`\n6.  **Define Probability Calculation:** The probability of acceptance `P_accept` uses the logistic function with the calculated utility `U` and the new learnable temperature parameter `tau`.\n    `P_accept = 1 / (1 + exp(-U / tau))`\n7.  **Define Learnable Parameters and Bounds:**\n    *   `k` (inequity aversion): Must be non-negative. A range of [0, 10] provides flexibility while being finite and anchored at zero (no inequity aversion).\n    *   `tau` (temperature): Must be strictly positive. A range of [0.01, 5] allows for near-deterministic to highly stochastic choices and avoids numerical issues near zero.\n8.  **Define Target Variable:** The model predicts the probability of accepting, which is compared against the actual binary choice `accept` (1 for accept, 0 for reject).\n9.  **Structure Output:** Format the model, variables, target, and summary according to the specifications.\n\nThis step-by-step process leads directly to the specification below, incorporating the desired changes while maintaining the successful proportional framework.\n\n<MODEL>\nfair_perc = (token_self / (token_opp + token_self)) if (token_opp + token_self > 0) else 0.5\ncurrent_split_perc = splitperc_self / 100\nU = current_split_perc - k * abs(current_split_perc - fair_perc)\nP_accept = 1 / (1 + exp(-U / tau))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"P_accept\": {\n      \"description\": \"Probability of the participant accepting the proposed split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"U\": {\n      \"description\": \"Utility of accepting the proposed split, considering own share and inequity aversion relative to proportional fairness.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"k\": {\n      \"description\": \"Inequity aversion parameter. Scales the disutility associated with deviations (both advantageous and disadvantageous) from the proportionally fair split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"tau\": {\n      \"description\": \"Temperature parameter controlling choice stochasticity. Higher values lead to more random choices, lower values lead to more deterministic choices based on utility.\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fair_perc\": {\n        \"description\": \"Proportionally fair share for the participant based on relative token contributions (defaults to 0.5 if total tokens are 0).\",\n        \"range\": {\n            \"min\": 0,\n            \"max\": 1,\n            \"inclusive_min\": true,\n            \"inclusive_max\": true\n        },\n        \"learnable\": false,\n        \"source\": \"calculated\"\n    },\n     \"current_split_perc\": {\n        \"description\": \"The actual share offered to the participant, expressed as a proportion (0 to 1).\",\n        \"range\": {\n            \"min\": 0,\n            \"max\": 1,\n            \"inclusive_min\": true,\n            \"inclusive_max\": true\n        },\n        \"learnable\": false,\n        \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n        \"description\": \"The proposed share for the participant, expressed as a percentage (0-100).\",\n        \"range\": {\n            \"min\": 0,\n            \"max\": 100,\n            \"inclusive_min\": true,\n            \"inclusive_max\": true\n        },\n        \"learnable\": false,\n        \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model calculates the utility of accepting an offer based on the offered proportion (`splitperc_self / 100`) compared to a proportionally fair share derived from token contributions (`fair_perc`). Deviations from fairness are penalized by a single inequity aversion parameter (`k`). The resulting utility is transformed into acceptance probability using a logistic function with a learnable temperature parameter (`tau`) to account for choice stochasticity. It has two learnable parameters: `k` [0, 10] and `tau` [0.01, 5].\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['k', 'tau']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                fair_perc = (token_self / (token_opp + token_self)) if (token_opp + token_self > 0) else 0.5\ncurrent_split_perc = splitperc_self / 100\nU = current_split_perc - k * abs(current_split_perc - fair_perc)\nP_accept = 1 / (1 + exp(-U / tau))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"P_accept\": {\n      \"description\": \"Probability of the participant accepting the proposed split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed split, considering own share and inequity aversion relative to proportional fairness.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"k\": {\n      \"description\": \"Inequity aversion parameter. Scales the disutility associated with deviations (both advantageous and disadvantageous) from the proportionally fair split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"tau\": {\n      \"description\": \"Temperature parameter controlling choice stochasticity. Higher values lead to more random choices, lower values lead to more deterministic choices based on utility.\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fair_perc\": {\n      \"description\": \"Proportionally fair share for the participant based on relative token contributions (defaults to 0.5 if total tokens are 0).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"current_split_perc\": {\n      \"description\": \"The actual share offered to the participant, expressed as a proportion (0 to 1).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n      \"description\": \"The proposed share for the participant, expressed as a percentage (0-100).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, k=1, tau=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n\n        # Calculate fair proportion\n        fair_perc = (token_self / (token_opp + token_self)) if (token_opp + token_self > 0) else 0.5\n\n        # Calculate current split proportion\n        current_split_perc = splitperc_self / 100\n\n        # Calculate utility\n        U = current_split_perc - k * abs(current_split_perc - fair_perc)\n\n        # Calculate probability of acceptance\n        try:\n            P_accept = 1 / (1 + math.exp(-U / tau))\n        except OverflowError:\n            P_accept = 0.0 if (U / tau) > 0 else 1.0  # Handle potential overflow\n\n        model_predictions.append(P_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 20, \"split_opp\": 10.0, \"split_self\": 10.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 10.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 10.0}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 8, \"token_self\": 2, \"combined_earning\": 20, \"split_opp\": 16.0, \"split_self\": 4.0, \"splitperc_opp\": 80, \"splitperc_self\": 20, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 20.0, \"proposed_amount\": 4.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1744035206.249321
    }
  ],
  "learnable_parameters": {
    "k": {
      "description": "Inequity aversion parameter. Scales the disutility associated with deviations (both advantageous and disadvantageous) from the proportionally fair split.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "tau": {
      "description": "Temperature parameter controlling choice stochasticity. Higher values lead to more random choices, lower values lead to more deterministic choices based on utility.",
      "range": {
        "min": 0.01,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "fair_perc = (token_self / (token_opp + token_self)) if (token_opp + token_self > 0) else 0.5\ncurrent_split_perc = splitperc_self / 100\nU = current_split_perc - k * abs(current_split_perc - fair_perc)\nP_accept = 1 / (1 + exp(-U / tau))",
  "variable_descriptions": {
    "P_accept": {
      "description": "Probability of the participant accepting the proposed split.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Utility of accepting the proposed split, considering own share and inequity aversion relative to proportional fairness.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "k": {
      "description": "Inequity aversion parameter. Scales the disutility associated with deviations (both advantageous and disadvantageous) from the proportionally fair split.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "tau": {
      "description": "Temperature parameter controlling choice stochasticity. Higher values lead to more random choices, lower values lead to more deterministic choices based on utility.",
      "range": {
        "min": 0.01,
        "max": 5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fair_perc": {
      "description": "Proportionally fair share for the participant based on relative token contributions (defaults to 0.5 if total tokens are 0).",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "current_split_perc": {
      "description": "The actual share offered to the participant, expressed as a proportion (0 to 1).",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "token_self": {
      "description": "Number of tokens found by the participant, representing their contribution.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent, representing their contribution.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "splitperc_self": {
      "description": "The proposed share for the participant, expressed as a percentage (0-100).",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "This model calculates the utility of accepting an offer based on the offered proportion (`splitperc_self / 100`) compared to a proportionally fair share derived from token contributions (`fair_perc`). Deviations from fairness are penalized by a single inequity aversion parameter (`k`). The resulting utility is transformed into acceptance probability using a logistic function with a learnable temperature parameter (`tau`) to account for choice stochasticity. It has two learnable parameters: `k` [0, 10] and `tau` [0.01, 5].",
  "target_variable": "accept",
  "full_reasoning": "Okay, let's proceed with designing the computational model based on the analysis and prioritizing Model Idea 1 (adding a learnable temperature parameter `tau` to the successful proportional inequity model).\n\n**Step-by-step Thinking:**\n\n1.  **Identify the Base Model:** The previous successful model calculated utility based on the offered proportion (`split_perc`) relative to a fair proportion (`fair_perc` derived from token contributions), penalized by a single inequity aversion parameter (`k`). The formula was `U = split_perc - k * abs(split_perc - fair_perc)`, and probability was calculated with `tau=1`.\n2.  **Identify the Target Improvement:** Introduce individual variability in choice stochasticity by making the temperature parameter `tau` learnable. This allows the model to capture participants who are more deterministic (low `tau`) or more random (high `tau`) in their responses for a given utility level.\n3.  **Define Input Variables:**\n    *   `token_self`: Participant's contribution (from data).\n    *   `token_opp`: Opponent's contribution (from data).\n    *   `splitperc_self`: Percentage share offered to the participant (from data). Note: This is already a percentage (0-100), so it needs division by 100 for calculations where proportions range from 0 to 1.\n4.  **Define Intermediate Calculations:**\n    *   `fair_perc`: The proportion considered fair based on relative token contributions. Handle the case where total tokens are zero (assign 0.5, representing an equal split expectation when contributions are undefined/zero).\n        `fair_perc = token_self / (token_opp + token_self)` if `(token_opp + token_self) > 0` else `0.5`\n    *   `current_split_perc`: The offered proportion, normalized to the range [0, 1].\n        `current_split_perc = splitperc_self / 100`\n5.  **Define Utility Calculation:** The utility `U` of accepting the offer remains the core calculation, comparing the offered proportion to the fair proportion, penalized by inequity aversion `k`.\n    `U = current_split_perc - k * abs(current_split_perc - fair_perc)`\n6.  **Define Probability Calculation:** The probability of acceptance `P_accept` uses the logistic function with the calculated utility `U` and the new learnable temperature parameter `tau`.\n    `P_accept = 1 / (1 + exp(-U / tau))`\n7.  **Define Learnable Parameters and Bounds:**\n    *   `k` (inequity aversion): Must be non-negative. A range of [0, 10] provides flexibility while being finite and anchored at zero (no inequity aversion).\n    *   `tau` (temperature): Must be strictly positive. A range of [0.01, 5] allows for near-deterministic to highly stochastic choices and avoids numerical issues near zero.\n8.  **Define Target Variable:** The model predicts the probability of accepting, which is compared against the actual binary choice `accept` (1 for accept, 0 for reject).\n9.  **Structure Output:** Format the model, variables, target, and summary according to the specifications.\n\nThis step-by-step process leads directly to the specification below, incorporating the desired changes while maintaining the successful proportional framework.\n\n<MODEL>\nfair_perc = (token_self / (token_opp + token_self)) if (token_opp + token_self > 0) else 0.5\ncurrent_split_perc = splitperc_self / 100\nU = current_split_perc - k * abs(current_split_perc - fair_perc)\nP_accept = 1 / (1 + exp(-U / tau))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"P_accept\": {\n      \"description\": \"Probability of the participant accepting the proposed split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"U\": {\n      \"description\": \"Utility of accepting the proposed split, considering own share and inequity aversion relative to proportional fairness.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"k\": {\n      \"description\": \"Inequity aversion parameter. Scales the disutility associated with deviations (both advantageous and disadvantageous) from the proportionally fair split.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"tau\": {\n      \"description\": \"Temperature parameter controlling choice stochasticity. Higher values lead to more random choices, lower values lead to more deterministic choices based on utility.\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fair_perc\": {\n        \"description\": \"Proportionally fair share for the participant based on relative token contributions (defaults to 0.5 if total tokens are 0).\",\n        \"range\": {\n            \"min\": 0,\n            \"max\": 1,\n            \"inclusive_min\": true,\n            \"inclusive_max\": true\n        },\n        \"learnable\": false,\n        \"source\": \"calculated\"\n    },\n     \"current_split_perc\": {\n        \"description\": \"The actual share offered to the participant, expressed as a proportion (0 to 1).\",\n        \"range\": {\n            \"min\": 0,\n            \"max\": 1,\n            \"inclusive_min\": true,\n            \"inclusive_max\": true\n        },\n        \"learnable\": false,\n        \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"splitperc_self\": {\n        \"description\": \"The proposed share for the participant, expressed as a percentage (0-100).\",\n        \"range\": {\n            \"min\": 0,\n            \"max\": 100,\n            \"inclusive_min\": true,\n            \"inclusive_max\": true\n        },\n        \"learnable\": false,\n        \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model calculates the utility of accepting an offer based on the offered proportion (`splitperc_self / 100`) compared to a proportionally fair share derived from token contributions (`fair_perc`). Deviations from fairness are penalized by a single inequity aversion parameter (`k`). The resulting utility is transformed into acceptance probability using a logistic function with a learnable temperature parameter (`tau`) to account for choice stochasticity. It has two learnable parameters: `k` [0, 10] and `tau` [0.01, 5].\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: fair_perc = (token_self / (token_opp + token_self)) if (token_opp + token_self > 0) else 0.5\ncurrent_split_perc = splitperc_self / 100\nU = current_split_perc - k * abs(current_split_perc - fair_perc)\nP_accept = 1 / (1 + exp(-U / tau))\nSummary: This model calculates the utility of accepting an offer based on the offered proportion (`splitperc_self / 100`) compared to a proportionally fair share derived from token contributions (`fair_perc`). Deviations from fairness are penalized by a single inequity aversion parameter (`k`). The resulting utility is transformed into acceptance probability using a logistic function with a learnable temperature parameter (`tau`) to account for choice stochasticity. It has two learnable parameters: `k` [0, 10] and `tau` [0.01, 5].\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, k=1, tau=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        splitperc_self = trial.get(\"splitperc_self\", 0)\n\n        # Calculate fair proportion\n        fair_perc = (token_self / (token_opp + token_self)) if (token_opp + token_self > 0) else 0.5\n\n        # Calculate current split proportion\n        current_split_perc = splitperc_self / 100\n\n        # Calculate utility\n        U = current_split_perc - k * abs(current_split_perc - fair_perc)\n\n        # Calculate probability of acceptance\n        try:\n            P_accept = 1 / (1 + math.exp(-U / tau))\n        except OverflowError:\n            P_accept = 0.0 if (U / tau) > 0 else 1.0  # Handle potential overflow\n\n        model_predictions.append(P_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5824175824175825,
  "fitting_results": [
    {
      "k": 10.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -25.2282696115423,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 2.646491189427537,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -20.41888772731842,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 2.148555877076321,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -19.69170087636862,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 4.547718230252935,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -23.294122285269587,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 2.503047757960407,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -20.400383205907342,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 1.2214309168139323,
      "tau": 0.01574952703457014,
      "success": true,
      "log_likelihood": -18.57254282743627,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.0,
      "tau": 0.010000000000000033,
      "success": true,
      "log_likelihood": -11.277457377790016,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 1.168081643414192,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -18.597098048197292,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -11.277457377790018,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 2.6465581082786045,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -21.418886410561566,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 1.6687086049107602,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -19.128174883174122,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 10.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -25.22826930564008,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 2.1494206591310587,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -19.69259823035034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -11.277457377790014,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -11.277457377790018,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -11.277457377790018,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -11.277457377790016,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.4743632715824368,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -13.936561085694334,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.4710132080379587,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -13.924259149980243,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -11.277457377790018,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 2.1492650613726987,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -19.692419900107506,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.39296965171086046,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -14.542251534229786,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 10.0,
      "tau": 0.010000000000000012,
      "success": true,
      "log_likelihood": -24.228269611774717,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 2.148712762403929,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -20.69187852689354,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 2.5024833415365206,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -20.40038338427601,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 1.2178297090204933,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -19.60926054993352,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 1.8714779327339846,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -19.30163229643342,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 2.8873748557843766,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -22.27236375130151,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.2342008690334177,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -14.85592374116466,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 1.162325692699665,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -17.598334124228668,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -11.27745737779002,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 10.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -25.2282696115423,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 2.88715141989003,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -24.27213232316281,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 4.552223267887359,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -23.294118052032243,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -11.277457377790016,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.7265231009163465,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -19.687390423146457,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.9980195222806447,
      "tau": 0.021517017638813765,
      "success": true,
      "log_likelihood": -17.42632287209343,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 2.6464939466969493,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -20.41888731347104,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 2.149268982018555,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -19.692422186513916,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.0,
      "tau": 0.03685397860045391,
      "success": true,
      "log_likelihood": -14.27057546625671,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 1.870633765965364,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -19.301100021819654,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 7.925545836218361,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -23.458171439854738,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -12.277457377554883,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 1.2683118277109287,
      "tau": 0.044920147584442294,
      "success": true,
      "log_likelihood": -21.495235614544523,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 1.2212659606858882,
      "tau": 0.015846742371156946,
      "success": true,
      "log_likelihood": -19.572430902237606,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.47378638505288806,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -18.939640445373325,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 2.1498784678275644,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -20.691760100079154,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 4.594697237338262,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -23.294128566223122,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 2.503227317881838,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -21.400382920254582,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 1.8715526172264934,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -23.30155750660872,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.7647947079868144,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -19.842788272342688,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 10.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -25.228269611542302,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 1.8715354923679375,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -21.30154991686513,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 1.2872659765687586,
      "tau": 0.14596487338381417,
      "success": true,
      "log_likelihood": -23.552176661549993,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 7.507602980069511,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -23.438776522937836,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 4.53683022813788,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -22.29412225783364,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 10.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -24.193824110213175,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -15.277457374788701,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 10.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -25.22826961154231,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.47436273725171135,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -16.936531644689982,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 1.8629167267303122,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -20.29423354180953,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 2.149417771319326,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -19.69259591349485,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 10.0,
      "tau": 0.010000000000000005,
      "success": true,
      "log_likelihood": -25.22826961154231,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 1.373074693677477,
      "tau": 0.025983312596963994,
      "success": true,
      "log_likelihood": -23.532024225612307,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 10.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -24.22826930587249,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 1.8714794993006685,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -19.301632296411114,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.0,
      "tau": 0.04275313855544816,
      "success": true,
      "log_likelihood": -14.26592615551006,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.4737541419903461,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -14.939513925196835,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 2.5024256441723427,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -21.40034533918304,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -14.277457372962584,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 10.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -24.228269611774724,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 10.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -25.22826961154231,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 1.8714827814003547,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -20.30163229617889,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.7645933334030511,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -16.846643361255172,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 3.023101736647768,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -22.374387724998343,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 1.2066604808748327,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -18.612395279688176,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -13.277457375244893,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 10.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -25.228269611542306,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 4.545190744680697,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -22.294125084482882,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 10.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -25.228269611542306,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 10.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -24.193824110213175,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -14.27745737502355,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 10.0,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -25.228269305640072,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 1.2822343745359317,
      "tau": 0.012867645323355414,
      "success": true,
      "log_likelihood": -20.579976097768476,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 3.0230639920020876,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -22.37441982053137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 10.0,
      "tau": 0.010000000000000004,
      "success": true,
      "log_likelihood": -25.228269611539677,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 1.2749597491951428,
      "tau": 0.01533535733387003,
      "success": true,
      "log_likelihood": -19.573348392052573,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 4.898690864061344,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -23.294414460591387,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 0.007424393179689171,
      "tau": 0.03436498833086641,
      "success": true,
      "log_likelihood": -13.272833427582093,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 1.3895113061328108,
      "tau": 0.03801308972476296,
      "success": true,
      "log_likelihood": -22.475670289535994,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "n_trials": 36
    },
    {
      "k": 1.1641885317596574,
      "tau": 0.01,
      "success": true,
      "log_likelihood": -20.597803172931933,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "k": {
        "r": 0.4213959875454138,
        "p": 1.2648348003221294e-05
      },
      "tau": {
        "r": -0.25685467034369197,
        "p": 0.009888973452508014
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 46.318985347554516,
  "bic_results": {
    "average_bic": 46.318985347554516,
    "individual_bics": [
      57.623577099996815,
      48.00481333154906,
      46.55043962964946,
      53.75528244745139,
      47.9678042887269,
      44.312123531784756,
      29.721952632492254,
      44.3612339733068,
      29.721952632492254,
      50.00481069803535,
      45.42338764326046,
      57.62357648819238,
      46.5522343376129,
      29.721952632492247,
      29.721952632492254,
      29.721952632492254,
      29.721952632492254,
      35.04016004830089,
      35.01555617687271,
      29.721952632492254,
      46.55187767712723,
      36.251540945371794,
      55.62357710046165,
      48.5507949306993,
      47.96780464546424,
      46.38555897677926,
      45.77030246977906,
      51.711765379515235,
      36.878885359241536,
      42.36370612536955,
      29.72195263249226,
      57.623577099996815,
      55.71130252323784,
      53.7552739809767,
      29.721952632492254,
      46.54181872320513,
      42.01968362109908,
      48.004812503854296,
      46.55188224994005,
      35.70818880942564,
      45.769237920551525,
      54.08338075662169,
      31.72195263202199,
      50.157509106001264,
      46.31189968138743,
      45.04631876765887,
      48.55055807707053,
      53.75529500935846,
      49.96780371742138,
      53.77015289012966,
      46.85261442159759,
      57.62357709999682,
      49.77013771064248,
      54.271391200012204,
      54.04459092278789,
      51.755282392579495,
      55.55468609733857,
      37.721952626489625,
      57.62357709999684,
      41.04010116629218,
      47.755504960531276,
      46.552229703901915,
      57.62357709999684,
      54.23108632813683,
      55.6235764886572,
      45.770302469734446,
      35.69889018793234,
      37.04606572730589,
      49.9677285552783,
      35.721952622837385,
      55.62357710046167,
      57.62357709999684,
      47.77030246927,
      40.86032459942256,
      51.9158133269089,
      44.39182843628857,
      33.721952627402004,
      57.62357709999683,
      51.75528804587798,
      57.62357709999683,
      55.55468609733857,
      35.72195262695932,
      57.62357648819236,
      48.32699007244917,
      51.915877517974955,
      57.62357709999157,
      46.313734661017364,
      53.75586679809499,
      33.7127047320764,
      52.11837845598421,
      48.36264422277608
    ],
    "group_enabled": false,
    "group_bics": null,
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- k: r = 0.421\n- tau: r = -0.257",
  "previous_models": [
    "Specification: fair_perc = (token_self / (token_opp + token_self)) if (token_opp + token_self > 0) else 0.5\ncurrent_split_perc = splitperc_self / 100\nU = current_split_perc - k * abs(current_split_perc - fair_perc)\nP_accept = 1 / (1 + exp(-U / tau))\nSummary: This model calculates the utility of accepting an offer based on the offered proportion (`splitperc_self / 100`) compared to a proportionally fair share derived from token contributions (`fair_perc`). Deviations from fairness are penalized by a single inequity aversion parameter (`k`). The resulting utility is transformed into acceptance probability using a logistic function with a learnable temperature parameter (`tau`) to account for choice stochasticity. It has two learnable parameters: `k` [0, 10] and `tau` [0.01, 5].\nTarget Variable: accept\nPrediction Type: utility\nBIC: 46.318985347554516\nOverall Accuracy: 0.5824\n\nParameter Recovery:\n- k: r = 0.421\n- tau: r = -0.257"
  ]
}