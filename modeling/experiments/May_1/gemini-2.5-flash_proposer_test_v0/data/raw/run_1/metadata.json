{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Be VERY considerate of high covariance between learnable parameters as the model. Have an appropriate number or learnable parameters, with a slight bias for less learnable paramters.\n\nFirst, reason step by step about:\n* The key psychological mechanisms involved\n* How these mechanisms interact\n* What mathematical form could capture these interactions\n* What parameters would be needed to calibrate the model\n* How the model variables map to observable behavior\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, expert Computational Modeler at your service! Modeling behavior in economic games like the Ultimatum Game is fascinating, as it bridges rational choice theory with psychological factors like fairness and social preferences. For this specific task, where the participant acts as a responder, the key psychological mechanisms are the trade-off between maximizing monetary gain and adhering to fairness norms.\n\nThe participant receives a proposed split (`split_self`) of the total shared pot (`combined_earning`). A purely rational agent would accept any positive offer, as the alternative (rejection) yields zero. However, humans often reject offers perceived as unfair, even at a personal cost. This implies a utility function that incorporates not just the absolute gain (`split_self`), but also the deviation from a perceived fair share.\n\nCommon fairness benchmarks include the equal split (50/50) and a split proportional to contributions (`token_self`, `token_opp`). The `trial_type` variable explicitly categorizes trials based on relative contributions, strongly suggesting that contribution information is relevant to fairness perceptions.\n\nA plausible model would calculate the utility of accepting an offer by considering the value of the offer itself and penalizing deviations from a fairness norm. The equal split (`combined_earning / 2`) is a very common fairness benchmark in the Ultimatum Game. Offers below this benchmark are typically seen as unfair and incur a utility penalty. Offers above or equal to this benchmark might not incur a penalty, or perhaps a smaller one (though penalizing advantageous inequality is less common in simple responder models). Let's start with a model that penalizes only disadvantageous deviations from the equal split.\n\nFurthermore, the sensitivity to this unfairness penalty might depend on the contribution context (`trial_type`). For example, rejecting a 40% offer when you contributed more than the opponent (Type 3) might feel more justified than rejecting the same 40% offer when the opponent contributed more (Type 2). This suggests the 'weight' given to the unfairness penalty could vary by `trial_type`.\n\nThus, the utility of accepting an offer could be modeled as:\n`U_accept = (sensitivity to self gain) * split_self - (sensitivity to unfairness for this trial type) * max(0, (equal split) - split_self)`\n\nThis structure captures:\n1.  Utility increases with the proposed amount for self (`split_self`).\n2.  A penalty is incurred only when `split_self` is below the 50/50 split (`combined_earning / 2`).\n3.  The strength of this penalty depends on the `trial_type`.\n\nThis model requires one parameter for gain sensitivity (`rho`) and three parameters for type-specific unfairness sensitivity (`phi_1`, `phi_2`, `phi_3`). These parameters should be non-negative, reflecting that higher own gain is good and deviations below fairness are bad (or neutral if sensitivity is 0).\n\nThe predicted utility `U_accept` will then be passed through a logistic function (with temperature 1) to get the probability of acceptance: `P(accept=1) = 1 / (1 + exp(-U_accept))`. This naturally fulfills the requirement that utility < 0 corresponds to probability < 0.5.\n\nThis model uses `split_self`, `combined_earning`, and `trial_type` from the data, along with four learnable parameters. It operates only on responder trials (`trial_role == 1`). It avoids using proposer-specific data (`proposed_perc`) as input, adhering to the focus on responder behavior. The number of parameters (4) relative to the number of responder trials (36) seems reasonable for parameter recovery, assuming sufficient variation in the input variables across trials. The model structure, separating gain from loss/penalty relative to a benchmark, also helps with parameter identifiability.\n\n<MODEL>\nI_type1 = (trial_type == 1) ? 1 : 0\nI_type2 = (trial_type == 2) ? 1 : 0\nI_type3 = (trial_type == 3) ? 1 : 0\nunfairness_deviation = (combined_earning / 2) - split_self\npenalty_amount = max(0, unfairness_deviation)\nphi_type = phi_1 * I_type1 + phi_2 * I_type2 + phi_3 * I_type3\nU_accept = rho * split_self - phi_type * penalty_amount\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"rho\": {\n      \"description\": \"Sensitivity parameter for own gain (split_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi_1\": {\n      \"description\": \"Sensitivity parameter for unfairness penalty when contribution type is equal (trial_type = 1)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi_2\": {\n      \"description\": \"Sensitivity parameter for unfairness penalty when opponent contributed more (trial_type = 2)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi_3\": {\n      \"description\": \"Sensitivity parameter for unfairness penalty when participant contributed more (trial_type = 3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"The total amount of money earned in the trial (in \u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type\": {\n      \"description\": \"Categorization of contribution relative amounts [1 = equal, 2 = opponent more, 3 = participant more]\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"I_type1\": {\n      \"description\": \"Indicator variable, 1 if trial_type is 1, 0 otherwise\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"I_type2\": {\n      \"description\": \"Indicator variable, 1 if trial_type is 2, 0 otherwise\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"I_type3\": {\n      \"description\": \"Indicator variable, 1 if trial_type is 3, 0 otherwise\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"unfairness_deviation\": {\n      \"description\": \"The difference between the 50/50 split and the proposed share for the participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"penalty_amount\": {\n      \"description\": \"The magnitude of the unfairness penalty; 0 if the proposed share is >= 50/50 split, otherwise the difference between 50/50 and the proposed share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model for predicting responder acceptance decisions. The utility of accepting an offer is determined by the proposed amount for the participant and a penalty for offers falling below an equal (50/50) split of the total pot. The sensitivity to this unfairness penalty is parameterized independently based on the trial's contribution type (equal, opponent more, participant more), allowing for context-dependent fairness preferences. The model has four learnable parameters: one for the sensitivity to own gain and three for the type-specific sensitivities to unfairness. Utility is mapped to the probability of acceptance via a logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['rho', 'phi_1', 'phi_2', 'phi_3']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                I_type1 = (trial_type == 1) ? 1 : 0\nI_type2 = (trial_type == 2) ? 1 : 0\nI_type3 = (trial_type == 3) ? 1 : 0\nunfairness_deviation = (combined_earning / 2) - split_self\npenalty_amount = max(0, unfairness_deviation)\nphi_type = phi_1 * I_type1 + phi_2 * I_type2 + phi_3 * I_type3\nU_accept = rho * split_self - phi_type * penalty_amount\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"rho\": {\n      \"description\": \"Sensitivity parameter for own gain (split_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi_1\": {\n      \"description\": \"Sensitivity parameter for unfairness penalty when contribution type is equal (trial_type = 1)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi_2\": {\n      \"description\": \"Sensitivity parameter for unfairness penalty when opponent contributed more (trial_type = 2)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi_3\": {\n      \"description\": \"Sensitivity parameter for unfairness penalty when participant contributed more (trial_type = 3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"The total amount of money earned in the trial (in \\u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type\": {\n      \"description\": \"Categorization of contribution relative amounts [1 = equal, 2 = opponent more, 3 = participant more]\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"I_type1\": {\n      \"description\": \"Indicator variable, 1 if trial_type is 1, 0 otherwise\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"I_type2\": {\n      \"description\": \"Indicator variable, 1 if trial_type is 2, 0 otherwise\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"I_type3\": {\n      \"description\": \"Indicator variable, 1 if trial_type is 3, 0 otherwise\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"unfairness_deviation\": {\n      \"description\": \"The difference between the 50/50 split and the proposed share for the participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"penalty_amount\": {\n      \"description\": \"The magnitude of the unfairness penalty; 0 if the proposed share is >= 50/50 split, otherwise the difference between 50/50 and the proposed share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, rho=1, phi_1=1, phi_2=1, phi_3=1):\n    model_predictions = []\n    for trial in trial_data:\n        trial_type = trial.get(\"trial_type\", 1)\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        I_type1 = 1 if trial_type == 1 else 0\n        I_type2 = 1 if trial_type == 2 else 0\n        I_type3 = 1 if trial_type == 3 else 0\n\n        unfairness_deviation = (combined_earning / 2) - split_self\n        penalty_amount = max(0, unfairness_deviation)\n        phi_type = (phi_1 * I_type1) + (phi_2 * I_type2) + (phi_3 * I_type3)\n        U_accept = (rho * split_self) - (phi_type * penalty_amount)\n\n        model_predictions.append(U_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 1, \"group\": \"1\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 10, \"token_self\": 10, \"combined_earning\": 20, \"split_opp\": 10.0, \"split_self\": 10.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 10.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 10.0}, {\"ID\": 2, \"group\": \"1\", \"trial_number\": 2, \"trial_type\": 2, \"trial_role\": 1, \"token_opp\": 15, \"token_self\": 5, \"combined_earning\": 20, \"split_opp\": 12.0, \"split_self\": 8.0, \"splitperc_opp\": 60, \"splitperc_self\": 40, \"accept\": 1.0, \"accepted_amount\": 8.0, \"accepted_perc\": 40.0, \"proposed_perc\": 40.0, \"proposed_amount\": 8.0}, {\"ID\": 3, \"group\": \"1\", \"trial_number\": 3, \"trial_type\": 3, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 15, \"combined_earning\": 20, \"split_opp\": 8.0, \"split_self\": 12.0, \"splitperc_opp\": 40, \"splitperc_self\": 60, \"accept\": 1.0, \"accepted_amount\": 12.0, \"accepted_perc\": 60.0, \"proposed_perc\": 60.0, \"proposed_amount\": 12.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1746107877.085176
    }
  ],
  "learnable_parameters": {
    "rho": {
      "description": "Sensitivity parameter for own gain (split_self)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi_1": {
      "description": "Sensitivity parameter for unfairness penalty when contribution type is equal (trial_type = 1)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi_2": {
      "description": "Sensitivity parameter for unfairness penalty when opponent contributed more (trial_type = 2)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi_3": {
      "description": "Sensitivity parameter for unfairness penalty when participant contributed more (trial_type = 3)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "I_type1 = (trial_type == 1) ? 1 : 0\nI_type2 = (trial_type == 2) ? 1 : 0\nI_type3 = (trial_type == 3) ? 1 : 0\nunfairness_deviation = (combined_earning / 2) - split_self\npenalty_amount = max(0, unfairness_deviation)\nphi_type = phi_1 * I_type1 + phi_2 * I_type2 + phi_3 * I_type3\nU_accept = rho * split_self - phi_type * penalty_amount",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting the proposed offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "rho": {
      "description": "Sensitivity parameter for own gain (split_self)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi_1": {
      "description": "Sensitivity parameter for unfairness penalty when contribution type is equal (trial_type = 1)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi_2": {
      "description": "Sensitivity parameter for unfairness penalty when opponent contributed more (trial_type = 2)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "phi_3": {
      "description": "Sensitivity parameter for unfairness penalty when participant contributed more (trial_type = 3)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "The proposed share for the participant (in \u00a3)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "combined_earning": {
      "description": "The total amount of money earned in the trial (in \u00a3)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "trial_type": {
      "description": "Categorization of contribution relative amounts [1 = equal, 2 = opponent more, 3 = participant more]",
      "range": {
        "min": 1,
        "max": 3,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "I_type1": {
      "description": "Indicator variable, 1 if trial_type is 1, 0 otherwise",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "I_type2": {
      "description": "Indicator variable, 1 if trial_type is 2, 0 otherwise",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "I_type3": {
      "description": "Indicator variable, 1 if trial_type is 3, 0 otherwise",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "unfairness_deviation": {
      "description": "The difference between the 50/50 split and the proposed share for the participant",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "penalty_amount": {
      "description": "The magnitude of the unfairness penalty; 0 if the proposed share is >= 50/50 split, otherwise the difference between 50/50 and the proposed share",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A utility model for predicting responder acceptance decisions. The utility of accepting an offer is determined by the proposed amount for the participant and a penalty for offers falling below an equal (50/50) split of the total pot. The sensitivity to this unfairness penalty is parameterized independently based on the trial's contribution type (equal, opponent more, participant more), allowing for context-dependent fairness preferences. The model has four learnable parameters: one for the sensitivity to own gain and three for the type-specific sensitivities to unfairness. Utility is mapped to the probability of acceptance via a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "Okay, expert Computational Modeler at your service! Modeling behavior in economic games like the Ultimatum Game is fascinating, as it bridges rational choice theory with psychological factors like fairness and social preferences. For this specific task, where the participant acts as a responder, the key psychological mechanisms are the trade-off between maximizing monetary gain and adhering to fairness norms.\n\nThe participant receives a proposed split (`split_self`) of the total shared pot (`combined_earning`). A purely rational agent would accept any positive offer, as the alternative (rejection) yields zero. However, humans often reject offers perceived as unfair, even at a personal cost. This implies a utility function that incorporates not just the absolute gain (`split_self`), but also the deviation from a perceived fair share.\n\nCommon fairness benchmarks include the equal split (50/50) and a split proportional to contributions (`token_self`, `token_opp`). The `trial_type` variable explicitly categorizes trials based on relative contributions, strongly suggesting that contribution information is relevant to fairness perceptions.\n\nA plausible model would calculate the utility of accepting an offer by considering the value of the offer itself and penalizing deviations from a fairness norm. The equal split (`combined_earning / 2`) is a very common fairness benchmark in the Ultimatum Game. Offers below this benchmark are typically seen as unfair and incur a utility penalty. Offers above or equal to this benchmark might not incur a penalty, or perhaps a smaller one (though penalizing advantageous inequality is less common in simple responder models). Let's start with a model that penalizes only disadvantageous deviations from the equal split.\n\nFurthermore, the sensitivity to this unfairness penalty might depend on the contribution context (`trial_type`). For example, rejecting a 40% offer when you contributed more than the opponent (Type 3) might feel more justified than rejecting the same 40% offer when the opponent contributed more (Type 2). This suggests the 'weight' given to the unfairness penalty could vary by `trial_type`.\n\nThus, the utility of accepting an offer could be modeled as:\n`U_accept = (sensitivity to self gain) * split_self - (sensitivity to unfairness for this trial type) * max(0, (equal split) - split_self)`\n\nThis structure captures:\n1.  Utility increases with the proposed amount for self (`split_self`).\n2.  A penalty is incurred only when `split_self` is below the 50/50 split (`combined_earning / 2`).\n3.  The strength of this penalty depends on the `trial_type`.\n\nThis model requires one parameter for gain sensitivity (`rho`) and three parameters for type-specific unfairness sensitivity (`phi_1`, `phi_2`, `phi_3`). These parameters should be non-negative, reflecting that higher own gain is good and deviations below fairness are bad (or neutral if sensitivity is 0).\n\nThe predicted utility `U_accept` will then be passed through a logistic function (with temperature 1) to get the probability of acceptance: `P(accept=1) = 1 / (1 + exp(-U_accept))`. This naturally fulfills the requirement that utility < 0 corresponds to probability < 0.5.\n\nThis model uses `split_self`, `combined_earning`, and `trial_type` from the data, along with four learnable parameters. It operates only on responder trials (`trial_role == 1`). It avoids using proposer-specific data (`proposed_perc`) as input, adhering to the focus on responder behavior. The number of parameters (4) relative to the number of responder trials (36) seems reasonable for parameter recovery, assuming sufficient variation in the input variables across trials. The model structure, separating gain from loss/penalty relative to a benchmark, also helps with parameter identifiability.\n\n<MODEL>\nI_type1 = (trial_type == 1) ? 1 : 0\nI_type2 = (trial_type == 2) ? 1 : 0\nI_type3 = (trial_type == 3) ? 1 : 0\nunfairness_deviation = (combined_earning / 2) - split_self\npenalty_amount = max(0, unfairness_deviation)\nphi_type = phi_1 * I_type1 + phi_2 * I_type2 + phi_3 * I_type3\nU_accept = rho * split_self - phi_type * penalty_amount\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"rho\": {\n      \"description\": \"Sensitivity parameter for own gain (split_self)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi_1\": {\n      \"description\": \"Sensitivity parameter for unfairness penalty when contribution type is equal (trial_type = 1)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi_2\": {\n      \"description\": \"Sensitivity parameter for unfairness penalty when opponent contributed more (trial_type = 2)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"phi_3\": {\n      \"description\": \"Sensitivity parameter for unfairness penalty when participant contributed more (trial_type = 3)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"combined_earning\": {\n      \"description\": \"The total amount of money earned in the trial (in \u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"trial_type\": {\n      \"description\": \"Categorization of contribution relative amounts [1 = equal, 2 = opponent more, 3 = participant more]\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 3\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"I_type1\": {\n      \"description\": \"Indicator variable, 1 if trial_type is 1, 0 otherwise\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"I_type2\": {\n      \"description\": \"Indicator variable, 1 if trial_type is 2, 0 otherwise\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"I_type3\": {\n      \"description\": \"Indicator variable, 1 if trial_type is 3, 0 otherwise\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"unfairness_deviation\": {\n      \"description\": \"The difference between the 50/50 split and the proposed share for the participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"penalty_amount\": {\n      \"description\": \"The magnitude of the unfairness penalty; 0 if the proposed share is >= 50/50 split, otherwise the difference between 50/50 and the proposed share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model for predicting responder acceptance decisions. The utility of accepting an offer is determined by the proposed amount for the participant and a penalty for offers falling below an equal (50/50) split of the total pot. The sensitivity to this unfairness penalty is parameterized independently based on the trial's contribution type (equal, opponent more, participant more), allowing for context-dependent fairness preferences. The model has four learnable parameters: one for the sensitivity to own gain and three for the type-specific sensitivities to unfairness. Utility is mapped to the probability of acceptance via a logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: I_type1 = (trial_type == 1) ? 1 : 0\nI_type2 = (trial_type == 2) ? 1 : 0\nI_type3 = (trial_type == 3) ? 1 : 0\nunfairness_deviation = (combined_earning / 2) - split_self\npenalty_amount = max(0, unfairness_deviation)\nphi_type = phi_1 * I_type1 + phi_2 * I_type2 + phi_3 * I_type3\nU_accept = rho * split_self - phi_type * penalty_amount\nSummary: A utility model for predicting responder acceptance decisions. The utility of accepting an offer is determined by the proposed amount for the participant and a penalty for offers falling below an equal (50/50) split of the total pot. The sensitivity to this unfairness penalty is parameterized independently based on the trial's contribution type (equal, opponent more, participant more), allowing for context-dependent fairness preferences. The model has four learnable parameters: one for the sensitivity to own gain and three for the type-specific sensitivities to unfairness. Utility is mapped to the probability of acceptance via a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, rho=1, phi_1=1, phi_2=1, phi_3=1):\n    model_predictions = []\n    for trial in trial_data:\n        trial_type = trial.get(\"trial_type\", 1)\n        split_self = trial.get(\"split_self\", 0)\n        combined_earning = trial.get(\"combined_earning\", 0)\n\n        I_type1 = 1 if trial_type == 1 else 0\n        I_type2 = 1 if trial_type == 2 else 0\n        I_type3 = 1 if trial_type == 3 else 0\n\n        unfairness_deviation = (combined_earning / 2) - split_self\n        penalty_amount = max(0, unfairness_deviation)\n        phi_type = (phi_1 * I_type1) + (phi_2 * I_type2) + (phi_3 * I_type3)\n        U_accept = (rho * split_self) - (phi_type * penalty_amount)\n\n        model_predictions.append(U_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.8547008547008547,
  "group_accuracies": {
    "Control": 0.8733850129198967,
    "Cocaine": 0.8379629629629629
  },
  "group_parameter_averages": {
    "Control": {
      "rho": 54.71066696799889,
      "phi_1": 37.86736610791851,
      "phi_2": 48.54919964106446,
      "phi_3": 32.77027642741825
    },
    "Cocaine": {
      "rho": 42.123917757559305,
      "phi_1": 43.89435299286736,
      "phi_2": 49.96090030202151,
      "phi_3": 48.48040471060881
    }
  },
  "fitting_results": [
    {
      "rho": 3.668801854058622,
      "phi_1": 36.135282015595074,
      "phi_2": 43.526849910949934,
      "phi_3": 44.76705588857795,
      "success": true,
      "log_likelihood": -2.6902312178484074e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 0.5884952955489264,
      "phi_1": 1.284405104457971,
      "phi_2": 1.0453598700459235,
      "phi_3": 0.49986473280785165,
      "success": true,
      "log_likelihood": -16.308124355667363,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 58.634014844304176,
      "phi_1": 97.70628892427577,
      "phi_2": 98.38025051237999,
      "phi_3": 39.22333027235998,
      "success": true,
      "log_likelihood": -116.45600436552654,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 1.0977364176879556,
      "phi_1": 2.914140375742004,
      "phi_2": 2.6819580035042017,
      "phi_3": 0.9558136772798654,
      "success": true,
      "log_likelihood": -10.283699795959482,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 14.224074402912507,
      "phi_1": 33.189467372992986,
      "phi_2": 71.31022330653678,
      "phi_3": 5.485016592124461,
      "success": true,
      "log_likelihood": -1.386327963753575,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 63.46134646928649,
      "phi_1": 19.397719376078797,
      "phi_2": 50.04912844282815,
      "phi_3": 89.8926049736211,
      "success": true,
      "log_likelihood": -184.2069514609651,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 87.76201494529428,
      "phi_1": 51.96319333586871,
      "phi_2": 16.86358251286621,
      "phi_3": 16.293432855857027,
      "success": true,
      "log_likelihood": -23.02585857750248,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 65.81257739481238,
      "phi_1": 77.4614744011436,
      "phi_2": 52.159725424708206,
      "phi_3": 0.9683938248591706,
      "success": true,
      "log_likelihood": -138.07446226089627,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 100.0,
      "phi_1": 60.616368493264915,
      "phi_2": 20.816069603071195,
      "phi_3": 0.0,
      "success": true,
      "log_likelihood": -23.025869560365322,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 37.70635343985083,
      "phi_1": 94.55689798934144,
      "phi_2": 87.98151774319925,
      "phi_3": 37.867147198610795,
      "success": true,
      "log_likelihood": -71.79059685221466,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 61.2814206083142,
      "phi_1": 44.70474048485308,
      "phi_2": 97.85122591163015,
      "phi_3": 83.89800068175872,
      "success": true,
      "log_likelihood": -207.2336834556979,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 2.747217988634461,
      "phi_1": 29.98454436800553,
      "phi_2": 32.360354383035194,
      "phi_3": 48.69754361858637,
      "success": true,
      "log_likelihood": -23.02587070762751,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 15.57734257984013,
      "phi_1": 30.84153323132407,
      "phi_2": 80.83089861960248,
      "phi_3": 15.73811371187612,
      "success": true,
      "log_likelihood": -24.35282717934805,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 100.0,
      "phi_1": 0.0,
      "phi_2": 0.0,
      "phi_3": 11.564878560184514,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 100.0,
      "phi_1": 0.0,
      "phi_2": 62.4674165445837,
      "phi_3": 0.0,
      "success": true,
      "log_likelihood": -23.02586284445066,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 100.0,
      "phi_1": 11.912291457980878,
      "phi_2": 37.426146408525696,
      "phi_3": 50.780802792736694,
      "success": true,
      "log_likelihood": -46.05170185648093,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 73.48802774041648,
      "phi_1": 8.059743866151937,
      "phi_2": 29.06628171218128,
      "phi_3": 25.74066476438611,
      "success": true,
      "log_likelihood": -46.051701855851434,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 97.86615501717652,
      "phi_1": 65.01100001550913,
      "phi_2": 65.11014873982644,
      "phi_3": 27.040917985152923,
      "success": true,
      "log_likelihood": -2.610654070135135,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 98.03067296811952,
      "phi_1": 59.24911580079776,
      "phi_2": 98.19143791045285,
      "phi_3": 19.453857855428723,
      "success": true,
      "log_likelihood": -24.352614884573068,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 100.0,
      "phi_1": 0.0,
      "phi_2": 37.6390154814669,
      "phi_3": 0.0,
      "success": true,
      "log_likelihood": -23.025850926440462,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 64.51920268752531,
      "phi_1": 76.6274269280104,
      "phi_2": 42.87881657651944,
      "phi_3": 64.67997992170578,
      "success": true,
      "log_likelihood": -209.88615081264572,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 82.75385060292442,
      "phi_1": 43.65766518361384,
      "phi_2": 30.295642883656157,
      "phi_3": 30.51977668294323,
      "success": true,
      "log_likelihood": -46.05170185748331,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 25.360060766339064,
      "phi_1": 37.65884072113531,
      "phi_2": 55.06834878680009,
      "phi_3": 63.978093745069714,
      "success": true,
      "log_likelihood": -24.199839237598766,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 98.4528850387896,
      "phi_1": 29.447034851348796,
      "phi_2": 65.50128890898095,
      "phi_3": 37.57011630155883,
      "success": true,
      "log_likelihood": -300.6628091486272,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 1.9660257112811244,
      "phi_1": 3.985562541478325,
      "phi_2": 48.48914819608451,
      "phi_3": 0.7479272578053873,
      "success": true,
      "log_likelihood": -26.907915285721625,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 55.644489536983514,
      "phi_1": 42.621638959438364,
      "phi_2": 89.39318706861552,
      "phi_3": 21.663978355408233,
      "success": true,
      "log_likelihood": -138.1552000911516,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 53.074416891589514,
      "phi_1": 100.0,
      "phi_2": 71.5716985673032,
      "phi_3": 53.235198375718205,
      "success": true,
      "log_likelihood": -1.3267480950750226,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 34.653457289642496,
      "phi_1": 26.152763124267878,
      "phi_2": 37.66642805473798,
      "phi_3": 48.80190567703031,
      "success": true,
      "log_likelihood": -299.14155124673874,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 100.0,
      "phi_1": 31.743168573640695,
      "phi_2": 66.80056531972345,
      "phi_3": 60.53677492364869,
      "success": true,
      "log_likelihood": -93.43006314749742,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 42.36190146622013,
      "phi_1": 45.117992463572506,
      "phi_2": 90.54322293433134,
      "phi_3": 24.58101899055851,
      "success": true,
      "log_likelihood": -161.1806273064705,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 96.22021443391053,
      "phi_1": 13.610165604095194,
      "phi_2": 6.661751538077564,
      "phi_3": 12.669672491554484,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 8.810412849338212,
      "phi_1": 73.29079424377619,
      "phi_2": 76.28162412394407,
      "phi_3": 96.60673466487118,
      "success": true,
      "log_likelihood": 3.4783029788012113e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 31.36970777314529,
      "phi_1": 73.19729067792669,
      "phi_2": 47.054474417382295,
      "phi_3": 89.89828618381674,
      "success": true,
      "log_likelihood": -94.87599334818609,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 35.719112014066255,
      "phi_1": 96.03412411730562,
      "phi_2": 58.90631455332307,
      "phi_3": 35.879983780375404,
      "success": true,
      "log_likelihood": -47.37858578454271,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 66.06571264263022,
      "phi_1": 6.313788097480001,
      "phi_2": 4.642928749818499,
      "phi_3": 6.089032892464488,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 37.071013549274745,
      "phi_1": 80.48322303095091,
      "phi_2": 36.91075267686237,
      "phi_3": 49.40194986104464,
      "success": true,
      "log_likelihood": -70.4043683226595,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 45.159091420127886,
      "phi_1": 13.087515532905416,
      "phi_2": 99.85982577864566,
      "phi_3": 19.90716697298236,
      "success": true,
      "log_likelihood": -92.09266389555104,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 19.82782198533649,
      "phi_1": 53.20454088751743,
      "phi_2": 50.50009758388046,
      "phi_3": 70.18676868613731,
      "success": true,
      "log_likelihood": -207.23308389912216,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 0.5289004351936291,
      "phi_1": 0.5376904994519317,
      "phi_2": 0.6775771187166556,
      "phi_3": 0.22194077568567586,
      "success": true,
      "log_likelihood": -18.491217112974738,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 100.0,
      "phi_1": 13.13034064303517,
      "phi_2": 7.813701749037838,
      "phi_3": 50.15433279915091,
      "success": true,
      "log_likelihood": -46.05170185648089,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 70.81242039296055,
      "phi_1": 41.90779669679014,
      "phi_2": 70.97371517466804,
      "phi_3": 52.150735248187594,
      "success": true,
      "log_likelihood": -139.4819266928065,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 0.24173017041567196,
      "phi_1": 1.4991726493712811,
      "phi_2": 1.405473366076171,
      "phi_3": 0.773071805058659,
      "success": true,
      "log_likelihood": -13.688612479279803,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 100.0,
      "phi_1": 0.0,
      "phi_2": 41.96140939719194,
      "phi_3": 0.0,
      "success": true,
      "log_likelihood": -46.051701856480896,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "rho": 35.61118091902706,
      "phi_1": 53.79434848800834,
      "phi_2": 47.99120962136731,
      "phi_3": 39.519965379706086,
      "success": true,
      "log_likelihood": -47.22571265038314,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 36.509785554680676,
      "phi_1": 24.106683194722322,
      "phi_2": 54.76468737216901,
      "phi_3": 36.67036561064616,
      "success": true,
      "log_likelihood": -96.10035204329347,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 93.56754169069582,
      "phi_1": 41.77456756846675,
      "phi_2": 62.24434195334455,
      "phi_3": 11.880760060253792,
      "success": true,
      "log_likelihood": -162.50770357263673,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 41.41803259120905,
      "phi_1": 62.50497633976639,
      "phi_2": 41.576290788987826,
      "phi_3": 56.51195842033507,
      "success": true,
      "log_likelihood": -48.5522881276119,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 5.804529174520091,
      "phi_1": 81.11098026269696,
      "phi_2": 53.192006807487196,
      "phi_3": 8.708269834876269,
      "success": true,
      "log_likelihood": -139.54290703214028,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 25.858570845298157,
      "phi_1": 60.33674837857254,
      "phi_2": 67.51598783817222,
      "phi_3": 17.3730359199812,
      "success": true,
      "log_likelihood": -94.81635430843899,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 74.0746633016526,
      "phi_1": 92.31966712778166,
      "phi_2": 99.5198339465837,
      "phi_3": 80.14928138366696,
      "success": true,
      "log_likelihood": -273.08247665516654,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 51.763009223014926,
      "phi_1": 2.3736448556374246,
      "phi_2": 39.32788656000539,
      "phi_3": 70.72826074676159,
      "success": true,
      "log_likelihood": -161.18096657903382,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 7.480790475843236,
      "phi_1": 90.12726598685099,
      "phi_2": 75.79744011380154,
      "phi_3": 84.2472642040135,
      "success": true,
      "log_likelihood": -46.05169980431042,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 41.00898394429306,
      "phi_1": 87.38523721672459,
      "phi_2": 80.19563737457493,
      "phi_3": 53.60205727760453,
      "success": true,
      "log_likelihood": -92.10340567089064,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 51.92297681543722,
      "phi_1": 19.544795263109183,
      "phi_2": 51.762168284613146,
      "phi_3": 77.88445527269701,
      "success": true,
      "log_likelihood": -140.86814700106348,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 88.51810593402267,
      "phi_1": 66.93738539804117,
      "phi_2": 79.67032367123656,
      "phi_3": 77.75010341382855,
      "success": true,
      "log_likelihood": -434.329507245416,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 25.42023506537621,
      "phi_1": 59.313423958791525,
      "phi_2": 63.280190908871695,
      "phi_3": 93.9319187285953,
      "success": true,
      "log_likelihood": -185.5070212038318,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 0.9026644698814712,
      "phi_1": 2.0660919881544886,
      "phi_2": 98.31362169160546,
      "phi_3": 1.8645112462423301,
      "success": true,
      "log_likelihood": -7.701143245096171,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 100.0,
      "phi_1": 61.26837685918885,
      "phi_2": 62.901071045119366,
      "phi_3": 31.126804070238798,
      "success": true,
      "log_likelihood": -161.18105413607375,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 6.9090664834503395,
      "phi_1": 26.93690666822435,
      "phi_2": 54.60847532355407,
      "phi_3": 46.67731764282943,
      "success": true,
      "log_likelihood": -1.283906856041546,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 26.211781991601335,
      "phi_1": 17.24116005827834,
      "phi_2": 0.0,
      "phi_3": 23.25579743273609,
      "success": true,
      "log_likelihood": -47.33691621846759,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 34.29649485628883,
      "phi_1": 65.29581746398264,
      "phi_2": 23.40523906560662,
      "phi_3": 64.46678932403378,
      "success": true,
      "log_likelihood": -160.96625952620977,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 24.89941613318959,
      "phi_1": 37.72764136823358,
      "phi_2": 99.99960747489614,
      "phi_3": 25.06012951430656,
      "success": true,
      "log_likelihood": -49.878939269523514,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 2.8638687548717385,
      "phi_1": 31.800912844221155,
      "phi_2": 57.950004132512056,
      "phi_3": 25.822692032498093,
      "success": true,
      "log_likelihood": -1.2473323517104886e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 13.042979902031158,
      "phi_1": 19.18291220729479,
      "phi_2": 27.517429479231257,
      "phi_3": 88.29032261884254,
      "success": true,
      "log_likelihood": -93.27990973611011,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 13.63091868439443,
      "phi_1": 55.26204581063298,
      "phi_2": 54.076055767745046,
      "phi_3": 31.80545405592587,
      "success": true,
      "log_likelihood": -3.9979799376620644,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 80.98351958546009,
      "phi_1": 95.46159386080527,
      "phi_2": 28.923160938684955,
      "phi_3": 62.508463518714265,
      "success": true,
      "log_likelihood": -161.18067898954095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 100.0,
      "phi_1": 0.19519085786023993,
      "phi_2": 22.02456774599022,
      "phi_3": 48.04482606432828,
      "success": true,
      "log_likelihood": -46.05170187412973,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 70.94914000464688,
      "phi_1": 31.817363393824138,
      "phi_2": 47.165446557813056,
      "phi_3": 20.245033735554767,
      "success": true,
      "log_likelihood": -70.40430013964605,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 9.482059142562326,
      "phi_1": 10.082351071021261,
      "phi_2": 12.565772643516349,
      "phi_3": 10.607756603353055,
      "success": true,
      "log_likelihood": -53.12314513059314,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 70.87368903876555,
      "phi_1": 15.695700301857228,
      "phi_2": 59.40233557618871,
      "phi_3": 8.011459671731524,
      "success": true,
      "log_likelihood": -92.10346444517033,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 0.1681282779499191,
      "phi_1": 34.1973455586317,
      "phi_2": 19.715099069404857,
      "phi_3": 87.63015579386652,
      "success": true,
      "log_likelihood": -47.77683676101175,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 9.794085850409932,
      "phi_1": 38.47667915680382,
      "phi_2": 39.57830152605698,
      "phi_3": 54.199534386968,
      "success": true,
      "log_likelihood": -2.6106552323259398,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 52.45242937067218,
      "phi_1": 19.7322694012944,
      "phi_2": 97.31937056836345,
      "phi_3": 97.4779709908689,
      "success": true,
      "log_likelihood": -184.2067872996441,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 70.31737690658807,
      "phi_1": 46.64510753502164,
      "phi_2": 30.03244821943755,
      "phi_3": 11.243037641084932,
      "success": true,
      "log_likelihood": -162.46486332178586,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 47.48274135662694,
      "phi_1": 14.024652332721582,
      "phi_2": 9.037250226983884,
      "phi_3": 71.22412278507159,
      "success": true,
      "log_likelihood": -300.7222245345893,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 66.97135401526411,
      "phi_1": 44.88031897516795,
      "phi_2": 55.95177932911357,
      "phi_3": 66.81037788059278,
      "success": true,
      "log_likelihood": -94.71405792214767,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 100.0,
      "phi_1": 50.965413380548334,
      "phi_2": 0.0,
      "phi_3": 22.283009532080918,
      "success": true,
      "log_likelihood": -69.07755286972817,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 8.150885574572152,
      "phi_1": 64.37292578345476,
      "phi_2": 44.78936199285695,
      "phi_3": 44.385619833566594,
      "success": true,
      "log_likelihood": -69.07759046081415,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 76.21585692811983,
      "phi_1": 76.31996284257858,
      "phi_2": 56.66696031257389,
      "phi_3": 99.39486099004385,
      "success": true,
      "log_likelihood": -231.60605445126825,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 5.374207153920178,
      "phi_1": 56.45032459282569,
      "phi_2": 83.87323111810626,
      "phi_3": 36.07916225886657,
      "success": true,
      "log_likelihood": -1.9940863099739175e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 0.29772104861972554,
      "phi_1": 0.3311580587280827,
      "phi_2": 0.44069245453795947,
      "phi_3": 0.466544540174844,
      "success": true,
      "log_likelihood": -21.876131954538472,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 95.77031323118686,
      "phi_1": 88.95533182374476,
      "phi_2": 0.0,
      "phi_3": 18.18083948771399,
      "success": true,
      "log_likelihood": -92.10340371764727,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 0.19820851051672325,
      "phi_1": 2.3212471315606242,
      "phi_2": 32.63366065657238,
      "phi_3": 79.20319215926267,
      "success": true,
      "log_likelihood": -26.337416423366932,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 40.550760764358905,
      "phi_1": 60.44746753862008,
      "phi_2": 70.87401418560073,
      "phi_3": 89.65164786084554,
      "success": true,
      "log_likelihood": -47.225473269184775,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 68.1912692431709,
      "phi_1": 45.22465592587003,
      "phi_2": 72.31281652928458,
      "phi_3": 68.34975029851255,
      "success": true,
      "log_likelihood": -209.8434345086575,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 2.7818940983598814,
      "phi_1": 45.99151086197816,
      "phi_2": 21.679730225912127,
      "phi_3": 49.200807319737216,
      "success": true,
      "log_likelihood": -23.025920318740194,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 49.75193465011035,
      "phi_1": 18.0193071044125,
      "phi_2": 97.08647437500974,
      "phi_3": 9.505994867170287,
      "success": true,
      "log_likelihood": -161.18095652959153,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 31.76595179482049,
      "phi_1": 59.952928876057996,
      "phi_2": 52.1389294724714,
      "phi_3": 45.52567769588724,
      "success": true,
      "log_likelihood": -253.16643974037677,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 77.1235279574843,
      "phi_1": 1.078849634587964,
      "phi_2": 47.36494954841498,
      "phi_3": 11.718569026038983,
      "success": true,
      "log_likelihood": -23.025868726402475,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 20.452478223232575,
      "phi_1": 30.30020144319719,
      "phi_2": 36.64364716978599,
      "phi_3": 71.58284163902692,
      "success": true,
      "log_likelihood": -70.25144033605025,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "rho": 64.13292282464809,
      "phi_1": 96.57749690707836,
      "phi_2": 64.29370483286682,
      "phi_3": 96.20065533754071,
      "success": true,
      "log_likelihood": -119.01604075300318,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "rho": {
        "r": 0.7670488132587737,
        "p": 1.3445228186036949e-20
      },
      "phi_1": {
        "r": 0.6572599818022107,
        "p": 1.1100994213229139e-13
      },
      "phi_2": {
        "r": 0.37900948450239236,
        "p": 0.00010083989063790472
      },
      "phi_3": {
        "r": 0.47888082954448485,
        "p": 4.656708271336776e-07
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 193.68898195433584,
  "bic_Control": 157.63552352715016,
  "bic_Cocaine": 225.98687179535636,
  "bic_results": {
    "average_bic": 193.68898195433584,
    "individual_bics": [
      14.334081134286876,
      46.95032446515917,
      247.2460844848775,
      34.90147534574341,
      17.10673168133159,
      382.7479786757546,
      60.3857929088294,
      290.483000275617,
      60.38581487455508,
      157.91526945825376,
      428.80144266522024,
      60.38581716907946,
      63.039730112520544,
      14.334075746624439,
      60.385801442725764,
      106.4374794667863,
      106.4374794655273,
      19.55538389409471,
      63.03930552297058,
      60.38577760670536,
      434.1063773791159,
      106.43747946879105,
      62.73375422902197,
      615.6596940510789,
      68.1499063252677,
      290.64447593612766,
      16.987571943974483,
      612.6171782473019,
      201.19420204881928,
      336.69533036676546,
      14.334075746624439,
      14.334075746867834,
      204.0860624501966,
      109.09124732290985,
      14.334075746624439,
      155.14281239914342,
      198.51940354492652,
      428.80024355206876,
      51.31650997977391,
      106.43747946678621,
      293.29792913943743,
      41.711300712384045,
      106.43747946678623,
      108.78550105459071,
      206.53477984041137,
      339.3494828990979,
      111.43865200904824,
      293.419889818105,
      203.9667843707024,
      560.4990290641575,
      336.6960089118921,
      106.43747536244527,
      198.5408870956057,
      296.0703697559514,
      882.9930902446564,
      385.34811816148806,
      29.73636224401678,
      336.69618402597195,
      16.90188946590753,
      109.00790819075962,
      336.266594806244,
      114.09195429287146,
      14.334100700471474,
      200.89389522604466,
      22.33003562914857,
      336.69543373290634,
      106.4374795020839,
      155.14267603311654,
      120.58036601501071,
      198.5410046441651,
      109.88774927584794,
      19.55538621847632,
      382.74765035311265,
      339.26380239739615,
      615.7785248230031,
      203.76219159811978,
      152.48918149328077,
      152.48925667545274,
      477.54618465636094,
      14.33407974199706,
      58.08633966290138,
      198.54088318911897,
      67.0089086005583,
      108.78502229219399,
      434.02094477113945,
      60.38591639130483,
      336.6959888130075,
      520.666955234578,
      60.38581320662939,
      154.83695642592494,
      252.3661572598308
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        14.334081134286876,
        46.95032446515917,
        247.2460844848775,
        34.90147534574341,
        17.10673168133159,
        382.7479786757546,
        60.3857929088294,
        290.483000275617,
        60.38581487455508,
        157.91526945825376,
        428.80144266522024,
        60.38581716907946,
        63.039730112520544,
        14.334075746624439,
        60.385801442725764,
        106.4374794667863,
        106.4374794655273,
        19.55538389409471,
        63.03930552297058,
        60.38577760670536,
        434.1063773791159,
        106.43747946879105,
        62.73375422902197,
        615.6596940510789,
        68.1499063252677,
        290.64447593612766,
        16.987571943974483,
        612.6171782473019,
        201.19420204881928,
        336.69533036676546,
        14.334075746624439,
        14.334075746867834,
        204.0860624501966,
        109.09124732290985,
        14.334075746624439,
        155.14281239914342,
        198.51940354492652,
        428.80024355206876,
        51.31650997977391,
        106.43747946678621,
        293.29792913943743,
        41.711300712384045,
        106.43747946678623
      ],
      "Cocaine": [
        108.78550105459071,
        206.53477984041137,
        339.3494828990979,
        111.43865200904824,
        293.419889818105,
        203.9667843707024,
        560.4990290641575,
        336.6960089118921,
        106.43747536244527,
        198.5408870956057,
        296.0703697559514,
        882.9930902446564,
        385.34811816148806,
        29.73636224401678,
        336.69618402597195,
        16.90188946590753,
        109.00790819075962,
        336.266594806244,
        114.09195429287146,
        14.334100700471474,
        200.89389522604466,
        22.33003562914857,
        336.69543373290634,
        106.4374795020839,
        155.14267603311654,
        120.58036601501071,
        198.5410046441651,
        109.88774927584794,
        19.55538621847632,
        382.74765035311265,
        339.26380239739615,
        615.7785248230031,
        203.76219159811978,
        152.48918149328077,
        152.48925667545274,
        477.54618465636094,
        14.33407974199706,
        58.08633966290138,
        198.54088318911897,
        67.0089086005583,
        108.78502229219399,
        434.02094477113945,
        60.38591639130483,
        336.6959888130075,
        520.666955234578,
        60.38581320662939,
        154.83695642592494,
        252.3661572598308
      ]
    },
    "num_parameters": 4,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- rho: r = 0.767\n- phi_1: r = 0.657\n- phi_2: r = 0.379\n- phi_3: r = 0.479",
  "previous_models": [
    "Specification: I_type1 = (trial_type == 1) ? 1 : 0\nI_type2 = (trial_type == 2) ? 1 : 0\nI_type3 = (trial_type == 3) ? 1 : 0\nunfairness_deviation = (combined_earning / 2) - split_self\npenalty_amount = max(0, unfairness_deviation)\nphi_type = phi_1 * I_type1 + phi_2 * I_type2 + phi_3 * I_type3\nU_accept = rho * split_self - phi_type * penalty_amount\nSummary: A utility model for predicting responder acceptance decisions. The utility of accepting an offer is determined by the proposed amount for the participant and a penalty for offers falling below an equal (50/50) split of the total pot. The sensitivity to this unfairness penalty is parameterized independently based on the trial's contribution type (equal, opponent more, participant more), allowing for context-dependent fairness preferences. The model has four learnable parameters: one for the sensitivity to own gain and three for the type-specific sensitivities to unfairness. Utility is mapped to the probability of acceptance via a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 193.68898195433584\nOverall Accuracy: 0.8547\nGroup Accuracies:\n- Control: 0.8734\n- Cocaine: 0.8380\n\nParameter Recovery:\n- rho: r = 0.767\n- phi_1: r = 0.657\n- phi_2: r = 0.379\n- phi_3: r = 0.479"
  ]
}