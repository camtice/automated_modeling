{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Design a computational model for the described ultimatum game responder task. Your model must meet the following criteria:\n1.  **Predict only responder behavior** (target variable: \"accept\").\n2.  **Achieve excellent parameter recovery (>= 0.7 correlation) for ALL learnable parameters.** This remains the *single most important* objective. Previous attempts have consistently failed here. A model is unusable if any learnable parameter cannot be reliably recovered, regardless of other metrics (like BIC or accuracy). Prioritize model structures that inherently enhance parameter identifiability from the data.\n3.  **Be applicable to the dataset:** Use only the provided data structure and variables available during responder trials (trial_role == 1).\n4.  **Predict utility:** Utility values will be converted to acceptance probabilities using a logistic function (with temperature 1). A utility > 0 implies > 50% probability of acceptance.\n\n**Analysis of Previous Attempt (Run 9):** The most recent model (`beta * split_perc_self - gamma_prop * max(0, fair_perc_self - split_perc_self)**delta_prop - gamma_50 * max(0, 50 - split_perc_self)**delta_50`) attempted to improve parameter identifiability by introducing exponents on the penalty terms. However, this model **failed parameter recovery catastrophically** (all parameters had r < 0.4, some near zero or negative), and also resulted in **significantly worse BIC (825.09)** and **lower accuracy (0.513)** compared to most previous models. This indicates that adding exponents and more parameters in this additive penalty structure did not help and likely made the parameters less identifiable while also providing a poor fit to the data's underlying structure. The failure to recover parameters renders the model unusable, regardless of the poor BIC and accuracy.\n\n**Guidance for the Next Model (Radically Prioritizing Parameter Recovery - Continued):** We *must* abandon model structures that have repeatedly failed parameter recovery. Simple additive components scaled by learnable parameters, even with piecewise activation or non-linear exponents, have proven to be non-identifiable in this task context, likely due to high correlation or substitutability among parameter effects.\n\nThe focus for Run 10 *must* be on defining learnable parameters that influence the utility function in ways that are *fundamentally and qualitatively distinct* from each other, making their effects separable from the data. This requires moving beyond simple additive terms.\n\nConsider:\n*   **Parsimony:** Can parameter recovery be achieved with *fewer* learnable parameters? Models with fewer parameters often have better identifiability. Run 3, with only two parameters, achieved the highest recovery seen so far (though still below 0.7).\n*   **Multiplicative Interactions:** Could parameters control the *rate* at which the value of an offer is discounted based on its unfairness? For example, `Utility = split_perc_self * (beta - gamma * max(0, fair_perc_self - split_perc_self))`. Here, `beta` sets the base sensitivity to the split (especially when fair), while `gamma` controls how much that sensitivity is *reduced* when the offer is below the proportional fair share. Their effects might be more separable than simple additive penalties.\n*   **Piecewise Functions with Distinct Slopes:** Design a model where parameters define the *slope* or sensitivity to `split_perc_self` in different regions relative to the norms (50%, proportional). For instance, one parameter defines the slope when the offer is above the proportional share, and another defines the slope when it's below. This is different from scaling additive penalties; parameters control the function's rate of change directly.\n\nFor Run 10, let's specifically explore a model structure based on a **multiplicative interaction** between the offer value and proportional unfairness, building on the insights from Run 3's relative success with the proportional norm and aiming for a more identifiable structure.\n\nPropose a model where utility is proportional to the offer percentage (`split_perc_self`), but the proportionality constant (sensitivity) is reduced by a term dependent on the degree of proportional unfairness.\n`U = split_perc_self * (beta_value - gamma_proportional_aversion * max(0, fair_perc_self - split_perc_self))`\n\nIn this structure:\n*   `beta_value` represents the base sensitivity to the proposed share. It's the sole driver of utility when the offer is equal to or above the proportional fair share (`max(...)` term is zero).\n*   `gamma_proportional_aversion` controls how much the sensitivity to `split_perc_self` is decreased when the offer is *below* the proportional fair share. This parameter influences the utility function's slope *only* in the unfair region, and its effect is weighted by `split_perc_self`.\n\nDefine clear, generous finite bounds for `beta_value` and `gamma_proportional_aversion`. Both should likely be constrained to be non-negative, as increasing the offer should generally increase utility, and increasing proportional unfairness should decrease it.\n\nContinue to build the model using percentage-based values (`split_perc_self`, `fair_perc_self`).\n\nFor any learnable parameters, you must specify generous, finite numerical bounds. The utility variable may be unbounded (-inf to inf).\n\nProvide your formal mathematical model between <MODEL> tags. Ensure *only* the mathematical formula is within these tags.\nProvide variable descriptions in JSON format between <VARIABLES> tags. Ensure learnable parameter names are clear and suitable for coding. Spell out Greek variables.\nSpecify the target variable using <target_variable> tags.\nProvide a concise, descriptive summary of the model between <SUMMARY> tags.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember to only model responder trials (where trial_role == 1) and use variables available in that context. The `fair_perc_self` variable (calculated as `(token_self / (token_self + token_opp)) * 100`) is useful for fairness calculations.\n\nFor run 10 of 100, please think through this step by step, focusing intently on how the *specific multiplicative structure* proposed here guarantees parameter identifiability and distinguishes the influence of each parameter, minimizing covariance based on the *specific* data characteristics. How do `beta_value` and `gamma_proportional_aversion` affect the utility function shape in unique ways that make them separable? Then provide your model specification, variable descriptions, target variable, and summary.\n</think>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Design a computational model for the described ultimatum game responder task. Your model must meet the following criteria:\n1.  **Predict only responder behavior** (target variable: \"accept\").\n2.  **Achieve excellent parameter recovery (>= 0.7 correlation) for ALL learnable parameters.** This remains the *single most important* objective. Previous attempts have consistently failed here. A model is unusable if any learnable parameter cannot be reliably recovered, regardless of other metrics (like BIC or accuracy). Prioritize model structures that inherently enhance parameter identifiability from the data.\n3.  **Be applicable to the dataset:** Use only the provided data structure and variables available during responder trials (trial_role == 1).\n4.  **Predict utility:** Utility values will be converted to acceptance probabilities using a logistic function (with temperature 1). A utility > 0 implies > 50% probability of acceptance.\n\n**Analysis of Previous Attempt (Run 9):** The most recent model (`beta * split_perc_self - gamma_prop * max(0, fair_perc_self - split_perc_self)**delta_prop - gamma_50 * max(0, 50 - split_perc_self)**delta_50`) attempted to improve parameter identifiability by introducing exponents on the penalty terms. However, this model **failed parameter recovery catastrophically** (all parameters had r < 0.4, some near zero or negative), and also resulted in **significantly worse BIC (825.09)** and **lower accuracy (0.513)** compared to most previous models. This indicates that adding exponents and more parameters in this additive penalty structure did not help and likely made the parameters less identifiable while also providing a poor fit to the data's underlying structure. The failure to recover parameters renders the model unusable, regardless of the poor BIC and accuracy.\n\n**Guidance for the Next Model (Radically Prioritizing Parameter Recovery - Continued):** We *must* abandon model structures that have repeatedly failed parameter recovery. Simple additive components scaled by learnable parameters, even with piecewise activation or non-linear exponents, have proven to be non-identifiable in this task context, likely due to high correlation or substitutability among parameter effects.\n\nThe focus for Run 10 *must* be on defining learnable parameters that influence the utility function in ways that are *fundamentally and qualitatively distinct* from each other, making their effects separable from the data. This requires moving beyond simple additive terms.\n\nConsider:\n*   **Parsimony:** Can parameter recovery be achieved with *fewer* learnable parameters? Models with fewer parameters often have better identifiability. Run 3, with only two parameters, achieved the highest recovery seen so far (though still below 0.7).\n*   **Multiplicative Interactions:** Could parameters control the *rate* at which the value of an offer is discounted based on its unfairness? For example, `Utility = split_perc_self * (beta - gamma * max(0, fair_perc_self - split_perc_self))`. Here, `beta` sets the base sensitivity to the split (especially when fair), while `gamma` controls how much that sensitivity is *reduced* when the offer is below the proportional fair share. Their effects might be more separable than simple additive penalties.\n*   **Piecewise Functions with Distinct Slopes:** Design a model where parameters define the *slope* or sensitivity to `split_perc_self` in different regions relative to the norms (50%, proportional). For instance, one parameter defines the slope when the offer is above the proportional share, and another defines the slope when it's below. This is different from scaling additive penalties; parameters control the function's rate of change directly.\n\nFor Run 10, let's specifically explore a model structure based on a **multiplicative interaction** between the offer value and proportional unfairness, building on the insights from Run 3's relative success with the proportional norm and aiming for a more identifiable structure.\n\nPropose a model where utility is proportional to the offer percentage (`split_perc_self`), but the proportionality constant (sensitivity) is reduced by a term dependent on the degree of proportional unfairness.\n`U = split_perc_self * (beta_value - gamma_proportional_aversion * max(0, fair_perc_self - split_perc_self))`\n\nIn this structure:\n*   `beta_value` represents the base sensitivity to the proposed share. It's the sole driver of utility when the offer is equal to or above the proportional fair share (`max(...)` term is zero).\n*   `gamma_proportional_aversion` controls how much the sensitivity to `split_perc_self` is decreased when the offer is *below* the proportional fair share. This parameter influences the utility function's slope *only* in the unfair region, and its effect is weighted by `split_perc_self`.\n\nDefine clear, generous finite bounds for `beta_value` and `gamma_proportional_aversion`. Both should likely be constrained to be non-negative, as increasing the offer should generally increase utility, and increasing proportional unfairness should decrease it.\n\nContinue to build the model using percentage-based values (`split_perc_self`, `fair_perc_self`).\n\nFor any learnable parameters, you must specify generous, finite numerical bounds. The utility variable may be unbounded (-inf to inf).\n\nProvide your formal mathematical model between <MODEL> tags. Ensure *only* the mathematical formula is within these tags.\nProvide variable descriptions in JSON format between <VARIABLES> tags. Ensure learnable parameter names are clear and suitable for coding. Spell out Greek variables.\nSpecify the target variable using <target_variable> tags.\nProvide a concise, descriptive summary of the model between <SUMMARY> tags.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember to only model responder trials (where trial_role == 1) and use variables available in that context. The `fair_perc_self` variable (calculated as `(token_self / (token_self + token_opp)) * 100`) is useful for fairness calculations.\n\nFor run 10 of 100, please think through this step by step, focusing intently on how the *specific multiplicative structure* proposed here guarantees parameter identifiability and distinguishes the influence of each parameter, minimizing covariance based on the *specific* data characteristics. How do `beta_value` and `gamma_proportional_aversion` affect the utility function shape in unique ways that make them separable? Then provide your model specification, variable descriptions, target variable, and summary.\n</think>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "```\nOkay, let's design this computational model focusing on parameter identifiability for the responder task, utilizing the suggested multiplicative structure.\n\n<MODEL>\nU = split_perc_self * (beta_value - gamma_proportional_aversion * max(0, fair_perc_self - split_perc_self))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer. Converted to probability of acceptance using the logistic function P(accept) = 1 / (1 + exp(-U)).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the total combined earning proposed to the participant in a given trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter representing the base sensitivity to the percentage offered to the participant, particularly when the offer is at or above the proportional fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_proportional_aversion\": {\n      \"description\": \"Parameter representing the degree of aversion to offers that fall below the participant's proportional fair share. It multiplicatively reduces sensitivity to the offered percentage.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The percentage of the total potential earning that is considered proportionally fair for the participant, calculated based on their token contribution relative to the opponent's contribution: (token_self / (token_self + token_opp)) * 100. Assumes token_self + token_opp > 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n       \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA multiplicative utility model for ultimatum game responders. The utility of accepting an offer is determined by the offered percentage (split_perc_self). This base value sensitivity is scaled by beta_value. Additionally, if the offer is below the participant's proportional fair share (fair_perc_self, calculated from token contributions), the sensitivity is reduced by a term proportional to the degree of unfairness, scaled by gamma_proportional_aversion. This structure aims to separate the influence of pure value sensitivity from the cost associated with proportional unfairness. The model has two learnable parameters: beta_value (base sensitivity) and gamma_proportional_aversion (proportional aversion strength), both constrained to be non-negative.\n</SUMMARY>\n```"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_value', 'gamma_proportional_aversion']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = split_perc_self * (beta_value - gamma_proportional_aversion * max(0, fair_perc_self - split_perc_self))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer. Converted to probability of acceptance using the logistic function P(accept) = 1 / (1 + exp(-U)).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the total combined earning proposed to the participant in a given trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter representing the base sensitivity to the percentage offered to the participant, particularly when the offer is at or above the proportional fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_proportional_aversion\": {\n      \"description\": \"Parameter representing the degree of aversion to offers that fall below the participant's proportional fair share. It multiplicatively reduces sensitivity to the offered percentage.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The percentage of the total potential earning that is considered proportionally fair for the participant, calculated based on their token contribution relative to the opponent's contribution: (token_self / (token_self + token_opp)) * 100. Assumes token_self + token_opp > 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_value=1, gamma_proportional_aversion=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate fair_perc_self\n        if (token_self + token_opp) > 0:\n            fair_perc_self = (token_self / (token_self + token_opp)) * 100\n        else:\n            fair_perc_self = 50  # Default to 50 if no tokens were earned.\n\n        # Calculate utility\n        unfairness = max(0, fair_perc_self - split_perc_self)\n        U = split_perc_self * (beta_value - gamma_proportional_aversion * unfairness)\n\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1746096577.147341
    }
  ],
  "learnable_parameters": {
    "beta_value": {
      "description": "Parameter representing the base sensitivity to the percentage offered to the participant, particularly when the offer is at or above the proportional fair share.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma_proportional_aversion": {
      "description": "Parameter representing the degree of aversion to offers that fall below the participant's proportional fair share. It multiplicatively reduces sensitivity to the offered percentage.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = split_perc_self * (beta_value - gamma_proportional_aversion * max(0, fair_perc_self - split_perc_self))",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the proposed offer. Converted to probability of acceptance using the logistic function P(accept) = 1 / (1 + exp(-U)).",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_perc_self": {
      "description": "The percentage of the total combined earning proposed to the participant in a given trial.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "beta_value": {
      "description": "Parameter representing the base sensitivity to the percentage offered to the participant, particularly when the offer is at or above the proportional fair share.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma_proportional_aversion": {
      "description": "Parameter representing the degree of aversion to offers that fall below the participant's proportional fair share. It multiplicatively reduces sensitivity to the offered percentage.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fair_perc_self": {
      "description": "The percentage of the total potential earning that is considered proportionally fair for the participant, calculated based on their token contribution relative to the opponent's contribution: (token_self / (token_self + token_opp)) * 100. Assumes token_self + token_opp > 0.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A multiplicative utility model for ultimatum game responders. The utility of accepting an offer is determined by the offered percentage (split_perc_self). This base value sensitivity is scaled by beta_value. Additionally, if the offer is below the participant's proportional fair share (fair_perc_self, calculated from token contributions), the sensitivity is reduced by a term proportional to the degree of unfairness, scaled by gamma_proportional_aversion. This structure aims to separate the influence of pure value sensitivity from the cost associated with proportional unfairness. The model has two learnable parameters: beta_value (base sensitivity) and gamma_proportional_aversion (proportional aversion strength), both constrained to be non-negative.",
  "target_variable": "accept",
  "full_reasoning": "```\nOkay, let's design this computational model focusing on parameter identifiability for the responder task, utilizing the suggested multiplicative structure.\n\n<MODEL>\nU = split_perc_self * (beta_value - gamma_proportional_aversion * max(0, fair_perc_self - split_perc_self))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer. Converted to probability of acceptance using the logistic function P(accept) = 1 / (1 + exp(-U)).\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the total combined earning proposed to the participant in a given trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"beta_value\": {\n      \"description\": \"Parameter representing the base sensitivity to the percentage offered to the participant, particularly when the offer is at or above the proportional fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_proportional_aversion\": {\n      \"description\": \"Parameter representing the degree of aversion to offers that fall below the participant's proportional fair share. It multiplicatively reduces sensitivity to the offered percentage.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The percentage of the total potential earning that is considered proportionally fair for the participant, calculated based on their token contribution relative to the opponent's contribution: (token_self / (token_self + token_opp)) * 100. Assumes token_self + token_opp > 0.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n       \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA multiplicative utility model for ultimatum game responders. The utility of accepting an offer is determined by the offered percentage (split_perc_self). This base value sensitivity is scaled by beta_value. Additionally, if the offer is below the participant's proportional fair share (fair_perc_self, calculated from token contributions), the sensitivity is reduced by a term proportional to the degree of unfairness, scaled by gamma_proportional_aversion. This structure aims to separate the influence of pure value sensitivity from the cost associated with proportional unfairness. The model has two learnable parameters: beta_value (base sensitivity) and gamma_proportional_aversion (proportional aversion strength), both constrained to be non-negative.\n</SUMMARY>\n```",
  "prediction_type": "utility",
  "current_model": "Specification: U = split_perc_self * (beta_value - gamma_proportional_aversion * max(0, fair_perc_self - split_perc_self))\nSummary: A multiplicative utility model for ultimatum game responders. The utility of accepting an offer is determined by the offered percentage (split_perc_self). This base value sensitivity is scaled by beta_value. Additionally, if the offer is below the participant's proportional fair share (fair_perc_self, calculated from token contributions), the sensitivity is reduced by a term proportional to the degree of unfairness, scaled by gamma_proportional_aversion. This structure aims to separate the influence of pure value sensitivity from the cost associated with proportional unfairness. The model has two learnable parameters: beta_value (base sensitivity) and gamma_proportional_aversion (proportional aversion strength), both constrained to be non-negative.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_value=1, gamma_proportional_aversion=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate fair_perc_self\n        if (token_self + token_opp) > 0:\n            fair_perc_self = (token_self / (token_self + token_opp)) * 100\n        else:\n            fair_perc_self = 50  # Default to 50 if no tokens were earned.\n\n        # Calculate utility\n        unfairness = max(0, fair_perc_self - split_perc_self)\n        U = split_perc_self * (beta_value - gamma_proportional_aversion * unfairness)\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5534188034188035,
  "group_accuracies": {
    "Control": 0.5071059431524547,
    "Cocaine": 0.5949074074074074
  },
  "group_parameter_averages": {
    "Control": {
      "beta_value": 54.38056150438218,
      "gamma_proportional_aversion": 42.96918211318497
    },
    "Cocaine": {
      "beta_value": 50.5083222556971,
      "gamma_proportional_aversion": 48.64480839712518
    }
  },
  "fitting_results": [
    {
      "beta_value": 10.702262352821283,
      "gamma_proportional_aversion": 100.0,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 56.40442469664566,
      "gamma_proportional_aversion": 12.764196607149733,
      "success": true,
      "log_likelihood": -276.3102111568856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 48.40335762882661,
      "gamma_proportional_aversion": 66.52152817581484,
      "success": true,
      "log_likelihood": -345.38776394700704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 17.703657263436956,
      "gamma_proportional_aversion": 67.23979115721643,
      "success": true,
      "log_likelihood": -253.2843602268451,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 77.63733007123352,
      "gamma_proportional_aversion": 96.3011967930365,
      "success": true,
      "log_likelihood": -276.3102111568856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 89.23711512855076,
      "gamma_proportional_aversion": 80.77806431311986,
      "success": true,
      "log_likelihood": -437.4911676671689,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 86.58908413171874,
      "gamma_proportional_aversion": 22.1705383514176,
      "success": true,
      "log_likelihood": -690.7755278976139,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 97.42510093280605,
      "gamma_proportional_aversion": 4.340622401327867,
      "success": true,
      "log_likelihood": -184.20680743672384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 83.33273677042193,
      "gamma_proportional_aversion": 48.77905599239079,
      "success": true,
      "log_likelihood": -736.8272297576949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 88.97542742320083,
      "gamma_proportional_aversion": 67.9021459345137,
      "success": true,
      "log_likelihood": -230.2585092968046,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 35.28142455132512,
      "gamma_proportional_aversion": 88.23691673201608,
      "success": true,
      "log_likelihood": -276.3102111568856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 5.4674312126921425,
      "gamma_proportional_aversion": 93.46273184894333,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 70.08294862067676,
      "gamma_proportional_aversion": 40.443572743776265,
      "success": true,
      "log_likelihood": -253.28436022684514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 55.88130054542462,
      "gamma_proportional_aversion": 11.020782467133625,
      "success": true,
      "log_likelihood": -644.7238260375361,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 22.871206661229614,
      "gamma_proportional_aversion": 16.366337792305885,
      "success": true,
      "log_likelihood": -736.8272297576949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 64.15619426016652,
      "gamma_proportional_aversion": 47.0390305507337,
      "success": true,
      "log_likelihood": -736.8272297576949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 43.45153671447509,
      "gamma_proportional_aversion": 56.15581319860239,
      "success": true,
      "log_likelihood": -736.8272297576949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 31.843983210686776,
      "gamma_proportional_aversion": 44.14185029017731,
      "success": true,
      "log_likelihood": -621.6979751074927,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 7.40099240474863,
      "gamma_proportional_aversion": 71.84663161445853,
      "success": true,
      "log_likelihood": -644.723826037533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 89.99869776877382,
      "gamma_proportional_aversion": 47.11385156867698,
      "success": true,
      "log_likelihood": -736.8272297576949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 99.83065143899894,
      "gamma_proportional_aversion": 53.404556105681344,
      "success": true,
      "log_likelihood": -368.41361487704745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.167879261505464,
      "gamma_proportional_aversion": 14.836680729210705,
      "success": true,
      "log_likelihood": -621.6979751074925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 30.605686653325105,
      "gamma_proportional_aversion": 37.53483658207043,
      "success": true,
      "log_likelihood": -207.23265836676427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 94.97113105575714,
      "gamma_proportional_aversion": 45.82848598369795,
      "success": true,
      "log_likelihood": -345.38776394700693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 66.11169533467996,
      "gamma_proportional_aversion": 11.987741472215308,
      "success": true,
      "log_likelihood": -230.2585092968046,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 3.5736538063830703,
      "gamma_proportional_aversion": 24.820272742430994,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 92.0633313645421,
      "gamma_proportional_aversion": 71.62549157495957,
      "success": true,
      "log_likelihood": -368.41361487704756,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 65.67310699136783,
      "gamma_proportional_aversion": 42.88910864836733,
      "success": true,
      "log_likelihood": -138.15510557664285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 62.7493631085541,
      "gamma_proportional_aversion": 7.074494089067218,
      "success": true,
      "log_likelihood": -529.5945713873307,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 8.693566898604054,
      "gamma_proportional_aversion": 79.33237070013719,
      "success": true,
      "log_likelihood": -552.6204223173712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 64.74713214231816,
      "gamma_proportional_aversion": 12.637313188674003,
      "success": true,
      "log_likelihood": -644.723826037533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 49.930795611750014,
      "gamma_proportional_aversion": 18.638222415957927,
      "success": true,
      "log_likelihood": -69.07755278652134,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 54.44854694381619,
      "gamma_proportional_aversion": 25.808996362136373,
      "success": true,
      "log_likelihood": -299.3360620869262,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 82.01000377647668,
      "gamma_proportional_aversion": 76.0105567220701,
      "success": true,
      "log_likelihood": -230.25850929680456,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 80.42442694717681,
      "gamma_proportional_aversion": 22.28544009308444,
      "success": true,
      "log_likelihood": -690.7755278976139,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 58.173936691951035,
      "gamma_proportional_aversion": 10.311311608367435,
      "success": true,
      "log_likelihood": -345.387763947007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 50.03423278754603,
      "gamma_proportional_aversion": 2.244539375875154,
      "success": true,
      "log_likelihood": -161.18095650668323,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 6.921416489774035,
      "gamma_proportional_aversion": 70.81570848394301,
      "success": true,
      "log_likelihood": -322.3619130169665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 90.91785053651353,
      "gamma_proportional_aversion": 6.179637090777968,
      "success": true,
      "log_likelihood": -276.3102111568856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 74.3720418139356,
      "gamma_proportional_aversion": 16.983900116929252,
      "success": true,
      "log_likelihood": -621.6979751074924,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 10.481306869500406,
      "gamma_proportional_aversion": 81.7372444181251,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 12.602000055275454,
      "gamma_proportional_aversion": 3.334488933601465,
      "success": true,
      "log_likelihood": -46.051701856480946,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 86.01417575882056,
      "gamma_proportional_aversion": 28.728774896761998,
      "success": true,
      "log_likelihood": -713.8013788276545,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1388888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_value": 28.107946157714625,
      "gamma_proportional_aversion": 22.31634603309367,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 99.42845164906913,
      "gamma_proportional_aversion": 14.432524502517087,
      "success": true,
      "log_likelihood": -322.36191301696647,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 46.18144913495904,
      "gamma_proportional_aversion": 59.04578225391953,
      "success": true,
      "log_likelihood": -506.5687204572903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 27.559210542715306,
      "gamma_proportional_aversion": 82.01287022784099,
      "success": true,
      "log_likelihood": -345.38776394700693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 6.882907377037478,
      "gamma_proportional_aversion": 0.6882907426696957,
      "success": true,
      "log_likelihood": -185.58959963263217,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 67.35431116182883,
      "gamma_proportional_aversion": 85.1833664101327,
      "success": true,
      "log_likelihood": -253.2843602268452,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 46.98471506773686,
      "gamma_proportional_aversion": 51.45455597946217,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 90.83274635816359,
      "gamma_proportional_aversion": 29.181681922830293,
      "success": true,
      "log_likelihood": -483.5428695272498,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 32.07630574048213,
      "gamma_proportional_aversion": 66.46797358088152,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 42.18291882787288,
      "gamma_proportional_aversion": 3.792980854419803,
      "success": true,
      "log_likelihood": -276.3102111568856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 48.428708195420676,
      "gamma_proportional_aversion": 7.14371033340978,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 60.087801233693206,
      "gamma_proportional_aversion": 93.45511529147174,
      "success": true,
      "log_likelihood": -230.25850929680456,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 59.28237466577211,
      "gamma_proportional_aversion": 86.52449594040432,
      "success": true,
      "log_likelihood": -184.2068074367237,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 33.77382912846851,
      "gamma_proportional_aversion": 21.17408035002699,
      "success": true,
      "log_likelihood": -138.1551055766428,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 51.8274543877428,
      "gamma_proportional_aversion": 9.702823262800031,
      "success": true,
      "log_likelihood": -598.6721241774521,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 64.75221401639256,
      "gamma_proportional_aversion": 60.56435390220663,
      "success": true,
      "log_likelihood": -92.10340371656186,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 77.77964910813945,
      "gamma_proportional_aversion": 70.3868688827772,
      "success": true,
      "log_likelihood": -575.6462732474117,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 15.63684257360064,
      "gamma_proportional_aversion": 9.582766972449475,
      "success": true,
      "log_likelihood": -414.4653167371284,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 78.27089878351899,
      "gamma_proportional_aversion": 11.428831957647489,
      "success": true,
      "log_likelihood": -230.25850929680473,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 48.7331955899082,
      "gamma_proportional_aversion": 67.45181517689231,
      "success": true,
      "log_likelihood": -69.07755278652137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 61.151641969089134,
      "gamma_proportional_aversion": 91.90665088827036,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 19.88847742284071,
      "gamma_proportional_aversion": 7.6073643242030915,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 5.5438232923617825,
      "gamma_proportional_aversion": 74.93870215054888,
      "success": true,
      "log_likelihood": -368.41361487704756,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 17.979771094676963,
      "gamma_proportional_aversion": 1.015344728624927,
      "success": true,
      "log_likelihood": -391.4394658070267,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 12.087743881126944,
      "gamma_proportional_aversion": 85.28185046239659,
      "success": true,
      "log_likelihood": -621.6979751074924,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 94.19285762977863,
      "gamma_proportional_aversion": 62.079401390180585,
      "success": true,
      "log_likelihood": -368.41361487704745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 41.09404460236442,
      "gamma_proportional_aversion": 95.96686826662547,
      "success": true,
      "log_likelihood": -667.7496769675735,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 14.55337922170573,
      "gamma_proportional_aversion": 26.221537957895404,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 88.63820253485238,
      "gamma_proportional_aversion": 86.96052778100008,
      "success": true,
      "log_likelihood": -115.12925464660228,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 99.04976582849733,
      "gamma_proportional_aversion": 29.714929719835236,
      "success": true,
      "log_likelihood": -323.7482073778885,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 55.03373380369273,
      "gamma_proportional_aversion": 30.31707754504143,
      "success": true,
      "log_likelihood": -552.6204223173712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 58.525328577154866,
      "gamma_proportional_aversion": 61.6369325937166,
      "success": true,
      "log_likelihood": -368.41361487704745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 25.74346588501174,
      "gamma_proportional_aversion": 17.658994734421285,
      "success": true,
      "log_likelihood": -483.54286952724976,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 23.66161898955229,
      "gamma_proportional_aversion": 97.44959379116442,
      "success": true,
      "log_likelihood": -690.775527897614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 41.7511153886311,
      "gamma_proportional_aversion": 86.11602548530468,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 86.813396380221,
      "gamma_proportional_aversion": 0.038334450513333174,
      "success": true,
      "log_likelihood": -322.36191301696664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 50.68253688782399,
      "gamma_proportional_aversion": 49.102501177390266,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 45.597716007380065,
      "gamma_proportional_aversion": 84.46543070991702,
      "success": true,
      "log_likelihood": -345.38776394700704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 62.86002164792721,
      "gamma_proportional_aversion": 38.8074032926361,
      "success": true,
      "log_likelihood": -667.7496769675735,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 57.96282082971934,
      "gamma_proportional_aversion": 30.32616885904086,
      "success": true,
      "log_likelihood": -138.15510557664277,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 63.93870864125751,
      "gamma_proportional_aversion": 72.45976256317415,
      "success": true,
      "log_likelihood": -322.3619130169665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 72.13656858021764,
      "gamma_proportional_aversion": 76.42117753121448,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 11.95271565685494,
      "gamma_proportional_aversion": 43.599614249062505,
      "success": true,
      "log_likelihood": -46.05170185648092,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 36.486162234373,
      "gamma_proportional_aversion": 65.89402484959419,
      "success": true,
      "log_likelihood": -483.5428695272499,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 92.07908366688869,
      "gamma_proportional_aversion": 35.179740249166805,
      "success": true,
      "log_likelihood": -184.20680743672366,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 2.5137305609817306,
      "gamma_proportional_aversion": 47.48061104230621,
      "success": true,
      "log_likelihood": -690.775527897614,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 60.641651756567406,
      "gamma_proportional_aversion": 31.205640759063257,
      "success": true,
      "log_likelihood": -299.336062086926,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_value": 95.67545560167464,
      "gamma_proportional_aversion": 53.10735693184695,
      "success": true,
      "log_likelihood": -483.5428695272498,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_value": {
        "r": 0.11641401766866438,
        "p": 0.2487336561097406
      },
      "gamma_proportional_aversion": {
        "r": 0.17535371553841375,
        "p": 0.08097808196018133
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 747.0915026230294,
  "bic_Control": 824.317003433474,
  "bic_Cocaine": 677.9103248136728,
  "bic_results": {
    "average_bic": 747.0915026230294,
    "individual_bics": [
      145.32214344995492,
      559.7874601906834,
      697.9425657709263,
      513.7357583306025,
      559.7874601906834,
      882.14937321125,
      1388.71809367214,
      375.5806527503599,
      1480.821497392302,
      467.6840564705214,
      559.7874601906834,
      191.3738453100358,
      513.7357583306025,
      1296.6146899519845,
      1480.821497392302,
      1480.821497392302,
      1480.821497392302,
      1250.5629880918975,
      1296.614689951978,
      1480.821497392302,
      743.9942676310071,
      1250.5629880918973,
      421.63235461044076,
      697.9425657709261,
      467.6840564705214,
      790.0459694910882,
      743.9942676310073,
      283.4772490301979,
      1066.3561806515736,
      1112.4078825116546,
      1296.614689951978,
      145.3221434499549,
      605.8391620507646,
      467.68405647052134,
      1388.71809367214,
      697.9425657709262,
      329.5289508902787,
      651.8908639108453,
      559.7874601906834,
      1250.562988091897,
      836.0976713511691,
      99.27044158987411,
      1434.7697955322212,
      743.9942676310072,
      651.8908639108452,
      1020.3044787914928,
      697.9425657709261,
      378.34623714217656,
      513.7357583306026,
      790.0459694910882,
      974.2527769314119,
      237.42554717011674,
      559.7874601906834,
      790.0459694910882,
      467.68405647052134,
      375.5806527503596,
      283.4772490301978,
      1204.5112862318165,
      191.37384531003593,
      1158.4595843717357,
      836.097671351169,
      467.6840564705217,
      145.32214344995495,
      651.8908639108454,
      191.3738453100358,
      743.9942676310073,
      790.0459694909656,
      1250.562988091897,
      743.9942676310071,
      1342.6663918120591,
      7.167037869712219,
      237.42554717011677,
      654.6634526326892,
      1112.4078825116546,
      743.9942676310071,
      974.2527769314117,
      1388.7180936721402,
      191.3738453100358,
      651.8908639108455,
      145.32214344995492,
      697.9425657709263,
      1342.6663918120591,
      283.47724903019775,
      651.8908639108453,
      836.0976713511691,
      99.27044158987405,
      974.252776931412,
      375.58065275035955,
      1388.7180936721402,
      605.8391620507642,
      974.2527769314119
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        145.32214344995492,
        559.7874601906834,
        697.9425657709263,
        513.7357583306025,
        559.7874601906834,
        882.14937321125,
        1388.71809367214,
        375.5806527503599,
        1480.821497392302,
        467.6840564705214,
        559.7874601906834,
        191.3738453100358,
        513.7357583306025,
        1296.6146899519845,
        1480.821497392302,
        1480.821497392302,
        1480.821497392302,
        1250.5629880918975,
        1296.614689951978,
        1480.821497392302,
        743.9942676310071,
        1250.5629880918973,
        421.63235461044076,
        697.9425657709261,
        467.6840564705214,
        790.0459694910882,
        743.9942676310073,
        283.4772490301979,
        1066.3561806515736,
        1112.4078825116546,
        1296.614689951978,
        145.3221434499549,
        605.8391620507646,
        467.68405647052134,
        1388.71809367214,
        697.9425657709262,
        329.5289508902787,
        651.8908639108453,
        559.7874601906834,
        1250.562988091897,
        836.0976713511691,
        99.27044158987411,
        1434.7697955322212
      ],
      "Cocaine": [
        743.9942676310072,
        651.8908639108452,
        1020.3044787914928,
        697.9425657709261,
        378.34623714217656,
        513.7357583306026,
        790.0459694910882,
        974.2527769314119,
        237.42554717011674,
        559.7874601906834,
        790.0459694910882,
        467.68405647052134,
        375.5806527503596,
        283.4772490301978,
        1204.5112862318165,
        191.37384531003593,
        1158.4595843717357,
        836.097671351169,
        467.6840564705217,
        145.32214344995495,
        651.8908639108454,
        191.3738453100358,
        743.9942676310073,
        790.0459694909656,
        1250.562988091897,
        743.9942676310071,
        1342.6663918120591,
        7.167037869712219,
        237.42554717011677,
        654.6634526326892,
        1112.4078825116546,
        743.9942676310071,
        974.2527769314117,
        1388.7180936721402,
        191.3738453100358,
        651.8908639108455,
        145.32214344995492,
        697.9425657709263,
        1342.6663918120591,
        283.47724903019775,
        651.8908639108453,
        836.0976713511691,
        99.27044158987405,
        974.252776931412,
        375.58065275035955,
        1388.7180936721402,
        605.8391620507642,
        974.2527769314119
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_value: r = 0.116\n- gamma_proportional_aversion: r = 0.175",
  "previous_models": [
    "Specification: U = split_perc_self * (beta_value - gamma_proportional_aversion * max(0, fair_perc_self - split_perc_self))\nSummary: A multiplicative utility model for ultimatum game responders. The utility of accepting an offer is determined by the offered percentage (split_perc_self). This base value sensitivity is scaled by beta_value. Additionally, if the offer is below the participant's proportional fair share (fair_perc_self, calculated from token contributions), the sensitivity is reduced by a term proportional to the degree of unfairness, scaled by gamma_proportional_aversion. This structure aims to separate the influence of pure value sensitivity from the cost associated with proportional unfairness. The model has two learnable parameters: beta_value (base sensitivity) and gamma_proportional_aversion (proportional aversion strength), both constrained to be non-negative.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 747.0915026230294\nOverall Accuracy: 0.5534\nGroup Accuracies:\n- Control: 0.5071\n- Cocaine: 0.5949\n\nParameter Recovery:\n- beta_value: r = 0.116\n- gamma_proportional_aversion: r = 0.175"
  ]
}