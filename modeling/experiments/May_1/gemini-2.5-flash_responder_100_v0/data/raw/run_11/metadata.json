{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Design a computational model for the described ultimatum game responder task. Your model must meet the following criteria:\n1.  **Predict only responder behavior** (target variable: \"accept\").\n2.  **Achieve excellent parameter recovery (>= 0.7 correlation) for ALL learnable parameters.** This remains the *single most important* objective. Previous attempts have consistently failed here. A model is unusable if any learnable parameter cannot be reliably recovered, regardless of other metrics (like BIC or accuracy). Prioritize model structures that inherently enhance parameter identifiability from the data.\n3.  **Be applicable to the dataset:** Use only the provided data structure and variables available during responder trials (trial_role == 1).\n4.  **Predict utility:** Utility values will be converted to acceptance probabilities using a logistic function (with temperature 1). A utility > 0 implies > 50% probability of acceptance.\n\n**Analysis of Previous Attempt (Run 10):** The previous attempt implemented the multiplicative model `U = split_perc_self * (beta_value - gamma_proportional_aversion * max(0, fair_perc_self - split_perc_self))`. This model, despite having only two parameters and attempting a different structural form (multiplicative instead of additive penalties), **failed parameter recovery catastrophically** (`beta_value: r = 0.116`, `gamma_proportional_aversion: r = 0.175`). Its BIC (747.09) and accuracy (0.553) were also poor compared to the best performing models so far (e.g., Run 3 with BIC 76.39, accuracy 0.821, and recovery closer to 0.7). This strong failure suggests that this specific multiplicative structure did *not* achieve the desired parameter separability, possibly because the effects of `beta_value` and `gamma_proportional_aversion` on the utility curve were too highly correlated or substitutable given the data distribution. The failure to recover parameters renders the model unusable.\n\n**Guidance for the Next Model (Radically Prioritizing Parameter Recovery - Continued):** We have now attempted several model structures (additive penalties, quadratic penalties, non-linear exponents, multiplicative interaction), and *all* have failed to meet the critical parameter recovery threshold of 0.7 for all learnable parameters. The most successful model in terms of recovery (Run 3, `beta_gain * split_perc_self - gamma_unfairness * max(0, fair_perc_self - split_perc_self)`) was a simple additive model with *only one* linear penalty term based *only* on the proportional fair share, using only two parameters.\n\nThe consistent failure of more complex or alternative structures highlights that parameter identifiability in this dataset is extremely challenging. We *must* simplify and focus parameters on capturing distinct influences.\n\nFor Run 11, let's rethink the model structure entirely, focusing on making parameters influence the utility function in maximally separable ways.\n\nConsider these strategies, informed by the data characteristics and previous results:\n\n*   **Revisit Parsimony (Run 3's success):** Run 3, despite not reaching the 0.7 threshold, had the best recovery and fit with only two parameters. Its structure involved a base sensitivity to the offer and a linear penalty *specifically tied to deviation below the proportional fair share*. Can we build on this simplicity or find a minimal variation that pushes recovery above 0.7? What if the penalty was only active when the offer is below *both* 50% AND the proportional share? Or only below the proportional share, but with a slightly different form?\n*   **Piecewise Sensitivity:** Instead of additive penalties, define the utility function's *sensitivity* to `split_perc_self` differently depending on where `split_perc_self` falls relative to key thresholds (like `fair_perc_self`). For instance, one parameter could control the utility slope when the offer is equal to or above `fair_perc_self`, and another parameter could control the slope when the offer is below `fair_perc_self`. This means parameters define the function's rate of change in distinct regions, which might be more identifiable than scaling penalty terms.\n    *   Example idea: `U = beta_fair * split_perc_self` when `split_perc_self >= fair_perc_self`, and `U = beta_unfair * split_perc_self + constant` (or a different form) when `split_perc_self < fair_perc_self`. The parameters `beta_fair` and `beta_unfair` control the slope in different offer ranges, making their effects potentially more separable.\n*   **Novel Interactions:** Can you devise a novel way for parameters to interact with `split_perc_self` and `fair_perc_self` that hasn't been tried? Avoid simple additive penalties like in Run 6, 4, 9 and the failed multiplicative structure from Run 10. Think about how parameters could control thresholds, scaling factors *within* different regions, or the shape of the utility curve in a fundamentally different way.\n\nFor Run 11, propose a model structure that is distinctly different from simple additive penalties and the failed multiplicative structure. Focus on creating parameters whose effects are clearly distinguishable based on the data distribution of offers relative to fairness norms. **Prioritize structural forms that you believe inherently lead to lower parameter covariance and higher identifiability.**\n\nDefine clear, generous finite bounds for all learnable parameters. They should likely be non-negative if they represent sensitivities or aversion strengths.\n\nContinue to build the model using percentage-based values (`split_perc_self`, `fair_perc_self`).\n\nProvide your formal mathematical model between <MODEL> tags. Ensure *only* the mathematical formula is within these tags.\nProvide variable descriptions in JSON format between <VARIABLES> tags. Ensure learnable parameter names are clear and suitable for coding. Spell out Greek variables.\nSpecify the target variable using <target_variable> tags.\nProvide a concise, descriptive summary of the model between <SUMMARY> tags.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember to only model responder trials (where trial_role == 1) and use variables available in that context. The `fair_perc_self` variable (calculated as `(token_self / (token_self + token_opp)) * 100`) is useful for fairness calculations.\n\nFor run 11 of 100, please think through this step by step, focusing intently on designing a model structure that maximizes parameter identifiability given the data and the history of failed recovery attempts. Explore structural forms beyond simple additive penalties or the specific multiplicative form from Run 10. How can parameters capture the influence of the offer and fairness norms in distinct, separable ways? Then provide your model specification, variable descriptions, target variable, and summary.\n</think>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Design a computational model for the described ultimatum game responder task. Your model must meet the following criteria:\n1.  **Predict only responder behavior** (target variable: \"accept\").\n2.  **Achieve excellent parameter recovery (>= 0.7 correlation) for ALL learnable parameters.** This remains the *single most important* objective. Previous attempts have consistently failed here. A model is unusable if any learnable parameter cannot be reliably recovered, regardless of other metrics (like BIC or accuracy). Prioritize model structures that inherently enhance parameter identifiability from the data.\n3.  **Be applicable to the dataset:** Use only the provided data structure and variables available during responder trials (trial_role == 1).\n4.  **Predict utility:** Utility values will be converted to acceptance probabilities using a logistic function (with temperature 1). A utility > 0 implies > 50% probability of acceptance.\n\n**Analysis of Previous Attempt (Run 10):** The previous attempt implemented the multiplicative model `U = split_perc_self * (beta_value - gamma_proportional_aversion * max(0, fair_perc_self - split_perc_self))`. This model, despite having only two parameters and attempting a different structural form (multiplicative instead of additive penalties), **failed parameter recovery catastrophically** (`beta_value: r = 0.116`, `gamma_proportional_aversion: r = 0.175`). Its BIC (747.09) and accuracy (0.553) were also poor compared to the best performing models so far (e.g., Run 3 with BIC 76.39, accuracy 0.821, and recovery closer to 0.7). This strong failure suggests that this specific multiplicative structure did *not* achieve the desired parameter separability, possibly because the effects of `beta_value` and `gamma_proportional_aversion` on the utility curve were too highly correlated or substitutable given the data distribution. The failure to recover parameters renders the model unusable.\n\n**Guidance for the Next Model (Radically Prioritizing Parameter Recovery - Continued):** We have now attempted several model structures (additive penalties, quadratic penalties, non-linear exponents, multiplicative interaction), and *all* have failed to meet the critical parameter recovery threshold of 0.7 for all learnable parameters. The most successful model in terms of recovery (Run 3, `beta_gain * split_perc_self - gamma_unfairness * max(0, fair_perc_self - split_perc_self)`) was a simple additive model with *only one* linear penalty term based *only* on the proportional fair share, using only two parameters.\n\nThe consistent failure of more complex or alternative structures highlights that parameter identifiability in this dataset is extremely challenging. We *must* simplify and focus parameters on capturing distinct influences.\n\nFor Run 11, let's rethink the model structure entirely, focusing on making parameters influence the utility function in maximally separable ways.\n\nConsider these strategies, informed by the data characteristics and previous results:\n\n*   **Revisit Parsimony (Run 3's success):** Run 3, despite not reaching the 0.7 threshold, had the best recovery and fit with only two parameters. Its structure involved a base sensitivity to the offer and a linear penalty *specifically tied to deviation below the proportional fair share*. Can we build on this simplicity or find a minimal variation that pushes recovery above 0.7? What if the penalty was only active when the offer is below *both* 50% AND the proportional share? Or only below the proportional share, but with a slightly different form?\n*   **Piecewise Sensitivity:** Instead of additive penalties, define the utility function's *sensitivity* to `split_perc_self` differently depending on where `split_perc_self` falls relative to key thresholds (like `fair_perc_self`). For instance, one parameter could control the utility slope when the offer is equal to or above `fair_perc_self`, and another parameter could control the slope when the offer is below `fair_perc_self`. This means parameters define the function's rate of change in distinct regions, which might be more identifiable than scaling penalty terms.\n    *   Example idea: `U = beta_fair * split_perc_self` when `split_perc_self >= fair_perc_self`, and `U = beta_unfair * split_perc_self + constant` (or a different form) when `split_perc_self < fair_perc_self`. The parameters `beta_fair` and `beta_unfair` control the slope in different offer ranges, making their effects potentially more separable.\n*   **Novel Interactions:** Can you devise a novel way for parameters to interact with `split_perc_self` and `fair_perc_self` that hasn't been tried? Avoid simple additive penalties like in Run 6, 4, 9 and the failed multiplicative structure from Run 10. Think about how parameters could control thresholds, scaling factors *within* different regions, or the shape of the utility curve in a fundamentally different way.\n\nFor Run 11, propose a model structure that is distinctly different from simple additive penalties and the failed multiplicative structure. Focus on creating parameters whose effects are clearly distinguishable based on the data distribution of offers relative to fairness norms. **Prioritize structural forms that you believe inherently lead to lower parameter covariance and higher identifiability.**\n\nDefine clear, generous finite bounds for all learnable parameters. They should likely be non-negative if they represent sensitivities or aversion strengths.\n\nContinue to build the model using percentage-based values (`split_perc_self`, `fair_perc_self`).\n\nProvide your formal mathematical model between <MODEL> tags. Ensure *only* the mathematical formula is within these tags.\nProvide variable descriptions in JSON format between <VARIABLES> tags. Ensure learnable parameter names are clear and suitable for coding. Spell out Greek variables.\nSpecify the target variable using <target_variable> tags.\nProvide a concise, descriptive summary of the model between <SUMMARY> tags.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember to only model responder trials (where trial_role == 1) and use variables available in that context. The `fair_perc_self` variable (calculated as `(token_self / (token_self + token_opp)) * 100`) is useful for fairness calculations.\n\nFor run 11 of 100, please think through this step by step, focusing intently on designing a model structure that maximizes parameter identifiability given the data and the history of failed recovery attempts. Explore structural forms beyond simple additive penalties or the specific multiplicative form from Run 10. How can parameters capture the influence of the offer and fairness norms in distinct, separable ways? Then provide your model specification, variable descriptions, target variable, and summary.\n</think>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, I have analyzed the requirements and the history of previous attempts. The consistent failure of parameter recovery across different simple structures (additive, multiplicative, quadratic) indicates a strong need for a model where parameters influence the utility function in more distinct and less correlated ways.\n\nBuilding on the relative success of models incorporating the proportional fair share (`fair_perc_self`) and the idea of piecewise effects, I propose a model where the utility is a function of the offered percentage (`split_perc_self`), but the sensitivity to the offer changes depending on whether it is above or below the calculated fair share. This is implemented using `max` terms that effectively create a piecewise linear function around the `fair_perc_self` reference point.\n\nThis structure aims to make the parameters `beta` (sensitivity below fair) and `gamma` (sensitivity above fair) control distinct parts of the utility function's shape, while `alpha` provides a base sensitivity, potentially enhancing their identifiability compared to simple penalty multipliers that apply uniformly or interact less separably with the base offer sensitivity.\n\nHere is the proposed model:\n\n<MODEL>\nutility = alpha * split_perc_self + beta * max(0, fair_perc_self - split_perc_self) + gamma * max(0, split_perc_self - fair_perc_self)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Calculated utility of accepting the offer for a given trial.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %) for a given trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The fair share for the participant based on token contributions (in %) for a given trial. Calculated as (token_self / (token_self + token_opp)) * 100.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Base sensitivity parameter to the offered percentage. Controls the utility slope if beta and gamma were zero.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Penalty parameter for offers below the fair percentage. Represents aversion to getting less than the fair share, acting as a multiplier on the difference.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter for offers above the fair percentage. Represents additional utility or disutility for getting more than the fair share, acting as a multiplier on the difference.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA piecewise linear utility model where the utility of an offer percentage is determined by a base sensitivity (alpha) plus additional sensitivities (beta, gamma) to the deviation from the calculated fair percentage. Beta penalizes amounts below fair, and gamma scales amounts above fair. This structure creates distinct linear segments for utility below and above the fair share, aiming to improve parameter identifiability.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta', 'gamma']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                utility = alpha * split_perc_self + beta * max(0, fair_perc_self - split_perc_self) + gamma * max(0, split_perc_self - fair_perc_self)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Calculated utility of accepting the offer for a given trial.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %) for a given trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The fair share for the participant based on token contributions (in %) for a given trial. Calculated as (token_self / (token_self + token_opp)) * 100.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Base sensitivity parameter to the offered percentage. Controls the utility slope if beta and gamma were zero.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Penalty parameter for offers below the fair percentage. Represents aversion to getting less than the fair share, acting as a multiplier on the difference.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter for offers above the fair percentage. Represents additional utility or disutility for getting more than the fair share, acting as a multiplier on the difference.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=1, beta=1, gamma=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate fair_perc_self, handling potential division by zero\n        if (token_self + token_opp) == 0:\n            fair_perc_self = 50  # or another reasonable default\n        else:\n            fair_perc_self = (token_self / (token_self + token_opp)) * 100\n\n        utility = alpha * split_perc_self + beta * max(0, fair_perc_self - split_perc_self) + gamma * max(0, split_perc_self - fair_perc_self)\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1746096630.328655
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Base sensitivity parameter to the offered percentage. Controls the utility slope if beta and gamma were zero.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Penalty parameter for offers below the fair percentage. Represents aversion to getting less than the fair share, acting as a multiplier on the difference.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter for offers above the fair percentage. Represents additional utility or disutility for getting more than the fair share, acting as a multiplier on the difference.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "utility = alpha * split_perc_self + beta * max(0, fair_perc_self - split_perc_self) + gamma * max(0, split_perc_self - fair_perc_self)",
  "variable_descriptions": {
    "utility": {
      "description": "Calculated utility of accepting the offer for a given trial.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant (in %) for a given trial.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "fair_perc_self": {
      "description": "The fair share for the participant based on token contributions (in %) for a given trial. Calculated as (token_self / (token_self + token_opp)) * 100.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Base sensitivity parameter to the offered percentage. Controls the utility slope if beta and gamma were zero.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta": {
      "description": "Penalty parameter for offers below the fair percentage. Represents aversion to getting less than the fair share, acting as a multiplier on the difference.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma": {
      "description": "Sensitivity parameter for offers above the fair percentage. Represents additional utility or disutility for getting more than the fair share, acting as a multiplier on the difference.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A piecewise linear utility model where the utility of an offer percentage is determined by a base sensitivity (alpha) plus additional sensitivities (beta, gamma) to the deviation from the calculated fair percentage. Beta penalizes amounts below fair, and gamma scales amounts above fair. This structure creates distinct linear segments for utility below and above the fair share, aiming to improve parameter identifiability.",
  "target_variable": "accept",
  "full_reasoning": "Okay, I have analyzed the requirements and the history of previous attempts. The consistent failure of parameter recovery across different simple structures (additive, multiplicative, quadratic) indicates a strong need for a model where parameters influence the utility function in more distinct and less correlated ways.\n\nBuilding on the relative success of models incorporating the proportional fair share (`fair_perc_self`) and the idea of piecewise effects, I propose a model where the utility is a function of the offered percentage (`split_perc_self`), but the sensitivity to the offer changes depending on whether it is above or below the calculated fair share. This is implemented using `max` terms that effectively create a piecewise linear function around the `fair_perc_self` reference point.\n\nThis structure aims to make the parameters `beta` (sensitivity below fair) and `gamma` (sensitivity above fair) control distinct parts of the utility function's shape, while `alpha` provides a base sensitivity, potentially enhancing their identifiability compared to simple penalty multipliers that apply uniformly or interact less separably with the base offer sensitivity.\n\nHere is the proposed model:\n\n<MODEL>\nutility = alpha * split_perc_self + beta * max(0, fair_perc_self - split_perc_self) + gamma * max(0, split_perc_self - fair_perc_self)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Calculated utility of accepting the offer for a given trial.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %) for a given trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The fair share for the participant based on token contributions (in %) for a given trial. Calculated as (token_self / (token_self + token_opp)) * 100.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Base sensitivity parameter to the offered percentage. Controls the utility slope if beta and gamma were zero.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta\": {\n      \"description\": \"Penalty parameter for offers below the fair percentage. Represents aversion to getting less than the fair share, acting as a multiplier on the difference.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma\": {\n      \"description\": \"Sensitivity parameter for offers above the fair percentage. Represents additional utility or disutility for getting more than the fair share, acting as a multiplier on the difference.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA piecewise linear utility model where the utility of an offer percentage is determined by a base sensitivity (alpha) plus additional sensitivities (beta, gamma) to the deviation from the calculated fair percentage. Beta penalizes amounts below fair, and gamma scales amounts above fair. This structure creates distinct linear segments for utility below and above the fair share, aiming to improve parameter identifiability.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: utility = alpha * split_perc_self + beta * max(0, fair_perc_self - split_perc_self) + gamma * max(0, split_perc_self - fair_perc_self)\nSummary: A piecewise linear utility model where the utility of an offer percentage is determined by a base sensitivity (alpha) plus additional sensitivities (beta, gamma) to the deviation from the calculated fair percentage. Beta penalizes amounts below fair, and gamma scales amounts above fair. This structure creates distinct linear segments for utility below and above the fair share, aiming to improve parameter identifiability.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=1, beta=1, gamma=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate fair_perc_self, handling potential division by zero\n        if (token_self + token_opp) == 0:\n            fair_perc_self = 50  # or another reasonable default\n        else:\n            fair_perc_self = (token_self / (token_self + token_opp)) * 100\n\n        utility = alpha * split_perc_self + beta * max(0, fair_perc_self - split_perc_self) + gamma * max(0, split_perc_self - fair_perc_self)\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6996336996336996,
  "group_accuracies": {
    "Control": 0.729328165374677,
    "Cocaine": 0.6730324074074074
  },
  "group_parameter_averages": {
    "Control": {
      "alpha": 3.6078332942077855,
      "beta": 5.400992249199426,
      "gamma": -0.4140136089531825
    },
    "Cocaine": {
      "alpha": 0.7674277712070966,
      "beta": 3.426572168809501,
      "gamma": 1.2854331112107826
    }
  },
  "fitting_results": [
    {
      "alpha": -10.0,
      "beta": 0.0,
      "gamma": -8.471735064887342,
      "success": true,
      "log_likelihood": -69.07755278652132,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 8.197654938677406,
      "beta": 1.9047040889442923,
      "gamma": -5.936125842148117,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 9.781632230119783,
      "beta": 4.55369224251946,
      "gamma": 5.564140753955083,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 4.437668931588416,
      "beta": 5.549861584768793,
      "gamma": -1.7731055624908425,
      "success": true,
      "log_likelihood": -483.5428695272498,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -10.0,
      "beta": 0.0,
      "gamma": -1.1838522081748,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 7.810048206523842,
      "beta": 4.82368266268602,
      "gamma": -0.6274466590459493,
      "success": true,
      "log_likelihood": -299.33606208692606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 5.4930865383892264,
      "beta": 6.137315321556668,
      "gamma": -9.849991535970961,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 10.0,
      "gamma": -8.051071973846495,
      "success": true,
      "log_likelihood": -276.31021115688566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 10.0,
      "gamma": -7.740963614032004,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 5.913661393664926,
      "gamma": -4.680613666318676,
      "success": true,
      "log_likelihood": -506.56872045729034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -10.0,
      "beta": 0.0,
      "gamma": -2.116320867693487,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -10.0,
      "beta": 0.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -8.333664759825485,
      "beta": 0.8685259739346196,
      "gamma": -0.729759824039693,
      "success": true,
      "log_likelihood": -345.387763947007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 10.0,
      "gamma": -8.512987519875889,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 10.0,
      "gamma": -9.782978152839789,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 3.6138977900564746,
      "beta": 10.0,
      "gamma": 4.236727566755182,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 8.244809772823345,
      "beta": 6.189310307900334,
      "gamma": -6.536725165899155,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 3.7059053509374458,
      "beta": 7.28532191121095,
      "gamma": -0.7816705976131395,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 10.0,
      "gamma": -6.413873841974462,
      "success": true,
      "log_likelihood": -92.10340371656177,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 10.0,
      "gamma": 5.231664166314518,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.014617788408740885,
      "beta": 0.0,
      "gamma": 2.0492253400590315,
      "success": true,
      "log_likelihood": -22.736140672516285,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 2.8912123023038916,
      "beta": 3.1987909471169598,
      "gamma": -1.091405726163492,
      "success": true,
      "log_likelihood": -115.12925464660225,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -10.0,
      "beta": 0.0,
      "gamma": 4.311526729024472,
      "success": true,
      "log_likelihood": -299.33606208692606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 10.0,
      "gamma": -8.618397487386115,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 10.0,
      "gamma": -4.535370424427483,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 10.0,
      "gamma": 1.301826208275136,
      "success": true,
      "log_likelihood": -345.38776394700704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 10.0,
      "gamma": -4.105448991934275,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 5.7527866682696445,
      "beta": 9.568324202013095,
      "gamma": 8.862927895721214,
      "success": true,
      "log_likelihood": -598.6721241774521,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 2.903149572972893,
      "beta": 4.474029216187087,
      "gamma": 3.7044922225957837,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 5.359790490924169,
      "beta": 2.6558727684886274,
      "gamma": 7.32795326781941,
      "success": true,
      "log_likelihood": -184.20680743672378,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 3.4833383846920682,
      "beta": 8.265504154412307,
      "gamma": 1.4018477927299706,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -10.0,
      "beta": 0.0,
      "gamma": 4.004348639436728,
      "success": true,
      "log_likelihood": -69.07755278652138,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -0.0012430094278600959,
      "beta": 0.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -23.56079242601341,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -7.317406513469217,
      "beta": 0.6206961035469689,
      "gamma": 0.8667202725591334,
      "success": true,
      "log_likelihood": -322.3619130169665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 8.466299515722259,
      "beta": 5.360231421406658,
      "gamma": 3.774487920978748,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 5.212623759706647,
      "beta": 3.616783086106774,
      "gamma": 5.816039169543561,
      "success": true,
      "log_likelihood": -299.3360620869261,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 4.023477979356816,
      "beta": 7.2724056985798295,
      "gamma": -3.1631280704579616,
      "success": true,
      "log_likelihood": -253.2843602268452,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 2.754472960258674,
      "beta": 2.597030970939257,
      "gamma": 6.189959659553637,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 8.642672751925591,
      "beta": 8.162041075950903,
      "gamma": -8.809969449864717,
      "success": true,
      "log_likelihood": -276.3102111568857,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 7.7891943274316455,
      "gamma": 2.1839076597456106,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 10.0,
      "gamma": 9.583926364398891,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": -10.0,
      "beta": 0.0,
      "gamma": 6.047425872354651,
      "success": true,
      "log_likelihood": -184.20680743672372,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 5.435687256209133,
      "gamma": -6.748790439722763,
      "success": true,
      "log_likelihood": -23.02585092644049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 7.5307175824992605,
      "beta": 5.487338286988722,
      "gamma": 5.865901277159804,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 1.4600199677488703,
      "beta": 0.640195289421287,
      "gamma": -0.7838323388928341,
      "success": true,
      "log_likelihood": -322.36189303315183,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 4.521061655851801,
      "beta": 1.5947325499929221,
      "gamma": -3.2771675959273523,
      "success": true,
      "log_likelihood": -230.2585092968047,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 7.091486655531323,
      "beta": 8.861811171881541,
      "gamma": 9.50028594885913,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -10.0,
      "beta": 0.0,
      "gamma": 4.394484312402849,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 7.129341061354843,
      "beta": 3.1701614538928578,
      "gamma": -0.3253472384785887,
      "success": true,
      "log_likelihood": -483.5428695272498,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 2.528320760954374,
      "beta": 0.0,
      "gamma": -1.4993909241753158,
      "success": true,
      "log_likelihood": -391.3399577074214,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 5.276413240505073,
      "beta": 3.887580730100735,
      "gamma": -2.46069739413257,
      "success": true,
      "log_likelihood": -253.28436022684522,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -10.0,
      "beta": 0.0,
      "gamma": 4.887273602380551,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 10.0,
      "gamma": -7.990392842142029,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 1.4799613084234249,
      "beta": 1.308325485861923,
      "gamma": 7.5012112058268485,
      "success": true,
      "log_likelihood": -345.3877639470071,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -10.0,
      "beta": 0.0,
      "gamma": -2.286601334121066,
      "success": true,
      "log_likelihood": -322.36191301696647,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -10.0,
      "beta": 0.0,
      "gamma": 5.297327593242908,
      "success": true,
      "log_likelihood": -276.31021115688554,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -0.023704292806927138,
      "beta": 0.0,
      "gamma": 2.1487163086159025,
      "success": true,
      "log_likelihood": -21.49591006140982,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.016355883885990446,
      "beta": 0.09208992840395742,
      "gamma": 9.685975479737529,
      "success": true,
      "log_likelihood": -10.535792016101203,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -10.0,
      "beta": 0.0,
      "gamma": -5.789812732110353,
      "success": true,
      "log_likelihood": -92.10340371656181,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 5.153094922445348,
      "beta": 0.7562073250144152,
      "gamma": -4.621468623884281,
      "success": true,
      "log_likelihood": -161.18095650668326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 10.0,
      "gamma": -1.0838332748835828,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 7.8572841680412395,
      "beta": 3.557146435592685,
      "gamma": 0.5592061150922376,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -10.0,
      "beta": 0.0,
      "gamma": -9.058557275539908,
      "success": true,
      "log_likelihood": -69.07755278652142,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -10.0,
      "beta": 0.0,
      "gamma": -2.299386704370681,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.8796286202747439,
      "beta": 8.17028502042933,
      "gamma": 3.6138712751949225,
      "success": true,
      "log_likelihood": -644.7238260375331,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 1.32762562248576,
      "beta": 5.008492546237314,
      "gamma": 2.8119661834519167,
      "success": true,
      "log_likelihood": -368.41361487704745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 10.0,
      "gamma": -6.972746352871077,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 10.0,
      "gamma": -1.036604297979622,
      "success": true,
      "log_likelihood": -115.1292546466023,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -10.0,
      "beta": 0.0,
      "gamma": -2.9557287125661063,
      "success": true,
      "log_likelihood": -460.5170185972093,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 10.0,
      "gamma": 10.0,
      "success": true,
      "log_likelihood": -69.07755278652137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 6.516895703960721,
      "beta": 3.103434524267551,
      "gamma": 3.3515378033527163,
      "success": true,
      "log_likelihood": -736.8272297576949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -10.0,
      "beta": 0.0,
      "gamma": -8.562729511695375,
      "success": true,
      "log_likelihood": -115.12925464660226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 7.364211705834212,
      "beta": 0.19936481502948578,
      "gamma": 7.789361458583706,
      "success": true,
      "log_likelihood": -391.439465807088,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 3.9509891496555447,
      "beta": 6.6577876589595615,
      "gamma": 3.4854101284749497,
      "success": true,
      "log_likelihood": -184.20680743672386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -9.247438019044823,
      "beta": 1.0825655952014148,
      "gamma": 9.406559355019361,
      "success": true,
      "log_likelihood": -414.4653165150532,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 8.831223505452737,
      "beta": 1.799790944238845,
      "gamma": 6.243331850209,
      "success": true,
      "log_likelihood": -253.28436022684528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 2.045705891021697,
      "beta": 4.289616355712669,
      "gamma": 3.687830447882334,
      "success": true,
      "log_likelihood": -46.051701856480875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -10.0,
      "beta": 0.0,
      "gamma": 5.9572721495623355,
      "success": true,
      "log_likelihood": -46.051701856480925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 10.0,
      "gamma": 3.7444670892088077,
      "success": true,
      "log_likelihood": -322.36191301696664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -10.0,
      "beta": 0.0,
      "gamma": -2.208126674271864,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 0.0,
      "gamma": -6.795102505824639,
      "success": true,
      "log_likelihood": -391.439465807088,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 10.0,
      "gamma": 5.468031294255216,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -10.0,
      "beta": 0.0,
      "gamma": 3.013024913686454,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -5.0164832281297755,
      "beta": 0.28734092629026264,
      "gamma": 4.031717019159116,
      "success": true,
      "log_likelihood": -414.4653167371284,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 8.720211151398633,
      "beta": 5.240548777690238,
      "gamma": 6.256714424822153,
      "success": true,
      "log_likelihood": -322.36191301696664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -7.985063641357382,
      "beta": 0.1844443386414707,
      "gamma": 3.7956855874044457,
      "success": true,
      "log_likelihood": -92.10340371656183,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 4.6058478145476425,
      "beta": 10.0,
      "gamma": -6.149359875094655,
      "success": true,
      "log_likelihood": -253.28436022684514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -10.0,
      "beta": 0.0,
      "gamma": 1.1549224335605288,
      "success": true,
      "log_likelihood": -184.20680743672372,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 9.067726772839244,
      "gamma": 9.149648144254183,
      "success": true,
      "log_likelihood": -46.05170185648088,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": -5.177174172593695,
      "beta": 0.028477170167637844,
      "gamma": -3.354317445427723,
      "success": true,
      "log_likelihood": -391.4394658070879,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta": 10.0,
      "gamma": -1.5897404088927143,
      "success": true,
      "log_likelihood": -253.28436022684528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.7976545124296989,
        "p": 3.020946951787551e-23
      },
      "beta": {
        "r": 0.3992461437638667,
        "p": 3.876286516430961e-05
      },
      "gamma": {
        "r": 0.06348435930022495,
        "p": 0.5303345040192982
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 481.0838989642641,
  "bic_Control": 425.22727965334553,
  "bic_Cocaine": 531.1221204302954,
  "bic_results": {
    "average_bic": 481.0838989642641,
    "individual_bics": [
      148.90566238841097,
      839.6811902896252,
      793.6294884295443,
      977.836295869868,
      747.5777865694633,
      609.4226809892205,
      10.75055680816833,
      563.3709791291396,
      10.75055680816833,
      1023.887997729949,
      747.5777865694633,
      194.9573642484919,
      701.5260847093823,
      10.75055680816833,
      10.75055680816833,
      10.75055680816833,
      10.75055680816833,
      241.00906610857285,
      194.95736424849187,
      10.75055680816833,
      56.2228381604009,
      241.00906610857282,
      609.4226809892205,
      793.6294884295443,
      839.6811902896252,
      701.5260847093824,
      747.5777865694633,
      1208.0948051702726,
      194.9573642484919,
      379.1641716888159,
      10.75055680816833,
      148.9056623884111,
      57.872141667395155,
      655.4743828493014,
      10.75055680816833,
      609.4226809892206,
      517.3192772690587,
      839.6811902896252,
      563.3709791291398,
      148.90566238841103,
      655.4743828493015,
      379.16417168881577,
      56.80225866824931,
      747.5777865694633,
      655.474342881672,
      471.26757540897773,
      793.6294884295443,
      655.4743828493015,
      977.836295869868,
      793.4304722302111,
      517.3192772690588,
      241.00906610857285,
      793.6294884295443,
      701.5260847093825,
      655.4743828493013,
      563.3709791291394,
      53.742376938187974,
      31.822140847570736,
      194.95736424849196,
      333.11246982873485,
      655.4743828493015,
      839.6811902896252,
      148.90566238841117,
      747.5777865694633,
      1300.1982088904344,
      747.5777865694632,
      148.90566238841095,
      241.00906610857294,
      931.7845940097869,
      148.90566238841106,
      1484.4050163307581,
      241.00906610857285,
      793.6294884295444,
      379.16417168881605,
      839.6811898454747,
      517.319277269059,
      102.85396052833008,
      102.85396052833018,
      655.4743828493016,
      148.90566238841103,
      793.6294884295444,
      148.90566238841095,
      194.9573642484919,
      839.6811902896251,
      655.4743828493016,
      194.95736424849198,
      517.3192772690586,
      379.16417168881577,
      102.85396052833009,
      793.6294884295442,
      517.319277269059
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        148.90566238841097,
        839.6811902896252,
        793.6294884295443,
        977.836295869868,
        747.5777865694633,
        609.4226809892205,
        10.75055680816833,
        563.3709791291396,
        10.75055680816833,
        1023.887997729949,
        747.5777865694633,
        194.9573642484919,
        701.5260847093823,
        10.75055680816833,
        10.75055680816833,
        10.75055680816833,
        10.75055680816833,
        241.00906610857285,
        194.95736424849187,
        10.75055680816833,
        56.2228381604009,
        241.00906610857282,
        609.4226809892205,
        793.6294884295443,
        839.6811902896252,
        701.5260847093824,
        747.5777865694633,
        1208.0948051702726,
        194.9573642484919,
        379.1641716888159,
        10.75055680816833,
        148.9056623884111,
        57.872141667395155,
        655.4743828493014,
        10.75055680816833,
        609.4226809892206,
        517.3192772690587,
        839.6811902896252,
        563.3709791291398,
        148.90566238841103,
        655.4743828493015,
        379.16417168881577,
        56.80225866824931
      ],
      "Cocaine": [
        747.5777865694633,
        655.474342881672,
        471.26757540897773,
        793.6294884295443,
        655.4743828493015,
        977.836295869868,
        793.4304722302111,
        517.3192772690588,
        241.00906610857285,
        793.6294884295443,
        701.5260847093825,
        655.4743828493013,
        563.3709791291394,
        53.742376938187974,
        31.822140847570736,
        194.95736424849196,
        333.11246982873485,
        655.4743828493015,
        839.6811902896252,
        148.90566238841117,
        747.5777865694633,
        1300.1982088904344,
        747.5777865694632,
        148.90566238841095,
        241.00906610857294,
        931.7845940097869,
        148.90566238841106,
        1484.4050163307581,
        241.00906610857285,
        793.6294884295444,
        379.16417168881605,
        839.6811898454747,
        517.319277269059,
        102.85396052833008,
        102.85396052833018,
        655.4743828493016,
        148.90566238841103,
        793.6294884295444,
        148.90566238841095,
        194.9573642484919,
        839.6811902896251,
        655.4743828493016,
        194.95736424849198,
        517.3192772690586,
        379.16417168881577,
        102.85396052833009,
        793.6294884295442,
        517.319277269059
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.798\n- beta: r = 0.399\n- gamma: r = 0.063",
  "previous_models": [
    "Specification: utility = alpha * split_perc_self + beta * max(0, fair_perc_self - split_perc_self) + gamma * max(0, split_perc_self - fair_perc_self)\nSummary: A piecewise linear utility model where the utility of an offer percentage is determined by a base sensitivity (alpha) plus additional sensitivities (beta, gamma) to the deviation from the calculated fair percentage. Beta penalizes amounts below fair, and gamma scales amounts above fair. This structure creates distinct linear segments for utility below and above the fair share, aiming to improve parameter identifiability.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 481.0838989642641\nOverall Accuracy: 0.6996\nGroup Accuracies:\n- Control: 0.7293\n- Cocaine: 0.6730\n\nParameter Recovery:\n- alpha: r = 0.798\n- beta: r = 0.399\n- gamma: r = 0.063"
  ]
}