{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Based on the results of Run 11, where only the `alpha` parameter (base sensitivity to the offer) achieved sufficient recovery (r=0.798), while the parameters scaling deviations below (`beta`, r=0.399) and above (`gamma`, r=0.063) the fair share failed significantly, it's clear that disentangling the influence of these continuous deviation terms from the base sensitivity is proving very difficult for parameter recovery in this dataset. The piecewise linear structure attempted in Run 11, while conceptually sound, did not resolve the identifiability issues for the deviation parameters.\n\nThe most critical objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. A model is unusable otherwise. We must continue to prioritize model structures that make parameters influence the utility function in maximally separable ways.\n\nFor Run 12, let's pivot to a model where fairness acts as a more discrete, threshold-based influence rather than a continuous penalty or bonus based on the exact difference. This might help make the fairness parameter's effect more distinct and thus better identifiable.\n\nConsider a model with a base sensitivity to the offered percentage, and a *fixed penalty* that is applied *only* when the offer falls below the proportional fair share (`fair_perc_self`). This treats \"being below fair\" as a distinct state that triggers a specific cost, rather than a continuous penalty proportional to the magnitude of unfairness. This structure aims to cleanly separate the effect of the offer's value from the effect of crossing the fairness threshold.\n\n**Proposed Model Structure Idea:**\n\nThe utility of accepting an offer is determined by:\n1.  A base utility proportional to the offered percentage (`split_perc_self`), scaled by a parameter `alpha`.\n2.  An additional fixed penalty, scaled by a parameter `beta_step`, which is applied *only* if `split_perc_self` is less than `fair_perc_self`. If `split_perc_self` is equal to or greater than `fair_perc_self`, this penalty is zero.\n\nThis model has two learnable parameters: `alpha` representing the base value sensitivity, and `beta_step` representing the magnitude of the fixed penalty for unfair offers. Both parameters should be constrained to be non-negative, as a higher offer should generally increase utility (`alpha`), and offers below fair should incur a penalty (`beta_step`).\n\n**Guidance for the Next Model (Run 12):**\n\nDesign a computational model implementing the \"step penalty\" concept described above. This model structure simplifies the influence of fairness on utility by making it a binary switch (on/off) based on the `fair_perc_self` threshold, rather than a continuous function of the deviation magnitude. This structural change is intended to improve the separability and identifiability of the `beta_step` parameter from `alpha`.\n\n*   **Prioritize Parameter Recovery:** Design the model structure to ensure `alpha` and `beta_step` have maximally distinguishable effects on the utility function given the data.\n*   **Parameter Constraints:** Define clear, generous, finite, non-negative bounds for both `alpha` and `beta_step`. Suggest `alpha` bounds [0, 10] and `beta_step` bounds [0, 100].\n*   **Model Specification:** Provide the mathematical formula between <MODEL> tags using standard mathematical notation. Ensure the formula reflects the fixed penalty applied only when `split_perc_self < fair_perc_self`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags, including the specified bounds and learnable status for `alpha` and `beta_step`.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags.\n\nThink creatively about how to implement the \"fixed penalty below fair\" logic concisely within the single expression required for the <MODEL> tag using available mathematical functions (`max`, `sign`, etc.) to represent the conditional nature of the penalty. The core logic is: Utility = (Sensitivity to Offer) * Offer - (Penalty Magnitude) * (Indicator: IsOfferBelowFair).\n\nFocus intently on this distinct structural approach \u2013 separating base value sensitivity from a discrete fairness cost \u2013 as a strategy to finally achieve the necessary parameter identifiability.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember `fair_perc_self` can be calculated as `(token_self / (token_self + token_opp)) * 100`. Use variables available for responder trials (`trial_role == 1`).\n\nFor run 12 of 100, please think through this step by step, focusing intently on designing a model structure that maximizes parameter identifiability given the data and the history of failed recovery attempts, specifically implementing the described step penalty model. Then provide your model specification, variable descriptions, target variable, and summary.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Based on the results of Run 11, where only the `alpha` parameter (base sensitivity to the offer) achieved sufficient recovery (r=0.798), while the parameters scaling deviations below (`beta`, r=0.399) and above (`gamma`, r=0.063) the fair share failed significantly, it's clear that disentangling the influence of these continuous deviation terms from the base sensitivity is proving very difficult for parameter recovery in this dataset. The piecewise linear structure attempted in Run 11, while conceptually sound, did not resolve the identifiability issues for the deviation parameters.\n\nThe most critical objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. A model is unusable otherwise. We must continue to prioritize model structures that make parameters influence the utility function in maximally separable ways.\n\nFor Run 12, let's pivot to a model where fairness acts as a more discrete, threshold-based influence rather than a continuous penalty or bonus based on the exact difference. This might help make the fairness parameter's effect more distinct and thus better identifiable.\n\nConsider a model with a base sensitivity to the offered percentage, and a *fixed penalty* that is applied *only* when the offer falls below the proportional fair share (`fair_perc_self`). This treats \"being below fair\" as a distinct state that triggers a specific cost, rather than a continuous penalty proportional to the magnitude of unfairness. This structure aims to cleanly separate the effect of the offer's value from the effect of crossing the fairness threshold.\n\n**Proposed Model Structure Idea:**\n\nThe utility of accepting an offer is determined by:\n1.  A base utility proportional to the offered percentage (`split_perc_self`), scaled by a parameter `alpha`.\n2.  An additional fixed penalty, scaled by a parameter `beta_step`, which is applied *only* if `split_perc_self` is less than `fair_perc_self`. If `split_perc_self` is equal to or greater than `fair_perc_self`, this penalty is zero.\n\nThis model has two learnable parameters: `alpha` representing the base value sensitivity, and `beta_step` representing the magnitude of the fixed penalty for unfair offers. Both parameters should be constrained to be non-negative, as a higher offer should generally increase utility (`alpha`), and offers below fair should incur a penalty (`beta_step`).\n\n**Guidance for the Next Model (Run 12):**\n\nDesign a computational model implementing the \"step penalty\" concept described above. This model structure simplifies the influence of fairness on utility by making it a binary switch (on/off) based on the `fair_perc_self` threshold, rather than a continuous function of the deviation magnitude. This structural change is intended to improve the separability and identifiability of the `beta_step` parameter from `alpha`.\n\n*   **Prioritize Parameter Recovery:** Design the model structure to ensure `alpha` and `beta_step` have maximally distinguishable effects on the utility function given the data.\n*   **Parameter Constraints:** Define clear, generous, finite, non-negative bounds for both `alpha` and `beta_step`. Suggest `alpha` bounds [0, 10] and `beta_step` bounds [0, 100].\n*   **Model Specification:** Provide the mathematical formula between <MODEL> tags using standard mathematical notation. Ensure the formula reflects the fixed penalty applied only when `split_perc_self < fair_perc_self`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags, including the specified bounds and learnable status for `alpha` and `beta_step`.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags.\n\nThink creatively about how to implement the \"fixed penalty below fair\" logic concisely within the single expression required for the <MODEL> tag using available mathematical functions (`max`, `sign`, etc.) to represent the conditional nature of the penalty. The core logic is: Utility = (Sensitivity to Offer) * Offer - (Penalty Magnitude) * (Indicator: IsOfferBelowFair).\n\nFocus intently on this distinct structural approach \u2013 separating base value sensitivity from a discrete fairness cost \u2013 as a strategy to finally achieve the necessary parameter identifiability.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember `fair_perc_self` can be calculated as `(token_self / (token_self + token_opp)) * 100`. Use variables available for responder trials (`trial_role == 1`).\n\nFor run 12 of 100, please think through this step by step, focusing intently on designing a model structure that maximizes parameter identifiability given the data and the history of failed recovery attempts, specifically implementing the described step penalty model. Then provide your model specification, variable descriptions, target variable, and summary.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, Expert Computational Modeler reporting for duty! Let's design this model for Run 12, focusing intently on parameter recovery by using a step penalty for unfair offers. This structure aims to create a clearer, more separable influence for the fairness parameter.\n\nHere is the computational model specification:\n\n<MODEL>\nU = alpha * split_perc_self - beta_step * max(0, -sign(split_perc_self - (token_self / (token_self + token_opp)) * 100))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer. This value is transformed via a logistic function (with temperature 1) into the probability of acceptance.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Parameter representing the participant's base sensitivity to the percentage of the combined earning offered to themselves. Higher alpha means higher utility for a given offered percentage.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_step\": {\n      \"description\": \"Parameter representing a fixed utility penalty applied when the percentage offered to the participant is strictly less than their proportionally fair share based on token contributions.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the combined earning proposed to the participant in a given trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"The number of tokens found by the participant in the pre-task, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"The number of tokens found by the opponent in the pre-task, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model for responder decisions incorporating sensitivity to the offered percentage and a fixed penalty for offers below the proportional fair share. Utility is calculated as a linear function of the offered percentage scaled by 'alpha', minus a penalty 'beta_step' that is applied as a step function, being non-zero only when the offered percentage is strictly less than the fair share determined by token contributions. The model has two non-negative learnable parameters: alpha (sensitivity to offer) and beta_step (fixed unfairness penalty).\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta_step']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = alpha * split_perc_self - beta_step * max(0, -sign(split_perc_self - (token_self / (token_self + token_opp)) * 100))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer. This value is transformed via a logistic function (with temperature 1) into the probability of acceptance.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Parameter representing the participant's base sensitivity to the percentage of the combined earning offered to themselves. Higher alpha means higher utility for a given offered percentage.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_step\": {\n      \"description\": \"Parameter representing a fixed utility penalty applied when the percentage offered to the participant is strictly less than their proportionally fair share based on token contributions.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the combined earning proposed to the participant in a given trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"The number of tokens found by the participant in the pre-task, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"The number of tokens found by the opponent in the pre-task, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=1, beta_step=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate the proportionally fair share\n        total_tokens = token_self + token_opp\n        if total_tokens == 0:\n            fair_share = 50  # Default to 50 if no tokens were earned.\n        else:\n            fair_share = (token_self / total_tokens) * 100\n\n        # Calculate the utility\n        utility = alpha * split_perc_self - beta_step * max(0, -math.copysign(1, split_perc_self - fair_share))\n\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '''\n[\n  {\n    \"ID\": 1,\n    \"group\": \"treatment\",\n    \"trial_number\": 1,\n    \"trial_type\": 1,\n    \"trial_role\": 2,\n    \"token_opp\": 1,\n    \"token_self\": 1,\n    \"combined_earning\": 20,\n    \"split_opp\": 18.0,\n    \"split_self\": 2.0,\n    \"splitperc_opp\": 90,\n    \"splitperc_self\": 10,\n    \"accept\": 0.0,\n    \"accepted_amount\": 0.0,\n    \"accepted_perc\": 0.0,\n    \"proposed_perc\": 90.0,\n    \"proposed_amount\": 18.0\n  },\n  {\n    \"ID\": 2,\n    \"group\": \"treatment\",\n    \"trial_number\": 2,\n    \"trial_type\": 1,\n    \"trial_role\": 2,\n    \"token_opp\": 1,\n    \"token_self\": 1,\n    \"combined_earning\": 20,\n    \"split_opp\": 10.0,\n    \"split_self\": 10.0,\n    \"splitperc_opp\": 50,\n    \"splitperc_self\": 50,\n    \"accept\": 1.0,\n    \"accepted_amount\": 10.0,\n    \"accepted_perc\": 50.0,\n    \"proposed_perc\": 50.0,\n    \"proposed_amount\": 10.0\n  }\n]\n'''\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1746096709.084218
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Parameter representing the participant's base sensitivity to the percentage of the combined earning offered to themselves. Higher alpha means higher utility for a given offered percentage.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_step": {
      "description": "Parameter representing a fixed utility penalty applied when the percentage offered to the participant is strictly less than their proportionally fair share based on token contributions.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = alpha * split_perc_self - beta_step * max(0, -sign(split_perc_self - (token_self / (token_self + token_opp)) * 100))",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer. This value is transformed via a logistic function (with temperature 1) into the probability of acceptance.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Parameter representing the participant's base sensitivity to the percentage of the combined earning offered to themselves. Higher alpha means higher utility for a given offered percentage.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_step": {
      "description": "Parameter representing a fixed utility penalty applied when the percentage offered to the participant is strictly less than their proportionally fair share based on token contributions.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_perc_self": {
      "description": "The percentage of the combined earning proposed to the participant in a given trial.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "The number of tokens found by the participant in the pre-task, representing their contribution.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "The number of tokens found by the opponent in the pre-task, representing the opponent's contribution.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A utility model for responder decisions incorporating sensitivity to the offered percentage and a fixed penalty for offers below the proportional fair share. Utility is calculated as a linear function of the offered percentage scaled by 'alpha', minus a penalty 'beta_step' that is applied as a step function, being non-zero only when the offered percentage is strictly less than the fair share determined by token contributions. The model has two non-negative learnable parameters: alpha (sensitivity to offer) and beta_step (fixed unfairness penalty).",
  "target_variable": "accept",
  "full_reasoning": "Okay, Expert Computational Modeler reporting for duty! Let's design this model for Run 12, focusing intently on parameter recovery by using a step penalty for unfair offers. This structure aims to create a clearer, more separable influence for the fairness parameter.\n\nHere is the computational model specification:\n\n<MODEL>\nU = alpha * split_perc_self - beta_step * max(0, -sign(split_perc_self - (token_self / (token_self + token_opp)) * 100))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer. This value is transformed via a logistic function (with temperature 1) into the probability of acceptance.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Parameter representing the participant's base sensitivity to the percentage of the combined earning offered to themselves. Higher alpha means higher utility for a given offered percentage.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_step\": {\n      \"description\": \"Parameter representing a fixed utility penalty applied when the percentage offered to the participant is strictly less than their proportionally fair share based on token contributions.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the combined earning proposed to the participant in a given trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"The number of tokens found by the participant in the pre-task, representing their contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"The number of tokens found by the opponent in the pre-task, representing the opponent's contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model for responder decisions incorporating sensitivity to the offered percentage and a fixed penalty for offers below the proportional fair share. Utility is calculated as a linear function of the offered percentage scaled by 'alpha', minus a penalty 'beta_step' that is applied as a step function, being non-zero only when the offered percentage is strictly less than the fair share determined by token contributions. The model has two non-negative learnable parameters: alpha (sensitivity to offer) and beta_step (fixed unfairness penalty).\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = alpha * split_perc_self - beta_step * max(0, -sign(split_perc_self - (token_self / (token_self + token_opp)) * 100))\nSummary: A utility model for responder decisions incorporating sensitivity to the offered percentage and a fixed penalty for offers below the proportional fair share. Utility is calculated as a linear function of the offered percentage scaled by 'alpha', minus a penalty 'beta_step' that is applied as a step function, being non-zero only when the offered percentage is strictly less than the fair share determined by token contributions. The model has two non-negative learnable parameters: alpha (sensitivity to offer) and beta_step (fixed unfairness penalty).\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=1, beta_step=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate the proportionally fair share\n        total_tokens = token_self + token_opp\n        if total_tokens == 0:\n            fair_share = 50  # Default to 50 if no tokens were earned.\n        else:\n            fair_share = (token_self / total_tokens) * 100\n\n        # Calculate the utility\n        utility = alpha * split_perc_self - beta_step * max(0, -math.copysign(1, split_perc_self - fair_share))\n\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7646520146520146,
  "group_accuracies": {
    "Control": 0.8003875968992248,
    "Cocaine": 0.7326388888888888
  },
  "group_parameter_averages": {
    "Control": {
      "alpha": 3.4380225043125554,
      "beta_step": 27.83305346680967
    },
    "Cocaine": {
      "alpha": 2.1506687517645515,
      "beta_step": 37.77212484558866
    }
  },
  "fitting_results": [
    {
      "alpha": 7.905164476619391,
      "beta_step": 93.69383233807595,
      "success": true,
      "log_likelihood": -690.7755292101157,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.13774960332420386,
      "beta_step": 4.219716484111702,
      "success": true,
      "log_likelihood": -17.72393710753067,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.1261464266751822,
      "beta_step": 3.718561287959502,
      "success": true,
      "log_likelihood": -18.39218603659278,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.17841223848355525,
      "beta_step": 5.998143694695329,
      "success": true,
      "log_likelihood": -15.122748993618425,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.08946065193270519,
      "beta_step": 3.1076643152999845,
      "success": true,
      "log_likelihood": -19.42614619662463,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.25841389490587663,
      "beta_step": 6.596738124408324,
      "success": true,
      "log_likelihood": -12.783387898367257,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta_step": 51.47139999783672,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.21438592547257032,
      "beta_step": 5.212443354147719,
      "success": true,
      "log_likelihood": -13.947649467993092,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 7.9980699386814225,
      "beta_step": 16.92991958376434,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.12591644276541672,
      "beta_step": 4.549705566637948,
      "success": true,
      "log_likelihood": -16.667426683261866,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.19878525673876782,
      "beta_step": 6.425845173974301,
      "success": true,
      "log_likelihood": -14.736674752783179,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.004898983914796382,
      "beta_step": 74.8177204074971,
      "success": true,
      "log_likelihood": -48.799848111992695,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.17841310093494916,
      "beta_step": 5.998172747583251,
      "success": true,
      "log_likelihood": -15.122748994091399,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 7.3161370257455705,
      "beta_step": 1.5766996215705653,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta_step": 47.69324851485356,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 9.768177620026094,
      "beta_step": 42.156546772148275,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 7.619965526728311,
      "beta_step": 46.56464958264881,
      "success": true,
      "log_likelihood": 3.5995959544598094e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 2.1229843742001338,
      "beta_step": 41.76647275286341,
      "success": true,
      "log_likelihood": -3.8191586495371594,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2127848607761248,
      "beta_step": 2.8875866842705484,
      "success": true,
      "log_likelihood": -7.834224792218893,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 8.95239805043478,
      "beta_step": 20.887798324607033,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.12998096326829292,
      "beta_step": 3.6669841707284143,
      "success": true,
      "log_likelihood": -18.243475289386346,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 3.2735112768118317,
      "beta_step": 59.98712889745478,
      "success": true,
      "log_likelihood": -44.63231218244934,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.35700721236263305,
      "beta_step": 12.317664160338348,
      "success": true,
      "log_likelihood": -9.4333541573376,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 3.810783449327191,
      "beta_step": 53.03550908746143,
      "success": true,
      "log_likelihood": -319.2670815953889,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.08336726791843733,
      "beta_step": 2.633124133496615,
      "success": true,
      "log_likelihood": -20.409364063632385,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.15103265208350364,
      "beta_step": 4.091222767775679,
      "success": true,
      "log_likelihood": -17.2100093249139,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.5745198094416245,
      "beta_step": 16.289518399876805,
      "success": true,
      "log_likelihood": -6.7874233437592455,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.1672263554628459,
      "beta_step": 6.7633285041630815,
      "success": true,
      "log_likelihood": -11.844395020718366,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta_step": 74.32285512135158,
      "success": true,
      "log_likelihood": -92.03522266802814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 9.735863539979343,
      "beta_step": 75.6134150955847,
      "success": true,
      "log_likelihood": -181.15516973933939,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta_step": 52.85828126534596,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.015551475154963615,
      "beta_step": 3.8811777706883452,
      "success": true,
      "log_likelihood": -6.979704326035152,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.10959668705915276,
      "beta_step": 3.710162463763022,
      "success": true,
      "log_likelihood": -18.435692040154734,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.21599127252655193,
      "beta_step": 7.402781029886775,
      "success": true,
      "log_likelihood": -13.367438946382645,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta_step": 12.253778043448893,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.38240910436326364,
      "beta_step": 9.848804014646158,
      "success": true,
      "log_likelihood": -9.663640763238435,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.2940560122968596,
      "beta_step": 6.990246982618929,
      "success": true,
      "log_likelihood": -11.210678422280948,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.11135938430709907,
      "beta_step": 3.4472803641309375,
      "success": true,
      "log_likelihood": -18.963069549446942,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.10664995000085511,
      "beta_step": 2.387951002943872,
      "success": true,
      "log_likelihood": -18.487127127730943,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 8.369842530190125,
      "beta_step": 83.00528317216765,
      "success": true,
      "log_likelihood": -47.96124436107384,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 5.896532276646803,
      "beta_step": 89.07755250554389,
      "success": true,
      "log_likelihood": -253.27259142928318,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.6414220678786463,
      "beta_step": 66.86623347767667,
      "success": true,
      "log_likelihood": -92.10340371550859,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta_step": 60.09815131276894,
      "success": true,
      "log_likelihood": -23.02585092644049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 1.9765959742301225,
      "beta_step": 58.063784355658036,
      "success": true,
      "log_likelihood": -32.29324595375868,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.23418286385079295,
      "beta_step": 6.181657755432833,
      "success": true,
      "log_likelihood": -13.777270959513963,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.12661080474196082,
      "beta_step": 2.5621608569877927,
      "success": true,
      "log_likelihood": -16.458895640639394,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.3157644245448115,
      "beta_step": 9.219303017014939,
      "success": true,
      "log_likelihood": -11.45284275866212,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.11201545014672079,
      "beta_step": 4.117884889092136,
      "success": true,
      "log_likelihood": -17.261295106228953,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.7205069381822918,
      "beta_step": 90.0678957264167,
      "success": true,
      "log_likelihood": -253.28436022684573,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.016244308997611992,
      "beta_step": 0.05358284893631197,
      "success": true,
      "log_likelihood": -24.327568888002702,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.11521089369146499,
      "beta_step": 2.447036981032878,
      "success": true,
      "log_likelihood": -17.578645147840707,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.004898965381444359,
      "beta_step": 86.50703070386726,
      "success": true,
      "log_likelihood": -71.82569904203375,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.11714342748373276,
      "beta_step": 3.303244351565367,
      "success": true,
      "log_likelihood": -18.860516794209833,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 1.6507576437523883,
      "beta_step": 47.01307661156818,
      "success": true,
      "log_likelihood": -120.03157133003724,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 1.1955389618648042,
      "beta_step": 88.1944007490924,
      "success": true,
      "log_likelihood": -230.25850929658216,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.13769123958304227,
      "beta_step": 5.311532350514852,
      "success": true,
      "log_likelihood": -14.729313472513617,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.2017764738280578,
      "beta_step": 7.945435325396116,
      "success": true,
      "log_likelihood": -10.926312003248329,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.0850948636289499,
      "beta_step": 1.6232026923350444,
      "success": true,
      "log_likelihood": -18.947024809853797,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.004899314703566088,
      "beta_step": 96.57446570454059,
      "success": true,
      "log_likelihood": -48.799848112099355,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 3.2729698217765013,
      "beta_step": 66.15250349773368,
      "success": true,
      "log_likelihood": -49.870757279440056,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.11542259938449467,
      "beta_step": 2.9422685967306013,
      "success": true,
      "log_likelihood": -18.710520157095086,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.1542426676141392,
      "beta_step": 4.704417143181749,
      "success": true,
      "log_likelihood": -16.995034750951497,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.015552010110175155,
      "beta_step": 3.8812191518384043,
      "success": true,
      "log_likelihood": -6.979704325476415,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 5.346500921084954,
      "beta_step": 54.15817173943735,
      "success": true,
      "log_likelihood": -416.37485924179134,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 4.304472700672346,
      "beta_step": 54.007075693434096,
      "success": true,
      "log_likelihood": -575.6456192142521,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.3312852499075381,
      "beta_step": 9.38308490273814,
      "success": true,
      "log_likelihood": -11.051268035903757,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 3.8389416845511017,
      "beta_step": 76.08568747920145,
      "success": true,
      "log_likelihood": -49.8707860288415,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 8.494471072271617,
      "beta_step": 85.63766019748168,
      "success": true,
      "log_likelihood": -70.98709530413534,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 9.183526984965532,
      "beta_step": 62.69161506530286,
      "success": true,
      "log_likelihood": -368.4070140966508,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.08320523772212184,
      "beta_step": 0.0,
      "success": true,
      "log_likelihood": -10.537471305340597,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.42291534944069203,
      "beta_step": 43.44194043952229,
      "success": true,
      "log_likelihood": -8.793186569571501e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.004898966517890767,
      "beta_step": 77.70597589995961,
      "success": true,
      "log_likelihood": -71.82569904203375,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.17690264898935235,
      "beta_step": 5.185125158767648,
      "success": true,
      "log_likelihood": -16.14944336617599,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 9.049949491057825,
      "beta_step": 91.19264480581964,
      "success": true,
      "log_likelihood": -140.0646480812297,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 4.639681442398256,
      "beta_step": 47.08752574760129,
      "success": true,
      "log_likelihood": -370.32315935996684,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 5.3765376442771995,
      "beta_step": 83.47683589306666,
      "success": true,
      "log_likelihood": -182.98364403336686,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 7.0007564799232185,
      "beta_step": 29.008488515467224,
      "success": true,
      "log_likelihood": -46.051701856480875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 5.380073356330384,
      "beta_step": 61.662612767558954,
      "success": true,
      "log_likelihood": -713.8025340534508,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.1388888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 3.0514787834529455,
      "beta_step": 85.34684973831372,
      "success": true,
      "log_likelihood": -191.2402668575292,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.0048989522628261895,
      "beta_step": 71.66067621858903,
      "success": true,
      "log_likelihood": -25.773997181953703,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.07793184072555982,
      "beta_step": 2.3346667959883893,
      "success": true,
      "log_likelihood": -20.87619678535576,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta_step": 35.089604854781385,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 8.629035513900236,
      "beta_step": 98.85586848888612,
      "success": true,
      "log_likelihood": -667.7496874385548,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.5082526393695468,
      "beta_step": 15.252809956203947,
      "success": true,
      "log_likelihood": -7.671941163235636,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.04154546109927703,
      "beta_step": 0.9083370818039564,
      "success": true,
      "log_likelihood": -22.940911052653355,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.04397040378033151,
      "beta_step": 4.7481181701087465,
      "success": true,
      "log_likelihood": -5.855576973463823,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.10388058020801816,
      "beta_step": 2.152150490838481,
      "success": true,
      "log_likelihood": -18.125701898657272,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta_step": 77.12979901465481,
      "success": true,
      "log_likelihood": -140.92769429848252,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 5.9576496836497315,
      "beta_step": 34.26316102177972,
      "success": true,
      "log_likelihood": -45.95500989196691,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.5207968537465827,
      "beta_step": 16.060649766147378,
      "success": true,
      "log_likelihood": -7.453636020773296,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.08542049489630693,
      "beta_step": 1.6687533758651094,
      "success": true,
      "log_likelihood": -19.06804003621412,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.6197808805319907,
        "p": 6.184328938830341e-12
      },
      "beta_step": {
        "r": 0.5126076628491772,
        "p": 4.9731870800015554e-08
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 170.45934573191892,
  "bic_Control": 106.22005721899862,
  "bic_Cocaine": 228.00704169141002,
  "bic_results": {
    "average_bic": 170.45934573191892,
    "individual_bics": [
      1388.7180962971436,
      42.61491209197356,
      43.951409950097776,
      37.41253586414907,
      46.019330270161475,
      32.733813673646736,
      7.167037869712219,
      35.0623368128984,
      7.167037869712219,
      40.50189124343595,
      36.64038738247858,
      104.76673410089761,
      37.412535865095016,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      7.167037869713028,
      14.805355175986538,
      22.835487461350006,
      7.167037869712219,
      43.65398845568491,
      96.4316622418109,
      26.03374619158742,
      645.70120106769,
      47.98576600417699,
      41.58705652674002,
      20.741884564430713,
      30.85582791834895,
      191.2374832129685,
      369.477377355591,
      7.167037869712219,
      21.126446528982523,
      44.038421957221686,
      33.90191576967751,
      7.167037869712219,
      26.494319403389092,
      29.588394721474117,
      45.0931769758061,
      44.141292132374105,
      103.0895265990599,
      513.7122207354786,
      191.3738453079294,
      53.2187397297932,
      71.75352978442957,
      34.721579795940144,
      40.084829158191006,
      30.072723394236462,
      41.689628089370125,
      513.7357583306037,
      55.82217565291762,
      42.32432817259363,
      150.8184359609797,
      44.88807146533188,
      247.2301805369867,
      467.68405647007654,
      36.62566482193945,
      29.01966188340888,
      45.06108749661981,
      104.76673410111093,
      106.90855243579233,
      44.58807819110239,
      41.15710737881521,
      21.12644652786505,
      839.9167563604949,
      1158.4582763054163,
      29.26957394871973,
      106.90860993459522,
      149.1412284851829,
      743.9810660702138,
      28.241980487593416,
      7.167038052775951,
      150.8184359609797,
      39.4659246092642,
      287.29633403937163,
      747.8133565968459,
      373.13432594364593,
      99.27044158987397,
      1434.7721059838138,
      389.64757159197063,
      58.715032240819625,
      48.91943144762374,
      145.32214344995484,
      1342.6664127540218,
      22.510920203383492,
      53.04885998221893,
      18.878191823839867,
      43.41844167422676,
      289.02242647387726,
      99.07705766084604,
      22.074309918458813,
      45.30311794934046
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        1388.7180962971436,
        42.61491209197356,
        43.951409950097776,
        37.41253586414907,
        46.019330270161475,
        32.733813673646736,
        7.167037869712219,
        35.0623368128984,
        7.167037869712219,
        40.50189124343595,
        36.64038738247858,
        104.76673410089761,
        37.412535865095016,
        7.167037869712219,
        7.167037869712219,
        7.167037869712219,
        7.167037869713028,
        14.805355175986538,
        22.835487461350006,
        7.167037869712219,
        43.65398845568491,
        96.4316622418109,
        26.03374619158742,
        645.70120106769,
        47.98576600417699,
        41.58705652674002,
        20.741884564430713,
        30.85582791834895,
        191.2374832129685,
        369.477377355591,
        7.167037869712219,
        21.126446528982523,
        44.038421957221686,
        33.90191576967751,
        7.167037869712219,
        26.494319403389092,
        29.588394721474117,
        45.0931769758061,
        44.141292132374105,
        103.0895265990599,
        513.7122207354786,
        191.3738453079294,
        53.2187397297932
      ],
      "Cocaine": [
        71.75352978442957,
        34.721579795940144,
        40.084829158191006,
        30.072723394236462,
        41.689628089370125,
        513.7357583306037,
        55.82217565291762,
        42.32432817259363,
        150.8184359609797,
        44.88807146533188,
        247.2301805369867,
        467.68405647007654,
        36.62566482193945,
        29.01966188340888,
        45.06108749661981,
        104.76673410111093,
        106.90855243579233,
        44.58807819110239,
        41.15710737881521,
        21.12644652786505,
        839.9167563604949,
        1158.4582763054163,
        29.26957394871973,
        106.90860993459522,
        149.1412284851829,
        743.9810660702138,
        28.241980487593416,
        7.167038052775951,
        150.8184359609797,
        39.4659246092642,
        287.29633403937163,
        747.8133565968459,
        373.13432594364593,
        99.27044158987397,
        1434.7721059838138,
        389.64757159197063,
        58.715032240819625,
        48.91943144762374,
        145.32214344995484,
        1342.6664127540218,
        22.510920203383492,
        53.04885998221893,
        18.878191823839867,
        43.41844167422676,
        289.02242647387726,
        99.07705766084604,
        22.074309918458813,
        45.30311794934046
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.620\n- beta_step: r = 0.513",
  "previous_models": [
    "Specification: U = alpha * split_perc_self - beta_step * max(0, -sign(split_perc_self - (token_self / (token_self + token_opp)) * 100))\nSummary: A utility model for responder decisions incorporating sensitivity to the offered percentage and a fixed penalty for offers below the proportional fair share. Utility is calculated as a linear function of the offered percentage scaled by 'alpha', minus a penalty 'beta_step' that is applied as a step function, being non-zero only when the offered percentage is strictly less than the fair share determined by token contributions. The model has two non-negative learnable parameters: alpha (sensitivity to offer) and beta_step (fixed unfairness penalty).\nTarget Variable: accept\nPrediction Type: utility\nBIC: 170.45934573191892\nOverall Accuracy: 0.7647\nGroup Accuracies:\n- Control: 0.8004\n- Cocaine: 0.7326\n\nParameter Recovery:\n- alpha: r = 0.620\n- beta_step: r = 0.513"
  ]
}