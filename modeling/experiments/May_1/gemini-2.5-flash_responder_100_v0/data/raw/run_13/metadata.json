{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Based on the history of model performance, particularly the challenge of achieving parameter recovery >= 0.7 for *all* learnable parameters, it is evident that the way fairness influences utility needs careful structural consideration. Models using continuous penalties or bonuses based on the magnitude of deviation from fair share, as well as a recent attempt using a fixed penalty step, have struggled to make their parameters sufficiently identifiable despite sometimes achieving good overall fit (BIC) and accuracy.\n\nThe primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. A model is unusable otherwise. We must continue to prioritize model structures that allow parameters to influence the utility function in maximally separable and identifiable ways given the dataset characteristics.\n\nFor this run (Run 13), let's explore a model structure where fairness acts as a threshold that changes the *rate* at which utility accumulates with the offered percentage, rather than adding a fixed penalty or a penalty proportional to the deviation magnitude. This means the *slope* of the utility function with respect to `split_perc_self` will differ depending on whether the offer is below or above the calculated proportional fair share (`fair_perc_self`).\n\nConsider a model where the utility of accepting an offer has:\n1.  A base sensitivity (slope) to the offered percentage (`split_perc_self`), scaled by a parameter `alpha`. This slope applies when the offer is at or above the proportional fair share (`fair_perc_self`).\n2.  A *reduced* sensitivity (slope) when the offer falls strictly below the proportional fair share. The reduction in slope is scaled by a parameter `beta_step`.\n\nThis structure posits that participants value offers less *per percentage point* when the offer is considered unfair based on token contributions. This model has two learnable parameters: `alpha` representing the primary slope (sensitivity to fair/generous offers) and `beta_step` representing the magnitude of the slope reduction for unfair offers. Both parameters should be constrained to be non-negative.\n\n**Proposed Model Structure Idea:**\n\nThe utility `U` is calculated such that the relationship with `split_perc_self` is:\n-   Linear with slope `alpha` when `split_perc_self >= fair_perc_self`.\n-   Linear with slope `alpha - beta_step` when `split_perc_self < fair_perc_self`.\n\nThis creates a piecewise linear function of `split_perc_self` with a pivot point at `fair_perc_self`.\n\n**Guidance for the Next Model (Run 13):**\n\nDesign a computational model implementing the \"piecewise slope\" concept described above. This model structure simplifies the influence of fairness by making it change the responsiveness to the offer based on the `fair_perc_self` threshold, aiming to improve the separability and identifiability of the parameters compared to previous continuous or fixed-step penalty approaches.\n\n*   **Prioritize Parameter Recovery:** Design the model structure to ensure `alpha` and `beta_step` have maximally distinguishable effects on the utility function given the data.\n*   **Parameter Constraints:** Define clear, generous, finite, non-negative bounds for both `alpha` and `beta_step`. Suggest `alpha` bounds [0, 10] and `beta_step` bounds [0, 10].\n*   **Model Specification:** Provide the mathematical formula between <MODEL> tags using standard mathematical notation. Ensure the formula reflects the change in slope below `fair_perc_self`. You can implement the piecewise slope logic using an indicator function `I` that is 1 if `split_perc_self < fair_perc_self` and 0 otherwise. A mathematical way to write this indicator is `max(0, -sign(split_perc_self - fair_perc_self))`. The structure should be `U = (alpha - beta_step * I) * split_perc_self`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags, including the specified bounds and learnable status for `alpha` and `beta_step`. Remember that `fair_perc_self` is a calculated variable derived from `token_self` and `token_opp`.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags.\n\nThink creatively about how to implement the \"slope changes below fair\" logic concisely within the single expression required for the <MODEL> tag using available mathematical functions (`max`, `sign`, etc.) to represent the conditional nature of the slope. The core logic is: Utility = (Effective Sensitivity) * Offer, where Effective Sensitivity depends on whether Offer < FairShare.\n\nFocus intently on this distinct structural approach \u2013 separating base slope from a fairness-dependent slope reduction \u2013 as a strategy to finally achieve the necessary parameter identifiability.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember `fair_perc_self` can be calculated as `(token_self / (token_self + token_opp)) * 100`. Use variables relevant for responder trials (`trial_role == 1`).\n\nFor run 13 of 100, please think through this step by step, focusing intently on designing a model structure that maximizes parameter identifiability given the data and the history of failed recovery attempts, specifically implementing the described piecewise slope model. Then provide your model specification, variable descriptions, target variable, and summary.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Based on the history of model performance, particularly the challenge of achieving parameter recovery >= 0.7 for *all* learnable parameters, it is evident that the way fairness influences utility needs careful structural consideration. Models using continuous penalties or bonuses based on the magnitude of deviation from fair share, as well as a recent attempt using a fixed penalty step, have struggled to make their parameters sufficiently identifiable despite sometimes achieving good overall fit (BIC) and accuracy.\n\nThe primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. A model is unusable otherwise. We must continue to prioritize model structures that allow parameters to influence the utility function in maximally separable and identifiable ways given the dataset characteristics.\n\nFor this run (Run 13), let's explore a model structure where fairness acts as a threshold that changes the *rate* at which utility accumulates with the offered percentage, rather than adding a fixed penalty or a penalty proportional to the deviation magnitude. This means the *slope* of the utility function with respect to `split_perc_self` will differ depending on whether the offer is below or above the calculated proportional fair share (`fair_perc_self`).\n\nConsider a model where the utility of accepting an offer has:\n1.  A base sensitivity (slope) to the offered percentage (`split_perc_self`), scaled by a parameter `alpha`. This slope applies when the offer is at or above the proportional fair share (`fair_perc_self`).\n2.  A *reduced* sensitivity (slope) when the offer falls strictly below the proportional fair share. The reduction in slope is scaled by a parameter `beta_step`.\n\nThis structure posits that participants value offers less *per percentage point* when the offer is considered unfair based on token contributions. This model has two learnable parameters: `alpha` representing the primary slope (sensitivity to fair/generous offers) and `beta_step` representing the magnitude of the slope reduction for unfair offers. Both parameters should be constrained to be non-negative.\n\n**Proposed Model Structure Idea:**\n\nThe utility `U` is calculated such that the relationship with `split_perc_self` is:\n-   Linear with slope `alpha` when `split_perc_self >= fair_perc_self`.\n-   Linear with slope `alpha - beta_step` when `split_perc_self < fair_perc_self`.\n\nThis creates a piecewise linear function of `split_perc_self` with a pivot point at `fair_perc_self`.\n\n**Guidance for the Next Model (Run 13):**\n\nDesign a computational model implementing the \"piecewise slope\" concept described above. This model structure simplifies the influence of fairness by making it change the responsiveness to the offer based on the `fair_perc_self` threshold, aiming to improve the separability and identifiability of the parameters compared to previous continuous or fixed-step penalty approaches.\n\n*   **Prioritize Parameter Recovery:** Design the model structure to ensure `alpha` and `beta_step` have maximally distinguishable effects on the utility function given the data.\n*   **Parameter Constraints:** Define clear, generous, finite, non-negative bounds for both `alpha` and `beta_step`. Suggest `alpha` bounds [0, 10] and `beta_step` bounds [0, 10].\n*   **Model Specification:** Provide the mathematical formula between <MODEL> tags using standard mathematical notation. Ensure the formula reflects the change in slope below `fair_perc_self`. You can implement the piecewise slope logic using an indicator function `I` that is 1 if `split_perc_self < fair_perc_self` and 0 otherwise. A mathematical way to write this indicator is `max(0, -sign(split_perc_self - fair_perc_self))`. The structure should be `U = (alpha - beta_step * I) * split_perc_self`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags, including the specified bounds and learnable status for `alpha` and `beta_step`. Remember that `fair_perc_self` is a calculated variable derived from `token_self` and `token_opp`.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags.\n\nThink creatively about how to implement the \"slope changes below fair\" logic concisely within the single expression required for the <MODEL> tag using available mathematical functions (`max`, `sign`, etc.) to represent the conditional nature of the slope. The core logic is: Utility = (Effective Sensitivity) * Offer, where Effective Sensitivity depends on whether Offer < FairShare.\n\nFocus intently on this distinct structural approach \u2013 separating base slope from a fairness-dependent slope reduction \u2013 as a strategy to finally achieve the necessary parameter identifiability.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember `fair_perc_self` can be calculated as `(token_self / (token_self + token_opp)) * 100`. Use variables relevant for responder trials (`trial_role == 1`).\n\nFor run 13 of 100, please think through this step by step, focusing intently on designing a model structure that maximizes parameter identifiability given the data and the history of failed recovery attempts, specifically implementing the described piecewise slope model. Then provide your model specification, variable descriptions, target variable, and summary.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "```json\n<MODEL>\nU = (alpha - beta_step * max(0, -sign(split_perc_self - fair_perc_self))) * split_perc_self\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed split percentage for the participant.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Base sensitivity to the proposed split percentage. Represents the slope of utility with respect to split_perc_self when the offer is fair or generous.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_step\": {\n      \"description\": \"Reduction in sensitivity to the proposed split percentage when the offer is strictly below the fair share. Represents the magnitude of the slope decrease for unfair offers.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the combined earning proposed to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The fair percentage of the combined earning for the participant based on token contributions (calculated as token_self / (token_self + token_opp) * 100).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA piecewise linear utility model for the responder's decision. The utility of accepting an offer is proportional to the percentage offered to the participant (split_perc_self). The proportionality constant (slope) is determined by two parameters: a base sensitivity (alpha) applied when the offer is at or above the participant's fair share percentage (fair_perc_self), and a reduced sensitivity (alpha - beta_step) applied when the offer is strictly below the fair share percentage. Fair share is calculated based on token contributions. The model has two learnable non-negative parameters, alpha and beta_step, which influence the sensitivity to fair/generous and unfair offers, respectively.\n</SUMMARY>\n```"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha', 'beta_step']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = (alpha - beta_step * max(0, -sign(split_perc_self - fair_perc_self))) * split_perc_self\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed split percentage for the participant.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Base sensitivity to the proposed split percentage. Represents the slope of utility with respect to split_perc_self when the offer is fair or generous.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_step\": {\n      \"description\": \"Reduction in sensitivity to the proposed split percentage when the offer is strictly below the fair share. Represents the magnitude of the slope decrease for unfair offers.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the combined earning proposed to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The fair percentage of the combined earning for the participant based on token contributions (calculated as token_self / (token_self + token_opp) * 100).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha=1, beta_step=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\")\n        token_self = trial.get(\"token_self\")\n        token_opp = trial.get(\"token_opp\")\n\n        if token_self + token_opp == 0:\n            fair_perc_self = 50  # Handle cases where both are zero to avoid division by zero\n        else:\n            fair_perc_self = (token_self / (token_self + token_opp)) * 100\n\n        diff = split_perc_self - fair_perc_self\n        sign_val = 0\n        if diff < 0:\n            sign_val = -1\n        \n        utility = (alpha - beta_step * max(0, -sign_val)) * split_perc_self\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 13, \"token_self\": 13, \"combined_earning\": 400, \"split_opp\": 200.0, \"split_self\": 200.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 200.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 200.0}, {\"ID\": 1, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 0, \"token_opp\": 13, \"token_self\": 13, \"combined_earning\": 400, \"split_opp\": 120.0, \"split_self\": 280.0, \"splitperc_opp\": 30, \"splitperc_self\": 70, \"accept\": 1.0, \"accepted_amount\": 280.0, \"accepted_perc\": 70.0, \"proposed_perc\": 70.0, \"proposed_amount\": 280.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1746096769.709579
    }
  ],
  "learnable_parameters": {
    "alpha": {
      "description": "Base sensitivity to the proposed split percentage. Represents the slope of utility with respect to split_perc_self when the offer is fair or generous.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_step": {
      "description": "Reduction in sensitivity to the proposed split percentage when the offer is strictly below the fair share. Represents the magnitude of the slope decrease for unfair offers.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = (alpha - beta_step * max(0, -sign(split_perc_self - fair_perc_self))) * split_perc_self",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the proposed split percentage for the participant.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha": {
      "description": "Base sensitivity to the proposed split percentage. Represents the slope of utility with respect to split_perc_self when the offer is fair or generous.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_step": {
      "description": "Reduction in sensitivity to the proposed split percentage when the offer is strictly below the fair share. Represents the magnitude of the slope decrease for unfair offers.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_perc_self": {
      "description": "The percentage of the combined earning proposed to the participant.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "fair_perc_self": {
      "description": "The fair percentage of the combined earning for the participant based on token contributions (calculated as token_self / (token_self + token_opp) * 100).",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A piecewise linear utility model for the responder's decision. The utility of accepting an offer is proportional to the percentage offered to the participant (split_perc_self). The proportionality constant (slope) is determined by two parameters: a base sensitivity (alpha) applied when the offer is at or above the participant's fair share percentage (fair_perc_self), and a reduced sensitivity (alpha - beta_step) applied when the offer is strictly below the fair share percentage. Fair share is calculated based on token contributions. The model has two learnable non-negative parameters, alpha and beta_step, which influence the sensitivity to fair/generous and unfair offers, respectively.",
  "target_variable": "accept",
  "full_reasoning": "```json\n<MODEL>\nU = (alpha - beta_step * max(0, -sign(split_perc_self - fair_perc_self))) * split_perc_self\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed split percentage for the participant.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha\": {\n      \"description\": \"Base sensitivity to the proposed split percentage. Represents the slope of utility with respect to split_perc_self when the offer is fair or generous.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_step\": {\n      \"description\": \"Reduction in sensitivity to the proposed split percentage when the offer is strictly below the fair share. Represents the magnitude of the slope decrease for unfair offers.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the combined earning proposed to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The fair percentage of the combined earning for the participant based on token contributions (calculated as token_self / (token_self + token_opp) * 100).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA piecewise linear utility model for the responder's decision. The utility of accepting an offer is proportional to the percentage offered to the participant (split_perc_self). The proportionality constant (slope) is determined by two parameters: a base sensitivity (alpha) applied when the offer is at or above the participant's fair share percentage (fair_perc_self), and a reduced sensitivity (alpha - beta_step) applied when the offer is strictly below the fair share percentage. Fair share is calculated based on token contributions. The model has two learnable non-negative parameters, alpha and beta_step, which influence the sensitivity to fair/generous and unfair offers, respectively.\n</SUMMARY>\n```",
  "prediction_type": "utility",
  "current_model": "Specification: U = (alpha - beta_step * max(0, -sign(split_perc_self - fair_perc_self))) * split_perc_self\nSummary: A piecewise linear utility model for the responder's decision. The utility of accepting an offer is proportional to the percentage offered to the participant (split_perc_self). The proportionality constant (slope) is determined by two parameters: a base sensitivity (alpha) applied when the offer is at or above the participant's fair share percentage (fair_perc_self), and a reduced sensitivity (alpha - beta_step) applied when the offer is strictly below the fair share percentage. Fair share is calculated based on token contributions. The model has two learnable non-negative parameters, alpha and beta_step, which influence the sensitivity to fair/generous and unfair offers, respectively.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha=1, beta_step=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\")\n        token_self = trial.get(\"token_self\")\n        token_opp = trial.get(\"token_opp\")\n\n        if token_self + token_opp == 0:\n            fair_perc_self = 50  # Handle cases where both are zero to avoid division by zero\n        else:\n            fair_perc_self = (token_self / (token_self + token_opp)) * 100\n\n        diff = split_perc_self - fair_perc_self\n        sign_val = 0\n        if diff < 0:\n            sign_val = -1\n        \n        utility = (alpha - beta_step * max(0, -sign_val)) * split_perc_self\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7286324786324786,
  "group_accuracies": {
    "Control": 0.7655038759689923,
    "Cocaine": 0.6956018518518519
  },
  "group_parameter_averages": {
    "Control": {
      "alpha": 5.372235264670154,
      "beta_step": 4.072839753998234
    },
    "Cocaine": {
      "alpha": 4.093435080792696,
      "beta_step": 6.199327934831021
    }
  },
  "fitting_results": [
    {
      "alpha": 5.065515485345836,
      "beta_step": 9.303541171486247,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 3.9445272005844902,
      "beta_step": 3.9423909946248257,
      "success": true,
      "log_likelihood": -22.16469188744383,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 1.586557265098365,
      "beta_step": 8.353168772375557,
      "success": true,
      "log_likelihood": -345.38776394700704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 6.521245283681478,
      "beta_step": 6.530577229439469,
      "success": true,
      "log_likelihood": -21.87870064753653,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 2.0302871938336557,
      "beta_step": 2.0396200969183553,
      "success": true,
      "log_likelihood": -21.878700644664736,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 4.907770059967082,
      "beta_step": 4.880274010034279,
      "success": true,
      "log_likelihood": -19.7934432240538,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 9.378223427422366,
      "beta_step": 4.167584833221594,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 4.7024472619555615,
      "beta_step": 2.472959078809318,
      "success": true,
      "log_likelihood": -272.9382563353722,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 9.931985081712728,
      "beta_step": 4.93069876473032,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 3.5994116688156703,
      "beta_step": 3.615468691574171,
      "success": true,
      "log_likelihood": -21.308678373956408,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 8.387140180616845,
      "beta_step": 8.391418445060733,
      "success": true,
      "log_likelihood": -22.116594368914953,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.0048989840625356905,
      "beta_step": 10.0,
      "success": true,
      "log_likelihood": -48.79984811199271,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 5.202506153346825,
      "beta_step": 7.18176353571419,
      "success": true,
      "log_likelihood": -253.28436023445062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 6.888900627313857,
      "beta_step": 0.9730012449768777,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 9.372031981056733,
      "beta_step": 4.365111117639751,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 6.478159628635226,
      "beta_step": 3.3600104044688517,
      "success": true,
      "log_likelihood": 3.5999143664232405e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 6.380407921158056,
      "beta_step": 0.9573951579215434,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 6.93708454037367,
      "beta_step": 6.850480033711702,
      "success": true,
      "log_likelihood": -9.59444988755209,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 4.90936960247722,
      "beta_step": 4.819528047667122,
      "success": true,
      "log_likelihood": -9.153441852303095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta_step": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 2.654032440543881,
      "beta_step": 4.3351110275679225,
      "success": true,
      "log_likelihood": -368.413564970827,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 7.361424224111783,
      "beta_step": 3.667990968489411,
      "success": true,
      "log_likelihood": -115.12925464660225,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 1.1153865019758213,
      "beta_step": 7.955871630484345,
      "success": true,
      "log_likelihood": -207.23265836676427,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 8.80663161767789,
      "beta_step": 8.79803373572178,
      "success": true,
      "log_likelihood": -21.923541440871368,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 2.190280306225948,
      "beta_step": 4.160622405770632,
      "success": true,
      "log_likelihood": -322.3619128715082,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 3.7528108939120157,
      "beta_step": 3.737518723145733,
      "success": true,
      "log_likelihood": -21.387049074981633,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 4.7692757324971975,
      "beta_step": 4.752447702988243,
      "success": true,
      "log_likelihood": -21.226469817696454,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 1.9079578689697727,
      "beta_step": 1.9449246212727485,
      "success": true,
      "log_likelihood": -18.18795091079445,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 9.980125484676725,
      "beta_step": 1.4370377265215006,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta_step": 0.0,
      "success": true,
      "log_likelihood": -184.20680743672378,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta_step": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.004898916996934824,
      "beta_step": 3.8978649300859947,
      "success": true,
      "log_likelihood": -25.773997181957665,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.5904636869159591,
      "beta_step": 0.5944456911627647,
      "success": true,
      "log_likelihood": -44.76239939858002,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 4.852826342586927,
      "beta_step": 4.865853468691462,
      "success": true,
      "log_likelihood": -21.59938947011007,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta_step": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 2.7042551529472125,
      "beta_step": 2.6749757246822896,
      "success": true,
      "log_likelihood": -19.50960543110177,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 4.320834936773282,
      "beta_step": 4.282831443478264,
      "success": true,
      "log_likelihood": -18.000534506920154,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 4.002254552531448,
      "beta_step": 9.838788041154977,
      "success": true,
      "log_likelihood": -322.3619130169665,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta_step": 0.0,
      "success": true,
      "log_likelihood": -276.3102111568857,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 1.6955043934197775,
      "beta_step": 1.598297656328175,
      "success": true,
      "log_likelihood": -8.219309471734237,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 3.4292966121955337,
      "beta_step": 3.410911158252325,
      "success": true,
      "log_likelihood": -21.050426100611006,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 0.8765062062448711,
      "beta_step": 2.1846686617439914,
      "success": true,
      "log_likelihood": -92.10340978500088,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 9.762880962155444,
      "beta_step": 3.8589224740065733,
      "success": true,
      "log_likelihood": -23.02585092644049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha": 3.2874986571274305,
      "beta_step": 4.743383519729879,
      "success": true,
      "log_likelihood": -368.41361473893613,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 7.80372571534366,
      "beta_step": 4.544652064666295,
      "success": true,
      "log_likelihood": -322.3616998617186,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 3.3862018496919486,
      "beta_step": 0.5881586823463669,
      "success": true,
      "log_likelihood": -230.23742713691777,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 1.1113898515736798,
      "beta_step": 8.600947934387897,
      "success": true,
      "log_likelihood": -345.38776394700693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 1.3343491510172467,
      "beta_step": 6.191657294335564,
      "success": true,
      "log_likelihood": -230.25850929680468,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 7.315257110740396,
      "beta_step": 7.330549243855461,
      "success": true,
      "log_likelihood": -21.387049074956693,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 4.218905442994375,
      "beta_step": 4.21175169419582,
      "success": true,
      "log_likelihood": -45.028172149206156,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 3.926663760267221,
      "beta_step": 7.57261435831137,
      "success": true,
      "log_likelihood": -483.5428680622505,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.004898271513388508,
      "beta_step": 8.634230132116963,
      "success": true,
      "log_likelihood": -71.82569904255566,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 3.3502335353079786,
      "beta_step": 3.334941389135269,
      "success": true,
      "log_likelihood": -44.412900005023815,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 6.587946188488142,
      "beta_step": 3.268207644885537,
      "success": true,
      "log_likelihood": -345.3876507063959,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 4.207101077472885,
      "beta_step": 4.235482903878098,
      "success": true,
      "log_likelihood": -19.65375337602881,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 2.5047122994829096,
      "beta_step": 8.066558038196023,
      "success": true,
      "log_likelihood": -184.2068074367237,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.4786389391121721,
      "beta_step": 10.0,
      "success": true,
      "log_likelihood": -138.15510558641125,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 1.535042981597774,
      "beta_step": 1.475078130776272,
      "success": true,
      "log_likelihood": -13.907551209881694,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.004899632165665005,
      "beta_step": 10.0,
      "success": true,
      "log_likelihood": -48.799848112409876,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 4.535214377714423,
      "beta_step": 4.476870735546981,
      "success": true,
      "log_likelihood": -14.20330060406986,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 2.83885637876339,
      "beta_step": 2.8212530069632606,
      "success": true,
      "log_likelihood": -21.140395547237883,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 2.7848408904021973,
      "beta_step": 6.404471921071689,
      "success": true,
      "log_likelihood": -322.36191301696664,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.004898983822770163,
      "beta_step": 6.887226630695816,
      "success": true,
      "log_likelihood": -25.77399718195229,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 5.346801219402512,
      "beta_step": 5.346801230459995,
      "success": true,
      "log_likelihood": -45.206560701159134,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 6.571986873716507,
      "beta_step": 6.621668594155373,
      "success": true,
      "log_likelihood": -15.819610170000216,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 5.8510289707863405,
      "beta_step": 5.835736833680207,
      "success": true,
      "log_likelihood": -21.387049074983306,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 6.256170955545455,
      "beta_step": 6.15471541199217,
      "success": true,
      "log_likelihood": -7.72283359228917,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 8.02580622499228,
      "beta_step": 7.954598750671701,
      "success": true,
      "log_likelihood": -11.947319250555815,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 3.450981877661457,
      "beta_step": 3.436449543718332,
      "success": true,
      "log_likelihood": -21.461608213273095,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 8.094597793226542,
      "beta_step": 8.013787656588585,
      "success": true,
      "log_likelihood": -10.430840390713756,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.45676547046824445,
      "beta_step": 9.626333992861607,
      "success": true,
      "log_likelihood": -1.987938826848437e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.004898982117629318,
      "beta_step": 10.0,
      "success": true,
      "log_likelihood": -71.82569904203326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 8.879179821577734,
      "beta_step": 8.871302244436956,
      "success": true,
      "log_likelihood": -21.964743886650563,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 10.0,
      "beta_step": 0.0,
      "success": true,
      "log_likelihood": -184.20680743672386,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 7.245633950566177,
      "beta_step": 7.2420707291018545,
      "success": true,
      "log_likelihood": -45.16204853768835,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 8.617769167893648,
      "beta_step": 4.517774471024741,
      "success": true,
      "log_likelihood": -253.28436022684528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 7.7191634219897045,
      "beta_step": 6.365670501669594,
      "success": true,
      "log_likelihood": -46.03430949033812,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta_step": 10.0,
      "success": true,
      "log_likelihood": -25.798439648280272,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 3.6293416862112817,
      "beta_step": 3.6185417313884347,
      "success": true,
      "log_likelihood": -21.778047458415504,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.004898364288537576,
      "beta_step": 10.0,
      "success": true,
      "log_likelihood": -25.77399718234856,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 1.7670913459342694,
      "beta_step": 6.2160560206822195,
      "success": true,
      "log_likelihood": -345.38776394700704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 3.3519706176944175,
      "beta_step": 7.885925330763372,
      "success": true,
      "log_likelihood": -667.7496769669619,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.0,
      "beta_step": 10.0,
      "success": true,
      "log_likelihood": -71.85014150836119,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 2.571335508571329,
      "beta_step": 2.563457930232932,
      "success": true,
      "log_likelihood": -21.964743886650826,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 5.690704980280744,
      "beta_step": 5.682101067411257,
      "success": true,
      "log_likelihood": -21.923541317450987,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 0.027614427930569823,
      "beta_step": 10.0,
      "success": true,
      "log_likelihood": -25.151337701639708,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 6.273271626548684,
      "beta_step": 1.3645774028276325,
      "success": true,
      "log_likelihood": -253.28436022684514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 4.4511540695027305,
      "beta_step": 7.549481625910933,
      "success": true,
      "log_likelihood": -184.20680743672378,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 7.944442716891849,
      "beta_step": 7.832867700869326,
      "success": true,
      "log_likelihood": -6.659762115773993,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 6.357441422731193,
      "beta_step": 6.353878192153317,
      "success": true,
      "log_likelihood": -22.13619760764777,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha": 6.673557286919913,
      "beta_step": 5.125908584193911,
      "success": true,
      "log_likelihood": -253.28291332780873,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha": {
        "r": 0.366222677723078,
        "p": 0.0001787904076087348
      },
      "beta_step": {
        "r": 0.5345283270611857,
        "p": 1.0151419538801199e-08
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 213.36733872147295,
  "bic_Control": 164.48174215454054,
  "bic_Cocaine": 257.16068564601653,
  "bic_results": {
    "average_bic": 213.36733872147295,
    "individual_bics": [
      145.32214344995492,
      51.49642165179988,
      697.9425657709263,
      50.92443917198528,
      50.92443916624169,
      46.75392432501982,
      7.167037869712219,
      553.0435505476567,
      7.167037869712219,
      49.78439462482503,
      51.400226614742124,
      104.76673410089764,
      513.7357583458135,
      7.167037869712219,
      7.167037869712219,
      7.1670378697123915,
      7.167037869712219,
      26.3559376520164,
      25.47392158151841,
      7.167037869712219,
      743.9941678185662,
      237.42554717011672,
      421.63235461044076,
      51.014120758654954,
      651.8908636199286,
      49.94113602687548,
      49.61997751230513,
      43.542939698501115,
      191.3738453100358,
      375.5806527503598,
      7.167037869712219,
      58.71503224082755,
      96.69183667407226,
      50.365816817132355,
      7.167037869712219,
      46.18624873911576,
      43.168106890752526,
      651.8908639108453,
      559.7874601906836,
      23.605656820380695,
      49.26789007813423,
      191.37385744691397,
      53.2187397297932,
      743.9942673547845,
      651.8904376003494,
      467.64189215074776,
      697.9425657709261,
      467.68405647052157,
      49.9411360268256,
      97.22338217532453,
      974.2527740014132,
      150.81843596202353,
      95.99283788695985,
      697.942339289704,
      46.47454462896984,
      375.5806527503596,
      283.4772490497347,
      34.98214029667561,
      104.76673410173197,
      35.57363908505194,
      49.447828971387985,
      651.8908639108455,
      58.7150322408168,
      97.58015927923049,
      38.80625821691265,
      49.94113602687883,
      22.61270506149056,
      31.061676378023847,
      50.09025430345841,
      28.028718658339734,
      7.1670379166709965,
      150.81843596097875,
      51.096525650213344,
      375.58065275035995,
      97.49113495228892,
      513.7357583306028,
      99.23565685758845,
      58.76391717347276,
      50.723132793743225,
      58.715032241609336,
      697.9425657709263,
      1342.666391810836,
      150.8673208936346,
      51.09652565021387,
      51.01412051181419,
      57.469713280191634,
      513.7357583306025,
      375.5806527503598,
      20.486562108460205,
      51.43943309220776,
      513.7328645325297
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        145.32214344995492,
        51.49642165179988,
        697.9425657709263,
        50.92443917198528,
        50.92443916624169,
        46.75392432501982,
        7.167037869712219,
        553.0435505476567,
        7.167037869712219,
        49.78439462482503,
        51.400226614742124,
        104.76673410089764,
        513.7357583458135,
        7.167037869712219,
        7.167037869712219,
        7.1670378697123915,
        7.167037869712219,
        26.3559376520164,
        25.47392158151841,
        7.167037869712219,
        743.9941678185662,
        237.42554717011672,
        421.63235461044076,
        51.014120758654954,
        651.8908636199286,
        49.94113602687548,
        49.61997751230513,
        43.542939698501115,
        191.3738453100358,
        375.5806527503598,
        7.167037869712219,
        58.71503224082755,
        96.69183667407226,
        50.365816817132355,
        7.167037869712219,
        46.18624873911576,
        43.168106890752526,
        651.8908639108453,
        559.7874601906836,
        23.605656820380695,
        49.26789007813423,
        191.37385744691397,
        53.2187397297932
      ],
      "Cocaine": [
        743.9942673547845,
        651.8904376003494,
        467.64189215074776,
        697.9425657709261,
        467.68405647052157,
        49.9411360268256,
        97.22338217532453,
        974.2527740014132,
        150.81843596202353,
        95.99283788695985,
        697.942339289704,
        46.47454462896984,
        375.5806527503596,
        283.4772490497347,
        34.98214029667561,
        104.76673410173197,
        35.57363908505194,
        49.447828971387985,
        651.8908639108455,
        58.7150322408168,
        97.58015927923049,
        38.80625821691265,
        49.94113602687883,
        22.61270506149056,
        31.061676378023847,
        50.09025430345841,
        28.028718658339734,
        7.1670379166709965,
        150.81843596097875,
        51.096525650213344,
        375.58065275035995,
        97.49113495228892,
        513.7357583306028,
        99.23565685758845,
        58.76391717347276,
        50.723132793743225,
        58.715032241609336,
        697.9425657709263,
        1342.666391810836,
        150.8673208936346,
        51.09652565021387,
        51.01412051181419,
        57.469713280191634,
        513.7357583306025,
        375.5806527503598,
        20.486562108460205,
        51.43943309220776,
        513.7328645325297
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha: r = 0.366\n- beta_step: r = 0.535",
  "previous_models": [
    "Specification: U = (alpha - beta_step * max(0, -sign(split_perc_self - fair_perc_self))) * split_perc_self\nSummary: A piecewise linear utility model for the responder's decision. The utility of accepting an offer is proportional to the percentage offered to the participant (split_perc_self). The proportionality constant (slope) is determined by two parameters: a base sensitivity (alpha) applied when the offer is at or above the participant's fair share percentage (fair_perc_self), and a reduced sensitivity (alpha - beta_step) applied when the offer is strictly below the fair share percentage. Fair share is calculated based on token contributions. The model has two learnable non-negative parameters, alpha and beta_step, which influence the sensitivity to fair/generous and unfair offers, respectively.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 213.36733872147295\nOverall Accuracy: 0.7286\nGroup Accuracies:\n- Control: 0.7655\n- Cocaine: 0.6956\n\nParameter Recovery:\n- alpha: r = 0.366\n- beta_step: r = 0.535"
  ]
}