{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Based on the results of the previous run (Run 13) and the history of models, we continue the critical task of developing a computational model for the responder decision in the ultimatum game that achieves parameter recovery of >= 0.7 for *all* learnable parameters. The previous attempts, including continuous deviation penalties, fixed step penalties, and the most recent piecewise slope *reduction* model (Run 13), have consistently failed to meet this parameter identifiability threshold, despite some achieving reasonable BIC and accuracy scores.\n\nThe piecewise slope reduction model (Run 13), defined as `U = (alpha - beta_step * max(0, -sign(split_perc_self - fair_perc_self))) * split_perc_self`, resulted in recovery values of r = 0.366 for `alpha` and r = 0.535 for `beta_step`. While conceptually promising, this specific formulation, where `beta_step` represents a *reduction* from a base slope `alpha`, did not sufficiently separate the influence of the two parameters for successful recovery. It appears that disentangling a base sensitivity (`alpha`) from a reduction (`beta_step`) applied in only one condition (`split_perc_self < fair_perc_self`) remains challenging.\n\nFor this run (Run 14), let's evolve the piecewise slope concept to potentially improve parameter identifiability. Instead of modeling a base slope and a reduction, let's model the two slopes *independently*. This means defining a distinct slope for offers at or above the fair share (`fair_perc_self`) and an entirely separate slope for offers strictly below the fair share.\n\nConsider a model where the utility of accepting an offer (`U`) is a piecewise linear function of the offered percentage (`split_perc_self`) with a pivot point at the calculated proportional fair share (`fair_perc_self`). The model should have two learnable parameters representing these two independent slopes:\n1.  A parameter `alpha_fair` representing the sensitivity (slope) to the offered percentage (`split_perc_self`) when the offer is at or above the proportional fair share (`split_perc_self >= fair_perc_self`).\n2.  A parameter `alpha_unfair` representing the sensitivity (slope) to the offered percentage (`split_perc_self`) when the offer is strictly below the proportional fair share (`split_perc_self < fair_perc_self`).\n\nThe hypothesis is that by assigning separate parameters to control the slope in these two mutually exclusive conditions (offers >= fair vs. offers < fair), their individual contributions to utility will become more separable and thus more identifiable by the fitting process. Both `alpha_fair` and `alpha_unfair` should be constrained to be non-negative, reflecting the assumption that utility does not decrease as the offered percentage increases within either range, but their magnitude relative to each other captures the aversion to unfairness.\n\n**Proposed Model Structure Idea (Run 14):**\n\nThe utility `U` is calculated such that the relationship with `split_perc_self` is:\n-   Linear with slope `alpha_fair` when `split_perc_self >= fair_perc_self`.\n-   Linear with slope `alpha_unfair` when `split_perc_self < fair_perc_self`.\n\nThis structure creates a piecewise linear function of `split_perc_self` with independent slopes.\n\n**Guidance for the Next Model (Run 14):**\n\nDesign a computational model implementing the \"independent piecewise slopes\" concept described above. This model structure is a direct evolution of the previous attempt, aiming specifically to enhance parameter identifiability by having parameters influence the utility function in distinct regions defined by the `fair_perc_self` threshold.\n\n*   **Prioritize Parameter Recovery:** Design the model structure to ensure `alpha_fair` and `alpha_unfair` have maximally distinguishable effects on the utility function given the data.\n*   **Parameter Constraints:** Define clear, generous, finite, non-negative bounds for both `alpha_fair` and `alpha_unfair`. Suggest bounds [0, 10] for both.\n*   **Model Specification:** Provide the mathematical formula between <MODEL> tags using standard mathematical notation. Ensure the formula reflects the change in slope above/at vs. below `fair_perc_self`. You can implement the piecewise slope logic using indicator functions. Let `I_unfair` be an indicator function that is 1 if `split_perc_self < fair_perc_self` and 0 otherwise. A mathematical way to write this indicator is `max(0, -sign(split_perc_self - fair_perc_self))`. Let `I_fair` be the opposite indicator, 1 if `split_perc_self >= fair_perc_self` and 0 otherwise, which can be written as `(1 - I_unfair)`. The structure should be `U = alpha_fair * split_perc_self * I_fair + alpha_unfair * split_perc_self * I_unfair`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags, including the specified bounds and learnable status for `alpha_fair` and `alpha_unfair`. Remember that `fair_perc_self` is a calculated variable derived from `token_self` and `token_opp`.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags.\n\nFocus intently on implementing this distinct structural approach \u2013 modeling two independent slopes based on the fairness threshold \u2013 as the next strategy to achieve the necessary parameter identifiability. Think creatively about the precise mathematical formulation within the single expression for the <MODEL> tag.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember `fair_perc_self` can be calculated as `(token_self / (token_self + token_opp)) * 100`. Use variables relevant for responder trials (`trial_role == 1`).\n\nFor run 14 of 100, please think through this step by step, focusing intently on designing a model structure that maximizes parameter identifiability given the data and the history of failed recovery attempts, specifically implementing the described independent piecewise slope model. Then provide your model specification, variable descriptions, target variable, and summary.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Based on the results of the previous run (Run 13) and the history of models, we continue the critical task of developing a computational model for the responder decision in the ultimatum game that achieves parameter recovery of >= 0.7 for *all* learnable parameters. The previous attempts, including continuous deviation penalties, fixed step penalties, and the most recent piecewise slope *reduction* model (Run 13), have consistently failed to meet this parameter identifiability threshold, despite some achieving reasonable BIC and accuracy scores.\n\nThe piecewise slope reduction model (Run 13), defined as `U = (alpha - beta_step * max(0, -sign(split_perc_self - fair_perc_self))) * split_perc_self`, resulted in recovery values of r = 0.366 for `alpha` and r = 0.535 for `beta_step`. While conceptually promising, this specific formulation, where `beta_step` represents a *reduction* from a base slope `alpha`, did not sufficiently separate the influence of the two parameters for successful recovery. It appears that disentangling a base sensitivity (`alpha`) from a reduction (`beta_step`) applied in only one condition (`split_perc_self < fair_perc_self`) remains challenging.\n\nFor this run (Run 14), let's evolve the piecewise slope concept to potentially improve parameter identifiability. Instead of modeling a base slope and a reduction, let's model the two slopes *independently*. This means defining a distinct slope for offers at or above the fair share (`fair_perc_self`) and an entirely separate slope for offers strictly below the fair share.\n\nConsider a model where the utility of accepting an offer (`U`) is a piecewise linear function of the offered percentage (`split_perc_self`) with a pivot point at the calculated proportional fair share (`fair_perc_self`). The model should have two learnable parameters representing these two independent slopes:\n1.  A parameter `alpha_fair` representing the sensitivity (slope) to the offered percentage (`split_perc_self`) when the offer is at or above the proportional fair share (`split_perc_self >= fair_perc_self`).\n2.  A parameter `alpha_unfair` representing the sensitivity (slope) to the offered percentage (`split_perc_self`) when the offer is strictly below the proportional fair share (`split_perc_self < fair_perc_self`).\n\nThe hypothesis is that by assigning separate parameters to control the slope in these two mutually exclusive conditions (offers >= fair vs. offers < fair), their individual contributions to utility will become more separable and thus more identifiable by the fitting process. Both `alpha_fair` and `alpha_unfair` should be constrained to be non-negative, reflecting the assumption that utility does not decrease as the offered percentage increases within either range, but their magnitude relative to each other captures the aversion to unfairness.\n\n**Proposed Model Structure Idea (Run 14):**\n\nThe utility `U` is calculated such that the relationship with `split_perc_self` is:\n-   Linear with slope `alpha_fair` when `split_perc_self >= fair_perc_self`.\n-   Linear with slope `alpha_unfair` when `split_perc_self < fair_perc_self`.\n\nThis structure creates a piecewise linear function of `split_perc_self` with independent slopes.\n\n**Guidance for the Next Model (Run 14):**\n\nDesign a computational model implementing the \"independent piecewise slopes\" concept described above. This model structure is a direct evolution of the previous attempt, aiming specifically to enhance parameter identifiability by having parameters influence the utility function in distinct regions defined by the `fair_perc_self` threshold.\n\n*   **Prioritize Parameter Recovery:** Design the model structure to ensure `alpha_fair` and `alpha_unfair` have maximally distinguishable effects on the utility function given the data.\n*   **Parameter Constraints:** Define clear, generous, finite, non-negative bounds for both `alpha_fair` and `alpha_unfair`. Suggest bounds [0, 10] for both.\n*   **Model Specification:** Provide the mathematical formula between <MODEL> tags using standard mathematical notation. Ensure the formula reflects the change in slope above/at vs. below `fair_perc_self`. You can implement the piecewise slope logic using indicator functions. Let `I_unfair` be an indicator function that is 1 if `split_perc_self < fair_perc_self` and 0 otherwise. A mathematical way to write this indicator is `max(0, -sign(split_perc_self - fair_perc_self))`. Let `I_fair` be the opposite indicator, 1 if `split_perc_self >= fair_perc_self` and 0 otherwise, which can be written as `(1 - I_unfair)`. The structure should be `U = alpha_fair * split_perc_self * I_fair + alpha_unfair * split_perc_self * I_unfair`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags, including the specified bounds and learnable status for `alpha_fair` and `alpha_unfair`. Remember that `fair_perc_self` is a calculated variable derived from `token_self` and `token_opp`.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags.\n\nFocus intently on implementing this distinct structural approach \u2013 modeling two independent slopes based on the fairness threshold \u2013 as the next strategy to achieve the necessary parameter identifiability. Think creatively about the precise mathematical formulation within the single expression for the <MODEL> tag.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember `fair_perc_self` can be calculated as `(token_self / (token_self + token_opp)) * 100`. Use variables relevant for responder trials (`trial_role == 1`).\n\nFor run 14 of 100, please think through this step by step, focusing intently on designing a model structure that maximizes parameter identifiability given the data and the history of failed recovery attempts, specifically implementing the described independent piecewise slope model. Then provide your model specification, variable descriptions, target variable, and summary.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, here is the computational model designed to address the parameter recovery challenges encountered in previous runs, specifically implementing the independent piecewise slope structure for the responder's utility function.\n\n<MODEL>\nutility = alpha_fair_param * split_perc_self * (1 - max(0, -sign(split_perc_self - fair_perc_self))) + alpha_unfair_param * split_perc_self * max(0, -sign(split_perc_self - fair_perc_self)))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Calculated utility of accepting the proposed offer. Higher utility predicts higher probability of acceptance via a logistic function.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha_fair_param\": {\n      \"description\": \"Learnable parameter representing the slope of the utility function when the proposed percentage (split_perc_self) is greater than or equal to the participant's proportional fair share (fair_perc_self). Represents sensitivity to offers perceived as fair or generous.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_unfair_param\": {\n      \"description\": \"Learnable parameter representing the slope of the utility function when the proposed percentage (split_perc_self) is strictly less than the participant's proportional fair share (fair_perc_self). Represents sensitivity to offers perceived as unfair.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the combined earning proposed to the participant in the current trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n     \"token_self\": {\n      \"description\": \"The number of tokens found by the participant, representing their contribution to the shared pot.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"The number of tokens found by the opponent, representing their contribution to the shared pot.\",\n       \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The participant's proportionally fair percentage of the combined earning, calculated as (token_self / (token_self + token_opp)) * 100.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"indicator_unfair\": {\n      \"description\": \"An indicator variable that is 1 if split_perc_self < fair_perc_self, and 0 otherwise. Calculated as max(0, -sign(split_perc_self - fair_perc_self)).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n         \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"indicator_fair\": {\n      \"description\": \"An indicator variable that is 1 if split_perc_self >= fair_perc_self, and 0 otherwise. Calculated as (1 - indicator_unfair).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n         \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA piecewise linear utility model for the responder's decision based on the offered percentage relative to their proportional fair share. The model has two learnable parameters: alpha_fair_param representing the sensitivity (slope) to offers perceived as fair or generous (at or above the fair share), and alpha_unfair_param representing sensitivity to offers perceived as unfair (below the fair share). Both slopes are non-negative and bounded between 0 and 10. Utility is calculated as a function of the offered percentage, with the slope determined by whether the offer is above/at or below the fair share. This utility determines the probability of acceptance via a logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha_fair_param', 'alpha_unfair_param']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                utility = alpha_fair_param * split_perc_self * (1 - max(0, -sign(split_perc_self - fair_perc_self))) + alpha_unfair_param * split_perc_self * max(0, -sign(split_perc_self - fair_perc_self)))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Calculated utility of accepting the proposed offer. Higher utility predicts higher probability of acceptance via a logistic function.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha_fair_param\": {\n      \"description\": \"Learnable parameter representing the slope of the utility function when the proposed percentage (split_perc_self) is greater than or equal to the participant's proportional fair share (fair_perc_self). Represents sensitivity to offers perceived as fair or generous.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_unfair_param\": {\n      \"description\": \"Learnable parameter representing the slope of the utility function when the proposed percentage (split_perc_self) is strictly less than the participant's proportional fair share (fair_perc_self). Represents sensitivity to offers perceived as unfair.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the combined earning proposed to the participant in the current trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"The number of tokens found by the participant, representing their contribution to the shared pot.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"The number of tokens found by the opponent, representing their contribution to the shared pot.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The participant's proportionally fair percentage of the combined earning, calculated as (token_self / (token_self + token_opp)) * 100.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"indicator_unfair\": {\n      \"description\": \"An indicator variable that is 1 if split_perc_self < fair_perc_self, and 0 otherwise. Calculated as max(0, -sign(split_perc_self - fair_perc_self)).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"indicator_fair\": {\n      \"description\": \"An indicator variable that is 1 if split_perc_self >= fair_perc_self, and 0 otherwise. Calculated as (1 - indicator_unfair).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha_fair_param=1, alpha_unfair_param=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate fair_perc_self\n        if (token_self + token_opp) == 0:\n            fair_perc_self = 50  # Default to 50 if both are zero to avoid division by zero\n        else:\n            fair_perc_self = (token_self / (token_self + token_opp)) * 100\n\n        # Calculate indicator_unfair\n        indicator_unfair = max(0, -int(math.copysign(1, split_perc_self - fair_perc_self))) # Using math.copysign to implement the sign function\n\n\n        # Calculate utility\n        utility = alpha_fair_param * split_perc_self * (1 - indicator_unfair) + alpha_unfair_param * split_perc_self * indicator_unfair\n\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = \"\"\"\n[\n  {\n    \"ID\": 1,\n    \"group\": \"control\",\n    \"trial_number\": 1,\n    \"trial_type\": 1,\n    \"trial_role\": 1,\n    \"token_opp\": 5,\n    \"token_self\": 5,\n    \"combined_earning\": 100,\n    \"split_opp\": 50.0,\n    \"split_self\": 50.0,\n    \"splitperc_opp\": 50,\n    \"splitperc_self\": 50,\n    \"accept\": 1.0,\n    \"accepted_amount\": 50.0,\n    \"accepted_perc\": 50.0,\n    \"proposed_perc\": 50.0,\n    \"proposed_amount\": 50.0\n  },\n  {\n    \"ID\": 2,\n    \"group\": \"control\",\n    \"trial_number\": 2,\n    \"trial_type\": 1,\n    \"trial_role\": 1,\n    \"token_opp\": 2,\n    \"token_self\": 8,\n    \"combined_earning\": 100,\n    \"split_opp\": 20.0,\n    \"split_self\": 80.0,\n    \"splitperc_opp\": 20,\n    \"splitperc_self\": 80,\n    \"accept\": 1.0,\n    \"accepted_amount\": 80.0,\n    \"accepted_perc\": 80.0,\n    \"proposed_perc\": 80.0,\n    \"proposed_amount\": 80.0\n  },\n  {\n    \"ID\": 3,\n    \"group\": \"control\",\n    \"trial_number\": 3,\n    \"trial_type\": 1,\n    \"trial_role\": 1,\n    \"token_opp\": 8,\n    \"token_self\": 2,\n    \"combined_earning\": 100,\n    \"split_opp\": 80.0,\n    \"split_self\": 20.0,\n    \"splitperc_opp\": 80,\n    \"splitperc_self\": 20,\n    \"accept\": 0.0,\n    \"accepted_amount\": 0.0,\n    \"accepted_perc\": 0.0,\n    \"proposed_perc\": 20.0,\n    \"proposed_amount\": 20.0\n  }\n]\n\"\"\"\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1746096818.348583
    }
  ],
  "learnable_parameters": {
    "alpha_fair_param": {
      "description": "Learnable parameter representing the slope of the utility function when the proposed percentage (split_perc_self) is greater than or equal to the participant's proportional fair share (fair_perc_self). Represents sensitivity to offers perceived as fair or generous.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha_unfair_param": {
      "description": "Learnable parameter representing the slope of the utility function when the proposed percentage (split_perc_self) is strictly less than the participant's proportional fair share (fair_perc_self). Represents sensitivity to offers perceived as unfair.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "utility = alpha_fair_param * split_perc_self * (1 - max(0, -sign(split_perc_self - fair_perc_self))) + alpha_unfair_param * split_perc_self * max(0, -sign(split_perc_self - fair_perc_self)))",
  "variable_descriptions": {
    "utility": {
      "description": "Calculated utility of accepting the proposed offer. Higher utility predicts higher probability of acceptance via a logistic function.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha_fair_param": {
      "description": "Learnable parameter representing the slope of the utility function when the proposed percentage (split_perc_self) is greater than or equal to the participant's proportional fair share (fair_perc_self). Represents sensitivity to offers perceived as fair or generous.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha_unfair_param": {
      "description": "Learnable parameter representing the slope of the utility function when the proposed percentage (split_perc_self) is strictly less than the participant's proportional fair share (fair_perc_self). Represents sensitivity to offers perceived as unfair.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_perc_self": {
      "description": "The percentage of the combined earning proposed to the participant in the current trial.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "The number of tokens found by the participant, representing their contribution to the shared pot.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "The number of tokens found by the opponent, representing their contribution to the shared pot.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "fair_perc_self": {
      "description": "The participant's proportionally fair percentage of the combined earning, calculated as (token_self / (token_self + token_opp)) * 100.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "indicator_unfair": {
      "description": "An indicator variable that is 1 if split_perc_self < fair_perc_self, and 0 otherwise. Calculated as max(0, -sign(split_perc_self - fair_perc_self)).",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "indicator_fair": {
      "description": "An indicator variable that is 1 if split_perc_self >= fair_perc_self, and 0 otherwise. Calculated as (1 - indicator_unfair).",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A piecewise linear utility model for the responder's decision based on the offered percentage relative to their proportional fair share. The model has two learnable parameters: alpha_fair_param representing the sensitivity (slope) to offers perceived as fair or generous (at or above the fair share), and alpha_unfair_param representing sensitivity to offers perceived as unfair (below the fair share). Both slopes are non-negative and bounded between 0 and 10. Utility is calculated as a function of the offered percentage, with the slope determined by whether the offer is above/at or below the fair share. This utility determines the probability of acceptance via a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "Okay, here is the computational model designed to address the parameter recovery challenges encountered in previous runs, specifically implementing the independent piecewise slope structure for the responder's utility function.\n\n<MODEL>\nutility = alpha_fair_param * split_perc_self * (1 - max(0, -sign(split_perc_self - fair_perc_self))) + alpha_unfair_param * split_perc_self * max(0, -sign(split_perc_self - fair_perc_self)))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Calculated utility of accepting the proposed offer. Higher utility predicts higher probability of acceptance via a logistic function.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha_fair_param\": {\n      \"description\": \"Learnable parameter representing the slope of the utility function when the proposed percentage (split_perc_self) is greater than or equal to the participant's proportional fair share (fair_perc_self). Represents sensitivity to offers perceived as fair or generous.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_unfair_param\": {\n      \"description\": \"Learnable parameter representing the slope of the utility function when the proposed percentage (split_perc_self) is strictly less than the participant's proportional fair share (fair_perc_self). Represents sensitivity to offers perceived as unfair.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the combined earning proposed to the participant in the current trial.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n     \"token_self\": {\n      \"description\": \"The number of tokens found by the participant, representing their contribution to the shared pot.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"The number of tokens found by the opponent, representing their contribution to the shared pot.\",\n       \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The participant's proportionally fair percentage of the combined earning, calculated as (token_self / (token_self + token_opp)) * 100.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"indicator_unfair\": {\n      \"description\": \"An indicator variable that is 1 if split_perc_self < fair_perc_self, and 0 otherwise. Calculated as max(0, -sign(split_perc_self - fair_perc_self)).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n         \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"indicator_fair\": {\n      \"description\": \"An indicator variable that is 1 if split_perc_self >= fair_perc_self, and 0 otherwise. Calculated as (1 - indicator_unfair).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n         \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA piecewise linear utility model for the responder's decision based on the offered percentage relative to their proportional fair share. The model has two learnable parameters: alpha_fair_param representing the sensitivity (slope) to offers perceived as fair or generous (at or above the fair share), and alpha_unfair_param representing sensitivity to offers perceived as unfair (below the fair share). Both slopes are non-negative and bounded between 0 and 10. Utility is calculated as a function of the offered percentage, with the slope determined by whether the offer is above/at or below the fair share. This utility determines the probability of acceptance via a logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: utility = alpha_fair_param * split_perc_self * (1 - max(0, -sign(split_perc_self - fair_perc_self))) + alpha_unfair_param * split_perc_self * max(0, -sign(split_perc_self - fair_perc_self)))\nSummary: A piecewise linear utility model for the responder's decision based on the offered percentage relative to their proportional fair share. The model has two learnable parameters: alpha_fair_param representing the sensitivity (slope) to offers perceived as fair or generous (at or above the fair share), and alpha_unfair_param representing sensitivity to offers perceived as unfair (below the fair share). Both slopes are non-negative and bounded between 0 and 10. Utility is calculated as a function of the offered percentage, with the slope determined by whether the offer is above/at or below the fair share. This utility determines the probability of acceptance via a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha_fair_param=1, alpha_unfair_param=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate fair_perc_self\n        if (token_self + token_opp) == 0:\n            fair_perc_self = 50  # Default to 50 if both are zero to avoid division by zero\n        else:\n            fair_perc_self = (token_self / (token_self + token_opp)) * 100\n\n        # Calculate indicator_unfair\n        indicator_unfair = max(0, -int(math.copysign(1, split_perc_self - fair_perc_self))) # Using math.copysign to implement the sign function\n\n\n        # Calculate utility\n        utility = alpha_fair_param * split_perc_self * (1 - indicator_unfair) + alpha_unfair_param * split_perc_self * indicator_unfair\n\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6153846153846154,
  "group_accuracies": {
    "Control": 0.6763565891472868,
    "Cocaine": 0.5607638888888888
  },
  "group_parameter_averages": {
    "Control": {
      "alpha_fair_param": 4.785783351447234,
      "alpha_unfair_param": 3.741814885110589
    },
    "Cocaine": {
      "alpha_fair_param": 5.353935565336337,
      "alpha_unfair_param": 2.2623777760810664
    }
  },
  "fitting_results": [
    {
      "alpha_fair_param": 0.00489898430712883,
      "alpha_unfair_param": 0.0,
      "success": true,
      "log_likelihood": -24.928856026630054,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 6.194367222500191,
      "alpha_unfair_param": 0.0021361966789870132,
      "success": true,
      "log_likelihood": -22.16469188744405,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 5.131629215124191,
      "alpha_unfair_param": 3.0364561727630344,
      "success": true,
      "log_likelihood": -391.43751466963784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 1.3434726272397102,
      "alpha_unfair_param": 9.24921766081665,
      "success": true,
      "log_likelihood": -483.5428695272498,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 5.021114297991182,
      "alpha_unfair_param": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 5.537552839612671,
      "alpha_unfair_param": 8.656795709243028,
      "success": true,
      "log_likelihood": -299.33606208692606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 2.628418494904209,
      "alpha_unfair_param": 6.028551098378148,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 2.618634822845294,
      "alpha_unfair_param": 3.6349457160188994,
      "success": true,
      "log_likelihood": -276.3102044955549,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 4.042039723730056,
      "alpha_unfair_param": 6.553575443245434,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 3.3427595397607646,
      "alpha_unfair_param": 8.366433672064224,
      "success": true,
      "log_likelihood": -506.56872045729034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 1.0970389282761717,
      "alpha_unfair_param": 8.842504749480153,
      "success": true,
      "log_likelihood": -460.5170185972094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 2.457286176621194,
      "alpha_unfair_param": 3.551553772416729,
      "success": true,
      "log_likelihood": -736.8272164350482,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 9.047732088997165,
      "alpha_unfair_param": 8.204626602792693,
      "success": true,
      "log_likelihood": -483.5428695272499,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 8.345457919025534,
      "alpha_unfair_param": 5.047120590672655,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 8.067710930273597,
      "alpha_unfair_param": 4.72515097420529,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 6.235670272933156,
      "alpha_unfair_param": 5.597420087199977,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 7.6618438511285785,
      "alpha_unfair_param": 9.774187477924524,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 1.0162560226355344,
      "alpha_unfair_param": 2.043065424658199,
      "success": true,
      "log_likelihood": -107.12773217037187,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 5.977604911783398,
      "alpha_unfair_param": 7.435117936202893,
      "success": true,
      "log_likelihood": -92.10340371656177,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 7.111709016538638,
      "alpha_unfair_param": 4.5460851089154755,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 1.5533174010285444,
      "alpha_unfair_param": 0.010064778477612316,
      "success": true,
      "log_likelihood": -21.830207793584115,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 8.925946849782594,
      "alpha_unfair_param": 5.9817618548514675,
      "success": true,
      "log_likelihood": -115.12925464660225,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 7.414557184450552,
      "alpha_unfair_param": 9.012175620103065,
      "success": true,
      "log_likelihood": -529.5945713873308,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 6.752421289189925,
      "alpha_unfair_param": 0.008603869407519754,
      "success": true,
      "log_likelihood": -21.923541317449416,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 8.331710102828657,
      "alpha_unfair_param": 5.544149601451831,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 4.16622752853052,
      "alpha_unfair_param": 3.34956879532177,
      "success": true,
      "log_likelihood": -345.38767735086094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 2.418254929613158,
      "alpha_unfair_param": 0.016827185532281463,
      "success": true,
      "log_likelihood": -21.2264698161691,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 5.306038580347275,
      "alpha_unfair_param": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 7.345756679998382,
      "alpha_unfair_param": 0.08081014468761188,
      "success": true,
      "log_likelihood": -10.43084039194383,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 1.2162009279916275,
      "alpha_unfair_param": 2.533240140947254,
      "success": true,
      "log_likelihood": -184.01690580829455,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 5.561943891994748,
      "alpha_unfair_param": 1.5961773378151534,
      "success": true,
      "log_likelihood": -3.4716094547782826e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 3.4955540736813395,
      "alpha_unfair_param": 0.0,
      "success": true,
      "log_likelihood": -68.23241163119913,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 0.6857290850305964,
      "alpha_unfair_param": 0.0,
      "success": true,
      "log_likelihood": -45.1943980883393,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 9.28283469155856,
      "alpha_unfair_param": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 1.296747100759461,
      "alpha_unfair_param": 2.523997567454278,
      "success": true,
      "log_likelihood": 3.5672258478676874e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 8.411730463308652,
      "alpha_unfair_param": 0.029279917296322552,
      "success": true,
      "log_likelihood": -19.509605431874274,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 4.380772141920676,
      "alpha_unfair_param": 0.03800303152711308,
      "success": true,
      "log_likelihood": -18.000534506405845,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 2.9765063504493328,
      "alpha_unfair_param": 7.336961159440008,
      "success": true,
      "log_likelihood": -414.46531673712843,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 7.726550523347077,
      "alpha_unfair_param": 8.770681517735232,
      "success": true,
      "log_likelihood": -276.3102111568857,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 2.7534242458899927,
      "alpha_unfair_param": 0.09720708563838189,
      "success": true,
      "log_likelihood": -8.219309471811997,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 1.165376194672868,
      "alpha_unfair_param": 5.919500476179791,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 4.4356896305285005,
      "alpha_unfair_param": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 7.302196359099691,
      "alpha_unfair_param": 2.754085582211644,
      "success": true,
      "log_likelihood": -23.025850926443773,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 7.404994357043419,
      "alpha_unfair_param": 0.015292128171142378,
      "success": true,
      "log_likelihood": -21.3870490749811,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 2.9421646358257805,
      "alpha_unfair_param": 0.022399228728854942,
      "success": true,
      "log_likelihood": -20.540999413361597,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 2.6958108539100634,
      "alpha_unfair_param": 3.4181684569976643,
      "success": true,
      "log_likelihood": -230.25846932904207,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 9.130115504247895,
      "alpha_unfair_param": 0.01079722826707949,
      "success": true,
      "log_likelihood": -21.77804748259986,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 1.23319344654785,
      "alpha_unfair_param": 2.1775127773870606,
      "success": true,
      "log_likelihood": -502.0612465606062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 9.947546625424481,
      "alpha_unfair_param": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 5.993934219810634,
      "alpha_unfair_param": 0.007153326332802385,
      "success": true,
      "log_likelihood": -45.02817214980103,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 6.227395586991273,
      "alpha_unfair_param": 0.031112464455649996,
      "success": true,
      "log_likelihood": -19.20768972821591,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 1.2801155895403515,
      "alpha_unfair_param": 0.0,
      "success": true,
      "log_likelihood": -68.23241163119914,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 9.60174806439708,
      "alpha_unfair_param": 9.945075287192326,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 1.6059236567536372,
      "alpha_unfair_param": 5.264162655389487,
      "success": true,
      "log_likelihood": -345.3877639470071,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 6.63147322143598,
      "alpha_unfair_param": 3.345848465173751,
      "success": true,
      "log_likelihood": -506.56866272652627,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 7.544063660590358,
      "alpha_unfair_param": 4.7586886195238485,
      "success": true,
      "log_likelihood": -552.6204223173712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 10.0,
      "alpha_unfair_param": 3.2906987900465934,
      "success": true,
      "log_likelihood": -598.6719709705868,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 9.485169988351457,
      "alpha_unfair_param": 0.059964960835418434,
      "success": true,
      "log_likelihood": -13.907551209891894,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 9.687392024609734,
      "alpha_unfair_param": 0.0,
      "success": true,
      "log_likelihood": -68.23241163119916,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 0.8400891654763176,
      "alpha_unfair_param": 0.05834503228922988,
      "success": true,
      "log_likelihood": -14.203300602207857,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 4.130165057025305,
      "alpha_unfair_param": 0.017603317624146148,
      "success": true,
      "log_likelihood": -21.140395547243862,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 5.178800566349,
      "alpha_unfair_param": 2.8865374344079298,
      "success": true,
      "log_likelihood": -414.4565964091259,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 0.6895976484820143,
      "alpha_unfair_param": 7.913201221998946,
      "success": true,
      "log_likelihood": -759.8322243617187,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 4.315285023554577,
      "alpha_unfair_param": 7.674688793160311,
      "success": true,
      "log_likelihood": -460.5170185972094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 0.28884287119428115,
      "alpha_unfair_param": 0.0,
      "success": true,
      "log_likelihood": -22.180730040428056,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 8.899596110850645,
      "alpha_unfair_param": 0.015292122711721772,
      "success": true,
      "log_likelihood": -21.387049074983597,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 7.228249600188219,
      "alpha_unfair_param": 0.10145729534228116,
      "success": true,
      "log_likelihood": -7.722833590147478,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 6.973261711862343,
      "alpha_unfair_param": 8.402588672737659,
      "success": true,
      "log_likelihood": -115.1292546466023,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 9.08310192998975,
      "alpha_unfair_param": 0.01453232837516083,
      "success": true,
      "log_likelihood": -21.461608213273724,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 9.252703299563601,
      "alpha_unfair_param": 1.4244261803393836,
      "success": true,
      "log_likelihood": -69.06908615027575,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 1.4878202939454321,
      "alpha_unfair_param": 0.0,
      "success": true,
      "log_likelihood": -22.180709771118234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 0.8715093173282473,
      "alpha_unfair_param": 3.0818630354853536,
      "success": true,
      "log_likelihood": -713.8001267519137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1388888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 2.648562867345743,
      "alpha_unfair_param": 0.007877574886396618,
      "success": true,
      "log_likelihood": -21.96474388665065,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 8.518678281804673,
      "alpha_unfair_param": 0.04968180642872939,
      "success": true,
      "log_likelihood": -15.819610171105422,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 5.090112787332391,
      "alpha_unfair_param": 5.229282532179166,
      "success": true,
      "log_likelihood": -414.4653167371285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 7.518538301587041,
      "alpha_unfair_param": 7.2053097414601535,
      "success": true,
      "log_likelihood": -253.28436022684528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 3.1607819007362306,
      "alpha_unfair_param": 9.214633544350757,
      "success": true,
      "log_likelihood": -46.051701856480875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 8.156439040988824,
      "alpha_unfair_param": 2.076224476683729,
      "success": true,
      "log_likelihood": -775.7913618572356,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.05555555555555555,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 7.237394551643107,
      "alpha_unfair_param": 0.010799904156913382,
      "success": true,
      "log_likelihood": -21.77804745840482,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 9.348950340784427,
      "alpha_unfair_param": 0.0,
      "success": true,
      "log_likelihood": -68.23241163119914,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 3.0455979879063335,
      "alpha_unfair_param": 0.0021361988098957084,
      "success": true,
      "log_likelihood": -22.164691887443933,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 2.274108200818581,
      "alpha_unfair_param": 7.09041034665538,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 5.3902090353214245,
      "alpha_unfair_param": 0.0,
      "success": true,
      "log_likelihood": -91.2582625612396,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 6.480869960798657,
      "alpha_unfair_param": 6.048345654143842,
      "success": true,
      "log_likelihood": -414.4653167371285,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 5.58939708592916,
      "alpha_unfair_param": 0.008603868698810064,
      "success": true,
      "log_likelihood": -21.923541317446293,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 4.558963884419802,
      "alpha_unfair_param": 0.0,
      "success": true,
      "log_likelihood": -45.20656070115868,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 2.8532764211787542,
      "alpha_unfair_param": 3.341529602297114,
      "success": true,
      "log_likelihood": -253.2842980553221,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 2.628387955920007,
      "alpha_unfair_param": 4.2283698396658655,
      "success": true,
      "log_likelihood": -644.723826037533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 7.6834032249496165,
      "alpha_unfair_param": 0.11157334928522072,
      "success": true,
      "log_likelihood": -6.659762114549627,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 0.6677799763626713,
      "alpha_unfair_param": 0.0035632223078714566,
      "success": true,
      "log_likelihood": -22.136197607653017,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_fair_param": 3.4873912990270117,
      "alpha_unfair_param": 0.028381766907538346,
      "success": true,
      "log_likelihood": -19.653753376087995,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha_fair_param": {
        "r": 0.054650876570212,
        "p": 0.5891683091356604
      },
      "alpha_unfair_param": {
        "r": 0.20391308024517574,
        "p": 0.0418581574414251
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 362.13362314571305,
  "bic_Control": 324.9556116079103,
  "bic_Cocaine": 395.438925148328,
  "bic_results": {
    "average_bic": 362.13362314571305,
    "individual_bics": [
      57.02474993017233,
      51.49642165180032,
      790.0420672161879,
      974.2527769314119,
      51.528457419148694,
      605.8391620507643,
      7.167037869712219,
      559.787446868022,
      7.167037869712219,
      1020.3044787914929,
      928.201075071331,
      1480.8214707470086,
      974.252776931412,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      221.42250221765596,
      191.37384531003576,
      7.167037869712219,
      50.82745346408045,
      237.42554717011672,
      1066.3561806515738,
      51.01412051181105,
      836.0976713511691,
      697.9423925786341,
      49.61997750925042,
      51.528457419148694,
      28.028718660799882,
      375.2008494935013,
      7.1670385712341105,
      143.63186113931047,
      97.55583405359081,
      51.528457419148694,
      7.167037869777769,
      46.186248740660766,
      43.16810688972391,
      836.0976713511691,
      559.7874601906836,
      23.60565682053621,
      651.8908639108454,
      51.52845741914869,
      53.218739729799765,
      49.94113602687442,
      48.24903670363541,
      467.68397653499636,
      50.72313284211194,
      1011.2895309981246,
      51.528457419148694,
      97.22338217651428,
      45.58241733334404,
      143.6318611393105,
      790.0459694910882,
      697.9425657709264,
      1020.3043633299648,
      1112.4078825116546,
      1204.5109798180858,
      34.98214029669601,
      143.63186113931053,
      35.57363908132793,
      49.44782897139994,
      836.080230695164,
      1526.8314866003495,
      928.201075071331,
      51.52849795776833,
      49.94113602687941,
      22.612705057207176,
      237.42554717011683,
      50.090254303459666,
      145.30521017746372,
      51.52845741914869,
      1434.7672913807396,
      51.096525650213515,
      38.806258219123066,
      836.0976713511692,
      513.7357583306028,
      99.27044158987397,
      1558.7497615913835,
      50.72313279372186,
      143.6318611393105,
      51.496421651800084,
      145.32214344995484,
      189.68356299939143,
      836.0976713511692,
      51.014120511804805,
      97.58015927922958,
      513.7356339875564,
      1296.614689951978,
      20.486562106011476,
      51.43943309221825,
      46.47454462908821
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        57.02474993017233,
        51.49642165180032,
        790.0420672161879,
        974.2527769314119,
        51.528457419148694,
        605.8391620507643,
        7.167037869712219,
        559.787446868022,
        7.167037869712219,
        1020.3044787914929,
        928.201075071331,
        1480.8214707470086,
        974.252776931412,
        7.167037869712219,
        7.167037869712219,
        7.167037869712219,
        7.167037869712219,
        221.42250221765596,
        191.37384531003576,
        7.167037869712219,
        50.82745346408045,
        237.42554717011672,
        1066.3561806515738,
        51.01412051181105,
        836.0976713511691,
        697.9423925786341,
        49.61997750925042,
        51.528457419148694,
        28.028718660799882,
        375.2008494935013,
        7.1670385712341105,
        143.63186113931047,
        97.55583405359081,
        51.528457419148694,
        7.167037869777769,
        46.186248740660766,
        43.16810688972391,
        836.0976713511691,
        559.7874601906836,
        23.60565682053621,
        651.8908639108454,
        51.52845741914869,
        53.218739729799765
      ],
      "Cocaine": [
        49.94113602687442,
        48.24903670363541,
        467.68397653499636,
        50.72313284211194,
        1011.2895309981246,
        51.528457419148694,
        97.22338217651428,
        45.58241733334404,
        143.6318611393105,
        790.0459694910882,
        697.9425657709264,
        1020.3043633299648,
        1112.4078825116546,
        1204.5109798180858,
        34.98214029669601,
        143.63186113931053,
        35.57363908132793,
        49.44782897139994,
        836.080230695164,
        1526.8314866003495,
        928.201075071331,
        51.52849795776833,
        49.94113602687941,
        22.612705057207176,
        237.42554717011683,
        50.090254303459666,
        145.30521017746372,
        51.52845741914869,
        1434.7672913807396,
        51.096525650213515,
        38.806258219123066,
        836.0976713511692,
        513.7357583306028,
        99.27044158987397,
        1558.7497615913835,
        50.72313279372186,
        143.6318611393105,
        51.496421651800084,
        145.32214344995484,
        189.68356299939143,
        836.0976713511692,
        51.014120511804805,
        97.58015927922958,
        513.7356339875564,
        1296.614689951978,
        20.486562106011476,
        51.43943309221825,
        46.47454462908821
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha_fair_param: r = 0.055\n- alpha_unfair_param: r = 0.204",
  "previous_models": [
    "Specification: utility = alpha_fair_param * split_perc_self * (1 - max(0, -sign(split_perc_self - fair_perc_self))) + alpha_unfair_param * split_perc_self * max(0, -sign(split_perc_self - fair_perc_self)))\nSummary: A piecewise linear utility model for the responder's decision based on the offered percentage relative to their proportional fair share. The model has two learnable parameters: alpha_fair_param representing the sensitivity (slope) to offers perceived as fair or generous (at or above the fair share), and alpha_unfair_param representing sensitivity to offers perceived as unfair (below the fair share). Both slopes are non-negative and bounded between 0 and 10. Utility is calculated as a function of the offered percentage, with the slope determined by whether the offer is above/at or below the fair share. This utility determines the probability of acceptance via a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 362.13362314571305\nOverall Accuracy: 0.6154\nGroup Accuracies:\n- Control: 0.6764\n- Cocaine: 0.5608\n\nParameter Recovery:\n- alpha_fair_param: r = 0.055\n- alpha_unfair_param: r = 0.204"
  ]
}