Based on the results of the previous run and the instructions used for that run, generate improved instructions for the *next* run. Aim to guide the main modeling LLM towards better performance (e.g., lower BIC, better parameter recovery, and higher accuracy). Please keep in mind that if any of the learnable parameters have a parameter recovery value of less than ~0.7, then the model is unusable. You will first be given the total context for the previous run, then reminded specifically of the instructions used for that run that you should update.

Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable "token_self". The other variable, "token_opp", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.

Again, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.

Note that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same "fairness".

Below is the description of each variable in the dataset, which will be followed by information about the data type of the variable:

trial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]
trial_role = the role of the participant [1 = responder, 2 = proposer]
token_opp = number of tokens found by the opponent
token_self = number of tokens found by the participant
combined_earning = amount of money earned in total (note that each token found is £3)
split_opp = the proposed share of the opponent (in £)
split_self = the proposed share for the participant (in £)
splitperc_opp = same but in %
split_perc_self = same but in %
accept = whether the participant responded accept (1) or reject (0))
accepted_amount = if accepted, what is the amount gain (in £)
accepted_perc = same as above but in %
proposed_perc = when participant is the proposer, what is the % proposed to the opponent
proposed_amount = when participant is the proposer, what is the amount proposed to the opponent

Desired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).

The model should:
1. Predict only responder behavior (should target "accept = whether the participant responded accept (1) or reject (0)")
2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.
3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).
4. Predict utility, where less than 0 is less than 50% likely.

For any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).

Then, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.
For example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.

Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.

```json
{
  "variables": {
    "variable_name": {
      "description": "Clear description",
      "range": {
        "min": value,
        "max": value,
        "inclusive_min": boolean,
        "inclusive_max": boolean
      },
      "distribution": {
        "type": "distribution type",
        "parameters": {}
      },
      "learnable": boolean,
      "source": "learnable/data/calculated"
    }
  }
}
```
</VARIABLES>

Example #1:
<EXAMPLE>
(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta_param + epsilon_param * E + eta_param * N\n</MODEL>\n\n<VARIABLES>\n{\n  "variables": {\n    "U_i": {\n      "description": "Utility of choosing action i",\n      "range": {\n        "min": "-inf",\n        "max": "inf"\n      },\n      "learnable": false,\n      "source": "calculated"\n    },\n    "beta_param": {\n      "description": "Base tendency parameter (inherent preference)",\n      "range": {\n        "min": 0,\n        "max": 1\n      },\n      "learnable": true,\n      "source": "learnable"\n    },\n    "epsilon_param": {\n      "description": "Environmental sensitivity parameter",\n      "range": {\n        "min": "-inf",\n        "max": "inf"\n      },\
      "learnable": true,\n      "source": "learnable"\n    },\n    "E": {\n      "description": "Environmental cue value",\n      "range": {\n        "min": "-inf",\n        "max": "inf"\n      },\n      "learnable": false,\n      "source": "data"\n    },\n    "eta_param": {\n      "description": "Noise parameter",\n      "range": {\n        "min": 0,\n        "max": 1,\n        "exclusive_max": true\n      },\n      "learnable": true,\n      "source": "learnable"\n    },\n    "N": {\n      "description": "Random noise drawn from normal distribution N(0,1)",\n      "distribution": {\n        "type": "normal",\n        "mean": 0,\n        "std": 1\n      },\n      "learnable": false,\n      "source": "calculated"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>

Please be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.

The parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.

Model Type:
Your model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.

Instructions: The previous models designed to capture responder behavior, whether using piecewise slopes on the offered amount or combining base sensitivity with fixed additive penalties/bonuses based on the proportional fair share, have consistently failed to achieve the required parameter recovery of >= 0.7 for *all* learnable parameters. The most recent attempt (Run 15), which used a base sensitivity to `split_perc_self` plus additive terms for unfair/generous offers (`alpha_sensitivity`, `beta_unfair_penalty`, `gamma_generous_bonus`), resulted in very poor recovery across all three parameters (0.432, 0.161, 0.055). This suggests that separating effects by simply adding constants above/below the fair threshold is not sufficient for identifiability.

For this run (Run 16), let's explore a different structural approach that focuses on the *deviation* from the proportional fair share (`fair_perc_self`) rather than the offered percentage (`split_perc_self`) itself as the primary input, and attempts to capture fairness sensitivity via a piecewise linear relationship *with respect to this deviation*. This approach uses only two learnable parameters, reducing model complexity compared to the last attempt, and anchors utility at 0 when the offer is exactly fair.

Consider a model where the utility of accepting an offer (`U`) is a piecewise linear function of the difference between the offered percentage and the fair percentage (`split_perc_self - fair_perc_self`).

The model should have two learnable parameters:
1.  `sensitivity_generous`: Represents the slope of the utility function when the offer is fair or generous (`split_perc_self >= fair_perc_self`). This parameter scales the positive deviation from the fair share. A higher value means greater positive utility for generous offers.
2.  `penalty_slope_unfair`: Represents the *additional* negative slope applied only when the offer is strictly unfair (`split_perc_self < fair_perc_self`). The effective slope for unfair offers will be `sensitivity_generous - penalty_slope_unfair`. A positive value for this parameter means that unfair offers result in a steeper decrease in utility compared to generous offers of the same magnitude of deviation, relative to the fair share.

The utility `U` should be 0 when `split_perc_self == fair_perc_self`. For offers above fair, utility increases linearly with deviation `(split_perc_self - fair_perc_self)` with slope `sensitivity_generous`. For offers below fair, utility decreases linearly with deviation `(split_perc_self - fair_perc_self)` with a steeper slope `(sensitivity_generous - penalty_slope_unfair)`.

**Proposed Model Structure Idea (Run 16):**

The utility `U` is calculated as a piecewise linear function of the deviation `deviation = split_perc_self - fair_perc_self`:
- If `deviation >= 0`: `U = sensitivity_generous * deviation`
- If `deviation < 0`: `U = (sensitivity_generous - penalty_slope_unfair) * deviation`

This structure can be expressed in a single formula using the positive unfair deviation term `max(0, fair_perc_self - split_perc_self)`, which is `max(0, -deviation)`.
`U = sensitivity_generous * (split_perc_self - fair_perc_self) - penalty_slope_unfair * max(0, fair_perc_self - split_perc_self)`

**Guidance for the Next Model (Run 16):**

Design a computational model implementing this piecewise linear relationship based on the *deviation from the fair share*. This structural approach is designed to potentially improve parameter identifiability by using fewer parameters and anchoring the utility at the fair point.

*   **Prioritize Parameter Recovery:** Focus on making `sensitivity_generous` and `penalty_slope_unfair` distinguishable. The structure should clearly isolate the added disutility slope for unfair offers.
*   **Parameter Constraints:** Define clear, generous, finite, non-negative bounds for `sensitivity_generous` and `penalty_slope_unfair`. Suggest bounds [0, 10] for `sensitivity_generous` and [0, 20] for `penalty_slope_unfair`. Both parameters must be non-negative.
*   **Model Specification:** Provide the mathematical formula between <MODEL> tags using the suggested structure: `U = sensitivity_generous * (split_perc_self - fair_perc_self) - penalty_slope_unfair * max(0, fair_perc_self - split_perc_self)`. Ensure the formula includes the necessary variables (`split_perc_self`, `fair_perc_self`) and parameters.
*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags, including the specified bounds and learnable status for `sensitivity_generous` and `penalty_slope_unfair`. Remember `fair_perc_self` is calculated as `(token_self / (token_self + token_opp)) * 100`. Include descriptions for all variables used in the <MODEL> formula.
*   **Target Variable:** Specify "accept" as the target variable using <target_variable> tags.
*   **Summary:** Provide a concise summary between <SUMMARY> tags.

Think creatively about how this model captures responder preferences by making utility proportional to the distance from fairness, with a potentially different slope for unfair offers. This differs fundamentally from scaling the offered percentage itself. Aim for a structure that allows the two parameters to have distinct influences on the likelihood of acceptance across different offers, particularly those above vs. below the fair share.

Available Data Variables:
- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.
Remember `fair_perc_self` can be calculated as `(token_self / (token_self + token_opp)) * 100`. Use variables relevant for responder trials (`trial_role == 1`).

For run 16 of 100, please think through this step by step, focusing intently on designing a model structure that maximizes parameter identifiability given the data and the history of failed recovery attempts, specifically implementing the described model combining base linear sensitivity with additive fixed penalties/bonuses based on the fairness threshold. Then provide your model specification, variable descriptions, target variable, and summary.