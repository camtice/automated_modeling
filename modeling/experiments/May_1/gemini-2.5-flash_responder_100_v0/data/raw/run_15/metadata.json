{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Based on the results of the previous run and the instructions used for that run, generate improved instructions for the *next* run. Aim to guide the main modeling LLM towards better performance (e.g., lower BIC, better parameter recovery, and higher accuracy). Please keep in mind that if any of the learnable parameters have a parameter recovery value of less than ~0.7, then the model is unusable. You will first be given the total context for the previous run, then reminded specifically of the instructions used for that run that you should update.\n\n\nTask Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0))\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n```json\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n```\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta_param + epsilon_param * E + eta_param * N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_param\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon_param\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta_param\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: The previous attempts to model responder behavior, including those using continuous deviation penalties, fixed step penalties, and different forms of piecewise linear sensitivity based on the proportional fair share, have consistently failed to achieve the required parameter recovery of >= 0.7 for *all* learnable parameters. Specifically, the most recent model, which attempted to use independent slopes for offers below versus at/above the fair share (`alpha_fair_param` and `alpha_unfair_param` scaling `split_perc_self` in their respective ranges), resulted in extremely poor parameter recovery (r = 0.055 and r = 0.204). This suggests that simply changing how `split_perc_self` is scaled based on the fairness threshold is insufficient for parameter identifiability with this dataset.\n\nFor this run (Run 15), let's try a structurally different approach to capture fairness sensitivity. Instead of modeling utility purely through sensitivities (slopes) that scale the offered percentage, let's consider a model that combines a base sensitivity to the offer percentage with *additive, fixed value adjustments* based on whether the offer is perceived as unfair or generous.\n\nConsider a model where the utility of accepting an offer (`U`) has a base component that is linearly proportional to the offered percentage (`split_perc_self`), scaled by a learnable parameter representing general sensitivity. On top of this base utility, fixed positive or negative values are added depending on how the offer compares to the proportional fair share (`fair_perc_self`).\n\nThe model should have three learnable parameters:\n1.  `alpha_sensitivity`: Represents the base linear sensitivity (slope) to the offered percentage (`split_perc_self`). This parameter influences utility regardless of the offer's fairness relative to the threshold.\n2.  `beta_unfair_penalty`: Represents a fixed amount subtracted from utility *only* when the offer is strictly below the proportional fair share (`split_perc_self < fair_perc_self`). This captures the disutility of an unfair offer as a fixed penalty.\n3.  `gamma_generous_bonus`: Represents a fixed amount added to utility *only* when the offer is strictly above the proportional fair share (`split_perc_self > fair_perc_self`). This captures the increased utility or positive feeling associated with a generous offer as a fixed bonus.\n\nThe hypothesis is that separating the general sensitivity to the offer value (`alpha_sensitivity`) from the distinct, fixed impacts of unfairness (`beta_unfair_penalty`) and generosity (`gamma_generous_bonus`) will create more separable parameter effects, thereby improving parameter identifiability compared to previous models that relied on scaling or slope adjustments relative to the fair threshold. Note that when `split_perc_self == fair_perc_self`, only the base sensitivity (`alpha_sensitivity`) should be active, with no penalty or bonus applied.\n\n**Proposed Model Structure Idea (Run 15):**\n\nThe utility `U` is calculated as:\n`U = (base sensitivity to split_perc_self) - (fixed penalty if unfair) + (fixed bonus if generous)`\n\nWhere:\n- Base sensitivity: `alpha_sensitivity * split_perc_self`\n- Fixed penalty if unfair: `beta_unfair_penalty` applied when `split_perc_self < fair_perc_self`\n- Fixed bonus if generous: `gamma_generous_bonus` applied when `split_perc_self > fair_perc_self`\n\n**Guidance for the Next Model (Run 15):**\n\nDesign a computational model implementing the \"base linear sensitivity + additive fixed adjustments\" concept described above. This structure aims to improve parameter identifiability by having parameters contribute to utility in structurally distinct ways (scaling vs. constant shifts) based on the fairness threshold.\n\n*   **Prioritize Parameter Recovery:** Design the model structure to ensure `alpha_sensitivity`, `beta_unfair_penalty`, and `gamma_generous_bonus` have maximally distinguishable effects on the utility function given the data. This model is a direct attempt to address the poor recovery seen in models relying on modifying the slope based on fairness.\n*   **Parameter Constraints:** Define clear, generous, finite, non-negative bounds for `alpha_sensitivity`, `beta_unfair_penalty`, and `gamma_generous_bonus`. Suggest bounds [0, 10] for `alpha_sensitivity`, [0, 20] for `beta_unfair_penalty`, and [0, 10] for `gamma_generous_bonus`. All parameters should be non-negative.\n*   **Model Specification:** Provide the mathematical formula between <MODEL> tags using standard mathematical notation. Ensure the formula reflects the structure using indicator functions for strict inequality (`<` and `>`). You can implement the piecewise additive logic using indicator functions. Let `I_unfair` be an indicator function that is 1 if `split_perc_self < fair_perc_self` and 0 otherwise. A mathematical way to write this indicator is `max(0, -sign(split_perc_self - fair_perc_self))`. Let `I_generous` be an indicator function that is 1 if `split_perc_self > fair_perc_self` and 0 otherwise. A mathematical way to write this indicator is `max(0, sign(split_perc_self - fair_perc_self))`. The structure should be `U = alpha_sensitivity * split_perc_self - beta_unfair_penalty * I_unfair + gamma_generous_bonus * I_generous`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags, including the specified bounds and learnable status for `alpha_sensitivity`, `beta_unfair_penalty`, and `gamma_generous_bonus`. Remember that `fair_perc_self` is a calculated variable derived from `token_self` and `token_opp`.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags.\n\nFocus intently on implementing this distinct structural approach \u2013 combining a base linear effect with threshold-based additive fixed effects \u2013 as the next strategy to achieve the necessary parameter identifiability. Think creatively about the precise mathematical formulation within the single expression for the <MODEL> tag. Try to break away from just modifying slopes based on fairness and explore how fixed penalties/bonuses can capture these effects.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember `fair_perc_self` can be calculated as `(token_self / (token_self + token_opp)) * 100`. Use variables relevant for responder trials (`trial_role == 1`).\n\nFor run 15 of 100, please think through this step by step, focusing intently on designing a model structure that maximizes parameter identifiability given the data and the history of failed recovery attempts, specifically implementing the described model combining base linear sensitivity with additive fixed penalties/bonuses based on the fairness threshold. Then provide your model specification, variable descriptions, target variable, and summary.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Based on the results of the previous run and the instructions used for that run, generate improved instructions for the *next* run. Aim to guide the main modeling LLM towards better performance (e.g., lower BIC, better parameter recovery, and higher accuracy). Please keep in mind that if any of the learnable parameters have a parameter recovery value of less than ~0.7, then the model is unusable. You will first be given the total context for the previous run, then reminded specifically of the instructions used for that run that you should update.\n\n\nTask Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0))\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n```json\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n```\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta_param + epsilon_param * E + eta_param * N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_param\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon_param\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta_param\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: The previous attempts to model responder behavior, including those using continuous deviation penalties, fixed step penalties, and different forms of piecewise linear sensitivity based on the proportional fair share, have consistently failed to achieve the required parameter recovery of >= 0.7 for *all* learnable parameters. Specifically, the most recent model, which attempted to use independent slopes for offers below versus at/above the fair share (`alpha_fair_param` and `alpha_unfair_param` scaling `split_perc_self` in their respective ranges), resulted in extremely poor parameter recovery (r = 0.055 and r = 0.204). This suggests that simply changing how `split_perc_self` is scaled based on the fairness threshold is insufficient for parameter identifiability with this dataset.\n\nFor this run (Run 15), let's try a structurally different approach to capture fairness sensitivity. Instead of modeling utility purely through sensitivities (slopes) that scale the offered percentage, let's consider a model that combines a base sensitivity to the offer percentage with *additive, fixed value adjustments* based on whether the offer is perceived as unfair or generous.\n\nConsider a model where the utility of accepting an offer (`U`) has a base component that is linearly proportional to the offered percentage (`split_perc_self`), scaled by a learnable parameter representing general sensitivity. On top of this base utility, fixed positive or negative values are added depending on how the offer compares to the proportional fair share (`fair_perc_self`).\n\nThe model should have three learnable parameters:\n1.  `alpha_sensitivity`: Represents the base linear sensitivity (slope) to the offered percentage (`split_perc_self`). This parameter influences utility regardless of the offer's fairness relative to the threshold.\n2.  `beta_unfair_penalty`: Represents a fixed amount subtracted from utility *only* when the offer is strictly below the proportional fair share (`split_perc_self < fair_perc_self`). This captures the disutility of an unfair offer as a fixed penalty.\n3.  `gamma_generous_bonus`: Represents a fixed amount added to utility *only* when the offer is strictly above the proportional fair share (`split_perc_self > fair_perc_self`). This captures the increased utility or positive feeling associated with a generous offer as a fixed bonus.\n\nThe hypothesis is that separating the general sensitivity to the offer value (`alpha_sensitivity`) from the distinct, fixed impacts of unfairness (`beta_unfair_penalty`) and generosity (`gamma_generous_bonus`) will create more separable parameter effects, thereby improving parameter identifiability compared to previous models that relied on scaling or slope adjustments relative to the fair threshold. Note that when `split_perc_self == fair_perc_self`, only the base sensitivity (`alpha_sensitivity`) should be active, with no penalty or bonus applied.\n\n**Proposed Model Structure Idea (Run 15):**\n\nThe utility `U` is calculated as:\n`U = (base sensitivity to split_perc_self) - (fixed penalty if unfair) + (fixed bonus if generous)`\n\nWhere:\n- Base sensitivity: `alpha_sensitivity * split_perc_self`\n- Fixed penalty if unfair: `beta_unfair_penalty` applied when `split_perc_self < fair_perc_self`\n- Fixed bonus if generous: `gamma_generous_bonus` applied when `split_perc_self > fair_perc_self`\n\n**Guidance for the Next Model (Run 15):**\n\nDesign a computational model implementing the \"base linear sensitivity + additive fixed adjustments\" concept described above. This structure aims to improve parameter identifiability by having parameters contribute to utility in structurally distinct ways (scaling vs. constant shifts) based on the fairness threshold.\n\n*   **Prioritize Parameter Recovery:** Design the model structure to ensure `alpha_sensitivity`, `beta_unfair_penalty`, and `gamma_generous_bonus` have maximally distinguishable effects on the utility function given the data. This model is a direct attempt to address the poor recovery seen in models relying on modifying the slope based on fairness.\n*   **Parameter Constraints:** Define clear, generous, finite, non-negative bounds for `alpha_sensitivity`, `beta_unfair_penalty`, and `gamma_generous_bonus`. Suggest bounds [0, 10] for `alpha_sensitivity`, [0, 20] for `beta_unfair_penalty`, and [0, 10] for `gamma_generous_bonus`. All parameters should be non-negative.\n*   **Model Specification:** Provide the mathematical formula between <MODEL> tags using standard mathematical notation. Ensure the formula reflects the structure using indicator functions for strict inequality (`<` and `>`). You can implement the piecewise additive logic using indicator functions. Let `I_unfair` be an indicator function that is 1 if `split_perc_self < fair_perc_self` and 0 otherwise. A mathematical way to write this indicator is `max(0, -sign(split_perc_self - fair_perc_self))`. Let `I_generous` be an indicator function that is 1 if `split_perc_self > fair_perc_self` and 0 otherwise. A mathematical way to write this indicator is `max(0, sign(split_perc_self - fair_perc_self))`. The structure should be `U = alpha_sensitivity * split_perc_self - beta_unfair_penalty * I_unfair + gamma_generous_bonus * I_generous`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags, including the specified bounds and learnable status for `alpha_sensitivity`, `beta_unfair_penalty`, and `gamma_generous_bonus`. Remember that `fair_perc_self` is a calculated variable derived from `token_self` and `token_opp`.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags.\n\nFocus intently on implementing this distinct structural approach \u2013 combining a base linear effect with threshold-based additive fixed effects \u2013 as the next strategy to achieve the necessary parameter identifiability. Think creatively about the precise mathematical formulation within the single expression for the <MODEL> tag. Try to break away from just modifying slopes based on fairness and explore how fixed penalties/bonuses can capture these effects.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember `fair_perc_self` can be calculated as `(token_self / (token_self + token_opp)) * 100`. Use variables relevant for responder trials (`trial_role == 1`).\n\nFor run 15 of 100, please think through this step by step, focusing intently on designing a model structure that maximizes parameter identifiability given the data and the history of failed recovery attempts, specifically implementing the described model combining base linear sensitivity with additive fixed penalties/bonuses based on the fairness threshold. Then provide your model specification, variable descriptions, target variable, and summary.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, expert computational modeler, let's tackle this ultimatum game responder behavior with a model designed to improve parameter identifiability by separating base sensitivity from fairness-based additive effects.\n\nThinking step by step, we need a model that predicts the utility of accepting a proposal (`accept=1`) when the participant is the responder (`trial_role=1`). The utility should depend on the proposed share to the participant (`split_perc_self`) and how this share compares to the proportional fair share (`fair_perc_self`). The model should combine a linear effect of `split_perc_self` with fixed additive penalties or bonuses based on whether the offer is strictly unfair or strictly generous, respectively.\n\nFirst, we define the proportional fair share: `fair_perc_self = (token_self / (token_self + token_opp)) * 100`. This value represents what the participant *would* receive if the total combined earning was split in proportion to the tokens found by each player.\n\nNext, we formulate the utility `U`. The core idea is `U = base_utility + fairness_adjustment`.\nThe base utility is `alpha_sensitivity * split_perc_self`.\nThe fairness adjustment is negative (`-beta_unfair_penalty`) if `split_perc_self < fair_perc_self` and positive (`+gamma_generous_bonus`) if `split_perc_self > fair_perc_self`. If `split_perc_self == fair_perc_self`, the adjustment is zero.\n\nWe can implement this using the requested indicator functions:\n`I_unfair = max(0, -sign(split_perc_self - fair_perc_self))` which is 1 if `split_perc_self < fair_perc_self` and 0 otherwise.\n`I_generous = max(0, sign(split_perc_self - fair_perc_self))` which is 1 if `split_perc_self > fair_perc_self` and 0 otherwise.\n\nThe utility formula becomes:\n`U = alpha_sensitivity * split_perc_self - beta_unfair_penalty * I_unfair + gamma_generous_bonus * I_generous`\n\nSubstituting the indicator functions:\n`U = alpha_sensitivity * split_perc_self - beta_unfair_penalty * max(0, -sign(split_perc_self - fair_perc_self)) + gamma_generous_bonus * max(0, sign(split_perc_self - fair_perc_self))`\n\nThis formula represents the utility of accepting. A higher utility means a higher probability of acceptance according to the logistic function `P(accept) = 1 / (1 + exp(-U))`. Utility less than 0 corresponds to a probability less than 0.5.\n\nNow, let's define the variables according to the specification, including the learnable parameters and their bounds.\n\n<MODEL>\nU = alpha_sensitivity * split_perc_self - beta_unfair_penalty * max(0, -sign(split_perc_self - fair_perc_self)) + gamma_generous_bonus * max(0, sign(split_perc_self - fair_perc_self))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha_sensitivity\": {\n      \"description\": \"Parameter representing the base sensitivity to the percentage offered to the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfair_penalty\": {\n      \"description\": \"Parameter representing the fixed disutility added when the offer is strictly below the proportional fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_generous_bonus\": {\n      \"description\": \"Parameter representing the fixed utility bonus added when the offer is strictly above the proportional fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant as a percentage of the combined earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The proportional fair share for the participant as a percentage, calculated from token contributions\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\",\n      \"calculation\": \"(token_self / (token_self + token_opp)) * 100\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n         \"min\": 0\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n       \"range\": {\n         \"min\": 0\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model for responder decisions. Utility is based on a linear sensitivity to the offered percentage (split_perc_self) scaled by alpha_sensitivity. This base utility is additively adjusted: a fixed penalty beta_unfair_penalty is subtracted if the offer is strictly unfair (below the proportional fair share), and a fixed bonus gamma_generous_bonus is added if the offer is strictly generous (above the proportional fair share). Proportional fair share is determined by token contributions. Learnable parameters alpha_sensitivity, beta_unfair_penalty, and gamma_generous_bonus have non-negative finite bounds.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['alpha_sensitivity', 'beta_unfair_penalty', 'gamma_generous_bonus']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = alpha_sensitivity * split_perc_self - beta_unfair_penalty * max(0, -sign(split_perc_self - fair_perc_self)) + gamma_generous_bonus * max(0, sign(split_perc_self - fair_perc_self))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha_sensitivity\": {\n      \"description\": \"Parameter representing the base sensitivity to the percentage offered to the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfair_penalty\": {\n      \"description\": \"Parameter representing the fixed disutility added when the offer is strictly below the proportional fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_generous_bonus\": {\n      \"description\": \"Parameter representing the fixed utility bonus added when the offer is strictly above the proportional fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant as a percentage of the combined earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The proportional fair share for the participant as a percentage, calculated from token contributions\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, alpha_sensitivity=1, beta_unfair_penalty=1, gamma_generous_bonus=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\", 0)  # changed split_self to splitperc_self to match dataset\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate fair percentage\n        if token_self + token_opp == 0:\n            fair_perc_self = 50  #If both are 0, we assume that the split should be 50/50.\n        else:\n            fair_perc_self = (token_self / (token_self + token_opp)) * 100\n\n        # Calculate sign of difference\n        diff = split_perc_self - fair_perc_self\n        if diff > 0:\n            sign_diff = 1\n        elif diff < 0:\n            sign_diff = -1\n        else:\n            sign_diff = 0\n\n        # Calculate utility\n        unfair_penalty = max(0, -sign_diff)\n        generous_bonus = max(0, sign_diff)\n\n        U = alpha_sensitivity * split_perc_self - beta_unfair_penalty * unfair_penalty + gamma_generous_bonus * generous_bonus\n\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1746096891.696696
    }
  ],
  "learnable_parameters": {
    "alpha_sensitivity": {
      "description": "Parameter representing the base sensitivity to the percentage offered to the participant",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfair_penalty": {
      "description": "Parameter representing the fixed disutility added when the offer is strictly below the proportional fair share",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma_generous_bonus": {
      "description": "Parameter representing the fixed utility bonus added when the offer is strictly above the proportional fair share",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = alpha_sensitivity * split_perc_self - beta_unfair_penalty * max(0, -sign(split_perc_self - fair_perc_self)) + gamma_generous_bonus * max(0, sign(split_perc_self - fair_perc_self))",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the proposed offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "alpha_sensitivity": {
      "description": "Parameter representing the base sensitivity to the percentage offered to the participant",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_unfair_penalty": {
      "description": "Parameter representing the fixed disutility added when the offer is strictly below the proportional fair share",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "gamma_generous_bonus": {
      "description": "Parameter representing the fixed utility bonus added when the offer is strictly above the proportional fair share",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant as a percentage of the combined earning",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "fair_perc_self": {
      "description": "The proportional fair share for the participant as a percentage, calculated from token contributions",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A utility model for responder decisions. Utility is based on a linear sensitivity to the offered percentage (split_perc_self) scaled by alpha_sensitivity. This base utility is additively adjusted: a fixed penalty beta_unfair_penalty is subtracted if the offer is strictly unfair (below the proportional fair share), and a fixed bonus gamma_generous_bonus is added if the offer is strictly generous (above the proportional fair share). Proportional fair share is determined by token contributions. Learnable parameters alpha_sensitivity, beta_unfair_penalty, and gamma_generous_bonus have non-negative finite bounds.",
  "target_variable": "accept",
  "full_reasoning": "Okay, expert computational modeler, let's tackle this ultimatum game responder behavior with a model designed to improve parameter identifiability by separating base sensitivity from fairness-based additive effects.\n\nThinking step by step, we need a model that predicts the utility of accepting a proposal (`accept=1`) when the participant is the responder (`trial_role=1`). The utility should depend on the proposed share to the participant (`split_perc_self`) and how this share compares to the proportional fair share (`fair_perc_self`). The model should combine a linear effect of `split_perc_self` with fixed additive penalties or bonuses based on whether the offer is strictly unfair or strictly generous, respectively.\n\nFirst, we define the proportional fair share: `fair_perc_self = (token_self / (token_self + token_opp)) * 100`. This value represents what the participant *would* receive if the total combined earning was split in proportion to the tokens found by each player.\n\nNext, we formulate the utility `U`. The core idea is `U = base_utility + fairness_adjustment`.\nThe base utility is `alpha_sensitivity * split_perc_self`.\nThe fairness adjustment is negative (`-beta_unfair_penalty`) if `split_perc_self < fair_perc_self` and positive (`+gamma_generous_bonus`) if `split_perc_self > fair_perc_self`. If `split_perc_self == fair_perc_self`, the adjustment is zero.\n\nWe can implement this using the requested indicator functions:\n`I_unfair = max(0, -sign(split_perc_self - fair_perc_self))` which is 1 if `split_perc_self < fair_perc_self` and 0 otherwise.\n`I_generous = max(0, sign(split_perc_self - fair_perc_self))` which is 1 if `split_perc_self > fair_perc_self` and 0 otherwise.\n\nThe utility formula becomes:\n`U = alpha_sensitivity * split_perc_self - beta_unfair_penalty * I_unfair + gamma_generous_bonus * I_generous`\n\nSubstituting the indicator functions:\n`U = alpha_sensitivity * split_perc_self - beta_unfair_penalty * max(0, -sign(split_perc_self - fair_perc_self)) + gamma_generous_bonus * max(0, sign(split_perc_self - fair_perc_self))`\n\nThis formula represents the utility of accepting. A higher utility means a higher probability of acceptance according to the logistic function `P(accept) = 1 / (1 + exp(-U))`. Utility less than 0 corresponds to a probability less than 0.5.\n\nNow, let's define the variables according to the specification, including the learnable parameters and their bounds.\n\n<MODEL>\nU = alpha_sensitivity * split_perc_self - beta_unfair_penalty * max(0, -sign(split_perc_self - fair_perc_self)) + gamma_generous_bonus * max(0, sign(split_perc_self - fair_perc_self))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"alpha_sensitivity\": {\n      \"description\": \"Parameter representing the base sensitivity to the percentage offered to the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_unfair_penalty\": {\n      \"description\": \"Parameter representing the fixed disutility added when the offer is strictly below the proportional fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"gamma_generous_bonus\": {\n      \"description\": \"Parameter representing the fixed utility bonus added when the offer is strictly above the proportional fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant as a percentage of the combined earning\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The proportional fair share for the participant as a percentage, calculated from token contributions\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\",\n      \"calculation\": \"(token_self / (token_self + token_opp)) * 100\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n         \"min\": 0\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n       \"range\": {\n         \"min\": 0\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model for responder decisions. Utility is based on a linear sensitivity to the offered percentage (split_perc_self) scaled by alpha_sensitivity. This base utility is additively adjusted: a fixed penalty beta_unfair_penalty is subtracted if the offer is strictly unfair (below the proportional fair share), and a fixed bonus gamma_generous_bonus is added if the offer is strictly generous (above the proportional fair share). Proportional fair share is determined by token contributions. Learnable parameters alpha_sensitivity, beta_unfair_penalty, and gamma_generous_bonus have non-negative finite bounds.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = alpha_sensitivity * split_perc_self - beta_unfair_penalty * max(0, -sign(split_perc_self - fair_perc_self)) + gamma_generous_bonus * max(0, sign(split_perc_self - fair_perc_self))\nSummary: A utility model for responder decisions. Utility is based on a linear sensitivity to the offered percentage (split_perc_self) scaled by alpha_sensitivity. This base utility is additively adjusted: a fixed penalty beta_unfair_penalty is subtracted if the offer is strictly unfair (below the proportional fair share), and a fixed bonus gamma_generous_bonus is added if the offer is strictly generous (above the proportional fair share). Proportional fair share is determined by token contributions. Learnable parameters alpha_sensitivity, beta_unfair_penalty, and gamma_generous_bonus have non-negative finite bounds.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, alpha_sensitivity=1, beta_unfair_penalty=1, gamma_generous_bonus=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\", 0)  # changed split_self to splitperc_self to match dataset\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate fair percentage\n        if token_self + token_opp == 0:\n            fair_perc_self = 50  #If both are 0, we assume that the split should be 50/50.\n        else:\n            fair_perc_self = (token_self / (token_self + token_opp)) * 100\n\n        # Calculate sign of difference\n        diff = split_perc_self - fair_perc_self\n        if diff > 0:\n            sign_diff = 1\n        elif diff < 0:\n            sign_diff = -1\n        else:\n            sign_diff = 0\n\n        # Calculate utility\n        unfair_penalty = max(0, -sign_diff)\n        generous_bonus = max(0, sign_diff)\n\n        U = alpha_sensitivity * split_perc_self - beta_unfair_penalty * unfair_penalty + gamma_generous_bonus * generous_bonus\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6678876678876678,
  "group_accuracies": {
    "Control": 0.7112403100775194,
    "Cocaine": 0.6290509259259259
  },
  "group_parameter_averages": {
    "Control": {
      "alpha_sensitivity": 4.159355502613549,
      "beta_unfair_penalty": 7.851617357763215,
      "gamma_generous_bonus": 5.296334996395362
    },
    "Cocaine": {
      "alpha_sensitivity": 2.8081525551201265,
      "beta_unfair_penalty": 7.1658562462829405,
      "gamma_generous_bonus": 5.206287470246139
    }
  },
  "fitting_results": [
    {
      "alpha_sensitivity": 4.243164155704408,
      "beta_unfair_penalty": 12.094521657604709,
      "gamma_generous_bonus": 9.433298445820387,
      "success": true,
      "log_likelihood": -759.8510762947006,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.1370865786125077,
      "beta_unfair_penalty": 4.200259200663082,
      "gamma_generous_bonus": 7.136258813131732,
      "success": true,
      "log_likelihood": -17.71881290568782,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 3.4644112463239276,
      "beta_unfair_penalty": 9.192568839775063,
      "gamma_generous_bonus": 6.459771018488002,
      "success": true,
      "log_likelihood": -391.18529568417154,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.17824667555109652,
      "beta_unfair_penalty": 5.993115057581474,
      "gamma_generous_bonus": 1.79013475514412,
      "success": true,
      "log_likelihood": -15.121972898002939,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 7.578483474790865,
      "beta_unfair_penalty": 7.696344757733673,
      "gamma_generous_bonus": 3.8212727608995376,
      "success": true,
      "log_likelihood": -460.5170185972094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 8.793393244150803,
      "beta_unfair_penalty": 12.336217793585547,
      "gamma_generous_bonus": 2.6388673835456142,
      "success": true,
      "log_likelihood": -299.33606208692606,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 9.581463890061032,
      "beta_unfair_penalty": 16.481071634384822,
      "gamma_generous_bonus": 3.4212273965720907,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.21436847337652937,
      "beta_unfair_penalty": 5.211983615946864,
      "gamma_generous_bonus": 0.5578907916181692,
      "success": true,
      "log_likelihood": -13.947559309485127,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 5.481853817518932,
      "beta_unfair_penalty": 0.10125825608457095,
      "gamma_generous_bonus": 1.3142721404519864,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 9.4904527093009,
      "beta_unfair_penalty": 16.633155885300155,
      "gamma_generous_bonus": 4.431775627887326,
      "success": true,
      "log_likelihood": -506.56872045729034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 8.516975163980264,
      "beta_unfair_penalty": 5.782898114671669,
      "gamma_generous_bonus": 0.708694967041591,
      "success": true,
      "log_likelihood": -460.5170185972094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 5.4357277716693755,
      "beta_unfair_penalty": 3.108840196442082,
      "gamma_generous_bonus": 6.489065611142502,
      "success": true,
      "log_likelihood": -736.8272297576949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.17822869313245043,
      "beta_unfair_penalty": 5.992417735440484,
      "gamma_generous_bonus": 9.725020512858864,
      "success": true,
      "log_likelihood": -15.121816704619661,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 8.126857574362324,
      "beta_unfair_penalty": 8.568283728530586,
      "gamma_generous_bonus": 5.84525493832762,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 10.0,
      "beta_unfair_penalty": 15.689847289146547,
      "gamma_generous_bonus": 4.469649373397245,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 9.173009953593938,
      "beta_unfair_penalty": 18.6568953443457,
      "gamma_generous_bonus": 7.153238156129451,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 10.0,
      "beta_unfair_penalty": 0.0,
      "gamma_generous_bonus": 7.983063367285143,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 2.735404228558979,
      "beta_unfair_penalty": 0.7357380897292143,
      "gamma_generous_bonus": 5.099906625263932,
      "success": true,
      "log_likelihood": -115.04777722812332,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 4.676947510724676,
      "beta_unfair_penalty": 12.934183276398679,
      "gamma_generous_bonus": 1.9776548922670178,
      "success": true,
      "log_likelihood": -92.10336374893224,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 3.9741501088972897,
      "beta_unfair_penalty": 1.6696661218896236,
      "gamma_generous_bonus": 3.725289440373886,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.1291429526864885,
      "beta_unfair_penalty": 3.643219736956244,
      "gamma_generous_bonus": 7.641018580017048,
      "success": true,
      "log_likelihood": -18.23634558733471,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 3.5765952361677344,
      "beta_unfair_penalty": 13.35169645531047,
      "gamma_generous_bonus": 5.621123685179882,
      "success": true,
      "log_likelihood": -111.99428484563587,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.35700068751399777,
      "beta_unfair_penalty": 12.317451545294462,
      "gamma_generous_bonus": 9.091527509146447,
      "success": true,
      "log_likelihood": -9.433353511367818,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.20039668569041622,
      "beta_unfair_penalty": 5.866133230286717,
      "gamma_generous_bonus": 6.869759156174984,
      "success": true,
      "log_likelihood": -15.20749046757316,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.0796886461071406,
      "beta_unfair_penalty": 2.5265358128706112,
      "gamma_generous_bonus": 8.12847713644038,
      "success": true,
      "log_likelihood": -20.3550555427603,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.1506715491758342,
      "beta_unfair_penalty": 4.081144049992115,
      "gamma_generous_bonus": 1.8805085754623763,
      "success": true,
      "log_likelihood": -17.207532920569186,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.574454086447433,
      "beta_unfair_penalty": 16.28796092299168,
      "gamma_generous_bonus": 4.942668449277367,
      "success": true,
      "log_likelihood": -6.787423498581381,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.1668853138270823,
      "beta_unfair_penalty": 6.751765921272102,
      "gamma_generous_bonus": 2.653629469442032,
      "success": true,
      "log_likelihood": -11.843012170759833,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 7.846260518997397,
      "beta_unfair_penalty": 7.090847597826255,
      "gamma_generous_bonus": 5.68899039419893,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.09899332074784457,
      "beta_unfair_penalty": 1.4967378653486896,
      "gamma_generous_bonus": 7.325804627600734,
      "success": true,
      "log_likelihood": -15.985091835609957,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 8.125014494410802,
      "beta_unfair_penalty": 17.885428971534818,
      "gamma_generous_bonus": 8.141776687959467,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 9.398039951587933,
      "beta_unfair_penalty": 3.195179139626836,
      "gamma_generous_bonus": 7.787417751555267,
      "success": true,
      "log_likelihood": -759.8530806877352,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 9.005563547973054,
      "beta_unfair_penalty": 12.043368644314548,
      "gamma_generous_bonus": 0.3293655326742728,
      "success": true,
      "log_likelihood": -483.5428695272498,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.2159452622552156,
      "beta_unfair_penalty": 7.4014412869419495,
      "gamma_generous_bonus": 4.246311234096015,
      "success": true,
      "log_likelihood": -13.367244235136921,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 7.795605108892922,
      "beta_unfair_penalty": 13.615726687612803,
      "gamma_generous_bonus": 2.9413819921824214,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 5.278609997651693,
      "beta_unfair_penalty": 18.899770488139108,
      "gamma_generous_bonus": 5.0057525282024375,
      "success": true,
      "log_likelihood": -299.3360021354818,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 4.533643826424033,
      "beta_unfair_penalty": 10.76581543632567,
      "gamma_generous_bonus": 8.010796833117961,
      "success": true,
      "log_likelihood": -253.28433358161095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.10979338948027591,
      "beta_unfair_penalty": 3.4015818295311715,
      "gamma_generous_bonus": 9.523950112379511,
      "success": true,
      "log_likelihood": -18.9471890187966,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.10483131162098863,
      "beta_unfair_penalty": 2.3397064911077523,
      "gamma_generous_bonus": 5.954579591606841,
      "success": true,
      "log_likelihood": -18.467692919773956,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 8.798775175290064,
      "beta_unfair_penalty": 4.137689406102116,
      "gamma_generous_bonus": 3.4903449622438276,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.12710243416708686,
      "beta_unfair_penalty": 3.2622738251497907,
      "gamma_generous_bonus": 6.375190493433994,
      "success": true,
      "log_likelihood": -18.094955896748218,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.07346438900571153,
      "beta_unfair_penalty": 4.178804444027777,
      "gamma_generous_bonus": 5.002960847508987,
      "success": true,
      "log_likelihood": -11.637640604418106,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.1255834559511455,
      "beta_unfair_penalty": 0.0,
      "gamma_generous_bonus": 6.9074616774531385,
      "success": true,
      "log_likelihood": -5.488983314141616,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 5.144232485276946,
      "beta_unfair_penalty": 9.065516319508069,
      "gamma_generous_bonus": 3.1122037979595785,
      "success": true,
      "log_likelihood": -368.4136148770475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.23416141335901514,
      "beta_unfair_penalty": 6.181050333755857,
      "gamma_generous_bonus": 2.0385408975906,
      "success": true,
      "log_likelihood": -13.777189430257133,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 3.856104808145396,
      "beta_unfair_penalty": 10.756543249217653,
      "gamma_generous_bonus": 9.801083870648094,
      "success": true,
      "log_likelihood": -230.23339488679989,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.31581491184186294,
      "beta_unfair_penalty": 9.220792486478485,
      "gamma_generous_bonus": 6.866042861893817,
      "success": true,
      "log_likelihood": -11.452839468739759,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 2.6500033316309777,
      "beta_unfair_penalty": 2.8259724376036854,
      "gamma_generous_bonus": 9.011467451116816,
      "success": true,
      "log_likelihood": -505.3067103658149,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.06879450911597738,
      "beta_unfair_penalty": 2.642688276564185,
      "gamma_generous_bonus": 8.000128800983987,
      "success": true,
      "log_likelihood": -19.65465112060124,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 8.010679307363466,
      "beta_unfair_penalty": 19.976378912171672,
      "gamma_generous_bonus": 6.092701259344816,
      "success": true,
      "log_likelihood": -391.43946580708797,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 7.642162316304893,
      "beta_unfair_penalty": 14.426039362934455,
      "gamma_generous_bonus": 2.9402963137196014,
      "success": true,
      "log_likelihood": -253.28436022684522,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.024206944347071695,
      "beta_unfair_penalty": 2.970660285732079,
      "gamma_generous_bonus": 0.0,
      "success": true,
      "log_likelihood": -12.143725287943626,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.11586833172567751,
      "beta_unfair_penalty": 3.2671272559552094,
      "gamma_generous_bonus": 9.801197377319777,
      "success": true,
      "log_likelihood": -18.848152954348922,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.05673579668367178,
      "beta_unfair_penalty": 1.3287632157370008,
      "gamma_generous_bonus": 0.0,
      "success": true,
      "log_likelihood": -21.966421715149526,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.01845701798003441,
      "beta_unfair_penalty": 1.313078710649532,
      "gamma_generous_bonus": 6.46588622378228,
      "success": true,
      "log_likelihood": -21.002821865358342,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.1368874691892025,
      "beta_unfair_penalty": 5.285392826127396,
      "gamma_generous_bonus": 7.616941853001591,
      "success": true,
      "log_likelihood": -14.724157032238109,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.20167282234910544,
      "beta_unfair_penalty": 7.94180586717765,
      "gamma_generous_bonus": 2.1976519676009407,
      "success": true,
      "log_likelihood": -10.92599670054655,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 5.290133748054748,
      "beta_unfair_penalty": 6.401896894050559,
      "gamma_generous_bonus": 4.418585461306672,
      "success": true,
      "log_likelihood": -92.1034037165618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.021223319416106775,
      "beta_unfair_penalty": 3.3220106152799342,
      "gamma_generous_bonus": 0.0,
      "success": true,
      "log_likelihood": -9.806186908201195,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 3.8112385312536325,
      "beta_unfair_penalty": 6.662041790453392,
      "gamma_generous_bonus": 2.2069230360991368,
      "success": true,
      "log_likelihood": -161.18051690668113,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.11407962221580463,
      "beta_unfair_penalty": 2.905429639622529,
      "gamma_generous_bonus": 5.951601286116917,
      "success": true,
      "log_likelihood": -18.69724108459036,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 2.7214116655002996,
      "beta_unfair_penalty": 5.332011159766847,
      "gamma_generous_bonus": 9.110919151266657,
      "success": true,
      "log_likelihood": -410.20431611351165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 3.977193110622117,
      "beta_unfair_penalty": 3.6584451392567674,
      "gamma_generous_bonus": 7.15005033838961,
      "success": true,
      "log_likelihood": -759.8530740264046,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 4.5137889575985195,
      "beta_unfair_penalty": 8.554951395892449,
      "gamma_generous_bonus": 3.804198696229395,
      "success": true,
      "log_likelihood": -460.5170141563222,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 9.896499488873225,
      "beta_unfair_penalty": 5.044295788406679,
      "gamma_generous_bonus": 8.486767003669653,
      "success": true,
      "log_likelihood": -644.7238260375331,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.3313368881799981,
      "beta_unfair_penalty": 9.384103152282497,
      "gamma_generous_bonus": 5.299753940728562,
      "success": true,
      "log_likelihood": -11.051266670817634,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.1787819323191291,
      "beta_unfair_penalty": 1.7901914664785046,
      "gamma_generous_bonus": 7.535235496080847,
      "success": true,
      "log_likelihood": -7.234980783425995,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.12842124931193105,
      "beta_unfair_penalty": 1.4911122021228105,
      "gamma_generous_bonus": 6.862911947193658,
      "success": true,
      "log_likelihood": -11.488357433875068,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 3.4678206905950635,
      "beta_unfair_penalty": 6.65453588857019,
      "gamma_generous_bonus": 3.4322756277999336,
      "success": true,
      "log_likelihood": -368.39342583330045,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.08232817524332355,
      "beta_unfair_penalty": 0.0,
      "gamma_generous_bonus": 1.4741923463389295,
      "success": true,
      "log_likelihood": -10.497775724114524,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 9.879146254885935,
      "beta_unfair_penalty": 6.015355061887679,
      "gamma_generous_bonus": 9.312515287873014,
      "success": true,
      "log_likelihood": -736.8272297576949,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 3.6648084914587664,
      "beta_unfair_penalty": 15.499229576723344,
      "gamma_generous_bonus": 6.608992609869855,
      "success": true,
      "log_likelihood": -707.7431623893224,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1388888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.17672421356091747,
      "beta_unfair_penalty": 5.179994477630225,
      "gamma_generous_bonus": 7.2338039607500715,
      "success": true,
      "log_likelihood": -16.14845167784524,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 4.938129212759408,
      "beta_unfair_penalty": 15.05757257648267,
      "gamma_generous_bonus": 7.007540248013164,
      "success": true,
      "log_likelihood": -184.20678079154877,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 4.52403026273092,
      "beta_unfair_penalty": 16.339971898595664,
      "gamma_generous_bonus": 4.911243158338746,
      "success": true,
      "log_likelihood": -414.4597024551512,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 6.773955316631472,
      "beta_unfair_penalty": 4.163523397361089,
      "gamma_generous_bonus": 7.618951925384611,
      "success": true,
      "log_likelihood": -253.28436022684528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 4.612320838633178,
      "beta_unfair_penalty": 12.033303998681301,
      "gamma_generous_bonus": 1.4691278182702416,
      "success": true,
      "log_likelihood": -46.051701856480875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 8.936339455374052,
      "beta_unfair_penalty": 17.9250339767278,
      "gamma_generous_bonus": 9.09973466253555,
      "success": true,
      "log_likelihood": -782.8789316177758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.05555555555555555,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 2.0291319251792634,
      "beta_unfair_penalty": 5.31227358396176,
      "gamma_generous_bonus": 3.533365773537348,
      "success": true,
      "log_likelihood": -322.3618873088128,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.01555192596746388,
      "beta_unfair_penalty": 3.881218557309475,
      "gamma_generous_bonus": 0.0,
      "success": true,
      "log_likelihood": -6.979704325469408,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.0737036315349999,
      "beta_unfair_penalty": 2.2138665977091416,
      "gamma_generous_bonus": 6.338311034997164,
      "success": true,
      "log_likelihood": -20.80713705199231,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 8.112536827679548,
      "beta_unfair_penalty": 19.797052201918067,
      "gamma_generous_bonus": 2.744711988488037,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 4.268576327244115,
      "beta_unfair_penalty": 18.940113383738893,
      "gamma_generous_bonus": 0.6863503276342731,
      "success": true,
      "log_likelihood": -735.6372492636195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.5082497041560462,
      "beta_unfair_penalty": 15.253215344143383,
      "gamma_generous_bonus": 5.935427475093984,
      "success": true,
      "log_likelihood": -7.671941454161521,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.03145039474883797,
      "beta_unfair_penalty": 0.6280999675251269,
      "gamma_generous_bonus": 8.458565982137136,
      "success": true,
      "log_likelihood": -22.587287373434574,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.02709483742839882,
      "beta_unfair_penalty": 4.225443888912947,
      "gamma_generous_bonus": 7.655689802320835,
      "success": true,
      "log_likelihood": -5.492984297032563,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 2.7749544221058144,
      "beta_unfair_penalty": 1.7669410705670696,
      "gamma_generous_bonus": 3.3844188524757524,
      "success": true,
      "log_likelihood": -253.18299813648076,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.008684603745547866,
      "beta_unfair_penalty": 1.7126353078323353,
      "gamma_generous_bonus": 0.0,
      "success": true,
      "log_likelihood": -18.12329888963548,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 0.11234498899190581,
      "beta_unfair_penalty": 0.0,
      "gamma_generous_bonus": 2.6425500464695943,
      "success": true,
      "log_likelihood": -6.6758180838476004,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 3.241793474226282,
      "beta_unfair_penalty": 9.643661036644778,
      "gamma_generous_bonus": 5.80918686705561,
      "success": true,
      "log_likelihood": -435.0106896942712,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "alpha_sensitivity": 7.071756692226007,
      "beta_unfair_penalty": 9.969759245432307,
      "gamma_generous_bonus": 9.773753744387792,
      "success": true,
      "log_likelihood": -253.28436022684528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "alpha_sensitivity": {
        "r": 0.43172137118382303,
        "p": 7.30000519638513e-06
      },
      "beta_unfair_penalty": {
        "r": 0.16092248157652855,
        "p": 0.10972384296204889
      },
      "gamma_generous_bonus": {
        "r": 0.05524913476999196,
        "p": 0.5850917547088301
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 369.24577395472943,
  "bic_Control": 296.9884295149973,
  "bic_Cocaine": 433.97631168198944,
  "bic_results": {
    "average_bic": 369.24577395472943,
    "individual_bics": [
      1530.4527094047696,
      46.188182626743966,
      793.1211481837114,
      40.99450261137421,
      931.7845940097872,
      609.4226809892205,
      10.75055680816833,
      38.645675434338585,
      10.75055680816833,
      1023.887997729949,
      931.7845940097872,
      1484.4050163307581,
      40.99419022460765,
      10.75055680816833,
      10.75055680816833,
      10.75055680816833,
      10.75055680816833,
      240.84611127161497,
      194.9572843132328,
      10.75055680816833,
      47.22324799003775,
      234.73912650664008,
      29.617263838103966,
      41.16553775051465,
      51.460667900888936,
      45.1656226565067,
      24.325403812531093,
      34.436581156887996,
      194.9573642484919,
      42.72074048658824,
      10.75055680816833,
      1530.4567181908387,
      977.836295869868,
      37.48504528564217,
      10.75055680816833,
      609.4225610863319,
      517.3192239785902,
      48.644934852961526,
      47.685942654916246,
      148.90566238841103,
      46.94046860886476,
      34.025838024204546,
      21.72852344365156,
      747.5777865694633,
      38.3049356758826,
      471.2173465889681,
      33.65623575284785,
      1021.3639775469982,
      50.059859056570815,
      793.6294884295443,
      517.3192772690588,
      35.03800739125558,
      48.44686272406618,
      54.683400245667386,
      52.75620054608501,
      40.19887087984455,
      32.60255021646143,
      194.95736424849193,
      30.36293063177072,
      333.1115906287306,
      48.145038984549046,
      831.1591890423916,
      1530.4567048681774,
      931.7845851280127,
      1300.1982088904344,
      32.8530901570036,
      25.22051838222032,
      33.72727168311847,
      747.5374084819692,
      31.746108263597378,
      1484.4050163307581,
      1426.236881594013,
      43.047460171058816,
      379.16411839846586,
      839.6699617256708,
      517.319277269059,
      102.85396052833008,
      1576.50842005092,
      655.474331432994,
      24.709965466307146,
      52.364830919352954,
      148.90566238841095,
      1482.0250553426074,
      26.094439723691373,
      55.92513156223748,
      21.736525409433455,
      517.1165530883299,
      46.997154594639284,
      24.10219298306353,
      880.7719362039107,
      517.319277269059
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        1530.4527094047696,
        46.188182626743966,
        793.1211481837114,
        40.99450261137421,
        931.7845940097872,
        609.4226809892205,
        10.75055680816833,
        38.645675434338585,
        10.75055680816833,
        1023.887997729949,
        931.7845940097872,
        1484.4050163307581,
        40.99419022460765,
        10.75055680816833,
        10.75055680816833,
        10.75055680816833,
        10.75055680816833,
        240.84611127161497,
        194.9572843132328,
        10.75055680816833,
        47.22324799003775,
        234.73912650664008,
        29.617263838103966,
        41.16553775051465,
        51.460667900888936,
        45.1656226565067,
        24.325403812531093,
        34.436581156887996,
        194.9573642484919,
        42.72074048658824,
        10.75055680816833,
        1530.4567181908387,
        977.836295869868,
        37.48504528564217,
        10.75055680816833,
        609.4225610863319,
        517.3192239785902,
        48.644934852961526,
        47.685942654916246,
        148.90566238841103,
        46.94046860886476,
        34.025838024204546,
        21.72852344365156
      ],
      "Cocaine": [
        747.5777865694633,
        38.3049356758826,
        471.2173465889681,
        33.65623575284785,
        1021.3639775469982,
        50.059859056570815,
        793.6294884295443,
        517.3192772690588,
        35.03800739125558,
        48.44686272406618,
        54.683400245667386,
        52.75620054608501,
        40.19887087984455,
        32.60255021646143,
        194.95736424849193,
        30.36293063177072,
        333.1115906287306,
        48.145038984549046,
        831.1591890423916,
        1530.4567048681774,
        931.7845851280127,
        1300.1982088904344,
        32.8530901570036,
        25.22051838222032,
        33.72727168311847,
        747.5374084819692,
        31.746108263597378,
        1484.4050163307581,
        1426.236881594013,
        43.047460171058816,
        379.16411839846586,
        839.6699617256708,
        517.319277269059,
        102.85396052833008,
        1576.50842005092,
        655.474331432994,
        24.709965466307146,
        52.364830919352954,
        148.90566238841095,
        1482.0250553426074,
        26.094439723691373,
        55.92513156223748,
        21.736525409433455,
        517.1165530883299,
        46.997154594639284,
        24.10219298306353,
        880.7719362039107,
        517.319277269059
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- alpha_sensitivity: r = 0.432\n- beta_unfair_penalty: r = 0.161\n- gamma_generous_bonus: r = 0.055",
  "previous_models": [
    "Specification: U = alpha_sensitivity * split_perc_self - beta_unfair_penalty * max(0, -sign(split_perc_self - fair_perc_self)) + gamma_generous_bonus * max(0, sign(split_perc_self - fair_perc_self))\nSummary: A utility model for responder decisions. Utility is based on a linear sensitivity to the offered percentage (split_perc_self) scaled by alpha_sensitivity. This base utility is additively adjusted: a fixed penalty beta_unfair_penalty is subtracted if the offer is strictly unfair (below the proportional fair share), and a fixed bonus gamma_generous_bonus is added if the offer is strictly generous (above the proportional fair share). Proportional fair share is determined by token contributions. Learnable parameters alpha_sensitivity, beta_unfair_penalty, and gamma_generous_bonus have non-negative finite bounds.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 369.24577395472943\nOverall Accuracy: 0.6679\nGroup Accuracies:\n- Control: 0.7112\n- Cocaine: 0.6291\n\nParameter Recovery:\n- alpha_sensitivity: r = 0.432\n- beta_unfair_penalty: r = 0.161\n- gamma_generous_bonus: r = 0.055"
  ]
}