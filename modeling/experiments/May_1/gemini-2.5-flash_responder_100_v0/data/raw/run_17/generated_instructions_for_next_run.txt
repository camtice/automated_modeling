Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable "token_self". The other variable, "token_opp", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.

Again, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.

Note that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same "fairness".

Below is the description of each variable in the dataset, which will be followed by information about the data type of the variable:

trial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]
trial_role = the role of the participant [1 = responder, 2 = proposer]
token_opp = number of tokens found by the opponent
token_self = number of tokens found by the participant
combined_earning = amount of money earned in total (note that each token found is £3)
split_opp = the proposed share of the opponent (in £)
split_self = the proposed share for the participant (in £)
splitperc_opp = same but in %
split_perc_self = same but in %
accept = whether the participant responded accept (1) or reject (0))
accepted_amount = if accepted, what is the amount gain (in £)
accepted_perc = same as above but in %
proposed_perc = when participant is the proposer, what is the % proposed to the opponent
proposed_amount = when participant is the proposer, what is the amount proposed to the opponent

Desired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).

The model should:
1. Predict only responder behavior (should target "accept = whether the participant responded accept (1) or reject (0)")
2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.
3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).
4. Predict utility, where less than 0 is less than 50% likely.

For any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).

Then, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.
For example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.

Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.

```json
{
  "variables": {
    "variable_name": {
      "description": "Clear description",
      "range": {
        "min": value,
        "max": value,
        "inclusive_min": boolean,
        "inclusive_max": boolean
      },
      "distribution": {
        "type": "distribution type",
        "parameters": {}
      },
      "learnable": boolean,
      "source": "learnable/data/calculated"
    }
  }
}
```
</VARIABLES>

Example #1:
<EXAMPLE>
(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta_param + epsilon_param * E + eta_param * N\n</MODEL>\n\n<VARIABLES>\n{\n  "variables": {\n    "U_i": {\n      "description": "Utility of choosing action i",\n      "range": {\n        "min": "-inf",\n        "max": "inf"\n      },\n      "learnable": false,\n      "source": "calculated"\n    },\n    "beta_param": {\n      "description": "Base tendency parameter (inherent preference)",\n      "range": {\n        "min": 0,\n        "max": 1\n      },\
      "learnable": true,\n      "source": "learnable"\n    },\n    "epsilon_param": {\n      "description": "Environmental sensitivity parameter",\n      "range": {\n        "min": "-inf",\n        "max": "inf"\n      },\
      "learnable": true,\n      "source": "learnable"\n    },\
    "E": {\n      "description": "Environmental cue value",\n      "range": {\n        "min": "-inf",\n        "max": "inf"\n      },\n      "learnable": false,\n      "source": "data"\n    },\n    "eta_param": {\n      "description": "Noise parameter",\n      "range": {\n        "min": 0,\n        "max": 1,\n        "exclusive_max": true\n      },\n      "learnable": true,\n      "source": "learnable"\n    },\n    "N": {\n      "description": "Random noise drawn from normal distribution N(0,1)",\n      "distribution": {\n        "type": "normal",\n        "mean": 0,\n        "std": 1\n      },\n      "learnable": false,\n      "source": "calculated"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>

Please be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.

The parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.

Model Type:
Your model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.

Instructions: Previous models designed to capture responder behavior have consistently struggled with parameter recovery, especially for parameters related to fairness perception. Run 16's attempt with a piecewise linear model based on deviation from fair share (`sensitivity_generous`, `penalty_slope_unfair`) resulted in extremely poor recovery (r=0.052 and r=0.049), making the model unusable. Simpler models, like one combining linear sensitivity with a fixed step penalty at the fair share threshold (Run 1), showed better recovery (r=0.620, r=0.513) and overall performance metrics, although still not meeting the 0.7 threshold for all parameters.

This suggests that the way fairness is incorporated is crucial for identifiability. Models that introduce sharp discontinuities or distinct slopes based *only* on the fair vs. unfair boundary might lead to parameter collinearity or lack of distinct influence across the range of offers.

For this run (Run 18), let's try a structural approach that combines a basic sensitivity to the offered amount with a penalty that is *proportional* to the *magnitude* of unfairness. This differs from previous attempts that used fixed penalties or piecewise slopes based on the fairness boundary alone.

Consider a model where the utility of accepting an offer (`U`) is calculated as:
`U = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, fair_perc_self - split_perc_self)`

This model has two learnable parameters:
1.  `sensitivity_offer`: Represents a base sensitivity to the percentage amount offered to the participant (`split_perc_self`). A higher value means greater utility for higher offers, regardless of fairness.
2.  `penalty_magnitude_unfairness`: Represents a multiplier for the penalty applied when the offer is strictly unfair (`split_perc_self < fair_perc_self`). The penalty term `max(0, fair_perc_self - split_perc_self)` captures the *degree* of unfairness (how much below fair the offer is). A positive value for this parameter imposes a disutility that increases linearly with the magnitude of the unfair deviation. If the offer is fair or generous, this penalty term is zero.

Both learnable parameters should be non-negative.

**Guidance for the Next Model (Run 18):**

Design a computational model implementing this specific structure. The goal is for `sensitivity_offer` and `penalty_magnitude_unfairness` to have sufficiently distinct effects on utility across different offers (especially unfair vs. fair/generous ones) to improve parameter recovery.

*   **Prioritize Parameter Recovery:** Design the model exactly following the specified structure to maximize the chances of `sensitivity_offer` and `penalty_magnitude_unfairness` being distinguishable and recoverable (>= 0.7).
*   **Parameter Constraints:** Define clear, generous, finite, non-negative bounds for `sensitivity_offer` and `penalty_magnitude_unfairness`. Suggest bounds [0, 20] for `sensitivity_offer` and [0, 10] for `penalty_magnitude_unfairness`. Both parameters must be non-negative.
*   **Model Specification:** Provide the mathematical formula between <MODEL> tags using the suggested structure: `U = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, fair_perc_self - split_perc_self)`. Ensure the formula includes the necessary variables (`split_perc_self`, `fair_perc_self`) and parameters. Remember `fair_perc_self` needs to be calculated as `(token_self / (token_self + token_opp)) * 100`.
*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags, including the specified bounds and learnable status for `sensitivity_offer` and `penalty_magnitude_unfairness`. Include descriptions for all variables used in the <MODEL> formula (`U`, `split_perc_self`, `fair_perc_self`, `token_self`, `token_opp`, `sensitivity_offer`, `penalty_magnitude_unfairness`).
*   **Target Variable:** Specify "accept" as the target variable using <target_variable> tags.
*   **Summary:** Provide a concise summary between <SUMMARY> tags.

Think creatively about how this model captures preferences by valuing the offer itself (`split_perc_self`) while adding a specific, scaled penalty only for the degree of unfairness (`max(0, fair_perc_self - split_perc_self)`). This is different from just having different slopes above/below fair or fixed penalties. Aim for a structure where the parameters have distinct roles influencing the likelihood of acceptance across the full range of offers.

Available Data Variables:
- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.
Remember `fair_perc_self` can be calculated as `(token_self / (token_self + token_opp)) * 100`. Use variables relevant for responder trials (`trial_role == 1`).

For run 18 of 100, please think through this step by step, focusing intently on designing a model structure that maximizes parameter identifiability given the data and the history of failed recovery attempts, specifically implementing the described model combining base linear sensitivity with a penalty proportional to unfairness magnitude. Then provide your model specification, variable descriptions, target variable, and summary.