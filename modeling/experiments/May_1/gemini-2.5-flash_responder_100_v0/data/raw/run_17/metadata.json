{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Based on the results of the previous run and the instructions used for that run, generate improved instructions for the *next* run. Aim to guide the main modeling LLM towards better performance (e.g., lower BIC, better parameter recovery, and higher accuracy). Please keep in mind that if any of the learnable parameters have a parameter recovery value of less than ~0.7, then the model is unusable. You will first be given the total context for the previous run, then reminded specifically of the instructions used for that run that you should update.\n\nTask Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0))\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n```json\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n```\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\\nLet me think through this step by step...\\n[your reasoning here]\\n\\n<MODEL>\\nU_i = beta_param + epsilon_param * E + eta_param * N\\n</MODEL>\\n\\n<VARIABLES>\\n{\\n  \"variables\": {\\n    \"U_i\": {\\n      \"description\": \"Utility of choosing action i\",\\n      \"range\": {\\n        \"min\": \"-inf\",\\n        \"max\": \"inf\"\\n      },\\n      \"learnable\": false,\\n      \"source\": \"calculated\"\\n    },\\n    \"beta_param\": {\\n      \"description\": \"Base tendency parameter (inherent preference)\",\\n      \"range\": {\\n        \"min\": 0,\\n        \"max\": 1\\n      },\\n      \"learnable\": true,\\n      \"source\": \"learnable\"\\n    },\\n    \"epsilon_param\": {\\n      \"description\": \"Environmental sensitivity parameter\",\\n      \"range\": {\\n        \"min\": \"-inf\",\\n        \"max\": \"inf\"\\n      },\\\n      \"learnable\": true,\\n      \"source\": \"learnable\"\\n    },\\n    \"E\": {\\n      \"description\": \"Environmental cue value\",\\n      \"range\": {\\n        \"min\": \"-inf\",\\n        \"max\": \"inf\"\\n      },\\n      \"learnable\": false,\\n      \"source\": \"data\"\\n    },\\n    \"eta_param\": {\\n      \"description\": \"Noise parameter\",\\n      \"range\": {\\n        \"min\": 0,\\n        \"max\": 1,\\n        \"exclusive_max\": true\\n      },\\n      \"learnable\": true,\\n      \"source\": \"learnable\"\\n    },\\n    \"N\": {\\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\\n      \"distribution\": {\\n        \"type\": \"normal\",\\n        \"mean\": 0,\\n        \"std\": 1\\n      },\\n      \"learnable\": false,\\n      \"source\": \"calculated\"\\n    }\\n  }\\n}\\n</VARIABLES>\\n<SUMMARY>\\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\\n</SUMMARY>\\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: The previous models designed to capture responder behavior, whether using piecewise slopes on the offered amount or combining base sensitivity with fixed additive penalties/bonuses based on the proportional fair share, have consistently failed to achieve the required parameter recovery of >= 0.7 for *all* learnable parameters. The most recent attempt (Run 15), which used a base sensitivity to `split_perc_self` plus additive terms for unfair/generous offers (`alpha_sensitivity`, `beta_unfair_penalty`, `gamma_generous_bonus`), resulted in very poor recovery across all three parameters (0.432, 0.161, 0.055). This suggests that separating effects by simply adding constants above/below the fair threshold is not sufficient for identifiability.\n\nFor this run (Run 16), let's explore a different structural approach that focuses on the *deviation* from the proportional fair share (`fair_perc_self`) rather than the offered percentage (`split_perc_self`) itself as the primary input, and attempts to capture fairness sensitivity via a piecewise linear relationship *with respect to this deviation*. This approach uses only two learnable parameters, reducing model complexity compared to the last attempt, and anchors utility at 0 when the offer is exactly fair.\n\nConsider a model where the utility of accepting an offer (`U`) is a piecewise linear function of the difference between the offered percentage and the fair percentage (`split_perc_self - fair_perc_self`).\n\nThe model should have two learnable parameters:\n1.  `sensitivity_generous`: Represents the slope of the utility function when the offer is fair or generous (`split_perc_self >= fair_perc_self`). This parameter scales the positive deviation from the fair share. A higher value means greater positive utility for generous offers.\n2.  `penalty_slope_unfair`: Represents the *additional* negative slope applied only when the offer is strictly unfair (`split_perc_self < fair_perc_self`). The effective slope for unfair offers will be `sensitivity_generous - penalty_slope_unfair`. A positive value for this parameter means that unfair offers result in a steeper decrease in utility compared to generous offers of the same magnitude of deviation, relative to the fair share.\n\nThe utility `U` should be 0 when `split_perc_self == fair_perc_self`. For offers above fair, utility increases linearly with deviation `(split_perc_self - fair_perc_self)` with slope `sensitivity_generous`. For offers below fair, utility decreases linearly with deviation `(split_perc_self - fair_perc_self)` with a steeper slope `(sensitivity_generous - penalty_slope_unfair)`.\n\n**Proposed Model Structure Idea (Run 16):**\n\nThe utility `U` is calculated as a piecewise linear function of the deviation `deviation = split_perc_self - fair_perc_self`:\n- If `deviation >= 0`: `U = sensitivity_generous * deviation`\n- If `deviation < 0`: `U = (sensitivity_generous - penalty_slope_unfair) * deviation`\n\nThis structure can be expressed in a single formula using the positive unfair deviation term `max(0, fair_perc_self - split_perc_self)`, which is `max(0, -deviation)`.\n`U = sensitivity_generous * (split_perc_self - fair_perc_self) - penalty_slope_unfair * max(0, fair_perc_self - split_perc_self)`\n\n**Guidance for the Next Model (Run 16):**\n\nDesign a computational model implementing this piecewise linear relationship based on the *deviation from the fair share*. This structural approach is designed to potentially improve parameter identifiability by using fewer parameters and anchoring the utility at the fair point.\n\n*   **Prioritize Parameter Recovery:** Focus on making `sensitivity_generous` and `penalty_slope_unfair` distinguishable. The structure should clearly isolate the added disutility slope for unfair offers.\n*   **Parameter Constraints:** Define clear, generous, finite, non-negative bounds for `sensitivity_generous` and `penalty_slope_unfair`. Suggest bounds [0, 10] for `sensitivity_generous` and [0, 20] for `penalty_slope_unfair`. Both parameters must be non-negative.\n*   **Model Specification:** Provide the mathematical formula between <MODEL> tags using the suggested structure: `U = sensitivity_generous * (split_perc_self - fair_perc_self) - penalty_slope_unfair * max(0, fair_perc_self - split_perc_self)`. Ensure the formula includes the necessary variables (`split_perc_self`, `fair_perc_self`) and parameters.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags, including the specified bounds and learnable status for `sensitivity_generous` and `penalty_slope_unfair`. Remember `fair_perc_self` is calculated as `(token_self / (token_self + token_opp)) * 100`. Include descriptions for all variables used in the <MODEL> formula.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags.\n\nThink creatively about how this model captures responder preferences by making utility proportional to the distance from fairness, with a potentially different slope for unfair offers. This differs fundamentally from scaling the offered percentage itself. Aim for a structure that allows the two parameters to have distinct influences on the likelihood of acceptance across different offers, particularly those above vs. below the fair share.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember `fair_perc_self` can be calculated as `(token_self / (token_self + token_opp)) * 100`. Use variables relevant for responder trials (`trial_role == 1`).\n\nFor run 16 of 100, please think through this step by step, focusing intently on designing a model structure that maximizes parameter identifiability given the data and the history of failed recovery attempts, specifically implementing the described model combining base linear sensitivity with additive fixed penalties/bonuses based on the fairness threshold. Then provide your model specification, variable descriptions, target variable, and summary.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Based on the results of the previous run and the instructions used for that run, generate improved instructions for the *next* run. Aim to guide the main modeling LLM towards better performance (e.g., lower BIC, better parameter recovery, and higher accuracy). Please keep in mind that if any of the learnable parameters have a parameter recovery value of less than ~0.7, then the model is unusable. You will first be given the total context for the previous run, then reminded specifically of the instructions used for that run that you should update.\n\nTask Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0))\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n```json\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n```\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\\nLet me think through this step by step...\\n[your reasoning here]\\n\\n<MODEL>\\nU_i = beta_param + epsilon_param * E + eta_param * N\\n</MODEL>\\n\\n<VARIABLES>\\n{\\n  \"variables\": {\\n    \"U_i\": {\\n      \"description\": \"Utility of choosing action i\",\\n      \"range\": {\\n        \"min\": \"-inf\",\\n        \"max\": \"inf\"\\n      },\\n      \"learnable\": false,\\n      \"source\": \"calculated\"\\n    },\\n    \"beta_param\": {\\n      \"description\": \"Base tendency parameter (inherent preference)\",\\n      \"range\": {\\n        \"min\": 0,\\n        \"max\": 1\\n      },\\n      \"learnable\": true,\\n      \"source\": \"learnable\"\\n    },\\n    \"epsilon_param\": {\\n      \"description\": \"Environmental sensitivity parameter\",\\n      \"range\": {\\n        \"min\": \"-inf\",\\n        \"max\": \"inf\"\\n      },\\\n      \"learnable\": true,\\n      \"source\": \"learnable\"\\n    },\\n    \"E\": {\\n      \"description\": \"Environmental cue value\",\\n      \"range\": {\\n        \"min\": \"-inf\",\\n        \"max\": \"inf\"\\n      },\\n      \"learnable\": false,\\n      \"source\": \"data\"\\n    },\\n    \"eta_param\": {\\n      \"description\": \"Noise parameter\",\\n      \"range\": {\\n        \"min\": 0,\\n        \"max\": 1,\\n        \"exclusive_max\": true\\n      },\\n      \"learnable\": true,\\n      \"source\": \"learnable\"\\n    },\\n    \"N\": {\\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\\n      \"distribution\": {\\n        \"type\": \"normal\",\\n        \"mean\": 0,\\n        \"std\": 1\\n      },\\n      \"learnable\": false,\\n      \"source\": \"calculated\"\\n    }\\n  }\\n}\\n</VARIABLES>\\n<SUMMARY>\\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\\n</SUMMARY>\\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: The previous models designed to capture responder behavior, whether using piecewise slopes on the offered amount or combining base sensitivity with fixed additive penalties/bonuses based on the proportional fair share, have consistently failed to achieve the required parameter recovery of >= 0.7 for *all* learnable parameters. The most recent attempt (Run 15), which used a base sensitivity to `split_perc_self` plus additive terms for unfair/generous offers (`alpha_sensitivity`, `beta_unfair_penalty`, `gamma_generous_bonus`), resulted in very poor recovery across all three parameters (0.432, 0.161, 0.055). This suggests that separating effects by simply adding constants above/below the fair threshold is not sufficient for identifiability.\n\nFor this run (Run 16), let's explore a different structural approach that focuses on the *deviation* from the proportional fair share (`fair_perc_self`) rather than the offered percentage (`split_perc_self`) itself as the primary input, and attempts to capture fairness sensitivity via a piecewise linear relationship *with respect to this deviation*. This approach uses only two learnable parameters, reducing model complexity compared to the last attempt, and anchors utility at 0 when the offer is exactly fair.\n\nConsider a model where the utility of accepting an offer (`U`) is a piecewise linear function of the difference between the offered percentage and the fair percentage (`split_perc_self - fair_perc_self`).\n\nThe model should have two learnable parameters:\n1.  `sensitivity_generous`: Represents the slope of the utility function when the offer is fair or generous (`split_perc_self >= fair_perc_self`). This parameter scales the positive deviation from the fair share. A higher value means greater positive utility for generous offers.\n2.  `penalty_slope_unfair`: Represents the *additional* negative slope applied only when the offer is strictly unfair (`split_perc_self < fair_perc_self`). The effective slope for unfair offers will be `sensitivity_generous - penalty_slope_unfair`. A positive value for this parameter means that unfair offers result in a steeper decrease in utility compared to generous offers of the same magnitude of deviation, relative to the fair share.\n\nThe utility `U` should be 0 when `split_perc_self == fair_perc_self`. For offers above fair, utility increases linearly with deviation `(split_perc_self - fair_perc_self)` with slope `sensitivity_generous`. For offers below fair, utility decreases linearly with deviation `(split_perc_self - fair_perc_self)` with a steeper slope `(sensitivity_generous - penalty_slope_unfair)`.\n\n**Proposed Model Structure Idea (Run 16):**\n\nThe utility `U` is calculated as a piecewise linear function of the deviation `deviation = split_perc_self - fair_perc_self`:\n- If `deviation >= 0`: `U = sensitivity_generous * deviation`\n- If `deviation < 0`: `U = (sensitivity_generous - penalty_slope_unfair) * deviation`\n\nThis structure can be expressed in a single formula using the positive unfair deviation term `max(0, fair_perc_self - split_perc_self)`, which is `max(0, -deviation)`.\n`U = sensitivity_generous * (split_perc_self - fair_perc_self) - penalty_slope_unfair * max(0, fair_perc_self - split_perc_self)`\n\n**Guidance for the Next Model (Run 16):**\n\nDesign a computational model implementing this piecewise linear relationship based on the *deviation from the fair share*. This structural approach is designed to potentially improve parameter identifiability by using fewer parameters and anchoring the utility at the fair point.\n\n*   **Prioritize Parameter Recovery:** Focus on making `sensitivity_generous` and `penalty_slope_unfair` distinguishable. The structure should clearly isolate the added disutility slope for unfair offers.\n*   **Parameter Constraints:** Define clear, generous, finite, non-negative bounds for `sensitivity_generous` and `penalty_slope_unfair`. Suggest bounds [0, 10] for `sensitivity_generous` and [0, 20] for `penalty_slope_unfair`. Both parameters must be non-negative.\n*   **Model Specification:** Provide the mathematical formula between <MODEL> tags using the suggested structure: `U = sensitivity_generous * (split_perc_self - fair_perc_self) - penalty_slope_unfair * max(0, fair_perc_self - split_perc_self)`. Ensure the formula includes the necessary variables (`split_perc_self`, `fair_perc_self`) and parameters.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags, including the specified bounds and learnable status for `sensitivity_generous` and `penalty_slope_unfair`. Remember `fair_perc_self` is calculated as `(token_self / (token_self + token_opp)) * 100`. Include descriptions for all variables used in the <MODEL> formula.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags.\n\nThink creatively about how this model captures responder preferences by making utility proportional to the distance from fairness, with a potentially different slope for unfair offers. This differs fundamentally from scaling the offered percentage itself. Aim for a structure that allows the two parameters to have distinct influences on the likelihood of acceptance across different offers, particularly those above vs. below the fair share.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember `fair_perc_self` can be calculated as `(token_self / (token_self + token_opp)) * 100`. Use variables relevant for responder trials (`trial_role == 1`).\n\nFor run 16 of 100, please think through this step by step, focusing intently on designing a model structure that maximizes parameter identifiability given the data and the history of failed recovery attempts, specifically implementing the described model combining base linear sensitivity with additive fixed penalties/bonuses based on the fairness threshold. Then provide your model specification, variable descriptions, target variable, and summary.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, I will design a computational model that predicts responder behavior (accept/reject) in the ultimatum game, implementing the requested piecewise linear utility function based on the deviation from the fair share percentage, using the specified formula and learnable parameters. This approach aims to improve parameter identifiability compared to previous models.\n\n<MODEL>\nU = sensitivity_generous * (split_perc_self - fair_perc_self) - penalty_slope_unfair * max(0, fair_perc_self - split_perc_self)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the combined earning proposed to the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The percentage of the combined earning that would be proportional to the participant's token contribution. Calculated as (token_self / (token_self + token_opp)) * 100.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sensitivity_generous\": {\n      \"description\": \"The slope of the utility function for offers at or above the fair percentage, and the base slope for offers below the fair percentage. Must be non-negative.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"penalty_slope_unfair\": {\n      \"description\": \"The additional slope applied to decrease utility for offers below the fair percentage. This value is added to the base slope (sensitivity_generous) when the deviation from fair is negative, making the utility decrease faster for unfair offers. Must be non-negative.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA piecewise linear utility model for responder decisions. Utility is calculated based on the percentage deviation of the offered amount for the participant (split_perc_self) from the fair percentage (fair_perc_self, calculated from token contributions). The model uses two learnable parameters: sensitivity_generous represents the slope of the utility function for fair or generous offers, and penalty_slope_unfair adds to this slope when the offer is below fair, resulting in a steeper decrease in utility for unfair offers. Utility at the fair percentage is zero.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['sensitivity_generous', 'penalty_slope_unfair']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = sensitivity_generous * (split_perc_self - fair_perc_self) - penalty_slope_unfair * max(0, fair_perc_self - split_perc_self)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the combined earning proposed to the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The percentage of the combined earning that would be proportional to the participant's token contribution. Calculated as (token_self / (token_self + token_opp)) * 100.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sensitivity_generous\": {\n      \"description\": \"The slope of the utility function for offers at or above the fair percentage, and the base slope for offers below the fair percentage. Must be non-negative.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"penalty_slope_unfair\": {\n      \"description\": \"The additional slope applied to decrease utility for offers below the fair percentage. This value is added to the base slope (sensitivity_generous) when the deviation from fair is negative, making the utility decrease faster for unfair offers. Must be non-negative.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, sensitivity_generous=1, penalty_slope_unfair=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate fair percentage\n        if (token_self + token_opp) == 0:\n            fair_perc_self = 50  # Default to 50 if both are zero to avoid division by zero.\n        else:\n            fair_perc_self = (token_self / (token_self + token_opp)) * 100\n\n        # Calculate utility\n        utility = sensitivity_generous * (split_perc_self - fair_perc_self) - penalty_slope_unfair * max(0, fair_perc_self - split_perc_self)\n\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"0_0\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 20, \"split_opp\": 10.0, \"split_self\": 10.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 10.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 10.0}, {\"ID\": 1, \"group\": \"0_0\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 20, \"split_opp\": 2.0, \"split_self\": 18.0, \"splitperc_opp\": 10, \"splitperc_self\": 90, \"accept\": 1.0, \"accepted_amount\": 18.0, \"accepted_perc\": 90.0, \"proposed_perc\": 90.0, \"proposed_amount\": 18.0}, {\"ID\": 2, \"group\": \"0_0\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 20, \"split_opp\": 17.0, \"split_self\": 3.0, \"splitperc_opp\": 85, \"splitperc_self\": 15, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 15.0, \"proposed_amount\": 3.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1746097003.536192
    }
  ],
  "learnable_parameters": {
    "sensitivity_generous": {
      "description": "The slope of the utility function for offers at or above the fair percentage, and the base slope for offers below the fair percentage. Must be non-negative.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "penalty_slope_unfair": {
      "description": "The additional slope applied to decrease utility for offers below the fair percentage. This value is added to the base slope (sensitivity_generous) when the deviation from fair is negative, making the utility decrease faster for unfair offers. Must be non-negative.",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = sensitivity_generous * (split_perc_self - fair_perc_self) - penalty_slope_unfair * max(0, fair_perc_self - split_perc_self)",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the proposed offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_perc_self": {
      "description": "The percentage of the combined earning proposed to the participant",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "fair_perc_self": {
      "description": "The percentage of the combined earning that would be proportional to the participant's token contribution. Calculated as (token_self / (token_self + token_opp)) * 100.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sensitivity_generous": {
      "description": "The slope of the utility function for offers at or above the fair percentage, and the base slope for offers below the fair percentage. Must be non-negative.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "penalty_slope_unfair": {
      "description": "The additional slope applied to decrease utility for offers below the fair percentage. This value is added to the base slope (sensitivity_generous) when the deviation from fair is negative, making the utility decrease faster for unfair offers. Must be non-negative.",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A piecewise linear utility model for responder decisions. Utility is calculated based on the percentage deviation of the offered amount for the participant (split_perc_self) from the fair percentage (fair_perc_self, calculated from token contributions). The model uses two learnable parameters: sensitivity_generous represents the slope of the utility function for fair or generous offers, and penalty_slope_unfair adds to this slope when the offer is below fair, resulting in a steeper decrease in utility for unfair offers. Utility at the fair percentage is zero.",
  "target_variable": "accept",
  "full_reasoning": "Okay, I will design a computational model that predicts responder behavior (accept/reject) in the ultimatum game, implementing the requested piecewise linear utility function based on the deviation from the fair share percentage, using the specified formula and learnable parameters. This approach aims to improve parameter identifiability compared to previous models.\n\n<MODEL>\nU = sensitivity_generous * (split_perc_self - fair_perc_self) - penalty_slope_unfair * max(0, fair_perc_self - split_perc_self)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the combined earning proposed to the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The percentage of the combined earning that would be proportional to the participant's token contribution. Calculated as (token_self / (token_self + token_opp)) * 100.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sensitivity_generous\": {\n      \"description\": \"The slope of the utility function for offers at or above the fair percentage, and the base slope for offers below the fair percentage. Must be non-negative.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"penalty_slope_unfair\": {\n      \"description\": \"The additional slope applied to decrease utility for offers below the fair percentage. This value is added to the base slope (sensitivity_generous) when the deviation from fair is negative, making the utility decrease faster for unfair offers. Must be non-negative.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA piecewise linear utility model for responder decisions. Utility is calculated based on the percentage deviation of the offered amount for the participant (split_perc_self) from the fair percentage (fair_perc_self, calculated from token contributions). The model uses two learnable parameters: sensitivity_generous represents the slope of the utility function for fair or generous offers, and penalty_slope_unfair adds to this slope when the offer is below fair, resulting in a steeper decrease in utility for unfair offers. Utility at the fair percentage is zero.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = sensitivity_generous * (split_perc_self - fair_perc_self) - penalty_slope_unfair * max(0, fair_perc_self - split_perc_self)\nSummary: A piecewise linear utility model for responder decisions. Utility is calculated based on the percentage deviation of the offered amount for the participant (split_perc_self) from the fair percentage (fair_perc_self, calculated from token contributions). The model uses two learnable parameters: sensitivity_generous represents the slope of the utility function for fair or generous offers, and penalty_slope_unfair adds to this slope when the offer is below fair, resulting in a steeper decrease in utility for unfair offers. Utility at the fair percentage is zero.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, sensitivity_generous=1, penalty_slope_unfair=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        # Calculate fair percentage\n        if (token_self + token_opp) == 0:\n            fair_perc_self = 50  # Default to 50 if both are zero to avoid division by zero.\n        else:\n            fair_perc_self = (token_self / (token_self + token_opp)) * 100\n\n        # Calculate utility\n        utility = sensitivity_generous * (split_perc_self - fair_perc_self) - penalty_slope_unfair * max(0, fair_perc_self - split_perc_self)\n\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5521978021978022,
  "group_accuracies": {
    "Control": 0.5025839793281653,
    "Cocaine": 0.5966435185185185
  },
  "group_parameter_averages": {
    "Control": {
      "sensitivity_generous": 2.8625361158271083,
      "penalty_slope_unfair": 4.308565597482829
    },
    "Cocaine": {
      "sensitivity_generous": 3.4231153114738517,
      "penalty_slope_unfair": 6.119936460186563
    }
  },
  "fitting_results": [
    {
      "sensitivity_generous": 4.908074887360775,
      "penalty_slope_unfair": 2.4603007714747394,
      "success": true,
      "log_likelihood": -47.43793404688711,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.031933765669745894,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -22.449751611681823,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 2.825680802383351,
      "penalty_slope_unfair": 6.061212357663031,
      "success": true,
      "log_likelihood": -346.77133160710446,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.049422142804867175,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -19.90428046381785,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.06052915965947218,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -18.26158563828823,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.011246102080580574,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.599581746777417,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 3.631682497642635,
      "penalty_slope_unfair": 7.406635137842194,
      "success": true,
      "log_likelihood": -738.2135220224666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.0076390978967534285,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.78830395895948,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 5.461048663785131,
      "penalty_slope_unfair": 3.9417684396061468,
      "success": true,
      "log_likelihood": -738.2130354605555,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 6.551904290159742,
      "penalty_slope_unfair": 4.714733682611674,
      "success": true,
      "log_likelihood": -231.64480267845798,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.05983599687108514,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -18.36188914361694,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.06773821921028021,
      "penalty_slope_unfair": 10.250093348991374,
      "success": true,
      "log_likelihood": -48.66239376386829,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 4.911936547325306,
      "penalty_slope_unfair": 8.436173285901429,
      "success": true,
      "log_likelihood": -254.67065458681515,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.0,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.0,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.0,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 4.495121101932616,
      "penalty_slope_unfair": 9.15667376034743,
      "success": true,
      "log_likelihood": -738.2135241182697,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.0,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.0,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 8.815285382767472,
      "penalty_slope_unfair": 19.412729059686416,
      "success": true,
      "log_likelihood": -738.2135241186148,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 9.554971384228722,
      "penalty_slope_unfair": 11.07772348510897,
      "success": true,
      "log_likelihood": -369.79990923796737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.0,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 9.599382720741565,
      "penalty_slope_unfair": 14.684308618009862,
      "success": true,
      "log_likelihood": -208.61895272768413,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.023477186774532924,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -23.508299437323824,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 5.011513527029666,
      "penalty_slope_unfair": 11.115993979549362,
      "success": true,
      "log_likelihood": -323.7482073778864,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 9.463979223091863,
      "penalty_slope_unfair": 17.05486181629194,
      "success": true,
      "log_likelihood": -392.82576016800783,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.02244706784010958,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -23.623103825106803,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 6.493744023114814,
      "penalty_slope_unfair": 7.5884509104942,
      "success": true,
      "log_likelihood": -139.54139993748052,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.0,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 2.7959786498771044,
      "penalty_slope_unfair": 9.105514256781099,
      "success": true,
      "log_likelihood": -554.0067165683304,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.0,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 3.9135372805755897,
      "penalty_slope_unfair": 0.3708894225351278,
      "success": true,
      "log_likelihood": -47.39237168428966,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.02961837265194287,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -22.75743857947026,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 5.550767991096266,
      "penalty_slope_unfair": 16.989134316527753,
      "success": true,
      "log_likelihood": -231.64480365772445,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.0,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 6.082325086771222,
      "penalty_slope_unfair": 8.218266087039952,
      "success": true,
      "log_likelihood": -438.877462028049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 7.793295909994103,
      "penalty_slope_unfair": 1.6735967650319863,
      "success": true,
      "log_likelihood": -484.9287691979441,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.036860331598580404,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -21.762525496470097,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.002337145813422226,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.937722102506328,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.0,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 7.782124978461517,
      "penalty_slope_unfair": 13.139794995489213,
      "success": true,
      "log_likelihood": -415.85161109804835,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.11789895007692054,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -11.724471976561851,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 6.925714493277897,
      "penalty_slope_unfair": 2.409466194777757,
      "success": true,
      "log_likelihood": -715.1870609715559,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 3.704514793947078,
      "penalty_slope_unfair": 14.869764785964865,
      "success": true,
      "log_likelihood": -369.7999092379861,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 9.982699095681184,
      "penalty_slope_unfair": 5.0470757500851064,
      "success": true,
      "log_likelihood": -415.8516110980448,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 8.998196048968843,
      "penalty_slope_unfair": 17.050322594782184,
      "success": true,
      "log_likelihood": -507.9550148182102,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 4.661939309262842,
      "penalty_slope_unfair": 7.698063260032624,
      "success": true,
      "log_likelihood": -346.77405828233555,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.04323630913595219,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -20.829578865850387,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 3.2788766222293,
      "penalty_slope_unfair": 7.343399886321025,
      "success": true,
      "log_likelihood": -254.67064619911213,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.005861145205642812,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.855794100324758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 7.930665890090413,
      "penalty_slope_unfair": 5.630425795367547,
      "success": true,
      "log_likelihood": -484.9291638877027,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.06772404084300798,
      "penalty_slope_unfair": 5.073515744610586,
      "success": true,
      "log_likelihood": -71.68824475918225,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 7.305901627352648,
      "penalty_slope_unfair": 7.684477641528511,
      "success": true,
      "log_likelihood": -369.79990923796345,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 4.571788785977583,
      "penalty_slope_unfair": 14.005896222222605,
      "success": true,
      "log_likelihood": -438.87688265953625,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.05526526333261294,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -19.032879320695827,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.09545526631684051,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -13.84075046625196,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.09697091647965096,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -13.680404198601108,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.0,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 4.896265246258096,
      "penalty_slope_unfair": 12.711625194594733,
      "success": true,
      "log_likelihood": -70.46378053627838,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.0,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.004682620186948973,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.890937432079642,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.03393453603135154,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -22.175346582369524,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 4.730415907002473,
      "penalty_slope_unfair": 2.9377179852316826,
      "success": true,
      "log_likelihood": -47.43779417723767,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 6.858633618312073,
      "penalty_slope_unfair": 6.440051806764133,
      "success": true,
      "log_likelihood": -300.7223564478459,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 4.528046192854548,
      "penalty_slope_unfair": 18.698494679164686,
      "success": true,
      "log_likelihood": -93.48969807748176,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 6.324743267741085,
      "penalty_slope_unfair": 17.643480868880623,
      "success": true,
      "log_likelihood": -369.7999092379674,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 8.844344222133296,
      "penalty_slope_unfair": 5.976139420571515,
      "success": true,
      "log_likelihood": -669.1359713284863,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.0,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 4.8330867006304175,
      "penalty_slope_unfair": 16.110416261721824,
      "success": true,
      "log_likelihood": -369.7999092379673,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.0,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 9.490047497030151,
      "penalty_slope_unfair": 9.821856080796298,
      "success": true,
      "log_likelihood": -1.3862943573198903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 5.247094510158112,
      "penalty_slope_unfair": 12.557580698671082,
      "success": true,
      "log_likelihood": -93.4896914161658,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 9.134851946573619,
      "penalty_slope_unfair": 6.220739905137991,
      "success": true,
      "log_likelihood": -346.7740583079263,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 5.623978672462183,
      "penalty_slope_unfair": 9.618398099649818,
      "success": true,
      "log_likelihood": -554.0067166782902,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.0,
      "penalty_slope_unfair": 0.012655060944887058,
      "success": true,
      "log_likelihood": -24.514196583021942,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.0,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.0,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.0,
      "penalty_slope_unfair": 12.386962571844188,
      "success": true,
      "log_likelihood": -25.798439648280272,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.0,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 3.3300505201258543,
      "penalty_slope_unfair": 10.428335534188022,
      "success": true,
      "log_likelihood": -46.249222207996475,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 7.576250827801642,
      "penalty_slope_unfair": 10.301128378707709,
      "success": true,
      "log_likelihood": -346.7740583079269,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.0,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.0,
      "penalty_slope_unfair": 11.863653575250535,
      "success": true,
      "log_likelihood": -71.85014150836119,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.033529072596367164,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -22.23156611150248,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 7.722804097930213,
      "penalty_slope_unfair": 6.803372878665255,
      "success": true,
      "log_likelihood": -415.8516110980296,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 8.143504092593115,
      "penalty_slope_unfair": 2.353015878373612,
      "success": true,
      "log_likelihood": -24.41214528736036,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 2.4763246194431296,
      "penalty_slope_unfair": 9.026394382698076,
      "success": true,
      "log_likelihood": -484.9291635100271,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 4.9852493112985306,
      "penalty_slope_unfair": 16.69955574215588,
      "success": true,
      "log_likelihood": -162.56725086760312,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 3.7192358369621337,
      "penalty_slope_unfair": 5.035674201428576,
      "success": true,
      "log_likelihood": -692.1575903113596,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 4.9733665197959525,
      "penalty_slope_unfair": 5.706759202598819,
      "success": true,
      "log_likelihood": -300.72235644784575,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_generous": 0.0,
      "penalty_slope_unfair": 0.0,
      "success": true,
      "log_likelihood": -24.95329849295801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "sensitivity_generous": {
        "r": 0.05196744957128427,
        "p": 0.6076099494019577
      },
      "penalty_slope_unfair": {
        "r": 0.04875230220380708,
        "p": 0.6300331196665447
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 399.90265161852363,
  "bic_Control": 412.31474420101307,
  "bic_Cocaine": 388.78348534671017,
  "bic_results": {
    "average_bic": 399.90265161852363,
    "individual_bics": [
      102.04290597068643,
      52.06654110027586,
      700.7097010911211,
      46.97559880454792,
      43.69020915348868,
      56.36620137046705,
      1483.5940819218454,
      56.74364579483118,
      1483.5931087980232,
      470.4566432338282,
      43.890816164146095,
      104.4918254046488,
      516.5083470505425,
      57.073634862828236,
      57.073634862828236,
      57.073634862828236,
      1483.5940861134516,
      57.073634862828236,
      57.073634862828236,
      1483.5940861141419,
      746.766856352847,
      57.073634862828236,
      424.4049433322805,
      54.18363675155987,
      654.663452632685,
      792.8185582129279,
      54.413245527125824,
      286.24983775187326,
      57.073634862828236,
      1115.180471013573,
      57.073634862828236,
      101.95178124549153,
      52.68191503585274,
      470.4566451923611,
      57.073634862828236,
      884.9219619330103,
      977.0245762728005,
      50.69208886985241,
      57.042482081924874,
      57.073634862828236,
      838.8702600730089,
      30.61598183003592,
      1437.541159820024,
      746.7668563528845,
      838.8702600730019,
      1023.0770675133326,
      700.7151544415833,
      48.82619560861299,
      516.5083302751365,
      56.878626077561734,
      977.0253656523176,
      150.54352739527673,
      746.7668563528391,
      884.9208031959847,
      45.23279651830387,
      34.84853880941614,
      34.52784627411444,
      57.073634862828236,
      148.09459894946897,
      57.073634862828236,
      56.9489127410715,
      51.51773104165127,
      102.04262623138756,
      608.6117507726041,
      194.14643403187574,
      746.7668563528471,
      1345.438980533885,
      57.073634862828236,
      746.7668563528468,
      57.073634862828236,
      9.939626591552,
      194.1464207092438,
      700.7151544927648,
      1115.1804712334927,
      56.1954310429561,
      57.073634862828236,
      57.073634862828236,
      58.76391717347276,
      57.073634862828236,
      99.66548229290517,
      700.715154492766,
      57.073634862828236,
      150.8673208936346,
      51.63017009991718,
      838.8702600729714,
      55.99132845163294,
      977.0253648969664,
      332.30153961211846,
      1391.4822184996315,
      608.6117507726037,
      57.073634862828236
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        102.04290597068643,
        52.06654110027586,
        700.7097010911211,
        46.97559880454792,
        43.69020915348868,
        56.36620137046705,
        1483.5940819218454,
        56.74364579483118,
        1483.5931087980232,
        470.4566432338282,
        43.890816164146095,
        104.4918254046488,
        516.5083470505425,
        57.073634862828236,
        57.073634862828236,
        57.073634862828236,
        1483.5940861134516,
        57.073634862828236,
        57.073634862828236,
        1483.5940861141419,
        746.766856352847,
        57.073634862828236,
        424.4049433322805,
        54.18363675155987,
        654.663452632685,
        792.8185582129279,
        54.413245527125824,
        286.24983775187326,
        57.073634862828236,
        1115.180471013573,
        57.073634862828236,
        101.95178124549153,
        52.68191503585274,
        470.4566451923611,
        57.073634862828236,
        884.9219619330103,
        977.0245762728005,
        50.69208886985241,
        57.042482081924874,
        57.073634862828236,
        838.8702600730089,
        30.61598183003592,
        1437.541159820024
      ],
      "Cocaine": [
        746.7668563528845,
        838.8702600730019,
        1023.0770675133326,
        700.7151544415833,
        48.82619560861299,
        516.5083302751365,
        56.878626077561734,
        977.0253656523176,
        150.54352739527673,
        746.7668563528391,
        884.9208031959847,
        45.23279651830387,
        34.84853880941614,
        34.52784627411444,
        57.073634862828236,
        148.09459894946897,
        57.073634862828236,
        56.9489127410715,
        51.51773104165127,
        102.04262623138756,
        608.6117507726041,
        194.14643403187574,
        746.7668563528471,
        1345.438980533885,
        57.073634862828236,
        746.7668563528468,
        57.073634862828236,
        9.939626591552,
        194.1464207092438,
        700.7151544927648,
        1115.1804712334927,
        56.1954310429561,
        57.073634862828236,
        57.073634862828236,
        58.76391717347276,
        57.073634862828236,
        99.66548229290517,
        700.715154492766,
        57.073634862828236,
        150.8673208936346,
        51.63017009991718,
        838.8702600729714,
        55.99132845163294,
        977.0253648969664,
        332.30153961211846,
        1391.4822184996315,
        608.6117507726037,
        57.073634862828236
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- sensitivity_generous: r = 0.052\n- penalty_slope_unfair: r = 0.049",
  "previous_models": [
    "Specification: U = sensitivity_generous * (split_perc_self - fair_perc_self) - penalty_slope_unfair * max(0, fair_perc_self - split_perc_self)\nSummary: A piecewise linear utility model for responder decisions. Utility is calculated based on the percentage deviation of the offered amount for the participant (split_perc_self) from the fair percentage (fair_perc_self, calculated from token contributions). The model uses two learnable parameters: sensitivity_generous represents the slope of the utility function for fair or generous offers, and penalty_slope_unfair adds to this slope when the offer is below fair, resulting in a steeper decrease in utility for unfair offers. Utility at the fair percentage is zero.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 399.90265161852363\nOverall Accuracy: 0.5522\nGroup Accuracies:\n- Control: 0.5026\n- Cocaine: 0.5966\n\nParameter Recovery:\n- sensitivity_generous: r = 0.052\n- penalty_slope_unfair: r = 0.049"
  ]
}