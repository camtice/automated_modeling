{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0))\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n```json\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n```\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\\nLet me think through this step by step...\\n[your reasoning here]\\n\\n<MODEL>\\nU_i = beta_param + epsilon_param * E + eta_param * N\\n</MODEL>\\n\\n<VARIABLES>\\n{\\n  \"variables\": {\\n    \"U_i\": {\\n      \"description\": \"Utility of choosing action i\",\\n      \"range\": {\\n        \"min\": \"-inf\",\\n        \"max\": \"inf\"\\n      },\\n      \"learnable\": false,\\n      \"source\": \"calculated\"\\n    },\\n    \"beta_param\": {\\n      \"description\": \"Base tendency parameter (inherent preference)\",\\n      \"range\": {\\n        \"min\": 0,\\n        \"max\": 1\\n      },\\\n      \"learnable\": true,\\n      \"source\": \"learnable\"\\n    },\\n    \"epsilon_param\": {\\n      \"description\": \"Environmental sensitivity parameter\",\\n      \"range\": {\\n        \"min\": \"-inf\",\\n        \"max\": \"inf\"\\n      },\\\n      \"learnable\": true,\\n      \"source\": \"learnable\"\\n    },\\\n    \"E\": {\\n      \"description\": \"Environmental cue value\",\\n      \"range\": {\\n        \"min\": \"-inf\",\\n        \"max\": \"inf\"\\n      },\\n      \"learnable\": false,\\n      \"source\": \"data\"\\n    },\\n    \"eta_param\": {\\n      \"description\": \"Noise parameter\",\\n      \"range\": {\\n        \"min\": 0,\\n        \"max\": 1,\\n        \"exclusive_max\": true\\n      },\\n      \"learnable\": true,\\n      \"source\": \"learnable\"\\n    },\\n    \"N\": {\\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\\n      \"distribution\": {\\n        \"type\": \"normal\",\\n        \"mean\": 0,\\n        \"std\": 1\\n      },\\n      \"learnable\": false,\\n      \"source\": \"calculated\"\\n    }\\n  }\\n}\\n</VARIABLES>\\n<SUMMARY>\\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\\n</SUMMARY>\\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: Previous models designed to capture responder behavior have consistently struggled with parameter recovery, especially for parameters related to fairness perception. Run 16's attempt with a piecewise linear model based on deviation from fair share (`sensitivity_generous`, `penalty_slope_unfair`) resulted in extremely poor recovery (r=0.052 and r=0.049), making the model unusable. Simpler models, like one combining linear sensitivity with a fixed step penalty at the fair share threshold (Run 1), showed better recovery (r=0.620, r=0.513) and overall performance metrics, although still not meeting the 0.7 threshold for all parameters.\n\nThis suggests that the way fairness is incorporated is crucial for identifiability. Models that introduce sharp discontinuities or distinct slopes based *only* on the fair vs. unfair boundary might lead to parameter collinearity or lack of distinct influence across the range of offers.\n\nFor this run (Run 18), let's try a structural approach that combines a basic sensitivity to the offered amount with a penalty that is *proportional* to the *magnitude* of unfairness. This differs from previous attempts that used fixed penalties or piecewise slopes based on the fairness boundary alone.\n\nConsider a model where the utility of accepting an offer (`U`) is calculated as:\n`U = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, fair_perc_self - split_perc_self)`\n\nThis model has two learnable parameters:\n1.  `sensitivity_offer`: Represents a base sensitivity to the percentage amount offered to the participant (`split_perc_self`). A higher value means greater utility for higher offers, regardless of fairness.\n2.  `penalty_magnitude_unfairness`: Represents a multiplier for the penalty applied when the offer is strictly unfair (`split_perc_self < fair_perc_self`). The penalty term `max(0, fair_perc_self - split_perc_self)` captures the *degree* of unfairness (how much below fair the offer is). A positive value for this parameter imposes a disutility that increases linearly with the magnitude of the unfair deviation. If the offer is fair or generous, this penalty term is zero.\n\nBoth learnable parameters should be non-negative.\n\n**Guidance for the Next Model (Run 18):**\n\nDesign a computational model implementing this specific structure. The goal is for `sensitivity_offer` and `penalty_magnitude_unfairness` to have sufficiently distinct effects on utility across different offers (especially unfair vs. fair/generous ones) to improve parameter recovery.\n\n*   **Prioritize Parameter Recovery:** Design the model exactly following the specified structure to maximize the chances of `sensitivity_offer` and `penalty_magnitude_unfairness` being distinguishable and recoverable (>= 0.7).\n*   **Parameter Constraints:** Define clear, generous, finite, non-negative bounds for `sensitivity_offer` and `penalty_magnitude_unfairness`. Suggest bounds [0, 20] for `sensitivity_offer` and [0, 10] for `penalty_magnitude_unfairness`. Both parameters must be non-negative.\n*   **Model Specification:** Provide the mathematical formula between <MODEL> tags using the suggested structure: `U = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, fair_perc_self - split_perc_self)`. Ensure the formula includes the necessary variables (`split_perc_self`, `fair_perc_self`) and parameters. Remember `fair_perc_self` needs to be calculated as `(token_self / (token_self + token_opp)) * 100`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags, including the specified bounds and learnable status for `sensitivity_offer` and `penalty_magnitude_unfairness`. Include descriptions for all variables used in the <MODEL> formula (`U`, `split_perc_self`, `fair_perc_self`, `token_self`, `token_opp`, `sensitivity_offer`, `penalty_magnitude_unfairness`).\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags.\n\nThink creatively about how this model captures preferences by valuing the offer itself (`split_perc_self`) while adding a specific, scaled penalty only for the degree of unfairness (`max(0, fair_perc_self - split_perc_self)`). This is different from just having different slopes above/below fair or fixed penalties. Aim for a structure where the parameters have distinct roles influencing the likelihood of acceptance across the full range of offers.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember `fair_perc_self` can be calculated as `(token_self / (token_self + token_opp)) * 100`. Use variables relevant for responder trials (`trial_role == 1`).\n\nFor run 18 of 100, please think through this step by step, focusing intently on designing a model structure that maximizes parameter identifiability given the data and the history of failed recovery attempts, specifically implementing the described model combining base linear sensitivity with a penalty proportional to unfairness magnitude. Then provide your model specification, variable descriptions, target variable, and summary.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0))\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n```json\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n```\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\\nLet me think through this step by step...\\n[your reasoning here]\\n\\n<MODEL>\\nU_i = beta_param + epsilon_param * E + eta_param * N\\n</MODEL>\\n\\n<VARIABLES>\\n{\\n  \"variables\": {\\n    \"U_i\": {\\n      \"description\": \"Utility of choosing action i\",\\n      \"range\": {\\n        \"min\": \"-inf\",\\n        \"max\": \"inf\"\\n      },\\n      \"learnable\": false,\\n      \"source\": \"calculated\"\\n    },\\n    \"beta_param\": {\\n      \"description\": \"Base tendency parameter (inherent preference)\",\\n      \"range\": {\\n        \"min\": 0,\\n        \"max\": 1\\n      },\\\n      \"learnable\": true,\\n      \"source\": \"learnable\"\\n    },\\n    \"epsilon_param\": {\\n      \"description\": \"Environmental sensitivity parameter\",\\n      \"range\": {\\n        \"min\": \"-inf\",\\n        \"max\": \"inf\"\\n      },\\\n      \"learnable\": true,\\n      \"source\": \"learnable\"\\n    },\\\n    \"E\": {\\n      \"description\": \"Environmental cue value\",\\n      \"range\": {\\n        \"min\": \"-inf\",\\n        \"max\": \"inf\"\\n      },\\n      \"learnable\": false,\\n      \"source\": \"data\"\\n    },\\n    \"eta_param\": {\\n      \"description\": \"Noise parameter\",\\n      \"range\": {\\n        \"min\": 0,\\n        \"max\": 1,\\n        \"exclusive_max\": true\\n      },\\n      \"learnable\": true,\\n      \"source\": \"learnable\"\\n    },\\n    \"N\": {\\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\\n      \"distribution\": {\\n        \"type\": \"normal\",\\n        \"mean\": 0,\\n        \"std\": 1\\n      },\\n      \"learnable\": false,\\n      \"source\": \"calculated\"\\n    }\\n  }\\n}\\n</VARIABLES>\\n<SUMMARY>\\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\\n</SUMMARY>\\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: Previous models designed to capture responder behavior have consistently struggled with parameter recovery, especially for parameters related to fairness perception. Run 16's attempt with a piecewise linear model based on deviation from fair share (`sensitivity_generous`, `penalty_slope_unfair`) resulted in extremely poor recovery (r=0.052 and r=0.049), making the model unusable. Simpler models, like one combining linear sensitivity with a fixed step penalty at the fair share threshold (Run 1), showed better recovery (r=0.620, r=0.513) and overall performance metrics, although still not meeting the 0.7 threshold for all parameters.\n\nThis suggests that the way fairness is incorporated is crucial for identifiability. Models that introduce sharp discontinuities or distinct slopes based *only* on the fair vs. unfair boundary might lead to parameter collinearity or lack of distinct influence across the range of offers.\n\nFor this run (Run 18), let's try a structural approach that combines a basic sensitivity to the offered amount with a penalty that is *proportional* to the *magnitude* of unfairness. This differs from previous attempts that used fixed penalties or piecewise slopes based on the fairness boundary alone.\n\nConsider a model where the utility of accepting an offer (`U`) is calculated as:\n`U = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, fair_perc_self - split_perc_self)`\n\nThis model has two learnable parameters:\n1.  `sensitivity_offer`: Represents a base sensitivity to the percentage amount offered to the participant (`split_perc_self`). A higher value means greater utility for higher offers, regardless of fairness.\n2.  `penalty_magnitude_unfairness`: Represents a multiplier for the penalty applied when the offer is strictly unfair (`split_perc_self < fair_perc_self`). The penalty term `max(0, fair_perc_self - split_perc_self)` captures the *degree* of unfairness (how much below fair the offer is). A positive value for this parameter imposes a disutility that increases linearly with the magnitude of the unfair deviation. If the offer is fair or generous, this penalty term is zero.\n\nBoth learnable parameters should be non-negative.\n\n**Guidance for the Next Model (Run 18):**\n\nDesign a computational model implementing this specific structure. The goal is for `sensitivity_offer` and `penalty_magnitude_unfairness` to have sufficiently distinct effects on utility across different offers (especially unfair vs. fair/generous ones) to improve parameter recovery.\n\n*   **Prioritize Parameter Recovery:** Design the model exactly following the specified structure to maximize the chances of `sensitivity_offer` and `penalty_magnitude_unfairness` being distinguishable and recoverable (>= 0.7).\n*   **Parameter Constraints:** Define clear, generous, finite, non-negative bounds for `sensitivity_offer` and `penalty_magnitude_unfairness`. Suggest bounds [0, 20] for `sensitivity_offer` and [0, 10] for `penalty_magnitude_unfairness`. Both parameters must be non-negative.\n*   **Model Specification:** Provide the mathematical formula between <MODEL> tags using the suggested structure: `U = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, fair_perc_self - split_perc_self)`. Ensure the formula includes the necessary variables (`split_perc_self`, `fair_perc_self`) and parameters. Remember `fair_perc_self` needs to be calculated as `(token_self / (token_self + token_opp)) * 100`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags, including the specified bounds and learnable status for `sensitivity_offer` and `penalty_magnitude_unfairness`. Include descriptions for all variables used in the <MODEL> formula (`U`, `split_perc_self`, `fair_perc_self`, `token_self`, `token_opp`, `sensitivity_offer`, `penalty_magnitude_unfairness`).\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags.\n\nThink creatively about how this model captures preferences by valuing the offer itself (`split_perc_self`) while adding a specific, scaled penalty only for the degree of unfairness (`max(0, fair_perc_self - split_perc_self)`). This is different from just having different slopes above/below fair or fixed penalties. Aim for a structure where the parameters have distinct roles influencing the likelihood of acceptance across the full range of offers.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember `fair_perc_self` can be calculated as `(token_self / (token_self + token_opp)) * 100`. Use variables relevant for responder trials (`trial_role == 1`).\n\nFor run 18 of 100, please think through this step by step, focusing intently on designing a model structure that maximizes parameter identifiability given the data and the history of failed recovery attempts, specifically implementing the described model combining base linear sensitivity with a penalty proportional to unfairness magnitude. Then provide your model specification, variable descriptions, target variable, and summary.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nutility = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, (token_self / (token_self + token_opp)) * 100 - split_perc_self)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Utility of accepting the proposed offer for the participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sensitivity_offer\": {\n      \"description\": \"Parameter representing the sensitivity to the percentage share offered to the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed percentage share for the participant in the current trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"penalty_magnitude_unfairness\": {\n      \"description\": \"Parameter representing the multiplier for the penalty applied when the offer is unfair, scaled by the magnitude of unfairness\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, used to calculate fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, used to calculate fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model for responder decisions combining linear sensitivity to the offered percentage with a penalty proportional to the magnitude of deviation from the participant's fair share when the offer is unfair. The model uses two non-negative learnable parameters: sensitivity_offer and penalty_magnitude_unfairness. Utility increases with the offered percentage and decreases when the offer falls below the fair share, with the penalty magnitude scaling with the degree of unfairness.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['sensitivity_offer', 'penalty_magnitude_unfairness']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                utility = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, (token_self / (token_self + token_opp)) * 100 - split_perc_self)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Utility of accepting the proposed offer for the participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sensitivity_offer\": {\n      \"description\": \"Parameter representing the sensitivity to the percentage share offered to the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed percentage share for the participant in the current trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"penalty_magnitude_unfairness\": {\n      \"description\": \"Parameter representing the multiplier for the penalty applied when the offer is unfair, scaled by the magnitude of unfairness\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, used to calculate fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, used to calculate fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, sensitivity_offer=1, penalty_magnitude_unfairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        if (token_self + token_opp) == 0:\n            fair_share = 0  # Avoid division by zero if both are zero\n        else:\n            fair_share = (token_self / (token_self + token_opp)) * 100\n\n        unfairness = max(0, fair_share - split_perc_self)\n        utility = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * unfairness\n        model_predictions.append(utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 41, \"token_self\": 59, \"combined_earning\": 50, \"split_opp\": 0.5, \"split_self\": 0.5, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 25.0, \"accepted_perc\": 0.5, \"proposed_perc\": 0.5, \"proposed_amount\": 25.0}, {\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 41, \"token_self\": 59, \"combined_earning\": 50, \"split_opp\": 0.8, \"split_self\": 0.2, \"splitperc_opp\": 80, \"splitperc_self\": 20, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 0.2, \"proposed_amount\": 10.0}, {\"ID\": 2, \"group\": \"treatment\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 41, \"token_self\": 59, \"combined_earning\": 50, \"split_opp\": 0.7, \"split_self\": 0.3, \"splitperc_opp\": 70, \"splitperc_self\": 30, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 0.3, \"proposed_amount\": 15.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1746097058.979118
    }
  ],
  "learnable_parameters": {
    "sensitivity_offer": {
      "description": "Parameter representing the sensitivity to the percentage share offered to the participant",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "penalty_magnitude_unfairness": {
      "description": "Parameter representing the multiplier for the penalty applied when the offer is unfair, scaled by the magnitude of unfairness",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "utility = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, (token_self / (token_self + token_opp)) * 100 - split_perc_self)",
  "variable_descriptions": {
    "utility": {
      "description": "Utility of accepting the proposed offer for the participant",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "sensitivity_offer": {
      "description": "Parameter representing the sensitivity to the percentage share offered to the participant",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_perc_self": {
      "description": "The proposed percentage share for the participant in the current trial",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "penalty_magnitude_unfairness": {
      "description": "Parameter representing the multiplier for the penalty applied when the offer is unfair, scaled by the magnitude of unfairness",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "token_self": {
      "description": "Number of tokens found by the participant, used to calculate fair share",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent, used to calculate fair share",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A utility model for responder decisions combining linear sensitivity to the offered percentage with a penalty proportional to the magnitude of deviation from the participant's fair share when the offer is unfair. The model uses two non-negative learnable parameters: sensitivity_offer and penalty_magnitude_unfairness. Utility increases with the offered percentage and decreases when the offer falls below the fair share, with the penalty magnitude scaling with the degree of unfairness.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nutility = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, (token_self / (token_self + token_opp)) * 100 - split_perc_self)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"utility\": {\n      \"description\": \"Utility of accepting the proposed offer for the participant\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sensitivity_offer\": {\n      \"description\": \"Parameter representing the sensitivity to the percentage share offered to the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed percentage share for the participant in the current trial\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"penalty_magnitude_unfairness\": {\n      \"description\": \"Parameter representing the multiplier for the penalty applied when the offer is unfair, scaled by the magnitude of unfairness\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant, used to calculate fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent, used to calculate fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model for responder decisions combining linear sensitivity to the offered percentage with a penalty proportional to the magnitude of deviation from the participant's fair share when the offer is unfair. The model uses two non-negative learnable parameters: sensitivity_offer and penalty_magnitude_unfairness. Utility increases with the offered percentage and decreases when the offer falls below the fair share, with the penalty magnitude scaling with the degree of unfairness.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: utility = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, (token_self / (token_self + token_opp)) * 100 - split_perc_self)\nSummary: A utility model for responder decisions combining linear sensitivity to the offered percentage with a penalty proportional to the magnitude of deviation from the participant's fair share when the offer is unfair. The model uses two non-negative learnable parameters: sensitivity_offer and penalty_magnitude_unfairness. Utility increases with the offered percentage and decreases when the offer falls below the fair share, with the penalty magnitude scaling with the degree of unfairness.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, sensitivity_offer=1, penalty_magnitude_unfairness=1):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n\n        if (token_self + token_opp) == 0:\n            fair_share = 0  # Avoid division by zero if both are zero\n        else:\n            fair_share = (token_self / (token_self + token_opp)) * 100\n\n        unfairness = max(0, fair_share - split_perc_self)\n        utility = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * unfairness\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.8131868131868132,
  "group_accuracies": {
    "Control": 0.8649870801033591,
    "Cocaine": 0.7667824074074074
  },
  "group_parameter_averages": {
    "Control": {
      "sensitivity_offer": 8.845467843866794,
      "penalty_magnitude_unfairness": 3.8751845416037702
    },
    "Cocaine": {
      "sensitivity_offer": 4.814343371973821,
      "penalty_magnitude_unfairness": 3.809426301034774
    }
  },
  "fitting_results": [
    {
      "sensitivity_offer": 0.004898806691236531,
      "penalty_magnitude_unfairness": 10.0,
      "success": true,
      "log_likelihood": -25.77399718198632,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 7.821399750103271,
      "penalty_magnitude_unfairness": 9.285626133054386,
      "success": true,
      "log_likelihood": -184.20680743672392,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.14301085923912407,
      "penalty_magnitude_unfairness": 0.2116762561624715,
      "success": true,
      "log_likelihood": -9.467360612669182,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.07035597814323485,
      "penalty_magnitude_unfairness": 0.13338537743281803,
      "success": true,
      "log_likelihood": -14.124161411640056,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 3.8242599019426695,
      "penalty_magnitude_unfairness": 8.923273220864903,
      "success": true,
      "log_likelihood": -70.46384689823589,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 4.391300512789572,
      "penalty_magnitude_unfairness": 4.430196740414537,
      "success": true,
      "log_likelihood": -93.8976025569929,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.13271284521895377,
      "penalty_magnitude_unfairness": 0.12083916095332249,
      "success": true,
      "log_likelihood": -11.475512612698624,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.09323558123708443,
      "penalty_magnitude_unfairness": 0.2047190142232233,
      "success": true,
      "log_likelihood": -10.36479785060714,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 6.649832195840819,
      "penalty_magnitude_unfairness": 8.05183073120168,
      "success": true,
      "log_likelihood": -138.08391841521225,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.004898972900233281,
      "penalty_magnitude_unfairness": 10.0,
      "success": true,
      "log_likelihood": -48.799848111990684,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 4.482909130296237,
      "penalty_magnitude_unfairness": 9.69840341789676,
      "success": true,
      "log_likelihood": -23.02587318104179,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 13.51445944407543,
      "penalty_magnitude_unfairness": 5.139485589407398,
      "success": true,
      "log_likelihood": -46.051102521071456,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 12.512014961693483,
      "penalty_magnitude_unfairness": 5.995696388555206,
      "success": true,
      "log_likelihood": -46.0517319121664,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.09641492942204014,
      "penalty_magnitude_unfairness": 0.12563701141772102,
      "success": true,
      "log_likelihood": -13.486305934303703,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 17.711719807054294,
      "penalty_magnitude_unfairness": 7.148262870074975,
      "success": true,
      "log_likelihood": -46.05170185755818,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.04298097850582927,
      "penalty_magnitude_unfairness": 0.09277075887681512,
      "success": true,
      "log_likelihood": -17.533065742232573,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.07195404749532125,
      "penalty_magnitude_unfairness": 0.09136673540671353,
      "success": true,
      "log_likelihood": -16.453330985474235,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 9.766979211309607,
      "penalty_magnitude_unfairness": 9.805921423049279,
      "success": true,
      "log_likelihood": -162.97839381408235,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.10455662758511765,
      "penalty_magnitude_unfairness": 0.12396171460991537,
      "success": true,
      "log_likelihood": -13.09086026403339,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.11766728261680603,
      "penalty_magnitude_unfairness": 0.13801556642804036,
      "success": true,
      "log_likelihood": -11.982489139086645,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 2.4998042400151204,
      "penalty_magnitude_unfairness": 9.999216976650622,
      "success": true,
      "log_likelihood": -24.412145280207312,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 19.287422802289402,
      "penalty_magnitude_unfairness": 3.342152104881899,
      "success": true,
      "log_likelihood": -92.04088019211743,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 5.515071060185718,
      "penalty_magnitude_unfairness": 2.548940617926803,
      "success": true,
      "log_likelihood": -138.1555186784206,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.004898930718656219,
      "penalty_magnitude_unfairness": 10.0,
      "success": true,
      "log_likelihood": -25.773997181955824,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.0367888855109459,
      "penalty_magnitude_unfairness": 0.06324043748807084,
      "success": true,
      "log_likelihood": -20.34236091055117,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 9.270380187381582,
      "penalty_magnitude_unfairness": 10.0,
      "success": true,
      "log_likelihood": -184.20680792050828,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 7.985497050569092,
      "penalty_magnitude_unfairness": 5.536702869698022,
      "success": true,
      "log_likelihood": -115.13547216766001,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 10.007049029286392,
      "penalty_magnitude_unfairness": 9.982091126495076,
      "success": true,
      "log_likelihood": -71.03403074910872,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 6.042586138001137,
      "penalty_magnitude_unfairness": 9.063879239202052,
      "success": true,
      "log_likelihood": -94.87599326342556,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 19.935261306672068,
      "penalty_magnitude_unfairness": 7.437515672574695,
      "success": true,
      "log_likelihood": -207.23265836681176,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.06804155876052766,
      "penalty_magnitude_unfairness": 0.0662098478578234,
      "success": true,
      "log_likelihood": -17.767533952976883,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 1.1351382266054963,
      "penalty_magnitude_unfairness": 8.87191828615689,
      "success": true,
      "log_likelihood": -46.093636615508046,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 17.009616046115664,
      "penalty_magnitude_unfairness": 0.0,
      "success": true,
      "log_likelihood": -23.02585092644049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 5.735388327058762,
      "penalty_magnitude_unfairness": 4.479560558493237,
      "success": true,
      "log_likelihood": -161.06499856979073,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.11207325264208576,
      "penalty_magnitude_unfairness": 0.11657499797105826,
      "success": true,
      "log_likelihood": -12.827105694951419,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 15.345540167897054,
      "penalty_magnitude_unfairness": 2.3358091579565974,
      "success": true,
      "log_likelihood": -230.2585070763611,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 8.594677235506069,
      "penalty_magnitude_unfairness": 9.296851775204631,
      "success": true,
      "log_likelihood": -161.18095735038563,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 3.2916538992801456,
      "penalty_magnitude_unfairness": 9.82456391038051,
      "success": true,
      "log_likelihood": -162.4648323067611,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.07372667259574048,
      "penalty_magnitude_unfairness": 0.15858400205895856,
      "success": true,
      "log_likelihood": -12.644071954900742,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.02572243875912038,
      "penalty_magnitude_unfairness": 0.02681774496868458,
      "success": true,
      "log_likelihood": -23.343993381750103,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.06392126755410009,
      "penalty_magnitude_unfairness": 0.039892086715974454,
      "success": true,
      "log_likelihood": -18.169152090314054,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 6.329913563217997,
      "penalty_magnitude_unfairness": 7.104561225521331,
      "success": true,
      "log_likelihood": -391.43932168313,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 4.130769763755766,
      "penalty_magnitude_unfairness": 7.544517318599253,
      "success": true,
      "log_likelihood": -184.20685586729843,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.034995302522195536,
      "penalty_magnitude_unfairness": 0.026951122859793775,
      "success": true,
      "log_likelihood": -22.300245537114755,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 9.961056799573184,
      "penalty_magnitude_unfairness": 10.0,
      "success": true,
      "log_likelihood": -255.08179753440612,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.15580569826237306,
      "penalty_magnitude_unfairness": 0.4149709647118531,
      "success": true,
      "log_likelihood": -5.2223080131130395,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 3.9777383340442642,
      "penalty_magnitude_unfairness": 8.508685181551733,
      "success": true,
      "log_likelihood": -92.09940702940789,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 13.551208332962958,
      "penalty_magnitude_unfairness": 0.059482679542030015,
      "success": true,
      "log_likelihood": -92.1034037165618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.004898974785409095,
      "penalty_magnitude_unfairness": 10.0,
      "success": true,
      "log_likelihood": -48.79984811199297,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 4.313516515829671,
      "penalty_magnitude_unfairness": 1.99264324849147,
      "success": true,
      "log_likelihood": -115.10107986298095,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.05563415507347511,
      "penalty_magnitude_unfairness": 0.0496005192929082,
      "success": true,
      "log_likelihood": -19.5135475499731,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.08005935013483355,
      "penalty_magnitude_unfairness": 0.11822916089316102,
      "success": true,
      "log_likelihood": -14.634884778634827,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.004898842143776271,
      "penalty_magnitude_unfairness": 10.0,
      "success": true,
      "log_likelihood": -25.77399718197441,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.04207472937926027,
      "penalty_magnitude_unfairness": 0.06925635316610843,
      "success": true,
      "log_likelihood": -19.64123846460434,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.04419038636252631,
      "penalty_magnitude_unfairness": 0.18806707242853532,
      "success": true,
      "log_likelihood": -10.73830048408164,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.10062711485272946,
      "penalty_magnitude_unfairness": 0.11844981855481972,
      "success": true,
      "log_likelihood": -13.49474113027351,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 18.102154319481617,
      "penalty_magnitude_unfairness": 0.8768868373044736,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 16.895285881460726,
      "penalty_magnitude_unfairness": 9.89812869108796,
      "success": true,
      "log_likelihood": -92.10345096259483,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 9.887504476214982,
      "penalty_magnitude_unfairness": 9.912369718668614,
      "success": true,
      "log_likelihood": -163.1374359977006,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 19.231634600850057,
      "penalty_magnitude_unfairness": 0.13365062433847053,
      "success": true,
      "log_likelihood": -69.07755278652137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.6077449123570331,
      "penalty_magnitude_unfairness": 10.0,
      "success": true,
      "log_likelihood": -5.494942940907852e-07,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.004898797605933753,
      "penalty_magnitude_unfairness": 10.0,
      "success": true,
      "log_likelihood": -71.8256990420707,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.07662400995417129,
      "penalty_magnitude_unfairness": 0.10035785647979312,
      "success": true,
      "log_likelihood": -15.707387974743373,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.08693089632671996,
      "penalty_magnitude_unfairness": 0.04129052644309729,
      "success": true,
      "log_likelihood": -14.600412466151083,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 4.136068309613746,
      "penalty_magnitude_unfairness": 9.650826090155222,
      "success": true,
      "log_likelihood": -208.61895272779006,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 14.365442769089295,
      "penalty_magnitude_unfairness": 2.152872206098367,
      "success": true,
      "log_likelihood": -253.28435800640167,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "success": true,
      "log_likelihood": -46.051701856480875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.0,
      "penalty_magnitude_unfairness": 10.0,
      "success": true,
      "log_likelihood": -25.798439648280272,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.029733088252410837,
      "penalty_magnitude_unfairness": 0.019197130406174812,
      "success": true,
      "log_likelihood": -22.884050122058117,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.004898969749200458,
      "penalty_magnitude_unfairness": 10.0,
      "success": true,
      "log_likelihood": -25.77399718195268,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 11.24804615137834,
      "penalty_magnitude_unfairness": 7.096010127206131,
      "success": true,
      "log_likelihood": -299.3360739453419,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.0,
      "penalty_magnitude_unfairness": 10.0,
      "success": true,
      "log_likelihood": -71.85014150835926,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.11492677802944053,
      "penalty_magnitude_unfairness": 0.16027499128896608,
      "success": true,
      "log_likelihood": -11.522953143524466,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.02637262979793529,
      "penalty_magnitude_unfairness": 0.016768160851219172,
      "success": true,
      "log_likelihood": -23.27463720638527,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.027614414988932388,
      "penalty_magnitude_unfairness": 10.0,
      "success": true,
      "log_likelihood": -25.15133770163955,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.07002711255039089,
      "penalty_magnitude_unfairness": 0.04923743508467165,
      "success": true,
      "log_likelihood": -17.539973462554993,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.018270600621563025,
      "penalty_magnitude_unfairness": 0.13877539118544158,
      "success": true,
      "log_likelihood": -12.434135206211893,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "success": true,
      "log_likelihood": -46.05170185648088,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.07657590946134216,
      "penalty_magnitude_unfairness": 0.11055964650838371,
      "success": true,
      "log_likelihood": -15.196106814468012,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.04763610276604439,
      "penalty_magnitude_unfairness": 0.02118811719951734,
      "success": true,
      "log_likelihood": -19.95457607720791,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "sensitivity_offer": {
        "r": 0.6204059928296952,
        "p": 5.808598680657842e-12
      },
      "penalty_magnitude_unfairness": {
        "r": 0.5406614320214196,
        "p": 6.375373191716841e-09
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 137.14444281290872,
  "bic_Control": 106.35481217456902,
  "bic_Cocaine": 164.7268202597547,
  "bic_results": {
    "average_bic": 137.14444281290872,
    "individual_bics": [
      58.71503224088486,
      375.58065275036006,
      26.101759102250583,
      35.41536070019233,
      148.094731673384,
      194.962242990898,
      7.167037869712219,
      30.11806310230947,
      7.167037869712219,
      27.896633578126497,
      283.3348747073367,
      104.76673410089359,
      53.218784238995795,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      99.26924291905513,
      99.27050170124502,
      7.167037869712219,
      34.13964974551963,
      99.27044159202858,
      42.233169361377364,
      40.07369984786069,
      333.1238255050769,
      33.348758404979,
      31.13201615508551,
      55.99132843732684,
      191.24879826114707,
      283.47807523375343,
      7.167037869712219,
      58.71503224082387,
      47.85175969801456,
      375.5806537179288,
      7.167037869712219,
      237.43798221223224,
      149.23509937512966,
      196.91902440376333,
      421.63235461053574,
      145.32214344995492,
      42.702105782865985,
      99.35431110792831,
      53.2187397297932,
      329.2970350164937,
      32.82124926681506,
      467.6840520296344,
      329.52895257768347,
      332.09670249043444,
      32.4551817867137,
      53.855024640412424,
      43.505342057540325,
      790.0456812431722,
      375.5807496115091,
      51.76752895114173,
      517.3306329457245,
      17.611653903138297,
      191.365851935728,
      191.37384531003582,
      104.76673410089816,
      237.36919760287412,
      46.19413297685842,
      36.43680743418187,
      58.715032240861035,
      46.449514806120895,
      28.6436388450755,
      34.15652013745924,
      145.32214344995484,
      191.3739398021019,
      333.44190987231343,
      145.32214344995495,
      7.167038975900808,
      150.8184359610536,
      38.581813826398964,
      36.36786280921439,
      424.40494333249234,
      513.7357538897156,
      99.27044158987397,
      58.76391717347276,
      52.93513812102845,
      58.71503224081758,
      605.8391857675961,
      145.32214344995484,
      150.86732089363073,
      30.212944163961154,
      53.716312289682755,
      57.46971328019132,
      42.246984802022205,
      32.03530828933601,
      99.27044158987398,
      37.559251505848245,
      47.07619003132804
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        58.71503224088486,
        375.58065275036006,
        26.101759102250583,
        35.41536070019233,
        148.094731673384,
        194.962242990898,
        7.167037869712219,
        30.11806310230947,
        7.167037869712219,
        27.896633578126497,
        283.3348747073367,
        104.76673410089359,
        53.218784238995795,
        7.167037869712219,
        7.167037869712219,
        7.167037869712219,
        7.167037869712219,
        99.26924291905513,
        99.27050170124502,
        7.167037869712219,
        34.13964974551963,
        99.27044159202858,
        42.233169361377364,
        40.07369984786069,
        333.1238255050769,
        33.348758404979,
        31.13201615508551,
        55.99132843732684,
        191.24879826114707,
        283.47807523375343,
        7.167037869712219,
        58.71503224082387,
        47.85175969801456,
        375.5806537179288,
        7.167037869712219,
        237.43798221223224,
        149.23509937512966,
        196.91902440376333,
        421.63235461053574,
        145.32214344995492,
        42.702105782865985,
        99.35431110792831,
        53.2187397297932
      ],
      "Cocaine": [
        329.2970350164937,
        32.82124926681506,
        467.6840520296344,
        329.52895257768347,
        332.09670249043444,
        32.4551817867137,
        53.855024640412424,
        43.505342057540325,
        790.0456812431722,
        375.5807496115091,
        51.76752895114173,
        517.3306329457245,
        17.611653903138297,
        191.365851935728,
        191.37384531003582,
        104.76673410089816,
        237.36919760287412,
        46.19413297685842,
        36.43680743418187,
        58.715032240861035,
        46.449514806120895,
        28.6436388450755,
        34.15652013745924,
        145.32214344995484,
        191.3739398021019,
        333.44190987231343,
        145.32214344995495,
        7.167038975900808,
        150.8184359610536,
        38.581813826398964,
        36.36786280921439,
        424.40494333249234,
        513.7357538897156,
        99.27044158987397,
        58.76391717347276,
        52.93513812102845,
        58.71503224081758,
        605.8391857675961,
        145.32214344995484,
        150.86732089363073,
        30.212944163961154,
        53.716312289682755,
        57.46971328019132,
        42.246984802022205,
        32.03530828933601,
        99.27044158987398,
        37.559251505848245,
        47.07619003132804
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- sensitivity_offer: r = 0.620\n- penalty_magnitude_unfairness: r = 0.541",
  "previous_models": [
    "Specification: utility = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, (token_self / (token_self + token_opp)) * 100 - split_perc_self)\nSummary: A utility model for responder decisions combining linear sensitivity to the offered percentage with a penalty proportional to the magnitude of deviation from the participant's fair share when the offer is unfair. The model uses two non-negative learnable parameters: sensitivity_offer and penalty_magnitude_unfairness. Utility increases with the offered percentage and decreases when the offer falls below the fair share, with the penalty magnitude scaling with the degree of unfairness.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 137.14444281290872\nOverall Accuracy: 0.8132\nGroup Accuracies:\n- Control: 0.8650\n- Cocaine: 0.7668\n\nParameter Recovery:\n- sensitivity_offer: r = 0.620\n- penalty_magnitude_unfairness: r = 0.541"
  ]
}