Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable "token_self". The other variable, "token_opp", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.

Again, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.

Note that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same "fairness".

Below is the description of each variable in the dataset, which will be followed by information about the data type of the variable:

trial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]
trial_role = the role of the participant [1 = responder, 2 = proposer]
token_opp = number of tokens found by the opponent
token_self = number of tokens found by the participant
combined_earning = amount of money earned in total (note that each token found is £3)
split_opp = the proposed share of the opponent (in £)
split_self = the proposed share for the participant (in £)
splitperc_opp = same but in %
split_perc_self = same but in %
accept = whether the participant responded accept (1) or reject (0))
accepted_amount = if accepted, what is the amount gain (in £)
accepted_perc = same as above but in %
proposed_perc = when participant is the proposer, what is the % proposed to the opponent
proposed_amount = when participant is the proposer, what is the amount proposed to the opponent

Desired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).

The model should:
1. Predict only responder behavior (should target "accept = whether the participant responded accept (1) or reject (0)")
2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.
3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).
4. Predict utility, where less than 0 is less than 50% likely.

For any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).

Then, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.
For example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.

Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.

```json
{
  "variables": {
    "variable_name": {
      "description": "Clear description",
      "range": {
        "min": value,
        "max": value,
        "inclusive_min": boolean,
        "inclusive_max": boolean
      },
      "distribution": {
        "type": "distribution type",
        "parameters": {}
      },
      "learnable": boolean,
      "source": "learnable/data/calculated"
    }
  }
}
```
</VARIABLES>

Example #1:
<EXAMPLE>
(Model of a Random Choice Task):
Let me think through this step by step...
[your reasoning here]

<MODEL>
U_i = beta_param + epsilon_param * E + eta_param * N
</MODEL>

<VARIABLES>
{
  "variables": {
    "U_i": {
      "description": "Utility of choosing action i",
      "range": {
        "min": "-inf",
        "max": "inf"
      },
      "learnable": false,
      "source": "calculated"
    },
    "beta_param": {
      "description": "Base tendency parameter (inherent preference)",
      "range": {
        "min": 0,
        "max": 1
      },
      "learnable": true,
      "source": "learnable"
    },
    "epsilon_param": {
      "description": "Environmental sensitivity parameter",
      "range": {
        "min": "-inf",
        "max": "inf"
      },
      "learnable": true,
      "source": "learnable"
    },
    "E": {
      "description": "Environmental cue value",
      "range": {
        "min": "-inf",
        "max": "inf"
      },
      "learnable": false,
      "source": "data"
    },
    "eta_param": {
      "description": "Noise parameter",
      "range": {
        "min": 0,
        "max": 1,
        "exclusive_max": true
      },
      "learnable": true,
      "source": "learnable"
    },
    "N": {
      "description": "Random noise drawn from normal distribution N(0,1)",
      "distribution": {
        "type": "normal",
        "mean": 0,
        "std": 1
      },
      "learnable": false,
      "source": "calculated"
    }
  }
}
</VARIABLES>
<SUMMARY>
A linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.
</SUMMARY>
</EXAMPLE>

Please be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.

The parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.

Model Type:
Your model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.

Instructions: In the previous run (Run 19), we attempted to improve parameter recovery of a successful model structure by adding a bias term (`beta_bias`). While accuracy improved (0.832) and recovery for `penalty_magnitude_unfairness` reached the target (0.741), recovery for `sensitivity_offer` decreased (0.553), and the new `beta_bias` parameter was essentially unrecoverable (0.002). This indicates the 3-parameter structure did not fully resolve the identifiability issues.

For this run (Run 20), the primary goal remains to achieve parameter recovery >= 0.7 for *all* learnable parameters. Given the failure of the `beta_bias` term to be recovered, we will simplify the model structure by removing it and also simplify the unfairness penalty term, aiming for better parameter disentanglement.

Consider a new model structure with two learnable parameters:
`U = sensitivity_offer * split_perc_self - penalty_unfair_flat * max(0, -sign(split_perc_self - fair_perc_self))`

This model includes:
1.  `sensitivity_offer`: Represents a linear sensitivity to the offered percentage (`split_perc_self`). A higher value means greater utility for higher offers. This parameter should be non-negative.
2.  `penalty_unfair_flat`: Represents a *fixed* penalty subtracted from the utility *only* when the offer is strictly unfair (`split_perc_self < fair_perc_self`). The term `max(0, -sign(split_perc_self - fair_perc_self))` evaluates to 1 for unfair offers and 0 otherwise. This parameter should be non-negative.

This structure removes the unrecoverable bias term and replaces the magnitude-dependent penalty (`penalty_magnitude_unfairness * magnitude_of_unfairness`) with a simpler, fixed penalty (`penalty_unfair_flat`) applied regardless of how *much* the offer is below fair, only whether it *is* below fair. This might help distinguish the overall sensitivity to the offered amount from the discrete effect of an offer being perceived as unfair.

**Guidance for the Next Model (Run 20):**

Design a computational model implementing this specific structure. The primary goal is to achieve parameter recovery >= 0.7 for *all* learnable parameters while maintaining good BIC and accuracy.

*   **Prioritize Parameter Recovery:** Implement the specified structure precisely to test if simplifying the penalty term improves the identifiability of `sensitivity_offer` and introduces a recoverable `penalty_unfair_flat`.
*   **Parameter Constraints:**
    *   `sensitivity_offer`: Define clear, generous, finite, non-negative bounds. Suggest [0, 20].
    *   `penalty_unfair_flat`: Define clear, generous, finite, non-negative bounds. Suggest [0, 10].
*   **Model Specification:** Provide the mathematical formula between <MODEL> tags using the suggested structure: `U = sensitivity_offer * split_perc_self - penalty_unfair_flat * max(0, -sign(split_perc_self - fair_perc_self))`. Ensure the formula includes the necessary variables and parameters.
*   **Calculated Variables:** Remember `fair_perc_self` needs to be calculated as `(token_self / (token_self + token_opp)) * 100`. The term `max(0, -sign(split_perc_self - fair_perc_self))` is a calculated binary variable indicating unfairness (1 if unfair, 0 otherwise). Include `U`, `fair_perc_self`, `token_self`, and `token_opp` in your variable descriptions with `source: "calculated"` or `source: "data"` as appropriate.
*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for all variables used in the <MODEL> formula (`U`, `split_perc_self`, `fair_perc_self`, `token_self`, `token_opp`, `sensitivity_offer`, `penalty_unfair_flat`), including the specified bounds and learnable status for the parameters. Clearly describe the role of `fair_perc_self` and how the `max(0, -sign(...))` term functions.
*   **Target Variable:** Specify "accept" as the target variable using <target_variable> tags.
*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing the model structure and its components.

Remember to use variables relevant for responder trials (`trial_role == 1`).

If this simplified structure still fails to yield sufficient parameter recovery for all parameters, future runs may need to explore fundamentally different functional forms for utility, consider non-linear relationships, or incorporate how relative contributions (tokens) influence perceived fairness or utility in ways not solely captured by the `fair_perc_self` calculation.

For run 20 of 100, please think through this step by step, focusing intently on designing a model structure that addresses the parameter recovery issue observed in Run 19 by simplifying the model and the unfairness penalty. Then provide your model specification, variable descriptions, target variable, and summary.

Available Data Variables:
- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.