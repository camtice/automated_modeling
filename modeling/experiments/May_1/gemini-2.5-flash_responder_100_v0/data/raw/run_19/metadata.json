{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0))\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n```json\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n```\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\\nLet me think through this step by step...\\n[your reasoning here]\\n\\n<MODEL>\\nU_i = beta_param + epsilon_param * E + eta_param * N\\n</MODEL>\\n\\n<VARIABLES>\\n{\\n  \"variables\": {\\n    \"U_i\": {\\n      \"description\": \"Utility of choosing action i\",\\n      \"range\": {\\n        \"min\": \"-inf\",\\n        \"max\": \"inf\"\\n      },\\\n      \"learnable\": false,\\n      \"source\": \"calculated\"\\n    },\\\n    \"beta_param\": {\\n      \"description\": \"Base tendency parameter (inherent preference)\",\\n      \"range\": {\\n        \"min\": 0,\\n        \"max\": 1\\n      },\\\n      \"learnable\": true,\\n      \"source\": \"learnable\"\\n    },\\\n    \"epsilon_param\": {\\n      \"description\": \"Environmental sensitivity parameter\",\\n      \"range\": {\\n        \"min\": \"-inf\",\\n        \"max\": \"inf\"\\n      },\\\n      \"learnable\": true,\\n      \"source\": \"learnable\"\\n    },\\\n    \"E\": {\\n      \"description\": \"Environmental cue value\",\\n      \"range\": {\\n        \"min\": \"-inf\",\\n        \"max\": \"inf\"\\n      },\\\n      \"learnable\": false,\\n      \"source\": \"data\"\\n    },\\\n    \"eta_param\": {\\n      \"description\": \"Noise parameter\",\\n      \"range\": {\\n        \"min\": 0,\\n        \"max\": 1,\\\n        \"exclusive_max\": true\\n      },\\\n      \"learnable\": true,\\n      \"source\": \"learnable\"\\n    },\\\n    \"N\": {\\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\\n      \"distribution\": {\\\n        \"type\": \"normal\",\\n        \"mean\": 0,\\n        \"std\": 1\\n      },\\\n      \"learnable\": false,\\n      \"source\": \"calculated\"\\n    }\\n  }\\n}\\n</VARIABLES>\\n<SUMMARY>\\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\\n</SUMMARY>\\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: The previous model (Run 18) achieved the best BIC (137.14) and accuracy (0.813) so far by combining a linear sensitivity to the offered percentage (`split_perc_self`) with a penalty proportional to the magnitude of deviation below the fair share (`max(0, fair_perc_self - split_perc_self)`). However, parameter recovery for both `sensitivity_offer` (r=0.620) and `penalty_magnitude_unfairness` (r=0.541) remained below the required 0.7 threshold, making the model unusable despite its good fit.\n\nPoor parameter recovery suggests that the parameters might not have sufficiently distinct influences on utility across the data, or that some shared variance is being absorbed by multiple parameters.\n\nFor this run (Run 19), we will attempt to improve parameter recovery by adding a baseline bias term to the utility function. This new parameter, `beta_bias`, will capture the overall propensity to accept an offer, independent of the specific offer value or its fairness. By explicitly modeling this baseline, we hypothesize that `sensitivity_offer` and `penalty_magnitude_unfairness` may become more disentangled, leading to improved recovery.\n\nConsider a model where the utility of accepting an offer (`U`) is calculated as:\n`U = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, fair_perc_self - split_perc_self) + beta_bias`\n\nThis model has three learnable parameters:\n1.  `sensitivity_offer`: Represents a base sensitivity to the percentage amount offered to the participant (`split_perc_self`). A higher value means greater utility for higher offers. This parameter should be non-negative.\n2.  `penalty_magnitude_unfairness`: Represents a multiplier for the penalty applied when the offer is strictly unfair. The penalty term `max(0, fair_perc_self - split_perc_self)` captures the degree of unfairness. This parameter should be non-negative.\n3.  `beta_bias`: Represents a general bias towards accepting offers, shifting the utility function up or down regardless of the offer details. This parameter can be positive or negative (i.e., unbounded).\n\n**Guidance for the Next Model (Run 19):**\n\nDesign a computational model implementing this specific structure by adding the `beta_bias` term to the previously successful formula. The primary goal is to achieve parameter recovery >= 0.7 for *all* learnable parameters while maintaining good BIC and accuracy.\n\n*   **Prioritize Parameter Recovery:** Implement the specified structure precisely to test if adding a bias term improves the identifiability of `sensitivity_offer` and `penalty_magnitude_unfairness`, and ensure `beta_bias` itself is recoverable.\n*   **Parameter Constraints:**\n    *   `sensitivity_offer`: Define clear, generous, finite, non-negative bounds. Suggest [0, 20].\n    *   `penalty_magnitude_unfairness`: Define clear, generous, finite, non-negative bounds. Suggest [0, 10].\n    *   `beta_bias`: Define clear, generous, finite bounds. Suggest [-10, 10]. This parameter can be positive or negative.\n*   **Model Specification:** Provide the mathematical formula between <MODEL> tags using the suggested structure: `U = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, fair_perc_self - split_perc_self) + beta_bias`. Ensure the formula includes the necessary variables (`split_perc_self`, `fair_perc_self`) and parameters. Remember `fair_perc_self` needs to be calculated as `(token_self / (token_self + token_opp)) * 100`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for all variables used in the <MODEL> formula (`U`, `split_perc_self`, `fair_perc_self`, `token_self`, `token_opp`, `sensitivity_offer`, `penalty_magnitude_unfairness`, `beta_bias`), including the specified bounds and learnable status for the parameters.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing the model structure and its components, including the new bias term.\n\nRemember that `fair_perc_self` can be calculated as `(token_self / (token_self + token_opp)) * 100`. Use variables relevant for responder trials (`trial_role == 1`).\n\nWhile focusing on this specific structure for Run 19 to test the bias hypothesis, also keep in mind that creative, out-of-the-box approaches to modeling utility and fairness perception may be needed in future runs if recovery issues persist. Consider how deviations from fairness might be perceived non-linearly, or how the relative contributions (tokens) might influence utility in ways not solely captured by the fairness percentage itself.\n\nFor run 19 of 100, please think through this step by step, focusing intently on designing a model structure that addresses the parameter recovery issue observed in Run 18 by adding a baseline bias term. Then provide your model specification, variable descriptions, target variable, and summary.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n</previous_instructions>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0))\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n```json\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n```\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\\nLet me think through this step by step...\\n[your reasoning here]\\n\\n<MODEL>\\nU_i = beta_param + epsilon_param * E + eta_param * N\\n</MODEL>\\n\\n<VARIABLES>\\n{\\n  \"variables\": {\\n    \"U_i\": {\\n      \"description\": \"Utility of choosing action i\",\\n      \"range\": {\\n        \"min\": \"-inf\",\\n        \"max\": \"inf\"\\n      },\\\n      \"learnable\": false,\\n      \"source\": \"calculated\"\\n    },\\\n    \"beta_param\": {\\n      \"description\": \"Base tendency parameter (inherent preference)\",\\n      \"range\": {\\n        \"min\": 0,\\n        \"max\": 1\\n      },\\\n      \"learnable\": true,\\n      \"source\": \"learnable\"\\n    },\\\n    \"epsilon_param\": {\\n      \"description\": \"Environmental sensitivity parameter\",\\n      \"range\": {\\n        \"min\": \"-inf\",\\n        \"max\": \"inf\"\\n      },\\\n      \"learnable\": true,\\n      \"source\": \"learnable\"\\n    },\\\n    \"E\": {\\n      \"description\": \"Environmental cue value\",\\n      \"range\": {\\n        \"min\": \"-inf\",\\n        \"max\": \"inf\"\\n      },\\\n      \"learnable\": false,\\n      \"source\": \"data\"\\n    },\\\n    \"eta_param\": {\\n      \"description\": \"Noise parameter\",\\n      \"range\": {\\n        \"min\": 0,\\n        \"max\": 1,\\\n        \"exclusive_max\": true\\n      },\\\n      \"learnable\": true,\\n      \"source\": \"learnable\"\\n    },\\\n    \"N\": {\\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\\n      \"distribution\": {\\\n        \"type\": \"normal\",\\n        \"mean\": 0,\\n        \"std\": 1\\n      },\\\n      \"learnable\": false,\\n      \"source\": \"calculated\"\\n    }\\n  }\\n}\\n</VARIABLES>\\n<SUMMARY>\\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\\n</SUMMARY>\\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions: The previous model (Run 18) achieved the best BIC (137.14) and accuracy (0.813) so far by combining a linear sensitivity to the offered percentage (`split_perc_self`) with a penalty proportional to the magnitude of deviation below the fair share (`max(0, fair_perc_self - split_perc_self)`). However, parameter recovery for both `sensitivity_offer` (r=0.620) and `penalty_magnitude_unfairness` (r=0.541) remained below the required 0.7 threshold, making the model unusable despite its good fit.\n\nPoor parameter recovery suggests that the parameters might not have sufficiently distinct influences on utility across the data, or that some shared variance is being absorbed by multiple parameters.\n\nFor this run (Run 19), we will attempt to improve parameter recovery by adding a baseline bias term to the utility function. This new parameter, `beta_bias`, will capture the overall propensity to accept an offer, independent of the specific offer value or its fairness. By explicitly modeling this baseline, we hypothesize that `sensitivity_offer` and `penalty_magnitude_unfairness` may become more disentangled, leading to improved recovery.\n\nConsider a model where the utility of accepting an offer (`U`) is calculated as:\n`U = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, fair_perc_self - split_perc_self) + beta_bias`\n\nThis model has three learnable parameters:\n1.  `sensitivity_offer`: Represents a base sensitivity to the percentage amount offered to the participant (`split_perc_self`). A higher value means greater utility for higher offers. This parameter should be non-negative.\n2.  `penalty_magnitude_unfairness`: Represents a multiplier for the penalty applied when the offer is strictly unfair. The penalty term `max(0, fair_perc_self - split_perc_self)` captures the degree of unfairness. This parameter should be non-negative.\n3.  `beta_bias`: Represents a general bias towards accepting offers, shifting the utility function up or down regardless of the offer details. This parameter can be positive or negative (i.e., unbounded).\n\n**Guidance for the Next Model (Run 19):**\n\nDesign a computational model implementing this specific structure by adding the `beta_bias` term to the previously successful formula. The primary goal is to achieve parameter recovery >= 0.7 for *all* learnable parameters while maintaining good BIC and accuracy.\n\n*   **Prioritize Parameter Recovery:** Implement the specified structure precisely to test if adding a bias term improves the identifiability of `sensitivity_offer` and `penalty_magnitude_unfairness`, and ensure `beta_bias` itself is recoverable.\n*   **Parameter Constraints:**\n    *   `sensitivity_offer`: Define clear, generous, finite, non-negative bounds. Suggest [0, 20].\n    *   `penalty_magnitude_unfairness`: Define clear, generous, finite, non-negative bounds. Suggest [0, 10].\n    *   `beta_bias`: Define clear, generous, finite bounds. Suggest [-10, 10]. This parameter can be positive or negative.\n*   **Model Specification:** Provide the mathematical formula between <MODEL> tags using the suggested structure: `U = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, fair_perc_self - split_perc_self) + beta_bias`. Ensure the formula includes the necessary variables (`split_perc_self`, `fair_perc_self`) and parameters. Remember `fair_perc_self` needs to be calculated as `(token_self / (token_self + token_opp)) * 100`.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for all variables used in the <MODEL> formula (`U`, `split_perc_self`, `fair_perc_self`, `token_self`, `token_opp`, `sensitivity_offer`, `penalty_magnitude_unfairness`, `beta_bias`), including the specified bounds and learnable status for the parameters.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing the model structure and its components, including the new bias term.\n\nRemember that `fair_perc_self` can be calculated as `(token_self / (token_self + token_opp)) * 100`. Use variables relevant for responder trials (`trial_role == 1`).\n\nWhile focusing on this specific structure for Run 19 to test the bias hypothesis, also keep in mind that creative, out-of-the-box approaches to modeling utility and fairness perception may be needed in future runs if recovery issues persist. Consider how deviations from fairness might be perceived non-linearly, or how the relative contributions (tokens) might influence utility in ways not solely captured by the fairness percentage itself.\n\nFor run 19 of 100, please think through this step by step, focusing intently on designing a model structure that addresses the parameter recovery issue observed in Run 18 by adding a baseline bias term. Then provide your model specification, variable descriptions, target variable, and summary.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n</previous_instructions>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nU = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, fair_perc_self - split_perc_self) + beta_bias\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage (%)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The fair percentage share for the participant based on their token contribution. Calculated as (token_self / (token_self + token_opp)) * 100.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n     \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sensitivity_offer\": {\n      \"description\": \"Parameter representing sensitivity to the offered percentage split_perc_self. Higher values indicate greater utility for higher offers.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"penalty_magnitude_unfairness\": {\n      \"description\": \"Parameter representing the multiplier for the penalty applied when the offer is strictly unfair (split_perc_self < fair_perc_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n     \"beta_bias\": {\n      \"description\": \"General bias parameter influencing the overall propensity to accept an offer, independent of the specific offer details.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts the utility of accepting an offer for a participant acting as a responder. The utility is calculated based on the percentage share offered to the participant, a penalty term for receiving less than their fair share (calculated from token contributions), and a general acceptance bias. The model includes three learnable parameters: sensitivity to the offer percentage, a multiplier for the unfairness penalty magnitude, and an additive bias term. It is designed to be fitted on responder trials only.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['sensitivity_offer', 'penalty_magnitude_unfairness', 'beta_bias']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, fair_perc_self - split_perc_self) + beta_bias\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage (%)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The fair percentage share for the participant based on their token contribution. Calculated as (token_self / (token_self + token_opp)) * 100.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sensitivity_offer\": {\n      \"description\": \"Parameter representing sensitivity to the offered percentage split_perc_self. Higher values indicate greater utility for higher offers.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"penalty_magnitude_unfairness\": {\n      \"description\": \"Parameter representing the multiplier for the penalty applied when the offer is strictly unfair (split_perc_self < fair_perc_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_bias\": {\n      \"description\": \"General bias parameter influencing the overall propensity to accept an offer, independent of the specific offer details.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, sensitivity_offer=1, penalty_magnitude_unfairness=1, beta_bias=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        \n        # Calculate fair percentage\n        if (token_self + token_opp) == 0:\n            fair_perc_self = 50  # Default to 50 if both are zero to avoid division by zero\n        else:\n            fair_perc_self = (token_self / (token_self + token_opp)) * 100\n\n        # Calculate utility\n        unfairness_penalty = max(0, fair_perc_self - split_perc_self)\n        U = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * unfairness_penalty + beta_bias\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '''[{\"ID\":0,\"group\":\"group1\",\"trial_number\":1,\"trial_type\":1,\"trial_role\":1,\"token_opp\":50,\"token_self\":50,\"combined_earning\":100,\"split_opp\":50.0,\"split_self\":50.0,\"splitperc_opp\":50,\"splitperc_self\":50,\"accept\":1.0,\"accepted_amount\":50.0,\"accepted_perc\":50.0,\"proposed_perc\":50.0,\"proposed_amount\":50.0},{\"ID\":1,\"group\":\"group1\",\"trial_number\":2,\"trial_type\":1,\"trial_role\":1,\"token_opp\":50,\"token_self\":50,\"combined_earning\":100,\"split_opp\":50.0,\"split_self\":50.0,\"splitperc_opp\":50,\"splitperc_self\":50,\"accept\":1.0,\"accepted_amount\":50.0,\"accepted_perc\":50.0,\"proposed_perc\":50.0,\"proposed_amount\":50.0},{\"ID\":2,\"group\":\"group1\",\"trial_number\":3,\"trial_type\":1,\"trial_role\":1,\"token_opp\":50,\"token_self\":50,\"combined_earning\":100,\"split_opp\":50.0,\"split_self\":50.0,\"splitperc_opp\":50,\"splitperc_self\":50,\"accept\":1.0,\"accepted_amount\":50.0,\"accepted_perc\":50.0,\"proposed_perc\":50.0,\"proposed_amount\":50.0}]'''\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1746097108.435437
    }
  ],
  "learnable_parameters": {
    "sensitivity_offer": {
      "description": "Parameter representing sensitivity to the offered percentage split_perc_self. Higher values indicate greater utility for higher offers.",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "penalty_magnitude_unfairness": {
      "description": "Parameter representing the multiplier for the penalty applied when the offer is strictly unfair (split_perc_self < fair_perc_self).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_bias": {
      "description": "General bias parameter influencing the overall propensity to accept an offer, independent of the specific offer details.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, fair_perc_self - split_perc_self) + beta_bias",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant in percentage (%)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "fair_perc_self": {
      "description": "The fair percentage share for the participant based on their token contribution. Calculated as (token_self / (token_self + token_opp)) * 100.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sensitivity_offer": {
      "description": "Parameter representing sensitivity to the offered percentage split_perc_self. Higher values indicate greater utility for higher offers.",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "penalty_magnitude_unfairness": {
      "description": "Parameter representing the multiplier for the penalty applied when the offer is strictly unfair (split_perc_self < fair_perc_self).",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_bias": {
      "description": "General bias parameter influencing the overall propensity to accept an offer, independent of the specific offer details.",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "This model predicts the utility of accepting an offer for a participant acting as a responder. The utility is calculated based on the percentage share offered to the participant, a penalty term for receiving less than their fair share (calculated from token contributions), and a general acceptance bias. The model includes three learnable parameters: sensitivity to the offer percentage, a multiplier for the unfairness penalty magnitude, and an additive bias term. It is designed to be fitted on responder trials only.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nU = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, fair_perc_self - split_perc_self) + beta_bias\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage (%)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The fair percentage share for the participant based on their token contribution. Calculated as (token_self / (token_self + token_opp)) * 100.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n     \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sensitivity_offer\": {\n      \"description\": \"Parameter representing sensitivity to the offered percentage split_perc_self. Higher values indicate greater utility for higher offers.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"penalty_magnitude_unfairness\": {\n      \"description\": \"Parameter representing the multiplier for the penalty applied when the offer is strictly unfair (split_perc_self < fair_perc_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n     \"beta_bias\": {\n      \"description\": \"General bias parameter influencing the overall propensity to accept an offer, independent of the specific offer details.\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts the utility of accepting an offer for a participant acting as a responder. The utility is calculated based on the percentage share offered to the participant, a penalty term for receiving less than their fair share (calculated from token contributions), and a general acceptance bias. The model includes three learnable parameters: sensitivity to the offer percentage, a multiplier for the unfairness penalty magnitude, and an additive bias term. It is designed to be fitted on responder trials only.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, fair_perc_self - split_perc_self) + beta_bias\nSummary: This model predicts the utility of accepting an offer for a participant acting as a responder. The utility is calculated based on the percentage share offered to the participant, a penalty term for receiving less than their fair share (calculated from token contributions), and a general acceptance bias. The model includes three learnable parameters: sensitivity to the offer percentage, a multiplier for the unfairness penalty magnitude, and an additive bias term. It is designed to be fitted on responder trials only.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, sensitivity_offer=1, penalty_magnitude_unfairness=1, beta_bias=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        \n        # Calculate fair percentage\n        if (token_self + token_opp) == 0:\n            fair_perc_self = 50  # Default to 50 if both are zero to avoid division by zero\n        else:\n            fair_perc_self = (token_self / (token_self + token_opp)) * 100\n\n        # Calculate utility\n        unfairness_penalty = max(0, fair_perc_self - split_perc_self)\n        U = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * unfairness_penalty + beta_bias\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.8315018315018315,
  "group_accuracies": {
    "Control": 0.8888888888888888,
    "Cocaine": 0.7800925925925926
  },
  "group_parameter_averages": {
    "Control": {
      "sensitivity_offer": 7.858040576861338,
      "penalty_magnitude_unfairness": 3.3407648557012966,
      "beta_bias": -0.6109714618048598
    },
    "Cocaine": {
      "sensitivity_offer": 5.651816148113965,
      "penalty_magnitude_unfairness": 3.399995915834874,
      "beta_bias": -2.082089921843068
    }
  },
  "fitting_results": [
    {
      "sensitivity_offer": 0.22550597902114472,
      "penalty_magnitude_unfairness": 10.0,
      "beta_bias": -10.0,
      "success": true,
      "log_likelihood": -24.15604166413042,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 7.883068271400747,
      "penalty_magnitude_unfairness": 10.0,
      "beta_bias": 3.2364214444260853,
      "success": true,
      "log_likelihood": -184.2024069164603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 6.483141704325678,
      "penalty_magnitude_unfairness": 7.843940207580229,
      "beta_bias": -5.970790146427047,
      "success": true,
      "log_likelihood": -114.97818583361824,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.14443470895181626,
      "penalty_magnitude_unfairness": 0.10016171345586893,
      "beta_bias": -3.0450488008493743,
      "success": true,
      "log_likelihood": -13.330419048514768,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.0,
      "penalty_magnitude_unfairness": 0.562228900092288,
      "beta_bias": 10.0,
      "success": true,
      "log_likelihood": -5.009079036521337,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.21471645174783807,
      "penalty_magnitude_unfairness": 0.09019462922139507,
      "beta_bias": -3.2554231134857687,
      "success": true,
      "log_likelihood": -11.01455367449812,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "beta_bias": 6.10454916643065,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 15.178245709045221,
      "penalty_magnitude_unfairness": 4.1549085456594295,
      "beta_bias": -5.021963755767014,
      "success": true,
      "log_likelihood": -229.00837110971423,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "beta_bias": 10.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.07558896250919715,
      "penalty_magnitude_unfairness": 0.21537897451908403,
      "beta_bias": 0.7769569758435966,
      "success": true,
      "log_likelihood": -10.32346889098153,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 6.345976936449024,
      "penalty_magnitude_unfairness": 10.0,
      "beta_bias": -1.0638281630860145,
      "success": true,
      "log_likelihood": -0.001119740204418169,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.23817572737061324,
      "penalty_magnitude_unfairness": 0.09123125353622279,
      "beta_bias": -10.0,
      "success": true,
      "log_likelihood": -4.964305033037351,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 3.0211831147443275,
      "penalty_magnitude_unfairness": 6.824070988498397,
      "beta_bias": 6.375031319426386,
      "success": true,
      "log_likelihood": -23.026062128621188,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 9.391048914942084,
      "penalty_magnitude_unfairness": 0.2152300808913432,
      "beta_bias": -7.497970916759855,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "beta_bias": -2.459066748295267,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "beta_bias": 3.114123048984002,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "beta_bias": 10.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 12.462166486139328,
      "penalty_magnitude_unfairness": 4.5438776068759426,
      "beta_bias": -6.719563161874877,
      "success": true,
      "log_likelihood": -46.0511202788357,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.13670099788725842,
      "penalty_magnitude_unfairness": 0.2693599007295232,
      "beta_bias": 8.226003051273713,
      "success": true,
      "log_likelihood": -4.400860245594455,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "beta_bias": 2.6152914529615465,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 7.251743136599178,
      "penalty_magnitude_unfairness": 6.8585234636874475,
      "beta_bias": -10.0,
      "success": true,
      "log_likelihood": -116.63441968626104,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 13.365847049157253,
      "penalty_magnitude_unfairness": 5.258612202746417,
      "beta_bias": 6.606993432052289,
      "success": true,
      "log_likelihood": -46.05170188177013,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.2922245543772691,
      "penalty_magnitude_unfairness": 0.0,
      "beta_bias": -10.0,
      "success": true,
      "log_likelihood": -9.961110927554952,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.18059764001995113,
      "penalty_magnitude_unfairness": 0.041955583136754966,
      "beta_bias": -4.370698117633947,
      "success": true,
      "log_likelihood": -14.900437636750855,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 3.1078377577957474,
      "penalty_magnitude_unfairness": 7.828957856669673,
      "beta_bias": 8.66056428937142,
      "success": true,
      "log_likelihood": -116.51520428557147,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 5.3570732423519924,
      "penalty_magnitude_unfairness": 5.637530507428688,
      "beta_bias": 5.98136875154573,
      "success": true,
      "log_likelihood": -94.64047515606904,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.404918939625149,
      "penalty_magnitude_unfairness": 0.06459497007060315,
      "beta_bias": -10.0,
      "success": true,
      "log_likelihood": -6.644935085920456,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.4967714897998702,
      "penalty_magnitude_unfairness": 0.8438869254105549,
      "beta_bias": -10.0,
      "success": true,
      "log_likelihood": -2.5765008527441897,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 14.080943569453208,
      "penalty_magnitude_unfairness": 1.8260700769856009,
      "beta_bias": -9.341920271970901,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.031529251127138475,
      "penalty_magnitude_unfairness": 0.09149663715834082,
      "beta_bias": 2.7348355574314787,
      "success": true,
      "log_likelihood": -14.077856824745663,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "beta_bias": 6.2053486405094445,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.22550597842518155,
      "penalty_magnitude_unfairness": 10.0,
      "beta_bias": -10.0,
      "success": true,
      "log_likelihood": -24.15604166413041,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.2595983368135955,
      "penalty_magnitude_unfairness": 0.0,
      "beta_bias": -8.484300898242708,
      "success": true,
      "log_likelihood": -13.40057071002661,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.1979793088708401,
      "penalty_magnitude_unfairness": 0.08274513185046693,
      "beta_bias": -5.321864691230686,
      "success": true,
      "log_likelihood": -12.352723670886382,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "beta_bias": 10.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 14.459538502149224,
      "penalty_magnitude_unfairness": 10.0,
      "beta_bias": 0.021138596713577,
      "success": true,
      "log_likelihood": -115.1293059671962,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 9.444268861670926,
      "penalty_magnitude_unfairness": 7.989284569920236,
      "beta_bias": 9.612422661488038,
      "success": true,
      "log_likelihood": -70.4638471351332,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 4.971621599842169,
      "penalty_magnitude_unfairness": 7.457441771005645,
      "beta_bias": 0.00020547454656937394,
      "success": true,
      "log_likelihood": -94.87600444097001,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 6.778318552776627,
      "penalty_magnitude_unfairness": 5.6858794597665945,
      "beta_bias": 5.134264973718795,
      "success": true,
      "log_likelihood": -185.59196126040496,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "beta_bias": -6.178803122263279,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 4.587972972343446,
      "penalty_magnitude_unfairness": 8.499138328845696,
      "beta_bias": -4.091808279888631,
      "success": true,
      "log_likelihood": -161.18103418538462,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 1.4563895491511332,
      "penalty_magnitude_unfairness": 10.0,
      "beta_bias": -5.745481238945299,
      "success": true,
      "log_likelihood": -46.08830880147623,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 9.145110548153374,
      "penalty_magnitude_unfairness": 0.5761885094133123,
      "beta_bias": 6.8912397323883745,
      "success": true,
      "log_likelihood": -23.02585092644049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 6.022941465633694,
      "penalty_magnitude_unfairness": 4.561903862908197,
      "beta_bias": -2.1201477986330852,
      "success": true,
      "log_likelihood": -161.16412903180006,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 8.566648733267334,
      "penalty_magnitude_unfairness": 8.302104783451583,
      "beta_bias": -7.232246492432751,
      "success": true,
      "log_likelihood": -118.06656238595993,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 13.201574859744136,
      "penalty_magnitude_unfairness": 5.998839656297523,
      "beta_bias": 0.5035695443221181,
      "success": true,
      "log_likelihood": -138.15510577951696,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 16.624566647691736,
      "penalty_magnitude_unfairness": 2.6672824975568465,
      "beta_bias": 2.345670478545914,
      "success": true,
      "log_likelihood": -391.43946136620576,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.10631102361944798,
      "penalty_magnitude_unfairness": 0.04294191037685835,
      "beta_bias": -2.9865361469470804,
      "success": true,
      "log_likelihood": -17.811827237899564,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.0,
      "penalty_magnitude_unfairness": 0.23649229795571053,
      "beta_bias": 3.873897923850655,
      "success": true,
      "log_likelihood": -10.798490400856586,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.08249251760966868,
      "penalty_magnitude_unfairness": 0.0,
      "beta_bias": -2.345245217436132,
      "success": true,
      "log_likelihood": -22.20542090354717,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 8.53479041650355,
      "penalty_magnitude_unfairness": 4.766348848222321,
      "beta_bias": 4.541060793182868,
      "success": true,
      "log_likelihood": -184.2067077273195,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.22550612981652743,
      "penalty_magnitude_unfairness": 10.0,
      "beta_bias": -10.0,
      "success": true,
      "log_likelihood": -70.20774352422647,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.2411475419290006,
      "penalty_magnitude_unfairness": 0.0,
      "beta_bias": -7.01605065086097,
      "success": true,
      "log_likelihood": -14.300608555061405,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 12.883067899630746,
      "penalty_magnitude_unfairness": 6.248945162931302,
      "beta_bias": 6.480497259265433,
      "success": true,
      "log_likelihood": -253.284360918591,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.0,
      "penalty_magnitude_unfairness": 0.1356719905412673,
      "beta_bias": 1.979913268494943,
      "success": true,
      "log_likelihood": -15.907461439064095,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 4.276918359525009,
      "penalty_magnitude_unfairness": 9.907944510159492,
      "beta_bias": -1.0729724802718485,
      "success": true,
      "log_likelihood": -24.412145287439724,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.033758979533774394,
      "penalty_magnitude_unfairness": 0.2427423381801811,
      "beta_bias": 1.5450429429175228,
      "success": true,
      "log_likelihood": -11.306324287585921,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "beta_bias": 6.542500081877169,
      "success": true,
      "log_likelihood": -92.1034037165618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.2255243062430417,
      "penalty_magnitude_unfairness": 10.0,
      "beta_bias": -10.0,
      "success": true,
      "log_likelihood": -47.1818928439112,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "beta_bias": 5.316510868750682,
      "success": true,
      "log_likelihood": -161.18095650668326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.10936840672591357,
      "penalty_magnitude_unfairness": 0.019472905099457788,
      "beta_bias": -2.2730790266682472,
      "success": true,
      "log_likelihood": -18.954225781787066,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 3.962017164272868,
      "penalty_magnitude_unfairness": 8.183803973485082,
      "beta_bias": -3.8272573546353112,
      "success": true,
      "log_likelihood": -92.1035356277962,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.22550601076966953,
      "penalty_magnitude_unfairness": 10.0,
      "beta_bias": -10.0,
      "success": true,
      "log_likelihood": -24.156041664130782,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 6.877391867177303,
      "penalty_magnitude_unfairness": 7.5177332219573065,
      "beta_bias": -4.1907155684103365,
      "success": true,
      "log_likelihood": -184.20676529401752,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.30209074630868005,
      "penalty_magnitude_unfairness": 0.1494830275073242,
      "beta_bias": -10.0,
      "success": true,
      "log_likelihood": -5.507427743031218,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.30333405491765375,
      "penalty_magnitude_unfairness": 0.05036698705960387,
      "beta_bias": -7.488505824972007,
      "success": true,
      "log_likelihood": -10.522121289605074,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 18.515359811910677,
      "penalty_magnitude_unfairness": 0.0,
      "beta_bias": 7.891095721460727,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 15.117574471416741,
      "penalty_magnitude_unfairness": 6.972688268569944,
      "beta_bias": -2.447633969180176,
      "success": true,
      "log_likelihood": -69.07755278729093,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.2745055596276039,
      "penalty_magnitude_unfairness": 0.011912461859971045,
      "beta_bias": -7.495193032283099,
      "success": true,
      "log_likelihood": -12.603333632538652,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "beta_bias": 7.840780932950697,
      "success": true,
      "log_likelihood": -69.07755278652137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.6606881066785575,
      "penalty_magnitude_unfairness": 7.9112767970339695,
      "beta_bias": -8.379883791954061,
      "success": true,
      "log_likelihood": -6.815738745043383e-07,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.22550563540742496,
      "penalty_magnitude_unfairness": 10.0,
      "beta_bias": -10.0,
      "success": true,
      "log_likelihood": -70.2077435243032,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 8.488235322696111,
      "penalty_magnitude_unfairness": 9.096651323875454,
      "beta_bias": 1.5526201492219855,
      "success": true,
      "log_likelihood": -161.18098337596896,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 9.48796127559412,
      "penalty_magnitude_unfairness": 4.5643796807122685,
      "beta_bias": 3.2766993283622754,
      "success": true,
      "log_likelihood": -138.15513421746078,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.0732025495906548,
      "penalty_magnitude_unfairness": 0.00197161186561703,
      "beta_bias": -2.217950033818693,
      "success": true,
      "log_likelihood": -22.6567765730215,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.278891282694215,
      "penalty_magnitude_unfairness": 0.021147002472434645,
      "beta_bias": -6.072631236143319,
      "success": true,
      "log_likelihood": -11.123353219275444,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 12.145064461040915,
      "penalty_magnitude_unfairness": 1.8301952147962663,
      "beta_bias": 5.722438773891676,
      "success": true,
      "log_likelihood": -46.051701856480875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 14.414291159340827,
      "penalty_magnitude_unfairness": 7.937974026205399,
      "beta_bias": 5.1644576490043725,
      "success": true,
      "log_likelihood": -667.749668085864,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.03966548708192233,
      "penalty_magnitude_unfairness": 0.01292031122679811,
      "beta_bias": -0.44001953720529635,
      "success": true,
      "log_likelihood": -22.857609051019324,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.225506024135226,
      "penalty_magnitude_unfairness": 9.49327015405872,
      "beta_bias": -10.0,
      "success": true,
      "log_likelihood": -24.156041664131397,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.09046312182907676,
      "penalty_magnitude_unfairness": 0.0,
      "beta_bias": -2.5811080985277473,
      "success": true,
      "log_likelihood": -21.77325802920837,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 20.0,
      "penalty_magnitude_unfairness": 0.0,
      "beta_bias": -2.310585266615455,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.1957873687800797,
      "penalty_magnitude_unfairness": 0.03022174506223263,
      "beta_bias": -8.8671735406082,
      "success": true,
      "log_likelihood": -7.750824449751194,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.393767241782611,
      "penalty_magnitude_unfairness": 0.09049904046348839,
      "beta_bias": -10.0,
      "success": true,
      "log_likelihood": -6.7612791025402075,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.007089598864004638,
      "penalty_magnitude_unfairness": 0.02924683163590177,
      "beta_bias": 0.865095812377508,
      "success": true,
      "log_likelihood": -23.17067354950366,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.25689885344378116,
      "penalty_magnitude_unfairness": 10.0,
      "beta_bias": -10.0,
      "success": true,
      "log_likelihood": -24.5441436208085,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 4.60057081428301,
      "penalty_magnitude_unfairness": 4.218444312749748,
      "beta_bias": -9.789569448602041,
      "success": true,
      "log_likelihood": -185.66652295900582,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.0,
      "penalty_magnitude_unfairness": 0.16417113650624687,
      "beta_bias": 1.0131467073695961,
      "success": true,
      "log_likelihood": -12.039878452509612,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 11.89944735995069,
      "penalty_magnitude_unfairness": 1.0057964274320674,
      "beta_bias": -0.5187751643736718,
      "success": true,
      "log_likelihood": -46.05170185648088,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.1536632237946233,
      "penalty_magnitude_unfairness": 0.300588707068112,
      "beta_bias": 0.22157213093777925,
      "success": true,
      "log_likelihood": -22.849964362295253,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 10.938079248607673,
      "penalty_magnitude_unfairness": 0.47437093278924647,
      "beta_bias": 5.056393065328342,
      "success": true,
      "log_likelihood": -253.28436022684528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "sensitivity_offer": {
        "r": 0.5527896301656204,
        "p": 2.471075879517416e-09
      },
      "penalty_magnitude_unfairness": {
        "r": 0.7411521976725685,
        "p": 1.180312107793412e-18
      },
      "beta_bias": {
        "r": 0.002161281355630436,
        "p": 0.9829735513073834
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 145.3888672356077,
  "bic_Control": 103.76987035819866,
  "bic_Cocaine": 182.67255193828666,
  "bic_results": {
    "average_bic": 145.3888672356077,
    "individual_bics": [
      59.06264014362917,
      379.1553706482889,
      240.7069284826048,
      37.41139491239787,
      20.768714888411004,
      32.779664164364576,
      10.75055680816833,
      468.7672990347968,
      10.75055680816833,
      31.39749459733139,
      10.752796295777166,
      20.67916688144303,
      56.80268107261071,
      10.75055680816833,
      10.75055680816833,
      10.75055680816833,
      10.75055680816833,
      102.85279737303972,
      19.55227730655724,
      10.75055680816833,
      244.0193961878904,
      102.85396057890858,
      30.672778670478234,
      40.551432088870044,
      243.78096538651127,
      200.03150712750642,
      24.040426987209244,
      15.90355852085671,
      194.9573642484919,
      38.90627046485966,
      10.75055680816833,
      59.06264014362915,
      37.551698235421554,
      35.456004157141095,
      10.75055680816833,
      241.00916874976073,
      151.6782510856347,
      200.50256569730834,
      381.93447933617824,
      148.90566238841103,
      333.11262518613756,
      102.92717441832079,
      56.80225866824931,
      333.07881487896844,
      246.88368158728818,
      287.06076837440224,
      793.6294795477799,
      46.374211291167455,
      32.3475376170815,
      55.16139862246267,
      379.1639722700073,
      151.16604386382127,
      39.351773925491145,
      517.3192786525503,
      42.56547969349652,
      59.57484739024778,
      33.36320539054017,
      194.95736424849193,
      105.11434250319073,
      333.11246982873485,
      48.65900837894246,
      194.95762807096074,
      59.06264014362989,
      379.16408740340336,
      21.765412301430764,
      31.79479939457848,
      148.90566238841095,
      148.90566238995018,
      35.957224080445634,
      148.90566238841106,
      10.75055817851608,
      151.16604386397472,
      333.11252356730625,
      287.0608252502899,
      56.06410996141133,
      32.997263253919215,
      102.85396052833008,
      1346.2498929870962,
      56.465774917406975,
      59.06264014363113,
      54.29707287378507,
      148.90566238841095,
      26.25220571487072,
      24.273115020448746,
      57.09190391437565,
      59.83884405698534,
      382.08360273337996,
      34.83031372038755,
      102.85396052833009,
      56.450485539958834,
      517.319277269059
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        59.06264014362917,
        379.1553706482889,
        240.7069284826048,
        37.41139491239787,
        20.768714888411004,
        32.779664164364576,
        10.75055680816833,
        468.7672990347968,
        10.75055680816833,
        31.39749459733139,
        10.752796295777166,
        20.67916688144303,
        56.80268107261071,
        10.75055680816833,
        10.75055680816833,
        10.75055680816833,
        10.75055680816833,
        102.85279737303972,
        19.55227730655724,
        10.75055680816833,
        244.0193961878904,
        102.85396057890858,
        30.672778670478234,
        40.551432088870044,
        243.78096538651127,
        200.03150712750642,
        24.040426987209244,
        15.90355852085671,
        194.9573642484919,
        38.90627046485966,
        10.75055680816833,
        59.06264014362915,
        37.551698235421554,
        35.456004157141095,
        10.75055680816833,
        241.00916874976073,
        151.6782510856347,
        200.50256569730834,
        381.93447933617824,
        148.90566238841103,
        333.11262518613756,
        102.92717441832079,
        56.80225866824931
      ],
      "Cocaine": [
        333.07881487896844,
        246.88368158728818,
        287.06076837440224,
        793.6294795477799,
        46.374211291167455,
        32.3475376170815,
        55.16139862246267,
        379.1639722700073,
        151.16604386382127,
        39.351773925491145,
        517.3192786525503,
        42.56547969349652,
        59.57484739024778,
        33.36320539054017,
        194.95736424849193,
        105.11434250319073,
        333.11246982873485,
        48.65900837894246,
        194.95762807096074,
        59.06264014362989,
        379.16408740340336,
        21.765412301430764,
        31.79479939457848,
        148.90566238841095,
        148.90566238995018,
        35.957224080445634,
        148.90566238841106,
        10.75055817851608,
        151.16604386397472,
        333.11252356730625,
        287.0608252502899,
        56.06410996141133,
        32.997263253919215,
        102.85396052833008,
        1346.2498929870962,
        56.465774917406975,
        59.06264014363113,
        54.29707287378507,
        148.90566238841095,
        26.25220571487072,
        24.273115020448746,
        57.09190391437565,
        59.83884405698534,
        382.08360273337996,
        34.83031372038755,
        102.85396052833009,
        56.450485539958834,
        517.319277269059
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- sensitivity_offer: r = 0.553\n- penalty_magnitude_unfairness: r = 0.741\n- beta_bias: r = 0.002",
  "previous_models": [
    "Specification: U = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, fair_perc_self - split_perc_self) + beta_bias\nSummary: This model predicts the utility of accepting an offer for a participant acting as a responder. The utility is calculated based on the percentage share offered to the participant, a penalty term for receiving less than their fair share (calculated from token contributions), and a general acceptance bias. The model includes three learnable parameters: sensitivity to the offer percentage, a multiplier for the unfairness penalty magnitude, and an additive bias term. It is designed to be fitted on responder trials only.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 145.3888672356077\nOverall Accuracy: 0.8315\nGroup Accuracies:\n- Control: 0.8889\n- Cocaine: 0.7801\n\nParameter Recovery:\n- sensitivity_offer: r = 0.553\n- penalty_magnitude_unfairness: r = 0.741\n- beta_bias: r = 0.002"
  ]
}