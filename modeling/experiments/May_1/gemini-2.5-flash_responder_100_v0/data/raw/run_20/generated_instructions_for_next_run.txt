Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable "token_self". The other variable, "token_opp", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.

Again, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.

Note that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same "fairness".

Below is the description of each variable in the dataset, which will be followed by information about the data type of the variable:

trial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]
trial_role = the role of the participant [1 = responder, 2 = proposer]
token_opp = number of tokens found by the opponent
token_self = number of tokens found by the participant
combined_earning = amount of money earned in total (note that each token found is £3)
split_opp = the proposed share of the opponent (in £)
split_self = the proposed share for the participant (in £)
splitperc_opp = same but in %
split_perc_self = same but in %
accept = whether the participant responded accept (1) or reject (0))
accepted_amount = if accepted, what is the amount gain (in £)
accepted_perc = same as above but in %
proposed_perc = when participant is the proposer, what is the % proposed to the opponent
proposed_amount = when participant is the proposer, what is the amount proposed to the opponent

Desired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).

The model should:
1. Predict only responder behavior (should target "accept = whether the participant responded accept (1) or reject (0)")
2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.
3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).
4. Predict utility, where less than 0 is less than 50% likely.

For any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).

Then, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.
For example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.

Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.

```json
{
  "variables": {
    "variable_name": {
      "description": "Clear description",
      "range": {
        "min": value,
        "max": value,
        "inclusive_min": boolean,
        "inclusive_max": boolean
      },
      "distribution": {
        "type": "distribution type",
        "parameters": {}
      },
      "learnable": boolean,
      "source": "learnable/data/calculated"
    }
  }
}
```
</VARIABLES>

Example #1:
<EXAMPLE>
(Model of a Random Choice Task):
Let me think through this step by step...
[your reasoning here]

<MODEL>
U_i = beta_param + epsilon_param * E + eta_param * N
</MODEL>

<VARIABLES>
{
  "variables": {
    "U_i": {
      "description": "Utility of choosing action i",
      "range": {
        "min": "-inf",
        "max": "inf"
      },
      "learnable": false,
      "source": "calculated"
    },
    "beta_param": {
      "description": "Base tendency parameter (inherent preference)",
      "range": {
        "min": 0,
        "max": 1
      },
      "learnable": true,
      "source": "learnable"
    },
    "epsilon_param": {
      "description": "Environmental sensitivity parameter",
      "range": {
        "min": "-inf",
        "max": "inf"
      },
      "learnable": true,
      "source": "learnable"
    },
    "E": {
      "description": "Environmental cue value",
      "range": {"min": "-inf", "max": "inf"},
      "learnable": false,
      "source": "data"
    },
    "eta_param": {
      "description": "Noise parameter",
      "range": {
        "min": 0,
        "max": 1,
        "exclusive_max": true
      },
      "learnable": true,
      "source": "learnable"
    },
    "N": {
      "description": "Random noise drawn from normal distribution N(0,1)",
      "distribution": {
        "type": "normal",
        "mean": 0,
        "std": 1
      },
      "learnable": false,
      "source": "calculated"
    }
  }
}
</VARIABLES>
<SUMMARY>
A linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.
</SUMMARY>
</EXAMPLE>

Please be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.

The parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.

Model Type:
Your model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.

Instructions: In the previous run (Run 20), the simplified model `U = sensitivity_offer * split_perc_self - penalty_unfair_flat * is_unfair` performed poorly across all metrics (BIC 475.35, Accuracy 0.654) and parameter recovery was very low for both parameters (`sensitivity_offer`: r = -0.135, `penalty_unfair_flat`: r = 0.159). This suggests that a fixed penalty for unfairness, irrespective of its magnitude, is not capturing participant behavior effectively, and the parameters are not identifiable in this structure.

In earlier runs, the model `U = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, fair_perc_self - split_perc_self)` (Run 3) showed promising performance (BIC 137.14, Accuracy 0.813) and near-target parameter recovery (`sensitivity_offer`: r = 0.620, `penalty_magnitude_unfairness`: r = 0.541). This indicates that sensitivity to the offer percentage combined with a penalty proportional to the *magnitude* of unfairness is a better approach. However, the recovery for both parameters was still below the 0.7 threshold, suggesting potential identifiability issues between these two terms.

For this run (Run 21), the primary goal remains to achieve parameter recovery >= 0.7 for *all* learnable parameters while maintaining good BIC and accuracy. To address the identifiability issues observed in Run 3, we will propose a model structure that distinguishes between the general sensitivity to the offered amount, the penalty for unfairness, and potentially a bonus for generosity, all based on the magnitude of deviation from fairness.

Consider a new model structure with three learnable parameters:
`U = sensitivity_base * split_perc_self - sensitivity_unfair_deviation_slope * max(0, fair_perc_self - split_perc_self) + sensitivity_generous_slope * max(0, split_perc_self - fair_perc_self)`

This model includes:
1.  `sensitivity_base`: Represents a baseline linear sensitivity to the offered percentage (`split_perc_self`). A higher value means greater utility for higher offers overall. This parameter should be non-negative.
2.  `sensitivity_unfair_deviation_slope`: Represents a penalty subtracted from the utility that scales linearly with the *magnitude* by which the offer is strictly unfair (`fair_perc_self - split_perc_self`). A higher value means a stronger penalty for each percentage point below fair. This parameter should be non-negative. The term `max(0, fair_perc_self - split_perc_self)` captures the magnitude of unfair deviation.
3.  `sensitivity_generous_slope`: Represents a bonus added to the utility that scales linearly with the *magnitude* by which the offer is strictly generous (`split_perc_self - fair_perc_self`). A higher value means a stronger bonus for each percentage point above fair. This parameter should be non-negative. The term `max(0, split_perc_self - fair_perc_self)` captures the magnitude of generous deviation.

This structure builds upon the successful aspects of Run 3 (linear sensitivity + magnitude penalty) by adding an explicit, magnitude-dependent bonus term for generous offers. By separating the effects of offers below fair and offers above fair, this might help to disentangle the influence of `sensitivity_base` from the fairness/generosity terms, potentially improving parameter identifiability for all three parameters.

**Guidance for the Next Model (Run 21):**

Design a computational model implementing this specific three-parameter structure. The primary goal is to achieve parameter recovery >= 0.7 for *all* learnable parameters (`sensitivity_base`, `sensitivity_unfair_deviation_slope`, `sensitivity_generous_slope`) while maintaining good BIC and accuracy.

*   **Prioritize Parameter Recovery:** Implement the specified structure precisely to test if adding the generosity slope term improves the identifiability of all three parameters.
*   **Parameter Constraints:**
    *   `sensitivity_base`: Define clear, generous, finite, non-negative bounds. Suggest [0, 20].
    *   `sensitivity_unfair_deviation_slope`: Define clear, generous, finite, non-negative bounds. Suggest [0, 20].
    *   `sensitivity_generous_slope`: Define clear, generous, finite, non-negative bounds. Suggest [0, 20].
*   **Model Specification:** Provide the mathematical formula between <MODEL> tags using the suggested structure: `U = sensitivity_base * split_perc_self - sensitivity_unfair_deviation_slope * max(0, fair_perc_self - split_perc_self) + sensitivity_generous_slope * max(0, split_perc_self - fair_perc_self)`. Ensure the formula includes the necessary variables and parameters.
*   **Calculated Variables:** Remember `fair_perc_self` needs to be calculated as `(token_self / (token_self + token_opp)) * 100`. Define `unfair_deviation = max(0, fair_perc_self - split_perc_self)` and `generous_deviation = max(0, split_perc_self - fair_perc_self)` as calculated variables. Include `U`, `fair_perc_self`, `token_self`, `token_opp`, `unfair_deviation`, and `generous_deviation` in your variable descriptions with `source: "calculated"` or `source: "data"` as appropriate.
*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for all variables used in the <MODEL> formula (`U`, `split_perc_self`, `fair_perc_self`, `token_self`, `token_opp`, `unfair_deviation`, `generous_deviation`, `sensitivity_base`, `sensitivity_unfair_deviation_slope`, `sensitivity_generous_slope`), including the specified bounds and learnable status for the parameters. Clearly describe the role of each variable.
*   **Target Variable:** Specify "accept" as the target variable using <target_variable> tags.
*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing the model structure and its components.

Remember to use variables relevant for responder trials (`trial_role == 1`).

If this three-parameter piecewise slope structure still fails to yield sufficient parameter recovery for all parameters, future runs will need to explore more fundamentally different functional forms for utility, consider non-linear relationships, or incorporate how relative contributions (tokens) influence perceived fairness or utility in ways not solely captured by linear deviations from `fair_perc_self`. Think creatively about how fairness perceptions might interact with the value of the offer itself.

For run 21 of 100, please think through this step by step, focusing intently on designing a model structure that builds on previous successes while addressing parameter recovery issues by carefully separating the influence of offer value, unfair deviation magnitude, and generous deviation magnitude. Then provide your model specification, variable descriptions, target variable, and summary.

Available Data Variables:
- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.