{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0))\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n```json\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n```\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta_param + epsilon_param * E + eta_param * N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_param\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon_param\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta_param\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions:\nIn the previous run (Run 21), the model `U = sensitivity_base * split_perc_self - sensitivity_unfair * unfair_deviation + sensitivity_generous * generous_deviation` achieved good accuracy (0.832) but failed to achieve sufficient parameter recovery for all learnable parameters (`sensitivity_base`: r = 0.599, `sensitivity_unfair`: r = 0.613, `sensitivity_generous`: r = 0.053). The generosity sensitivity parameter showed particularly poor identifiability. This suggests that while the overall structure might capture some aspects of the data, the specific way the parameters are defined and interact in this additive linear form leads to issues in uniquely estimating them.\n\nComparing to earlier runs, Run 3 (`U = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, fair_perc_self - split_perc_self)`) had a better BIC (137.14) and slightly better recovery for `sensitivity_offer` (r = 0.620), although `penalty_magnitude_unfairness` (r = 0.541) was still below the target. Run 21's attempt to separate the generosity term did not improve recovery for the other terms and worsened BIC compared to Run 3. This indicates that linearly adding a sensitivity to the raw offer percentage alongside separate sensitivities for deviations might cause collinearity, especially between the base sensitivity and the generous deviation sensitivity.\n\nFor this run (Run 22), the primary goal remains to achieve parameter recovery >= 0.7 for *all* learnable parameters while maintaining good BIC and accuracy. To address the potential identifiability issues observed in Run 21, let's explore a model structure that removes the direct linear sensitivity to `split_perc_self` and instead focuses purely on how utility changes based on deviations from the calculated fair share, potentially including an overall bias term.\n\nConsider a new model structure with three learnable parameters, focusing on deviations from fairness:\n`U = -slope_unfair_deviation * max(0, fair_perc_self - split_perc_self) + slope_generous_deviation * max(0, split_perc_self - fair_perc_self) + acceptance_bias`\n\nThis model includes:\n1.  `slope_unfair_deviation`: Represents the rate at which utility decreases for each percentage point the offer is below the fair share (`fair_perc_self`). A higher value means a stronger penalty for unfairness. This parameter should be non-negative. The term `max(0, fair_perc_self - split_perc_self)` captures the magnitude of the *unfair* deviation.\n2.  `slope_generous_deviation`: Represents the rate at which utility increases for each percentage point the offer is above the fair share (`fair_perc_self`). A higher value means a stronger bonus for generosity. This parameter should be non-negative. The term `max(0, split_perc_self - fair_perc_self)` captures the magnitude of the *generous* deviation.\n3.  `acceptance_bias`: Represents a general tendency to accept offers, independent of the specific offer value or its fairness. This parameter can be positive or negative (unbounded conceptually).\n\nThis structure posits that utility is primarily determined by how the offer *deviates* from fairness, with potentially different sensitivities (slopes) for unfairness and generosity, plus a baseline propensity to accept. By removing the `sensitivity_base * split_perc_self` term from Run 21, we aim to reduce potential collinearity and improve the identifiability of the deviation slopes and the bias term.\n\n**Guidance for the Next Model (Run 22):**\n\nDesign a computational model implementing this specific three-parameter structure. The primary goal is to achieve parameter recovery >= 0.7 for *all* learnable parameters (`slope_unfair_deviation`, `slope_generous_deviation`, `acceptance_bias`) while maintaining good BIC and accuracy.\n\n*   **Prioritize Parameter Recovery:** Implement the specified structure precisely to test if a purely deviation-based model (plus bias) improves the identifiability of the parameters compared to models that include a linear term for the raw offer percentage.\n*   **Parameter Constraints:**\n    *   `slope_unfair_deviation`: Define clear, generous, finite, non-negative bounds. Suggest [0, 20].\n    *   `slope_generous_deviation`: Define clear, generous, finite, non-negative bounds. Suggest [0, 20].\n    *   `acceptance_bias`: Define clear, generous, finite bounds. While conceptually unbounded, provide a generous finite range like [-10, 10].\n*   **Model Specification:** Provide the mathematical formula between <MODEL> tags using the suggested structure: `U = -slope_unfair_deviation * max(0, fair_perc_self - split_perc_self) + slope_generous_deviation * max(0, split_perc_self - fair_perc_self) + acceptance_bias`. Ensure the formula includes the necessary variables and parameters.\n*   **Calculated Variables:** Remember `fair_perc_self` needs to be calculated as `(token_self / (token_self + token_opp)) * 100`. Define `unfair_deviation = max(0, fair_perc_self - split_perc_self)` and `generous_deviation = max(0, split_perc_self - fair_perc_self)` as calculated variables to potentially simplify the model equation representation (though the previous explicit formula is also fine). Include `U`, `fair_perc_self`, `token_self`, `token_opp`, `split_perc_self`, `unfair_deviation`, and `generous_deviation` in your variable descriptions with `source: \"calculated\"` or `source: \"data\"` as appropriate.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for all variables used in the <MODEL> formula (`U`, `split_perc_self`, `fair_perc_self`, `token_self`, `token_opp`, `unfair_deviation`, `generous_deviation`, `slope_unfair_deviation`, `slope_generous_deviation`, `acceptance_bias`), including the specified bounds and learnable status for the parameters. Clearly describe the role of each variable.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing the model structure and its components.\n\nRemember to use variables relevant for responder trials (`trial_role == 1`).\n\nThis shift towards a deviation-centric model is an attempt to build on the insights from previous runs while exploring a functional form that might improve parameter identifiability. If this structure still doesn't yield sufficient parameter recovery for all parameters, future runs will need to consider other fundamental shifts in how utility is modeled, such as non-linear effects of deviations, multiplicative interactions between offer and fairness, or entirely different value functions.\n\nFor run 22 of 100, please think through this step by step, focusing intently on implementing the specified deviation-based utility model structure. Then provide your model specification, variable descriptions, target variable, and summary.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0))\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n```json\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n```\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta_param + epsilon_param * E + eta_param * N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_param\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon_param\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta_param\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions:\nIn the previous run (Run 21), the model `U = sensitivity_base * split_perc_self - sensitivity_unfair * unfair_deviation + sensitivity_generous * generous_deviation` achieved good accuracy (0.832) but failed to achieve sufficient parameter recovery for all learnable parameters (`sensitivity_base`: r = 0.599, `sensitivity_unfair`: r = 0.613, `sensitivity_generous`: r = 0.053). The generosity sensitivity parameter showed particularly poor identifiability. This suggests that while the overall structure might capture some aspects of the data, the specific way the parameters are defined and interact in this additive linear form leads to issues in uniquely estimating them.\n\nComparing to earlier runs, Run 3 (`U = sensitivity_offer * split_perc_self - penalty_magnitude_unfairness * max(0, fair_perc_self - split_perc_self)`) had a better BIC (137.14) and slightly better recovery for `sensitivity_offer` (r = 0.620), although `penalty_magnitude_unfairness` (r = 0.541) was still below the target. Run 21's attempt to separate the generosity term did not improve recovery for the other terms and worsened BIC compared to Run 3. This indicates that linearly adding a sensitivity to the raw offer percentage alongside separate sensitivities for deviations might cause collinearity, especially between the base sensitivity and the generous deviation sensitivity.\n\nFor this run (Run 22), the primary goal remains to achieve parameter recovery >= 0.7 for *all* learnable parameters while maintaining good BIC and accuracy. To address the potential identifiability issues observed in Run 21, let's explore a model structure that removes the direct linear sensitivity to `split_perc_self` and instead focuses purely on how utility changes based on deviations from the calculated fair share, potentially including an overall bias term.\n\nConsider a new model structure with three learnable parameters, focusing on deviations from fairness:\n`U = -slope_unfair_deviation * max(0, fair_perc_self - split_perc_self) + slope_generous_deviation * max(0, split_perc_self - fair_perc_self) + acceptance_bias`\n\nThis model includes:\n1.  `slope_unfair_deviation`: Represents the rate at which utility decreases for each percentage point the offer is below the fair share (`fair_perc_self`). A higher value means a stronger penalty for unfairness. This parameter should be non-negative. The term `max(0, fair_perc_self - split_perc_self)` captures the magnitude of the *unfair* deviation.\n2.  `slope_generous_deviation`: Represents the rate at which utility increases for each percentage point the offer is above the fair share (`fair_perc_self`). A higher value means a stronger bonus for generosity. This parameter should be non-negative. The term `max(0, split_perc_self - fair_perc_self)` captures the magnitude of the *generous* deviation.\n3.  `acceptance_bias`: Represents a general tendency to accept offers, independent of the specific offer value or its fairness. This parameter can be positive or negative (unbounded conceptually).\n\nThis structure posits that utility is primarily determined by how the offer *deviates* from fairness, with potentially different sensitivities (slopes) for unfairness and generosity, plus a baseline propensity to accept. By removing the `sensitivity_base * split_perc_self` term from Run 21, we aim to reduce potential collinearity and improve the identifiability of the deviation slopes and the bias term.\n\n**Guidance for the Next Model (Run 22):**\n\nDesign a computational model implementing this specific three-parameter structure. The primary goal is to achieve parameter recovery >= 0.7 for *all* learnable parameters (`slope_unfair_deviation`, `slope_generous_deviation`, `acceptance_bias`) while maintaining good BIC and accuracy.\n\n*   **Prioritize Parameter Recovery:** Implement the specified structure precisely to test if a purely deviation-based model (plus bias) improves the identifiability of the parameters compared to models that include a linear term for the raw offer percentage.\n*   **Parameter Constraints:**\n    *   `slope_unfair_deviation`: Define clear, generous, finite, non-negative bounds. Suggest [0, 20].\n    *   `slope_generous_deviation`: Define clear, generous, finite, non-negative bounds. Suggest [0, 20].\n    *   `acceptance_bias`: Define clear, generous, finite bounds. While conceptually unbounded, provide a generous finite range like [-10, 10].\n*   **Model Specification:** Provide the mathematical formula between <MODEL> tags using the suggested structure: `U = -slope_unfair_deviation * max(0, fair_perc_self - split_perc_self) + slope_generous_deviation * max(0, split_perc_self - fair_perc_self) + acceptance_bias`. Ensure the formula includes the necessary variables and parameters.\n*   **Calculated Variables:** Remember `fair_perc_self` needs to be calculated as `(token_self / (token_self + token_opp)) * 100`. Define `unfair_deviation = max(0, fair_perc_self - split_perc_self)` and `generous_deviation = max(0, split_perc_self - fair_perc_self)` as calculated variables to potentially simplify the model equation representation (though the previous explicit formula is also fine). Include `U`, `fair_perc_self`, `token_self`, `token_opp`, `split_perc_self`, `unfair_deviation`, and `generous_deviation` in your variable descriptions with `source: \"calculated\"` or `source: \"data\"` as appropriate.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for all variables used in the <MODEL> formula (`U`, `split_perc_self`, `fair_perc_self`, `token_self`, `token_opp`, `unfair_deviation`, `generous_deviation`, `slope_unfair_deviation`, `slope_generous_deviation`, `acceptance_bias`), including the specified bounds and learnable status for the parameters. Clearly describe the role of each variable.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing the model structure and its components.\n\nRemember to use variables relevant for responder trials (`trial_role == 1`).\n\nThis shift towards a deviation-centric model is an attempt to build on the insights from previous runs while exploring a functional form that might improve parameter identifiability. If this structure still doesn't yield sufficient parameter recovery for all parameters, future runs will need to consider other fundamental shifts in how utility is modeled, such as non-linear effects of deviations, multiplicative interactions between offer and fairness, or entirely different value functions.\n\nFor run 22 of 100, please think through this step by step, focusing intently on implementing the specified deviation-based utility model structure. Then provide your model specification, variable descriptions, target variable, and summary.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nU = -slope_unfair_deviation * unfair_deviation + slope_generous_deviation * generous_deviation + acceptance_bias\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n        },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed percentage share for the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n        },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n        },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n        },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n     \"fair_perc_self\": {\n      \"description\": \"Participant's fair percentage share based on token contribution (calculated as (token_self / (token_self + token_opp)) * 100)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n        },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"unfair_deviation\": {\n      \"description\": \"Magnitude of the percentage offer below the fair share (calculated as max(0, fair_perc_self - split_perc_self))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"generous_deviation\": {\n      \"description\": \"Magnitude of the percentage offer above the fair share (calculated as max(0, split_perc_self - fair_perc_self))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"slope_unfair_deviation\": {\n      \"description\": \"Sensitivity to unfair deviations (penalty slope)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"slope_generous_deviation\": {\n      \"description\": \"Sensitivity to generous deviations (bonus slope)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n     \"acceptance_bias\": {\n      \"description\": \"General tendency to accept offers\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts the utility of accepting a proposed offer based on how the offer percentage deviates from the participant's fair share, calculated from token contributions. Utility decreases linearly with the magnitude of unfair deviations, increases linearly with the magnitude of generous deviations, and is adjusted by a general acceptance bias. The model has three learnable parameters: a non-negative slope for unfairness sensitivity, a non-negative slope for generosity sensitivity, and an acceptance bias parameter.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['slope_unfair_deviation', 'slope_generous_deviation', 'acceptance_bias']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = -slope_unfair_deviation * unfair_deviation + slope_generous_deviation * generous_deviation + acceptance_bias\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed percentage share for the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"Participant's fair percentage share based on token contribution (calculated as (token_self / (token_self + token_opp)) * 100)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"unfair_deviation\": {\n      \"description\": \"Magnitude of the percentage offer below the fair share (calculated as max(0, fair_perc_self - split_perc_self))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"generous_deviation\": {\n      \"description\": \"Magnitude of the percentage offer above the fair share (calculated as max(0, split_perc_self - fair_perc_self))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"slope_unfair_deviation\": {\n      \"description\": \"Sensitivity to unfair deviations (penalty slope)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"slope_generous_deviation\": {\n      \"description\": \"Sensitivity to generous deviations (bonus slope)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"acceptance_bias\": {\n      \"description\": \"General tendency to accept offers\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, slope_unfair_deviation=1, slope_generous_deviation=1, acceptance_bias=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        total_tokens = token_self + token_opp\n        if total_tokens == 0:\n            fair_perc_self = 50  # Default to 50 if no tokens found by either player\n        else:\n            fair_perc_self = (token_self / total_tokens) * 100\n\n        unfair_deviation = max(0, fair_perc_self - split_perc_self)\n        generous_deviation = max(0, split_perc_self - fair_perc_self)\n\n        U = -slope_unfair_deviation * unfair_deviation + slope_generous_deviation * generous_deviation + acceptance_bias\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '''\n[\n    {\n        \"ID\": 0,\n        \"group\": \"control\",\n        \"trial_number\": 1,\n        \"trial_type\": 0,\n        \"trial_role\": 1,\n        \"token_opp\": 20,\n        \"token_self\": 20,\n        \"combined_earning\": 220,\n        \"split_opp\": 110.0,\n        \"split_self\": 110.0,\n        \"splitperc_opp\": 50,\n        \"splitperc_self\": 50,\n        \"accept\": 1.0,\n        \"accepted_amount\": 110.0,\n        \"accepted_perc\": 50.0,\n        \"proposed_perc\": 50.0,\n        \"proposed_amount\": 110.0\n    },\n    {\n        \"ID\": 1,\n        \"group\": \"control\",\n        \"trial_number\": 2,\n        \"trial_type\": 0,\n        \"trial_role\": 1,\n        \"token_opp\": 15,\n        \"token_self\": 25,\n        \"combined_earning\": 220,\n        \"split_opp\": 55.0,\n        \"split_self\": 165.0,\n        \"splitperc_opp\": 25,\n        \"splitperc_self\": 75,\n        \"accept\": 1.0,\n        \"accepted_amount\": 165.0,\n        \"accepted_perc\": 75.0,\n        \"proposed_perc\": 75.0,\n        \"proposed_amount\": 165.0\n    }\n]\n'''\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1746097302.542829
    }
  ],
  "learnable_parameters": {
    "slope_unfair_deviation": {
      "description": "Sensitivity to unfair deviations (penalty slope)",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "slope_generous_deviation": {
      "description": "Sensitivity to generous deviations (bonus slope)",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "acceptance_bias": {
      "description": "General tendency to accept offers",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = -slope_unfair_deviation * unfair_deviation + slope_generous_deviation * generous_deviation + acceptance_bias",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_perc_self": {
      "description": "Proposed percentage share for the participant",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "fair_perc_self": {
      "description": "Participant's fair percentage share based on token contribution (calculated as (token_self / (token_self + token_opp)) * 100)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "unfair_deviation": {
      "description": "Magnitude of the percentage offer below the fair share (calculated as max(0, fair_perc_self - split_perc_self))",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "generous_deviation": {
      "description": "Magnitude of the percentage offer above the fair share (calculated as max(0, split_perc_self - fair_perc_self))",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "slope_unfair_deviation": {
      "description": "Sensitivity to unfair deviations (penalty slope)",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "slope_generous_deviation": {
      "description": "Sensitivity to generous deviations (bonus slope)",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "acceptance_bias": {
      "description": "General tendency to accept offers",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "This model predicts the utility of accepting a proposed offer based on how the offer percentage deviates from the participant's fair share, calculated from token contributions. Utility decreases linearly with the magnitude of unfair deviations, increases linearly with the magnitude of generous deviations, and is adjusted by a general acceptance bias. The model has three learnable parameters: a non-negative slope for unfairness sensitivity, a non-negative slope for generosity sensitivity, and an acceptance bias parameter.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nU = -slope_unfair_deviation * unfair_deviation + slope_generous_deviation * generous_deviation + acceptance_bias\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n        },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed percentage share for the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n        },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n        },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n        },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n     \"fair_perc_self\": {\n      \"description\": \"Participant's fair percentage share based on token contribution (calculated as (token_self / (token_self + token_opp)) * 100)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n        },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"unfair_deviation\": {\n      \"description\": \"Magnitude of the percentage offer below the fair share (calculated as max(0, fair_perc_self - split_perc_self))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n     \"generous_deviation\": {\n      \"description\": \"Magnitude of the percentage offer above the fair share (calculated as max(0, split_perc_self - fair_perc_self))\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"slope_unfair_deviation\": {\n      \"description\": \"Sensitivity to unfair deviations (penalty slope)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"slope_generous_deviation\": {\n      \"description\": \"Sensitivity to generous deviations (bonus slope)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n     \"acceptance_bias\": {\n      \"description\": \"General tendency to accept offers\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts the utility of accepting a proposed offer based on how the offer percentage deviates from the participant's fair share, calculated from token contributions. Utility decreases linearly with the magnitude of unfair deviations, increases linearly with the magnitude of generous deviations, and is adjusted by a general acceptance bias. The model has three learnable parameters: a non-negative slope for unfairness sensitivity, a non-negative slope for generosity sensitivity, and an acceptance bias parameter.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U = -slope_unfair_deviation * unfair_deviation + slope_generous_deviation * generous_deviation + acceptance_bias\nSummary: This model predicts the utility of accepting a proposed offer based on how the offer percentage deviates from the participant's fair share, calculated from token contributions. Utility decreases linearly with the magnitude of unfair deviations, increases linearly with the magnitude of generous deviations, and is adjusted by a general acceptance bias. The model has three learnable parameters: a non-negative slope for unfairness sensitivity, a non-negative slope for generosity sensitivity, and an acceptance bias parameter.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, slope_unfair_deviation=1, slope_generous_deviation=1, acceptance_bias=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        total_tokens = token_self + token_opp\n        if total_tokens == 0:\n            fair_perc_self = 50  # Default to 50 if no tokens found by either player\n        else:\n            fair_perc_self = (token_self / total_tokens) * 100\n\n        unfair_deviation = max(0, fair_perc_self - split_perc_self)\n        generous_deviation = max(0, split_perc_self - fair_perc_self)\n\n        U = -slope_unfair_deviation * unfair_deviation + slope_generous_deviation * generous_deviation + acceptance_bias\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7701465201465201,
  "group_accuracies": {
    "Control": 0.8184754521963824,
    "Cocaine": 0.7268518518518519
  },
  "group_parameter_averages": {
    "Control": {
      "slope_unfair_deviation": 2.0024630072265865,
      "slope_generous_deviation": 9.237668288917371,
      "acceptance_bias": 5.6438125402096535
    },
    "Cocaine": {
      "slope_unfair_deviation": 2.7061556267372477,
      "slope_generous_deviation": 10.639434799702915,
      "acceptance_bias": 2.5456699714290183
    }
  },
  "fitting_results": [
    {
      "slope_unfair_deviation": 14.242380894221284,
      "slope_generous_deviation": 0.11846158458482443,
      "acceptance_bias": -0.6609580261359785,
      "success": true,
      "log_likelihood": -25.517194935220413,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.11616816804025139,
      "slope_generous_deviation": 9.957001840164395,
      "acceptance_bias": 2.325786222244062,
      "success": true,
      "log_likelihood": -17.075217769834723,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.34985889552686433,
      "slope_generous_deviation": 6.054840004825785,
      "acceptance_bias": 7.444987347627704,
      "success": true,
      "log_likelihood": -7.805379046168048,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.12785349012595454,
      "slope_generous_deviation": 7.43532561336155,
      "acceptance_bias": 1.9949790964076317,
      "success": true,
      "log_likelihood": -15.857672370084043,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.5622288868593895,
      "slope_generous_deviation": 15.516228410388761,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -5.00898823872294,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.13710593935618828,
      "slope_generous_deviation": 14.980953760433176,
      "acceptance_bias": 3.748871917098315,
      "success": true,
      "log_likelihood": -14.912329401083879,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.0,
      "slope_generous_deviation": 8.115943865193557,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -0.0015435589732172449,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.15023000190361646,
      "slope_generous_deviation": 16.61687762949265,
      "acceptance_bias": 4.301243391954462,
      "success": true,
      "log_likelihood": -13.765822611548595,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.0,
      "slope_generous_deviation": 9.100314956878513,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -0.0015435589732172449,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.22293109514838255,
      "slope_generous_deviation": 16.467454519383075,
      "acceptance_bias": 3.3418396756806903,
      "success": true,
      "log_likelihood": -10.905046993656173,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.475521279187852,
      "slope_generous_deviation": 18.48311554804374,
      "acceptance_bias": 8.451807054989981,
      "success": true,
      "log_likelihood": -5.868827910289784,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 7.850965502435016,
      "slope_generous_deviation": 12.371669573485729,
      "acceptance_bias": -2.7844246296613746e-07,
      "success": true,
      "log_likelihood": -70.46384705794536,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.21263839387786282,
      "slope_generous_deviation": 0.7953739209482984,
      "acceptance_bias": 3.4561241681315145,
      "success": true,
      "log_likelihood": -11.495585048532456,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.0,
      "slope_generous_deviation": 10.976303218615461,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -0.0015435589732172449,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.0,
      "slope_generous_deviation": 11.757224581951624,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -0.0015435589732172449,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 9.434678274759945e-16,
      "slope_generous_deviation": 10.292411163342177,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -0.0015435589732172449,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.0,
      "slope_generous_deviation": 16.726727693735285,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -0.0015435589732172449,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.17155251446446051,
      "slope_generous_deviation": 6.8273404189896,
      "acceptance_bias": 6.956739186102359,
      "success": true,
      "log_likelihood": -8.452787531152936,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.2428288033663958,
      "slope_generous_deviation": 4.520373608985371,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -5.118089376429815,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.0,
      "slope_generous_deviation": 11.103885693987799,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -0.0015435589732172449,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.17050974893258522,
      "slope_generous_deviation": 2.8327260568901536,
      "acceptance_bias": 3.8804544570632107,
      "success": true,
      "log_likelihood": -13.616941102669417,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 14.95855788605473,
      "slope_generous_deviation": 18.334100449050954,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -621.6980658077371,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 11.305672782302118,
      "slope_generous_deviation": 4.451822125537537,
      "acceptance_bias": 9.586595876713032,
      "success": true,
      "log_likelihood": -207.23279564743893,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.09129991976152281,
      "slope_generous_deviation": 9.377670830625073,
      "acceptance_bias": 1.9746634989415213,
      "success": true,
      "log_likelihood": -18.884605138826686,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.2000297279864261,
      "slope_generous_deviation": 3.2127270538760233,
      "acceptance_bias": 4.01773890344046,
      "success": true,
      "log_likelihood": -12.286573445432749,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.163063009839949,
      "slope_generous_deviation": 3.011751787043311,
      "acceptance_bias": 3.9397388134758065,
      "success": true,
      "log_likelihood": -13.874786617544526,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.11464263236112612,
      "slope_generous_deviation": 2.1903570733403246,
      "acceptance_bias": 2.6474285796115664,
      "success": true,
      "log_likelihood": -17.101995444164327,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.36399286582084595,
      "slope_generous_deviation": 5.414162126862698,
      "acceptance_bias": 3.636085843947158,
      "success": true,
      "log_likelihood": -6.296840384284815,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.1497486335937024,
      "slope_generous_deviation": 10.086630591809358,
      "acceptance_bias": 6.571739140264763,
      "success": true,
      "log_likelihood": -8.112966458262765,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.10411532930441124,
      "slope_generous_deviation": 8.081099905310937,
      "acceptance_bias": 3.9021762048045,
      "success": true,
      "log_likelihood": -14.171305203864847,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.0,
      "slope_generous_deviation": 15.449347356479121,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -0.0015435589732172449,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 17.442969662705337,
      "slope_generous_deviation": 17.270533689962836,
      "acceptance_bias": 6.209294877905802e-07,
      "success": true,
      "log_likelihood": -47.43799621740093,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.04019562966464337,
      "slope_generous_deviation": 2.664534005533186,
      "acceptance_bias": 0.36313938915827315,
      "success": true,
      "log_likelihood": -21.525910674672733,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.11704074453666806,
      "slope_generous_deviation": 15.90433665047404,
      "acceptance_bias": 1.6187041813725056,
      "success": true,
      "log_likelihood": -16.23380501538571,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.0,
      "slope_generous_deviation": 7.494064235989164,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -0.0015435589732172449,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.3105300822356781,
      "slope_generous_deviation": 8.92034131311515,
      "acceptance_bias": 7.303411941413932,
      "success": true,
      "log_likelihood": -30.002107570530537,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.1889693200678448,
      "slope_generous_deviation": 9.290388708520014,
      "acceptance_bias": 5.591659862134144,
      "success": true,
      "log_likelihood": -11.394828022736402,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.15889967494310792,
      "slope_generous_deviation": 5.305930518883237,
      "acceptance_bias": 3.1901262980868146,
      "success": true,
      "log_likelihood": -14.361401617951408,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.0952828785675338,
      "slope_generous_deviation": 3.7952821497568023,
      "acceptance_bias": 2.8848149427588328,
      "success": true,
      "log_likelihood": -17.35742721549733,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.07781371377395513,
      "slope_generous_deviation": 11.26035795035434,
      "acceptance_bias": 4.475211775271905,
      "success": true,
      "log_likelihood": -8.820559933856238,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.08243411993474326,
      "slope_generous_deviation": 17.76792007092238,
      "acceptance_bias": 2.242320637714707,
      "success": true,
      "log_likelihood": -19.062289613802715,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 15.107877083842773,
      "slope_generous_deviation": 1.0568186014851044,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -92.10349449461708,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.0,
      "slope_generous_deviation": 5.829005564833858,
      "acceptance_bias": 3.496508506254213,
      "success": true,
      "log_likelihood": -4.511508301556062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.07990819253210221,
      "slope_generous_deviation": 14.567502089236209,
      "acceptance_bias": 1.8804860715277,
      "success": true,
      "log_likelihood": -19.6644411250877,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.12803584903604237,
      "slope_generous_deviation": 8.955049703583617,
      "acceptance_bias": 3.3261340134641735,
      "success": true,
      "log_likelihood": -15.795331562346425,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.05580009217029066,
      "slope_generous_deviation": 13.162656519082674,
      "acceptance_bias": 2.2042700889527316,
      "success": true,
      "log_likelihood": -18.76898560521284,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.08940387890653541,
      "slope_generous_deviation": 0.5162166203957056,
      "acceptance_bias": 1.9349747839057179,
      "success": true,
      "log_likelihood": -19.039731052960914,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.07214958822448898,
      "slope_generous_deviation": 12.59543451345887,
      "acceptance_bias": 0.8328509683398848,
      "success": true,
      "log_likelihood": -19.16970694308484,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.231954462880473,
      "slope_generous_deviation": 10.520069249695734,
      "acceptance_bias": 3.785024375528993,
      "success": true,
      "log_likelihood": -10.75553031670032,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.03324515259785361,
      "slope_generous_deviation": 5.293452454507522,
      "acceptance_bias": 0.8490509172254418,
      "success": true,
      "log_likelihood": -45.713473739441774,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.054067442219544466,
      "slope_generous_deviation": 17.506466414731424,
      "acceptance_bias": 2.0063318213978905,
      "success": true,
      "log_likelihood": -19.591578607036304,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.0651856203231855,
      "slope_generous_deviation": 15.984508695652496,
      "acceptance_bias": -0.8643210938472032,
      "success": true,
      "log_likelihood": -34.26048195581553,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.06494217577018238,
      "slope_generous_deviation": 6.971407497292188,
      "acceptance_bias": 1.4106231042800372,
      "success": true,
      "log_likelihood": -20.821888685223737,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.16763538045738677,
      "slope_generous_deviation": 7.536632686828706,
      "acceptance_bias": 3.8835563836895415,
      "success": true,
      "log_likelihood": -53.4732639494677,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.12683189165614944,
      "slope_generous_deviation": 16.188516153239007,
      "acceptance_bias": 1.7834056180457583,
      "success": true,
      "log_likelihood": -15.624589607784369,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.38158246270655666,
      "slope_generous_deviation": 10.951364838191392,
      "acceptance_bias": 4.885058704824208,
      "success": true,
      "log_likelihood": -6.484581638382459,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.1713623518709792,
      "slope_generous_deviation": 5.914527709746256,
      "acceptance_bias": 1.5049366513553597,
      "success": true,
      "log_likelihood": -11.548746775665126,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.0,
      "slope_generous_deviation": 13.79438541060386,
      "acceptance_bias": 2.0149030748267234,
      "success": true,
      "log_likelihood": -12.31515893560526,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 11.295389253819106,
      "slope_generous_deviation": 0.11803917931792106,
      "acceptance_bias": -0.6608657568221513,
      "success": true,
      "log_likelihood": -48.543044309122,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.0530082111949085,
      "slope_generous_deviation": 3.1907801254287405,
      "acceptance_bias": 2.6544013626413814,
      "success": true,
      "log_likelihood": -15.949421630942421,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 18.922590202124606,
      "slope_generous_deviation": 14.668750820797658,
      "acceptance_bias": 9.381483752325225,
      "success": true,
      "log_likelihood": -414.46548527017484,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.1313739549761232,
      "slope_generous_deviation": 10.104953178976325,
      "acceptance_bias": 2.634287687033118,
      "success": true,
      "log_likelihood": -16.04575138567608,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 16.586136637387117,
      "slope_generous_deviation": 0.11816705156834069,
      "acceptance_bias": -0.6610297230725898,
      "success": true,
      "log_likelihood": -25.517192806136265,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.05859229796982155,
      "slope_generous_deviation": 5.21402103404731,
      "acceptance_bias": 0.865423867243859,
      "success": true,
      "log_likelihood": -20.833328261470317,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.1344520202576334,
      "slope_generous_deviation": 18.459923677208803,
      "acceptance_bias": 0.5406560976925932,
      "success": true,
      "log_likelihood": -11.539732278553066,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.10942740554409372,
      "slope_generous_deviation": 8.10755029119113,
      "acceptance_bias": 2.5323093900109845,
      "success": true,
      "log_likelihood": -17.475351170490214,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.07329807166935076,
      "slope_generous_deviation": 11.310588459925627,
      "acceptance_bias": 4.329667062720437,
      "success": true,
      "log_likelihood": -8.946460644080807,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.11999813747208568,
      "slope_generous_deviation": 17.74142358168409,
      "acceptance_bias": 5.181570892128229,
      "success": true,
      "log_likelihood": -10.362299438636281,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.0817121519355535,
      "slope_generous_deviation": 12.567505595804318,
      "acceptance_bias": 1.920344428576137,
      "success": true,
      "log_likelihood": -19.529761221584877,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.0647853016599643,
      "slope_generous_deviation": 16.906207500061885,
      "acceptance_bias": 4.061483903509564,
      "success": true,
      "log_likelihood": -9.176429927038365,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 14.215143863127055,
      "slope_generous_deviation": 17.0631108896961,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -9.079419842470763e-05,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 14.698430222064447,
      "slope_generous_deviation": 18.0045758039395,
      "acceptance_bias": -4.2239384413795163e-07,
      "success": true,
      "log_likelihood": -93.4896980774818,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.10696038800162662,
      "slope_generous_deviation": 14.695477264670192,
      "acceptance_bias": 2.307783928378063,
      "success": true,
      "log_likelihood": -17.730917604481487,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.06394880167179834,
      "slope_generous_deviation": 5.079516868139757,
      "acceptance_bias": 2.7618407967166987,
      "success": true,
      "log_likelihood": -16.51222221060218,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.047952461162433194,
      "slope_generous_deviation": 19.041491800594724,
      "acceptance_bias": 1.0442832382707812,
      "success": true,
      "log_likelihood": -44.97252007408773,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.09185613088832305,
      "slope_generous_deviation": 8.911661407821605,
      "acceptance_bias": 2.972178350355185,
      "success": true,
      "log_likelihood": -17.079898206295734,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.15029107565905264,
      "slope_generous_deviation": 7.304267671474678,
      "acceptance_bias": 7.605039776292043,
      "success": true,
      "log_likelihood": -5.270645123009233,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 12.600809229629968,
      "slope_generous_deviation": 0.0,
      "acceptance_bias": -1.0986007399442161,
      "success": true,
      "log_likelihood": -25.27519150456575,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.02376754316461665,
      "slope_generous_deviation": 10.795400163947406,
      "acceptance_bias": 0.8848848057674065,
      "success": true,
      "log_likelihood": -22.614936955536002,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 14.828694690697983,
      "slope_generous_deviation": 13.238933445118796,
      "acceptance_bias": 1.3105748826902484e-07,
      "success": true,
      "log_likelihood": -47.43799621740081,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.023861835647708857,
      "slope_generous_deviation": 7.444716873812796,
      "acceptance_bias": 0.5211354115283613,
      "success": true,
      "log_likelihood": -23.133531682421065,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.0,
      "slope_generous_deviation": 6.49825669973247,
      "acceptance_bias": 2.3353595398516465,
      "success": true,
      "log_likelihood": -10.146817625229017,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.1319837416372806,
      "slope_generous_deviation": 8.63904899542068,
      "acceptance_bias": -0.09711855290134111,
      "success": true,
      "log_likelihood": -55.39430772151952,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.12809816107407498,
      "slope_generous_deviation": 15.263394474766084,
      "acceptance_bias": 2.5679318481839872,
      "success": true,
      "log_likelihood": -16.261960250405117,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.024918000359046007,
      "slope_generous_deviation": 6.73105067803665,
      "acceptance_bias": 0.9108530909661542,
      "success": true,
      "log_likelihood": -22.57436631593405,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 10.078610496046295,
      "slope_generous_deviation": 17.094199097392714,
      "acceptance_bias": -5.8313455954879584e-09,
      "success": true,
      "log_likelihood": -24.412145287360364,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.07569877793555764,
      "slope_generous_deviation": 5.643382764951994,
      "acceptance_bias": 2.5533534202416743,
      "success": true,
      "log_likelihood": -18.19375227931425,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.1888244061349883,
      "slope_generous_deviation": 16.098496316640624,
      "acceptance_bias": 1.4140327163714286,
      "success": true,
      "log_likelihood": -33.34143339744926,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.20771653160186143,
      "slope_generous_deviation": 15.376398459905731,
      "acceptance_bias": 9.919172435263539,
      "success": true,
      "log_likelihood": -4.390003380511583,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 12.827090784812842,
      "slope_generous_deviation": 4.150570138141889,
      "acceptance_bias": 10.0,
      "success": true,
      "log_likelihood": -299.33615288472436,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "slope_unfair_deviation": 0.027944754708803123,
      "slope_generous_deviation": 14.65281951927771,
      "acceptance_bias": 1.3730104129154335,
      "success": true,
      "log_likelihood": -20.878536105080475,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "slope_unfair_deviation": {
        "r": 0.38266789114355027,
        "p": 8.522323804232032e-05
      },
      "slope_generous_deviation": {
        "r": -0.027307691897490896,
        "p": 0.7873957096430952
      },
      "acceptance_bias": {
        "r": 0.6296570978244231,
        "p": 2.2596759742225674e-12
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 80.82105696462087,
  "bic_Control": 77.18538864093398,
  "bic_Cocaine": 84.0780098379237,
  "bic_results": {
    "average_bic": 80.82105696462087,
    "individual_bics": [
      61.78494668580916,
      44.90099235503777,
      26.361314907704426,
      42.46590155553642,
      20.76853329281421,
      40.57521561753609,
      10.753643933314764,
      38.28220203846552,
      10.753643933314764,
      32.56065080268068,
      22.488212635947896,
      151.67825093125904,
      33.74172691243324,
      10.753643933314764,
      10.753643933314764,
      10.753643933314764,
      10.753643933314764,
      27.656131877674202,
      20.98673556822796,
      10.753643933314764,
      37.984439020707164,
      1254.1466884308425,
      425.2161481102462,
      48.5197670930217,
      35.32370370623383,
      38.500130050457386,
      44.95454770369699,
      23.34423758393796,
      26.97648973189386,
      39.09316722309802,
      10.753643933314764,
      105.62654925017019,
      53.8023781647138,
      43.21816684613975,
      10.753643933314764,
      70.75477195642941,
      33.54021286084114,
      39.47336005127114,
      45.46541124636299,
      28.391676683080806,
      48.875136042973764,
      194.9575458046025,
      19.773573418480453,
      50.079439065543724,
      42.34121994006118,
      48.28852802579401,
      48.83001892129016,
      49.08997070153801,
      32.26161744876897,
      102.17750429425188,
      49.933714029440935,
      79.27152072699938,
      52.39433418581581,
      117.69708471430373,
      41.99973603093707,
      23.71972009213325,
      33.84805036669859,
      35.38087468657885,
      107.83664543361233,
      42.649400077253176,
      839.681527355718,
      42.842059586720495,
      61.78494242764086,
      52.41721333830897,
      33.83002137247446,
      45.701259156348755,
      28.643478103529944,
      31.475155692640893,
      49.81007925853808,
      29.10341666944506,
      10.75073840376518,
      197.72995297033194,
      46.21239202433131,
      43.77500123657269,
      100.69559696354379,
      44.9103532279598,
      21.291847061386797,
      61.300939824499835,
      55.98043072644033,
      105.62654925016994,
      57.01762018021046,
      31.044192065826365,
      121.53917225840736,
      43.27447731617856,
      55.89928944723643,
      59.57484739008906,
      47.138061373996834,
      77.43342361026684,
      19.530563576391497,
      609.422862584817,
      52.50762902552928
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        61.78494668580916,
        44.90099235503777,
        26.361314907704426,
        42.46590155553642,
        20.76853329281421,
        40.57521561753609,
        10.753643933314764,
        38.28220203846552,
        10.753643933314764,
        32.56065080268068,
        22.488212635947896,
        151.67825093125904,
        33.74172691243324,
        10.753643933314764,
        10.753643933314764,
        10.753643933314764,
        10.753643933314764,
        27.656131877674202,
        20.98673556822796,
        10.753643933314764,
        37.984439020707164,
        1254.1466884308425,
        425.2161481102462,
        48.5197670930217,
        35.32370370623383,
        38.500130050457386,
        44.95454770369699,
        23.34423758393796,
        26.97648973189386,
        39.09316722309802,
        10.753643933314764,
        105.62654925017019,
        53.8023781647138,
        43.21816684613975,
        10.753643933314764,
        70.75477195642941,
        33.54021286084114,
        39.47336005127114,
        45.46541124636299,
        28.391676683080806,
        48.875136042973764,
        194.9575458046025,
        19.773573418480453
      ],
      "Cocaine": [
        50.079439065543724,
        42.34121994006118,
        48.28852802579401,
        48.83001892129016,
        49.08997070153801,
        32.26161744876897,
        102.17750429425188,
        49.933714029440935,
        79.27152072699938,
        52.39433418581581,
        117.69708471430373,
        41.99973603093707,
        23.71972009213325,
        33.84805036669859,
        35.38087468657885,
        107.83664543361233,
        42.649400077253176,
        839.681527355718,
        42.842059586720495,
        61.78494242764086,
        52.41721333830897,
        33.83002137247446,
        45.701259156348755,
        28.643478103529944,
        31.475155692640893,
        49.81007925853808,
        29.10341666944506,
        10.75073840376518,
        197.72995297033194,
        46.21239202433131,
        43.77500123657269,
        100.69559696354379,
        44.9103532279598,
        21.291847061386797,
        61.300939824499835,
        55.98043072644033,
        105.62654925016994,
        57.01762018021046,
        31.044192065826365,
        121.53917225840736,
        43.27447731617856,
        55.89928944723643,
        59.57484739008906,
        47.138061373996834,
        77.43342361026684,
        19.530563576391497,
        609.422862584817,
        52.50762902552928
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- slope_unfair_deviation: r = 0.383\n- slope_generous_deviation: r = -0.027\n- acceptance_bias: r = 0.630",
  "previous_models": [
    "Specification: U = -slope_unfair_deviation * unfair_deviation + slope_generous_deviation * generous_deviation + acceptance_bias\nSummary: This model predicts the utility of accepting a proposed offer based on how the offer percentage deviates from the participant's fair share, calculated from token contributions. Utility decreases linearly with the magnitude of unfair deviations, increases linearly with the magnitude of generous deviations, and is adjusted by a general acceptance bias. The model has three learnable parameters: a non-negative slope for unfairness sensitivity, a non-negative slope for generosity sensitivity, and an acceptance bias parameter.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 80.82105696462087\nOverall Accuracy: 0.7701\nGroup Accuracies:\n- Control: 0.8185\n- Cocaine: 0.7269\n\nParameter Recovery:\n- slope_unfair_deviation: r = 0.383\n- slope_generous_deviation: r = -0.027\n- acceptance_bias: r = 0.630"
  ]
}