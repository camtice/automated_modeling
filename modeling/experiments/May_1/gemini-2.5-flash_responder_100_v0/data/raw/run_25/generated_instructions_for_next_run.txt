Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable "token_self". The other variable, "token_opp", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.

Again, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.

Note that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same "fairness".

Below is the description of each variable in the dataset, which will be followed by information about the data type of the variable:

trial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]
trial_role = the role of the participant [1 = responder, 2 = proposer]
token_opp = number of tokens found by the opponent
token_self = number of tokens found by the participant
combined_earning = amount of money earned in total (note that each token found is £3)
split_opp = the proposed share of the opponent (in £)
split_self = the proposed share for the participant (in £)
splitperc_opp = same but in %
split_perc_self = same but in %
accept = whether the participant responded accept (1) or reject (0))
accepted_amount = if accepted, what is the amount gain (in £)
accepted_perc = same as above but in %
proposed_perc = when participant is the proposer, what is the % proposed to the opponent
proposed_amount = when participant is the proposer, what is the amount proposed to the opponent

Desired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).

The model should:
1. Predict only responder behavior (should target "accept = whether the participant responded accept (1) or reject (0)")
2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.
3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).
4. Predict utility, where less than 0 is less than 50% likely.

For any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).

Then, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.
For example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.

Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.

```json
{
  "variables": {
    "variable_name": {
      "description": "Clear description",
      "range": {
        "min": value,
        "max": value,
        "inclusive_min": boolean,
        "inclusive_max": boolean
      },
      "distribution": {
        "type": "distribution type",
        "parameters": {}
      },
      "learnable": boolean,
      "source": "learnable/data/calculated"
    }
  }
}
```
</VARIABLES>

Example #1:
<EXAMPLE>
(Model of a Random Choice Task):
Let me think through this step by step...
[your reasoning here]

<MODEL>
U_i = beta_param + epsilon_param * E + eta_param * N
</MODEL>

<VARIABLES>
{
  "variables": {
    "U_i": {
      "description": "Utility of choosing action i",
      "range": {
        "min": "-inf",
        "max": "inf"
      },
      "learnable": false,
      "source": "calculated"
    },
    "beta_param": {
      "description": "Base tendency parameter (inherent preference)",
      "range": {
        "min": 0,
        "max": 1
      },
      "learnable": true,
      "source": "learnable"
    },
    "epsilon_param": {
      "description": "Environmental sensitivity parameter",
      "range": {"min": "-inf", "max": "inf"},
      "learnable": true,
      "source": "learnable"
    },
    "E": {
      "description": "Environmental cue value",
      "range": {"min": "-inf", "max": "inf"},
      "learnable": false,
      "source": "data"
    },
    "eta_param": {
      "description": "Noise parameter",
      "range": {
        "min": 0,
        "max": 1,
        "exclusive_max": true
      },
      "learnable": true,
      "source": "learnable"
    },
    "N": {
      "description": "Random noise drawn from normal distribution N(0,1)",
      "distribution": {
        "type": "normal",
        "mean": 0,
        "std": 1
      },
      "learnable": false,
      "source": "calculated"
    }
  }
}
</VARIABLES>
<SUMMARY>
A linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.
</SUMMARY>
</EXAMPLE>

Please be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.

The parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.

Model Type:
Your model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.

Instructions:
Previous attempts modeling responder behavior have explored linear combinations of the offered percentage (`split_perc_self`) and deviations from a calculated fair share (`unfair_deviation`), including models with linear and quadratic penalty terms for unfairness, and an acceptance bias term. Despite achieving reasonable BIC and accuracy in some cases, these models have consistently failed to achieve acceptable parameter recovery (>= 0.7 for all learnable parameters). This suggests that the current structural forms may not accurately capture the decision process or that the chosen variables/parameterizations are not sufficiently identifiable from the data.

For this run, the *absolute highest priority* remains achieving parameter recovery >= 0.7 for *all* learnable parameters. While maintaining good BIC and accuracy is still important, reliable parameter estimation is critical for interpretability.

Given that previous, relatively simple models based on `split_perc_self` and `unfair_deviation` have not yielded identifiable parameters, it is necessary to explore *alternative* model structures that might better represent the underlying psychology and improve parameter identifiability.

**Guidance for the Next Model:**

Design a computational model for responder decisions (`trial_role == 1`) that predicts the utility of accepting an offer. Focus on developing a model structure that has the potential for better parameter recovery than previous attempts. This may require moving beyond simple linear or quadratic functions of `split_perc_self` and `unfair_deviation`.

*   **Prioritize Parameter Recovery:** This is the main goal. Consider how different components of the model contribute uniquely to utility across different scenarios, potentially making their scaling parameters more identifiable.
*   **Explore Alternative Structures:** Think "out of the box". Consider:
    *   **Interaction terms:** Does the effect of the offered percentage depend on how unfair the offer is? (e.g., a term like `sensitivity * split_perc_self * (1 - unfairness_measure)`).
    *   **Different fairness representation:** Instead of just `unfair_deviation`, could the *ratio* of offered share to fair share (`split_perc_self / fair_perc_self`) be relevant? Or perhaps both fair share and offered share influence utility separately?
    *   **Other variables:** Could `trial_type` (contribution structure) or `combined_earning` (total pot size) influence decision-making or moderate the effects of other variables?
    *   **Non-linearities:** Are there other non-linear effects besides a quadratic penalty? (e.g., threshold effects, exponential decay of utility with unfairness).
    *   **Multiple components:** Does utility arise from distinct psychological processes (e.g., valuing the offer, disliking inequality, a general willingness to accept)? How might these combine?
*   **Calculated Variables:** You will likely need `fair_perc_self` calculated as `(token_self / (token_self + token_opp)) * 100` (handle the `token_self + token_opp == 0` case by setting `fair_perc_self` to 50). `unfair_deviation = max(0, fair_perc_self - split_perc_self)` might still be useful, but consider if other measures of deviation or fairness are more appropriate for your chosen model structure. Include all calculated variables used in the model in your descriptions.
*   **Parameter Constraints:** Define clear, generous, finite numerical bounds for *all* learnable parameters. Non-negative constraints are often appropriate for parameters representing sensitivities or penalties, but consider if any parameters should be unbounded.
*   **Model Specification:** Provide the mathematical formula between <MODEL> tags. Use clear notation.
*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include bounds and learnable status.
*   **Target Variable:** Specify "accept" as the target variable using <target_variable> tags.
*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing the model structure, its key components, and how it relates to the decision process.

Design a model that you believe has the best chance of achieving parameter recovery >= 0.7 for all its learnable parameters, while also fitting the data well (lower BIC, higher accuracy). Think creatively about how different aspects of the offer and context might interact to determine acceptance utility.

Please think through this step by step, focusing intently on designing a model structure that improves parameter identifiability, and ensure all output requirements are met. Then provide your model specification, variable descriptions, target variable, and summary.

Available Data Variables:
- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.