{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0))\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n```json\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n```\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta_param + epsilon_param * E + eta_param * N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_param\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon_param\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta_param\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions:\nPrevious attempts using simple linear combinations of `split_perc_self` and `unfair_deviation`, both with and without an `acceptance_bias` term, have consistently struggled to achieve acceptable parameter recovery (>= 0.7). For example, the previous run (Run 24) used the model `U = sensitivity_offer * split_perc_self - penalty_unfair_deviation * unfair_deviation` and resulted in poor recovery for both `sensitivity_offer` (r = 0.574) and `penalty_unfair_deviation` (r = 0.638), despite reasonable BIC and accuracy. This indicates that these simple linear structures may not capture the underlying decision process in a way that allows for reliable estimation of the parameter values.\n\nFor this run (Run 25), the absolute highest priority remains achieving parameter recovery >= 0.7 for *all* learnable parameters. While maintaining good BIC and accuracy is still important, interpretability through parameter recovery is essential. To address the persistent recovery issues with linear penalty terms and the `acceptance_bias`, we will explore a model that incorporates a non-linear effect of unfairness.\n\nConsider the following model structure with two learnable parameters:\n`U = sensitivity_offer * split_perc_self - penalty_unfair_deviation_sq * unfair_deviation^2`\n\nThis model retains the influence of the offered percentage (`split_perc_self`) but introduces a quadratic penalty for unfair offers (`unfair_deviation^2`). This assumes that the disutility of an unfair offer increases more rapidly as the deviation from fairness grows larger. `unfair_deviation` is calculated as `max(0, fair_perc_self - split_perc_self)`, where `fair_perc_self` is the fair share based on token contributions.\n\nThis structure has two learnable parameters:\n1.  `sensitivity_offer`: Represents the rate at which utility increases linearly with the offered percentage (`split_perc_self`). This parameter should be non-negative.\n2.  `penalty_unfair_deviation_sq`: Represents the rate at which utility decreases quadratically with the magnitude of the unfair deviation (`unfair_deviation`). This parameter should be non-negative.\n\n**Guidance for the Next Model (Run 25):**\n\nDesign a computational model implementing this specific two-parameter structure: `U = sensitivity_offer * split_perc_self - penalty_unfair_deviation_sq * unfair_deviation^2`. The primary goal is to achieve parameter recovery >= 0.7 for *all* learnable parameters (`sensitivity_offer`, `penalty_unfair_deviation_sq`) while striving for good BIC and accuracy.\n\n*   **Prioritize Parameter Recovery:** Implement the specified structure precisely. The focus is on determining if this non-linear penalty term improves the identifiability of the parameters compared to linear penalty terms.\n*   **Parameter Constraints:**\n    *   `sensitivity_offer`: Define clear, generous, finite, non-negative bounds. Suggest [0, 10].\n    *   `penalty_unfair_deviation_sq`: Define clear, generous, finite, non-negative bounds. Since `unfair_deviation^2` can be large (up to 100^2 = 10000), the coefficient `penalty_unfair_deviation_sq` will likely be small. Suggest [0, 0.5].\n*   **Model Specification:** Provide the mathematical formula between <MODEL> tags using the suggested structure. Ensure the formula includes the necessary variables and parameters.\n*   **Calculated Variables:** Remember `fair_perc_self` needs to be calculated as `(token_self / (token_self + token_opp)) * 100`. Handle the case where `token_self + token_opp` is zero (e.g., by setting `fair_perc_self` to 50 in this case). Define `unfair_deviation = max(0, fair_perc_self - split_perc_self)` as a calculated variable. Include all variables used in the model (`U`, `split_perc_self`, `unfair_deviation`, `fair_perc_self`, `token_self`, `token_opp`, `sensitivity_offer`, `penalty_unfair_deviation_sq`) in your variable descriptions with `source: \"calculated\"`, `source: \"data\"`, or `source: \"learnable\"` as appropriate.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for all variables used in the <MODEL> formula, including the specified bounds and learnable status for the parameters. Clearly describe the role of each variable.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing the model structure and its components, specifically mentioning the quadratic penalty.\n\nRemember to use variables relevant for responder trials (`trial_role == 1`).\n\nThis model represents a test of whether incorporating a non-linear relationship (specifically, a quadratic penalty for unfairness) is necessary and sufficient to achieve parameter identifiability in this task, especially after linear models have failed. If this non-linear two-parameter model *still* struggles with parameter recovery (i.e., if either `sensitivity_offer` or `penalty_unfair_deviation_sq` falls below 0.7), it would further highlight the complexity of the decision process and necessitate even more \"out of the box\" thinking in future attempts, possibly exploring interaction terms between variables, different functional forms (e.g., exponential, sigmoidal), or entirely different types of variables.\n\nFor run 25 of 100, please think through this step by step, focusing intently on implementing the specified model structure with the quadratic penalty term and ensuring all output requirements are met. Then provide your model specification, variable descriptions, target variable, and summary.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0))\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n```json\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n```\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta_param + epsilon_param * E + eta_param * N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_param\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon_param\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta_param\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions:\nPrevious attempts using simple linear combinations of `split_perc_self` and `unfair_deviation`, both with and without an `acceptance_bias` term, have consistently struggled to achieve acceptable parameter recovery (>= 0.7). For example, the previous run (Run 24) used the model `U = sensitivity_offer * split_perc_self - penalty_unfair_deviation * unfair_deviation` and resulted in poor recovery for both `sensitivity_offer` (r = 0.574) and `penalty_unfair_deviation` (r = 0.638), despite reasonable BIC and accuracy. This indicates that these simple linear structures may not capture the underlying decision process in a way that allows for reliable estimation of the parameter values.\n\nFor this run (Run 25), the absolute highest priority remains achieving parameter recovery >= 0.7 for *all* learnable parameters. While maintaining good BIC and accuracy is still important, interpretability through parameter recovery is essential. To address the persistent recovery issues with linear penalty terms and the `acceptance_bias`, we will explore a model that incorporates a non-linear effect of unfairness.\n\nConsider the following model structure with two learnable parameters:\n`U = sensitivity_offer * split_perc_self - penalty_unfair_deviation_sq * unfair_deviation^2`\n\nThis model retains the influence of the offered percentage (`split_perc_self`) but introduces a quadratic penalty for unfair offers (`unfair_deviation^2`). This assumes that the disutility of an unfair offer increases more rapidly as the deviation from fairness grows larger. `unfair_deviation` is calculated as `max(0, fair_perc_self - split_perc_self)`, where `fair_perc_self` is the fair share based on token contributions.\n\nThis structure has two learnable parameters:\n1.  `sensitivity_offer`: Represents the rate at which utility increases linearly with the offered percentage (`split_perc_self`). This parameter should be non-negative.\n2.  `penalty_unfair_deviation_sq`: Represents the rate at which utility decreases quadratically with the magnitude of the unfair deviation (`unfair_deviation`). This parameter should be non-negative.\n\n**Guidance for the Next Model (Run 25):**\n\nDesign a computational model implementing this specific two-parameter structure: `U = sensitivity_offer * split_perc_self - penalty_unfair_deviation_sq * unfair_deviation^2`. The primary goal is to achieve parameter recovery >= 0.7 for *all* learnable parameters (`sensitivity_offer`, `penalty_unfair_deviation_sq`) while striving for good BIC and accuracy.\n\n*   **Prioritize Parameter Recovery:** Implement the specified structure precisely. The focus is on determining if this non-linear penalty term improves the identifiability of the parameters compared to linear penalty terms.\n*   **Parameter Constraints:**\n    *   `sensitivity_offer`: Define clear, generous, finite, non-negative bounds. Suggest [0, 10].\n    *   `penalty_unfair_deviation_sq`: Define clear, generous, finite, non-negative bounds. Since `unfair_deviation^2` can be large (up to 100^2 = 10000), the coefficient `penalty_unfair_deviation_sq` will likely be small. Suggest [0, 0.5].\n*   **Model Specification:** Provide the mathematical formula between <MODEL> tags using the suggested structure. Ensure the formula includes the necessary variables and parameters.\n*   **Calculated Variables:** Remember `fair_perc_self` needs to be calculated as `(token_self / (token_self + token_opp)) * 100`. Handle the case where `token_self + token_opp` is zero (e.g., by setting `fair_perc_self` to 50 in this case). Define `unfair_deviation = max(0, fair_perc_self - split_perc_self)` as a calculated variable. Include all variables used in the model (`U`, `split_perc_self`, `unfair_deviation`, `fair_perc_self`, `token_self`, `token_opp`, `sensitivity_offer`, `penalty_unfair_deviation_sq`) in your variable descriptions with `source: \"calculated\"`, `source: \"data\"`, or `source: \"learnable\"` as appropriate.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for all variables used in the <MODEL> formula, including the specified bounds and learnable status for the parameters. Clearly describe the role of each variable.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing the model structure and its components, specifically mentioning the quadratic penalty.\n\nRemember to use variables relevant for responder trials (`trial_role == 1`).\n\nThis model represents a test of whether incorporating a non-linear relationship (specifically, a quadratic penalty for unfairness) is necessary and sufficient to achieve parameter identifiability in this task, especially after linear models have failed. If this non-linear two-parameter model *still* struggles with parameter recovery (i.e., if either `sensitivity_offer` or `penalty_unfair_deviation_sq` falls below 0.7), it would further highlight the complexity of the decision process and necessitate even more \"out of the box\" thinking in future attempts, possibly exploring interaction terms between variables, different functional forms (e.g., exponential, sigmoidal), or entirely different types of variables.\n\nFor run 25 of 100, please think through this step by step, focusing intently on implementing the specified model structure with the quadratic penalty term and ensuring all output requirements are met. Then provide your model specification, variable descriptions, target variable, and summary.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "```xml\n<MODEL>\nU = sensitivity_offer * split_perc_self - penalty_unfair_deviation_sq * unfair_deviation^2\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sensitivity_offer\": {\n      \"description\": \"Parameter controlling the linear sensitivity to the percentage offered to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the combined earning proposed to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"penalty_unfair_deviation_sq\": {\n      \"description\": \"Parameter controlling the quadratic penalty for unfair offers (when the proposed split for self is less than the fair share).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.5\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"unfair_deviation\": {\n      \"description\": \"The absolute difference between the fair percentage share and the proposed percentage share for the participant, specifically focusing on deviations below the fair share. Calculated as max(0, fair_perc_self - split_perc_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The percentage of the combined earning considered fair for the participant based on token contributions. Calculated as (token_self / (token_self + token_opp)) * 100. If token_self + token_opp is 0, fair_perc_self is 50.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model predicting acceptance behavior in the responder role. Utility is calculated based on the proposed percentage for the participant and a quadratic penalty for unfair offers. The model has two learnable parameters: a sensitivity to the offered percentage (sensitivity_offer) and a sensitivity to the squared deviation from the fair share (penalty_unfair_deviation_sq). Unfair deviation is defined as the positive difference between the fair share (based on token contributions) and the proposed share for the participant.\n</SUMMARY>\n```"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['sensitivity_offer', 'penalty_unfair_deviation_sq']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = sensitivity_offer * split_perc_self - penalty_unfair_deviation_sq * unfair_deviation^2\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sensitivity_offer\": {\n      \"description\": \"Parameter controlling the linear sensitivity to the percentage offered to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the combined earning proposed to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"penalty_unfair_deviation_sq\": {\n      \"description\": \"Parameter controlling the quadratic penalty for unfair offers (when the proposed split for self is less than the fair share).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.5,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"unfair_deviation\": {\n      \"description\": \"The absolute difference between the fair percentage share and the proposed percentage share for the participant, specifically focusing on deviations below the fair share. Calculated as max(0, fair_perc_self - split_perc_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The percentage of the combined earning considered fair for the participant based on token contributions. Calculated as (token_self / (token_self + token_opp)) * 100. If token_self + token_opp is 0, fair_perc_self is 50.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "python\nimport json\nimport math\n\ndef simulate_model(trial_data, sensitivity_offer=1, penalty_unfair_deviation_sq=0.1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        if token_self + token_opp == 0:\n            fair_perc_self = 50\n        else:\n            fair_perc_self = (token_self / (token_self + token_opp)) * 100\n\n        unfair_deviation = max(0, fair_perc_self - split_perc_self)\n\n        U = sensitivity_offer * split_perc_self - penalty_unfair_deviation_sq * (unfair_deviation**2)\n\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 15, \"token_self\": 35, \"combined_earning\": 20, \"split_opp\": 15.0, \"split_self\": 5.0, \"splitperc_opp\": 75, \"splitperc_self\": 25, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 25.0, \"proposed_amount\": 5.0}, {\"ID\": 1, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 15, \"token_self\": 35, \"combined_earning\": 20, \"split_opp\": 5.0, \"split_self\": 15.0, \"splitperc_opp\": 25, \"splitperc_self\": 75, \"accept\": 1.0, \"accepted_amount\": 15.0, \"accepted_perc\": 75.0, \"proposed_perc\": 75.0, \"proposed_amount\": 15.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1746097462.062484
    }
  ],
  "learnable_parameters": {
    "sensitivity_offer": {
      "description": "Parameter controlling the linear sensitivity to the percentage offered to the participant.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "penalty_unfair_deviation_sq": {
      "description": "Parameter controlling the quadratic penalty for unfair offers (when the proposed split for self is less than the fair share).",
      "range": {
        "min": 0,
        "max": 0.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = sensitivity_offer * split_perc_self - penalty_unfair_deviation_sq * unfair_deviation^2",
  "variable_descriptions": {
    "U": {
      "description": "Utility of accepting the proposed offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "sensitivity_offer": {
      "description": "Parameter controlling the linear sensitivity to the percentage offered to the participant.",
      "range": {
        "min": 0,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_perc_self": {
      "description": "The percentage of the combined earning proposed to the participant.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "penalty_unfair_deviation_sq": {
      "description": "Parameter controlling the quadratic penalty for unfair offers (when the proposed split for self is less than the fair share).",
      "range": {
        "min": 0,
        "max": 0.5,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "unfair_deviation": {
      "description": "The absolute difference between the fair percentage share and the proposed percentage share for the participant, specifically focusing on deviations below the fair share. Calculated as max(0, fair_perc_self - split_perc_self).",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self": {
      "description": "The percentage of the combined earning considered fair for the participant based on token contributions. Calculated as (token_self / (token_self + token_opp)) * 100. If token_self + token_opp is 0, fair_perc_self is 50.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A utility model predicting acceptance behavior in the responder role. Utility is calculated based on the proposed percentage for the participant and a quadratic penalty for unfair offers. The model has two learnable parameters: a sensitivity to the offered percentage (sensitivity_offer) and a sensitivity to the squared deviation from the fair share (penalty_unfair_deviation_sq). Unfair deviation is defined as the positive difference between the fair share (based on token contributions) and the proposed share for the participant.",
  "target_variable": "accept",
  "full_reasoning": "```xml\n<MODEL>\nU = sensitivity_offer * split_perc_self - penalty_unfair_deviation_sq * unfair_deviation^2\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"sensitivity_offer\": {\n      \"description\": \"Parameter controlling the linear sensitivity to the percentage offered to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The percentage of the combined earning proposed to the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"penalty_unfair_deviation_sq\": {\n      \"description\": \"Parameter controlling the quadratic penalty for unfair offers (when the proposed split for self is less than the fair share).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 0.5\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"unfair_deviation\": {\n      \"description\": \"The absolute difference between the fair percentage share and the proposed percentage share for the participant, specifically focusing on deviations below the fair share. Calculated as max(0, fair_perc_self - split_perc_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The percentage of the combined earning considered fair for the participant based on token contributions. Calculated as (token_self / (token_self + token_opp)) * 100. If token_self + token_opp is 0, fair_perc_self is 50.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model predicting acceptance behavior in the responder role. Utility is calculated based on the proposed percentage for the participant and a quadratic penalty for unfair offers. The model has two learnable parameters: a sensitivity to the offered percentage (sensitivity_offer) and a sensitivity to the squared deviation from the fair share (penalty_unfair_deviation_sq). Unfair deviation is defined as the positive difference between the fair share (based on token contributions) and the proposed share for the participant.\n</SUMMARY>\n```",
  "prediction_type": "utility",
  "current_model": "Specification: U = sensitivity_offer * split_perc_self - penalty_unfair_deviation_sq * unfair_deviation^2\nSummary: A utility model predicting acceptance behavior in the responder role. Utility is calculated based on the proposed percentage for the participant and a quadratic penalty for unfair offers. The model has two learnable parameters: a sensitivity to the offered percentage (sensitivity_offer) and a sensitivity to the squared deviation from the fair share (penalty_unfair_deviation_sq). Unfair deviation is defined as the positive difference between the fair share (based on token contributions) and the proposed share for the participant.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, sensitivity_offer=1, penalty_unfair_deviation_sq=0.1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        if token_self + token_opp == 0:\n            fair_perc_self = 50\n        else:\n            fair_perc_self = (token_self / (token_self + token_opp)) * 100\n\n        unfair_deviation = max(0, fair_perc_self - split_perc_self)\n\n        U = sensitivity_offer * split_perc_self - penalty_unfair_deviation_sq * (unfair_deviation**2)\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.8174603174603174,
  "group_accuracies": {
    "Control": 0.8708010335917312,
    "Cocaine": 0.7696759259259259
  },
  "group_parameter_averages": {
    "Control": {
      "sensitivity_offer": 4.45081554597361,
      "penalty_unfair_deviation_sq": 0.14399158974556667
    },
    "Cocaine": {
      "sensitivity_offer": 2.071071859139203,
      "penalty_unfair_deviation_sq": 0.11484342317959285
    }
  },
  "fitting_results": [
    {
      "sensitivity_offer": 0.0047672147467868724,
      "penalty_unfair_deviation_sq": 0.5,
      "success": true,
      "log_likelihood": -25.782924329955655,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.04151816981507499,
      "penalty_unfair_deviation_sq": 0.002120607497090926,
      "success": true,
      "log_likelihood": -18.112254197803136,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 2.698445786259651,
      "penalty_unfair_deviation_sq": 0.2803292950367873,
      "success": true,
      "log_likelihood": -69.12051414754838,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 3.693222008509645,
      "penalty_unfair_deviation_sq": 0.4734607927024015,
      "success": true,
      "log_likelihood": -160.33136108936856,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 4.542747703322356,
      "penalty_unfair_deviation_sq": 0.4720286737852837,
      "success": true,
      "log_likelihood": -46.054128923426944,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 7.417907149652607,
      "penalty_unfair_deviation_sq": 0.48637900430941455,
      "success": true,
      "log_likelihood": -184.20680743554817,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 10.0,
      "penalty_unfair_deviation_sq": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 3.577510136139531,
      "penalty_unfair_deviation_sq": 0.15814937070433768,
      "success": true,
      "log_likelihood": -115.12967003246006,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 10.0,
      "penalty_unfair_deviation_sq": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.058708713682181383,
      "penalty_unfair_deviation_sq": 0.006719441895930379,
      "success": true,
      "log_likelihood": -11.254385137696206,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.37333318667108223,
      "penalty_unfair_deviation_sq": 0.03541658236173389,
      "success": true,
      "log_likelihood": -2.1649923738891115,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.0,
      "penalty_unfair_deviation_sq": 0.00891383690812576,
      "success": true,
      "log_likelihood": -9.830667642982304,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 3.4960403832045626,
      "penalty_unfair_deviation_sq": 0.4704125916291428,
      "success": true,
      "log_likelihood": -23.025852183623748,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 10.0,
      "penalty_unfair_deviation_sq": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 10.0,
      "penalty_unfair_deviation_sq": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 10.0,
      "penalty_unfair_deviation_sq": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 8.829653007620315,
      "penalty_unfair_deviation_sq": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 5.942240468676663,
      "penalty_unfair_deviation_sq": 0.07106801401677959,
      "success": true,
      "log_likelihood": -23.0423443879781,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.2200170054927513,
      "penalty_unfair_deviation_sq": 0.00253477723582434,
      "success": true,
      "log_likelihood": -4.914199094106106,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 10.0,
      "penalty_unfair_deviation_sq": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 5.942005222609075,
      "penalty_unfair_deviation_sq": 0.33421216756284283,
      "success": true,
      "log_likelihood": -93.4626394931313,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.13807976509826062,
      "penalty_unfair_deviation_sq": 0.0015134721548753368,
      "success": true,
      "log_likelihood": -8.181083272893044,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 2.0863381429216616,
      "penalty_unfair_deviation_sq": 0.11561723802579464,
      "success": true,
      "log_likelihood": -199.5390634017316,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 2.9991290161292516,
      "penalty_unfair_deviation_sq": 0.3336970273157568,
      "success": true,
      "log_likelihood": -139.97715450840303,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 6.3545101529327805,
      "penalty_unfair_deviation_sq": 0.476588258419358,
      "success": true,
      "log_likelihood": -93.48969807748206,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.06886607718561957,
      "penalty_unfair_deviation_sq": 0.002806165655375969,
      "success": true,
      "log_likelihood": -14.209305894419,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.06695059515582705,
      "penalty_unfair_deviation_sq": 0.002537595888354661,
      "success": true,
      "log_likelihood": -14.760592239905058,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 1.8387458809855237,
      "penalty_unfair_deviation_sq": 0.31376740460678143,
      "success": true,
      "log_likelihood": -45.78968880949138,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 10.0,
      "penalty_unfair_deviation_sq": 0.0,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 9.34481562848808,
      "penalty_unfair_deviation_sq": 0.11206909050977659,
      "success": true,
      "log_likelihood": -138.15621563085082,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 10.0,
      "penalty_unfair_deviation_sq": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.004767228908091087,
      "penalty_unfair_deviation_sq": 0.5,
      "success": true,
      "log_likelihood": -25.78292432995526,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.023542786534735977,
      "penalty_unfair_deviation_sq": 0.0014702269655359028,
      "success": true,
      "log_likelihood": -21.05950856196118,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.0385291333931122,
      "penalty_unfair_deviation_sq": 0.0035279513324940615,
      "success": true,
      "log_likelihood": -15.757175283440137,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 10.0,
      "penalty_unfair_deviation_sq": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.07187270730837249,
      "penalty_unfair_deviation_sq": 0.0018204214358198457,
      "success": true,
      "log_likelihood": -15.104565831655792,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 7.929729255951707,
      "penalty_unfair_deviation_sq": 0.1767205050552792,
      "success": true,
      "log_likelihood": -48.89791563950023,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.04862088336316407,
      "penalty_unfair_deviation_sq": 0.002861771812026808,
      "success": true,
      "log_likelihood": -16.10142518391423,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.0562434731013944,
      "penalty_unfair_deviation_sq": 0.0012930859284657145,
      "success": true,
      "log_likelihood": -17.7424070216773,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 8.61957204566169,
      "penalty_unfair_deviation_sq": 0.0,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 4.581373245652799,
      "penalty_unfair_deviation_sq": 0.34360298830797703,
      "success": true,
      "log_likelihood": -185.59255793628196,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.2752663016908684,
      "penalty_unfair_deviation_sq": 0.5,
      "success": true,
      "log_likelihood": -46.29228225470903,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 10.0,
      "penalty_unfair_deviation_sq": 0.0,
      "success": true,
      "log_likelihood": -23.02585092644049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.05402334484937707,
      "penalty_unfair_deviation_sq": 0.0018799391782315788,
      "success": true,
      "log_likelihood": -17.22933094108999,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.07715765122593031,
      "penalty_unfair_deviation_sq": 0.002607372231259282,
      "success": true,
      "log_likelihood": -13.608553468516918,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.05922592467935836,
      "penalty_unfair_deviation_sq": 0.0008346362555235842,
      "success": true,
      "log_likelihood": -17.311961725653763,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 2.7105790956229834,
      "penalty_unfair_deviation_sq": 0.38308338082488413,
      "success": true,
      "log_likelihood": -161.18129850502072,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.019269755472802873,
      "penalty_unfair_deviation_sq": 0.0017927664328657412,
      "success": true,
      "log_likelihood": -20.225170949382616,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.04985990490601056,
      "penalty_unfair_deviation_sq": 0.005330137242728456,
      "success": true,
      "log_likelihood": -12.925529913236598,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.019938830437138507,
      "penalty_unfair_deviation_sq": 0.0005909861053848147,
      "success": true,
      "log_likelihood": -23.50595580754273,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 8.748343849568133,
      "penalty_unfair_deviation_sq": 0.25431390256863284,
      "success": true,
      "log_likelihood": -230.2585092968047,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.004767176890890302,
      "penalty_unfair_deviation_sq": 0.5,
      "success": true,
      "log_likelihood": -71.8346261900372,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.04254491198625411,
      "penalty_unfair_deviation_sq": 0.001599896176783642,
      "success": true,
      "log_likelihood": -19.102938014425455,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.030430966073839542,
      "penalty_unfair_deviation_sq": 0.0006847804411096852,
      "success": true,
      "log_likelihood": -22.165928745666,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.01775944266592553,
      "penalty_unfair_deviation_sq": 0.0027079827497267866,
      "success": true,
      "log_likelihood": -17.80222317895558,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 3.21428575481541,
      "penalty_unfair_deviation_sq": 0.5,
      "success": true,
      "log_likelihood": -24.412145287713695,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.04214542103008568,
      "penalty_unfair_deviation_sq": 0.008683431889802994,
      "success": true,
      "log_likelihood": -10.56225295351778,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 3.877331755080472,
      "penalty_unfair_deviation_sq": 0.0,
      "success": true,
      "log_likelihood": -92.1034037165618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.0,
      "penalty_unfair_deviation_sq": 0.0077923842891206956,
      "success": true,
      "log_likelihood": -10.454738493326396,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.07536859679919801,
      "penalty_unfair_deviation_sq": 0.0005468411081450713,
      "success": true,
      "log_likelihood": -13.899598527931817,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.04100618677025025,
      "penalty_unfair_deviation_sq": 0.0009603053750857613,
      "success": true,
      "log_likelihood": -20.363096866216978,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 1.781613123143715,
      "penalty_unfair_deviation_sq": 0.24094863644304756,
      "success": true,
      "log_likelihood": -92.10479213413184,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.004767229332086686,
      "penalty_unfair_deviation_sq": 0.5,
      "success": true,
      "log_likelihood": -25.78292432995525,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.03257131721338595,
      "penalty_unfair_deviation_sq": 0.0020818747644031103,
      "success": true,
      "log_likelihood": -18.913483610272593,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.023302880603251624,
      "penalty_unfair_deviation_sq": 0.006992543608940301,
      "success": true,
      "log_likelihood": -12.018434802698877,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.059715361285527346,
      "penalty_unfair_deviation_sq": 0.002230396886439249,
      "success": true,
      "log_likelihood": -16.00061526290751,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 10.0,
      "penalty_unfair_deviation_sq": 0.0,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 10.0,
      "penalty_unfair_deviation_sq": 0.0,
      "success": true,
      "log_likelihood": -115.1292546466023,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.05395064422062143,
      "penalty_unfair_deviation_sq": 0.0019352612911664982,
      "success": true,
      "log_likelihood": -17.144274891654476,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.0839010536527966,
      "penalty_unfair_deviation_sq": 2.631496254295714e-05,
      "success": true,
      "log_likelihood": -10.536492497456022,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.08981187069611883,
      "penalty_unfair_deviation_sq": 0.5,
      "success": true,
      "log_likelihood": -0.18803989652788428,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.0047672168929035015,
      "penalty_unfair_deviation_sq": 0.5,
      "success": true,
      "log_likelihood": -71.83462619003416,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.05413524208729668,
      "penalty_unfair_deviation_sq": 0.0025433062623085767,
      "success": true,
      "log_likelihood": -16.09487130466174,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 7.9807916842512245,
      "penalty_unfair_deviation_sq": 0.22815013995224676,
      "success": true,
      "log_likelihood": -161.18095650654394,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.015114512453556047,
      "penalty_unfair_deviation_sq": 0.0005463782401618499,
      "success": true,
      "log_likelihood": -23.949726703338822,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 7.979838604831825,
      "penalty_unfair_deviation_sq": 0.10787357910347531,
      "success": true,
      "log_likelihood": -138.1551128191988,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 10.0,
      "penalty_unfair_deviation_sq": 0.0,
      "success": true,
      "log_likelihood": -46.051701856480875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.0,
      "penalty_unfair_deviation_sq": 0.5,
      "success": true,
      "log_likelihood": -25.80616403491936,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.022318424067307358,
      "penalty_unfair_deviation_sq": 0.00021988320302735552,
      "success": true,
      "log_likelihood": -23.293674552800855,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.004767190178916668,
      "penalty_unfair_deviation_sq": 0.5,
      "success": true,
      "log_likelihood": -25.782924329957254,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.020939501575443765,
      "penalty_unfair_deviation_sq": 0.0006172801913459889,
      "success": true,
      "log_likelihood": -23.375253174602268,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 10.0,
      "penalty_unfair_deviation_sq": 0.0,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.0,
      "penalty_unfair_deviation_sq": 0.007492162938596936,
      "success": true,
      "log_likelihood": -10.645733119737738,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 4.266058319695635,
      "penalty_unfair_deviation_sq": 0.22756902338404764,
      "success": true,
      "log_likelihood": -92.10855156958414,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.021099957820988897,
      "penalty_unfair_deviation_sq": 0.00026305397419202004,
      "success": true,
      "log_likelihood": -23.507273954951053,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.02724412288641601,
      "penalty_unfair_deviation_sq": 0.5,
      "success": true,
      "log_likelihood": -25.168885419074215,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.05532211803088727,
      "penalty_unfair_deviation_sq": 0.0010003003099763664,
      "success": true,
      "log_likelihood": -18.039846892640114,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.006682746484599512,
      "penalty_unfair_deviation_sq": 0.0055644816674454535,
      "success": true,
      "log_likelihood": -12.75239991647303,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 10.0,
      "penalty_unfair_deviation_sq": 0.0,
      "success": true,
      "log_likelihood": -46.05170185648088,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 0.05429037032745593,
      "penalty_unfair_deviation_sq": 0.003020952567808143,
      "success": true,
      "log_likelihood": -15.351049500755721,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "sensitivity_offer": 7.68440717807573,
      "penalty_unfair_deviation_sq": 0.0,
      "success": true,
      "log_likelihood": -253.28436022684528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "sensitivity_offer": {
        "r": 0.661175330190667,
        "p": 7.056852986551668e-14
      },
      "penalty_unfair_deviation_sq": {
        "r": 0.6347316021079,
        "p": 1.3282496485109579e-12
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 101.98964460000767,
  "bic_Control": 100.98439191155931,
  "bic_Cocaine": 102.89018346674266,
  "bic_results": {
    "average_bic": 101.98964460000767,
    "individual_bics": [
      58.73288653682353,
      43.39154627251849,
      145.40806617200897,
      327.82976005564933,
      99.2752957237661,
      375.58065274800856,
      7.167037869712219,
      237.42637794183233,
      7.167037869712219,
      29.675808152304633,
      11.497022624690443,
      26.82837316287683,
      53.21874224415971,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      7.167037869712219,
      53.25172665286842,
      16.99543606512443,
      7.167037869712219,
      194.09231686317483,
      23.529204422698307,
      406.2451646803754,
      287.1213468937183,
      194.14643403187634,
      35.58564966575022,
      36.688222356722335,
      98.74641549589498,
      191.3738453100358,
      283.47946913861387,
      7.167037869712219,
      58.73288653682274,
      49.28605500083458,
      38.68138844379249,
      7.167037869712219,
      37.376169540223806,
      104.96286915591268,
      39.36988824474068,
      42.65185192026682,
      145.32214344995492,
      378.35215374947614,
      99.75160238633028,
      53.2187397297932,
      41.6256997590922,
      34.38414481394606,
      41.790961328219744,
      329.52963488695366,
      47.61737977567745,
      33.018097703385415,
      54.17894949199768,
      467.6840564705216,
      150.83629025698662,
      45.37291390576313,
      51.49889536824422,
      42.771484234823376,
      55.99132845233961,
      28.29154378394778,
      191.37384531003582,
      28.07651486356501,
      34.966234932775855,
      47.893231609346174,
      191.3766221451759,
      58.73288653682272,
      44.9940050974574,
      31.203907482309972,
      39.168268402727236,
      145.32214344995484,
      237.42554717011683,
      41.45558766022117,
      28.240022871824266,
      7.543117669967988,
      150.83629025698053,
      39.3567804862357,
      329.5289508900001,
      55.06649128358986,
      283.4772635153098,
      99.27044158987397,
      58.779365946750936,
      53.75438698251393,
      58.732886536826726,
      53.91754422611675,
      145.32214344995484,
      28.458504116387694,
      191.3841410160805,
      54.181585786814324,
      57.50480871506065,
      43.246731662192445,
      32.67183770985828,
      99.27044158987398,
      37.86913687842366,
      513.7357583306028
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        58.73288653682353,
        43.39154627251849,
        145.40806617200897,
        327.82976005564933,
        99.2752957237661,
        375.58065274800856,
        7.167037869712219,
        237.42637794183233,
        7.167037869712219,
        29.675808152304633,
        11.497022624690443,
        26.82837316287683,
        53.21874224415971,
        7.167037869712219,
        7.167037869712219,
        7.167037869712219,
        7.167037869712219,
        53.25172665286842,
        16.99543606512443,
        7.167037869712219,
        194.09231686317483,
        23.529204422698307,
        406.2451646803754,
        287.1213468937183,
        194.14643403187634,
        35.58564966575022,
        36.688222356722335,
        98.74641549589498,
        191.3738453100358,
        283.47946913861387,
        7.167037869712219,
        58.73288653682274,
        49.28605500083458,
        38.68138844379249,
        7.167037869712219,
        37.376169540223806,
        104.96286915591268,
        39.36988824474068,
        42.65185192026682,
        145.32214344995492,
        378.35215374947614,
        99.75160238633028,
        53.2187397297932
      ],
      "Cocaine": [
        41.6256997590922,
        34.38414481394606,
        41.790961328219744,
        329.52963488695366,
        47.61737977567745,
        33.018097703385415,
        54.17894949199768,
        467.6840564705216,
        150.83629025698662,
        45.37291390576313,
        51.49889536824422,
        42.771484234823376,
        55.99132845233961,
        28.29154378394778,
        191.37384531003582,
        28.07651486356501,
        34.966234932775855,
        47.893231609346174,
        191.3766221451759,
        58.73288653682272,
        44.9940050974574,
        31.203907482309972,
        39.168268402727236,
        145.32214344995484,
        237.42554717011683,
        41.45558766022117,
        28.240022871824266,
        7.543117669967988,
        150.83629025698053,
        39.3567804862357,
        329.5289508900001,
        55.06649128358986,
        283.4772635153098,
        99.27044158987397,
        58.779365946750936,
        53.75438698251393,
        58.732886536826726,
        53.91754422611675,
        145.32214344995484,
        28.458504116387694,
        191.3841410160805,
        54.181585786814324,
        57.50480871506065,
        43.246731662192445,
        32.67183770985828,
        99.27044158987398,
        37.86913687842366,
        513.7357583306028
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- sensitivity_offer: r = 0.661\n- penalty_unfair_deviation_sq: r = 0.635",
  "previous_models": [
    "Specification: U = sensitivity_offer * split_perc_self - penalty_unfair_deviation_sq * unfair_deviation^2\nSummary: A utility model predicting acceptance behavior in the responder role. Utility is calculated based on the proposed percentage for the participant and a quadratic penalty for unfair offers. The model has two learnable parameters: a sensitivity to the offered percentage (sensitivity_offer) and a sensitivity to the squared deviation from the fair share (penalty_unfair_deviation_sq). Unfair deviation is defined as the positive difference between the fair share (based on token contributions) and the proposed share for the participant.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 101.98964460000767\nOverall Accuracy: 0.8175\nGroup Accuracies:\n- Control: 0.8708\n- Cocaine: 0.7697\n\nParameter Recovery:\n- sensitivity_offer: r = 0.661\n- penalty_unfair_deviation_sq: r = 0.635"
  ]
}