{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0))\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n```json\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n```\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta_param + epsilon_param * E + eta_param * N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_param\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon_param\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta_param\": {\"description\": \"Noise parameter\", \"range\": {\"min\": 0, \"max\": 1, \"exclusive_max\": true}, \"learnable\": true, \"source\": \"learnable\"},\\\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions:\nPrevious attempts modeling responder behavior have consistently struggled with parameter recovery. The most recent model, which included a linear effect of the received amount and a non-linear power-law penalty for negative percentage deviations from fairness, achieved a good BIC but *still* failed significantly on parameter recovery (all recovery values < 0.7). This indicates that the chosen structure, even with a non-linear term, did not solve the fundamental identifiability issues in the data for this domain. Parameters related to the penalty term in particular had extremely low recovery.\n\nFor this run (28 of 100), the **absolute highest priority remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. A model is unusable if its parameters cannot be reliably estimated, regardless of its fit (BIC) or predictive accuracy on observed data. You must design a model structure where each learnable parameter has a distinct and separable influence on the predicted utility across the dataset's trials.\n\nGiven the repeated failure of structural approaches based on combining linear amount effects and various forms of fairness penalties (linear, quadratic, power-law) calculated from percentage deviation, it is evident that a fundamentally *different* modeling structure is required to improve parameter identifiability in this dataset. Sticking to variations of `split_self +/- f(fairness_deviation)` appears insufficient.\n\n**Guidance for the Next Model (Focusing on Identifiability & Novelty):**\n\nDesign a computational model for responder decisions (`trial_role == 1`) that predicts the utility of accepting an offer, prioritizing parameter identifiability through structural innovation. This requires moving significantly beyond the structures explored so far.\n\n*   **Parameter Identifiability:** Focus intensely on designing the model such that the impact of changing one learnable parameter cannot be replicated simply by changing another. Consider potential correlations between variables (`split_self` and `split_perc_self` are highly correlated; `fair_perc_self` varies, affecting the range of deviations) and how your parameters interact with these variables.\n*   **Explore Fundamentally New Structures:** The previous approaches seem stuck in similar structural forms. Think outside the box. Consider:\n    *   **Ratio-based utility:** Model utility not based on percentage *difference* from fairness, but the *ratio* `split_perc_self / fair_perc_self`. How does utility change as this ratio deviates from 1? Maybe utility is a function of `log(split_perc_self / fair_perc_self)`.\n    *   **Threshold or Piecewise Models:** Is there a specific percentage or amount threshold below which offers are perceived as extremely unfair, and utility drops sharply? Can you model utility with different functional forms above and below a learned threshold? (e.g., `if split_perc_self < threshold_perc: U = f1(...) else: U = f2(...)`).\n    *   **Contextual Modulation of Sensitivity:** Instead of just adding terms, could a parameter *multiply* or *scale* the effect of another variable based on context? For example, could the sensitivity to the proposed amount (`split_self`) be different depending on `trial_type` (e.g., `beta_amount_equal * split_self` for trial_type=1, `beta_amount_unequal * split_self` for trial_type=2 or 3)? Or could fairness sensitivity depend on `combined_earning`? This adds complexity but might help disentangle parameters.\n    *   **Reference Point Models:** Could utility depend on comparing the offer not just to the calculated `fair_perc_self`, but also to other reference points? (e.g., the minimum possible offer, the maximum possible offer, or even the perceived offer of the opponent).\n    *   **Utility as a function of the *difference* between accepting and rejecting:** Although the output format is direct utility, think about the underlying decision. Accepting gives `split_self`, rejecting gives 0. The cost of rejecting is foregone money *plus* psychological costs (if any). How does this comparison drive utility?\n*   **Calculated Variables:** You will likely need `fair_perc_self` calculated as `(token_self / (token_self + token_opp)) * 100` (handle the `token_self + token_opp == 0` case by setting `fair_perc_self` to 50). Include *all* calculated variables used in the model in your descriptions. Use percentage terms (`split_perc_self`) for fairness comparisons to potentially reduce collinearity with absolute amount (`split_self`) unless you have a specific, justified structure using both.\n*   **Parameter Constraints:** Define clear, generous, finite numerical bounds for *all* learnable parameters. Consider carefully if parameters should be non-negative or unbounded based on their psychological interpretation and their role in making them identifiable.\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Use clear notation.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include bounds and learnable status.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing the model structure, its key components, and how it relates to the decision process, with a focus on the *novelty* or structural changes aimed at identifiability.\n\nDesign a model that you believe has the best chance of achieving parameter recovery >= 0.7 for all its learnable parameters by adopting a structural form that explicitly addresses and avoids the apparent identifiability issues of previous linear/power-law approaches, while still aiming for good fit (lower BIC, higher accuracy). Think critically about how each parameter influences decisions and how this influence can be uniquely captured by the model structure given the characteristics of the dataset. Do not be afraid to propose a structure that is significantly different from previous attempts.\n\nPlease think through this step by step, focusing intently on designing a model structure that improves parameter identifiability through a novel approach, and ensure all output requirements are met. Then provide your model specification, variable descriptions, target variable, and summary.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n</previous_instructions>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0))\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n```json\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n```\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta_param + epsilon_param * E + eta_param * N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_param\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon_param\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta_param\": {\"description\": \"Noise parameter\", \"range\": {\"min\": 0, \"max\": 1, \"exclusive_max\": true}, \"learnable\": true, \"source\": \"learnable\"},\\\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions:\nPrevious attempts modeling responder behavior have consistently struggled with parameter recovery. The most recent model, which included a linear effect of the received amount and a non-linear power-law penalty for negative percentage deviations from fairness, achieved a good BIC but *still* failed significantly on parameter recovery (all recovery values < 0.7). This indicates that the chosen structure, even with a non-linear term, did not solve the fundamental identifiability issues in the data for this domain. Parameters related to the penalty term in particular had extremely low recovery.\n\nFor this run (28 of 100), the **absolute highest priority remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. A model is unusable if its parameters cannot be reliably estimated, regardless of its fit (BIC) or predictive accuracy on observed data. You must design a model structure where each learnable parameter has a distinct and separable influence on the predicted utility across the dataset's trials.\n\nGiven the repeated failure of structural approaches based on combining linear amount effects and various forms of fairness penalties (linear, quadratic, power-law) calculated from percentage deviation, it is evident that a fundamentally *different* modeling structure is required to improve parameter identifiability in this dataset. Sticking to variations of `split_self +/- f(fairness_deviation)` appears insufficient.\n\n**Guidance for the Next Model (Focusing on Identifiability & Novelty):**\n\nDesign a computational model for responder decisions (`trial_role == 1`) that predicts the utility of accepting an offer, prioritizing parameter identifiability through structural innovation. This requires moving significantly beyond the structures explored so far.\n\n*   **Parameter Identifiability:** Focus intensely on designing the model such that the impact of changing one learnable parameter cannot be replicated simply by changing another. Consider potential correlations between variables (`split_self` and `split_perc_self` are highly correlated; `fair_perc_self` varies, affecting the range of deviations) and how your parameters interact with these variables.\n*   **Explore Fundamentally New Structures:** The previous approaches seem stuck in similar structural forms. Think outside the box. Consider:\n    *   **Ratio-based utility:** Model utility not based on percentage *difference* from fairness, but the *ratio* `split_perc_self / fair_perc_self`. How does utility change as this ratio deviates from 1? Maybe utility is a function of `log(split_perc_self / fair_perc_self)`.\n    *   **Threshold or Piecewise Models:** Is there a specific percentage or amount threshold below which offers are perceived as extremely unfair, and utility drops sharply? Can you model utility with different functional forms above and below a learned threshold? (e.g., `if split_perc_self < threshold_perc: U = f1(...) else: U = f2(...)`).\n    *   **Contextual Modulation of Sensitivity:** Instead of just adding terms, could a parameter *multiply* or *scale* the effect of another variable based on context? For example, could the sensitivity to the proposed amount (`split_self`) be different depending on `trial_type` (e.g., `beta_amount_equal * split_self` for trial_type=1, `beta_amount_unequal * split_self` for trial_type=2 or 3)? Or could fairness sensitivity depend on `combined_earning`? This adds complexity but might help disentangle parameters.\n    *   **Reference Point Models:** Could utility depend on comparing the offer not just to the calculated `fair_perc_self`, but also to other reference points? (e.g., the minimum possible offer, the maximum possible offer, or even the perceived offer of the opponent).\n    *   **Utility as a function of the *difference* between accepting and rejecting:** Although the output format is direct utility, think about the underlying decision. Accepting gives `split_self`, rejecting gives 0. The cost of rejecting is foregone money *plus* psychological costs (if any). How does this comparison drive utility?\n*   **Calculated Variables:** You will likely need `fair_perc_self` calculated as `(token_self / (token_self + token_opp)) * 100` (handle the `token_self + token_opp == 0` case by setting `fair_perc_self` to 50). Include *all* calculated variables used in the model in your descriptions. Use percentage terms (`split_perc_self`) for fairness comparisons to potentially reduce collinearity with absolute amount (`split_self`) unless you have a specific, justified structure using both.\n*   **Parameter Constraints:** Define clear, generous, finite numerical bounds for *all* learnable parameters. Consider carefully if parameters should be non-negative or unbounded based on their psychological interpretation and their role in making them identifiable.\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Use clear notation.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include bounds and learnable status.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing the model structure, its key components, and how it relates to the decision process, with a focus on the *novelty* or structural changes aimed at identifiability.\n\nDesign a model that you believe has the best chance of achieving parameter recovery >= 0.7 for all its learnable parameters by adopting a structural form that explicitly addresses and avoids the apparent identifiability issues of previous linear/power-law approaches, while still aiming for good fit (lower BIC, higher accuracy). Think critically about how each parameter influences decisions and how this influence can be uniquely captured by the model structure given the characteristics of the dataset. Do not be afraid to propose a structure that is significantly different from previous attempts.\n\nPlease think through this step by step, focusing intently on designing a model structure that improves parameter identifiability through a novel approach, and ensure all output requirements are met. Then provide your model specification, variable descriptions, target variable, and summary.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n</previous_instructions>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nU_accept = (beta_zero + beta_amount * split_self) * (1 if split_perc_self >= fairness_threshold_perc else 0) + beta_utility_below_threshold * (1 if split_perc_self < fairness_threshold_perc else 0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_zero\": {\n      \"description\": \"Base utility bias\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_amount\": {\n      \"description\": \"Sensitivity to accepted amount when offer percentage is at or above threshold\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_threshold_perc\": {\n      \"description\": \"The percentage threshold for the proposed share below which a different utility calculation is used\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_utility_below_threshold\": {\n      \"description\": \"The fixed utility level when the proposed share percentage is below the threshold\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3)\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA piecewise utility model for responder acceptance decisions. The utility of accepting depends on whether the proposed percentage share (split_perc_self) is above or below a learned absolute percentage threshold (fairness_threshold_perc). If the offer percentage is at or above the threshold, utility is a linear function of the proposed amount (split_self), scaled by beta_amount, plus a base bias (beta_zero). If the offer percentage is below the threshold, utility is a fixed value defined by beta_utility_below_threshold. This structural break aims to improve parameter identifiability by separating the influences of amount sensitivity and rejection cost based on a learned fairness threshold.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_zero', 'beta_amount', 'fairness_threshold_perc', 'beta_utility_below_threshold']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U_accept = (beta_zero + beta_amount * split_self) * (1 if split_perc_self >= fairness_threshold_perc else 0) + beta_utility_below_threshold * (1 if split_perc_self < fairness_threshold_perc else 0)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_zero\": {\n      \"description\": \"Base utility bias\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_amount\": {\n      \"description\": \"Sensitivity to accepted amount when offer percentage is at or above threshold\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_threshold_perc\": {\n      \"description\": \"The percentage threshold for the proposed share below which a different utility calculation is used\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_utility_below_threshold\": {\n      \"description\": \"The fixed utility level when the proposed share percentage is below the threshold\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \\u00a3)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_zero=0, beta_amount=0, fairness_threshold_perc=50, beta_utility_below_threshold=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        if split_perc_self >= fairness_threshold_perc:\n            U_accept = beta_zero + beta_amount * split_self\n        else:\n            U_accept = beta_utility_below_threshold\n\n        model_predictions.append(U_accept)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"AD\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 7, \"token_self\": 3, \"combined_earning\": 10, \"split_opp\": 7.0, \"split_self\": 3.0, \"splitperc_opp\": 70, \"splitperc_self\": 30, \"accept\": 1.0, \"accepted_amount\": 3.0, \"accepted_perc\": 30.0, \"proposed_perc\": 30.0, \"proposed_amount\": 3.0}, {\"ID\": 1, \"group\": \"AD\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 5, \"token_self\": 5, \"combined_earning\": 10, \"split_opp\": 5.0, \"split_self\": 5.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 5.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 5.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1746097689.8821251
    }
  ],
  "learnable_parameters": {
    "beta_zero": {
      "description": "Base utility bias",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_amount": {
      "description": "Sensitivity to accepted amount when offer percentage is at or above threshold",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fairness_threshold_perc": {
      "description": "The percentage threshold for the proposed share below which a different utility calculation is used",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_utility_below_threshold": {
      "description": "The fixed utility level when the proposed share percentage is below the threshold",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U_accept = (beta_zero + beta_amount * split_self) * (1 if split_perc_self >= fairness_threshold_perc else 0) + beta_utility_below_threshold * (1 if split_perc_self < fairness_threshold_perc else 0)",
  "variable_descriptions": {
    "U_accept": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_zero": {
      "description": "Base utility bias",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_amount": {
      "description": "Sensitivity to accepted amount when offer percentage is at or above threshold",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fairness_threshold_perc": {
      "description": "The percentage threshold for the proposed share below which a different utility calculation is used",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_utility_below_threshold": {
      "description": "The fixed utility level when the proposed share percentage is below the threshold",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "split_self": {
      "description": "The proposed share for the participant (in \u00a3)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant (in %)",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A piecewise utility model for responder acceptance decisions. The utility of accepting depends on whether the proposed percentage share (split_perc_self) is above or below a learned absolute percentage threshold (fairness_threshold_perc). If the offer percentage is at or above the threshold, utility is a linear function of the proposed amount (split_self), scaled by beta_amount, plus a base bias (beta_zero). If the offer percentage is below the threshold, utility is a fixed value defined by beta_utility_below_threshold. This structural break aims to improve parameter identifiability by separating the influences of amount sensitivity and rejection cost based on a learned fairness threshold.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nU_accept = (beta_zero + beta_amount * split_self) * (1 if split_perc_self >= fairness_threshold_perc else 0) + beta_utility_below_threshold * (1 if split_perc_self < fairness_threshold_perc else 0)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_accept\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_zero\": {\n      \"description\": \"Base utility bias\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_amount\": {\n      \"description\": \"Sensitivity to accepted amount when offer percentage is at or above threshold\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fairness_threshold_perc\": {\n      \"description\": \"The percentage threshold for the proposed share below which a different utility calculation is used\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_utility_below_threshold\": {\n      \"description\": \"The fixed utility level when the proposed share percentage is below the threshold\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3)\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA piecewise utility model for responder acceptance decisions. The utility of accepting depends on whether the proposed percentage share (split_perc_self) is above or below a learned absolute percentage threshold (fairness_threshold_perc). If the offer percentage is at or above the threshold, utility is a linear function of the proposed amount (split_self), scaled by beta_amount, plus a base bias (beta_zero). If the offer percentage is below the threshold, utility is a fixed value defined by beta_utility_below_threshold. This structural break aims to improve parameter identifiability by separating the influences of amount sensitivity and rejection cost based on a learned fairness threshold.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: U_accept = (beta_zero + beta_amount * split_self) * (1 if split_perc_self >= fairness_threshold_perc else 0) + beta_utility_below_threshold * (1 if split_perc_self < fairness_threshold_perc else 0)\nSummary: A piecewise utility model for responder acceptance decisions. The utility of accepting depends on whether the proposed percentage share (split_perc_self) is above or below a learned absolute percentage threshold (fairness_threshold_perc). If the offer percentage is at or above the threshold, utility is a linear function of the proposed amount (split_self), scaled by beta_amount, plus a base bias (beta_zero). If the offer percentage is below the threshold, utility is a fixed value defined by beta_utility_below_threshold. This structural break aims to improve parameter identifiability by separating the influences of amount sensitivity and rejection cost based on a learned fairness threshold.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_zero=0, beta_amount=0, fairness_threshold_perc=50, beta_utility_below_threshold=0):\n    model_predictions = []\n    for trial in trial_data:\n        split_self = trial.get(\"split_self\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        if split_perc_self >= fairness_threshold_perc:\n            U_accept = beta_zero + beta_amount * split_self\n        else:\n            U_accept = beta_utility_below_threshold\n\n        model_predictions.append(U_accept)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7289377289377289,
  "group_accuracies": {
    "Control": 0.7558139534883721,
    "Cocaine": 0.7048611111111112
  },
  "group_parameter_averages": {
    "Control": {
      "beta_zero": 0.4057877800397084,
      "beta_amount": 3.3162030199858257,
      "fairness_threshold_perc": 33.24472043505808,
      "beta_utility_below_threshold": -1.4651916997317795
    },
    "Cocaine": {
      "beta_zero": -0.4937439667126702,
      "beta_amount": 1.0453901087028836,
      "fairness_threshold_perc": 35.59428317232795,
      "beta_utility_below_threshold": -2.1072178436811804
    }
  },
  "fitting_results": [
    {
      "beta_zero": -5.155128951953818,
      "beta_amount": 3.2205578236534276,
      "fairness_threshold_perc": 61.62333895350187,
      "beta_utility_below_threshold": -2.3978958641953696,
      "success": true,
      "log_likelihood": -10.326095382822269,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -0.22871033423139053,
      "beta_amount": 8.57382225264989,
      "fairness_threshold_perc": 37.036511390754846,
      "beta_utility_below_threshold": -0.6931471130416113,
      "success": true,
      "log_likelihood": -17.185882539114758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -1.617824822330778,
      "beta_amount": 0.5288414053547006,
      "fairness_threshold_perc": 15.161746971738898,
      "beta_utility_below_threshold": -7.35903954128625,
      "success": true,
      "log_likelihood": -20.363611278640622,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -3.289011926925964,
      "beta_amount": 0.9174234353009699,
      "fairness_threshold_perc": 25.48664972559881,
      "beta_utility_below_threshold": -1.871824775510145,
      "success": true,
      "log_likelihood": -16.84486028303804,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -6.356085544087636,
      "beta_amount": 6.337865619180711,
      "fairness_threshold_perc": 46.682328743332114,
      "beta_utility_below_threshold": -0.43079383124488757,
      "success": true,
      "log_likelihood": -22.12576240435675,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -1.3564175962961307,
      "beta_amount": 0.6308097539310435,
      "fairness_threshold_perc": 14.177197851964529,
      "beta_utility_below_threshold": -5.729406869131038,
      "success": true,
      "log_likelihood": -17.937424836251548,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 7.879537925916446,
      "beta_amount": 2.042589642070956,
      "fairness_threshold_perc": 42.4755964144354,
      "beta_utility_below_threshold": 10.0,
      "success": true,
      "log_likelihood": -0.0014982371870623837,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 10.0,
      "beta_amount": 10.0,
      "fairness_threshold_perc": 33.23028012389337,
      "beta_utility_below_threshold": -0.28768236706329625,
      "success": true,
      "log_likelihood": -14.341070193010134,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -7.295879428457346,
      "beta_amount": 8.418959765626099,
      "fairness_threshold_perc": 37.886424869639804,
      "beta_utility_below_threshold": 10.0,
      "success": true,
      "log_likelihood": -0.001228241002875247,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -1.4616844738736898,
      "beta_amount": 0.4090811645436517,
      "fairness_threshold_perc": 28.565120308763113,
      "beta_utility_below_threshold": -1.8720083480299528,
      "success": true,
      "log_likelihood": -19.332187157760703,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -2.436383421866846,
      "beta_amount": 0.6376840234782019,
      "fairness_threshold_perc": 14.750005223804408,
      "beta_utility_below_threshold": -9.072248360574312,
      "success": true,
      "log_likelihood": -19.806246956395277,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -3.4366279123787997,
      "beta_amount": 0.538110235629561,
      "fairness_threshold_perc": 36.45124280111695,
      "beta_utility_below_threshold": -3.2581091141442875,
      "success": true,
      "log_likelihood": -9.202544300267066,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -0.3683810339935901,
      "beta_amount": 0.14434104877608753,
      "fairness_threshold_perc": 23.617703434085225,
      "beta_utility_below_threshold": -10.0,
      "success": true,
      "log_likelihood": -18.3903682509849,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 1.9659147077271852,
      "beta_amount": 5.417510073490079,
      "fairness_threshold_perc": 8.982863638844007,
      "beta_utility_below_threshold": -7.276942387508393,
      "success": true,
      "log_likelihood": -0.0005301688598130163,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 1.2053755546958902,
      "beta_amount": 6.70354313474349,
      "fairness_threshold_perc": 25.640920463217654,
      "beta_utility_below_threshold": 10.0,
      "success": true,
      "log_likelihood": -0.0006827497520410118,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 4.782590201395254,
      "beta_amount": 7.009747464983084,
      "fairness_threshold_perc": 1.8096746720718926,
      "beta_utility_below_threshold": -9.235564718307094,
      "success": true,
      "log_likelihood": -4.259962386211407e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 5.384359263202614,
      "beta_amount": 6.223957279502161,
      "fairness_threshold_perc": 5.363239288626076,
      "beta_utility_below_threshold": -2.254077750996206,
      "success": true,
      "log_likelihood": -6.240845223771914e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 6.020985484390383,
      "beta_amount": 8.185952413417393,
      "fairness_threshold_perc": 84.20710314181649,
      "beta_utility_below_threshold": 1.8245491491785992,
      "success": true,
      "log_likelihood": -14.505888876009957,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -1.074934928688704,
      "beta_amount": 1.1573433616346507,
      "fairness_threshold_perc": 0.8097355524622651,
      "beta_utility_below_threshold": -6.359214965444082,
      "success": true,
      "log_likelihood": -9.889587939118055,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 10.0,
      "beta_amount": 10.0,
      "fairness_threshold_perc": 5.8258079842971044,
      "beta_utility_below_threshold": 6.347178944807592,
      "success": true,
      "log_likelihood": 3.012237126199305e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -2.7021673159016846,
      "beta_amount": -9.516986388274047,
      "fairness_threshold_perc": 63.93336164479637,
      "beta_utility_below_threshold": 0.22314356477731428,
      "success": true,
      "log_likelihood": -24.730616750303632,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -1.1051172944715555,
      "beta_amount": 1.2038833936081204,
      "fairness_threshold_perc": 25.340679873611283,
      "beta_utility_below_threshold": 1.0115969156796134,
      "success": true,
      "log_likelihood": -11.921353532188323,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -4.091754976476381,
      "beta_amount": 0.9466541202346516,
      "fairness_threshold_perc": 17.982481097683134,
      "beta_utility_below_threshold": -9.2089075437406,
      "success": true,
      "log_likelihood": -16.764090568693497,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -0.348837749393735,
      "beta_amount": 2.7068453960085117,
      "fairness_threshold_perc": 43.01374497458417,
      "beta_utility_below_threshold": -0.060634328356628256,
      "success": true,
      "log_likelihood": -22.858717653988393,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 0.9874556269985747,
      "beta_amount": 0.0543199707984915,
      "fairness_threshold_perc": 39.906367838331626,
      "beta_utility_below_threshold": -0.37471479168092214,
      "success": true,
      "log_likelihood": -23.009508749387866,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -0.4717436368590836,
      "beta_amount": 0.39685516897626766,
      "fairness_threshold_perc": 28.466133794426984,
      "beta_utility_below_threshold": -0.6932967609273105,
      "success": true,
      "log_likelihood": -20.47067931267086,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -2.424224132049784,
      "beta_amount": 0.8085633475250997,
      "fairness_threshold_perc": 15.531887902675845,
      "beta_utility_below_threshold": -10.0,
      "success": true,
      "log_likelihood": -18.203759299955337,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -2.733646953349755,
      "beta_amount": 0.48147594133341276,
      "fairness_threshold_perc": 11.559406896533275,
      "beta_utility_below_threshold": -10.0,
      "success": true,
      "log_likelihood": -18.374416997211263,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 2.761859386144822,
      "beta_amount": 8.68893726353463,
      "fairness_threshold_perc": 58.21776165081213,
      "beta_utility_below_threshold": 2.0794418043838294,
      "success": true,
      "log_likelihood": -12.557955443149265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 10.0,
      "beta_amount": 10.0,
      "fairness_threshold_perc": 39.68780235993209,
      "beta_utility_below_threshold": 0.8649982031827569,
      "success": true,
      "log_likelihood": -16.407722438217473,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 2.9340923608498324,
      "beta_amount": 8.022256758092658,
      "fairness_threshold_perc": 21.245065778468565,
      "beta_utility_below_threshold": 10.0,
      "success": true,
      "log_likelihood": -0.0004086168275617553,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -4.655931821107286,
      "beta_amount": 0.6268423363368013,
      "fairness_threshold_perc": 30.128551527195647,
      "beta_utility_below_threshold": -10.0,
      "success": true,
      "log_likelihood": -6.519746953075737,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -1.4481123190924647,
      "beta_amount": 0.41360338012737335,
      "fairness_threshold_perc": 22.338957695973882,
      "beta_utility_below_threshold": -10.0,
      "success": true,
      "log_likelihood": -17.451140233681727,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 1.846711387291857,
      "beta_amount": 0.047750715973414515,
      "fairness_threshold_perc": 39.99758459361854,
      "beta_utility_below_threshold": -1.2527786725658312,
      "success": true,
      "log_likelihood": -17.438406756417315,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 0.4914808612239413,
      "beta_amount": 6.807296426517281,
      "fairness_threshold_perc": 24.182669417547785,
      "beta_utility_below_threshold": 10.0,
      "success": true,
      "log_likelihood": -0.00041185269885879265,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -2.4996744778676323,
      "beta_amount": 6.469206495072498,
      "fairness_threshold_perc": 97.54670390531604,
      "beta_utility_below_threshold": 0.5705447173579532,
      "success": true,
      "log_likelihood": -23.54597316384963,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -2.1748424218578615,
      "beta_amount": 1.0225707799471833,
      "fairness_threshold_perc": 10.662660067355933,
      "beta_utility_below_threshold": -10.0,
      "success": true,
      "log_likelihood": -14.382873388576071,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -2.115136690510793,
      "beta_amount": 6.786725323994418,
      "fairness_threshold_perc": 40.23198686820528,
      "beta_utility_below_threshold": -0.18232339620449234,
      "success": true,
      "log_likelihood": -22.737304862844486,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -3.215114187161392,
      "beta_amount": -4.949955593262656,
      "fairness_threshold_perc": 66.00845625812599,
      "beta_utility_below_threshold": 0.6931471309337756,
      "success": true,
      "log_likelihood": -22.91451005141327,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 7.211708662501316,
      "beta_amount": -0.7779090052022113,
      "fairness_threshold_perc": 78.27630290112974,
      "beta_utility_below_threshold": 2.3979000374649986,
      "success": true,
      "log_likelihood": -10.326095382852985,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 2.4853794620904153,
      "beta_amount": -0.22827817111971957,
      "fairness_threshold_perc": 27.943020481637916,
      "beta_utility_below_threshold": -0.6931512637403439,
      "success": true,
      "log_likelihood": -19.53991366393273,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -4.445201991536969,
      "beta_amount": 5.487932301202169,
      "fairness_threshold_perc": 47.0516920233156,
      "beta_utility_below_threshold": -1.4476996864864502,
      "success": true,
      "log_likelihood": -35.84452383644477,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": 10.0,
      "beta_amount": 10.0,
      "fairness_threshold_perc": 30.486207602254545,
      "beta_utility_below_threshold": 2.9957188939465498,
      "success": true,
      "log_likelihood": -4.020325715497333,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_zero": -2.6547709535555697,
      "beta_amount": 0.8497989436674779,
      "fairness_threshold_perc": 7.78984157303616,
      "beta_utility_below_threshold": -4.9575258188180555,
      "success": true,
      "log_likelihood": -19.50122142712569,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -1.7691072043069866,
      "beta_amount": 0.707737727985632,
      "fairness_threshold_perc": 13.755956558080861,
      "beta_utility_below_threshold": -10.0,
      "success": true,
      "log_likelihood": -18.072337216191183,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -2.406100708634413,
      "beta_amount": 1.1112242915578783,
      "fairness_threshold_perc": 8.116138777385107,
      "beta_utility_below_threshold": 3.3442326999779546,
      "success": true,
      "log_likelihood": -15.71577136249254,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -7.7530238311588295,
      "beta_amount": 6.111544202240706,
      "fairness_threshold_perc": 45.58139653698663,
      "beta_utility_below_threshold": -0.060624676361828674,
      "success": true,
      "log_likelihood": -22.858703122000538,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -1.5509939785799798,
      "beta_amount": 0.471886517704807,
      "fairness_threshold_perc": 31.96087482261558,
      "beta_utility_below_threshold": -1.4469187448804905,
      "success": true,
      "log_likelihood": -19.228150478846157,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -0.6357959079654472,
      "beta_amount": 0.11992421055618047,
      "fairness_threshold_perc": 13.319599357609702,
      "beta_utility_below_threshold": -10.0,
      "success": true,
      "log_likelihood": -22.58752169255408,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -1.5521436673604965,
      "beta_amount": 0.4759345808802284,
      "fairness_threshold_perc": 5.178784727910168,
      "beta_utility_below_threshold": -8.457684480305401,
      "success": true,
      "log_likelihood": -22.682794088040865,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -1.2270067779404366,
      "beta_amount": 0.6434813850381179,
      "fairness_threshold_perc": 13.926361593489245,
      "beta_utility_below_threshold": -0.6923691203375272,
      "success": true,
      "log_likelihood": -19.027315026751644,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 9.393148347988646,
      "beta_amount": 1.9797458379195176,
      "fairness_threshold_perc": 49.77530273786138,
      "beta_utility_below_threshold": -2.740848524132478,
      "success": true,
      "log_likelihood": -7.544851843923901,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -2.6705578953414495,
      "beta_amount": 0.8339668595154548,
      "fairness_threshold_perc": 14.104519429251628,
      "beta_utility_below_threshold": -7.998592660610758,
      "success": true,
      "log_likelihood": -18.24366080159903,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -2.3457820347453366,
      "beta_amount": 0.800400887897124,
      "fairness_threshold_perc": 9.822313377994252,
      "beta_utility_below_threshold": 4.878427030179772,
      "success": true,
      "log_likelihood": -19.772884683358487,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -1.3816777584748443,
      "beta_amount": 0.24883580394946586,
      "fairness_threshold_perc": 15.615611098521443,
      "beta_utility_below_threshold": -0.6932883208397939,
      "success": true,
      "log_likelihood": -23.428065365330625,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -7.890670009788618,
      "beta_amount": -7.452213269661958,
      "fairness_threshold_perc": 89.21723799977443,
      "beta_utility_below_threshold": -0.6931476330329698,
      "success": true,
      "log_likelihood": -22.914510051414062,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -2.1549989423055713,
      "beta_amount": 5.158732351191951,
      "fairness_threshold_perc": 44.128809121817646,
      "beta_utility_below_threshold": -1.3121863169855237,
      "success": true,
      "log_likelihood": -17.052868490977342,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 6.538467100586214,
      "beta_amount": 4.854459247570219,
      "fairness_threshold_perc": 77.97134751797414,
      "beta_utility_below_threshold": 2.079443474816654,
      "success": true,
      "log_likelihood": -12.557955443155794,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -5.756994196086431,
      "beta_amount": 0.8471577942313799,
      "fairness_threshold_perc": 13.630645435387434,
      "beta_utility_below_threshold": -10.0,
      "success": true,
      "log_likelihood": -9.209435974786281,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -8.548169918874624,
      "beta_amount": -2.4380270795503094,
      "fairness_threshold_perc": 79.79357663464329,
      "beta_utility_below_threshold": 1.4213857869105153,
      "success": true,
      "log_likelihood": -17.73373166422506,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 10.0,
      "beta_amount": 10.0,
      "fairness_threshold_perc": 35.994177624280155,
      "beta_utility_below_threshold": -0.07410801594510957,
      "success": true,
      "log_likelihood": -18.696451114203292,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -0.7959556388889704,
      "beta_amount": 0.2625826541131382,
      "fairness_threshold_perc": 12.301435919690661,
      "beta_utility_below_threshold": -10.0,
      "success": true,
      "log_likelihood": -22.084092484697425,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 3.5250634756931767,
      "beta_amount": 8.142068602448774,
      "fairness_threshold_perc": 89.47996470582407,
      "beta_utility_below_threshold": -2.397902060530474,
      "success": true,
      "log_likelihood": -10.326095382885118,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 3.799228852023921,
      "beta_amount": -0.3207769892537544,
      "fairness_threshold_perc": 37.846742956369916,
      "beta_utility_below_threshold": -0.8647491718110042,
      "success": true,
      "log_likelihood": -19.37036423908097,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 10.0,
      "beta_amount": 0.9005484955659662,
      "fairness_threshold_perc": 41.1039362481324,
      "beta_utility_below_threshold": -1.7227649776981657,
      "success": true,
      "log_likelihood": -14.035835266184746,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -2.5485602154724885,
      "beta_amount": 0.8455880472226591,
      "fairness_threshold_perc": 19.62152829973194,
      "beta_utility_below_threshold": -10.0,
      "success": true,
      "log_likelihood": -17.955834982203086,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -4.946974414288594,
      "beta_amount": -4.11831110964791,
      "fairness_threshold_perc": 71.08463799913171,
      "beta_utility_below_threshold": 2.397895517956896,
      "success": true,
      "log_likelihood": -10.326095382821844,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -9.862236021889348,
      "beta_amount": -8.14811353988173,
      "fairness_threshold_perc": 52.50353600892657,
      "beta_utility_below_threshold": 1.8245508239515416,
      "success": true,
      "log_likelihood": -14.505888876014973,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -4.682542225039791,
      "beta_amount": 1.5054427624035862,
      "fairness_threshold_perc": 10.24857823263996,
      "beta_utility_below_threshold": -10.0,
      "success": true,
      "log_likelihood": -13.710540098606533,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 1.6622005299158358,
      "beta_amount": 0.17801884122791964,
      "fairness_threshold_perc": 11.28042797471851,
      "beta_utility_below_threshold": 10.0,
      "success": true,
      "log_likelihood": -9.957340157865781,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 2.6571468620391343,
      "beta_amount": -8.4158885687377,
      "fairness_threshold_perc": 63.91973232146396,
      "beta_utility_below_threshold": -2.0794532305141726,
      "success": true,
      "log_likelihood": -12.557955443392009,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 3.832110608582715,
      "beta_amount": 5.558249226575484,
      "fairness_threshold_perc": 98.58527323083177,
      "beta_utility_below_threshold": -1.8245764665334678,
      "success": true,
      "log_likelihood": -14.505888877599567,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 10.0,
      "beta_amount": 10.0,
      "fairness_threshold_perc": 32.05332622267415,
      "beta_utility_below_threshold": -1.446897006619128,
      "success": true,
      "log_likelihood": -10.22516689383861,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -6.336663057079777,
      "beta_amount": 3.3824491254211475,
      "fairness_threshold_perc": 41.43445276608665,
      "beta_utility_below_threshold": 1.1392814453414994,
      "success": true,
      "log_likelihood": -18.277598696168344,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -1.402570517104354,
      "beta_amount": 0.3965702604502612,
      "fairness_threshold_perc": 1.560099263091408,
      "beta_utility_below_threshold": -2.0730705848046043,
      "success": true,
      "log_likelihood": -23.29707013297856,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -5.273140249515071,
      "beta_amount": -7.467012018893657,
      "fairness_threshold_perc": 52.66420412369062,
      "beta_utility_below_threshold": 0.8209805572418151,
      "success": true,
      "log_likelihood": -22.157938154732847,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 8.808750916459239,
      "beta_amount": 9.49852388512338,
      "fairness_threshold_perc": 72.97458742105574,
      "beta_utility_below_threshold": 2.8332131629348485,
      "success": true,
      "log_likelihood": -7.724129579150615,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -4.623903592199353,
      "beta_amount": 0.4360498292157916,
      "fairness_threshold_perc": 13.180398020050532,
      "beta_utility_below_threshold": -10.0,
      "success": true,
      "log_likelihood": -6.931748238343923,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -1.3211476687540202,
      "beta_amount": 0.5230758061746107,
      "fairness_threshold_perc": 4.647893205330156,
      "beta_utility_below_threshold": -4.372431557633125,
      "success": true,
      "log_likelihood": -21.68299478886216,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 8.664302734714937,
      "beta_amount": -8.429628965377244,
      "fairness_threshold_perc": 51.304043878869344,
      "beta_utility_below_threshold": -2.397893341361864,
      "success": true,
      "log_likelihood": -10.326095382826917,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -2.2723434123051556,
      "beta_amount": 0.7863317804510181,
      "fairness_threshold_perc": 61.6206917600438,
      "beta_utility_below_threshold": 0.11122572001662348,
      "success": true,
      "log_likelihood": -24.897714324101937,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -5.727948972604942,
      "beta_amount": 9.677696082659782,
      "fairness_threshold_perc": 37.61860076524558,
      "beta_utility_below_threshold": 2.079442198682565,
      "success": true,
      "log_likelihood": -9.418466606610034,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -4.720214435203491,
      "beta_amount": 0.626639070846393,
      "fairness_threshold_perc": 8.198243705166275,
      "beta_utility_below_threshold": -1.7834290459856987,
      "success": true,
      "log_likelihood": -10.455192532197609,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 5.524156160681832,
      "beta_amount": 2.33152778338672,
      "fairness_threshold_perc": 47.47700650395225,
      "beta_utility_below_threshold": -0.18232166128707333,
      "success": true,
      "log_likelihood": -22.73730508432381,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 1.3277172783600246,
      "beta_amount": -0.15193116159358608,
      "fairness_threshold_perc": 24.80946563102451,
      "beta_utility_below_threshold": -0.22298349970936082,
      "success": true,
      "log_likelihood": -23.20098043954758,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 3.552254612610597,
      "beta_amount": 10.0,
      "fairness_threshold_perc": 48.96496177126595,
      "beta_utility_below_threshold": -3.4657306348598356,
      "success": true,
      "log_likelihood": -4.481200631916072,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -0.5181932381327348,
      "beta_amount": 0.3988519666867019,
      "fairness_threshold_perc": 6.1271331005884555,
      "beta_utility_below_threshold": -9.555365469397179,
      "success": true,
      "log_likelihood": -20.847809205616425,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 0.4634979857232331,
      "beta_amount": -7.144706148689018,
      "fairness_threshold_perc": 66.10319502046326,
      "beta_utility_below_threshold": -1.2527630177284623,
      "success": true,
      "log_likelihood": -19.06942315887556,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": 1.4698951471499735,
      "beta_amount": 0.6268657531120723,
      "fairness_threshold_perc": 18.770018238792762,
      "beta_utility_below_threshold": 0.6930911240162165,
      "success": true,
      "log_likelihood": -6.097333660058716,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -8.428771982049243,
      "beta_amount": 2.4510602802048482,
      "fairness_threshold_perc": 23.78596495055094,
      "beta_utility_below_threshold": -10.0,
      "success": true,
      "log_likelihood": -7.562260917792131,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_zero": -1.158691589091278,
      "beta_amount": 0.5223631738288873,
      "fairness_threshold_perc": 17.573017101718268,
      "beta_utility_below_threshold": 10.0,
      "success": true,
      "log_likelihood": -19.173142163290283,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_zero": {
        "r": 0.12391758289597378,
        "p": 0.21932051389901372
      },
      "beta_amount": {
        "r": 0.29224404708815194,
        "p": 0.0031736907844574637
      },
      "fairness_threshold_perc": {
        "r": 0.1116847669672441,
        "p": 0.2686091014180284
      },
      "beta_utility_below_threshold": {
        "r": 0.7475562777424851,
        "p": 4.105840904894379e-19
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 44.33415635043557,
  "bic_Control": 41.78877042899865,
  "bic_Cocaine": 46.61439790505614,
  "bic_results": {
    "average_bic": 44.33415635043557,
    "individual_bics": [
      34.98626651946898,
      48.70584083205395,
      55.06129831110569,
      48.023796319900526,
      58.585600562537934,
      50.20892542632754,
      14.337072228198565,
      43.01621613984471,
      14.336532235830191,
      52.99845006934585,
      53.94656966661499,
      32.73916435435857,
      51.114812255794234,
      14.335136091544065,
      14.335441253328522,
      14.334084273749212,
      14.334088235514887,
      43.34585350584435,
      34.11325163206055,
      14.334075747799966,
      63.7953092544317,
      38.17678281820109,
      47.86225689121143,
      60.05151106180122,
      60.353093252600175,
      55.27543437916616,
      50.74159435373511,
      51.08290974824696,
      39.44998664012297,
      47.14952063025939,
      14.334892987479563,
      27.373569659975914,
      49.23635622118789,
      49.210889266659066,
      14.334899459222157,
      61.4260220815237,
      43.09982253097658,
      59.808685479513414,
      60.16309585665098,
      34.98626651953041,
      53.413903081689895,
      86.02312342671398,
      22.374727184819108,
      53.33651860807582,
      50.47875018620681,
      45.765618478809515,
      60.05148199782552,
      52.79037671151676,
      59.509119138932604,
      59.699663929906166,
      52.388705807327725,
      29.42377944167224,
      50.821397357022505,
      53.87984512054142,
      61.190206484485685,
      60.16309585665256,
      48.43981273577913,
      39.44998664013603,
      32.752947703397,
      49.80153908227456,
      51.72697798223102,
      58.502260723219294,
      34.98626651959468,
      53.07480423198638,
      42.40574628619393,
      50.24574571823061,
      34.98626651946813,
      43.345853505854386,
      41.75515595103751,
      34.248756069556,
      39.44998664060846,
      43.34585350902357,
      34.78440954150166,
      50.88927314616113,
      60.92821601978156,
      58.64995206329013,
      29.78233491212567,
      28.197572230512286,
      57.70006533154876,
      34.98626651947828,
      64.12950440202832,
      33.17100896704451,
      35.24446081821966,
      59.808685922472065,
      60.73603663291959,
      23.296477017656585,
      56.02969416505729,
      52.47292207157555,
      26.52874307394187,
      29.458597589408704,
      52.68036008040501
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        34.98626651946898,
        48.70584083205395,
        55.06129831110569,
        48.023796319900526,
        58.585600562537934,
        50.20892542632754,
        14.337072228198565,
        43.01621613984471,
        14.336532235830191,
        52.99845006934585,
        53.94656966661499,
        32.73916435435857,
        51.114812255794234,
        14.335136091544065,
        14.335441253328522,
        14.334084273749212,
        14.334088235514887,
        43.34585350584435,
        34.11325163206055,
        14.334075747799966,
        63.7953092544317,
        38.17678281820109,
        47.86225689121143,
        60.05151106180122,
        60.353093252600175,
        55.27543437916616,
        50.74159435373511,
        51.08290974824696,
        39.44998664012297,
        47.14952063025939,
        14.334892987479563,
        27.373569659975914,
        49.23635622118789,
        49.210889266659066,
        14.334899459222157,
        61.4260220815237,
        43.09982253097658,
        59.808685479513414,
        60.16309585665098,
        34.98626651953041,
        53.413903081689895,
        86.02312342671398,
        22.374727184819108
      ],
      "Cocaine": [
        53.33651860807582,
        50.47875018620681,
        45.765618478809515,
        60.05148199782552,
        52.79037671151676,
        59.509119138932604,
        59.699663929906166,
        52.388705807327725,
        29.42377944167224,
        50.821397357022505,
        53.87984512054142,
        61.190206484485685,
        60.16309585665256,
        48.43981273577913,
        39.44998664013603,
        32.752947703397,
        49.80153908227456,
        51.72697798223102,
        58.502260723219294,
        34.98626651959468,
        53.07480423198638,
        42.40574628619393,
        50.24574571823061,
        34.98626651946813,
        43.345853505854386,
        41.75515595103751,
        34.248756069556,
        39.44998664060846,
        43.34585350902357,
        34.78440954150166,
        50.88927314616113,
        60.92821601978156,
        58.64995206329013,
        29.78233491212567,
        28.197572230512286,
        57.70006533154876,
        34.98626651947828,
        64.12950440202832,
        33.17100896704451,
        35.24446081821966,
        59.808685922472065,
        60.73603663291959,
        23.296477017656585,
        56.02969416505729,
        52.47292207157555,
        26.52874307394187,
        29.458597589408704,
        52.68036008040501
      ]
    },
    "num_parameters": 4,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_zero: r = 0.124\n- beta_amount: r = 0.292\n- fairness_threshold_perc: r = 0.112\n- beta_utility_below_threshold: r = 0.748",
  "previous_models": [
    "Specification: U_accept = (beta_zero + beta_amount * split_self) * (1 if split_perc_self >= fairness_threshold_perc else 0) + beta_utility_below_threshold * (1 if split_perc_self < fairness_threshold_perc else 0)\nSummary: A piecewise utility model for responder acceptance decisions. The utility of accepting depends on whether the proposed percentage share (split_perc_self) is above or below a learned absolute percentage threshold (fairness_threshold_perc). If the offer percentage is at or above the threshold, utility is a linear function of the proposed amount (split_self), scaled by beta_amount, plus a base bias (beta_zero). If the offer percentage is below the threshold, utility is a fixed value defined by beta_utility_below_threshold. This structural break aims to improve parameter identifiability by separating the influences of amount sensitivity and rejection cost based on a learned fairness threshold.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 44.33415635043557\nOverall Accuracy: 0.7289\nGroup Accuracies:\n- Control: 0.7558\n- Cocaine: 0.7049\n\nParameter Recovery:\n- beta_zero: r = 0.124\n- beta_amount: r = 0.292\n- fairness_threshold_perc: r = 0.112\n- beta_utility_below_threshold: r = 0.748"
  ]
}