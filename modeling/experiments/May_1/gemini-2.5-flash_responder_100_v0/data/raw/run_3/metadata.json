{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "<think>The user wants updated instructions for the computational modeling LLM.\nThe goal is to improve BIC, accuracy, and parameter recovery (specifically aiming for > 0.7).\nThe LLM is stateless and cannot access previous interactions.\nI need to provide instructions that guide the LLM based on the observation that the previous model had poor parameter recovery for most parameters, likely due to identifiability issues or parameter covariance.\nThe instructions should encourage exploring alternative, potentially simpler, or differently structured models to improve recovery while maintaining performance.\nI must *only* output the new instructions text, enclosed in `<new_instructions>` tags, and do any thinking within `<think>` tags.\n\nPrevious Run Analysis:\n- Model complexity: 4 learnable parameters.\n- Outcome: Good accuracy, acceptable BIC, very poor parameter recovery for beta_zero, beta_two, and beta_three.\n- Problem: Likely parameter identifiability or high covariance. The model might be trying to capture too many nuanced effects with correlated parameters, given the data.\n\nInstruction Goals:\n1. Explicitly state the importance of parameter recovery (> 0.7 threshold).\n2. Emphasize parameter identifiability and avoiding high covariance as a primary design goal.\n3. Suggest strategies:\n    - Consider simpler models (fewer parameters).\n    - Explore different functional forms beyond simple linear combinations or max functions.\n    - Maybe focus on fewer psychological mechanisms if modeling all simultaneously hinders recovery.\n4. Reiterate the task requirements (responder only, dataset variables, utility model).\n5. Update the initial step-by-step reasoning prompt to incorporate identifiability and recovery considerations.\n6. Keep the output format requirements clear (<MODEL>, <VARIABLES>, etc.).\n7. Avoid mentioning specific run numbers or outcomes directly, frame it as general challenges for modeling this task.\n\nDrafting new instructions:\n- Start by setting the priorities: BIC, Accuracy, and *crucially* Parameter Recovery (all learnable parameters must have recovery > 0.7). Emphasize that poor recovery makes a model unusable.\n- State that achieving good parameter recovery has been a key challenge for models on this task.\n- Instruct the LLM to prioritize designing a model where parameters are highly identifiable from the data. Mention that high covariance between parameters is a common pitfall leading to poor recovery.\n- Suggest that this might require simplifying the model (fewer learnable parameters) or rethinking how different psychological influences (like self-interest, 50% fairness, proportional fairness) are mathematically combined or weighted.\n- Encourage exploration of alternative model structures or functional forms that might simplify the parameter space or reduce dependencies between parameters. Think about threshold models, different penalty structures, or models focusing on fewer distinct fairness reference points if needed for identifiability.\n- Reiterate the task context: predicting responder acceptance based on offer percentage, potentially influenced by fairness considerations (50% split, proportional split based on tokens). List key available variables again.\n- Reiterate the output format requirements.\n- Modify the step-by-step reasoning prompt to explicitly include considerations for identifiability, covariance, and model simplicity/complexity trade-offs.\n\nRefining wording:\n- \"Design your computational model with parameter identifiability as a *primary* design goal. Models for this task have previously struggled with recovering parameters reliably (aiming for > 0.7 correlation), often due to high covariance or over-parameterization.\"\n- \"Carefully consider how different psychological factors (like self-interest and aversion to different types of unfairness) are combined mathematically. Highly correlated parameters can make the model unusable, even if it fits the data well.\"\n- \"Explore models with fewer learnable parameters if necessary. A simpler model with identifiable parameters is preferred over a complex one with unidentifiable parameters.\"\n- \"Do not be constrained by standard linear utility model structures. Think creatively about alternative mathematical forms (e.g., threshold models, non-linear penalties) or ways to combine influences that reduce parameter interdependencies and improve identifiability.\"\n- Update reasoning points: \"How does the model structure ensure that each learnable parameter can be uniquely estimated from the data? What are potential sources of covariance between parameters, and how can the structure minimize this? Is the number of learnable parameters appropriate for the complexity of the psychological process and the data available?\"\n\nOkay, planning complete. I will generate the instructions based on these points.<new_instructions>Design a computational model for the described ultimatum game responder task. Your model must meet the following criteria:\n1.  **Predict only responder behavior** (target variable: \"accept\").\n2.  **Pass parameter recovery tests.** This is a *primary* objective. All learnable parameters must ideally achieve a recovery correlation of **at least 0.7**. A model where parameters cannot be reliably recovered is unusable. Prioritize model structures that enhance parameter identifiability from the data.\n3.  **Be applicable to the dataset:** Use only the provided data structure and variables.\n4.  **Predict utility:** Utility values will be converted to acceptance probabilities using a logistic function (with temperature 1). A utility > 0 implies > 50% probability of acceptance.\n\nDesign your model with parameter identifiability and low parameter covariance as *critical* considerations. Computational models for this task have previously faced significant challenges in reliably recovering learnable parameters, even when fitting the data well. This often stems from parameters being too highly correlated or the model being over-parameterized relative to the available data.\n\nCarefully consider the number of learnable parameters. While complex psychological processes are at play, a simpler model with well-identifiable parameters is substantially more valuable than a complex one with parameters that cannot be reliably estimated. Bias towards fewer learnable parameters if it improves identifiability and recovery.\n\nDo not feel restricted to standard linear utility model structures. Explore alternative functional forms, different ways to combine influences (e.g., non-linear relationships, threshold effects, multiplicative interactions), or potentially focus on a subset of psychological mechanisms if attempting to model all simultaneously leads to parameter identifiability issues. Think creatively about how self-interest, aversion to a 50% split, and aversion to a proportional split might interact or be weighted in a way that allows their unique contributions to be estimated.\n\nFor any learnable parameters, you must specify generous, finite numerical bounds. The utility variable may be unbounded.\n\nProvide your formal mathematical model between <MODEL> tags. Ensure *only* the mathematical formula is within these tags.\nProvide variable descriptions in JSON format between <VARIABLES> tags. Ensure learnable parameter names are clear and suitable for coding. Spell out Greek variables.\nSpecify the target variable using <target_variable> tags.\nProvide a concise, descriptive summary of the model between <SUMMARY> tags.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember to only model responder trials (where trial_role == 1).\n\nFirst, reason step by step about:\n*   The key psychological mechanisms involved in responder decisions (self-interest, fairness/inequality aversion relative to different reference points like 50% or proportional share).\n*   How these mechanisms might interact mathematically.\n*   What mathematical form could capture these interactions while ensuring parameter identifiability and minimizing covariance.\n*   What is the minimum necessary set of parameters needed to capture the essential aspects of the behavior *robustly*, allowing for reliable parameter recovery?\n*   How the model variables map to observable behavior (\"accept\").\n*   How the chosen model structure and parameters will impact parameter recovery.\n\nPlease think through this step by step, then provide your model specification, variable descriptions, target variable, and summary.\n</new_instructions>",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: <think>The user wants updated instructions for the computational modeling LLM.\nThe goal is to improve BIC, accuracy, and parameter recovery (specifically aiming for > 0.7).\nThe LLM is stateless and cannot access previous interactions.\nI need to provide instructions that guide the LLM based on the observation that the previous model had poor parameter recovery for most parameters, likely due to identifiability issues or parameter covariance.\nThe instructions should encourage exploring alternative, potentially simpler, or differently structured models to improve recovery while maintaining performance.\nI must *only* output the new instructions text, enclosed in `<new_instructions>` tags, and do any thinking within `<think>` tags.\n\nPrevious Run Analysis:\n- Model complexity: 4 learnable parameters.\n- Outcome: Good accuracy, acceptable BIC, very poor parameter recovery for beta_zero, beta_two, and beta_three.\n- Problem: Likely parameter identifiability or high covariance. The model might be trying to capture too many nuanced effects with correlated parameters, given the data.\n\nInstruction Goals:\n1. Explicitly state the importance of parameter recovery (> 0.7 threshold).\n2. Emphasize parameter identifiability and avoiding high covariance as a primary design goal.\n3. Suggest strategies:\n    - Consider simpler models (fewer parameters).\n    - Explore different functional forms beyond simple linear combinations or max functions.\n    - Maybe focus on fewer psychological mechanisms if modeling all simultaneously hinders recovery.\n4. Reiterate the task requirements (responder only, dataset variables, utility model).\n5. Update the initial step-by-step reasoning prompt to incorporate identifiability and recovery considerations.\n6. Keep the output format requirements clear (<MODEL>, <VARIABLES>, etc.).\n7. Avoid mentioning specific run numbers or outcomes directly, frame it as general challenges for modeling this task.\n\nDrafting new instructions:\n- Start by setting the priorities: BIC, Accuracy, and *crucially* Parameter Recovery (all learnable parameters must have recovery > 0.7). Emphasize that poor recovery makes a model unusable.\n- State that achieving good parameter recovery has been a key challenge for models on this task.\n- Instruct the LLM to prioritize designing a model where parameters are highly identifiable from the data. Mention that high covariance between parameters is a common pitfall leading to poor recovery.\n- Suggest that this might require simplifying the model (fewer learnable parameters) or rethinking how different psychological influences (like self-interest, 50% fairness, proportional fairness) are mathematically combined or weighted.\n- Encourage exploration of alternative model structures or functional forms that might simplify the parameter space or reduce dependencies between parameters. Think about threshold models, different penalty structures, or models focusing on fewer distinct fairness reference points if needed for identifiability.\n- Reiterate the task context: predicting responder acceptance based on offer percentage, potentially influenced by fairness considerations (50% split, proportional split based on tokens). List key available variables again.\n- Reiterate the output format requirements.\n- Modify the step-by-step reasoning prompt to explicitly include considerations for identifiability, covariance, and model simplicity/complexity trade-offs.\n\nRefining wording:\n- \"Design your computational model with parameter identifiability as a *primary* design goal. Models for this task have previously struggled with recovering parameters reliably (aiming for > 0.7 correlation), often due to high covariance or over-parameterization.\"\n- \"Carefully consider how different psychological factors (like self-interest and aversion to different types of unfairness) are combined mathematically. Highly correlated parameters can make the model unusable, even if it fits the data well.\"\n- \"Explore models with fewer learnable parameters if necessary. A simpler model with identifiable parameters is preferred over a complex one with unidentifiable parameters.\"\n- \"Do not be constrained by standard linear utility model structures. Think creatively about alternative mathematical forms (e.g., threshold models, non-linear penalties) or ways to combine influences that reduce parameter interdependencies and improve identifiability.\"\n- Update reasoning points: \"How does the model structure ensure that each learnable parameter can be uniquely estimated from the data? What are potential sources of covariance between parameters, and how can the structure minimize this? Is the number of learnable parameters appropriate for the complexity of the psychological process and the data available?\"\n\nOkay, planning complete. I will generate the instructions based on these points.<new_instructions>Design a computational model for the described ultimatum game responder task. Your model must meet the following criteria:\n1.  **Predict only responder behavior** (target variable: \"accept\").\n2.  **Pass parameter recovery tests.** This is a *primary* objective. All learnable parameters must ideally achieve a recovery correlation of **at least 0.7**. A model where parameters cannot be reliably recovered is unusable. Prioritize model structures that enhance parameter identifiability from the data.\n3.  **Be applicable to the dataset:** Use only the provided data structure and variables.\n4.  **Predict utility:** Utility values will be converted to acceptance probabilities using a logistic function (with temperature 1). A utility > 0 implies > 50% probability of acceptance.\n\nDesign your model with parameter identifiability and low parameter covariance as *critical* considerations. Computational models for this task have previously faced significant challenges in reliably recovering learnable parameters, even when fitting the data well. This often stems from parameters being too highly correlated or the model being over-parameterized relative to the available data.\n\nCarefully consider the number of learnable parameters. While complex psychological processes are at play, a simpler model with well-identifiable parameters is substantially more valuable than a complex one with parameters that cannot be reliably estimated. Bias towards fewer learnable parameters if it improves identifiability and recovery.\n\nDo not feel restricted to standard linear utility model structures. Explore alternative functional forms, different ways to combine influences (e.g., non-linear relationships, threshold effects, multiplicative interactions), or potentially focus on a subset of psychological mechanisms if attempting to model all simultaneously leads to parameter identifiability issues. Think creatively about how self-interest, aversion to a 50% split, and aversion to a proportional split might interact or be weighted in a way that allows their unique contributions to be estimated.\n\nFor any learnable parameters, you must specify generous, finite numerical bounds. The utility variable may be unbounded.\n\nProvide your formal mathematical model between <MODEL> tags. Ensure *only* the mathematical formula is within these tags.\nProvide variable descriptions in JSON format between <VARIABLES> tags. Ensure learnable parameter names are clear and suitable for coding. Spell out Greek variables.\nSpecify the target variable using <target_variable> tags.\nProvide a concise, descriptive summary of the model between <SUMMARY> tags.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\nRemember to only model responder trials (where trial_role == 1).\n\nFirst, reason step by step about:\n*   The key psychological mechanisms involved in responder decisions (self-interest, fairness/inequality aversion relative to different reference points like 50% or proportional share).\n*   How these mechanisms might interact mathematically.\n*   What mathematical form could capture these interactions while ensuring parameter identifiability and minimizing covariance.\n*   What is the minimum necessary set of parameters needed to capture the essential aspects of the behavior *robustly*, allowing for reliable parameter recovery?\n*   How the model variables map to observable behavior (\"accept\").\n*   How the chosen model structure and parameters will impact parameter recovery.\n\nPlease think through this step by step, then provide your model specification, variable descriptions, target variable, and summary.\n</new_instructions>\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nfairness_norm_prop_perc = (token_self / (token_self + token_opp)) * 100\nfairness_norm_effective_perc = fifty_fifty_weight * 50 + (1 - fifty_fifty_weight) * fairness_norm_prop_perc\npenalty_amount = max(0, fairness_norm_effective_perc - split_perc_self)\nUtility = split_self - penalty_weight * penalty_amount\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"fairness_norm_prop_perc\": {\n      \"description\": \"The percentage share of the combined earning proportional to the participant's token contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_norm_effective_perc\": {\n      \"description\": \"The calculated effective fairness percentage norm, a weighted average of the 50% norm and the proportional norm.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"penalty_amount\": {\n      \"description\": \"The magnitude of the penalty incurred, representing the shortfall of the proposed percentage below the effective fairness norm.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Utility\": {\n      \"description\": \"The utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"penalty_weight\": {\n      \"description\": \"Learnable parameter scaling the cost of receiving an offer below the effective fairness norm. Higher values indicate stronger aversion to unfairness.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000\n      },\n      \"inclusive_min\": true,\n      \"inclusive_max\": true,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fifty_fifty_weight\": {\n      \"description\": \"Learnable parameter weighting the 50% split norm relative to the proportional split norm in calculating the effective fairness percentage norm. 0 favors proportional, 1 favors 50/50.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"inclusive_min\": true,\n      \"inclusive_max\": true,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model predicting responder acceptance based on a trade-off between the monetary amount received (split_self) and a penalty for unfairness. Unfairness is measured by the degree to which the proposed percentage share (split_perc_self) falls below a calculated effective fairness norm. This effective norm is a weighted average of a 50% split and the proportional share based on token contributions. The model includes two learnable parameters: a penalty_weight scaling the impact of the unfairness penalty, and a fifty_fifty_weight determining the contribution of the 50% norm versus the proportional norm to the effective fairness norm. The utility of acceptance is compared to the utility of rejection (zero), and a logistic function translates this utility difference into a probability of acceptance.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['penalty_weight', 'fifty_fifty_weight']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                fairness_norm_prop_perc = (token_self / (token_self + token_opp)) * 100\nfairness_norm_effective_perc = fifty_fifty_weight * 50 + (1 - fifty_fifty_weight) * fairness_norm_prop_perc\npenalty_amount = max(0, fairness_norm_effective_perc - split_perc_self)\nUtility = split_self - penalty_weight * penalty_amount\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"fairness_norm_prop_perc\": {\n      \"description\": \"The percentage share of the combined earning proportional to the participant's token contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_norm_effective_perc\": {\n      \"description\": \"The calculated effective fairness percentage norm, a weighted average of the 50% norm and the proportional norm.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"penalty_amount\": {\n      \"description\": \"The magnitude of the penalty incurred, representing the shortfall of the proposed percentage below the effective fairness norm.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Utility\": {\n      \"description\": \"The utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \\u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"penalty_weight\": {\n      \"description\": \"Learnable parameter scaling the cost of receiving an offer below the effective fairness norm. Higher values indicate stronger aversion to unfairness.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fifty_fifty_weight\": {\n      \"description\": \"Learnable parameter weighting the 50% split norm relative to the proportional split norm in calculating the effective fairness percentage norm. 0 favors proportional, 1 favors 50/50.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, penalty_weight=1, fifty_fifty_weight=0.5):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        # Calculate fairness_norm_prop_perc\n        if (token_self + token_opp) == 0:\n            fairness_norm_prop_perc = 50  # Avoid division by zero, assume 50/50 split if no tokens\n        else:\n            fairness_norm_prop_perc = (token_self / (token_self + token_opp)) * 100\n\n        # Calculate fairness_norm_effective_perc\n        fairness_norm_effective_perc = fifty_fifty_weight * 50 + (1 - fifty_fifty_weight) * fairness_norm_prop_perc\n\n        # Calculate penalty_amount\n        penalty_amount = max(0, fairness_norm_effective_perc - split_perc_self)\n\n        # Calculate Utility\n        Utility = split_self - penalty_weight * penalty_amount\n\n        model_predictions.append(Utility)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"treatment\", \"trial_number\": 1, \"trial_type\": 0, \"trial_role\": 0, \"token_opp\": 6, \"token_self\": 6, \"combined_earning\": 6, \"split_opp\": 2.0, \"split_self\": 4.0, \"splitperc_opp\": 33, \"splitperc_self\": 67, \"accept\": 1.0, \"accepted_amount\": 4.0, \"accepted_perc\": 67.0, \"proposed_perc\": 67.0, \"proposed_amount\": 4.0}, {\"ID\": 1, \"group\": \"treatment\", \"trial_number\": 2, \"trial_type\": 0, \"trial_role\": 0, \"token_opp\": 6, \"token_self\": 6, \"combined_earning\": 6, \"split_opp\": 3.0, \"split_self\": 3.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 3.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 3.0}, {\"ID\": 2, \"group\": \"treatment\", \"trial_number\": 3, \"trial_type\": 0, \"trial_role\": 0, \"token_opp\": 6, \"token_self\": 6, \"combined_earning\": 6, \"split_opp\": 1.0, \"split_self\": 5.0, \"splitperc_opp\": 17, \"splitperc_self\": 83, \"accept\": 1.0, \"accepted_amount\": 5.0, \"accepted_perc\": 83.0, \"proposed_perc\": 83.0, \"proposed_amount\": 5.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1746096109.012806
    }
  ],
  "learnable_parameters": {
    "penalty_weight": {
      "description": "Learnable parameter scaling the cost of receiving an offer below the effective fairness norm. Higher values indicate stronger aversion to unfairness.",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fifty_fifty_weight": {
      "description": "Learnable parameter weighting the 50% split norm relative to the proportional split norm in calculating the effective fairness percentage norm. 0 favors proportional, 1 favors 50/50.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "fairness_norm_prop_perc = (token_self / (token_self + token_opp)) * 100\nfairness_norm_effective_perc = fifty_fifty_weight * 50 + (1 - fifty_fifty_weight) * fairness_norm_prop_perc\npenalty_amount = max(0, fairness_norm_effective_perc - split_perc_self)\nUtility = split_self - penalty_weight * penalty_amount",
  "variable_descriptions": {
    "fairness_norm_prop_perc": {
      "description": "The percentage share of the combined earning proportional to the participant's token contribution.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fairness_norm_effective_perc": {
      "description": "The calculated effective fairness percentage norm, a weighted average of the 50% norm and the proportional norm.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "penalty_amount": {
      "description": "The magnitude of the penalty incurred, representing the shortfall of the proposed percentage below the effective fairness norm.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "Utility": {
      "description": "The utility of accepting the proposed offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "split_self": {
      "description": "The proposed share for the participant (in \u00a3).",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant (in %).",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "penalty_weight": {
      "description": "Learnable parameter scaling the cost of receiving an offer below the effective fairness norm. Higher values indicate stronger aversion to unfairness.",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "fifty_fifty_weight": {
      "description": "Learnable parameter weighting the 50% split norm relative to the proportional split norm in calculating the effective fairness percentage norm. 0 favors proportional, 1 favors 50/50.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "A utility model predicting responder acceptance based on a trade-off between the monetary amount received (split_self) and a penalty for unfairness. Unfairness is measured by the degree to which the proposed percentage share (split_perc_self) falls below a calculated effective fairness norm. This effective norm is a weighted average of a 50% split and the proportional share based on token contributions. The model includes two learnable parameters: a penalty_weight scaling the impact of the unfairness penalty, and a fifty_fifty_weight determining the contribution of the 50% norm versus the proportional norm to the effective fairness norm. The utility of acceptance is compared to the utility of rejection (zero), and a logistic function translates this utility difference into a probability of acceptance.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nfairness_norm_prop_perc = (token_self / (token_self + token_opp)) * 100\nfairness_norm_effective_perc = fifty_fifty_weight * 50 + (1 - fifty_fifty_weight) * fairness_norm_prop_perc\npenalty_amount = max(0, fairness_norm_effective_perc - split_perc_self)\nUtility = split_self - penalty_weight * penalty_amount\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"fairness_norm_prop_perc\": {\n      \"description\": \"The percentage share of the combined earning proportional to the participant's token contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fairness_norm_effective_perc\": {\n      \"description\": \"The calculated effective fairness percentage norm, a weighted average of the 50% norm and the proportional norm.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"penalty_amount\": {\n      \"description\": \"The magnitude of the penalty incurred, representing the shortfall of the proposed percentage below the effective fairness norm.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"Utility\": {\n      \"description\": \"The utility of accepting the proposed offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"split_self\": {\n      \"description\": \"The proposed share for the participant (in \u00a3).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"penalty_weight\": {\n      \"description\": \"Learnable parameter scaling the cost of receiving an offer below the effective fairness norm. Higher values indicate stronger aversion to unfairness.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000\n      },\n      \"inclusive_min\": true,\n      \"inclusive_max\": true,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"fifty_fifty_weight\": {\n      \"description\": \"Learnable parameter weighting the 50% split norm relative to the proportional split norm in calculating the effective fairness percentage norm. 0 favors proportional, 1 favors 50/50.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"inclusive_min\": true,\n      \"inclusive_max\": true,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA utility model predicting responder acceptance based on a trade-off between the monetary amount received (split_self) and a penalty for unfairness. Unfairness is measured by the degree to which the proposed percentage share (split_perc_self) falls below a calculated effective fairness norm. This effective norm is a weighted average of a 50% split and the proportional share based on token contributions. The model includes two learnable parameters: a penalty_weight scaling the impact of the unfairness penalty, and a fifty_fifty_weight determining the contribution of the 50% norm versus the proportional norm to the effective fairness norm. The utility of acceptance is compared to the utility of rejection (zero), and a logistic function translates this utility difference into a probability of acceptance.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: fairness_norm_prop_perc = (token_self / (token_self + token_opp)) * 100\nfairness_norm_effective_perc = fifty_fifty_weight * 50 + (1 - fifty_fifty_weight) * fairness_norm_prop_perc\npenalty_amount = max(0, fairness_norm_effective_perc - split_perc_self)\nUtility = split_self - penalty_weight * penalty_amount\nSummary: A utility model predicting responder acceptance based on a trade-off between the monetary amount received (split_self) and a penalty for unfairness. Unfairness is measured by the degree to which the proposed percentage share (split_perc_self) falls below a calculated effective fairness norm. This effective norm is a weighted average of a 50% split and the proportional share based on token contributions. The model includes two learnable parameters: a penalty_weight scaling the impact of the unfairness penalty, and a fifty_fifty_weight determining the contribution of the 50% norm versus the proportional norm to the effective fairness norm. The utility of acceptance is compared to the utility of rejection (zero), and a logistic function translates this utility difference into a probability of acceptance.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, penalty_weight=1, fifty_fifty_weight=0.5):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_self = trial.get(\"split_self\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        # Calculate fairness_norm_prop_perc\n        if (token_self + token_opp) == 0:\n            fairness_norm_prop_perc = 50  # Avoid division by zero, assume 50/50 split if no tokens\n        else:\n            fairness_norm_prop_perc = (token_self / (token_self + token_opp)) * 100\n\n        # Calculate fairness_norm_effective_perc\n        fairness_norm_effective_perc = fifty_fifty_weight * 50 + (1 - fifty_fifty_weight) * fairness_norm_prop_perc\n\n        # Calculate penalty_amount\n        penalty_amount = max(0, fairness_norm_effective_perc - split_perc_self)\n\n        # Calculate Utility\n        Utility = split_self - penalty_weight * penalty_amount\n\n        model_predictions.append(Utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5054945054945055,
  "group_accuracies": {
    "Control": 0.43863049095607237,
    "Cocaine": 0.5653935185185185
  },
  "group_parameter_averages": {
    "Control": {
      "penalty_weight": 525.4948763419033,
      "fifty_fifty_weight": 0.3759874999187661
    },
    "Cocaine": {
      "penalty_weight": 399.35212617929454,
      "fifty_fifty_weight": 0.3612184202633433
    }
  },
  "fitting_results": [
    {
      "penalty_weight": 333.27240425215,
      "fifty_fifty_weight": 0.7407728065034334,
      "success": true,
      "log_likelihood": -23.037022073477676,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 349.31579888960727,
      "fifty_fifty_weight": 0.48716953505265015,
      "success": true,
      "log_likelihood": -368.4247860240847,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 819.4296401260127,
      "fifty_fifty_weight": 0.2921624181970759,
      "success": true,
      "log_likelihood": -368.4517431170902,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 371.2497545549133,
      "fifty_fifty_weight": 0.31767139563262237,
      "success": true,
      "log_likelihood": -276.3483393969282,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 712.1753649342196,
      "fifty_fifty_weight": 0.0,
      "success": true,
      "log_likelihood": -276.35081508206576,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 523.518049769578,
      "fifty_fifty_weight": 0.06683214243182511,
      "success": true,
      "log_likelihood": -460.55514683725204,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 809.4791268598351,
      "fifty_fifty_weight": 0.26608094836233376,
      "success": true,
      "log_likelihood": -759.891208927778,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 217.92320578356308,
      "fifty_fifty_weight": 1.0,
      "success": true,
      "log_likelihood": -483.5650884191345,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 170.09391048971955,
      "fifty_fifty_weight": 1.0,
      "success": true,
      "log_likelihood": -759.87529957962,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 196.94658244388575,
      "fifty_fifty_weight": 0.19559418858627875,
      "success": true,
      "log_likelihood": -253.32248846688768,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 878.6734304818253,
      "fifty_fifty_weight": 0.2903231660142229,
      "success": true,
      "log_likelihood": -299.3741903269687,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 286.8876219474544,
      "fifty_fifty_weight": 0.952670049207947,
      "success": true,
      "log_likelihood": -46.06287300351807,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 454.61417402854244,
      "fifty_fifty_weight": 0.915616504081342,
      "success": true,
      "log_likelihood": -299.3472332339632,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 479.9800938185811,
      "fifty_fifty_weight": 0.07946787624115637,
      "success": true,
      "log_likelihood": -759.891208927778,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 577.8585728364744,
      "fifty_fifty_weight": 0.4307662081043865,
      "success": true,
      "log_likelihood": -782.890102764813,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.05555555555555555,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 547.8835837105197,
      "fifty_fifty_weight": 0.022220244278702728,
      "success": true,
      "log_likelihood": -759.891208927778,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 630.5889131610868,
      "fifty_fifty_weight": 0.21523780489733102,
      "success": true,
      "log_likelihood": -759.8912089277779,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 814.3207987252292,
      "fifty_fifty_weight": 0.34289143656941967,
      "success": true,
      "log_likelihood": -644.7619542775758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 780.9077054226186,
      "fifty_fifty_weight": 0.24315990185811043,
      "success": true,
      "log_likelihood": -667.7878052076162,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 925.5947528410089,
      "fifty_fifty_weight": 0.20313437035605675,
      "success": true,
      "log_likelihood": -759.891208927778,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 88.96558552642043,
      "fifty_fifty_weight": 0.5242508219082352,
      "success": true,
      "log_likelihood": -414.4764878841656,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 579.9589931536601,
      "fifty_fifty_weight": 0.8796408094577648,
      "success": true,
      "log_likelihood": -667.7608481146106,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 483.29760720178695,
      "fifty_fifty_weight": 0.13575642432327617,
      "success": true,
      "log_likelihood": -230.29663753684733,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 440.1793844563028,
      "fifty_fifty_weight": 0.06555714274115265,
      "success": true,
      "log_likelihood": -368.4517431170901,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 808.045560661483,
      "fifty_fifty_weight": 0.27176400765009356,
      "success": true,
      "log_likelihood": -345.42589218704967,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 868.6141434714189,
      "fifty_fifty_weight": 0.5334852832254627,
      "success": true,
      "log_likelihood": -437.5023388142061,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 180.2578174877617,
      "fifty_fifty_weight": 0.029408627420034583,
      "success": true,
      "log_likelihood": -391.47759404709234,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 498.16886046333167,
      "fifty_fifty_weight": 0.6490439340063459,
      "success": true,
      "log_likelihood": -184.21797858376104,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 266.65146759630096,
      "fifty_fifty_weight": 0.21184126839344763,
      "success": true,
      "log_likelihood": -667.7878052076162,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 912.2528916801103,
      "fifty_fifty_weight": 0.12626628752366964,
      "success": true,
      "log_likelihood": -575.6844014874544,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 84.49114049542115,
      "fifty_fifty_weight": 1.0,
      "success": true,
      "log_likelihood": -759.87529957962,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 86.49808361205591,
      "fifty_fifty_weight": 0.4331376237639093,
      "success": true,
      "log_likelihood": -23.037022073477655,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 374.01862961071373,
      "fifty_fifty_weight": 0.05441307495521375,
      "success": true,
      "log_likelihood": -276.34833939692834,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 752.9603135127024,
      "fifty_fifty_weight": 0.2267246815043532,
      "success": true,
      "log_likelihood": -253.32248846688768,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 741.9765737598308,
      "fifty_fifty_weight": 0.3223417828435118,
      "success": true,
      "log_likelihood": -759.8912089277779,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 775.2856829578985,
      "fifty_fifty_weight": 0.3336667084687993,
      "success": true,
      "log_likelihood": -460.555146837252,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 794.0152230387265,
      "fifty_fifty_weight": 0.009934303350824458,
      "success": true,
      "log_likelihood": -506.60684869733296,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 96.722956788314,
      "fifty_fifty_weight": 0.1869839290416222,
      "success": true,
      "log_likelihood": -345.42589218704967,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 399.50456000707027,
      "fifty_fifty_weight": 0.6727990284023658,
      "success": true,
      "log_likelihood": -506.57989160432743,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 913.4984796916814,
      "fifty_fifty_weight": 0.7101419793135184,
      "success": true,
      "log_likelihood": -713.8125499746915,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1388888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 648.9884003899085,
      "fifty_fifty_weight": 0.4292099720783259,
      "success": true,
      "log_likelihood": -460.52818974424656,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 104.80793640857766,
      "fifty_fifty_weight": 0.2617044344280878,
      "success": true,
      "log_likelihood": -115.16738288664496,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 816.4059056535367,
      "fifty_fifty_weight": 0.03761937533203308,
      "success": true,
      "log_likelihood": -736.8653579977375,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "penalty_weight": 155.7089071931882,
      "fifty_fifty_weight": 0.10006029550550555,
      "success": true,
      "log_likelihood": -391.4775940471306,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 872.1878507421486,
      "fifty_fifty_weight": 0.017177758022159928,
      "success": true,
      "log_likelihood": -437.5292959072115,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 561.0296907124352,
      "fifty_fifty_weight": 0.23944729913968765,
      "success": true,
      "log_likelihood": -529.6326996273733,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 26.468389884513872,
      "fifty_fifty_weight": 0.0,
      "success": true,
      "log_likelihood": -345.42836787218704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 897.4400478537435,
      "fifty_fifty_weight": 0.028099945682154126,
      "success": true,
      "log_likelihood": -253.32248846688782,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 884.900261265208,
      "fifty_fifty_weight": 0.33356757599832676,
      "success": true,
      "log_likelihood": -276.3483393969283,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 232.4619292341572,
      "fifty_fifty_weight": 0.8066592998197153,
      "success": true,
      "log_likelihood": -391.4506369541251,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 202.11294237305688,
      "fifty_fifty_weight": 0.7645192951837094,
      "success": true,
      "log_likelihood": -529.6057425343679,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 290.1273744815044,
      "fifty_fifty_weight": 0.4155857952487916,
      "success": true,
      "log_likelihood": -69.08872393355854,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 731.8247204691037,
      "fifty_fifty_weight": 0.14416835056885147,
      "success": true,
      "log_likelihood": -368.4517431170902,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 989.8302840276864,
      "fifty_fifty_weight": 0.5095346110350131,
      "success": true,
      "log_likelihood": -437.502338814206,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 866.0733600408599,
      "fifty_fifty_weight": 0.31069695571042644,
      "success": true,
      "log_likelihood": -253.3224884668877,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 0.3243588515111553,
      "fifty_fifty_weight": 0.0,
      "success": true,
      "log_likelihood": -6.01104888231663,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 19.296868649469793,
      "fifty_fifty_weight": 0.0,
      "success": true,
      "log_likelihood": -138.19570950182293,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 304.7885188795544,
      "fifty_fifty_weight": 0.19506502334323583,
      "success": true,
      "log_likelihood": -667.7878052076162,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 17.57220548507259,
      "fifty_fifty_weight": 1.0,
      "success": true,
      "log_likelihood": -23.048069818325153,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 503.667726231452,
      "fifty_fifty_weight": 0.650331031689305,
      "success": true,
      "log_likelihood": -621.7091462545299,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.25,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 589.4349468878715,
      "fifty_fifty_weight": 0.3037586631386514,
      "success": true,
      "log_likelihood": -437.52929590721146,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 148.3920973697479,
      "fifty_fifty_weight": 0.07583813192855693,
      "success": true,
      "log_likelihood": -345.42589218704967,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 289.8917142042274,
      "fifty_fifty_weight": 0.8922292526889657,
      "success": true,
      "log_likelihood": -23.037022073477655,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 450.8000691626741,
      "fifty_fifty_weight": 0.07011718754051266,
      "success": true,
      "log_likelihood": -299.37419032696874,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 702.2953893462535,
      "fifty_fifty_weight": 0.12826520530134522,
      "success": true,
      "log_likelihood": -115.16738288664493,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 487.82625035989656,
      "fifty_fifty_weight": 0.7257694837008005,
      "success": true,
      "log_likelihood": -414.4764878841657,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 72.92653385622827,
      "fifty_fifty_weight": 0.0,
      "success": true,
      "log_likelihood": -667.7902808927536,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 627.3028689335866,
      "fifty_fifty_weight": 0.33237913734868896,
      "success": true,
      "log_likelihood": -644.7619542775756,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 554.2843239999852,
      "fifty_fifty_weight": 0.910826326255454,
      "success": true,
      "log_likelihood": -414.4764878841656,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 36.815792227088195,
      "fifty_fifty_weight": 0.2671076830607929,
      "success": true,
      "log_likelihood": -690.8136561376566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 571.8950955121064,
      "fifty_fifty_weight": 0.13890476527789775,
      "success": true,
      "log_likelihood": -23.063979166483158,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 582.5548136530224,
      "fifty_fifty_weight": 0.9782675485299975,
      "success": true,
      "log_likelihood": -69.0887239335586,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 71.07576590967003,
      "fifty_fifty_weight": 0.3326892025973279,
      "success": true,
      "log_likelihood": -368.45174311709013,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 128.64864935378318,
      "fifty_fifty_weight": 0.895176117070162,
      "success": true,
      "log_likelihood": -598.6832953244892,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 244.6737086577207,
      "fifty_fifty_weight": 0.0,
      "success": true,
      "log_likelihood": -349.92836786318657,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 444.8313923673253,
      "fifty_fifty_weight": 0.8330829188087974,
      "success": true,
      "log_likelihood": -529.6057425343679,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 740.2089990787402,
      "fifty_fifty_weight": 0.2606896667047972,
      "success": true,
      "log_likelihood": -713.8395070676971,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.1388888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 299.96544816802304,
      "fifty_fifty_weight": 0.6930462071421025,
      "success": true,
      "log_likelihood": -27.537022064477092,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 321.1464276501166,
      "fifty_fifty_weight": 0.328527792402759,
      "success": true,
      "log_likelihood": -437.52929590721146,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 210.35185464446914,
      "fifty_fifty_weight": 0.6044671175481137,
      "success": true,
      "log_likelihood": -23.037022073477658,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 137.6124974327413,
      "fifty_fifty_weight": 0.3712279734705026,
      "success": true,
      "log_likelihood": -368.45174311709013,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 409.4880486145259,
      "fifty_fifty_weight": 0.0,
      "success": true,
      "log_likelihood": -667.7902808927536,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 120.02788357532191,
      "fifty_fifty_weight": 0.663195383570926,
      "success": true,
      "log_likelihood": -73.58872392455801,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 37.966415061336576,
      "fifty_fifty_weight": 0.3681567332053478,
      "success": true,
      "log_likelihood": -345.42589218704967,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 463.60486000869736,
      "fifty_fifty_weight": 0.0,
      "success": true,
      "log_likelihood": -414.50592066230854,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 319.59449356100936,
      "fifty_fifty_weight": 0.2728179021922934,
      "success": true,
      "log_likelihood": -23.063979166483136,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 973.0322781231422,
      "fifty_fifty_weight": 0.352456859564523,
      "success": true,
      "log_likelihood": -506.60684869733296,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 944.7275226192281,
      "fifty_fifty_weight": 0.11480037479980443,
      "success": true,
      "log_likelihood": -142.6932338076848,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 32.139471746371214,
      "fifty_fifty_weight": 0.0,
      "success": true,
      "log_likelihood": -690.8161318227942,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 158.48573916472031,
      "fifty_fifty_weight": 0.8132006997474974,
      "success": true,
      "log_likelihood": -345.39893509404413,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "penalty_weight": 441.0852689818414,
      "fifty_fifty_weight": 0.09657260209697704,
      "success": true,
      "log_likelihood": -506.6068486973329,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "penalty_weight": {
        "r": -0.11713712224883525,
        "p": 0.24578637498364028
      },
      "fifty_fifty_weight": {
        "r": 0.46941125998743766,
        "p": 8.367845995770666e-07
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 820.9953104963729,
  "bic_Control": 937.8976554491799,
  "bic_Cocaine": 716.2702931428166,
  "bic_results": {
    "average_bic": 820.9953104963729,
    "individual_bics": [
      53.24108202386757,
      744.0166099250816,
      744.0705241110926,
      559.8637166707687,
      559.8686680410437,
      928.2773315514163,
      1526.9494557324683,
      974.2972147151812,
      1526.9176370361522,
      513.8120148106876,
      605.9154185308496,
      99.29278388394836,
      605.8615043448386,
      1526.9494557324683,
      1572.9472434065383,
      1526.9494557324683,
      1526.949455732468,
      1296.6909464320638,
      1342.7426482921446,
      1526.9494557324683,
      836.1200136452434,
      1342.6887341061333,
      467.7603129506069,
      744.0705241110924,
      698.0188222510116,
      882.1717155053244,
      790.1222259710969,
      375.6029950444343,
      1342.7426482921446,
      1158.535840851821,
      1526.9176370361522,
      53.24108202386753,
      559.8637166707689,
      513.8120148106876,
      1526.949455732468,
      928.2773315514162,
      1020.3807352715781,
      698.0188222510116,
      1020.3268210855671,
      1434.7921378262952,
      928.2234173654053,
      237.50180365020213,
      1480.8977538723873,
      790.1222259711734,
      882.2256296913353,
      1066.4324371316588,
      698.0237736212863,
      513.8120148106879,
      559.8637166707688,
      790.0683117851625,
      1066.378522945648,
      145.3444857440293,
      744.0705241110926,
      882.1717155053242,
      513.8120148106876,
      19.18913564154548,
      283.5584568805581,
      1342.7426482921446,
      53.263177513562525,
      1250.585330385972,
      882.2256296913351,
      698.0188222510116,
      53.24108202386753,
      605.9154185308497,
      237.50180365020208,
      836.1200136452436,
      1342.7475996624194,
      1296.6909464320634,
      836.1200136452434,
      1388.7943501522254,
      53.29499620987853,
      145.3444857440294,
      744.0705241110925,
      1204.5336285258907,
      707.0237736032853,
      1066.378522945648,
      1434.8460520123065,
      62.2410820058664,
      882.2256296913351,
      53.241082023867534,
      744.0705241110925,
      1342.7475996624194,
      154.34448572602824,
      698.0188222510116,
      836.1788792015293,
      53.29499620987849,
      1020.3807352715781,
      292.55350549228183,
      1388.7993015225006,
      697.9649080650005,
      1020.380735271578
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        53.24108202386757,
        744.0166099250816,
        744.0705241110926,
        559.8637166707687,
        559.8686680410437,
        928.2773315514163,
        1526.9494557324683,
        974.2972147151812,
        1526.9176370361522,
        513.8120148106876,
        605.9154185308496,
        99.29278388394836,
        605.8615043448386,
        1526.9494557324683,
        1572.9472434065383,
        1526.9494557324683,
        1526.949455732468,
        1296.6909464320638,
        1342.7426482921446,
        1526.9494557324683,
        836.1200136452434,
        1342.6887341061333,
        467.7603129506069,
        744.0705241110924,
        698.0188222510116,
        882.1717155053244,
        790.1222259710969,
        375.6029950444343,
        1342.7426482921446,
        1158.535840851821,
        1526.9176370361522,
        53.24108202386753,
        559.8637166707689,
        513.8120148106876,
        1526.949455732468,
        928.2773315514162,
        1020.3807352715781,
        698.0188222510116,
        1020.3268210855671,
        1434.7921378262952,
        928.2234173654053,
        237.50180365020213,
        1480.8977538723873
      ],
      "Cocaine": [
        790.1222259711734,
        882.2256296913353,
        1066.4324371316588,
        698.0237736212863,
        513.8120148106879,
        559.8637166707688,
        790.0683117851625,
        1066.378522945648,
        145.3444857440293,
        744.0705241110926,
        882.1717155053242,
        513.8120148106876,
        19.18913564154548,
        283.5584568805581,
        1342.7426482921446,
        53.263177513562525,
        1250.585330385972,
        882.2256296913351,
        698.0188222510116,
        53.24108202386753,
        605.9154185308497,
        237.50180365020208,
        836.1200136452436,
        1342.7475996624194,
        1296.6909464320634,
        836.1200136452434,
        1388.7943501522254,
        53.29499620987853,
        145.3444857440294,
        744.0705241110925,
        1204.5336285258907,
        707.0237736032853,
        1066.378522945648,
        1434.8460520123065,
        62.2410820058664,
        882.2256296913351,
        53.241082023867534,
        744.0705241110925,
        1342.7475996624194,
        154.34448572602824,
        698.0188222510116,
        836.1788792015293,
        53.29499620987849,
        1020.3807352715781,
        292.55350549228183,
        1388.7993015225006,
        697.9649080650005,
        1020.380735271578
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- penalty_weight: r = -0.117\n- fifty_fifty_weight: r = 0.469",
  "previous_models": [
    "Specification: fairness_norm_prop_perc = (token_self / (token_self + token_opp)) * 100\nfairness_norm_effective_perc = fifty_fifty_weight * 50 + (1 - fifty_fifty_weight) * fairness_norm_prop_perc\npenalty_amount = max(0, fairness_norm_effective_perc - split_perc_self)\nUtility = split_self - penalty_weight * penalty_amount\nSummary: A utility model predicting responder acceptance based on a trade-off between the monetary amount received (split_self) and a penalty for unfairness. Unfairness is measured by the degree to which the proposed percentage share (split_perc_self) falls below a calculated effective fairness norm. This effective norm is a weighted average of a 50% split and the proportional share based on token contributions. The model includes two learnable parameters: a penalty_weight scaling the impact of the unfairness penalty, and a fifty_fifty_weight determining the contribution of the 50% norm versus the proportional norm to the effective fairness norm. The utility of acceptance is compared to the utility of rejection (zero), and a logistic function translates this utility difference into a probability of acceptance.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 820.9953104963729\nOverall Accuracy: 0.5055\nGroup Accuracies:\n- Control: 0.4386\n- Cocaine: 0.5654\n\nParameter Recovery:\n- penalty_weight: r = -0.117\n- fifty_fifty_weight: r = 0.469"
  ]
}