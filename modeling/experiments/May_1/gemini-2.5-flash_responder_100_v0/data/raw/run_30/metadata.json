{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n```json\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n```\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta_param + epsilon_param * E + eta_param * N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_param\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon_param\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta_param\": {\"description\": \"Noise parameter\", \"range\": {\"min\": 0, \"max\": 1, \"exclusive_max\": true}, \"learnable\": true, \"source\": \"learnable\"},\\\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\\\n      \"source\": \"calculated\"\\\n    }\\\n  }\\\n}\\\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions for Run 30 of 100:\nPrevious attempts at modeling responder behavior have consistently struggled with parameter recovery. Models based on linear, quadratic, power-law, simple threshold, and asymmetric linear effects from a fair percentage reference point have all failed to achieve recovery >= 0.7 for *all* learnable parameters. Despite sometimes achieving reasonable BIC or accuracy, models with unidentifiable parameters are unusable.\n\nFor this run, the **absolute highest priority remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the primary objective. Improved BIC and accuracy are secondary goals that may follow from better parameter identifiability.\n\nWhile the previous attempt utilizing the calculated fair percentage as a reference point and modeling asymmetric deviations was a step towards a different structural approach, it still did not result in all parameters being reliably recoverable (specifically, parameters related to *gains* and the *base utility* remained problematic).\n\n**Guidance for the Next Model (Refining Identifiability through Reference Point Deviations):**\n\nDesign a computational model for responder decisions (`trial_role == 1`) that predicts the utility of accepting an offer, prioritizing parameter identifiability by refining the structural approach based on deviations from the fair percentage reference point.\n\n*   **Parameter Identifiability:** Focus intensely on designing the model structure such that each learnable parameter has a distinct and separable influence on the predicted utility across the dataset's trials. Consider how parameters interact and how this interaction might lead to confounding effects on estimation.\n*   **Reference Point & Deviations:** Continue to use the calculated fair percentage for the participant (`fair_perc_self`) based on token contributions as a key reference point. Calculate `fair_perc_self` as `(token_self / (token_self + token_opp)) * 100`. **Crucially, handle the case where `token_self + token_opp == 0` by setting `fair_perc_self` to 50 in that instance.** Define deviations from this reference point as `perc_gain_from_fair = max(0, split_perc_self - fair_perc_self)` and `perc_loss_from_fair = max(0, fair_perc_self - split_perc_self)`.\n*   **Refining Model Structure for Gains and Base Utility:** The linear additive structure `U = beta_base + beta_gain * perc_gain_from_fair - beta_loss * perc_loss_from_fair` from the previous attempt did not achieve full parameter recovery. While the `beta_loss` parameter (sensitivity to negative deviations) showed better recovery, the parameters related to *gains* (`beta_gain`) and the *base utility* (`beta_base`) were difficult to estimate reliably.\n    *   Consider keeping the impact of losses as `- beta_loss * perc_loss_from_fair` or a similar linear form, as this component seemed more identifiable.\n    *   Focus your \"out-of-the-box\" thinking and structural innovation on how positive deviations (`perc_gain_from_fair`) influence utility, and how the base utility (`beta_base`) is incorporated. The simple linear scaling `beta_gain * perc_gain_from_fair` appears insufficient for parameter identifiability in this dataset. Explore *alternative functional forms* for the gain component (e.g., non-linear transformations of `perc_gain_from_fair`, interaction terms between `beta_base` and gains, or piecewise functions specifically for gains) to create a more separable influence for the parameter(s) governing sensitivity to positive deviations. The goal is to design a structure where the influence of gains and the base utility can be distinctly estimated.\n*   **Calculated Variables:** Ensure `fair_perc_self`, `perc_gain_from_fair`, and `perc_loss_from_fair` (and any other variables you define based on data inputs) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs.\n*   **Parameter Constraints:** Define clear, generous, finite numerical bounds for *all* learnable parameters.\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Use clear notation.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing the model structure, its key components (especially the use of fair percentage as a reference point and the refined approach to modeling gains/base utility), and how it relates to the decision process, focusing on the structural choices aimed at identifiability.\n\nDesign a model that you believe has the best chance of achieving parameter recovery >= 0.7 for all its learnable parameters by carefully considering the functional form of utility relative to the calculated fair percentage, particularly focusing on how the impact of gains and the base utility can be made uniquely estimable given the dataset's characteristics. Think critically about potential confounds and how your chosen structure mitigates them.\n\nPlease think through this step by step, focusing intently on designing a model structure that improves parameter identifiability by refining the reference point and asymmetric deviations approach, especially for gains and the base utility, and ensure all output requirements are met. Then provide your model specification, variable descriptions, target variable, and summary.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n```json\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n```\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta_param + epsilon_param * E + eta_param * N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_param\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon_param\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta_param\": {\"description\": \"Noise parameter\", \"range\": {\"min\": 0, \"max\": 1, \"exclusive_max\": true}, \"learnable\": true, \"source\": \"learnable\"},\\\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\\\n      \"source\": \"calculated\"\\\n    }\\\n  }\\\n}\\\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions for Run 30 of 100:\nPrevious attempts at modeling responder behavior have consistently struggled with parameter recovery. Models based on linear, quadratic, power-law, simple threshold, and asymmetric linear effects from a fair percentage reference point have all failed to achieve recovery >= 0.7 for *all* learnable parameters. Despite sometimes achieving reasonable BIC or accuracy, models with unidentifiable parameters are unusable.\n\nFor this run, the **absolute highest priority remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the primary objective. Improved BIC and accuracy are secondary goals that may follow from better parameter identifiability.\n\nWhile the previous attempt utilizing the calculated fair percentage as a reference point and modeling asymmetric deviations was a step towards a different structural approach, it still did not result in all parameters being reliably recoverable (specifically, parameters related to *gains* and the *base utility* remained problematic).\n\n**Guidance for the Next Model (Refining Identifiability through Reference Point Deviations):**\n\nDesign a computational model for responder decisions (`trial_role == 1`) that predicts the utility of accepting an offer, prioritizing parameter identifiability by refining the structural approach based on deviations from the fair percentage reference point.\n\n*   **Parameter Identifiability:** Focus intensely on designing the model structure such that each learnable parameter has a distinct and separable influence on the predicted utility across the dataset's trials. Consider how parameters interact and how this interaction might lead to confounding effects on estimation.\n*   **Reference Point & Deviations:** Continue to use the calculated fair percentage for the participant (`fair_perc_self`) based on token contributions as a key reference point. Calculate `fair_perc_self` as `(token_self / (token_self + token_opp)) * 100`. **Crucially, handle the case where `token_self + token_opp == 0` by setting `fair_perc_self` to 50 in that instance.** Define deviations from this reference point as `perc_gain_from_fair = max(0, split_perc_self - fair_perc_self)` and `perc_loss_from_fair = max(0, fair_perc_self - split_perc_self)`.\n*   **Refining Model Structure for Gains and Base Utility:** The linear additive structure `U = beta_base + beta_gain * perc_gain_from_fair - beta_loss * perc_loss_from_fair` from the previous attempt did not achieve full parameter recovery. While the `beta_loss` parameter (sensitivity to negative deviations) showed better recovery, the parameters related to *gains* (`beta_gain`) and the *base utility* (`beta_base`) were difficult to estimate reliably.\n    *   Consider keeping the impact of losses as `- beta_loss * perc_loss_from_fair` or a similar linear form, as this component seemed more identifiable.\n    *   Focus your \"out-of-the-box\" thinking and structural innovation on how positive deviations (`perc_gain_from_fair`) influence utility, and how the base utility (`beta_base`) is incorporated. The simple linear scaling `beta_gain * perc_gain_from_fair` appears insufficient for parameter identifiability in this dataset. Explore *alternative functional forms* for the gain component (e.g., non-linear transformations of `perc_gain_from_fair`, interaction terms between `beta_base` and gains, or piecewise functions specifically for gains) to create a more separable influence for the parameter(s) governing sensitivity to positive deviations. The goal is to design a structure where the influence of gains and the base utility can be distinctly estimated.\n*   **Calculated Variables:** Ensure `fair_perc_self`, `perc_gain_from_fair`, and `perc_loss_from_fair` (and any other variables you define based on data inputs) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs.\n*   **Parameter Constraints:** Define clear, generous, finite numerical bounds for *all* learnable parameters.\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Use clear notation.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing the model structure, its key components (especially the use of fair percentage as a reference point and the refined approach to modeling gains/base utility), and how it relates to the decision process, focusing on the structural choices aimed at identifiability.\n\nDesign a model that you believe has the best chance of achieving parameter recovery >= 0.7 for all its learnable parameters by carefully considering the functional form of utility relative to the calculated fair percentage, particularly focusing on how the impact of gains and the base utility can be made uniquely estimable given the dataset's characteristics. Think critically about potential confounds and how your chosen structure mitigates them.\n\nPlease think through this step by step, focusing intently on designing a model structure that improves parameter identifiability by refining the reference point and asymmetric deviations approach, especially for gains and the base utility, and ensure all output requirements are met. Then provide your model specification, variable descriptions, target variable, and summary.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "```json\n<MODEL>\nU = beta_base + (perc_gain_from_fair)**alpha_param - lambda_param * (perc_loss_from_fair)**beta_param\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Calculated utility of accepting the offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_base\": {\n      \"description\": \"Base utility experienced when the proposed percentage equals the fair percentage.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_param\": {\n      \"description\": \"Curvature parameter for gains (positive deviations from fair percentage). Higher values indicate stronger sensitivity to large gains. Value of 1 implies linearity, less than 1 diminishing sensitivity, more than 1 increasing sensitivity.\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion parameter scaling the impact of losses (negative deviations from fair percentage). Values greater than 1 indicate loss aversion.\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_param\": {\n      \"description\": \"Curvature parameter for losses (negative deviations from fair percentage). Similar to alpha_param but for losses.\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"perc_gain_from_fair\": {\n      \"description\": \"The positive difference between the proposed percentage for the participant (split_perc_self) and the calculated fair percentage for the participant (fair_perc_self). Calculated as max(0, split_perc_self - fair_perc_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"perc_loss_from_fair\": {\n      \"description\": \"The positive difference between the calculated fair percentage for the participant (fair_perc_self) and the proposed percentage for the participant (split_perc_self). Calculated as max(0, fair_perc_self - split_perc_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The calculated fair percentage for the participant based on token contributions: (token_self / (token_self + token_opp)) * 100. If (token_self + token_opp) is 0, fair_perc_self is 50.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed percentage of the total earning for the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA computational model predicting the utility of accepting an offer based on deviations from a calculated fair percentage, inspired by Prospect Theory. The utility is defined by a base utility at the fair point (beta_base), an additive term for gains (perc_gain_from_fair raised to the power alpha_param), and a subtractive term for losses (lambda_param multiplied by perc_loss_from_fair raised to the power beta_param). Beta_base represents the acceptance utility at the fair percentage. Alpha_param and beta_param capture diminishing or increasing sensitivity to the magnitude of gains and losses, respectively. Lambda_param captures loss aversion. The model is applied only when the participant is the responder. This structure aims to improve parameter identifiability compared to simpler linear models by introducing non-linearity and asymmetric scaling relative to the fair reference point.\n</SUMMARY>\n```"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_base', 'alpha_param', 'lambda_param', 'beta_param']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                U = beta_base + (perc_gain_from_fair)**alpha_param - lambda_param * (perc_loss_from_fair)**beta_param\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Calculated utility of accepting the offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_base\": {\n      \"description\": \"Base utility experienced when the proposed percentage equals the fair percentage.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_param\": {\n      \"description\": \"Curvature parameter for gains (positive deviations from fair percentage). Higher values indicate stronger sensitivity to large gains. Value of 1 implies linearity, less than 1 diminishing sensitivity, more than 1 increasing sensitivity.\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion parameter scaling the impact of losses (negative deviations from fair percentage). Values greater than 1 indicate loss aversion.\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_param\": {\n      \"description\": \"Curvature parameter for losses (negative deviations from fair percentage). Similar to alpha_param but for losses.\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"perc_gain_from_fair\": {\n      \"description\": \"The positive difference between the proposed percentage for the participant (split_perc_self) and the calculated fair percentage for the participant (fair_perc_self). Calculated as max(0, split_perc_self - fair_perc_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"perc_loss_from_fair\": {\n      \"description\": \"The positive difference between the calculated fair percentage for the participant (fair_perc_self) and the proposed percentage for the participant (split_perc_self). Calculated as max(0, fair_perc_self - split_perc_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The calculated fair percentage for the participant based on token contributions: (token_self / (token_self + token_opp)) * 100. If (token_self + token_opp) is 0, fair_perc_self is 50.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed percentage of the total earning for the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_base=1, alpha_param=1, lambda_param=1, beta_param=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        if (token_self + token_opp) == 0:\n            fair_perc_self = 50.0\n        else:\n            fair_perc_self = (token_self / (token_self + token_opp)) * 100.0\n\n        perc_gain_from_fair = max(0, split_perc_self - fair_perc_self)\n        perc_loss_from_fair = max(0, fair_perc_self - split_perc_self)\n\n        utility = beta_base + (perc_gain_from_fair)**alpha_param - lambda_param * (perc_loss_from_fair)**beta_param\n        model_predictions.append(utility)\n    return model_predictions\n```",
      "timestamp": 1746097846.1415858
    }
  ],
  "learnable_parameters": {
    "beta_base": {
      "description": "Base utility experienced when the proposed percentage equals the fair percentage.",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha_param": {
      "description": "Curvature parameter for gains (positive deviations from fair percentage). Higher values indicate stronger sensitivity to large gains. Value of 1 implies linearity, less than 1 diminishing sensitivity, more than 1 increasing sensitivity.",
      "range": {
        "min": 0.01,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Loss aversion parameter scaling the impact of losses (negative deviations from fair percentage). Values greater than 1 indicate loss aversion.",
      "range": {
        "min": 0.01,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_param": {
      "description": "Curvature parameter for losses (negative deviations from fair percentage). Similar to alpha_param but for losses.",
      "range": {
        "min": 0.01,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "U = beta_base + (perc_gain_from_fair)**alpha_param - lambda_param * (perc_loss_from_fair)**beta_param",
  "variable_descriptions": {
    "U": {
      "description": "Calculated utility of accepting the offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_base": {
      "description": "Base utility experienced when the proposed percentage equals the fair percentage.",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "alpha_param": {
      "description": "Curvature parameter for gains (positive deviations from fair percentage). Higher values indicate stronger sensitivity to large gains. Value of 1 implies linearity, less than 1 diminishing sensitivity, more than 1 increasing sensitivity.",
      "range": {
        "min": 0.01,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "lambda_param": {
      "description": "Loss aversion parameter scaling the impact of losses (negative deviations from fair percentage). Values greater than 1 indicate loss aversion.",
      "range": {
        "min": 0.01,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_param": {
      "description": "Curvature parameter for losses (negative deviations from fair percentage). Similar to alpha_param but for losses.",
      "range": {
        "min": 0.01,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "perc_gain_from_fair": {
      "description": "The positive difference between the proposed percentage for the participant (split_perc_self) and the calculated fair percentage for the participant (fair_perc_self). Calculated as max(0, split_perc_self - fair_perc_self).",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "perc_loss_from_fair": {
      "description": "The positive difference between the calculated fair percentage for the participant (fair_perc_self) and the proposed percentage for the participant (split_perc_self). Calculated as max(0, fair_perc_self - split_perc_self).",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self": {
      "description": "The calculated fair percentage for the participant based on token contributions: (token_self / (token_self + token_opp)) * 100. If (token_self + token_opp) is 0, fair_perc_self is 50.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed percentage of the total earning for the participant.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    }
  },
  "model_summary": "A computational model predicting the utility of accepting an offer based on deviations from a calculated fair percentage, inspired by Prospect Theory. The utility is defined by a base utility at the fair point (beta_base), an additive term for gains (perc_gain_from_fair raised to the power alpha_param), and a subtractive term for losses (lambda_param multiplied by perc_loss_from_fair raised to the power beta_param). Beta_base represents the acceptance utility at the fair percentage. Alpha_param and beta_param capture diminishing or increasing sensitivity to the magnitude of gains and losses, respectively. Lambda_param captures loss aversion. The model is applied only when the participant is the responder. This structure aims to improve parameter identifiability compared to simpler linear models by introducing non-linearity and asymmetric scaling relative to the fair reference point.",
  "target_variable": "accept",
  "full_reasoning": "```json\n<MODEL>\nU = beta_base + (perc_gain_from_fair)**alpha_param - lambda_param * (perc_loss_from_fair)**beta_param\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U\": {\n      \"description\": \"Calculated utility of accepting the offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_base\": {\n      \"description\": \"Base utility experienced when the proposed percentage equals the fair percentage.\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"alpha_param\": {\n      \"description\": \"Curvature parameter for gains (positive deviations from fair percentage). Higher values indicate stronger sensitivity to large gains. Value of 1 implies linearity, less than 1 diminishing sensitivity, more than 1 increasing sensitivity.\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"lambda_param\": {\n      \"description\": \"Loss aversion parameter scaling the impact of losses (negative deviations from fair percentage). Values greater than 1 indicate loss aversion.\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_param\": {\n      \"description\": \"Curvature parameter for losses (negative deviations from fair percentage). Similar to alpha_param but for losses.\",\n      \"range\": {\n        \"min\": 0.01,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"perc_gain_from_fair\": {\n      \"description\": \"The positive difference between the proposed percentage for the participant (split_perc_self) and the calculated fair percentage for the participant (fair_perc_self). Calculated as max(0, split_perc_self - fair_perc_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"perc_loss_from_fair\": {\n      \"description\": \"The positive difference between the calculated fair percentage for the participant (fair_perc_self) and the proposed percentage for the participant (split_perc_self). Calculated as max(0, fair_perc_self - split_perc_self).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The calculated fair percentage for the participant based on token contributions: (token_self / (token_self + token_opp)) * 100. If (token_self + token_opp) is 0, fair_perc_self is 50.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed percentage of the total earning for the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA computational model predicting the utility of accepting an offer based on deviations from a calculated fair percentage, inspired by Prospect Theory. The utility is defined by a base utility at the fair point (beta_base), an additive term for gains (perc_gain_from_fair raised to the power alpha_param), and a subtractive term for losses (lambda_param multiplied by perc_loss_from_fair raised to the power beta_param). Beta_base represents the acceptance utility at the fair percentage. Alpha_param and beta_param capture diminishing or increasing sensitivity to the magnitude of gains and losses, respectively. Lambda_param captures loss aversion. The model is applied only when the participant is the responder. This structure aims to improve parameter identifiability compared to simpler linear models by introducing non-linearity and asymmetric scaling relative to the fair reference point.\n</SUMMARY>\n```",
  "prediction_type": "utility",
  "current_model": "Specification: U = beta_base + (perc_gain_from_fair)**alpha_param - lambda_param * (perc_loss_from_fair)**beta_param\nSummary: A computational model predicting the utility of accepting an offer based on deviations from a calculated fair percentage, inspired by Prospect Theory. The utility is defined by a base utility at the fair point (beta_base), an additive term for gains (perc_gain_from_fair raised to the power alpha_param), and a subtractive term for losses (lambda_param multiplied by perc_loss_from_fair raised to the power beta_param). Beta_base represents the acceptance utility at the fair percentage. Alpha_param and beta_param capture diminishing or increasing sensitivity to the magnitude of gains and losses, respectively. Lambda_param captures loss aversion. The model is applied only when the participant is the responder. This structure aims to improve parameter identifiability compared to simpler linear models by introducing non-linearity and asymmetric scaling relative to the fair reference point.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_base=1, alpha_param=1, lambda_param=1, beta_param=1):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        if (token_self + token_opp) == 0:\n            fair_perc_self = 50.0\n        else:\n            fair_perc_self = (token_self / (token_self + token_opp)) * 100.0\n\n        perc_gain_from_fair = max(0, split_perc_self - fair_perc_self)\n        perc_loss_from_fair = max(0, fair_perc_self - split_perc_self)\n\n        utility = beta_base + (perc_gain_from_fair)**alpha_param - lambda_param * (perc_loss_from_fair)**beta_param\n        model_predictions.append(utility)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7750305250305249,
  "group_accuracies": {
    "Control": 0.8210594315245477,
    "Cocaine": 0.7337962962962963
  },
  "group_parameter_averages": {
    "Control": {
      "beta_base": 23.691894293451043,
      "alpha_param": 1.4920758898947937,
      "lambda_param": 4.405901313255056,
      "beta_param": 0.5798248278454367
    },
    "Cocaine": {
      "beta_base": 22.954527299299105,
      "alpha_param": 1.1794975190915202,
      "lambda_param": 5.008428578611891,
      "beta_param": 0.765867970238866
    }
  },
  "fitting_results": [
    {
      "beta_base": 75.35983991445214,
      "alpha_param": 0.42086755288122657,
      "lambda_param": 10.0,
      "beta_param": 2.0,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 15.415252347914004,
      "alpha_param": 2.0,
      "lambda_param": 10.0,
      "beta_param": 0.1505348028383343,
      "success": true,
      "log_likelihood": -15.717551890675434,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 24.870163677410705,
      "alpha_param": 2.0,
      "lambda_param": 10.0,
      "beta_param": 0.2997001031477607,
      "success": true,
      "log_likelihood": -7.671863594144737,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 1.3098076142410202,
      "alpha_param": 2.0,
      "lambda_param": 0.010029583659985982,
      "beta_param": 1.7039628949199705,
      "success": true,
      "log_likelihood": -15.758762448635364,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 7.448053452065436,
      "alpha_param": 2.0,
      "lambda_param": 0.14304981218824697,
      "beta_param": 1.3702539169674604,
      "success": true,
      "log_likelihood": -5.001172527838813,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -97.94993705032125,
      "alpha_param": 2.0,
      "lambda_param": 6.023053599506869,
      "beta_param": 1.9789230666735755,
      "success": true,
      "log_likelihood": -506.5687204572903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 100.0,
      "alpha_param": 1.7261642287505703,
      "lambda_param": 0.01,
      "beta_param": 0.01,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 68.91618429071312,
      "alpha_param": 1.0831199303074106,
      "lambda_param": 0.01,
      "beta_param": 0.01,
      "success": true,
      "log_likelihood": -276.31021115688566,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 41.25946544303549,
      "alpha_param": 1.0266735625765477,
      "lambda_param": 0.01,
      "beta_param": 0.01,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 93.99641771701019,
      "alpha_param": 0.09704938227728113,
      "lambda_param": 8.957324856748652,
      "beta_param": 0.868986963351372,
      "success": true,
      "log_likelihood": -80.06813234625439,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 4.824359565594137,
      "alpha_param": 0.7195546939704944,
      "lambda_param": 0.015343833648261746,
      "beta_param": 1.9839488333547048,
      "success": true,
      "log_likelihood": -5.75350838239505,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -0.5119202741694875,
      "alpha_param": 0.01,
      "lambda_param": 6.416645174464509,
      "beta_param": 1.967474992606706,
      "success": true,
      "log_likelihood": -48.949230608833226,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 17.880717564555724,
      "alpha_param": 1.8842934268123808,
      "lambda_param": 9.999634191114623,
      "beta_param": 0.21325444303955043,
      "success": true,
      "log_likelihood": -10.261755127180042,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 48.59259461089033,
      "alpha_param": 1.3932649052597303,
      "lambda_param": 0.40379279634049936,
      "beta_param": 0.8495385097066291,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 100.0,
      "alpha_param": 2.0,
      "lambda_param": 7.265534531592177,
      "beta_param": 0.46734243492757077,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 50.54085947303205,
      "alpha_param": 1.7598043212766654,
      "lambda_param": 0.01,
      "beta_param": 0.01,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 69.35326677383341,
      "alpha_param": 0.6544349663531248,
      "lambda_param": 0.7994804969494401,
      "beta_param": 0.9107453199313071,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 17.325799160658892,
      "alpha_param": 2.0,
      "lambda_param": 4.882839455116344,
      "beta_param": 0.342350768852273,
      "success": true,
      "log_likelihood": -8.40643764292469,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 32.145774943720234,
      "alpha_param": 0.13250242230111497,
      "lambda_param": 0.01,
      "beta_param": 0.01,
      "success": true,
      "log_likelihood": -92.10295965200243,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 22.21697965157795,
      "alpha_param": 1.3817103945554017,
      "lambda_param": 7.932958228613368,
      "beta_param": 0.01,
      "success": true,
      "log_likelihood": -2.5410546387025338e-05,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 18.601262241663786,
      "alpha_param": 2.0,
      "lambda_param": 10.0,
      "beta_param": 0.20238322973740702,
      "success": true,
      "log_likelihood": -12.953437687745366,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 84.57587009479094,
      "alpha_param": 2.0,
      "lambda_param": 10.0,
      "beta_param": 0.5815709088707623,
      "success": true,
      "log_likelihood": -34.65630508871743,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 6.483568203382331,
      "alpha_param": 2.0,
      "lambda_param": 6.639901740309999,
      "beta_param": 0.03822454091330222,
      "success": true,
      "log_likelihood": -18.895925147136175,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 2.657083005421009,
      "alpha_param": 2.0,
      "lambda_param": 0.35224947093631354,
      "beta_param": 0.6706898795465371,
      "success": true,
      "log_likelihood": -18.75821078278201,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -27.29047012590742,
      "alpha_param": 2.0,
      "lambda_param": 2.4400203550949993,
      "beta_param": 0.01,
      "success": true,
      "log_likelihood": -368.3695177699354,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 18.724173282919715,
      "alpha_param": 1.6100725677135534,
      "lambda_param": 10.0,
      "beta_param": 0.20050097449786172,
      "success": true,
      "log_likelihood": -13.226162416838138,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -95.6282718059185,
      "alpha_param": 1.959691858618636,
      "lambda_param": 9.406383980985963,
      "beta_param": 1.0023999530318797,
      "success": true,
      "log_likelihood": -437.49116766716895,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 16.60735326900962,
      "alpha_param": 0.9700990680749603,
      "lambda_param": 10.0,
      "beta_param": 0.22924900691777475,
      "success": true,
      "log_likelihood": -5.941616147060902,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 62.3493166054347,
      "alpha_param": 0.9224286228132534,
      "lambda_param": 0.01,
      "beta_param": 0.01,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 41.13630314132645,
      "alpha_param": 1.9798362367949076,
      "lambda_param": 0.01,
      "beta_param": 0.01,
      "success": true,
      "log_likelihood": -184.20680743672378,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 29.235744825781303,
      "alpha_param": 1.567098240446824,
      "lambda_param": 0.01,
      "beta_param": 0.01,
      "success": true,
      "log_likelihood": 3.593104036346265e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -43.81004964382475,
      "alpha_param": 0.7469242197117918,
      "lambda_param": 5.315931591076103,
      "beta_param": 0.6843217828836805,
      "success": true,
      "log_likelihood": -69.07754943558707,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 0.6384663381808809,
      "alpha_param": 1.670703698833967,
      "lambda_param": 0.16784699700792466,
      "beta_param": 0.6435063219070372,
      "success": true,
      "log_likelihood": -21.71849085538217,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 5.53206514915286,
      "alpha_param": 2.0,
      "lambda_param": 2.824740260182486,
      "beta_param": 0.2782233385853185,
      "success": true,
      "log_likelihood": -15.881360744728472,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 50.5142323163217,
      "alpha_param": 1.936528578496309,
      "lambda_param": 7.454333488036495,
      "beta_param": 0.01,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 5.152537396695045,
      "alpha_param": 2.0,
      "lambda_param": 1.6167166652951643,
      "beta_param": 0.3495525578655132,
      "success": true,
      "log_likelihood": -18.55152945491766,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 3.812093429824684,
      "alpha_param": 2.0,
      "lambda_param": 0.01,
      "beta_param": 1.7429249511869664,
      "success": true,
      "log_likelihood": -11.203112687788007,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 17.286112698697966,
      "alpha_param": 1.760413614339042,
      "lambda_param": 10.0,
      "beta_param": 0.18733902725762683,
      "success": true,
      "log_likelihood": -13.304805409901675,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 47.34378310091079,
      "alpha_param": 0.3903904544479793,
      "lambda_param": 0.01,
      "beta_param": 0.01,
      "success": true,
      "log_likelihood": -276.3102111568857,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 17.989007164457,
      "alpha_param": 0.7916766581473974,
      "lambda_param": 10.0,
      "beta_param": 0.13856965162748375,
      "success": true,
      "log_likelihood": -8.591464179520289,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 68.39326782514864,
      "alpha_param": 1.991363576634535,
      "lambda_param": 0.8166393163588053,
      "beta_param": 1.4790781522148606,
      "success": true,
      "log_likelihood": -186.52355314432378,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": -35.46482866452742,
      "alpha_param": 2.0,
      "lambda_param": 8.190566736132757,
      "beta_param": 1.2495261010167356,
      "success": true,
      "log_likelihood": -138.15522359767087,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 30.91915589323935,
      "alpha_param": 1.5725960830810264,
      "lambda_param": 1.278739308607417,
      "beta_param": 0.027390168975814977,
      "success": true,
      "log_likelihood": -23.024355464568703,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_base": 49.04783109185952,
      "alpha_param": 1.0147349572141675,
      "lambda_param": 3.551887103232419,
      "beta_param": 1.5076953652854164,
      "success": true,
      "log_likelihood": -276.3105003083712,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 24.14739488949728,
      "alpha_param": 1.4165400518120241,
      "lambda_param": 0.01,
      "beta_param": 0.01,
      "success": true,
      "log_likelihood": -318.3782139599403,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 11.13835568414154,
      "alpha_param": 1.2788723471804562,
      "lambda_param": 7.685196893032407,
      "beta_param": 0.09739955597663448,
      "success": true,
      "log_likelihood": -18.560390269068026,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 14.080129488889414,
      "alpha_param": 2.0,
      "lambda_param": 10.0,
      "beta_param": 0.11753841517854459,
      "success": true,
      "log_likelihood": -18.235415652062457,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 7.616776543839562,
      "alpha_param": 2.0,
      "lambda_param": 6.005154594353528,
      "beta_param": 0.11634535637497995,
      "success": true,
      "log_likelihood": -18.257555056912867,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 16.17929827379743,
      "alpha_param": 2.0,
      "lambda_param": 8.519417440879279,
      "beta_param": 0.23519742618210512,
      "success": true,
      "log_likelihood": -10.394811126663926,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 0.6525271609358079,
      "alpha_param": 0.01,
      "lambda_param": 7.594165110717897,
      "beta_param": 1.9030393657397562,
      "success": true,
      "log_likelihood": -371.2666211615201,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 7.78002515153123,
      "alpha_param": 0.031130869735545897,
      "lambda_param": 4.687414590872164,
      "beta_param": 0.13764856018280733,
      "success": true,
      "log_likelihood": -19.25758096146043,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -0.8462509406771703,
      "alpha_param": 0.11904678414280992,
      "lambda_param": 0.07438108227721295,
      "beta_param": 0.9709075943345314,
      "success": true,
      "log_likelihood": -12.61210932128684,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 1.1248747467933737,
      "alpha_param": 2.0,
      "lambda_param": 0.0128229685213019,
      "beta_param": 1.422177429240692,
      "success": true,
      "log_likelihood": -20.747413332442616,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 0.840338048653951,
      "alpha_param": 0.01,
      "lambda_param": 0.01,
      "beta_param": 1.2831833790904892,
      "success": true,
      "log_likelihood": -24.21822254667417,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 84.13131887978456,
      "alpha_param": 1.2754301237367713,
      "lambda_param": 0.6503082055175552,
      "beta_param": 1.792586598795524,
      "success": true,
      "log_likelihood": -140.06464820337564,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 8.82122351583146,
      "alpha_param": 0.8777560562009888,
      "lambda_param": 2.2601786206141163,
      "beta_param": 0.5408901390307715,
      "success": true,
      "log_likelihood": -6.438223780234301,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 38.96452244375776,
      "alpha_param": 0.36856994014019767,
      "lambda_param": 10.0,
      "beta_param": 2.0,
      "success": true,
      "log_likelihood": -138.1551055766428,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 34.15807298715591,
      "alpha_param": 1.7948003659967593,
      "lambda_param": 0.01,
      "beta_param": 0.01,
      "success": true,
      "log_likelihood": -92.10334154455559,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -1.0182736684158555,
      "alpha_param": 0.20381735255721292,
      "lambda_param": 0.05741593682734418,
      "beta_param": 1.1602219490567764,
      "success": true,
      "log_likelihood": -9.680774143223122,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 47.325999040766874,
      "alpha_param": 1.1183701407238167,
      "lambda_param": 5.0117656608096555,
      "beta_param": 0.3008492498399424,
      "success": true,
      "log_likelihood": -161.18052577433244,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 4.870318678911608,
      "alpha_param": 2.0,
      "lambda_param": 2.360187639425781,
      "beta_param": 0.22145459544093593,
      "success": true,
      "log_likelihood": -20.441009679877663,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 16.15201709826018,
      "alpha_param": 2.0,
      "lambda_param": 10.0,
      "beta_param": 0.16556611703738922,
      "success": true,
      "log_likelihood": -14.704927553827167,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -49.22162476849572,
      "alpha_param": 1.6755559626686223,
      "lambda_param": 9.416135629807341,
      "beta_param": 0.6720588530249766,
      "success": true,
      "log_likelihood": -46.05170185648802,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 71.50904559185433,
      "alpha_param": 1.3329566145598524,
      "lambda_param": 10.0,
      "beta_param": 2.0,
      "success": true,
      "log_likelihood": -322.3619130169666,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 5.442831239319057,
      "alpha_param": 1.8497370166196978,
      "lambda_param": 4.920342178565328,
      "beta_param": 0.14721664430615622,
      "success": true,
      "log_likelihood": -10.987048975752296,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 14.231807596550107,
      "alpha_param": 2.0,
      "lambda_param": 8.904309217030988,
      "beta_param": 0.1547773798713448,
      "success": true,
      "log_likelihood": -16.593844377301384,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 67.87907340097965,
      "alpha_param": 0.7998344622661951,
      "lambda_param": 2.080214577023556,
      "beta_param": 0.5088168754355131,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 6.958444096284681,
      "alpha_param": 1.402599380297696,
      "lambda_param": 0.6121852758648811,
      "beta_param": 0.6436902456439273,
      "success": true,
      "log_likelihood": -10.384161563493413,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 1.4423939041863483,
      "alpha_param": 1.379544896315928,
      "lambda_param": 0.010097297084812835,
      "beta_param": 1.53984250863927,
      "success": true,
      "log_likelihood": -19.497224030693516,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -55.991164661677864,
      "alpha_param": 1.513241414316713,
      "lambda_param": 1.421822308016728,
      "beta_param": 1.586109665282509,
      "success": true,
      "log_likelihood": -736.8272299758901,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.1111111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 79.00800211368228,
      "alpha_param": 1.9202555592452928,
      "lambda_param": 10.0,
      "beta_param": 2.0,
      "success": true,
      "log_likelihood": 3.5999772050464285e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -64.80269545602728,
      "alpha_param": 0.8980377244865098,
      "lambda_param": 1.7825532680588811,
      "beta_param": 0.09229959379431538,
      "success": true,
      "log_likelihood": -115.12925464660206,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 13.940406914741967,
      "alpha_param": 0.22952519303865984,
      "lambda_param": 9.999997256306045,
      "beta_param": 0.11431903266859404,
      "success": true,
      "log_likelihood": -18.59879937872093,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 7.0094052002623,
      "alpha_param": 2.0,
      "lambda_param": 3.515172158018467,
      "beta_param": 0.16821572421616554,
      "success": true,
      "log_likelihood": -17.081670121201487,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 30.712493104656573,
      "alpha_param": 0.12209126506694226,
      "lambda_param": 1.7632095244522386,
      "beta_param": 0.24569444106601904,
      "success": true,
      "log_likelihood": -414.0696928561423,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 4.108199185794661,
      "alpha_param": 2.0,
      "lambda_param": 0.49237286902539534,
      "beta_param": 0.6130327807980427,
      "success": true,
      "log_likelihood": -17.057790881791824,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 13.750331247904178,
      "alpha_param": 0.47905254264524,
      "lambda_param": 2.305000703826345,
      "beta_param": 0.4524519939324879,
      "success": true,
      "log_likelihood": -5.186169315576762,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 29.319780324473058,
      "alpha_param": 0.7912404427797098,
      "lambda_param": 10.0,
      "beta_param": 2.0,
      "success": true,
      "log_likelihood": -92.10153802599936,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 77.75111448890675,
      "alpha_param": 1.10672409687881,
      "lambda_param": 7.9647944262040316,
      "beta_param": 0.6305824798917107,
      "success": true,
      "log_likelihood": -239.40845148653747,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -0.5119192804789111,
      "alpha_param": 0.01,
      "lambda_param": 7.9104769739008045,
      "beta_param": 1.0213093842420113,
      "success": true,
      "log_likelihood": -25.923379678795257,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 8.561997648845049,
      "alpha_param": 1.4964218739935602,
      "lambda_param": 8.433838810972917,
      "beta_param": 0.01,
      "success": true,
      "log_likelihood": -22.104099429350036,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 72.84070335001894,
      "alpha_param": 0.9843886895380647,
      "lambda_param": 0.01,
      "beta_param": 0.01,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": -56.223936663267125,
      "alpha_param": 0.696747699689506,
      "lambda_param": 4.054631202502693,
      "beta_param": 1.8083283773001835,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 100.0,
      "alpha_param": 2.0,
      "lambda_param": 3.14157601447906,
      "beta_param": 1.0756304843634272,
      "success": true,
      "log_likelihood": -121.34415625505054,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 90.41996028223451,
      "alpha_param": 0.6107987095376606,
      "lambda_param": 9.441228262008561,
      "beta_param": 1.4038310654656947,
      "success": true,
      "log_likelihood": -346.77405830792765,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 44.580632983511805,
      "alpha_param": 1.7622104458325314,
      "lambda_param": 10.0,
      "beta_param": 2.0,
      "success": true,
      "log_likelihood": -46.05170185648092,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 14.869286726572415,
      "alpha_param": 0.025847937175029784,
      "lambda_param": 10.0,
      "beta_param": 0.11385945209113271,
      "success": true,
      "log_likelihood": -17.717422608757452,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 1.4273807271513261,
      "alpha_param": 2.0,
      "lambda_param": 0.19590023221627106,
      "beta_param": 0.9888986221682171,
      "success": true,
      "log_likelihood": -33.34122524501309,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 100.0,
      "alpha_param": 0.01,
      "lambda_param": 7.388944153040159,
      "beta_param": 0.01,
      "success": true,
      "log_likelihood": -46.05170185648088,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 99.99062102012199,
      "alpha_param": 2.0,
      "lambda_param": 10.0,
      "beta_param": 0.7138322483066258,
      "success": true,
      "log_likelihood": -152.02595909479683,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_base": 7.6482409329375765,
      "alpha_param": 2.0,
      "lambda_param": 6.139473587884597,
      "beta_param": 0.04416362216994855,
      "success": true,
      "log_likelihood": -20.42818884228006,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_base": {
        "r": 0.7681292545216171,
        "p": 1.1016792388280628e-20
      },
      "alpha_param": {
        "r": 0.18295756664240545,
        "p": 0.0684572821260572
      },
      "lambda_param": {
        "r": 0.1544800945484808,
        "p": 0.12488047369498265
      },
      "beta_param": {
        "r": 0.48530383936393556,
        "p": 3.0976276108796665e-07
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 188.94850162015072,
  "bic_Control": 159.01277780011648,
  "bic_Cocaine": 215.76592087559803,
  "bic_results": {
    "average_bic": 188.94850162015072,
    "individual_bics": [
      152.48918132686714,
      45.76917953517531,
      29.677802942113914,
      45.85160065109517,
      24.336420809502066,
      1027.471516668405,
      14.334075746624439,
      566.9544980675958,
      14.334075746624439,
      174.4703404463332,
      25.841092518614538,
      112.23253697149089,
      34.857586008184526,
      14.334075746624439,
      14.334075746624439,
      14.334075746624439,
      14.334075746624439,
      31.14695103967382,
      198.5399950578293,
      14.334126574917214,
      40.24095112931517,
      83.6466859312593,
      52.12592604809679,
      51.85049731938847,
      751.0731112936952,
      40.786400587500715,
      889.3164110881623,
      26.217308047946243,
      198.540883186948,
      382.747690627272,
      14.334075746638232,
      152.48917462499858,
      57.77105746458878,
      46.09679724328139,
      14.334075746624439,
      51.43713466365976,
      36.74030112940045,
      40.94368657362779,
      566.9544980675959,
      31.517004112865017,
      387.381182042472,
      290.6445229491662,
      60.38278668296185,
      566.9550763705669,
      651.090503673705,
      51.454856291960496,
      50.80490705794935,
      50.84918586765018,
      35.12369800715229,
      756.8673180768646,
      52.849237676745304,
      39.55829439639812,
      55.828902418709674,
      62.770520847172776,
      294.4633721605757,
      27.21052331429304,
      290.64428690711003,
      198.54075884293562,
      33.69562404027069,
      336.6951273024893,
      55.21609511357977,
      43.74393086147877,
      106.43747946680048,
      659.0579017877576,
      36.30817370532903,
      47.52176450842721,
      152.48918132686705,
      35.102398880811265,
      53.32852381521147,
      1487.9885357056046,
      14.334075746624485,
      244.59258504702856,
      51.5316745112663,
      48.49741599622742,
      842.473461466109,
      48.449657517408085,
      24.70641438497796,
      198.53715180582316,
      493.1509787268994,
      66.18083511141495,
      58.54227461252451,
      152.48918132686705,
      198.540883186948,
      257.0223882639255,
      707.8821923696797,
      106.43747946678627,
      49.76892097133934,
      81.01652624385062,
      106.4374794667862,
      318.3859939434181,
      55.190453438384566
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        152.48918132686714,
        45.76917953517531,
        29.677802942113914,
        45.85160065109517,
        24.336420809502066,
        1027.471516668405,
        14.334075746624439,
        566.9544980675958,
        14.334075746624439,
        174.4703404463332,
        25.841092518614538,
        112.23253697149089,
        34.857586008184526,
        14.334075746624439,
        14.334075746624439,
        14.334075746624439,
        14.334075746624439,
        31.14695103967382,
        198.5399950578293,
        14.334126574917214,
        40.24095112931517,
        83.6466859312593,
        52.12592604809679,
        51.85049731938847,
        751.0731112936952,
        40.786400587500715,
        889.3164110881623,
        26.217308047946243,
        198.540883186948,
        382.747690627272,
        14.334075746638232,
        152.48917462499858,
        57.77105746458878,
        46.09679724328139,
        14.334075746624439,
        51.43713466365976,
        36.74030112940045,
        40.94368657362779,
        566.9544980675959,
        31.517004112865017,
        387.381182042472,
        290.6445229491662,
        60.38278668296185
      ],
      "Cocaine": [
        566.9550763705669,
        651.090503673705,
        51.454856291960496,
        50.80490705794935,
        50.84918586765018,
        35.12369800715229,
        756.8673180768646,
        52.849237676745304,
        39.55829439639812,
        55.828902418709674,
        62.770520847172776,
        294.4633721605757,
        27.21052331429304,
        290.64428690711003,
        198.54075884293562,
        33.69562404027069,
        336.6951273024893,
        55.21609511357977,
        43.74393086147877,
        106.43747946680048,
        659.0579017877576,
        36.30817370532903,
        47.52176450842721,
        152.48918132686705,
        35.102398880811265,
        53.32852381521147,
        1487.9885357056046,
        14.334075746624485,
        244.59258504702856,
        51.5316745112663,
        48.49741599622742,
        842.473461466109,
        48.449657517408085,
        24.70641438497796,
        198.53715180582316,
        493.1509787268994,
        66.18083511141495,
        58.54227461252451,
        152.48918132686705,
        198.540883186948,
        257.0223882639255,
        707.8821923696797,
        106.43747946678627,
        49.76892097133934,
        81.01652624385062,
        106.4374794667862,
        318.3859939434181,
        55.190453438384566
      ]
    },
    "num_parameters": 4,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_base: r = 0.768\n- alpha_param: r = 0.183\n- lambda_param: r = 0.154\n- beta_param: r = 0.485",
  "previous_models": [
    "Specification: U = beta_base + (perc_gain_from_fair)**alpha_param - lambda_param * (perc_loss_from_fair)**beta_param\nSummary: A computational model predicting the utility of accepting an offer based on deviations from a calculated fair percentage, inspired by Prospect Theory. The utility is defined by a base utility at the fair point (beta_base), an additive term for gains (perc_gain_from_fair raised to the power alpha_param), and a subtractive term for losses (lambda_param multiplied by perc_loss_from_fair raised to the power beta_param). Beta_base represents the acceptance utility at the fair percentage. Alpha_param and beta_param capture diminishing or increasing sensitivity to the magnitude of gains and losses, respectively. Lambda_param captures loss aversion. The model is applied only when the participant is the responder. This structure aims to improve parameter identifiability compared to simpler linear models by introducing non-linearity and asymmetric scaling relative to the fair reference point.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 188.94850162015072\nOverall Accuracy: 0.7750\nGroup Accuracies:\n- Control: 0.8211\n- Cocaine: 0.7338\n\nParameter Recovery:\n- beta_base: r = 0.768\n- alpha_param: r = 0.183\n- lambda_param: r = 0.154\n- beta_param: r = 0.485"
  ]
}