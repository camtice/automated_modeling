{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n```json\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n```\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\\nLet me think through this step by step...\\n[your reasoning here]\\n\\n<MODEL>\\nU_i = beta_param + epsilon_param * E + eta_param * N\\n</MODEL>\\n\\n<VARIABLES>\\n{\\n  \"variables\": {\\n    \"U_i\": {\\n      \"description\": \"Utility of choosing action i\",\\n      \"range\": {\\n        \"min\": \"-inf\",\\n        \"max\": \"inf\"\\n      },\\n      \"learnable\": false,\\n      \"source\": \"calculated\"\\n    },\\n    \"beta_param\": {\\n      \"description\": \"Base tendency parameter (inherent preference)\",\\n      \"range\": {\\n        \"min\": 0,\\n        \"max\": 1\\n      },\\n      \"learnable\": true,\\n      \"source\": \"learnable\"\\n    },\\n    \"epsilon_param\": {\\n      \"description\": \"Environmental sensitivity parameter\",\\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\\n      \"learnable\": true,\\n      \"source\": \"learnable\"\\n    },\\n    \"E\": {\\n      \"description\": \"Environmental cue value\",\\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\\n      \"learnable\": false,\\n      \"source\": \"data\"\\n    },\\n    \"eta_param\": {\"description\": \"Noise parameter\", \"range\": {\"min\": 0, \"max\": 1, \"exclusive_max\": true}, \"learnable\": true, \"source\": \"learnable\"},\\n    \"N\": {\\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\\n      \"distribution\": {\\n        \"type\": \"normal\",\\n        \"mean\": 0,\\n        \"std\": 1\\n      },\\n      \"learnable\": false,\\n      \"source\": \"calculated\"\\n    }\\n  }\\n}\\n</VARIABLES>\\n<SUMMARY>\\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\\n</SUMMARY>\\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions for Run 31 of 100:\nPrevious attempts at modeling responder behavior have consistently struggled with parameter recovery. While some parameters have shown good recovery (like `beta_base` in the last run), *all* learnable parameters must achieve a recovery correlation of >= 0.7 for the model to be considered usable. Complex non-linear forms (like power laws or explicit loss aversion parameters) used in the previous attempt did not lead to full parameter identifiability for the deviation-sensitive parameters.\n\nFor this run, the **absolute highest priority remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the primary objective. Improved BIC and accuracy are secondary goals that may follow from better parameter identifiability.\n\n**Guidance for the Next Model (Piecewise Utility based on Fair Share):**\n\nDesign a computational model for responder decisions (`trial_role == 1`) that predicts the utility of accepting an offer, prioritizing parameter identifiability by employing a piecewise structure based on the calculated fair percentage.\n\n*   **Parameter Identifiability:** Focus intensely on designing the model structure such that each learnable parameter has a distinct and separable influence on the predicted utility. The failure of complex non-linear terms in the last run suggests simpler, structurally separated influences might be more identifiable.\n*   **Reference Point & Deviations:** Continue to use the calculated fair percentage for the participant (`fair_perc_self`) based on token contributions as a key reference point. Calculate `fair_perc_self` as `(token_self / (token_self + token_opp)) * 100`. **Crucially, handle the case where `token_self + token_opp == 0` by setting `fair_perc_self` to 50 in that instance.** Define the positive deviation from this reference point as `perc_gain_from_fair = max(0, split_perc_self - fair_perc_self)`.\n*   **Piecewise Structure:** Instead of a single function for all offers, define the utility (`U`) based on whether the proposed percentage (`split_perc_self`) is below or at/above the calculated fair percentage (`fair_perc_self`). This creates a structural breakpoint at the fairness reference point.\n    *   **For offers below the fair percentage (`split_perc_self < fair_perc_self`):** Define the utility in this region with a simple structure. Consider a fixed utility value (`beta_utility_below`) for all offers in this unfair region. This parameter should capture the base tendency to reject unfair offers.\n    *   **For offers at or above the fair percentage (`split_perc_self >= fair_perc_self`):** Define the utility in this region with a different structure. Consider a linear function of the gain relative to the fair percentage, starting from a base utility level at the fair point (`beta_utility_fair`) and increasing with the gain (`beta_gain_slope * perc_gain_from_fair`).\n*   **Calculated Variables:** Ensure `fair_perc_self` and `perc_gain_from_fair` (and any other variables you define based on data inputs) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs.\n*   **Parameter Constraints:** Define clear, generous, finite numerical bounds for *all* learnable parameters. Ensure parameter names are suitable for Python code (e.g., `beta_utility_below`, `beta_utility_fair`, `beta_gain_slope`).\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags, clearly showing the piecewise structure based on the condition `split_perc_self >= fair_perc_self`. Use clear notation.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing the model structure, its key components (the use of fair percentage as a piecewise breakpoint, the distinct utility functions/parameters for offers below vs. at/above fair), and how it relates to the decision process, focusing on the structural choices aimed at identifiability.\n\nDesign a model with a piecewise structure using `fair_perc_self` as the breakpoint, separating utility below this point from utility at/above this point. Use distinct, simple functional forms (e.g., constant below, linear above fair) in each region, aiming for full parameter recovery by ensuring each learnable parameter's influence is clearly separable. Think critically about potential confounds and how your chosen structure mitigates them.\n\nPlease think through this step by step, focusing intently on designing a piecewise model structure that improves parameter identifiability based on the calculated fair percentage, and ensure all output requirements are met. Then provide your model specification, variable descriptions, target variable, and summary.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n```json\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n```\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\\nLet me think through this step by step...\\n[your reasoning here]\\n\\n<MODEL>\\nU_i = beta_param + epsilon_param * E + eta_param * N\\n</MODEL>\\n\\n<VARIABLES>\\n{\\n  \"variables\": {\\n    \"U_i\": {\\n      \"description\": \"Utility of choosing action i\",\\n      \"range\": {\\n        \"min\": \"-inf\",\\n        \"max\": \"inf\"\\n      },\\n      \"learnable\": false,\\n      \"source\": \"calculated\"\\n    },\\n    \"beta_param\": {\\n      \"description\": \"Base tendency parameter (inherent preference)\",\\n      \"range\": {\\n        \"min\": 0,\\n        \"max\": 1\\n      },\\n      \"learnable\": true,\\n      \"source\": \"learnable\"\\n    },\\n    \"epsilon_param\": {\\n      \"description\": \"Environmental sensitivity parameter\",\\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\\n      \"learnable\": true,\\n      \"source\": \"learnable\"\\n    },\\n    \"E\": {\\n      \"description\": \"Environmental cue value\",\\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\\n      \"learnable\": false,\\n      \"source\": \"data\"\\n    },\\n    \"eta_param\": {\"description\": \"Noise parameter\", \"range\": {\"min\": 0, \"max\": 1, \"exclusive_max\": true}, \"learnable\": true, \"source\": \"learnable\"},\\n    \"N\": {\\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\\n      \"distribution\": {\\n        \"type\": \"normal\",\\n        \"mean\": 0,\\n        \"std\": 1\\n      },\\n      \"learnable\": false,\\n      \"source\": \"calculated\"\\n    }\\n  }\\n}\\n</VARIABLES>\\n<SUMMARY>\\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\\n</SUMMARY>\\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions for Run 31 of 100:\nPrevious attempts at modeling responder behavior have consistently struggled with parameter recovery. While some parameters have shown good recovery (like `beta_base` in the last run), *all* learnable parameters must achieve a recovery correlation of >= 0.7 for the model to be considered usable. Complex non-linear forms (like power laws or explicit loss aversion parameters) used in the previous attempt did not lead to full parameter identifiability for the deviation-sensitive parameters.\n\nFor this run, the **absolute highest priority remains achieving parameter recovery >= 0.7 for *all* learnable parameters**. This is the primary objective. Improved BIC and accuracy are secondary goals that may follow from better parameter identifiability.\n\n**Guidance for the Next Model (Piecewise Utility based on Fair Share):**\n\nDesign a computational model for responder decisions (`trial_role == 1`) that predicts the utility of accepting an offer, prioritizing parameter identifiability by employing a piecewise structure based on the calculated fair percentage.\n\n*   **Parameter Identifiability:** Focus intensely on designing the model structure such that each learnable parameter has a distinct and separable influence on the predicted utility. The failure of complex non-linear terms in the last run suggests simpler, structurally separated influences might be more identifiable.\n*   **Reference Point & Deviations:** Continue to use the calculated fair percentage for the participant (`fair_perc_self`) based on token contributions as a key reference point. Calculate `fair_perc_self` as `(token_self / (token_self + token_opp)) * 100`. **Crucially, handle the case where `token_self + token_opp == 0` by setting `fair_perc_self` to 50 in that instance.** Define the positive deviation from this reference point as `perc_gain_from_fair = max(0, split_perc_self - fair_perc_self)`.\n*   **Piecewise Structure:** Instead of a single function for all offers, define the utility (`U`) based on whether the proposed percentage (`split_perc_self`) is below or at/above the calculated fair percentage (`fair_perc_self`). This creates a structural breakpoint at the fairness reference point.\n    *   **For offers below the fair percentage (`split_perc_self < fair_perc_self`):** Define the utility in this region with a simple structure. Consider a fixed utility value (`beta_utility_below`) for all offers in this unfair region. This parameter should capture the base tendency to reject unfair offers.\n    *   **For offers at or above the fair percentage (`split_perc_self >= fair_perc_self`):** Define the utility in this region with a different structure. Consider a linear function of the gain relative to the fair percentage, starting from a base utility level at the fair point (`beta_utility_fair`) and increasing with the gain (`beta_gain_slope * perc_gain_from_fair`).\n*   **Calculated Variables:** Ensure `fair_perc_self` and `perc_gain_from_fair` (and any other variables you define based on data inputs) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs.\n*   **Parameter Constraints:** Define clear, generous, finite numerical bounds for *all* learnable parameters. Ensure parameter names are suitable for Python code (e.g., `beta_utility_below`, `beta_utility_fair`, `beta_gain_slope`).\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags, clearly showing the piecewise structure based on the condition `split_perc_self >= fair_perc_self`. Use clear notation.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing the model structure, its key components (the use of fair percentage as a piecewise breakpoint, the distinct utility functions/parameters for offers below vs. at/above fair), and how it relates to the decision process, focusing on the structural choices aimed at identifiability.\n\nDesign a model with a piecewise structure using `fair_perc_self` as the breakpoint, separating utility below this point from utility at/above this point. Use distinct, simple functional forms (e.g., constant below, linear above fair) in each region, aiming for full parameter recovery by ensuring each learnable parameter's influence is clearly separable. Think critically about potential confounds and how your chosen structure mitigates them.\n\nPlease think through this step by step, focusing intently on designing a piecewise model structure that improves parameter identifiability based on the calculated fair percentage, and ensure all output requirements are met. Then provide your model specification, variable descriptions, target variable, and summary.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nfair_perc_self = (token_self + token_opp > 0) * (token_self / (token_self + token_opp)) * 100 + (token_self + token_opp == 0) * 50\nU = (split_perc_self < fair_perc_self) * beta_utility_below + (split_perc_self >= fair_perc_self) * (beta_utility_fair + beta_gain_slope * (split_perc_self - fair_perc_self))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"Calculated fair percentage for the participant based on token contributions (50 if total tokens are 0)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_utility_below\": {\n      \"description\": \"Base utility for offers below the calculated fair percentage\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_utility_fair\": {\n      \"description\": \"Base utility at the calculated fair percentage\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_gain_slope\": {\n      \"description\": \"Slope parameter for the increase in utility for offers at or above the calculated fair percentage, based on the percentage gain relative to fair\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"The calculated utility of accepting the proposed split\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA piecewise utility model predicting responder acceptance based on the proposed share relative to a calculated fair share derived from token contributions. The model defines distinct utility functions: a constant base utility for offers below the fair percentage (controlled by beta_utility_below) and a base utility at the fair point plus a linear gain function for offers at or above the fair percentage (controlled by beta_utility_fair and beta_gain_slope). This structure aims to improve parameter identifiability by creating a clear breakpoint at the fairness reference point.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_utility_below', 'beta_utility_fair', 'beta_gain_slope']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                fair_perc_self = (token_self + token_opp > 0) * (token_self / (token_self + token_opp)) * 100 + (token_self + token_opp == 0) * 50\nU = (split_perc_self < fair_perc_self) * beta_utility_below + (split_perc_self >= fair_perc_self) * (beta_utility_fair + beta_gain_slope * (split_perc_self - fair_perc_self))\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"Calculated fair percentage for the participant based on token contributions (50 if total tokens are 0)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_utility_below\": {\n      \"description\": \"Base utility for offers below the calculated fair percentage\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_utility_fair\": {\n      \"description\": \"Base utility at the calculated fair percentage\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_gain_slope\": {\n      \"description\": \"Slope parameter for the increase in utility for offers at or above the calculated fair percentage, based on the percentage gain relative to fair\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"The calculated utility of accepting the proposed split\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_utility_below=0, beta_utility_fair=0, beta_gain_slope=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        if (token_self + token_opp) > 0:\n            fair_perc_self = (token_self / (token_self + token_opp)) * 100\n        else:\n            fair_perc_self = 50\n\n        if split_perc_self < fair_perc_self:\n            U = beta_utility_below\n        else:\n            U = beta_utility_fair + beta_gain_slope * (split_perc_self - fair_perc_self)\n\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1746097909.037445
    }
  ],
  "learnable_parameters": {
    "beta_utility_below": {
      "description": "Base utility for offers below the calculated fair percentage",
      "range": {
        "min": -20,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_utility_fair": {
      "description": "Base utility at the calculated fair percentage",
      "range": {
        "min": -20,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_gain_slope": {
      "description": "Slope parameter for the increase in utility for offers at or above the calculated fair percentage, based on the percentage gain relative to fair",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "fair_perc_self = (token_self + token_opp > 0) * (token_self / (token_self + token_opp)) * 100 + (token_self + token_opp == 0) * 50\nU = (split_perc_self < fair_perc_self) * beta_utility_below + (split_perc_self >= fair_perc_self) * (beta_utility_fair + beta_gain_slope * (split_perc_self - fair_perc_self))",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant in percentage",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "fair_perc_self": {
      "description": "Calculated fair percentage for the participant based on token contributions (50 if total tokens are 0)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_utility_below": {
      "description": "Base utility for offers below the calculated fair percentage",
      "range": {
        "min": -20,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_utility_fair": {
      "description": "Base utility at the calculated fair percentage",
      "range": {
        "min": -20,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_gain_slope": {
      "description": "Slope parameter for the increase in utility for offers at or above the calculated fair percentage, based on the percentage gain relative to fair",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "The calculated utility of accepting the proposed split",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A piecewise utility model predicting responder acceptance based on the proposed share relative to a calculated fair share derived from token contributions. The model defines distinct utility functions: a constant base utility for offers below the fair percentage (controlled by beta_utility_below) and a base utility at the fair point plus a linear gain function for offers at or above the fair percentage (controlled by beta_utility_fair and beta_gain_slope). This structure aims to improve parameter identifiability by creating a clear breakpoint at the fairness reference point.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nfair_perc_self = (token_self + token_opp > 0) * (token_self / (token_self + token_opp)) * 100 + (token_self + token_opp == 0) * 50\nU = (split_perc_self < fair_perc_self) * beta_utility_below + (split_perc_self >= fair_perc_self) * (beta_utility_fair + beta_gain_slope * (split_perc_self - fair_perc_self))\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"Calculated fair percentage for the participant based on token contributions (50 if total tokens are 0)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_utility_below\": {\n      \"description\": \"Base utility for offers below the calculated fair percentage\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_utility_fair\": {\n      \"description\": \"Base utility at the calculated fair percentage\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_gain_slope\": {\n      \"description\": \"Slope parameter for the increase in utility for offers at or above the calculated fair percentage, based on the percentage gain relative to fair\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"The calculated utility of accepting the proposed split\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA piecewise utility model predicting responder acceptance based on the proposed share relative to a calculated fair share derived from token contributions. The model defines distinct utility functions: a constant base utility for offers below the fair percentage (controlled by beta_utility_below) and a base utility at the fair point plus a linear gain function for offers at or above the fair percentage (controlled by beta_utility_fair and beta_gain_slope). This structure aims to improve parameter identifiability by creating a clear breakpoint at the fairness reference point.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: fair_perc_self = (token_self + token_opp > 0) * (token_self / (token_self + token_opp)) * 100 + (token_self + token_opp == 0) * 50\nU = (split_perc_self < fair_perc_self) * beta_utility_below + (split_perc_self >= fair_perc_self) * (beta_utility_fair + beta_gain_slope * (split_perc_self - fair_perc_self))\nSummary: A piecewise utility model predicting responder acceptance based on the proposed share relative to a calculated fair share derived from token contributions. The model defines distinct utility functions: a constant base utility for offers below the fair percentage (controlled by beta_utility_below) and a base utility at the fair point plus a linear gain function for offers at or above the fair percentage (controlled by beta_utility_fair and beta_gain_slope). This structure aims to improve parameter identifiability by creating a clear breakpoint at the fairness reference point.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_utility_below=0, beta_utility_fair=0, beta_gain_slope=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        if (token_self + token_opp) > 0:\n            fair_perc_self = (token_self / (token_self + token_opp)) * 100\n        else:\n            fair_perc_self = 50\n\n        if split_perc_self < fair_perc_self:\n            U = beta_utility_below\n        else:\n            U = beta_utility_fair + beta_gain_slope * (split_perc_self - fair_perc_self)\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.71001221001221,
  "group_accuracies": {
    "Control": 0.7280361757105943,
    "Cocaine": 0.6938657407407407
  },
  "group_parameter_averages": {
    "Control": {
      "beta_utility_below": 3.6052737612247028,
      "beta_utility_fair": 14.578459583350885,
      "beta_gain_slope": 9.59654196181656
    },
    "Cocaine": {
      "beta_utility_below": -0.6324294518205648,
      "beta_utility_fair": 11.44876929781228,
      "beta_gain_slope": 10.141760618326112
    }
  },
  "fitting_results": [
    {
      "beta_utility_below": -3.433971504477722,
      "beta_utility_fair": -0.6610622443249805,
      "beta_gain_slope": 0.11819912641189358,
      "success": true,
      "log_likelihood": -6.941287402164438,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.25134741265819877,
      "beta_utility_fair": 11.964975437319893,
      "beta_gain_slope": 3.008370129486516,
      "success": true,
      "log_likelihood": -21.930067356737442,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.1246278830805275,
      "beta_utility_fair": 11.74374499185042,
      "beta_gain_slope": 10.766017572752496,
      "success": true,
      "log_likelihood": -22.1181860364427,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.6466270456837948,
      "beta_utility_fair": 15.03802537332319,
      "beta_gain_slope": 1.0367140698681987,
      "success": true,
      "log_likelihood": -20.591730279087976,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.5108282159140309,
      "beta_utility_fair": 19.400795520551313,
      "beta_gain_slope": 15.7064423493072,
      "success": true,
      "log_likelihood": -21.17002362178598,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 0.37648806023608633,
      "beta_utility_fair": 10.98167566741361,
      "beta_gain_slope": 18.429380862653222,
      "success": true,
      "log_likelihood": -21.614935429533848,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 15.789229627768396,
      "beta_utility_fair": 15.523197544782867,
      "beta_gain_slope": 13.888504378906783,
      "success": true,
      "log_likelihood": -4.805022331765988e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 0.5108246735950324,
      "beta_utility_fair": 17.197788529734403,
      "beta_gain_slope": 9.617342673847212,
      "success": true,
      "log_likelihood": -21.170023682198785,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 15.332969176606333,
      "beta_utility_fair": 20.0,
      "beta_gain_slope": 11.853310063839771,
      "success": true,
      "log_likelihood": -7.017111108018249e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.788456133471008,
      "beta_utility_fair": 19.478667906294888,
      "beta_gain_slope": 12.534908671439213,
      "success": true,
      "log_likelihood": -19.874763985916104,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.510825801924848,
      "beta_utility_fair": 17.087033458612794,
      "beta_gain_slope": 0.17728888067465046,
      "success": true,
      "log_likelihood": -21.17002370376776,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": -2.7080493713444125,
      "beta_utility_fair": -1.2285189786336503e-08,
      "beta_gain_slope": 9.54110050582348,
      "success": true,
      "log_likelihood": -31.893478362767684,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.646824097198141,
      "beta_utility_fair": 12.065179351031775,
      "beta_gain_slope": 5.113880260356131,
      "success": true,
      "log_likelihood": -20.59174134277894,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 16.097560524832456,
      "beta_utility_fair": 20.0,
      "beta_gain_slope": 8.73932005772244,
      "success": true,
      "log_likelihood": -3.2669138903725312e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 20.0,
      "beta_utility_fair": 17.699198877123607,
      "beta_gain_slope": 17.721249870685632,
      "success": true,
      "log_likelihood": -1.0350651450722877e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 15.263637718898007,
      "beta_utility_fair": 16.27902462101587,
      "beta_gain_slope": 5.475563214037802,
      "success": true,
      "log_likelihood": -7.686990005395058e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 20.0,
      "beta_utility_fair": 20.0,
      "beta_gain_slope": 16.40643216767917,
      "success": true,
      "log_likelihood": -6.647922530123226e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 1.6863987189557237,
      "beta_utility_fair": 20.0,
      "beta_gain_slope": 6.5906990508051315,
      "success": true,
      "log_likelihood": -13.86876394262629,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 1.945913357905663,
      "beta_utility_fair": 13.90936352862161,
      "beta_gain_slope": 16.179778561332444,
      "success": true,
      "log_likelihood": -12.056646974256358,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 20.0,
      "beta_utility_fair": 20.0,
      "beta_gain_slope": 7.715369657129047,
      "success": true,
      "log_likelihood": -6.647922530123225e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.00030760568103229595,
      "beta_utility_fair": 12.005613454033845,
      "beta_gain_slope": 3.647055913203503,
      "success": true,
      "log_likelihood": -22.18072236920338,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 1.6864009108419056,
      "beta_utility_fair": 13.121331487622436,
      "beta_gain_slope": 10.662308979856368,
      "success": true,
      "log_likelihood": -13.868767942637628,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.9380334303447126,
      "beta_utility_fair": 11.783937120463857,
      "beta_gain_slope": 5.946802694077298,
      "success": true,
      "log_likelihood": -19.012176152955178,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.12516308057870712,
      "beta_utility_fair": 16.682346979207374,
      "beta_gain_slope": 2.760833113099739,
      "success": true,
      "log_likelihood": -22.118169131059616,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.25131474675532106,
      "beta_utility_fair": 19.678044462978683,
      "beta_gain_slope": 19.235046312488233,
      "success": true,
      "log_likelihood": -21.930054631735114,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 0.12516341162523917,
      "beta_utility_fair": 13.075787571436258,
      "beta_gain_slope": 8.675295525029254,
      "success": true,
      "log_likelihood": -22.118173208008326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 9.04184627899846e-08,
      "beta_utility_fair": 14.720298830184529,
      "beta_gain_slope": 5.664171778684903,
      "success": true,
      "log_likelihood": -22.180710580373205,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": -1.466066289944654,
      "beta_utility_fair": 12.25413065391065,
      "beta_gain_slope": 7.654113645243821,
      "success": true,
      "log_likelihood": -15.44249178835769,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 1.9459385655427948,
      "beta_utility_fair": 20.0,
      "beta_gain_slope": 12.211972585853903,
      "success": true,
      "log_likelihood": -12.056645158941327,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 1.0986127705597242,
      "beta_utility_fair": 8.905288692508638,
      "beta_gain_slope": 7.209077597232561,
      "success": true,
      "log_likelihood": -17.994995941620882,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 15.323764759891676,
      "beta_utility_fair": 20.0,
      "beta_gain_slope": 15.738010791287717,
      "success": true,
      "log_likelihood": -7.081992854291093e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": -3.421398990160661,
      "beta_utility_fair": 0.006141059743447997,
      "beta_gain_slope": 4.366045136041965,
      "success": true,
      "log_likelihood": -28.85990838092981,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.5108252243402598,
      "beta_utility_fair": -3.9364787069156443e-07,
      "beta_gain_slope": 6.832640882531733,
      "success": true,
      "log_likelihood": -22.556317975175947,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.7884563356801563,
      "beta_utility_fair": 17.2821651872162,
      "beta_gain_slope": 11.10458115138794,
      "success": true,
      "log_likelihood": -19.87476404141405,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 19.6711933757041,
      "beta_utility_fair": 20.0,
      "beta_gain_slope": 10.895601916505361,
      "success": true,
      "log_likelihood": -9.215685427392758e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 0.37949028296949644,
      "beta_utility_fair": 15.17830179559708,
      "beta_gain_slope": 14.329005299417403,
      "success": true,
      "log_likelihood": -21.61486714352127,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 0.6468601196386183,
      "beta_utility_fair": 9.728935708608276,
      "beta_gain_slope": 10.75168565681745,
      "success": true,
      "log_likelihood": -20.591848953388343,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.2494623239578031,
      "beta_utility_fair": 9.918818482127959,
      "beta_gain_slope": 19.44727306008347,
      "success": true,
      "log_likelihood": -21.930166610031083,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 0.5108255429410139,
      "beta_utility_fair": 18.76895097108816,
      "beta_gain_slope": 14.697230249748944,
      "success": true,
      "log_likelihood": -21.170023628373613,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 2.268686175252418,
      "beta_utility_fair": 20.0,
      "beta_gain_slope": 6.462456396840168,
      "success": true,
      "log_likelihood": -9.956132951310902,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 0.2513132030402246,
      "beta_utility_fair": 18.840099781039136,
      "beta_gain_slope": 14.99095189721448,
      "success": true,
      "log_likelihood": -21.93005463920115,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": -1.9459103772069195,
      "beta_utility_fair": 18.60007556328953,
      "beta_gain_slope": 7.471821590779935,
      "success": true,
      "log_likelihood": -12.056645170121584,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": 3.4339965358417626,
      "beta_utility_fair": 18.61588612561375,
      "beta_gain_slope": 1.2774500599275385,
      "success": true,
      "log_likelihood": -4.449945560248821,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_utility_below": -1.0408135227967225e-07,
      "beta_utility_fair": 20.0,
      "beta_gain_slope": 18.848637422431963,
      "success": true,
      "log_likelihood": -22.1807097752406,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": 0.2512976238293852,
      "beta_utility_fair": 20.0,
      "beta_gain_slope": 3.1671855818663963,
      "success": true,
      "log_likelihood": -21.930054631280896,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": 0.7884527194544009,
      "beta_utility_fair": 12.094940417162919,
      "beta_gain_slope": 13.560554243549596,
      "success": true,
      "log_likelihood": -19.87477515443734,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.12516292705559884,
      "beta_utility_fair": 14.432522485804993,
      "beta_gain_slope": 4.883796758509602,
      "success": true,
      "log_likelihood": -22.118170096410832,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.7884575729262383,
      "beta_utility_fair": 20.0,
      "beta_gain_slope": 6.9835872307817715,
      "success": true,
      "log_likelihood": -19.874763983090315,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.646627372052534,
      "beta_utility_fair": 20.0,
      "beta_gain_slope": 7.841967085629998,
      "success": true,
      "log_likelihood": -20.591729693939758,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -3.242285858538508e-07,
      "beta_utility_fair": 18.6156456090647,
      "beta_gain_slope": 10.250043355515778,
      "success": true,
      "log_likelihood": -45.206560717616384,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": 0.6463318501287043,
      "beta_utility_fair": 11.675583446889435,
      "beta_gain_slope": 17.012608789893008,
      "success": true,
      "log_likelihood": -20.591747002167885,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -2.268682960449894,
      "beta_utility_fair": 6.631172015105716e-07,
      "beta_gain_slope": 7.5052924682725175,
      "success": true,
      "log_likelihood": -34.3682782381401,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": 3.1443851716639396e-06,
      "beta_utility_fair": -1.3535415348251654e-05,
      "beta_gain_slope": 3.9057017347355627,
      "success": true,
      "log_likelihood": -23.56700413212842,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": 0.2507449658396948,
      "beta_utility_fair": 9.646976236478942,
      "beta_gain_slope": 11.489436207024774,
      "success": true,
      "log_likelihood": -44.956036070162924,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.7884663537467985,
      "beta_utility_fair": 20.0,
      "beta_gain_slope": 2.741465006519399,
      "success": true,
      "log_likelihood": -19.87476398336816,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -1.0986103046712392,
      "beta_utility_fair": 11.974121046894979,
      "beta_gain_slope": 10.151442864210958,
      "success": true,
      "log_likelihood": -17.994737231560826,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -1.4663376503252616,
      "beta_utility_fair": 12.4443635129406,
      "beta_gain_slope": 3.6829091139665175,
      "success": true,
      "log_likelihood": -15.442489958584314,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": 1.946151550633857,
      "beta_utility_fair": 12.206007273603106,
      "beta_gain_slope": 8.54419793000502,
      "success": true,
      "log_likelihood": -12.056655256008726,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -2.708057336989638,
      "beta_utility_fair": 8.182710294834814e-06,
      "beta_gain_slope": 5.649302603893521,
      "success": true,
      "log_likelihood": -31.893478362831512,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": 1.2729695353566695,
      "beta_utility_fair": 7.276709682111762,
      "beta_gain_slope": 11.342870085996783,
      "success": true,
      "log_likelihood": -16.81166465372322,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": 0.2512517122702692,
      "beta_utility_fair": 11.62577380144806,
      "beta_gain_slope": 12.503391107982901,
      "success": true,
      "log_likelihood": -21.930072507176863,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.2512466847764192,
      "beta_utility_fair": 11.578224697705444,
      "beta_gain_slope": 19.65511230769608,
      "success": true,
      "log_likelihood": -21.930073379770985,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -3.4339908618386183,
      "beta_utility_fair": -0.6610983097228581,
      "beta_gain_slope": 0.11819806459489873,
      "success": true,
      "log_likelihood": -6.941287401739488,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.37948976469281215,
      "beta_utility_fair": -3.348032852395713e-07,
      "beta_gain_slope": 4.933738855333467,
      "success": true,
      "log_likelihood": -23.00116099254891,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -1.9459102739066143,
      "beta_utility_fair": 12.609235947715767,
      "beta_gain_slope": 14.498062647667346,
      "success": true,
      "log_likelihood": -12.056651835424555,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -1.777308403441387e-05,
      "beta_utility_fair": 20.0,
      "beta_gain_slope": 13.502887289916794,
      "success": true,
      "log_likelihood": -22.18070977650409,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": 2.268683980681112,
      "beta_utility_fair": 16.651743941741728,
      "beta_gain_slope": 15.570000666285942,
      "success": true,
      "log_likelihood": -9.956133064471711,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": 1.6863887907767598,
      "beta_utility_fair": 12.37177441768733,
      "beta_gain_slope": 15.947915442269887,
      "success": true,
      "log_likelihood": -13.868772411692643,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": 1.1229205794654074e-08,
      "beta_utility_fair": 11.590490658224148,
      "beta_gain_slope": 19.63902518382537,
      "success": true,
      "log_likelihood": -22.180728278366512,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": 2.2686907240509533,
      "beta_utility_fair": 20.0,
      "beta_gain_slope": 11.006489246623872,
      "success": true,
      "log_likelihood": -9.956132951371593,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -20.0,
      "beta_utility_fair": 17.686569203807025,
      "beta_gain_slope": 12.99950860278701,
      "success": true,
      "log_likelihood": -1.0402951305137541e-07,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -2.2687489606672395,
      "beta_utility_fair": 0.00022399453172148318,
      "beta_gain_slope": 17.236628096841045,
      "success": true,
      "log_likelihood": -34.36827825650033,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.12516327060341748,
      "beta_utility_fair": 15.418679992678998,
      "beta_gain_slope": 5.04293863485392,
      "success": true,
      "log_likelihood": -22.118169419817722,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": 1.0985834580206348,
      "beta_utility_fair": 19.12684148130642,
      "beta_gain_slope": 5.8679891580553845,
      "success": true,
      "log_likelihood": -17.994724633366257,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.12516195743061898,
      "beta_utility_fair": 14.28004910809465,
      "beta_gain_slope": 15.608905215389392,
      "success": true,
      "log_likelihood": -45.14402120419812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": 0.6466274918022066,
      "beta_utility_fair": 17.151827761562373,
      "beta_gain_slope": 13.868625291852041,
      "success": true,
      "log_likelihood": -20.591729760953093,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": 2.708047948768901,
      "beta_utility_fair": 9.383516236246681,
      "beta_gain_slope": 8.1267611205904,
      "success": true,
      "log_likelihood": -7.481501262679567,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -3.4339388140580933,
      "beta_utility_fair": 2.1142021359274194e-05,
      "beta_gain_slope": 10.471615884262873,
      "success": true,
      "log_likelihood": -51.88794176599865,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": 0.251315976126624,
      "beta_utility_fair": 12.11121108072986,
      "beta_gain_slope": 2.9175541202817445,
      "success": true,
      "log_likelihood": -21.930065621092236,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -3.4340550436072945,
      "beta_utility_fair": -0.6610768000137548,
      "beta_gain_slope": 0.11820410494777671,
      "success": true,
      "log_likelihood": -6.941287405140811,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.12519425347492175,
      "beta_utility_fair": 11.89842498635063,
      "beta_gain_slope": 3.10896987478616,
      "success": true,
      "log_likelihood": -22.118182623328927,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": 2.268680314765763,
      "beta_utility_fair": 12.80785397221174,
      "beta_gain_slope": 2.064779506099377,
      "success": true,
      "log_likelihood": -9.956138425537635,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -2.2688139932349882,
      "beta_utility_fair": -0.00016723575593581867,
      "beta_gain_slope": 11.432622013673848,
      "success": true,
      "log_likelihood": -57.39412919830421,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.2513145690297489,
      "beta_utility_fair": 17.67800176858803,
      "beta_gain_slope": 5.459254146149586,
      "success": true,
      "log_likelihood": -21.93005466807789,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": 0.2510240447833522,
      "beta_utility_fair": 12.082157705690356,
      "beta_gain_slope": 16.068123835942007,
      "success": true,
      "log_likelihood": -21.930066277234758,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -3.433987198987017,
      "beta_utility_fair": 4.1559604900334574e-05,
      "beta_gain_slope": 10.381564194276553,
      "success": true,
      "log_likelihood": -5.836239905103409,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": 0.6466269300501504,
      "beta_utility_fair": 15.108716384030425,
      "beta_gain_slope": 11.081664177411135,
      "success": true,
      "log_likelihood": -20.591730238596874,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -1.4663377345737785,
      "beta_utility_fair": 1.929558230212992e-06,
      "beta_gain_slope": 17.42093645746538,
      "success": true,
      "log_likelihood": -39.85462736982672,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": 2.7080140870313167,
      "beta_utility_fair": 20.0,
      "beta_gain_slope": 15.893532697227307,
      "success": true,
      "log_likelihood": -7.481333077151839,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": -0.3794652464979162,
      "beta_utility_fair": 17.695189159689434,
      "beta_gain_slope": 18.48108931063164,
      "success": true,
      "log_likelihood": -21.6148666752369,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_utility_below": 0.6467387596184357,
      "beta_utility_fair": 11.639833022696363,
      "beta_gain_slope": 8.217423941129049,
      "success": true,
      "log_likelihood": -20.59174735098985,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_utility_below": {
        "r": 0.924047411642714,
        "p": 1.0278831597344645e-42
      },
      "beta_utility_fair": {
        "r": 0.40908457203704934,
        "p": 2.3801800979783735e-05
      },
      "beta_gain_slope": {
        "r": -0.07644683004970035,
        "p": 0.44967063224158427
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 48.112698816428775,
  "bic_Control": 40.93126771142997,
  "bic_Cocaine": 54.54606418132354,
  "bic_results": {
    "average_bic": 48.112698816428775,
    "individual_bics": [
      24.633131619697206,
      54.61069152884322,
      54.98692888825373,
      51.93401737354428,
      53.090604058940286,
      53.98042767443603,
      10.750566425412995,
      53.090604179765904,
      10.750570849590547,
      50.500084787200535,
      53.09060422290385,
      74.5375135409037,
      51.934039500926204,
      10.750563349196112,
      10.75055702238136,
      10.750572189348341,
      10.750556948326782,
      38.48808470062091,
      34.86385076388105,
      10.750556948326782,
      55.11200155377509,
      38.48809270064359,
      48.77490912127868,
      54.98689507748756,
      54.61066607883856,
      54.986903231384986,
      55.111977976114744,
      41.63554039208371,
      34.863847133250985,
      46.7405486986101,
      10.75057097935404,
      68.47037357722795,
      55.86319276572023,
      50.500084898196434,
      10.75055699968204,
      53.980291102410874,
      51.93425472214501,
      54.6108900354305,
      53.09060407211555,
      30.662822717990135,
      54.61066609377063,
      34.863847155611495,
      19.650447935865973,
      55.11197636584953,
      54.61066607793012,
      50.500107124243016,
      54.98689700819,
      50.50008478154896,
      51.93401620324785,
      101.1636782506011,
      51.9340508197041,
      79.48711329164853,
      57.884565079625176,
      100.66262895569417,
      50.50008478210465,
      46.74003127848998,
      41.63553673253696,
      34.86386732738578,
      74.53751354103136,
      44.37388612281477,
      54.61070182972206,
      54.6107035749103,
      24.633131618847308,
      56.75287880046615,
      34.86386048621744,
      55.11197636837652,
      30.662822944311753,
      38.48810163875362,
      55.11201337210136,
      30.662822718111517,
      10.750557023427357,
      79.48711332836899,
      54.98689565500378,
      46.74000608210085,
      101.03859922376456,
      51.934016337274514,
      25.713559340727464,
      114.52644034736562,
      54.61068805755281,
      24.633131625649952,
      54.98692206202618,
      30.6628336664436,
      125.53881521197675,
      54.610666151524114,
      54.61068936983784,
      22.42303662557515,
      51.934017292562075,
      90.45981155502177,
      25.71322296967201,
      53.980290165842135,
      51.934051517348024
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        24.633131619697206,
        54.61069152884322,
        54.98692888825373,
        51.93401737354428,
        53.090604058940286,
        53.98042767443603,
        10.750566425412995,
        53.090604179765904,
        10.750570849590547,
        50.500084787200535,
        53.09060422290385,
        74.5375135409037,
        51.934039500926204,
        10.750563349196112,
        10.75055702238136,
        10.750572189348341,
        10.750556948326782,
        38.48808470062091,
        34.86385076388105,
        10.750556948326782,
        55.11200155377509,
        38.48809270064359,
        48.77490912127868,
        54.98689507748756,
        54.61066607883856,
        54.986903231384986,
        55.111977976114744,
        41.63554039208371,
        34.863847133250985,
        46.7405486986101,
        10.75057097935404,
        68.47037357722795,
        55.86319276572023,
        50.500084898196434,
        10.75055699968204,
        53.980291102410874,
        51.93425472214501,
        54.6108900354305,
        53.09060407211555,
        30.662822717990135,
        54.61066609377063,
        34.863847155611495,
        19.650447935865973
      ],
      "Cocaine": [
        55.11197636584953,
        54.61066607793012,
        50.500107124243016,
        54.98689700819,
        50.50008478154896,
        51.93401620324785,
        101.1636782506011,
        51.9340508197041,
        79.48711329164853,
        57.884565079625176,
        100.66262895569417,
        50.50008478210465,
        46.74003127848998,
        41.63553673253696,
        34.86386732738578,
        74.53751354103136,
        44.37388612281477,
        54.61070182972206,
        54.6107035749103,
        24.633131618847308,
        56.75287880046615,
        34.86386048621744,
        55.11197636837652,
        30.662822944311753,
        38.48810163875362,
        55.11201337210136,
        30.662822718111517,
        10.750557023427357,
        79.48711332836899,
        54.98689565500378,
        46.74000608210085,
        101.03859922376456,
        51.934016337274514,
        25.713559340727464,
        114.52644034736562,
        54.61068805755281,
        24.633131625649952,
        54.98692206202618,
        30.6628336664436,
        125.53881521197675,
        54.610666151524114,
        54.61068936983784,
        22.42303662557515,
        51.934017292562075,
        90.45981155502177,
        25.71322296967201,
        53.980290165842135,
        51.934051517348024
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_utility_below: r = 0.924\n- beta_utility_fair: r = 0.409\n- beta_gain_slope: r = -0.076",
  "previous_models": [
    "Specification: fair_perc_self = (token_self + token_opp > 0) * (token_self / (token_self + token_opp)) * 100 + (token_self + token_opp == 0) * 50\nU = (split_perc_self < fair_perc_self) * beta_utility_below + (split_perc_self >= fair_perc_self) * (beta_utility_fair + beta_gain_slope * (split_perc_self - fair_perc_self))\nSummary: A piecewise utility model predicting responder acceptance based on the proposed share relative to a calculated fair share derived from token contributions. The model defines distinct utility functions: a constant base utility for offers below the fair percentage (controlled by beta_utility_below) and a base utility at the fair point plus a linear gain function for offers at or above the fair percentage (controlled by beta_utility_fair and beta_gain_slope). This structure aims to improve parameter identifiability by creating a clear breakpoint at the fairness reference point.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 48.112698816428775\nOverall Accuracy: 0.7100\nGroup Accuracies:\n- Control: 0.7280\n- Cocaine: 0.6939\n\nParameter Recovery:\n- beta_utility_below: r = 0.924\n- beta_utility_fair: r = 0.409\n- beta_gain_slope: r = -0.076"
  ]
}