Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable "token_self". The other variable, "token_opp", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.

Again, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.

Note that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same "fairness".

Below is the description of each variable in the dataset, which will be followed by information about the data type of the variable:

trial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]
trial_role = the role of the participant [1 = responder, 2 = proposer]
token_opp = number of tokens found by the opponent
token_self = number of tokens found by the participant
combined_earning = amount of money earned in total (note that each token found is £3)
split_opp = the proposed share of the opponent (in £)
split_self = the proposed share for the participant (in £)
splitperc_opp = same but in %
split_perc_self = same but in %
accept = whether the participant responded accept (1) or reject (0)
accepted_amount = if accepted, what is the amount gain (in £)
accepted_perc = same as above but in %
proposed_perc = when participant is the proposer, what is the % proposed to the opponent
proposed_amount = when participant is the proposer, what is the amount proposed to the opponent

Desired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).

The model should:
1. Predict only responder behavior (should target "accept = whether the participant responded accept (1) or reject (0)")
2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.
3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).
4. Predict utility, where less than 0 is less than 50% likely.

For any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).

Then, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.
For example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.

Use clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.

```json
{
  "variables": {
    "variable_name": {
      "description": "Clear description",
      "range": {
        "min": value,
        "max": value,
        "inclusive_min": boolean,
        "inclusive_max": boolean
      },
      "distribution": {
        "type": "distribution type",
        "parameters": {}
      },
      "learnable": boolean,
      "source": "learnable/data/calculated"
    }
  }
}
```
</VARIABLES>

Example #1:
<EXAMPLE>
(Model of a Random Choice Task):
Let me think through this step by step...
[your reasoning here]

<MODEL>
U_i = beta_param + epsilon_param * E + eta_param * N
</MODEL>

<VARIABLES>
{
  "variables": {
    "U_i": {
      "description": "Utility of choosing action i",
      "range": {
        "min": "-inf",
        "max": "inf"
      },
      "learnable": false,\n      "source": "calculated"
    },
    "beta_param": {
      "description": "Base tendency parameter (inherent preference)",
      "range": {
        "min": 0,
        "max": 1
      },
      "learnable": true,
      "source": "learnable"
    },
    "epsilon_param": {
      "description": "Environmental sensitivity parameter",
      "range": {"min": "-inf", "max": "inf"},
      "learnable": true,
      "source": "learnable"
    },
    "E": {
      "description": "Environmental cue value",
      "range": {"min": "-inf", "max": "inf"},
      "learnable": false,
      "source": "data"
    },
    "eta_param": {"description": "Noise parameter", "range": {"min": 0, "max": 1, "exclusive_max": true}, "learnable": true, "source": "learnable"},
    "N": {
      "description": "Random noise drawn from normal distribution N(0,1)",
      "distribution": {
        "type": "normal",
        "mean": 0,
        "std": 1
      },
      "learnable": false,
      "source": "calculated"
    }
  }
}
</VARIABLES>
<SUMMARY>
A linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.
</SUMMARY>
</EXAMPLE>

Please be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.

The parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.

Model Type:
Your model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.

Instructions for Run 35 of 100:
The primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is non-negotiable for a usable model. Improved BIC and accuracy are important secondary goals.

In the previous run (Run 34), the four-parameter discontinuous piecewise linear model (`beta_utility_at_fair_below`, `beta_slope_below`, `beta_utility_at_fair_above`, `beta_slope_above`) failed to achieve acceptable parameter recovery for the "utility at fair" parameters and the gain slope parameter (`r=0.064`, `r=0.055`, `r=0.644` respectively). The BIC was also high (268.71). This suggests the specific parameterization involving hypothetical utility levels *at* the fair point for two different extrapolated lines created identifiability problems.

For this run, design a computational model for responder decisions (`trial_role == 1`) that predicts the utility of accepting an offer using a **simplified piecewise linear structure relative to the calculated fair percentage**. This structure aims to improve parameter identifiability by reducing the number of parameters and fixing the reference point utility.

*   **Parameter Identifiability:** Focus on creating a model structure where each learnable parameter has a clearly separable influence on the utility function across the range of possible offers. Reducing the number of parameters and defining utility relative to a fixed point (fair = 0) should help distinguish the impact of gain sensitivity from loss sensitivity.
*   **Reference Point & Deviations:** Continue to use the calculated fair percentage for the participant (`fair_perc_self`) based on token contributions as a key reference point. Calculate `fair_perc_self` as `(token_self / (token_self + token_opp)) * 100`. **Handle the case where `token_self + token_opp == 0` by setting `fair_perc_self` to 50 in that instance.** Calculate the deviation from fair: `deviation_from_fair = split_perc_self - fair_perc_self`.
*   **Piecewise Structure:** Define the utility (`U`) using a piecewise linear structure where the utility *at the fair point* (`deviation_from_fair = 0`) is implicitly fixed at 0. The utility function will have separate linear slopes for gains and losses relative to this zero point.
    *   For gains (`deviation_from_fair > 0`), utility increases linearly with a slope `beta_gain_slope`.
    *   For losses (`deviation_from_fair < 0`), utility decreases linearly with a slope `beta_loss_slope` multiplied by the negative deviation.
    *   At the fair point (`deviation_from_fair = 0`), utility is 0.
*   **Model Formula:** Implement this structure with the following formula: `U = beta_gain_slope * max(0.0, deviation_from_fair) + beta_loss_slope * min(0.0, deviation_from_fair)`.
    *   In this formula, `max(0.0, deviation_from_fair)` captures the gain component (0 for losses, positive for gains).
    *   `min(0.0, deviation_from_fair)` captures the loss component (negative for losses, 0 for gains).
    *   `beta_gain_slope` should ideally be positive for utility to increase with gains.
    *   `beta_loss_slope` should ideally be positive for utility to decrease with losses (since `min` is negative).
*   **Calculated Variables:** Ensure `sum_tokens`, `fair_perc_self`, `deviation_from_fair`, and `U` are included in your <VARIABLES> descriptions with `source: "calculated"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`).
*   **Learnable Parameters:** Your model should have two learnable parameters: `beta_gain_slope` and `beta_loss_slope`. Define clear, generous, finite numerical bounds for both, e.g., [-20, 20]. Ensure parameter names are suitable for Python code.
*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags, including the calculations for `sum_tokens`, `fair_perc_self`, `deviation_from_fair`, and the final formula for `U` using standard mathematical notation (e.g., `max`, `min`).
*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status.
*   **Target Variable:** Specify "accept" as the target variable using <target_variable> tags.
*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing the two-parameter piecewise linear model. Explain that it uses the fair percentage as a reference point, where utility is fixed at zero, and defines separate linear sensitivities (slopes) for offers above (gains) and below (losses) this point. Mention how this simplified structure aims to improve parameter identifiability compared to previous models.

Available Data Variables:
- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.

Please think through this step by step, then provide your model specification and variable descriptions.