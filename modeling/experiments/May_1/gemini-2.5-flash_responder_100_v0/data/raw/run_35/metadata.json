{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n```json\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n```\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta_param + epsilon_param * E + eta_param * N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\\n      \"source\": \"calculated\"\n    },\n    \"beta_param\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon_param\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta_param\": {\"description\": \"Noise parameter\", \"range\": {\"min\": 0, \"max\": 1, \"exclusive_max\": true}, \"learnable\": true, \"source\": \"learnable\"},\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions for Run 35 of 100:\nThe primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is non-negotiable for a usable model. Improved BIC and accuracy are important secondary goals.\n\nIn the previous run (Run 34), the four-parameter discontinuous piecewise linear model (`beta_utility_at_fair_below`, `beta_slope_below`, `beta_utility_at_fair_above`, `beta_slope_above`) failed to achieve acceptable parameter recovery for the \"utility at fair\" parameters and the gain slope parameter (`r=0.064`, `r=0.055`, `r=0.644` respectively). The BIC was also high (268.71). This suggests the specific parameterization involving hypothetical utility levels *at* the fair point for two different extrapolated lines created identifiability problems.\n\nFor this run, design a computational model for responder decisions (`trial_role == 1`) that predicts the utility of accepting an offer using a **simplified piecewise linear structure relative to the calculated fair percentage**. This structure aims to improve parameter identifiability by reducing the number of parameters and fixing the reference point utility.\n\n*   **Parameter Identifiability:** Focus on creating a model structure where each learnable parameter has a clearly separable influence on the utility function across the range of possible offers. Reducing the number of parameters and defining utility relative to a fixed point (fair = 0) should help distinguish the impact of gain sensitivity from loss sensitivity.\n*   **Reference Point & Deviations:** Continue to use the calculated fair percentage for the participant (`fair_perc_self`) based on token contributions as a key reference point. Calculate `fair_perc_self` as `(token_self / (token_self + token_opp)) * 100`. **Handle the case where `token_self + token_opp == 0` by setting `fair_perc_self` to 50 in that instance.** Calculate the deviation from fair: `deviation_from_fair = split_perc_self - fair_perc_self`.\n*   **Piecewise Structure:** Define the utility (`U`) using a piecewise linear structure where the utility *at the fair point* (`deviation_from_fair = 0`) is implicitly fixed at 0. The utility function will have separate linear slopes for gains and losses relative to this zero point.\n    *   For gains (`deviation_from_fair > 0`), utility increases linearly with a slope `beta_gain_slope`.\n    *   For losses (`deviation_from_fair < 0`), utility decreases linearly with a slope `beta_loss_slope` multiplied by the negative deviation.\n    *   At the fair point (`deviation_from_fair = 0`), utility is 0.\n*   **Model Formula:** Implement this structure with the following formula: `U = beta_gain_slope * max(0.0, deviation_from_fair) + beta_loss_slope * min(0.0, deviation_from_fair)`.\n    *   In this formula, `max(0.0, deviation_from_fair)` captures the gain component (0 for losses, positive for gains).\n    *   `min(0.0, deviation_from_fair)` captures the loss component (negative for losses, 0 for gains).\n    *   `beta_gain_slope` should ideally be positive for utility to increase with gains.\n    *   `beta_loss_slope` should ideally be positive for utility to decrease with losses (since `min` is negative).\n*   **Calculated Variables:** Ensure `sum_tokens`, `fair_perc_self`, `deviation_from_fair`, and `U` are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`).\n*   **Learnable Parameters:** Your model should have two learnable parameters: `beta_gain_slope` and `beta_loss_slope`. Define clear, generous, finite numerical bounds for both, e.g., [-20, 20]. Ensure parameter names are suitable for Python code.\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags, including the calculations for `sum_tokens`, `fair_perc_self`, `deviation_from_fair`, and the final formula for `U` using standard mathematical notation (e.g., `max`, `min`).\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing the two-parameter piecewise linear model. Explain that it uses the fair percentage as a reference point, where utility is fixed at zero, and defines separate linear sensitivities (slopes) for offers above (gains) and below (losses) this point. Mention how this simplified structure aims to improve parameter identifiability compared to previous models.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\nproposed_amount = when participant is the proposer, what is the amount proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified).\n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able to be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal.\n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied.\n\n```json\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n```\n</VARIABLES>\n\nExample #1:\n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = beta_param + epsilon_param * E + eta_param * N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\\n      \"source\": \"calculated\"\n    },\n    \"beta_param\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon_param\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\"min\": \"-inf\", \"max\": \"inf\"},\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta_param\": {\"description\": \"Noise parameter\", \"range\": {\"min\": 0, \"max\": 1, \"exclusive_max\": true}, \"learnable\": true, \"source\": \"learnable\"},\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (beta) constrained to [0,1] and an unconstrained environmental sensitivity parameter (epsilon). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type:\nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\nInstructions for Run 35 of 100:\nThe primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is non-negotiable for a usable model. Improved BIC and accuracy are important secondary goals.\n\nIn the previous run (Run 34), the four-parameter discontinuous piecewise linear model (`beta_utility_at_fair_below`, `beta_slope_below`, `beta_utility_at_fair_above`, `beta_slope_above`) failed to achieve acceptable parameter recovery for the \"utility at fair\" parameters and the gain slope parameter (`r=0.064`, `r=0.055`, `r=0.644` respectively). The BIC was also high (268.71). This suggests the specific parameterization involving hypothetical utility levels *at* the fair point for two different extrapolated lines created identifiability problems.\n\nFor this run, design a computational model for responder decisions (`trial_role == 1`) that predicts the utility of accepting an offer using a **simplified piecewise linear structure relative to the calculated fair percentage**. This structure aims to improve parameter identifiability by reducing the number of parameters and fixing the reference point utility.\n\n*   **Parameter Identifiability:** Focus on creating a model structure where each learnable parameter has a clearly separable influence on the utility function across the range of possible offers. Reducing the number of parameters and defining utility relative to a fixed point (fair = 0) should help distinguish the impact of gain sensitivity from loss sensitivity.\n*   **Reference Point & Deviations:** Continue to use the calculated fair percentage for the participant (`fair_perc_self`) based on token contributions as a key reference point. Calculate `fair_perc_self` as `(token_self / (token_self + token_opp)) * 100`. **Handle the case where `token_self + token_opp == 0` by setting `fair_perc_self` to 50 in that instance.** Calculate the deviation from fair: `deviation_from_fair = split_perc_self - fair_perc_self`.\n*   **Piecewise Structure:** Define the utility (`U`) using a piecewise linear structure where the utility *at the fair point* (`deviation_from_fair = 0`) is implicitly fixed at 0. The utility function will have separate linear slopes for gains and losses relative to this zero point.\n    *   For gains (`deviation_from_fair > 0`), utility increases linearly with a slope `beta_gain_slope`.\n    *   For losses (`deviation_from_fair < 0`), utility decreases linearly with a slope `beta_loss_slope` multiplied by the negative deviation.\n    *   At the fair point (`deviation_from_fair = 0`), utility is 0.\n*   **Model Formula:** Implement this structure with the following formula: `U = beta_gain_slope * max(0.0, deviation_from_fair) + beta_loss_slope * min(0.0, deviation_from_fair)`.\n    *   In this formula, `max(0.0, deviation_from_fair)` captures the gain component (0 for losses, positive for gains).\n    *   `min(0.0, deviation_from_fair)` captures the loss component (negative for losses, 0 for gains).\n    *   `beta_gain_slope` should ideally be positive for utility to increase with gains.\n    *   `beta_loss_slope` should ideally be positive for utility to decrease with losses (since `min` is negative).\n*   **Calculated Variables:** Ensure `sum_tokens`, `fair_perc_self`, `deviation_from_fair`, and `U` are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`).\n*   **Learnable Parameters:** Your model should have two learnable parameters: `beta_gain_slope` and `beta_loss_slope`. Define clear, generous, finite numerical bounds for both, e.g., [-20, 20]. Ensure parameter names are suitable for Python code.\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags, including the calculations for `sum_tokens`, `fair_perc_self`, `deviation_from_fair`, and the final formula for `U` using standard mathematical notation (e.g., `max`, `min`).\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing the two-parameter piecewise linear model. Explain that it uses the fair percentage as a reference point, where utility is fixed at zero, and defines separate linear sensitivities (slopes) for offers above (gains) and below (losses) this point. Mention how this simplified structure aims to improve parameter identifiability compared to previous models.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n\nPlease think through this step by step, then provide your model specification and variable descriptions.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self = (token_self / sum_tokens) * 100 if sum_tokens > 0 else 50.0\ndeviation_from_fair = split_perc_self - fair_perc_self\nU = beta_gain_slope * max(0.0, deviation_from_fair) + beta_loss_slope * min(0.0, deviation_from_fair)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The participant's fair share percentage based on token contributions (50% if total tokens is 0)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation_from_fair\": {\n      \"description\": \"Difference between the proposed percentage for the participant and their fair percentage\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain_slope\": {\n      \"description\": \"Sensitivity to offers above the fair percentage (gain slope)\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_slope\": {\n      \"description\": \"Sensitivity to offers below the fair percentage (loss slope)\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA two-parameter piecewise linear model predicting the utility of accepting an offer in the responder role. The model calculates the participant's fair share percentage based on token contributions, treating zero total tokens as a 50/50 fair split. Utility at this fair point is implicitly fixed at zero. Utility then changes linearly with separate slopes (gain_slope and loss_slope) for deviations above and below the fair share. This structure aims to improve parameter identifiability by reducing parameters and fixing a reference point compared to previous models.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_gain_slope', 'beta_loss_slope']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self = (token_self / sum_tokens) * 100 if sum_tokens > 0 else 50.0\ndeviation_from_fair = split_perc_self - fair_perc_self\nU = beta_gain_slope * max(0.0, deviation_from_fair) + beta_loss_slope * min(0.0, deviation_from_fair)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The participant's fair share percentage based on token contributions (50% if total tokens is 0)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation_from_fair\": {\n      \"description\": \"Difference between the proposed percentage for the participant and their fair percentage\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain_slope\": {\n      \"description\": \"Sensitivity to offers above the fair percentage (gain slope)\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_slope\": {\n      \"description\": \"Sensitivity to offers below the fair percentage (loss slope)\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_gain_slope=1.0, beta_loss_slope=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 50.0)\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self = (token_self / sum_tokens) * 100 if sum_tokens > 0 else 50.0\n        deviation_from_fair = split_perc_self - fair_perc_self\n        U = beta_gain_slope * max(0.0, deviation_from_fair) + beta_loss_slope * min(0.0, deviation_from_fair)\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '''\n[\n    {\n        \"ID\": 0,\n        \"group\": \"group1\",\n        \"trial_number\": 1,\n        \"trial_type\": 1,\n        \"trial_role\": 1,\n        \"token_opp\": 20,\n        \"token_self\": 30,\n        \"combined_earning\": 50,\n        \"split_opp\": 20.0,\n        \"split_self\": 30.0,\n        \"splitperc_opp\": 40,\n        \"splitperc_self\": 60,\n        \"accept\": 1.0,\n        \"accepted_amount\": 30.0,\n        \"accepted_perc\": 60.0,\n        \"proposed_perc\": 60.0,\n        \"proposed_amount\": 30.0\n    },\n    {\n        \"ID\": 1,\n        \"group\": \"group1\",\n        \"trial_number\": 2,\n        \"trial_type\": 1,\n        \"trial_role\": 1,\n        \"token_opp\": 15,\n        \"token_self\": 35,\n        \"combined_earning\": 50,\n        \"split_opp\": 15.0,\n        \"split_self\": 35.0,\n        \"splitperc_opp\": 30,\n        \"splitperc_self\": 70,\n        \"accept\": 1.0,\n        \"accepted_amount\": 35.0,\n        \"accepted_perc\": 70.0,\n        \"proposed_perc\": 70.0,\n        \"proposed_amount\": 35.0\n    }\n]\n'''\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1746098152.851118
    }
  ],
  "learnable_parameters": {
    "beta_gain_slope": {
      "description": "Sensitivity to offers above the fair percentage (gain slope)",
      "range": {
        "min": -20,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_loss_slope": {
      "description": "Sensitivity to offers below the fair percentage (loss slope)",
      "range": {
        "min": -20,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self = (token_self / sum_tokens) * 100 if sum_tokens > 0 else 50.0\ndeviation_from_fair = split_perc_self - fair_perc_self\nU = beta_gain_slope * max(0.0, deviation_from_fair) + beta_loss_slope * min(0.0, deviation_from_fair)",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant in percentage",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by participant and opponent",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self": {
      "description": "The participant's fair share percentage based on token contributions (50% if total tokens is 0)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "deviation_from_fair": {
      "description": "Difference between the proposed percentage for the participant and their fair percentage",
      "range": {
        "min": -100,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_gain_slope": {
      "description": "Sensitivity to offers above the fair percentage (gain slope)",
      "range": {
        "min": -20,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_loss_slope": {
      "description": "Sensitivity to offers below the fair percentage (loss slope)",
      "range": {
        "min": -20,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Utility of accepting the proposed offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A two-parameter piecewise linear model predicting the utility of accepting an offer in the responder role. The model calculates the participant's fair share percentage based on token contributions, treating zero total tokens as a 50/50 fair split. Utility at this fair point is implicitly fixed at zero. Utility then changes linearly with separate slopes (gain_slope and loss_slope) for deviations above and below the fair share. This structure aims to improve parameter identifiability by reducing parameters and fixing a reference point compared to previous models.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self = (token_self / sum_tokens) * 100 if sum_tokens > 0 else 50.0\ndeviation_from_fair = split_perc_self - fair_perc_self\nU = beta_gain_slope * max(0.0, deviation_from_fair) + beta_loss_slope * min(0.0, deviation_from_fair)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The participant's fair share percentage based on token contributions (50% if total tokens is 0)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"deviation_from_fair\": {\n      \"description\": \"Difference between the proposed percentage for the participant and their fair percentage\",\n      \"range\": {\n        \"min\": -100,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain_slope\": {\n      \"description\": \"Sensitivity to offers above the fair percentage (gain slope)\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_slope\": {\n      \"description\": \"Sensitivity to offers below the fair percentage (loss slope)\",\n      \"range\": {\n        \"min\": -20,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA two-parameter piecewise linear model predicting the utility of accepting an offer in the responder role. The model calculates the participant's fair share percentage based on token contributions, treating zero total tokens as a 50/50 fair split. Utility at this fair point is implicitly fixed at zero. Utility then changes linearly with separate slopes (gain_slope and loss_slope) for deviations above and below the fair share. This structure aims to improve parameter identifiability by reducing parameters and fixing a reference point compared to previous models.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self = (token_self / sum_tokens) * 100 if sum_tokens > 0 else 50.0\ndeviation_from_fair = split_perc_self - fair_perc_self\nU = beta_gain_slope * max(0.0, deviation_from_fair) + beta_loss_slope * min(0.0, deviation_from_fair)\nSummary: A two-parameter piecewise linear model predicting the utility of accepting an offer in the responder role. The model calculates the participant's fair share percentage based on token contributions, treating zero total tokens as a 50/50 fair split. Utility at this fair point is implicitly fixed at zero. Utility then changes linearly with separate slopes (gain_slope and loss_slope) for deviations above and below the fair share. This structure aims to improve parameter identifiability by reducing parameters and fixing a reference point compared to previous models.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_gain_slope=1.0, beta_loss_slope=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 50.0)\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self = (token_self / sum_tokens) * 100 if sum_tokens > 0 else 50.0\n        deviation_from_fair = split_perc_self - fair_perc_self\n        U = beta_gain_slope * max(0.0, deviation_from_fair) + beta_loss_slope * min(0.0, deviation_from_fair)\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7252747252747253,
  "group_accuracies": {
    "Control": 0.748062015503876,
    "Cocaine": 0.7048611111111112
  },
  "group_parameter_averages": {
    "Control": {
      "beta_gain_slope": 6.402052647725998,
      "beta_loss_slope": -2.766348414647872
    },
    "Cocaine": {
      "beta_gain_slope": 4.8905339560787,
      "beta_loss_slope": 0.16607870755023418
    }
  },
  "fitting_results": [
    {
      "beta_gain_slope": -11.264025757512904,
      "beta_loss_slope": 16.598974398700733,
      "success": true,
      "log_likelihood": -47.43799621740081,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": -16.06656153289272,
      "beta_loss_slope": 0.029774823382390535,
      "success": true,
      "log_likelihood": -67.43713563315929,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 3.7832813016228144,
      "beta_loss_slope": 16.046089043046187,
      "success": true,
      "log_likelihood": -346.7740583079379,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 3.915582182672935,
      "beta_loss_slope": 0.046838021224307316,
      "success": true,
      "log_likelihood": -18.988291965640727,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": -4.4797114295148255,
      "beta_loss_slope": 17.141650589855082,
      "success": true,
      "log_likelihood": -323.7471366615053,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 4.61953051321316,
      "beta_loss_slope": -15.864930413690166,
      "success": true,
      "log_likelihood": -300.722356447846,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 2.9001689543428926,
      "beta_loss_slope": -15.637462825360329,
      "success": true,
      "log_likelihood": -1.38629436132995,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": -5.859321206212096,
      "beta_loss_slope": -18.84187840338042,
      "success": true,
      "log_likelihood": -323.748207269362,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 12.130164146041633,
      "beta_loss_slope": -15.156718569715984,
      "success": true,
      "log_likelihood": -1.3862943573198903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 15.6205921609806,
      "beta_loss_slope": 0.06405185205561019,
      "success": true,
      "log_likelihood": -16.517467648532318,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 20.0,
      "beta_loss_slope": 10.941853514082846,
      "success": true,
      "log_likelihood": -277.6965026266308,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 15.55224028681694,
      "beta_loss_slope": 0.16651201349151548,
      "success": true,
      "log_likelihood": -30.865561105670327,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 17.811379181314464,
      "beta_loss_slope": 10.347503122297246,
      "success": true,
      "log_likelihood": -254.67063362335193,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 10.046837743580777,
      "beta_loss_slope": -14.012698294468851,
      "success": true,
      "log_likelihood": -1.3862943573198903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 5.589335916525343,
      "beta_loss_slope": -17.240697057574742,
      "success": true,
      "log_likelihood": -1.3862943573198903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": -10.331678189799295,
      "beta_loss_slope": -13.027313405103582,
      "success": true,
      "log_likelihood": -47.437996217400766,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 17.073679995070762,
      "beta_loss_slope": -13.338208936097367,
      "success": true,
      "log_likelihood": -1.3862943573198903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 7.916302075089048,
      "beta_loss_slope": -20.0,
      "success": true,
      "log_likelihood": -116.51554900752214,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 17.391172380266703,
      "beta_loss_slope": -12.698052377561751,
      "success": true,
      "log_likelihood": -93.48969807748166,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 17.345450859768846,
      "beta_loss_slope": -4.093206609854755,
      "success": true,
      "log_likelihood": -1.3862967340462171,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 0.9027814024066481,
      "beta_loss_slope": -6.194760345454924,
      "success": true,
      "log_likelihood": -369.8023397896726,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 19.90819659113224,
      "beta_loss_slope": -2.952463257305185,
      "success": true,
      "log_likelihood": -116.51565617087853,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 12.929861880743225,
      "beta_loss_slope": 18.510067899820854,
      "success": true,
      "log_likelihood": -208.61895272768413,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 2.6705418024498093,
      "beta_loss_slope": 0.021439612355136594,
      "success": true,
      "log_likelihood": -22.36380396831258,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 10.916773813405793,
      "beta_loss_slope": 0.03762400294973395,
      "success": true,
      "log_likelihood": -20.321148677309747,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 11.117094451732008,
      "beta_loss_slope": -10.50580952401356,
      "success": true,
      "log_likelihood": -346.7740583079269,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": -10.280963296918056,
      "beta_loss_slope": 0.020420839470427717,
      "success": true,
      "log_likelihood": -68.52015067688262,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 12.574514873655716,
      "beta_loss_slope": 0.11670637650525452,
      "success": true,
      "log_likelihood": -10.824363828420578,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 6.451296280197919,
      "beta_loss_slope": -6.246116885477488,
      "success": true,
      "log_likelihood": -93.48969807929663,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 11.546847850999349,
      "beta_loss_slope": -0.018748939672661388,
      "success": true,
      "log_likelihood": -22.631630844675232,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 12.051115088105846,
      "beta_loss_slope": -17.96329923694727,
      "success": true,
      "log_likelihood": -1.3862943573198903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 3.6735190822919535,
      "beta_loss_slope": 20.0,
      "success": true,
      "log_likelihood": -47.22996944432545,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 1.4331470507381951,
      "beta_loss_slope": 19.370044920180582,
      "success": true,
      "log_likelihood": -277.6965764101206,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 4.19891602453382,
      "beta_loss_slope": 13.00249107494276,
      "success": true,
      "log_likelihood": -231.64480365471908,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 5.983332250550393,
      "beta_loss_slope": -5.005655704019995,
      "success": true,
      "log_likelihood": -1.3862944707437832,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 1.9636513043195607,
      "beta_loss_slope": -3.893099645453132,
      "success": true,
      "log_likelihood": -300.72228099129165,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 9.01825717165925,
      "beta_loss_slope": -10.65985334199189,
      "success": true,
      "log_likelihood": -254.67065458776509,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 0.9120302280786797,
      "beta_loss_slope": 0.034603211802086455,
      "success": true,
      "log_likelihood": -20.744598739882935,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": -9.425397264631258,
      "beta_loss_slope": -13.285153246808274,
      "success": true,
      "log_likelihood": -323.74820737788656,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 13.01943214311359,
      "beta_loss_slope": -4.932682503591774,
      "success": true,
      "log_likelihood": -70.46384729210423,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": -7.500581573519543,
      "beta_loss_slope": 0.007147362727039231,
      "success": true,
      "log_likelihood": -69.47615746976359,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 20.0,
      "beta_loss_slope": 0.11203501479582936,
      "success": true,
      "log_likelihood": -11.205469539877672,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 17.52947711579769,
      "beta_loss_slope": -20.0,
      "success": true,
      "log_likelihood": -24.412145287360378,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_slope": -11.227644772695772,
      "beta_loss_slope": 0.015177623883915463,
      "success": true,
      "log_likelihood": -68.99411758355782,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 14.531294059625408,
      "beta_loss_slope": -3.765384442276682,
      "success": true,
      "log_likelihood": -323.7482144719216,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 16.548694988085117,
      "beta_loss_slope": -11.06884639853336,
      "success": true,
      "log_likelihood": -231.64480365772457,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 17.547007416332058,
      "beta_loss_slope": 12.955240817565283,
      "success": true,
      "log_likelihood": -346.774058304408,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 18.685549930668735,
      "beta_loss_slope": 14.542220304610368,
      "success": true,
      "log_likelihood": -231.6448036577157,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 9.42435365963113,
      "beta_loss_slope": 20.0,
      "success": true,
      "log_likelihood": -254.67065458776509,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 15.331469730385535,
      "beta_loss_slope": -8.186615620115397,
      "success": true,
      "log_likelihood": -392.8117763303715,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 10.65778371528938,
      "beta_loss_slope": -12.049033101783143,
      "success": true,
      "log_likelihood": -254.67065458776509,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": -11.93679760331166,
      "beta_loss_slope": 0.10578232399365721,
      "success": true,
      "log_likelihood": -34.77551726525569,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": -11.606918197832101,
      "beta_loss_slope": 0.016460713724010985,
      "success": true,
      "log_likelihood": -68.8886668584999,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 3.908268202498352,
      "beta_loss_slope": -18.366941956734024,
      "success": true,
      "log_likelihood": -346.7268406054063,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 4.013459399238592,
      "beta_loss_slope": 0.05249015704552328,
      "success": true,
      "log_likelihood": -18.161501016780512,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": -6.00304241844799,
      "beta_loss_slope": 0.09088669182510992,
      "success": true,
      "log_likelihood": -59.27033745438905,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 12.330936761896467,
      "beta_loss_slope": 13.272087057069982,
      "success": true,
      "log_likelihood": -139.54139993695077,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 19.93054147031352,
      "beta_loss_slope": -16.970708536697433,
      "success": true,
      "log_likelihood": -93.48969807748169,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 5.392597636673578,
      "beta_loss_slope": 0.15027410542334718,
      "success": true,
      "log_likelihood": -31.655578380770294,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 16.481380845356483,
      "beta_loss_slope": -0.032949059708217036,
      "success": true,
      "log_likelihood": -20.96746198495641,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 5.286258688744283,
      "beta_loss_slope": -13.022444124091637,
      "success": true,
      "log_likelihood": -323.74820737788644,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 11.271272074181311,
      "beta_loss_slope": 0.03173889243808494,
      "success": true,
      "log_likelihood": -21.129170799017377,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 0.0677246078883133,
      "beta_loss_slope": 7.9176672307605,
      "success": true,
      "log_likelihood": -25.636542826968043,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": -16.171207184366708,
      "beta_loss_slope": 13.294941731292958,
      "success": true,
      "log_likelihood": -346.7740583079269,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 4.767298004797716,
      "beta_loss_slope": 10.426518174203405,
      "success": true,
      "log_likelihood": -93.48969807748146,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 5.972297200128839,
      "beta_loss_slope": 0.019747757252449722,
      "success": true,
      "log_likelihood": -22.535394120049205,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": -7.227210930656973,
      "beta_loss_slope": -0.06896118352330255,
      "success": true,
      "log_likelihood": -61.90456837271473,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 5.39050035500097,
      "beta_loss_slope": -4.597656448826921,
      "success": true,
      "log_likelihood": -116.5155494495449,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 12.607460443384854,
      "beta_loss_slope": 0.015494729043387919,
      "success": true,
      "log_likelihood": -22.91685438083467,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 7.9098707365531595,
      "beta_loss_slope": -20.0,
      "success": true,
      "log_likelihood": -70.46384714744126,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 7.489290169735597,
      "beta_loss_slope": 8.061912863616946,
      "success": true,
      "log_likelihood": -1.3862943573241584,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 0.0674750143838296,
      "beta_loss_slope": 7.7721830646363586,
      "success": true,
      "log_likelihood": -71.68824659420171,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 8.05725957395753,
      "beta_loss_slope": 0.023872446532715155,
      "success": true,
      "log_likelihood": -22.099559731292054,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 1.321041156557585,
      "beta_loss_slope": -14.359904358393948,
      "success": true,
      "log_likelihood": -185.59325147716822,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 12.610111271647625,
      "beta_loss_slope": 0.012655089274621063,
      "success": true,
      "log_likelihood": -46.15375315214328,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 8.373027402156488,
      "beta_loss_slope": -3.7319045819725036,
      "success": true,
      "log_likelihood": -254.67035170607167,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 9.509609017982651,
      "beta_loss_slope": -14.16474507551393,
      "success": true,
      "log_likelihood": -47.437996217400766,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": -1.6554700719564055,
      "beta_loss_slope": 4.14147597066074,
      "success": true,
      "log_likelihood": -24.412163414165683,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 5.938777327839318,
      "beta_loss_slope": -4.181396503281249,
      "success": true,
      "log_likelihood": -323.7482024876852,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 3.0263917493210695,
      "beta_loss_slope": 17.961153813628826,
      "success": true,
      "log_likelihood": -44.53185201603817,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 4.338358675565081,
      "beta_loss_slope": 0.0065458812679216926,
      "success": true,
      "log_likelihood": -23.447277235515674,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 1.8392220408230806,
      "beta_loss_slope": -0.10387044055857902,
      "success": true,
      "log_likelihood": -11.924370172601092,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": -7.303885279054505,
      "beta_loss_slope": 20.0,
      "success": true,
      "log_likelihood": -70.4638471474413,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 4.835545251767563,
      "beta_loss_slope": 0.03134078156243343,
      "success": true,
      "log_likelihood": -21.1817366862178,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 11.918520345234175,
      "beta_loss_slope": -0.005048629026413023,
      "success": true,
      "log_likelihood": -23.495581785638368,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 5.3304896370959725,
      "beta_loss_slope": 17.02574696165256,
      "success": true,
      "log_likelihood": -24.41214528736036,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 3.9043652869308203,
      "beta_loss_slope": -10.305636188678541,
      "success": true,
      "log_likelihood": -254.67065458776997,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": -18.786860526059428,
      "beta_loss_slope": 0.10777560527029095,
      "success": true,
      "log_likelihood": -34.59756375096049,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 11.330588010202497,
      "beta_loss_slope": -16.665035236511493,
      "success": true,
      "log_likelihood": -47.43799621740077,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 7.22752747519538,
      "beta_loss_slope": 11.58458190620685,
      "success": true,
      "log_likelihood": -300.72235644784587,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_slope": 1.491047543089067,
      "beta_loss_slope": -0.017112845804231176,
      "success": true,
      "log_likelihood": -22.781065324219984,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_gain_slope": {
        "r": 0.46842421127327427,
        "p": 8.886030253555474e-07
      },
      "beta_loss_slope": {
        "r": 0.7880913183072209,
        "p": 2.26159693074269e-22
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 250.45103135924992,
  "bic_Control": 248.51659425032236,
  "bic_Cocaine": 252.18396460266422,
  "bic_results": {
    "average_bic": 250.45103135924992,
    "individual_bics": [
      102.04303031171384,
      142.0413091432308,
      700.715154492788,
      45.14362180819367,
      654.6613111999228,
      608.6117507726042,
      9.93962659957212,
      654.6634524156362,
      9.939626591552,
      40.20197317397685,
      562.5600431301738,
      68.89816008825288,
      516.5083051236161,
      9.939626591552,
      9.939626591552,
      102.04303031171375,
      9.939626591552,
      240.1981358919565,
      194.14643403187554,
      9.939631345004655,
      746.7717174562574,
      240.19835021866928,
      424.4049433322805,
      51.89464581353738,
      47.80933523153171,
      700.715154492766,
      144.20733923067746,
      28.81576553375338,
      194.14643403550548,
      52.43029956626268,
      9.939626591552,
      101.62697676556311,
      562.5601906971534,
      470.4566451863504,
      9.939626818399786,
      608.6115998594955,
      516.5083470524424,
      48.65623535667809,
      654.6634526326853,
      148.09473246112069,
      146.1193528164394,
      29.577976956667563,
      55.991328451632974,
      145.15527304402787,
      654.6634668207554,
      470.45664519236135,
      700.7151544857282,
      470.4566451923436,
      516.5083470524424,
      792.7905905376552,
      516.5083470524424,
      76.71807240742359,
      144.94437159391202,
      700.6207190877249,
      43.49003991047324,
      125.70771278569032,
      286.24983775081375,
      194.1464340318756,
      70.4781946384528,
      49.10196184682504,
      654.6634526326851,
      49.42537947494697,
      58.440123530848304,
      700.715154492766,
      194.14643403187515,
      52.23782611701063,
      130.9761746223417,
      240.19813677600203,
      53.00074663858156,
      148.09473217179473,
      9.939626591560536,
      150.54353106531565,
      51.366157339496326,
      378.35354083124867,
      99.47454418119878,
      516.5077412890556,
      102.04303031171375,
      55.99136470524358,
      654.6634428522826,
      96.23074190898856,
      54.06159234794357,
      31.015778222114406,
      148.09473217179482,
      49.53051124934782,
      54.158201448188954,
      55.99132845163294,
      516.5083470524522,
      76.3621653788332,
      102.04303031171376,
      608.611750772604,
      52.729168525352186
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        102.04303031171384,
        142.0413091432308,
        700.715154492788,
        45.14362180819367,
        654.6613111999228,
        608.6117507726042,
        9.93962659957212,
        654.6634524156362,
        9.939626591552,
        40.20197317397685,
        562.5600431301738,
        68.89816008825288,
        516.5083051236161,
        9.939626591552,
        9.939626591552,
        102.04303031171375,
        9.939626591552,
        240.1981358919565,
        194.14643403187554,
        9.939631345004655,
        746.7717174562574,
        240.19835021866928,
        424.4049433322805,
        51.89464581353738,
        47.80933523153171,
        700.715154492766,
        144.20733923067746,
        28.81576553375338,
        194.14643403550548,
        52.43029956626268,
        9.939626591552,
        101.62697676556311,
        562.5601906971534,
        470.4566451863504,
        9.939626818399786,
        608.6115998594955,
        516.5083470524424,
        48.65623535667809,
        654.6634526326853,
        148.09473246112069,
        146.1193528164394,
        29.577976956667563,
        55.991328451632974
      ],
      "Cocaine": [
        145.15527304402787,
        654.6634668207554,
        470.45664519236135,
        700.7151544857282,
        470.4566451923436,
        516.5083470524424,
        792.7905905376552,
        516.5083470524424,
        76.71807240742359,
        144.94437159391202,
        700.6207190877249,
        43.49003991047324,
        125.70771278569032,
        286.24983775081375,
        194.1464340318756,
        70.4781946384528,
        49.10196184682504,
        654.6634526326851,
        49.42537947494697,
        58.440123530848304,
        700.715154492766,
        194.14643403187515,
        52.23782611701063,
        130.9761746223417,
        240.19813677600203,
        53.00074663858156,
        148.09473217179473,
        9.939626591560536,
        150.54353106531565,
        51.366157339496326,
        378.35354083124867,
        99.47454418119878,
        516.5077412890556,
        102.04303031171375,
        55.99136470524358,
        654.6634428522826,
        96.23074190898856,
        54.06159234794357,
        31.015778222114406,
        148.09473217179482,
        49.53051124934782,
        54.158201448188954,
        55.99132845163294,
        516.5083470524522,
        76.3621653788332,
        102.04303031171376,
        608.611750772604,
        52.729168525352186
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_gain_slope: r = 0.468\n- beta_loss_slope: r = 0.788",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self = (token_self / sum_tokens) * 100 if sum_tokens > 0 else 50.0\ndeviation_from_fair = split_perc_self - fair_perc_self\nU = beta_gain_slope * max(0.0, deviation_from_fair) + beta_loss_slope * min(0.0, deviation_from_fair)\nSummary: A two-parameter piecewise linear model predicting the utility of accepting an offer in the responder role. The model calculates the participant's fair share percentage based on token contributions, treating zero total tokens as a 50/50 fair split. Utility at this fair point is implicitly fixed at zero. Utility then changes linearly with separate slopes (gain_slope and loss_slope) for deviations above and below the fair share. This structure aims to improve parameter identifiability by reducing parameters and fixing a reference point compared to previous models.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 250.45103135924992\nOverall Accuracy: 0.7253\nGroup Accuracies:\n- Control: 0.7481\n- Cocaine: 0.7049\n\nParameter Recovery:\n- beta_gain_slope: r = 0.468\n- beta_loss_slope: r = 0.788"
  ]
}