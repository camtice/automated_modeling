{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Instructions for Run 39 of 100:\n\nThe primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is non-negotiable for a usable model. Improved BIC and accuracy are important secondary goals.\n\nPrior attempts have consistently struggled with parameter identifiability, leading to poor recovery values well below the 0.7 threshold across various model structures (simple linear combinations, piecewise linear centered on deviation, and most recently, Run 38's multiplicative structure `U = kappa * (split_perc_self - lambda_param * loss_below_fair - mu)`). The poor recovery in Run 38 (kappa: -0.014, lambda_param: 0.242, mu: 0.546) strongly suggests that scaling an entire expression containing other parameterized terms creates significant identifiability issues. The parameters' influences are too coupled.\n\nFor this run, design a computational model for responder decisions (`trial_role == 1`) that predicts the utility of accepting an offer. Your model should utilize the proposed share percentage (`split_perc_self`) and a calculated fair percentage for the participant (`fair_perc_self`) based on token contributions as key inputs.\n\n*   **Parameter Identifiability is Paramount:** The central challenge is to design a mathematical structure (formula for `U`) using these inputs and **2 or 3 learnable parameters** such that these parameters have distinct and identifiable influences on utility across the range of possible offers. **Explicitly avoid structures where parameters multiply or scale expressions containing other learnable parameters or multiple variable terms** (like the `kappa * (...)` structure in Run 38). Instead, favor structures where parameters additively scale *individual* input terms or clearly defined derived variables. This additive separation tends to improve identifiability.\n*   **Promising Structural Direction:** Based on the analysis of previous failures, a promising structural direction is a model where utility is an additive combination of a baseline offset, a term related to the proposed percentage, and a term related to losses below the fair percentage, each scaled by a distinct learnable parameter. Consider a structure like:\n    `U = beta_intercept + beta_split_perc * split_perc_self - beta_loss_penalty * loss_below_fair`\n    Where `loss_below_fair` is calculated as `max(0.0, fair_perc_self - split_perc_self)`.\n    This structure uses 3 parameters (`beta_intercept`, `beta_split_perc`, `beta_loss_penalty`) that each contribute additively to the utility calculation, reducing the coupling seen in the previous multiplicative model. `beta_intercept` shifts the baseline, `beta_split_perc` scales the effect of the proposed offer, and `beta_loss_penalty` scales the specific penalty incurred only when the offer is below fair. This distinct influence is expected to aid parameter recovery.\n*   **Key Inputs & Calculated Variables:**\n    *   Use `split_perc_self` directly as a data variable.\n    *   Calculate `sum_tokens` as `token_self + token_opp`.\n    *   Calculate `fair_perc_self` as `(token_self / sum_tokens) * 100.0` if `sum_tokens > 0`, and `50.0` if `sum_tokens == 0`.\n    *   Calculate `loss_below_fair` as `max(0.0, fair_perc_self - split_perc_self)`.\n    *   Ensure these calculated variables are included in your <MODEL> tag calculations and <VARIABLES> descriptions.\n*   **Model Formula:** Define the utility (`U`) based on `split_perc_self`, `fair_perc_self` (or derived variables like `loss_below_fair`), and your 2 or 3 learnable parameters. Structure the formula to maximize the distinct, additive influence of each parameter.\n*   **Learnable Parameters:** Your model must have exactly 2 or 3 learnable parameters. Choose descriptive names suitable for Python code. Define clear, generous, finite numerical bounds (e.g., [-50, 50] or similar, depending on how parameters scale inputs). For the suggested structure, consider bounds like [-50, 50] for `beta_intercept`, [-10, 10] for `beta_split_perc`, and [0, 20] for `beta_loss_penalty`.\n*   **Calculated Variables:** Ensure `sum_tokens`, `fair_perc_self`, `loss_below_fair` (and any other variables you calculate as intermediate steps) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`, etc.).\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Include the calculation steps for necessary derived variables before the final formula for `U`. Use clear mathematical notation.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing your model. Explain the core idea of how utility is determined by the proposed share and fairness/loss, and how your chosen additive mathematical structure and parameterization aim to improve parameter identifiability compared to previously attempted structures.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that out-of-the-box thinking *within* the constraints of parameter identifiability and the 2/3 parameter limit is encouraged.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Instructions for Run 39 of 100:\n\nThe primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is non-negotiable for a usable model. Improved BIC and accuracy are important secondary goals.\n\nPrior attempts have consistently struggled with parameter identifiability, leading to poor recovery values well below the 0.7 threshold across various model structures (simple linear combinations, piecewise linear centered on deviation, and most recently, Run 38's multiplicative structure `U = kappa * (split_perc_self - lambda_param * loss_below_fair - mu)`). The poor recovery in Run 38 (kappa: -0.014, lambda_param: 0.242, mu: 0.546) strongly suggests that scaling an entire expression containing other parameterized terms creates significant identifiability issues. The parameters' influences are too coupled.\n\nFor this run, design a computational model for responder decisions (`trial_role == 1`) that predicts the utility of accepting an offer. Your model should utilize the proposed share percentage (`split_perc_self`) and a calculated fair percentage for the participant (`fair_perc_self`) based on token contributions as key inputs.\n\n*   **Parameter Identifiability is Paramount:** The central challenge is to design a mathematical structure (formula for `U`) using these inputs and **2 or 3 learnable parameters** such that these parameters have distinct and identifiable influences on utility across the range of possible offers. **Explicitly avoid structures where parameters multiply or scale expressions containing other learnable parameters or multiple variable terms** (like the `kappa * (...)` structure in Run 38). Instead, favor structures where parameters additively scale *individual* input terms or clearly defined derived variables. This additive separation tends to improve identifiability.\n*   **Promising Structural Direction:** Based on the analysis of previous failures, a promising structural direction is a model where utility is an additive combination of a baseline offset, a term related to the proposed percentage, and a term related to losses below the fair percentage, each scaled by a distinct learnable parameter. Consider a structure like:\n    `U = beta_intercept + beta_split_perc * split_perc_self - beta_loss_penalty * loss_below_fair`\n    Where `loss_below_fair` is calculated as `max(0.0, fair_perc_self - split_perc_self)`.\n    This structure uses 3 parameters (`beta_intercept`, `beta_split_perc`, `beta_loss_penalty`) that each contribute additively to the utility calculation, reducing the coupling seen in the previous multiplicative model. `beta_intercept` shifts the baseline, `beta_split_perc` scales the effect of the proposed offer, and `beta_loss_penalty` scales the specific penalty incurred only when the offer is below fair. This distinct influence is expected to aid parameter recovery.\n*   **Key Inputs & Calculated Variables:**\n    *   Use `split_perc_self` directly as a data variable.\n    *   Calculate `sum_tokens` as `token_self + token_opp`.\n    *   Calculate `fair_perc_self` as `(token_self / sum_tokens) * 100.0` if `sum_tokens > 0`, and `50.0` if `sum_tokens == 0`.\n    *   Calculate `loss_below_fair` as `max(0.0, fair_perc_self - split_perc_self)`.\n    *   Ensure these calculated variables are included in your <MODEL> tag calculations and <VARIABLES> descriptions.\n*   **Model Formula:** Define the utility (`U`) based on `split_perc_self`, `fair_perc_self` (or derived variables like `loss_below_fair`), and your 2 or 3 learnable parameters. Structure the formula to maximize the distinct, additive influence of each parameter.\n*   **Learnable Parameters:** Your model must have exactly 2 or 3 learnable parameters. Choose descriptive names suitable for Python code. Define clear, generous, finite numerical bounds (e.g., [-50, 50] or similar, depending on how parameters scale inputs). For the suggested structure, consider bounds like [-50, 50] for `beta_intercept`, [-10, 10] for `beta_split_perc`, and [0, 20] for `beta_loss_penalty`.\n*   **Calculated Variables:** Ensure `sum_tokens`, `fair_perc_self`, `loss_below_fair` (and any other variables you calculate as intermediate steps) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`, etc.).\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Include the calculation steps for necessary derived variables before the final formula for `U`. Use clear mathematical notation.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing your model. Explain the core idea of how utility is determined by the proposed share and fairness/loss, and how your chosen additive mathematical structure and parameterization aim to improve parameter identifiability compared to previously attempted structures.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that out-of-the-box thinking *within* the constraints of parameter identifiability and the 2/3 parameter limit is encouraged.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\nloss_below_fair = MAX(0.0, fair_perc_self - split_perc_self)\nU = beta_intercept + beta_split_perc * split_perc_self - beta_loss_penalty * loss_below_fair\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"trial_role\": {\n      \"description\": \"Role of the participant (1 = responder, 2 = proposer)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 2\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 200\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The participant's fair share percentage based on token contributions\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The percentage points the proposed share is below the fair share (is 0 if the proposed share is equal to or above the fair share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_intercept\": {\n      \"description\": \"Baseline utility parameter\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_split_perc\": {\n      \"description\": \"Parameter scaling the linear effect of the proposed percentage on utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_penalty\": {\n      \"description\": \"Parameter scaling the penalty incurred when the proposed percentage is below the fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts the utility of accepting an offer in the ultimatum game for the responder role. Utility is calculated as an additive combination of a baseline utility, a term linear in the proposed percentage share for the participant, and a penalty term applied only when the proposed share is below the participant's fair share based on token contributions. The model utilizes three learnable parameters: a baseline intercept (beta_intercept), a weight for the proposed percentage (beta_split_perc), and a weight for the loss below fairness (beta_loss_penalty). This additive structure is designed to enhance parameter identifiability compared to multiplicative or highly coupled model forms previously attempted, by ensuring each parameter has a distinct influence on the overall utility function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_intercept', 'beta_split_perc', 'beta_loss_penalty']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\nloss_below_fair = MAX(0.0, fair_perc_self - split_perc_self)\nU = beta_intercept + beta_split_perc * split_perc_self - beta_loss_penalty * loss_below_fair\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"trial_role\": {\n      \"description\": \"Role of the participant (1 = responder, 2 = proposer)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 200,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The participant's fair share percentage based on token contributions\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The percentage points the proposed share is below the fair share (is 0 if the proposed share is equal to or above the fair share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_intercept\": {\n      \"description\": \"Baseline utility parameter\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_split_perc\": {\n      \"description\": \"Parameter scaling the linear effect of the proposed percentage on utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_penalty\": {\n      \"description\": \"Parameter scaling the penalty incurred when the proposed percentage is below the fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_intercept=0, beta_split_perc=0, beta_loss_penalty=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0) # Use splitperc_self from the dataset\n\n        sum_tokens = token_self + token_opp\n        if sum_tokens > 0:\n            fair_perc_self = (token_self / sum_tokens) * 100.0\n        else:\n            fair_perc_self = 50.0\n        \n        loss_below_fair = max(0.0, fair_perc_self - split_perc_self)\n        U = beta_intercept + beta_split_perc * split_perc_self - beta_loss_penalty * loss_below_fair\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1746100008.9172108
    }
  ],
  "learnable_parameters": {
    "beta_intercept": {
      "description": "Baseline utility parameter",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_split_perc": {
      "description": "Parameter scaling the linear effect of the proposed percentage on utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_loss_penalty": {
      "description": "Parameter scaling the penalty incurred when the proposed percentage is below the fair share",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\nloss_below_fair = MAX(0.0, fair_perc_self - split_perc_self)\nU = beta_intercept + beta_split_perc * split_perc_self - beta_loss_penalty * loss_below_fair",
  "variable_descriptions": {
    "trial_role": {
      "description": "Role of the participant (1 = responder, 2 = proposer)",
      "range": {
        "min": 1,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant (in %)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by both participant and opponent",
      "range": {
        "min": 0,
        "max": 200,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self": {
      "description": "The participant's fair share percentage based on token contributions",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "loss_below_fair": {
      "description": "The percentage points the proposed share is below the fair share (is 0 if the proposed share is equal to or above the fair share)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "U": {
      "description": "Utility of accepting the proposed offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_intercept": {
      "description": "Baseline utility parameter",
      "range": {
        "min": -50,
        "max": 50,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_split_perc": {
      "description": "Parameter scaling the linear effect of the proposed percentage on utility",
      "range": {
        "min": -10,
        "max": 10,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_loss_penalty": {
      "description": "Parameter scaling the penalty incurred when the proposed percentage is below the fair share",
      "range": {
        "min": 0,
        "max": 20,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_summary": "This model predicts the utility of accepting an offer in the ultimatum game for the responder role. Utility is calculated as an additive combination of a baseline utility, a term linear in the proposed percentage share for the participant, and a penalty term applied only when the proposed share is below the participant's fair share based on token contributions. The model utilizes three learnable parameters: a baseline intercept (beta_intercept), a weight for the proposed percentage (beta_split_perc), and a weight for the loss below fairness (beta_loss_penalty). This additive structure is designed to enhance parameter identifiability compared to multiplicative or highly coupled model forms previously attempted, by ensuring each parameter has a distinct influence on the overall utility function.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\nloss_below_fair = MAX(0.0, fair_perc_self - split_perc_self)\nU = beta_intercept + beta_split_perc * split_perc_self - beta_loss_penalty * loss_below_fair\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"trial_role\": {\n      \"description\": \"Role of the participant (1 = responder, 2 = proposer)\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 2\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by both participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 200\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"The participant's fair share percentage based on token contributions\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"The percentage points the proposed share is below the fair share (is 0 if the proposed share is equal to or above the fair share)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_intercept\": {\n      \"description\": \"Baseline utility parameter\",\n      \"range\": {\n        \"min\": -50,\n        \"max\": 50\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_split_perc\": {\n      \"description\": \"Parameter scaling the linear effect of the proposed percentage on utility\",\n      \"range\": {\n        \"min\": -10,\n        \"max\": 10\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_penalty\": {\n      \"description\": \"Parameter scaling the penalty incurred when the proposed percentage is below the fair share\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 20\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts the utility of accepting an offer in the ultimatum game for the responder role. Utility is calculated as an additive combination of a baseline utility, a term linear in the proposed percentage share for the participant, and a penalty term applied only when the proposed share is below the participant's fair share based on token contributions. The model utilizes three learnable parameters: a baseline intercept (beta_intercept), a weight for the proposed percentage (beta_split_perc), and a weight for the loss below fairness (beta_loss_penalty). This additive structure is designed to enhance parameter identifiability compared to multiplicative or highly coupled model forms previously attempted, by ensuring each parameter has a distinct influence on the overall utility function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\nloss_below_fair = MAX(0.0, fair_perc_self - split_perc_self)\nU = beta_intercept + beta_split_perc * split_perc_self - beta_loss_penalty * loss_below_fair\nSummary: This model predicts the utility of accepting an offer in the ultimatum game for the responder role. Utility is calculated as an additive combination of a baseline utility, a term linear in the proposed percentage share for the participant, and a penalty term applied only when the proposed share is below the participant's fair share based on token contributions. The model utilizes three learnable parameters: a baseline intercept (beta_intercept), a weight for the proposed percentage (beta_split_perc), and a weight for the loss below fairness (beta_loss_penalty). This additive structure is designed to enhance parameter identifiability compared to multiplicative or highly coupled model forms previously attempted, by ensuring each parameter has a distinct influence on the overall utility function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_intercept=0, beta_split_perc=0, beta_loss_penalty=0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0) # Use splitperc_self from the dataset\n\n        sum_tokens = token_self + token_opp\n        if sum_tokens > 0:\n            fair_perc_self = (token_self / sum_tokens) * 100.0\n        else:\n            fair_perc_self = 50.0\n        \n        loss_below_fair = max(0.0, fair_perc_self - split_perc_self)\n        U = beta_intercept + beta_split_perc * split_perc_self - beta_loss_penalty * loss_below_fair\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.7936507936507936,
  "group_accuracies": {
    "Control": 0.8152454780361758,
    "Cocaine": 0.7743055555555556
  },
  "group_parameter_averages": {
    "Control": {
      "beta_intercept": 2.05330948346243,
      "beta_split_perc": 4.066263157803986,
      "beta_loss_penalty": 4.979215790176108
    },
    "Cocaine": {
      "beta_intercept": -3.4755052513670046,
      "beta_split_perc": 2.4899710794904104,
      "beta_loss_penalty": 4.5660967473479825
    }
  },
  "fitting_results": [
    {
      "beta_intercept": -43.12926352286419,
      "beta_split_perc": 0.9603122754906586,
      "beta_loss_penalty": 3.68618571519838,
      "success": true,
      "log_likelihood": -23.058700549405696,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": -1.0674507355350054,
      "beta_split_perc": 0.09518748615975096,
      "beta_loss_penalty": 0.08945938881094684,
      "success": true,
      "log_likelihood": -15.822213480158643,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 6.429789146459417,
      "beta_split_perc": 0.026913775488517228,
      "beta_loss_penalty": 0.3411589412146042,
      "success": true,
      "log_likelihood": -7.750663119215293,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 7.745144815244231,
      "beta_split_perc": -8.513720723970206,
      "beta_loss_penalty": 10.873831441826727,
      "success": true,
      "log_likelihood": -345.38776394700693,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 12.788194709489396,
      "beta_split_perc": -0.059661397230122724,
      "beta_loss_penalty": 0.6069340493520088,
      "success": true,
      "log_likelihood": -4.780937430748474,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": -21.695715943600664,
      "beta_split_perc": 9.242287040189126,
      "beta_loss_penalty": 14.9715791024356,
      "success": true,
      "log_likelihood": -184.2068076823388,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": -43.18625490583709,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": -1.0439636003325166,
      "beta_split_perc": 0.15863632220399332,
      "beta_loss_penalty": 0.10816621463283041,
      "success": true,
      "log_likelihood": -11.409355764564783,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 17.886624294685898,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 0.7769360188533727,
      "beta_split_perc": 0.07557997055183062,
      "beta_loss_penalty": 0.2153809821010693,
      "success": true,
      "log_likelihood": -10.32346865857534,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 46.91056385014084,
      "beta_split_perc": 9.947209324723893,
      "beta_loss_penalty": 19.106198613260208,
      "success": true,
      "log_likelihood": -0.0002607910444276351,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 46.19597193663475,
      "beta_split_perc": -9.176051620964216,
      "beta_loss_penalty": 11.941411900412096,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 36.108024961861744,
      "beta_split_perc": -2.480861179216731,
      "beta_loss_penalty": 1.845574391300815,
      "success": true,
      "log_likelihood": -345.38776393437803,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": -21.47882825645878,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 0.879704822611167,
      "success": true,
      "log_likelihood": 3.5999991874623136e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": -30.92816021661508,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 12.261618886394146,
      "beta_split_perc": -4.966152592711055,
      "beta_loss_penalty": 1.988230979882013,
      "success": true,
      "log_likelihood": -828.9306334778568,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 17.199811988534666,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 12.965141315169458,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 12.780351793213939,
      "success": true,
      "log_likelihood": -207.23265836373832,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 43.1184814233273,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -92.10340371656177,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 10.64791660690313,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 1.8337800353536489,
      "beta_split_perc": 0.05611341201429067,
      "beta_loss_penalty": 0.1526175947257006,
      "success": true,
      "log_likelihood": -13.22659155391785,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": -1.246764255552089,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -115.12925464660225,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": -13.17711431646941,
      "beta_split_perc": 0.3847241592011098,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -9.672269777630294,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 3.443770685668939,
      "beta_split_perc": 0.07271283051591612,
      "beta_loss_penalty": 0.26089918529431777,
      "success": true,
      "log_likelihood": -24.056217025973865,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 47.8460039670674,
      "beta_split_perc": 6.362011710332391,
      "beta_loss_penalty": 11.935308392035452,
      "success": true,
      "log_likelihood": -93.48969832320729,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": -50.0,
      "beta_split_perc": 6.911753463256651,
      "beta_loss_penalty": 4.911719747358708,
      "success": true,
      "log_likelihood": -93.4897436850204,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": -14.545921200174728,
      "beta_split_perc": 0.5557005764980061,
      "beta_loss_penalty": 0.05478972091152875,
      "success": true,
      "log_likelihood": -6.346703528673046,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": -5.24594976412693,
      "beta_split_perc": 2.8698132934582956,
      "beta_loss_penalty": 8.157927270101567,
      "success": true,
      "log_likelihood": -23.320658766764183,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 28.96752681930759,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": -21.604308523301285,
      "beta_split_perc": -0.413728641128428,
      "beta_loss_penalty": 7.726369951635599,
      "success": true,
      "log_likelihood": -644.7238254904232,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 46.30415926269932,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": -39.248967472270934,
      "beta_split_perc": 0.8747589368502274,
      "beta_loss_penalty": 16.039157735241304,
      "success": true,
      "log_likelihood": -23.076275669987123,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": -28.956714115534055,
      "beta_split_perc": -0.5777279296810445,
      "beta_loss_penalty": 17.2151210815454,
      "success": true,
      "log_likelihood": -345.3877639470069,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 17.82579889248731,
      "beta_split_perc": 2.1678537241840727,
      "beta_loss_penalty": 18.740136052067733,
      "success": true,
      "log_likelihood": -162.56725087038245,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 15.136625216346774,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": 3.600000297685338e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": -23.46755413771061,
      "beta_split_perc": -1.2462098621157587,
      "beta_loss_penalty": 10.693425135709525,
      "success": true,
      "log_likelihood": -529.5945713873307,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": -7.037890934056936,
      "beta_split_perc": 6.375976445721368,
      "beta_loss_penalty": 5.02505880518222,
      "success": true,
      "log_likelihood": -70.438959150149,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 1.704108353112701,
      "beta_split_perc": 0.04175170429397195,
      "beta_loss_penalty": 0.14766852330448169,
      "success": true,
      "log_likelihood": -14.174277471115165,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": -17.59101729253971,
      "beta_split_perc": 6.879839063773053,
      "beta_loss_penalty": 5.151223676317266,
      "success": true,
      "log_likelihood": -185.52271383056174,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 2.2436589170869183,
      "beta_split_perc": 9.96448802088095,
      "beta_loss_penalty": 0.794568427487452,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 29.87508496644776,
      "beta_split_perc": 8.558097113934691,
      "beta_loss_penalty": 18.089705472224438,
      "success": true,
      "log_likelihood": -161.18098679116338,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": 46.69448026290255,
      "beta_split_perc": -0.29829091713381845,
      "beta_loss_penalty": 8.89545215485011,
      "success": true,
      "log_likelihood": -46.05284911033152,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": -39.96507035031475,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 0.6809617153274246,
      "success": true,
      "log_likelihood": -23.025850926445674,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_intercept": -9.5473437042055,
      "beta_split_perc": 0.33747687434360546,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -11.09233879375367,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -3.0850225677639878,
      "beta_split_perc": 0.1908752791026201,
      "beta_loss_penalty": 0.08201260527171593,
      "success": true,
      "log_likelihood": -12.19633415004964,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": 18.61412545439502,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -230.2585092968047,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -8.524113388782311,
      "beta_split_perc": 0.30678208766928106,
      "beta_loss_penalty": 0.019960115070751974,
      "success": true,
      "log_likelihood": -11.419646929358045,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -2.986929120735323,
      "beta_split_perc": 0.10632345023953403,
      "beta_loss_penalty": 0.042941704492398106,
      "success": true,
      "log_likelihood": -17.811827209656983,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -49.11761166076285,
      "beta_split_perc": 6.858310983292859,
      "beta_loss_penalty": 5.486884079920869,
      "success": true,
      "log_likelihood": -207.2326594323344,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -2.3454700103018538,
      "beta_split_perc": 0.08249947706728306,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -22.20542091062374,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -39.542737442287205,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -253.28436022684522,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": 12.368165043880609,
      "beta_split_perc": 0.5347183524031447,
      "beta_loss_penalty": 19.441213061295507,
      "success": true,
      "log_likelihood": -115.12921023817431,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -7.016072601022151,
      "beta_split_perc": 0.2411484556278739,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -14.300608554984004,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -2.6520705497916284,
      "beta_split_perc": 0.1022971620596596,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -20.74891648005938,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": 9.533501385100656,
      "beta_split_perc": -0.17844099756606444,
      "beta_loss_penalty": 0.25511241452392674,
      "success": true,
      "log_likelihood": -12.35884700109226,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -49.65260089307214,
      "beta_split_perc": 0.1010796993492118,
      "beta_loss_penalty": 10.997165643041134,
      "success": true,
      "log_likelihood": -276.31021115571906,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": 2.9805374749957174,
      "beta_split_perc": 3.020199533675653,
      "beta_loss_penalty": 12.378852261351527,
      "success": true,
      "log_likelihood": -116.51554900754483,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -14.485385939950818,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -92.1034037165618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": 5.17350126488315,
      "beta_split_perc": -1.1076514140984912,
      "beta_loss_penalty": 12.20380462756967,
      "success": true,
      "log_likelihood": -92.10340371655867,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -1.67372282369621,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -161.18095650668326,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -2.2730006959173235,
      "beta_split_perc": 0.10936702299780164,
      "beta_loss_penalty": 0.019472886576715108,
      "success": true,
      "log_likelihood": -18.954225786629927,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": 34.59800376317654,
      "beta_split_perc": 7.2983057662721915,
      "beta_loss_penalty": 3.755893763257243,
      "success": true,
      "log_likelihood": -345.3982291408115,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": 3.505771183506269,
      "beta_split_perc": -9.92835035577567,
      "beta_loss_penalty": 3.135418517949531,
      "success": true,
      "log_likelihood": -69.07755278652142,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -5.289445304691229,
      "beta_split_perc": 0.16917834413334273,
      "beta_loss_penalty": 0.006944502239861725,
      "success": true,
      "log_likelihood": -17.07228743988639,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -20.529540172576795,
      "beta_split_perc": 0.5923769086086114,
      "beta_loss_penalty": 0.1789691279647109,
      "success": true,
      "log_likelihood": -4.780800330337793,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": 19.344587429320953,
      "beta_split_perc": -3.370541303360892,
      "beta_loss_penalty": 3.1015431960551654,
      "success": true,
      "log_likelihood": -460.5170185972094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -44.5191787821832,
      "beta_split_perc": 4.521232819983624,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -47.96124436106696,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -31.5216598965077,
      "beta_split_perc": 9.891516833087493,
      "beta_loss_penalty": 3.9153316417618385,
      "success": true,
      "log_likelihood": -69.07761442491511,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -7.495304687105259,
      "beta_split_perc": 0.27451118460796947,
      "beta_loss_penalty": 0.01191198940067678,
      "success": true,
      "log_likelihood": -12.603333629323686,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": 33.23877720176962,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -69.07755278652137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": 1.6417154809111345,
      "beta_split_perc": 0.769636521724468,
      "beta_loss_penalty": 14.80218164005745,
      "success": true,
      "log_likelihood": 3.5589509115765307e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -38.16381980931387,
      "beta_split_perc": 0.850578428861045,
      "beta_loss_penalty": 5.301123053804069,
      "success": true,
      "log_likelihood": -69.13439267362048,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -2.7348967890414384,
      "beta_split_perc": 0.14310149684150833,
      "beta_loss_penalty": 0.06781021204609303,
      "success": true,
      "log_likelihood": -15.067606813867592,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -31.985722458536504,
      "beta_split_perc": -1.2989092611211,
      "beta_loss_penalty": 9.101085410490182,
      "success": true,
      "log_likelihood": -644.7238260375331,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": 32.94381298293514,
      "beta_split_perc": 3.2977133445557643,
      "beta_loss_penalty": 6.011195764633892,
      "success": true,
      "log_likelihood": -211.50714467418612,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": 36.032834497252146,
      "beta_split_perc": -0.39368104463542264,
      "beta_loss_penalty": 0.8217446457164489,
      "success": true,
      "log_likelihood": -78.0566705262426,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -24.1377261938305,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -46.051701856480875,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": 24.18135061445066,
      "beta_split_perc": -10.0,
      "beta_loss_penalty": 20.0,
      "success": true,
      "log_likelihood": -46.051701856480925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -0.43853612408651255,
      "beta_split_perc": 0.039643208785863235,
      "beta_loss_penalty": 0.012932433527187284,
      "success": true,
      "log_likelihood": -22.857610492698186,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": 45.37038134211902,
      "beta_split_perc": -6.425663476951087,
      "beta_loss_penalty": 5.308140309164124,
      "success": true,
      "log_likelihood": -69.07755278652135,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -14.880140028630109,
      "beta_split_perc": -0.8283022411191361,
      "beta_loss_penalty": 3.698633383170855,
      "success": true,
      "log_likelihood": -437.4911676671404,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -34.372413618437655,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -69.07755278652131,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -35.12068974619107,
      "beta_split_perc": -10.0,
      "beta_loss_penalty": 20.0,
      "success": true,
      "log_likelihood": -92.10340371656179,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": 30.123950674516593,
      "beta_split_perc": 6.266105883692751,
      "beta_loss_penalty": 8.422122164794933,
      "success": true,
      "log_likelihood": -92.10340598519171,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": 43.0465969941428,
      "beta_split_perc": 2.610941750626782,
      "beta_loss_penalty": 3.1782357814516216,
      "success": true,
      "log_likelihood": -231.714854954734,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -46.97902525496914,
      "beta_split_perc": 1.1744540652679796,
      "beta_loss_penalty": 17.025434254103732,
      "success": true,
      "log_likelihood": -24.41216135205422,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -13.776619258597037,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 0.0,
      "success": true,
      "log_likelihood": -253.28436022684514,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": 8.376160084526424,
      "beta_split_perc": 3.1597769752896485,
      "beta_loss_penalty": 16.328210691282028,
      "success": true,
      "log_likelihood": -92.10340371655552,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": -16.88851536009724,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 1.8495951524589895,
      "success": true,
      "log_likelihood": -23.026044925073396,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": 3.601676436302394,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 11.729064653533705,
      "success": true,
      "log_likelihood": -161.18095644486647,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_intercept": 30.235613509283468,
      "beta_split_perc": 10.0,
      "beta_loss_penalty": 0.4817021847246167,
      "success": true,
      "log_likelihood": -253.28436022684528,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_intercept": {
        "r": -0.06712639225663083,
        "p": 0.5069633197985169
      },
      "beta_split_perc": {
        "r": 0.6835300919685589,
        "p": 4.642499947897422e-15
      },
      "beta_loss_penalty": {
        "r": 0.28265469443615715,
        "p": 0.004380769892182938
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 244.31621385681038,
  "bic_Control": 239.31592672509504,
  "bic_Cocaine": 248.79563774563871,
  "bic_results": {
    "average_bic": 244.31621385681038,
    "individual_bics": [
      56.867957914179726,
      42.39498377568562,
      26.251883053798917,
      701.5260847093822,
      20.31243167686528,
      379.1641721800459,
      10.75055680816833,
      33.5692683444979,
      10.75055680816833,
      31.39749413251901,
      10.751078397457185,
      194.9573642484919,
      701.5260846841244,
      10.750556808168332,
      10.75055680816833,
      1668.6118237710818,
      10.75055680816833,
      425.215873542845,
      194.95736424849187,
      10.75055680816833,
      37.203739923204026,
      241.00906610857282,
      30.09509637062892,
      58.86299086731606,
      197.7299534617829,
      197.73004418540913,
      23.443963872714424,
      57.39187434889669,
      194.9573642484919,
      1300.1982077962148,
      10.75055680816833,
      56.90310815534258,
      701.5260847093821,
      335.88505855613323,
      10.75055680816833,
      1069.9396995900297,
      151.62847511566633,
      39.09911175759866,
      381.7959844764918,
      148.90566238841103,
      333.1125303976951,
      102.85625503603137,
      56.80225866825968,
      32.93523440287567,
      35.143225115467615,
      471.26757540897773,
      33.58985067408442,
      46.37421123468229,
      425.21587568003713,
      55.161398636615814,
      517.3192772690588,
      241.00897729171695,
      39.35177392533634,
      52.248389775487084,
      35.46825081755285,
      563.3709791268064,
      243.781654830458,
      194.95736424849193,
      194.95736424848567,
      333.11246982873485,
      48.65900838862818,
      701.5470150969913,
      148.90566238841117,
      44.89513169514112,
      20.312157476043915,
      931.7845940097872,
      106.67304553750225,
      148.90578566519855,
      35.9572240740157,
      148.90566238841106,
      10.75055680825043,
      149.0193421626093,
      40.88577044310351,
      1300.1982088904344,
      433.7648461637406,
      166.86389786785352,
      102.85396052833008,
      102.85396052833018,
      56.4657778007647,
      148.90566238841103,
      885.7328921496492,
      148.90566238841095,
      194.9573642484919,
      194.95736878575175,
      474.1802667248363,
      59.57487951947677,
      517.3192772690586,
      194.95736424847937,
      56.80264666551513,
      333.11246970510126,
      517.319277269059
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        56.867957914179726,
        42.39498377568562,
        26.251883053798917,
        701.5260847093822,
        20.31243167686528,
        379.1641721800459,
        10.75055680816833,
        33.5692683444979,
        10.75055680816833,
        31.39749413251901,
        10.751078397457185,
        194.9573642484919,
        701.5260846841244,
        10.750556808168332,
        10.75055680816833,
        1668.6118237710818,
        10.75055680816833,
        425.215873542845,
        194.95736424849187,
        10.75055680816833,
        37.203739923204026,
        241.00906610857282,
        30.09509637062892,
        58.86299086731606,
        197.7299534617829,
        197.73004418540913,
        23.443963872714424,
        57.39187434889669,
        194.9573642484919,
        1300.1982077962148,
        10.75055680816833,
        56.90310815534258,
        701.5260847093821,
        335.88505855613323,
        10.75055680816833,
        1069.9396995900297,
        151.62847511566633,
        39.09911175759866,
        381.7959844764918,
        148.90566238841103,
        333.1125303976951,
        102.85625503603137,
        56.80225866825968
      ],
      "Cocaine": [
        32.93523440287567,
        35.143225115467615,
        471.26757540897773,
        33.58985067408442,
        46.37421123468229,
        425.21587568003713,
        55.161398636615814,
        517.3192772690588,
        241.00897729171695,
        39.35177392533634,
        52.248389775487084,
        35.46825081755285,
        563.3709791268064,
        243.781654830458,
        194.95736424849193,
        194.95736424848567,
        333.11246982873485,
        48.65900838862818,
        701.5470150969913,
        148.90566238841117,
        44.89513169514112,
        20.312157476043915,
        931.7845940097872,
        106.67304553750225,
        148.90578566519855,
        35.9572240740157,
        148.90566238841106,
        10.75055680825043,
        149.0193421626093,
        40.88577044310351,
        1300.1982088904344,
        433.7648461637406,
        166.86389786785352,
        102.85396052833008,
        102.85396052833018,
        56.4657778007647,
        148.90566238841103,
        885.7328921496492,
        148.90566238841095,
        194.9573642484919,
        194.95736878575175,
        474.1802667248363,
        59.57487951947677,
        517.3192772690586,
        194.95736424847937,
        56.80264666551513,
        333.11246970510126,
        517.319277269059
      ]
    },
    "num_parameters": 3,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_intercept: r = -0.067\n- beta_split_perc: r = 0.684\n- beta_loss_penalty: r = 0.283",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\nloss_below_fair = MAX(0.0, fair_perc_self - split_perc_self)\nU = beta_intercept + beta_split_perc * split_perc_self - beta_loss_penalty * loss_below_fair\nSummary: This model predicts the utility of accepting an offer in the ultimatum game for the responder role. Utility is calculated as an additive combination of a baseline utility, a term linear in the proposed percentage share for the participant, and a penalty term applied only when the proposed share is below the participant's fair share based on token contributions. The model utilizes three learnable parameters: a baseline intercept (beta_intercept), a weight for the proposed percentage (beta_split_perc), and a weight for the loss below fairness (beta_loss_penalty). This additive structure is designed to enhance parameter identifiability compared to multiplicative or highly coupled model forms previously attempted, by ensuring each parameter has a distinct influence on the overall utility function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 244.31621385681038\nOverall Accuracy: 0.7937\nGroup Accuracies:\n- Control: 0.8152\n- Cocaine: 0.7743\n\nParameter Recovery:\n- beta_intercept: r = -0.067\n- beta_split_perc: r = 0.684\n- beta_loss_penalty: r = 0.283"
  ]
}