{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Instructions for Run 41 of 100:\n\nThe primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is non-negotiable for a usable model. Improved BIC and accuracy are important secondary goals.\n\nThe previous run (Run 40) utilized the structure `U = beta_linear_relative * deviation_from_fair - beta_extra_loss * loss_below_fair`. This model successfully achieved good parameter recovery for `beta_linear_relative` (r = 0.815) but failed significantly for `beta_extra_loss` (r = 0.218). Overall model performance (BIC: 340.56, Accuracy: 0.630) was also not the best seen so far. The core issue remains achieving reliable recovery for *all* parameters simultaneously.\n\nThe poor recovery of `beta_extra_loss` in Run 40's structure suggests that its influence was not sufficiently distinct from `beta_linear_relative`, particularly in the region where offers were below the fair share. In that structure, utility below fair was `(beta_linear_relative + beta_extra_loss) * deviation_from_fair`, where the two parameters were linearly combined, making them difficult to estimate independently.\n\nFor this run, design a computational model for responder decisions (`trial_role == 1`) that predicts the utility of accepting an offer. Your model should continue to utilize the proposed share percentage (`split_perc_self`) and a calculated fair percentage for the participant (`fair_perc_self`) based on token contributions as key inputs.\n\n*   **Parameter Identifiability is Paramount:** The central challenge remains designing a mathematical structure (formula for `U`) using these inputs and exactly **2 learnable parameters** such that these parameters have distinct and identifiable influences on utility, ensuring robust parameter recovery for *both*.\n*   **Promising Structural Direction (Piecewise based on Deviation from Fair):** To address the identifiability issue observed in Run 40, specifically the coupling of parameters below fair, consider a piecewise linear model centered around the fair share. This approach explicitly separates sensitivity to deviations *above* the fair share from sensitivity to deviations *below* the fair share.\n    Consider calculating the following intermediate variables:\n    *   `sum_tokens = token_self + token_opp`\n    *   `fair_perc_self = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)`\n    *   `gain_above_fair = MAX(0.0, split_perc_self - fair_perc_self)` (The magnitude of the gain if the offer is above fair, otherwise 0)\n    *   `loss_below_fair = MAX(0.0, fair_perc_self - fair_perc_self)` (The magnitude of the loss if the offer is below fair, otherwise 0)\n    Then, structure the utility (`U`) based on these terms and your two learnable parameters, aiming for a structure like:\n    `U = beta_gain * gain_above_fair - beta_loss * loss_below_fair`\n    This structure models utility as increasing with gains above fair (scaled by `beta_gain`) and decreasing with losses below fair (scaled by `beta_loss`). Since `gain_above_fair` is zero when there's a loss, and `loss_below_fair` is zero when there's a gain, the influences of `beta_gain` and `beta_loss` are structurally separated based on whether the offer is above or below fair. This separation should significantly improve parameter identifiability compared to the linearly coupled structure of Run 40.\n*   **Key Inputs & Calculated Variables:**\n    *   Use `split_perc_self`, `token_self`, `token_opp` as data variables.\n    *   Calculate `sum_tokens`, `fair_perc_self`, `gain_above_fair`, and `loss_below_fair` as described above.\n    *   Ensure these calculated variables are included in your <MODEL> tag calculations and <VARIABLES> descriptions.\n*   **Model Formula:** Define the utility (`U`) based on `gain_above_fair`, `loss_below_fair`, and your 2 learnable parameters. Include the calculation steps for necessary derived variables before the final formula for `U`. Use clear mathematical notation.\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**. Choose descriptive names suitable for Python code (e.g., `beta_gain`, `beta_loss`). Define clear, generous, finite numerical bounds. Given their interpretation as sensitivity to gains and losses, these parameters are typically expected to be positive. Suggest bounds like [0, 10] or [0, 20] for both.\n*   **Calculated Variables:** Ensure all calculated variables used in the model (`sum_tokens`, `fair_perc_self`, `gain_above_fair`, `loss_below_fair`, etc.) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`, etc.).\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Include the calculation steps for necessary derived variables before the final formula for `U`. Use clear mathematical notation.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing your model. Explain the core idea of how utility is determined by deviations from the fair share, and specifically how the piecewise structure separates the influence of gains above fair from losses below fair to improve parameter identifiability compared to previous structures.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability *within* the constraints of **exactly 2 learnable parameters** is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. This piecewise approach is a strong candidate for achieving that separation.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Instructions for Run 41 of 100:\n\nThe primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is non-negotiable for a usable model. Improved BIC and accuracy are important secondary goals.\n\nThe previous run (Run 40) utilized the structure `U = beta_linear_relative * deviation_from_fair - beta_extra_loss * loss_below_fair`. This model successfully achieved good parameter recovery for `beta_linear_relative` (r = 0.815) but failed significantly for `beta_extra_loss` (r = 0.218). Overall model performance (BIC: 340.56, Accuracy: 0.630) was also not the best seen so far. The core issue remains achieving reliable recovery for *all* parameters simultaneously.\n\nThe poor recovery of `beta_extra_loss` in Run 40's structure suggests that its influence was not sufficiently distinct from `beta_linear_relative`, particularly in the region where offers were below the fair share. In that structure, utility below fair was `(beta_linear_relative + beta_extra_loss) * deviation_from_fair`, where the two parameters were linearly combined, making them difficult to estimate independently.\n\nFor this run, design a computational model for responder decisions (`trial_role == 1`) that predicts the utility of accepting an offer. Your model should continue to utilize the proposed share percentage (`split_perc_self`) and a calculated fair percentage for the participant (`fair_perc_self`) based on token contributions as key inputs.\n\n*   **Parameter Identifiability is Paramount:** The central challenge remains designing a mathematical structure (formula for `U`) using these inputs and exactly **2 learnable parameters** such that these parameters have distinct and identifiable influences on utility, ensuring robust parameter recovery for *both*.\n*   **Promising Structural Direction (Piecewise based on Deviation from Fair):** To address the identifiability issue observed in Run 40, specifically the coupling of parameters below fair, consider a piecewise linear model centered around the fair share. This approach explicitly separates sensitivity to deviations *above* the fair share from sensitivity to deviations *below* the fair share.\n    Consider calculating the following intermediate variables:\n    *   `sum_tokens = token_self + token_opp`\n    *   `fair_perc_self = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)`\n    *   `gain_above_fair = MAX(0.0, split_perc_self - fair_perc_self)` (The magnitude of the gain if the offer is above fair, otherwise 0)\n    *   `loss_below_fair = MAX(0.0, fair_perc_self - fair_perc_self)` (The magnitude of the loss if the offer is below fair, otherwise 0)\n    Then, structure the utility (`U`) based on these terms and your two learnable parameters, aiming for a structure like:\n    `U = beta_gain * gain_above_fair - beta_loss * loss_below_fair`\n    This structure models utility as increasing with gains above fair (scaled by `beta_gain`) and decreasing with losses below fair (scaled by `beta_loss`). Since `gain_above_fair` is zero when there's a loss, and `loss_below_fair` is zero when there's a gain, the influences of `beta_gain` and `beta_loss` are structurally separated based on whether the offer is above or below fair. This separation should significantly improve parameter identifiability compared to the linearly coupled structure of Run 40.\n*   **Key Inputs & Calculated Variables:**\n    *   Use `split_perc_self`, `token_self`, `token_opp` as data variables.\n    *   Calculate `sum_tokens`, `fair_perc_self`, `gain_above_fair`, and `loss_below_fair` as described above.\n    *   Ensure these calculated variables are included in your <MODEL> tag calculations and <VARIABLES> descriptions.\n*   **Model Formula:** Define the utility (`U`) based on `gain_above_fair`, `loss_below_fair`, and your 2 learnable parameters. Include the calculation steps for necessary derived variables before the final formula for `U`. Use clear mathematical notation.\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**. Choose descriptive names suitable for Python code (e.g., `beta_gain`, `beta_loss`). Define clear, generous, finite numerical bounds. Given their interpretation as sensitivity to gains and losses, these parameters are typically expected to be positive. Suggest bounds like [0, 10] or [0, 20] for both.\n*   **Calculated Variables:** Ensure all calculated variables used in the model (`sum_tokens`, `fair_perc_self`, `gain_above_fair`, `loss_below_fair`, etc.) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`, etc.).\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Include the calculation steps for necessary derived variables before the final formula for `U`. Use clear mathematical notation.\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing your model. Explain the core idea of how utility is determined by deviations from the fair share, and specifically how the piecewise structure separates the influence of gains above fair from losses below fair to improve parameter identifiability compared to previous structures.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability *within* the constraints of **exactly 2 learnable parameters** is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. This piecewise approach is a strong candidate for achieving that separation.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, Expert Computational Modeler persona activated! Designing a model that balances accuracy with robust parameter recovery is key in this field. The proposed piecewise structure around the fair share is an excellent direction to address the parameter identifiability issues seen in previous attempts. By separating the influence of gains above fair from losses below fair, the sensitivities (`beta_gain` and `beta_loss`) should become more distinguishable. Let's build this model for the responder's decision.\n\n<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\ngain_above_fair = MAX(0.0, split_perc_self - fair_perc_self)\nloss_below_fair = MAX(0.0, fair_perc_self - split_perc_self)\nU = beta_gain * gain_above_fair - beta_loss * loss_below_fair\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"Participant's fair share percentage based on token contribution. If sum_tokens is 0, fair is 50%.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"gain_above_fair\": {\n      \"description\": \"Magnitude of the proposed share percentage above the fair share percentage for the participant. Zero if below fair.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"Magnitude of the proposed share percentage below the fair share percentage for the participant. Zero if above fair.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain\": {\n      \"description\": \"Sensitivity parameter for gains above the fair share percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 20.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss\": {\n      \"description\": \"Sensitivity parameter for losses below the fair share percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 20.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer for the participant.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis computational model predicts the utility of accepting a proposed offer for the participant when acting as a responder. The utility is based on the deviation of the proposed share percentage for the participant (`split_perc_self`) from a calculated fair share percentage (`fair_perc_self`), which is derived from the token contributions (`token_self`, `token_opp`). The model uses a piecewise linear structure: utility increases with gains above the fair share, scaled by a learnable parameter `beta_gain`, and decreases with losses below the fair share, scaled by a second learnable parameter `beta_loss`. This separation of sensitivity to positive and negative deviations from fairness aims to improve the identifiability and recovery of the two learnable parameters.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_gain', 'beta_loss']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\ngain_above_fair = MAX(0.0, split_perc_self - fair_perc_self)\nloss_below_fair = MAX(0.0, fair_perc_self - split_perc_self)\nU = beta_gain * gain_above_fair - beta_loss * loss_below_fair\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"Participant's fair share percentage based on token contribution. If sum_tokens is 0, fair is 50%.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"gain_above_fair\": {\n      \"description\": \"Magnitude of the proposed share percentage above the fair share percentage for the participant. Zero if below fair.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"Magnitude of the proposed share percentage below the fair share percentage for the participant. Zero if above fair.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain\": {\n      \"description\": \"Sensitivity parameter for gains above the fair share percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 20.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss\": {\n      \"description\": \"Sensitivity parameter for losses below the fair share percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 20.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer for the participant.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_gain=1.0, beta_loss=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0.0)\n\n        sum_tokens = token_self + token_opp\n        if sum_tokens > 0:\n            fair_perc_self = (token_self / sum_tokens) * 100.0\n        else:\n            fair_perc_self = 50.0\n\n        gain_above_fair = max(0.0, split_perc_self - fair_perc_self)\n        loss_below_fair = max(0.0, fair_perc_self - split_perc_self)\n\n        U = beta_gain * gain_above_fair - beta_loss * loss_below_fair\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 16, \"token_self\": 16, \"combined_earning\": 32, \"split_opp\": 16.0, \"split_self\": 16.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 16.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 16.0}, {\"ID\": 1, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 16, \"token_self\": 0, \"combined_earning\": 16, \"split_opp\": 15.2, \"split_self\": 0.8, \"splitperc_opp\": 95, \"splitperc_self\": 5, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 5.0, \"proposed_amount\": 0.8}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 0, \"token_self\": 16, \"combined_earning\": 16, \"split_opp\": 0.8, \"split_self\": 15.2, \"splitperc_opp\": 5, \"splitperc_self\": 95, \"accept\": 1.0, \"accepted_amount\": 15.2, \"accepted_perc\": 95.0, \"proposed_perc\": 95.0, \"proposed_amount\": 15.2}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n```",
      "timestamp": 1746100161.016736
    }
  ],
  "learnable_parameters": {
    "beta_gain": {
      "description": "Sensitivity parameter for gains above the fair share percentage.",
      "range": {
        "min": 0.0,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_loss": {
      "description": "Sensitivity parameter for losses below the fair share percentage.",
      "range": {
        "min": 0.0,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\ngain_above_fair = MAX(0.0, split_perc_self - fair_perc_self)\nloss_below_fair = MAX(0.0, fair_perc_self - split_perc_self)\nU = beta_gain * gain_above_fair - beta_loss * loss_below_fair",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed share for the participant (in %)",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by participant and opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self": {
      "description": "Participant's fair share percentage based on token contribution. If sum_tokens is 0, fair is 50%.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "gain_above_fair": {
      "description": "Magnitude of the proposed share percentage above the fair share percentage for the participant. Zero if below fair.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "loss_below_fair": {
      "description": "Magnitude of the proposed share percentage below the fair share percentage for the participant. Zero if above fair.",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_gain": {
      "description": "Sensitivity parameter for gains above the fair share percentage.",
      "range": {
        "min": 0.0,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_loss": {
      "description": "Sensitivity parameter for losses below the fair share percentage.",
      "range": {
        "min": 0.0,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Utility of accepting the proposed offer for the participant.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "This computational model predicts the utility of accepting a proposed offer for the participant when acting as a responder. The utility is based on the deviation of the proposed share percentage for the participant (`split_perc_self`) from a calculated fair share percentage (`fair_perc_self`), which is derived from the token contributions (`token_self`, `token_opp`). The model uses a piecewise linear structure: utility increases with gains above the fair share, scaled by a learnable parameter `beta_gain`, and decreases with losses below the fair share, scaled by a second learnable parameter `beta_loss`. This separation of sensitivity to positive and negative deviations from fairness aims to improve the identifiability and recovery of the two learnable parameters.",
  "target_variable": "accept",
  "full_reasoning": "Okay, Expert Computational Modeler persona activated! Designing a model that balances accuracy with robust parameter recovery is key in this field. The proposed piecewise structure around the fair share is an excellent direction to address the parameter identifiability issues seen in previous attempts. By separating the influence of gains above fair from losses below fair, the sensitivities (`beta_gain` and `beta_loss`) should become more distinguishable. Let's build this model for the responder's decision.\n\n<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\ngain_above_fair = MAX(0.0, split_perc_self - fair_perc_self)\nloss_below_fair = MAX(0.0, fair_perc_self - split_perc_self)\nU = beta_gain * gain_above_fair - beta_loss * loss_below_fair\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed share for the participant (in %)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"Participant's fair share percentage based on token contribution. If sum_tokens is 0, fair is 50%.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"gain_above_fair\": {\n      \"description\": \"Magnitude of the proposed share percentage above the fair share percentage for the participant. Zero if below fair.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"loss_below_fair\": {\n      \"description\": \"Magnitude of the proposed share percentage below the fair share percentage for the participant. Zero if above fair.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain\": {\n      \"description\": \"Sensitivity parameter for gains above the fair share percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 20.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss\": {\n      \"description\": \"Sensitivity parameter for losses below the fair share percentage.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 20.0\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer for the participant.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis computational model predicts the utility of accepting a proposed offer for the participant when acting as a responder. The utility is based on the deviation of the proposed share percentage for the participant (`split_perc_self`) from a calculated fair share percentage (`fair_perc_self`), which is derived from the token contributions (`token_self`, `token_opp`). The model uses a piecewise linear structure: utility increases with gains above the fair share, scaled by a learnable parameter `beta_gain`, and decreases with losses below the fair share, scaled by a second learnable parameter `beta_loss`. This separation of sensitivity to positive and negative deviations from fairness aims to improve the identifiability and recovery of the two learnable parameters.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\ngain_above_fair = MAX(0.0, split_perc_self - fair_perc_self)\nloss_below_fair = MAX(0.0, fair_perc_self - split_perc_self)\nU = beta_gain * gain_above_fair - beta_loss * loss_below_fair\nSummary: This computational model predicts the utility of accepting a proposed offer for the participant when acting as a responder. The utility is based on the deviation of the proposed share percentage for the participant (`split_perc_self`) from a calculated fair share percentage (`fair_perc_self`), which is derived from the token contributions (`token_self`, `token_opp`). The model uses a piecewise linear structure: utility increases with gains above the fair share, scaled by a learnable parameter `beta_gain`, and decreases with losses below the fair share, scaled by a second learnable parameter `beta_loss`. This separation of sensitivity to positive and negative deviations from fairness aims to improve the identifiability and recovery of the two learnable parameters.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_gain=1.0, beta_loss=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0.0)\n\n        sum_tokens = token_self + token_opp\n        if sum_tokens > 0:\n            fair_perc_self = (token_self / sum_tokens) * 100.0\n        else:\n            fair_perc_self = 50.0\n\n        gain_above_fair = max(0.0, split_perc_self - fair_perc_self)\n        loss_below_fair = max(0.0, fair_perc_self - split_perc_self)\n\n        U = beta_gain * gain_above_fair - beta_loss * loss_below_fair\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.5961538461538461,
  "group_accuracies": {
    "Control": 0.5671834625322998,
    "Cocaine": 0.6221064814814815
  },
  "group_parameter_averages": {
    "Control": {
      "beta_gain": 8.579344934414292,
      "beta_loss": 2.339417278723587
    },
    "Cocaine": {
      "beta_gain": 8.213299476288745,
      "beta_loss": 4.194807750669086
    }
  },
  "fitting_results": [
    {
      "beta_gain": 5.315999433882559,
      "beta_loss": 0.18904692672648069,
      "success": true,
      "log_likelihood": -29.98013468072222,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 6.600921172714025,
      "beta_loss": 0.02977503920257809,
      "success": true,
      "log_likelihood": -21.385433772902143,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 18.486904591566212,
      "beta_loss": 10.216213789946268,
      "success": true,
      "log_likelihood": -346.7740258334445,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 7.082704624416447,
      "beta_loss": 0.046837453136977736,
      "success": true,
      "log_likelihood": -18.988291965126212,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 0.8065985257888928,
      "beta_loss": 0.05756161029657721,
      "success": true,
      "log_likelihood": -17.433027908056225,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 2.70766318593757,
      "beta_loss": 10.952173142184606,
      "success": true,
      "log_likelihood": -438.87745924914714,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 18.51263197150905,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.567004132038125,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 1.4278424757768444,
      "beta_loss": 0.005646381994971236,
      "success": true,
      "log_likelihood": -23.47783034322783,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 9.406925845269354,
      "beta_loss": 14.822525752888712,
      "success": true,
      "log_likelihood": -738.2135241186078,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.08333333333333333,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 6.077686209388253,
      "beta_loss": 0.06404961883723702,
      "success": true,
      "log_likelihood": -16.517467643223913,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 6.572532712345092,
      "beta_loss": 0.05689979966059231,
      "success": true,
      "log_likelihood": -17.52380370737255,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 8.987178282184372,
      "beta_loss": 0.16651648598275381,
      "success": true,
      "log_likelihood": -30.86556110879344,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 13.851246656791016,
      "beta_loss": 0.05624336453252936,
      "success": true,
      "log_likelihood": -17.61808834713038,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 17.904351086341016,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.56700413203812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 4.465894153159036,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.56700413203824,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 13.32203533702489,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.56700413203812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 7.491113140740353,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.567004132038125,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 4.782401595965813,
      "beta_loss": 11.36454600084091,
      "success": true,
      "log_likelihood": -623.0842687618274,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.19444444444444445,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 9.094739653239401,
      "beta_loss": 8.962146383625075,
      "success": true,
      "log_likelihood": -646.1079983075718,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.2222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 2.554268017375876,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.567004172276146,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 15.508819718148207,
      "beta_loss": 0.025668560530635636,
      "success": true,
      "log_likelihood": -21.893200651544383,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 1.614436148979307,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.567025302193198,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 4.504238242425078,
      "beta_loss": 15.01805100613012,
      "success": true,
      "log_likelihood": -208.61895272768422,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 15.996107462577562,
      "beta_loss": 0.021436857116391664,
      "success": true,
      "log_likelihood": -22.363803970551835,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 19.172623684342764,
      "beta_loss": 0.03762401984752683,
      "success": true,
      "log_likelihood": -20.321148677311005,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 6.050353663741355,
      "beta_loss": 0.020420332182355266,
      "success": true,
      "log_likelihood": -22.468448816181535,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 11.652706909844389,
      "beta_loss": 0.0204201340169014,
      "success": true,
      "log_likelihood": -22.468448816275703,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 5.851324133020772,
      "beta_loss": 0.11670994073109343,
      "success": true,
      "log_likelihood": -10.824363835416907,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 5.365491531720665,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.567004132038125,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 13.405788249137478,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.56700413203812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 6.187965707889709,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.56700413203812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 0.06771446927709794,
      "beta_loss": 8.636739893278882,
      "success": true,
      "log_likelihood": -25.63654282929422,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 6.639976626814721,
      "beta_loss": 0.0274989354220328,
      "success": true,
      "log_likelihood": -21.671734807314177,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 3.4973149835774553,
      "beta_loss": 8.828541009194366,
      "success": true,
      "log_likelihood": -231.64149197808064,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 8.331178985312526,
      "beta_loss": 4.194604085787257e-16,
      "success": true,
      "log_likelihood": -23.567004132038296,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 7.68880657105486,
      "beta_loss": 0.0032613946414954357,
      "success": true,
      "log_likelihood": -23.537124913513576,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 5.057548412489603,
      "beta_loss": 0.0029642026626013045,
      "success": true,
      "log_likelihood": -23.54231306429854,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 17.915466842674682,
      "beta_loss": 0.03460378211452144,
      "success": true,
      "log_likelihood": -20.7423133864875,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 19.122083450013555,
      "beta_loss": 0.00029614725121211846,
      "success": true,
      "log_likelihood": -23.566757339141834,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 8.947266722696057,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.567004132038125,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 2.8363049878011126,
      "beta_loss": 0.007146907804146562,
      "success": true,
      "log_likelihood": -23.42445561638785,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 8.21961188622626,
      "beta_loss": 10.803378112333693,
      "success": true,
      "log_likelihood": -93.48969349038573,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 9.827064118633302,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.56700413203812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain": 13.026571653648652,
      "beta_loss": 16.152829278901162,
      "success": true,
      "log_likelihood": -369.79990923796726,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 12.741222749413305,
      "beta_loss": 0.012967356462653146,
      "success": true,
      "log_likelihood": -23.106550303717796,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 13.532062931151529,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.56700413203812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 10.399302435680308,
      "beta_loss": 0.021098426864950507,
      "success": true,
      "log_likelihood": -22.399252324165992,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 7.764549946138251,
      "beta_loss": 0.04082641771523307,
      "success": true,
      "log_likelihood": -19.863713045800477,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 13.953897174068931,
      "beta_loss": 0.057566058246839656,
      "success": true,
      "log_likelihood": -17.4284169024705,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 10.794283333411041,
      "beta_loss": 0.00504861762097352,
      "success": true,
      "log_likelihood": -46.52143271567903,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 5.283745334668888,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.56700413203812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 0.0677240351850477,
      "beta_loss": 16.487997537797494,
      "success": true,
      "log_likelihood": -71.68824468700431,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 9.115249195307378,
      "beta_loss": 19.63253608862332,
      "success": true,
      "log_likelihood": -369.7999092379674,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 6.8243705444175395,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -46.592855062078556,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 9.426387164723202,
      "beta_loss": 0.05249024960147547,
      "success": true,
      "log_likelihood": -18.161501016763648,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 1.1472334145493996,
      "beta_loss": 0.09088107075690675,
      "success": true,
      "log_likelihood": -13.219112398372443,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 18.323446932638955,
      "beta_loss": 0.09231712266294417,
      "success": true,
      "log_likelihood": -13.065976983960297,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 1.695944535948574,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.56701642722097,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 3.3598454713422954,
      "beta_loss": 0.15027412124270392,
      "success": true,
      "log_likelihood": -30.600654563198912,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 7.476539148315067,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.567004132038125,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 14.137872299969585,
      "beta_loss": 0.002667415710086776,
      "success": true,
      "log_likelihood": -23.547006199467667,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 3.3278001558305514,
      "beta_loss": 11.057102292359453,
      "success": true,
      "log_likelihood": -323.74820540916795,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 0.06772847172829188,
      "beta_loss": 16.315789369413096,
      "success": true,
      "log_likelihood": -25.636542827745664,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 4.992685970019746,
      "beta_loss": 9.211412711116054,
      "success": true,
      "log_likelihood": -300.72235644774656,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 5.266377841573268,
      "beta_loss": 11.690201957329233,
      "success": true,
      "log_likelihood": -93.48969807748168,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 9.782375166508853,
      "beta_loss": 0.019747768153191396,
      "success": true,
      "log_likelihood": -22.535394120049354,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 11.483585320431661,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.56700413203812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 5.929112055920129,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.56700413203812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 16.090698411565725,
      "beta_loss": 0.01549656480626688,
      "success": true,
      "log_likelihood": -22.916854371952525,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 19.344896535448086,
      "beta_loss": 8.944574895296563,
      "success": true,
      "log_likelihood": -669.1337213030704,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.16666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 5.416321935585908,
      "beta_loss": 19.465403519539187,
      "success": true,
      "log_likelihood": -1.3862943573198905,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 0.06778234409030456,
      "beta_loss": 14.77546821581721,
      "success": true,
      "log_likelihood": -71.68824479495382,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 8.160174594813485,
      "beta_loss": 10.166421089384816,
      "success": true,
      "log_likelihood": -346.7740391391703,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 12.921059442531902,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.567004132038125,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 0.0,
      "beta_loss": 0.012655054973862316,
      "success": true,
      "log_likelihood": -24.514196583022326,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 8.921101578217227,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.56700413203812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 8.43878952285426,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.567004132038125,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 8.604382304052965,
      "beta_loss": 10.541933834685134,
      "success": true,
      "log_likelihood": -70.46384714744121,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 9.848369672933767,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.56700413203812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 4.083068377771792,
      "beta_loss": 9.397745472506823,
      "success": true,
      "log_likelihood": -47.42303191449642,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 1.6489101616151054,
      "beta_loss": 0.006545868388589924,
      "success": true,
      "log_likelihood": -23.447294058866163,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 2.931913553976837,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.56700413528332,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 10.216999679912773,
      "beta_loss": 0.1377480306308584,
      "success": true,
      "log_likelihood": -55.400264576363476,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 4.868784652332902,
      "beta_loss": 0.03134079805916091,
      "success": true,
      "log_likelihood": -21.181736686217445,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 5.006735685273487,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.567004132038125,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 17.151460249890704,
      "beta_loss": 17.932697566058174,
      "success": true,
      "log_likelihood": -24.41214528736036,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 10.740552985758109,
      "beta_loss": 8.691435599781974,
      "success": true,
      "log_likelihood": -484.9239360666124,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 0.0,
      "beta_loss": 0.107776543289883,
      "success": true,
      "log_likelihood": -12.958007181942117,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 19.295378977585706,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.56700413203812,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 11.02380496163424,
      "beta_loss": 0.029775118319846423,
      "success": true,
      "log_likelihood": -21.385433772950694,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain": 9.537275951423998,
      "beta_loss": 0.0,
      "success": true,
      "log_likelihood": -23.567004132038125,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_gain": {
        "r": -0.08255615810604339,
        "p": 0.41416996258583755
      },
      "beta_loss": {
        "r": 0.011756888233128161,
        "p": 0.9075774510263159
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 187.15171116358076,
  "bic_Control": 198.30326046267558,
  "bic_Cocaine": 177.16178158314167,
  "bic_results": {
    "average_bic": 187.15171116358076,
    "individual_bics": [
      67.12730723835666,
      49.937905422716504,
      700.7150895438012,
      45.14362180716464,
      42.03309369302467,
      884.9219563752065,
      54.30104614098847,
      54.12269856336788,
      1483.5940861141278,
      40.201973163360044,
      42.21464529165732,
      68.8981600944991,
      42.40321457117298,
      54.30104614098846,
      54.301046140988696,
      54.30104614098846,
      54.30104614098847,
      1253.335575400567,
      1299.383034492056,
      54.30104622146451,
      50.953439180000984,
      54.30108848129861,
      424.40494333228065,
      51.89464581801589,
      47.80933523153423,
      52.10393550927529,
      52.103935509463625,
      28.815765547746032,
      54.30104614098847,
      54.30104614098846,
      54.30104614098846,
      58.44012353550066,
      50.51050749154057,
      470.4500218330735,
      54.30104614098881,
      54.24128770393937,
      54.2516640055093,
      48.651664649887216,
      54.300552555195885,
      54.30104614098847,
      54.01594910968792,
      194.14642485768368,
      54.30104614098846,
      746.7668563528467,
      53.38013848434781,
      54.30104614098846,
      51.9655425252442,
      46.89446396851317,
      42.023871681853215,
      100.20990330827028,
      54.30104614098846,
      150.54352725092085,
      746.7668563528471,
      100.35274800106933,
      43.49003991043951,
      33.60526267365711,
      33.29899184483281,
      54.30107073135416,
      68.36834700331005,
      54.30104614098847,
      54.26105027584755,
      654.6634486952481,
      58.44012353240355,
      608.6117507724053,
      194.14643403187557,
      52.237826117010925,
      54.30104614098846,
      54.30104614098846,
      53.00074662081727,
      1345.434480483053,
      9.939626591552,
      150.54352746681985,
      700.7151161552529,
      54.30104614098847,
      56.19543104295687,
      54.30104614098846,
      54.30104614098847,
      148.09473217179465,
      54.30104614098846,
      102.01310170590506,
      54.061625994644544,
      54.30104614747886,
      117.96756702963917,
      49.53051124934711,
      54.30104614098847,
      55.99132845163294,
      977.014910010137,
      33.083052240796455,
      54.30104614098846,
      49.93790542281361,
      54.30104614098847
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        67.12730723835666,
        49.937905422716504,
        700.7150895438012,
        45.14362180716464,
        42.03309369302467,
        884.9219563752065,
        54.30104614098847,
        54.12269856336788,
        1483.5940861141278,
        40.201973163360044,
        42.21464529165732,
        68.8981600944991,
        42.40321457117298,
        54.30104614098846,
        54.301046140988696,
        54.30104614098846,
        54.30104614098847,
        1253.335575400567,
        1299.383034492056,
        54.30104622146451,
        50.953439180000984,
        54.30108848129861,
        424.40494333228065,
        51.89464581801589,
        47.80933523153423,
        52.10393550927529,
        52.103935509463625,
        28.815765547746032,
        54.30104614098847,
        54.30104614098846,
        54.30104614098846,
        58.44012353550066,
        50.51050749154057,
        470.4500218330735,
        54.30104614098881,
        54.24128770393937,
        54.2516640055093,
        48.651664649887216,
        54.300552555195885,
        54.30104614098847,
        54.01594910968792,
        194.14642485768368,
        54.30104614098846
      ],
      "Cocaine": [
        746.7668563528467,
        53.38013848434781,
        54.30104614098846,
        51.9655425252442,
        46.89446396851317,
        42.023871681853215,
        100.20990330827028,
        54.30104614098846,
        150.54352725092085,
        746.7668563528471,
        100.35274800106933,
        43.49003991043951,
        33.60526267365711,
        33.29899184483281,
        54.30107073135416,
        68.36834700331005,
        54.30104614098847,
        54.26105027584755,
        654.6634486952481,
        58.44012353240355,
        608.6117507724053,
        194.14643403187557,
        52.237826117010925,
        54.30104614098846,
        54.30104614098846,
        53.00074662081727,
        1345.434480483053,
        9.939626591552,
        150.54352746681985,
        700.7151161552529,
        54.30104614098847,
        56.19543104295687,
        54.30104614098846,
        54.30104614098847,
        148.09473217179465,
        54.30104614098846,
        102.01310170590506,
        54.061625994644544,
        54.30104614747886,
        117.96756702963917,
        49.53051124934711,
        54.30104614098847,
        55.99132845163294,
        977.014910010137,
        33.083052240796455,
        54.30104614098846,
        49.93790542281361,
        54.30104614098847
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_gain: r = -0.083\n- beta_loss: r = 0.012",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\ngain_above_fair = MAX(0.0, split_perc_self - fair_perc_self)\nloss_below_fair = MAX(0.0, fair_perc_self - split_perc_self)\nU = beta_gain * gain_above_fair - beta_loss * loss_below_fair\nSummary: This computational model predicts the utility of accepting a proposed offer for the participant when acting as a responder. The utility is based on the deviation of the proposed share percentage for the participant (`split_perc_self`) from a calculated fair share percentage (`fair_perc_self`), which is derived from the token contributions (`token_self`, `token_opp`). The model uses a piecewise linear structure: utility increases with gains above the fair share, scaled by a learnable parameter `beta_gain`, and decreases with losses below the fair share, scaled by a second learnable parameter `beta_loss`. This separation of sensitivity to positive and negative deviations from fairness aims to improve the identifiability and recovery of the two learnable parameters.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 187.15171116358076\nOverall Accuracy: 0.5962\nGroup Accuracies:\n- Control: 0.5672\n- Cocaine: 0.6221\n\nParameter Recovery:\n- beta_gain: r = -0.083\n- beta_loss: r = 0.012"
  ]
}