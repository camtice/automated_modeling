{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Instructions for Run 42 of 100:\n\nThe unwavering primary objective is achieving parameter recovery >= 0.7 for *all* learnable parameters. This remains the critical benchmark for model usability. While improved BIC and accuracy are valuable secondary goals, they must not come at the expense of robust parameter recovery.\n\nThe previous run (Run 41) explored a piecewise linear model (`U = beta_gain * gain_above_fair - beta_loss * loss_below_fair`) hypothesizing that separating sensitivity to gains and losses would enhance identifiability. Although this model achieved a relatively low BIC (187.15), indicating good fit, it completely failed parameter recovery for both `beta_gain` (r = -0.083) and `beta_loss` (r = 0.012). This demonstrates that despite theoretical separation, the linear structure applied to piecewise deviations did not allow for independent estimation of these parameters from the available data.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** that ensures both parameters have distinct, identifiable influences on responder decisions (`trial_role == 1`). Linear combinations or simple piecewise applications of deviation terms have repeatedly shown issues with simultaneous parameter recovery.\n\nFor this run, let's pivot to a different structural approach that relates the proposed share to the fair share using a **ratio** instead of a difference. This departs from the previous models and might offer a novel path to parameter identifiability.\n\nDesign a computational model that predicts the utility of accepting an offer based on the *ratio* of the proposed percentage share to the fair percentage share.\n\n*   **Promising Structural Direction (Ratio-based):** Consider using the ratio `split_perc_self / fair_perc_self` as a key input driver for utility. This frame treats fairness not as an anchor point for deviations, but as a reference denominator. Structure the utility (`U`) as a linear function of this ratio, plus a baseline utility.\n    *   Calculate the necessary intermediate variables:\n        *   `sum_tokens = token_self + token_opp`\n        *   `fair_perc_self = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)` (Note: this calculation already handles the case where `sum_tokens` is 0, setting `fair_perc_self` to 50.0, thus avoiding division by zero in the ratio if `fair_perc_self` is in the denominator).\n    *   Structure the utility (`U`) based on the ratio and your two learnable parameters. A promising form is:\n        `U = beta_ratio_sens * (split_perc_self / fair_perc_self) + beta_baseline`\n    *   This structure models utility as increasing linearly with the ratio of the proposed share to the fair share (scaled by `beta_ratio_sens`), offset by a constant baseline utility (`beta_baseline`). This attempts to separate the sensitivity to the *relative proportion* of the offer (`beta_ratio_sens`) from the general propensity to accept offers (`beta_baseline`).\n\n*   **Key Inputs & Calculated Variables:**\n    *   Use `split_perc_self`, `token_self`, `token_opp` as data variables.\n    *   Calculate `sum_tokens` and `fair_perc_self` as described above.\n    *   Ensure these calculated variables are included in your <MODEL> tag calculations and <VARIABLES> descriptions.\n\n*   **Model Formula:** Define the utility (`U`) based on `split_perc_self`, `fair_perc_self`, and your 2 learnable parameters using the ratio structure suggested. Include the calculation steps for necessary derived variables before the final formula for `U`. Use clear mathematical notation.\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**.\n    *   `beta_ratio_sens`: Sensitivity to the `split_perc_self / fair_perc_self` ratio. Should likely be positive (higher ratio -> higher utility). Suggest generous bounds like [0.0, 20.0].\n    *   `beta_baseline`: Baseline utility (intercept). Can be positive or negative. Represents utility when the ratio is zero (e.g., offering 0%). Suggest generous bounds like [-20.0, 20.0].\n    Choose descriptive names suitable for Python code. Define clear, generous, finite numerical bounds for both.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model (`sum_tokens`, `fair_perc_self`, etc.) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`, etc.).\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Include the calculation steps for necessary derived variables before the final formula for `U`. Use clear mathematical notation.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing your model. Explain the core idea of how utility is determined by the *ratio* of the proposed share to the fair share, and how this structure aims to improve parameter identifiability compared to models based on the *difference* or piecewise deviations from fair.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability *within* the constraints of **exactly 2 learnable parameters** is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. This ratio-based approach is a significant departure from previous attempts and might offer the necessary structural separation. If this structure also fails parameter recovery, be prepared to think even further outside the box for the next iteration \u2013 perhaps utility is not linear in the ratio or difference, perhaps fairness acts as a categorical modifier or a non-linear threshold, or maybe different inputs are needed entirely.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Instructions for Run 42 of 100:\n\nThe unwavering primary objective is achieving parameter recovery >= 0.7 for *all* learnable parameters. This remains the critical benchmark for model usability. While improved BIC and accuracy are valuable secondary goals, they must not come at the expense of robust parameter recovery.\n\nThe previous run (Run 41) explored a piecewise linear model (`U = beta_gain * gain_above_fair - beta_loss * loss_below_fair`) hypothesizing that separating sensitivity to gains and losses would enhance identifiability. Although this model achieved a relatively low BIC (187.15), indicating good fit, it completely failed parameter recovery for both `beta_gain` (r = -0.083) and `beta_loss` (r = 0.012). This demonstrates that despite theoretical separation, the linear structure applied to piecewise deviations did not allow for independent estimation of these parameters from the available data.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** that ensures both parameters have distinct, identifiable influences on responder decisions (`trial_role == 1`). Linear combinations or simple piecewise applications of deviation terms have repeatedly shown issues with simultaneous parameter recovery.\n\nFor this run, let's pivot to a different structural approach that relates the proposed share to the fair share using a **ratio** instead of a difference. This departs from the previous models and might offer a novel path to parameter identifiability.\n\nDesign a computational model that predicts the utility of accepting an offer based on the *ratio* of the proposed percentage share to the fair percentage share.\n\n*   **Promising Structural Direction (Ratio-based):** Consider using the ratio `split_perc_self / fair_perc_self` as a key input driver for utility. This frame treats fairness not as an anchor point for deviations, but as a reference denominator. Structure the utility (`U`) as a linear function of this ratio, plus a baseline utility.\n    *   Calculate the necessary intermediate variables:\n        *   `sum_tokens = token_self + token_opp`\n        *   `fair_perc_self = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)` (Note: this calculation already handles the case where `sum_tokens` is 0, setting `fair_perc_self` to 50.0, thus avoiding division by zero in the ratio if `fair_perc_self` is in the denominator).\n    *   Structure the utility (`U`) based on the ratio and your two learnable parameters. A promising form is:\n        `U = beta_ratio_sens * (split_perc_self / fair_perc_self) + beta_baseline`\n    *   This structure models utility as increasing linearly with the ratio of the proposed share to the fair share (scaled by `beta_ratio_sens`), offset by a constant baseline utility (`beta_baseline`). This attempts to separate the sensitivity to the *relative proportion* of the offer (`beta_ratio_sens`) from the general propensity to accept offers (`beta_baseline`).\n\n*   **Key Inputs & Calculated Variables:**\n    *   Use `split_perc_self`, `token_self`, `token_opp` as data variables.\n    *   Calculate `sum_tokens` and `fair_perc_self` as described above.\n    *   Ensure these calculated variables are included in your <MODEL> tag calculations and <VARIABLES> descriptions.\n\n*   **Model Formula:** Define the utility (`U`) based on `split_perc_self`, `fair_perc_self`, and your 2 learnable parameters using the ratio structure suggested. Include the calculation steps for necessary derived variables before the final formula for `U`. Use clear mathematical notation.\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**.\n    *   `beta_ratio_sens`: Sensitivity to the `split_perc_self / fair_perc_self` ratio. Should likely be positive (higher ratio -> higher utility). Suggest generous bounds like [0.0, 20.0].\n    *   `beta_baseline`: Baseline utility (intercept). Can be positive or negative. Represents utility when the ratio is zero (e.g., offering 0%). Suggest generous bounds like [-20.0, 20.0].\n    Choose descriptive names suitable for Python code. Define clear, generous, finite numerical bounds for both.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model (`sum_tokens`, `fair_perc_self`, etc.) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`, etc.).\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Include the calculation steps for necessary derived variables before the final formula for `U`. Use clear mathematical notation.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing your model. Explain the core idea of how utility is determined by the *ratio* of the proposed share to the fair share, and how this structure aims to improve parameter identifiability compared to models based on the *difference* or piecewise deviations from fair.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability *within* the constraints of **exactly 2 learnable parameters** is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. This ratio-based approach is a significant departure from previous attempts and might offer the necessary structural separation. If this structure also fails parameter recovery, be prepared to think even further outside the box for the next iteration \u2013 perhaps utility is not linear in the ratio or difference, perhaps fairness acts as a categorical modifier or a non-linear threshold, or maybe different inputs are needed entirely.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "Okay, I'm ready. Let's design this computational model for the responder's decision in the ultimatum game, focusing on the suggested ratio-based utility structure to enhance parameter identifiability. This approach attempts to capture how the participant evaluates the proposed share relative to their perceived fair share based on contribution.\n\n<MODEL>\nS_tokens = token_self + token_opp\nF_perc_self = if S_tokens > 0 then (token_self / S_tokens) * 100.0 else 50.0\nR = if F_perc_self > 0 then split_perc_self / F_perc_self else if split_perc_self == 0 then 1 else 1000\nU = beta_ratio_sens * R + beta_baseline\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"trial_role\": {\n      \"description\": \"Role of the participant (1 = responder, 2 = proposer). Model applies when trial_role is 1.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed share for the participant (in %). Relevant only for responder trials.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accept\": {\n      \"description\": \"Participant's response (1 = accept, 0 = reject). Target variable.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens (participant + opponent).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 200,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"Fair percentage share for the participant based on their token contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R\": {\n      \"description\": \"Ratio of the proposed percentage share for the participant to their fair percentage share, with special handling for zero fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_ratio_sens\": {\n      \"description\": \"Sensitivity parameter for the ratio of proposed share to fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 20.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_baseline\": {\n      \"description\": \"Baseline utility parameter.\",\n      \"range\": {\n        \"min\": -20.0,\n        \"max\": 20.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA computational model predicting responder acceptance decisions based on the utility of the proposed offer. Utility is modeled as a linear function of the ratio between the proposed percentage share and the participant's fair percentage share (based on token contribution), incorporating handling for cases where the fair share is zero. The model includes two learnable parameters: a sensitivity parameter (beta_ratio_sens) scaling the impact of the ratio, and a baseline parameter (beta_baseline) representing general acceptance propensity. This ratio-based structure is hypothesized to improve parameter identifiability compared to models based on differences or piecewise deviations from fairness. The utility (U) is converted to a probability of acceptance using a logistic function.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_ratio_sens', 'beta_baseline']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                S_tokens = token_self + token_opp\nF_perc_self = if S_tokens > 0 then (token_self / S_tokens) * 100.0 else 50.0\nR = if F_perc_self > 0 then split_perc_self / F_perc_self else if split_perc_self == 0 then 1 else 1000\nU = beta_ratio_sens * R + beta_baseline\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"trial_role\": {\n      \"description\": \"Role of the participant (1 = responder, 2 = proposer). Model applies when trial_role is 1.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed share for the participant (in %). Relevant only for responder trials.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accept\": {\n      \"description\": \"Participant's response (1 = accept, 0 = reject). Target variable.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens (participant + opponent).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 200,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"Fair percentage share for the participant based on their token contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R\": {\n      \"description\": \"Ratio of the proposed percentage share for the participant to their fair percentage share, with special handling for zero fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_ratio_sens\": {\n      \"description\": \"Sensitivity parameter for the ratio of proposed share to fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 20.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_baseline\": {\n      \"description\": \"Baseline utility parameter.\",\n      \"range\": {\n        \"min\": -20.0,\n        \"max\": 20.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_ratio_sens=1.0, beta_baseline=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        trial_role = trial.get(\"trial_role\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        if trial_role == 1:  # Only apply model for responders\n\n            S_tokens = token_self + token_opp\n            if S_tokens > 0:\n                F_perc_self = (token_self / S_tokens) * 100.0\n            else:\n                F_perc_self = 50.0\n\n            if F_perc_self > 0:\n                R = split_perc_self / F_perc_self\n            else:\n                if split_perc_self == 0:\n                    R = 1\n                else:\n                    R = 1000\n\n            U = beta_ratio_sens * R + beta_baseline\n        else:\n            U = 0 #Arbitrary value if not a responder\n\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1746100870.582033
    }
  ],
  "learnable_parameters": {
    "beta_ratio_sens": {
      "description": "Sensitivity parameter for the ratio of proposed share to fair share.",
      "range": {
        "min": 0.0,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_baseline": {
      "description": "Baseline utility parameter.",
      "range": {
        "min": -20.0,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "S_tokens = token_self + token_opp\nF_perc_self = if S_tokens > 0 then (token_self / S_tokens) * 100.0 else 50.0\nR = if F_perc_self > 0 then split_perc_self / F_perc_self else if split_perc_self == 0 then 1 else 1000\nU = beta_ratio_sens * R + beta_baseline",
  "variable_descriptions": {
    "trial_role": {
      "description": "Role of the participant (1 = responder, 2 = proposer). Model applies when trial_role is 1.",
      "range": {
        "min": 1,
        "max": 2,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "Proposed share for the participant (in %). Relevant only for responder trials.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "accept": {
      "description": "Participant's response (1 = accept, 0 = reject). Target variable.",
      "range": {
        "min": 0,
        "max": 1,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens (participant + opponent).",
      "range": {
        "min": 0,
        "max": 200,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self": {
      "description": "Fair percentage share for the participant based on their token contribution.",
      "range": {
        "min": 0,
        "max": 100,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "R": {
      "description": "Ratio of the proposed percentage share for the participant to their fair percentage share, with special handling for zero fair share.",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_ratio_sens": {
      "description": "Sensitivity parameter for the ratio of proposed share to fair share.",
      "range": {
        "min": 0.0,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_baseline": {
      "description": "Baseline utility parameter.",
      "range": {
        "min": -20.0,
        "max": 20.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Utility of accepting the offer.",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A computational model predicting responder acceptance decisions based on the utility of the proposed offer. Utility is modeled as a linear function of the ratio between the proposed percentage share and the participant's fair percentage share (based on token contribution), incorporating handling for cases where the fair share is zero. The model includes two learnable parameters: a sensitivity parameter (beta_ratio_sens) scaling the impact of the ratio, and a baseline parameter (beta_baseline) representing general acceptance propensity. This ratio-based structure is hypothesized to improve parameter identifiability compared to models based on differences or piecewise deviations from fairness. The utility (U) is converted to a probability of acceptance using a logistic function.",
  "target_variable": "accept",
  "full_reasoning": "Okay, I'm ready. Let's design this computational model for the responder's decision in the ultimatum game, focusing on the suggested ratio-based utility structure to enhance parameter identifiability. This approach attempts to capture how the participant evaluates the proposed share relative to their perceived fair share based on contribution.\n\n<MODEL>\nS_tokens = token_self + token_opp\nF_perc_self = if S_tokens > 0 then (token_self / S_tokens) * 100.0 else 50.0\nR = if F_perc_self > 0 then split_perc_self / F_perc_self else if split_perc_self == 0 then 1 else 1000\nU = beta_ratio_sens * R + beta_baseline\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"trial_role\": {\n      \"description\": \"Role of the participant (1 = responder, 2 = proposer). Model applies when trial_role is 1.\",\n      \"range\": {\n        \"min\": 1,\n        \"max\": 2,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed share for the participant (in %). Relevant only for responder trials.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"accept\": {\n      \"description\": \"Participant's response (1 = accept, 0 = reject). Target variable.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens (participant + opponent).\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 200,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self\": {\n      \"description\": \"Fair percentage share for the participant based on their token contribution.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 100,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R\": {\n      \"description\": \"Ratio of the proposed percentage share for the participant to their fair percentage share, with special handling for zero fair share.\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_ratio_sens\": {\n      \"description\": \"Sensitivity parameter for the ratio of proposed share to fair share.\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 20.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_baseline\": {\n      \"description\": \"Baseline utility parameter.\",\n      \"range\": {\n        \"min\": -20.0,\n        \"max\": 20.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the offer.\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA computational model predicting responder acceptance decisions based on the utility of the proposed offer. Utility is modeled as a linear function of the ratio between the proposed percentage share and the participant's fair percentage share (based on token contribution), incorporating handling for cases where the fair share is zero. The model includes two learnable parameters: a sensitivity parameter (beta_ratio_sens) scaling the impact of the ratio, and a baseline parameter (beta_baseline) representing general acceptance propensity. This ratio-based structure is hypothesized to improve parameter identifiability compared to models based on differences or piecewise deviations from fairness. The utility (U) is converted to a probability of acceptance using a logistic function.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: S_tokens = token_self + token_opp\nF_perc_self = if S_tokens > 0 then (token_self / S_tokens) * 100.0 else 50.0\nR = if F_perc_self > 0 then split_perc_self / F_perc_self else if split_perc_self == 0 then 1 else 1000\nU = beta_ratio_sens * R + beta_baseline\nSummary: A computational model predicting responder acceptance decisions based on the utility of the proposed offer. Utility is modeled as a linear function of the ratio between the proposed percentage share and the participant's fair percentage share (based on token contribution), incorporating handling for cases where the fair share is zero. The model includes two learnable parameters: a sensitivity parameter (beta_ratio_sens) scaling the impact of the ratio, and a baseline parameter (beta_baseline) representing general acceptance propensity. This ratio-based structure is hypothesized to improve parameter identifiability compared to models based on differences or piecewise deviations from fairness. The utility (U) is converted to a probability of acceptance using a logistic function.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_ratio_sens=1.0, beta_baseline=0.0):\n    model_predictions = []\n    for trial in trial_data:\n        trial_role = trial.get(\"trial_role\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n\n        if trial_role == 1:  # Only apply model for responders\n\n            S_tokens = token_self + token_opp\n            if S_tokens > 0:\n                F_perc_self = (token_self / S_tokens) * 100.0\n            else:\n                F_perc_self = 50.0\n\n            if F_perc_self > 0:\n                R = split_perc_self / F_perc_self\n            else:\n                if split_perc_self == 0:\n                    R = 1\n                else:\n                    R = 1000\n\n            U = beta_ratio_sens * R + beta_baseline\n        else:\n            U = 0 #Arbitrary value if not a responder\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.797924297924298,
  "group_accuracies": {
    "Control": 0.8507751937984496,
    "Cocaine": 0.7505787037037037
  },
  "group_parameter_averages": {
    "Control": {
      "beta_ratio_sens": 11.890206227536906,
      "beta_baseline": -1.3371915286714853
    },
    "Cocaine": {
      "beta_ratio_sens": 6.627051200877056,
      "beta_baseline": -3.8597647569158076
    }
  },
  "fitting_results": [
    {
      "beta_ratio_sens": 6.168582359335327,
      "beta_baseline": -7.397704173339597,
      "success": true,
      "log_likelihood": -6.5871311674170805,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 9.30655580741049,
      "beta_baseline": -5.704769908850518,
      "success": true,
      "log_likelihood": -14.82941540353386,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 18.59256381904223,
      "beta_baseline": -10.950380392872903,
      "success": true,
      "log_likelihood": -9.102956029842478,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 9.03142119065762,
      "beta_baseline": -6.164957888005038,
      "success": true,
      "log_likelihood": -14.520280061837603,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 16.393660989605635,
      "beta_baseline": -10.620939285844496,
      "success": true,
      "log_likelihood": -9.627574016102786,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 12.281986833624453,
      "beta_baseline": -6.2234100848066145,
      "success": true,
      "log_likelihood": -12.066171885919312,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 11.631759411582989,
      "beta_baseline": 19.769053013541942,
      "success": true,
      "log_likelihood": 2.5224100584124833e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 12.944061830105985,
      "beta_baseline": -6.295144155556816,
      "success": true,
      "log_likelihood": -11.391886382618837,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 17.909825204212318,
      "beta_baseline": 20.0,
      "success": true,
      "log_likelihood": 3.3909000050625132e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 14.291497865018226,
      "beta_baseline": -9.901725850734376,
      "success": true,
      "log_likelihood": -10.165845524969594,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 20.0,
      "beta_baseline": -12.902761222689033,
      "success": true,
      "log_likelihood": -4.450380689035049,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 6.07976495172159,
      "beta_baseline": -6.838052925502663,
      "success": true,
      "log_likelihood": -8.334582076044311,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 19.22826264856267,
      "beta_baseline": -12.802261908742562,
      "success": true,
      "log_likelihood": -8.176637798710694,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 13.529903671433374,
      "beta_baseline": 17.327576931620293,
      "success": true,
      "log_likelihood": -4.253429393504031e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 12.72306203113551,
      "beta_baseline": 15.835610239469965,
      "success": true,
      "log_likelihood": -3.859876915869866e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 20.0,
      "beta_baseline": 20.0,
      "success": true,
      "log_likelihood": 3.463189068683163e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 7.852057189230253,
      "beta_baseline": 19.97018189122852,
      "success": true,
      "log_likelihood": 1.1104308580795422e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 20.0,
      "beta_baseline": -6.60632399592765,
      "success": true,
      "log_likelihood": -4.044067506025731,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 16.740904089575718,
      "beta_baseline": -4.862141819862965,
      "success": true,
      "log_likelihood": -5.588562662866011,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 6.385874307417012,
      "beta_baseline": 12.544021088082342,
      "success": true,
      "log_likelihood": -6.709015901522187e-06,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 11.758831292373051,
      "beta_baseline": -6.69223154525952,
      "success": true,
      "log_likelihood": -12.801881307696938,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 14.571982025044125,
      "beta_baseline": -4.61654524803405,
      "success": true,
      "log_likelihood": -7.085686208507128,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 5.5694348429436396,
      "beta_baseline": -4.253564907446279,
      "success": true,
      "log_likelihood": -17.69162976347957,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 7.82725138983161,
      "beta_baseline": -4.625710977269355,
      "success": true,
      "log_likelihood": -16.41306000169394,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 10.90193135250767,
      "beta_baseline": -6.666314286502301,
      "success": true,
      "log_likelihood": -13.404049060416762,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 12.21939753188249,
      "beta_baseline": -6.702987077984678,
      "success": true,
      "log_likelihood": -12.407995584517694,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 13.611266827835944,
      "beta_baseline": -7.750665261551055,
      "success": true,
      "log_likelihood": -11.538484164222346,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 20.0,
      "beta_baseline": -15.646733053510776,
      "success": true,
      "log_likelihood": -4.0491430769001795,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 8.563441556609982,
      "beta_baseline": -1.9674632547591429,
      "success": true,
      "log_likelihood": -8.738231705081395,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 6.803483713691364,
      "beta_baseline": -2.351039344323149,
      "success": true,
      "log_likelihood": -14.12233038561885,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 20.0,
      "beta_baseline": 20.0,
      "success": true,
      "log_likelihood": 3.4631890686831633e-09,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 6.16859606630876,
      "beta_baseline": -7.397725830421431,
      "success": true,
      "log_likelihood": -6.5871311673368576,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 4.416169729835721,
      "beta_baseline": -3.177016703874699,
      "success": true,
      "log_likelihood": -20.059563418695205,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 9.688913421627733,
      "beta_baseline": -6.821117812322925,
      "success": true,
      "log_likelihood": -13.569222019151912,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 20.0,
      "beta_baseline": 15.137925273042004,
      "success": true,
      "log_likelihood": -1.4088613555475944e-08,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 8.480843894187068,
      "beta_baseline": -4.221310414034055,
      "success": true,
      "log_likelihood": -15.197166186479125,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 17.391676049597233,
      "beta_baseline": -8.175378658840264,
      "success": true,
      "log_likelihood": -8.832710946521983,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 10.477815783483774,
      "beta_baseline": -6.410843932782887,
      "success": true,
      "log_likelihood": -13.760283644702161,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 7.075087058228515,
      "beta_baseline": -3.2874292709469106,
      "success": true,
      "log_likelihood": -16.28516370845908,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 7.223657495618591,
      "beta_baseline": -1.05566284489355,
      "success": true,
      "log_likelihood": -7.8860677006983,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 6.89923506940752,
      "beta_baseline": -3.555815553817641,
      "success": true,
      "log_likelihood": -17.1226835093864,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 10.055199877218762,
      "beta_baseline": -8.694605408294992,
      "success": true,
      "log_likelihood": -10.024691581935096,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 0.48290860618196996,
      "beta_baseline": 3.2571308297459556,
      "success": true,
      "log_likelihood": -4.5612565692818094,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 8.017134312249192,
      "beta_baseline": -4.548971081035504,
      "success": true,
      "log_likelihood": -16.18177706544083,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 10.845621776007045,
      "beta_baseline": -5.705952636990828,
      "success": true,
      "log_likelihood": -13.3193304898371,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 5.028505190583054,
      "beta_baseline": -1.8724204054229685,
      "success": true,
      "log_likelihood": -17.37826626520855,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 9.189329074242133,
      "beta_baseline": -5.427736485192516,
      "success": true,
      "log_likelihood": -15.00041781843006,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 5.569522920964691,
      "beta_baseline": -4.084965320901729,
      "success": true,
      "log_likelihood": -18.147472924747483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 10.957874994253215,
      "beta_baseline": -7.418612033989021,
      "success": true,
      "log_likelihood": -12.781999294262926,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 1.6675643068106154,
      "beta_baseline": -0.935977730868992,
      "success": true,
      "log_likelihood": -24.026373221809138,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 4.674349167285724,
      "beta_baseline": -1.8559147955998783,
      "success": true,
      "log_likelihood": -18.422760576359043,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 4.273438992755079,
      "beta_baseline": -4.9791725337408925,
      "success": true,
      "log_likelihood": -11.554041554368482,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 6.077358196871785,
      "beta_baseline": -3.591763601603504,
      "success": true,
      "log_likelihood": -18.481994178486516,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 2.0157160553542695,
      "beta_baseline": -0.9103677291215465,
      "success": true,
      "log_likelihood": -23.283420972608127,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 5.159698146791032,
      "beta_baseline": -3.814870627163464,
      "success": true,
      "log_likelihood": -18.683600271647816,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 20.0,
      "beta_baseline": -14.63944158059511,
      "success": true,
      "log_likelihood": -5.31961562927496,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 11.63275261219723,
      "beta_baseline": -9.276092596129784,
      "success": true,
      "log_likelihood": -10.21343938267628,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 0.0,
      "beta_baseline": 2.0794419661668315,
      "success": true,
      "log_likelihood": -12.55795544314945,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 5.548624474974864,
      "beta_baseline": -6.381172072703102,
      "success": true,
      "log_likelihood": -8.770101537579793,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 6.194974297495537,
      "beta_baseline": -1.8449938113487012,
      "success": true,
      "log_likelihood": -13.728722484257874,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 4.748747961842401,
      "beta_baseline": -2.3615048978783357,
      "success": true,
      "log_likelihood": -19.705472214378464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 10.901942621463956,
      "beta_baseline": -6.666326180821697,
      "success": true,
      "log_likelihood": -13.404049059063286,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 6.168562141354652,
      "beta_baseline": -7.397692535550896,
      "success": true,
      "log_likelihood": -6.587131167400185,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 4.090003405420736,
      "beta_baseline": -2.8250014228690534,
      "success": true,
      "log_likelihood": -20.790799731016147,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 10.179076838388442,
      "beta_baseline": -8.792448306445266,
      "success": true,
      "log_likelihood": -9.940384361110318,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 11.502197630851168,
      "beta_baseline": -6.545571013180444,
      "success": true,
      "log_likelihood": -12.995702876318836,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 8.480151158862853,
      "beta_baseline": -1.520276453664934,
      "success": true,
      "log_likelihood": -7.364083961288711,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 8.202685451485715,
      "beta_baseline": -2.172787241981917,
      "success": true,
      "log_likelihood": -10.154604549517442,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 7.432440575311329,
      "beta_baseline": -4.212481801460336,
      "success": true,
      "log_likelihood": -16.82500759869594,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 3.4156947001518985,
      "beta_baseline": 0.5410904306409714,
      "success": true,
      "log_likelihood": -9.50518991416365,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 20.0,
      "beta_baseline": -19.437940491287122,
      "success": true,
      "log_likelihood": -1.709892646632209,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 4.343341826042863,
      "beta_baseline": -5.035589088656859,
      "success": true,
      "log_likelihood": -11.482236904700654,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 7.218201909353102,
      "beta_baseline": -4.2664155473707455,
      "success": true,
      "log_likelihood": -17.102031099192526,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 5.159663123793742,
      "beta_baseline": -1.5681204363065429,
      "success": true,
      "log_likelihood": -15.606514037267035,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 2.291512296564455,
      "beta_baseline": -1.4413154306860674,
      "success": true,
      "log_likelihood": -23.401088883808804,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 8.979903364309855,
      "beta_baseline": -4.056475602144211,
      "success": true,
      "log_likelihood": -14.029003080856237,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 6.40641469749881,
      "beta_baseline": -0.24583822570888542,
      "success": true,
      "log_likelihood": -6.277779920988674,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 0.8209107127870302,
      "beta_baseline": -3.378583579706086,
      "success": true,
      "log_likelihood": -7.669167136492681,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 2.3757966249357736,
      "beta_baseline": -1.0004725524279805,
      "success": true,
      "log_likelihood": -22.557203312560954,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 6.1685833271166155,
      "beta_baseline": -7.397712184930427,
      "success": true,
      "log_likelihood": -6.587131167346483,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 2.7137146894852067,
      "beta_baseline": -1.5779746054032147,
      "success": true,
      "log_likelihood": -22.8688743741039,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 3.897198552570411,
      "beta_baseline": 17.309429368436177,
      "success": true,
      "log_likelihood": -59.17970265293481,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 2.8185453573004073,
      "beta_baseline": -4.1088140031539,
      "success": true,
      "log_likelihood": -11.286944344648667,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 11.013647740424329,
      "beta_baseline": -6.7336216813221705,
      "success": true,
      "log_likelihood": -13.312735871604197,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 2.2477903817690814,
      "beta_baseline": -0.9249706668317165,
      "success": true,
      "log_likelihood": -22.692040206759206,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 10.572526865475183,
      "beta_baseline": -10.8042294687122,
      "success": true,
      "log_likelihood": -5.778449589799879,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 5.472251453094043,
      "beta_baseline": -2.2741677067232295,
      "success": true,
      "log_likelihood": -17.536902424520303,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 4.788158754967049,
      "beta_baseline": -4.637507752758905,
      "success": true,
      "log_likelihood": -14.835463140935417,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 8.990460376097124,
      "beta_baseline": -1.1563437370307077,
      "success": true,
      "log_likelihood": -5.517065733624734,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 7.273384796017132,
      "beta_baseline": -4.656956885620937,
      "success": true,
      "log_likelihood": -16.87515734732779,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_ratio_sens": 2.5724837885278675,
      "beta_baseline": -0.7131055541604159,
      "success": true,
      "log_likelihood": -20.66762956242267,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_ratio_sens": {
        "r": 0.39288594114164543,
        "p": 5.270306590497557e-05
      },
      "beta_baseline": {
        "r": 0.9157406211344098,
        "p": 1.3564621910645133e-40
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 31.191667715359205,
  "bic_Control": 24.423964838201183,
  "bic_Cocaine": 37.25440154281327,
  "bic_results": {
    "average_bic": 31.191667715359205,
    "individual_bics": [
      20.34130021174638,
      36.82586868397994,
      25.372949936597173,
      36.207598000587424,
      26.422185909117793,
      31.299381648750845,
      7.1670378718674,
      29.950810642149897,
      7.16703787013042,
      27.498728926851406,
      16.06779925498232,
      23.836202029000845,
      23.520313474333605,
      7.167037885419079,
      7.167037954109758,
      7.167037869985842,
      7.167037874691358,
      15.255172888963681,
      18.344163202644243,
      7.167051294944023,
      32.770800492306094,
      21.338410293926476,
      42.550297403871355,
      39.993157880300096,
      33.975135997745745,
      31.98302904594761,
      30.24400620535691,
      15.265324030712579,
      24.64350128707501,
      35.41169864814992,
      7.167037869985842,
      20.341300211585935,
      47.28616471430263,
      34.30548191521604,
      7.167037905089447,
      37.56137024987047,
      24.832459769956188,
      34.687605166316544,
      39.73736529383038,
      22.93917327830882,
      41.412404895685015,
      27.216421040782414,
      16.289551015475837,
      39.53059200779388,
      33.80569885658642,
      41.923570407329315,
      37.16787351377234,
      43.46198372640718,
      32.73103646543807,
      55.21978432053049,
      44.0125590296303,
      30.27512098564918,
      44.13102623388525,
      53.73387982212847,
      44.53423842020785,
      17.806269135462138,
      27.59391664226478,
      32.28294876321112,
      24.707240952071807,
      34.62448284542797,
      46.577982305669146,
      33.97513599503879,
      20.34130021171259,
      48.74863733894451,
      27.047806599132855,
      33.15844362954989,
      21.89520579948964,
      27.476246975947106,
      40.8170530743041,
      26.17741770523952,
      10.586823170176638,
      30.13151168631353,
      41.37110007529727,
      38.38006595144629,
      53.969215644529825,
      35.225044038624695,
      19.722597718889567,
      22.505372149897582,
      52.28144450203413,
      20.341300211605187,
      52.90478662512002,
      125.52644318278183,
      29.740926566209552,
      33.79250962012061,
      52.55111829043063,
      18.72393705651198,
      42.240842725952824,
      36.83796415878305,
      18.201169344161688,
      40.9173525715678,
      48.502297001757555
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        20.34130021174638,
        36.82586868397994,
        25.372949936597173,
        36.207598000587424,
        26.422185909117793,
        31.299381648750845,
        7.1670378718674,
        29.950810642149897,
        7.16703787013042,
        27.498728926851406,
        16.06779925498232,
        23.836202029000845,
        23.520313474333605,
        7.167037885419079,
        7.167037954109758,
        7.167037869985842,
        7.167037874691358,
        15.255172888963681,
        18.344163202644243,
        7.167051294944023,
        32.770800492306094,
        21.338410293926476,
        42.550297403871355,
        39.993157880300096,
        33.975135997745745,
        31.98302904594761,
        30.24400620535691,
        15.265324030712579,
        24.64350128707501,
        35.41169864814992,
        7.167037869985842,
        20.341300211585935,
        47.28616471430263,
        34.30548191521604,
        7.167037905089447,
        37.56137024987047,
        24.832459769956188,
        34.687605166316544,
        39.73736529383038,
        22.93917327830882,
        41.412404895685015,
        27.216421040782414,
        16.289551015475837
      ],
      "Cocaine": [
        39.53059200779388,
        33.80569885658642,
        41.923570407329315,
        37.16787351377234,
        43.46198372640718,
        32.73103646543807,
        55.21978432053049,
        44.0125590296303,
        30.27512098564918,
        44.13102623388525,
        53.73387982212847,
        44.53423842020785,
        17.806269135462138,
        27.59391664226478,
        32.28294876321112,
        24.707240952071807,
        34.62448284542797,
        46.577982305669146,
        33.97513599503879,
        20.34130021171259,
        48.74863733894451,
        27.047806599132855,
        33.15844362954989,
        21.89520579948964,
        27.476246975947106,
        40.8170530743041,
        26.17741770523952,
        10.586823170176638,
        30.13151168631353,
        41.37110007529727,
        38.38006595144629,
        53.969215644529825,
        35.225044038624695,
        19.722597718889567,
        22.505372149897582,
        52.28144450203413,
        20.341300211605187,
        52.90478662512002,
        125.52644318278183,
        29.740926566209552,
        33.79250962012061,
        52.55111829043063,
        18.72393705651198,
        42.240842725952824,
        36.83796415878305,
        18.201169344161688,
        40.9173525715678,
        48.502297001757555
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_ratio_sens: r = 0.393\n- beta_baseline: r = 0.916",
  "previous_models": [
    "Specification: S_tokens = token_self + token_opp\nF_perc_self = if S_tokens > 0 then (token_self / S_tokens) * 100.0 else 50.0\nR = if F_perc_self > 0 then split_perc_self / F_perc_self else if split_perc_self == 0 then 1 else 1000\nU = beta_ratio_sens * R + beta_baseline\nSummary: A computational model predicting responder acceptance decisions based on the utility of the proposed offer. Utility is modeled as a linear function of the ratio between the proposed percentage share and the participant's fair percentage share (based on token contribution), incorporating handling for cases where the fair share is zero. The model includes two learnable parameters: a sensitivity parameter (beta_ratio_sens) scaling the impact of the ratio, and a baseline parameter (beta_baseline) representing general acceptance propensity. This ratio-based structure is hypothesized to improve parameter identifiability compared to models based on differences or piecewise deviations from fairness. The utility (U) is converted to a probability of acceptance using a logistic function.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 31.191667715359205\nOverall Accuracy: 0.7979\nGroup Accuracies:\n- Control: 0.8508\n- Cocaine: 0.7506\n\nParameter Recovery:\n- beta_ratio_sens: r = 0.393\n- beta_baseline: r = 0.916"
  ]
}