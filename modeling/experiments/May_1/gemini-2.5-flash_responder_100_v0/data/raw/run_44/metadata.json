{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 44), building on the results of Run 43.\n\nInstructions for Run 44 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC and accuracy are valuable secondary goals, they must not come at the expense of robust parameter recovery.\n\nThe previous run (Run 43) explored a model based on the weighted sum of the logarithms of the proposed share and the fair share (`U = beta_split_sens * log(split) + beta_fair_sens * log(fair)`). This structure resulted in moderate BIC (87.24) and accuracy (0.780). Critically, parameter recovery was mixed: `beta_fair_sens` recovered acceptably (r = 0.771), but `beta_split_sens` failed significantly (r = 0.399). This indicates that simply taking the logarithm of the inputs and adding them with separate weights was not sufficient to structurally decouple the influences of the proposed share and the fair share in a way that allowed both sensitivity parameters to be reliably estimated from the data. The influences of `log(split_perc_self)` and `log(fair_perc_self)` may be too correlated or their effect too similar within this additive structure.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** that ensures both parameters have distinct, identifiable influences on responder decisions (`trial_role == 1`). Linear combinations, piecewise deviations based on absolute difference, linear relationships with derived ratios, and additive logarithmic relationships have all shown issues with simultaneous parameter recovery for *both* parameters.\n\nFor this run, let's revisit the *ratio* concept but apply the parameters in a piecewise manner, attempting to separate the sensitivity to favorable ratios (at or above fair) from the sensitivity to unfavorable ratios (below fair). This departs from the linear ratio model (Run 42) and the additive logarithmic model (Run 43), offering a new structural form.\n\nDesign a computational model that predicts the utility of accepting an offer based on a **piecewise linear function of the ratio** between the proposed percentage share and the participant's fair percentage share.\n\n*   **Structural Direction (Piecewise Ratio):** Consider modeling utility (`U`) as proportional to the ratio of the proposed share to the fair share, but with different proportionality constants (sensitivities) depending on whether the ratio is at least 1 (offer is fair or generous) or less than 1 (offer is unfair).\n    *   Calculate the necessary intermediate variables:\n        *   `sum_tokens = token_self + token_opp`\n        *   `fair_perc_self = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)` (Ensures `fair_perc_self` is >= 0).\n        *   `epsilon_val = 1e-6` (Small constant to handle potential division by zero if `fair_perc_self` is 0, although the IF statement handles the sum_tokens=0 case, split_perc_self could still be 0).\n        *   `R_val = (split_perc_self + epsilon_val) / (fair_perc_self + epsilon_val)` (Calculate the ratio, adding epsilon to numerator and denominator for robustness).\n    *   Structure the utility (`U`) using a conditional statement based on the value of `R_val`:\n        *   If `R_val >= 1.0`, `U = beta_gain_ratio * R_val`\n        *   If `R_val < 1.0`, `U = beta_loss_ratio * R_val`\n    *   This structure uses two distinct learnable parameters (`beta_gain_ratio` and `beta_loss_ratio`) to scale the utility based on whether the offer ratio is favorable or unfavorable relative to fairness. This separation of influence for gain/loss scenarios using the ratio as the metric is a new structural attempt to achieve parameter identifiability.\n\n*   **Key Inputs & Calculated Variables:**\n    *   Use `split_perc_self`, `token_self`, `token_opp` as data variables.\n    *   Calculate `sum_tokens`, `fair_perc_self`, `epsilon_val`, `R_val`, and `U`.\n    *   Ensure these calculated variables are included in your <MODEL> tag calculations and <VARIABLES> descriptions.\n\n*   **Model Formula:** Define the utility (`U`) based on the conditional logic applied to `R_val` and your 2 learnable parameters. Include the calculation steps for necessary derived variables (`sum_tokens`, `fair_perc_self`, `epsilon_val`, `R_val`) before the final formula for `U`. Use clear mathematical notation (IF/ELSE or similar conditional structure).\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**.\n    *   `beta_gain_ratio`: Sensitivity parameter for the ratio when it is greater than or equal to 1 (fair or favorable offers). Suggest generous bounds like [-10.0, 10.0].\n    *   `beta_loss_ratio`: Sensitivity parameter for the ratio when it is less than 1 (unfair offers). Suggest generous bounds like [-10.0, 10.0].\n    Choose descriptive names suitable for Python code. Define clear, generous, finite numerical bounds for both.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model (`sum_tokens`, `fair_perc_self`, `epsilon_val`, `R_val`, `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`, etc.).\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Include the calculation steps for necessary derived variables before the final formula for `U`. Use clear mathematical notation.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Be mindful of the range for `R_val` given its calculation.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing your model. Explain the core idea of how utility is determined by a piecewise linear function of the ratio between proposed and fair shares, with separate sensitivity parameters (`beta_gain_ratio`, `beta_loss_ratio`) for ratios at or above 1 and ratios below 1. Explain how this piecewise structure on the ratio aims to improve parameter identifiability compared to previous additive or linear models.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability *within* the constraints of **exactly 2 learnable parameters** is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. This piecewise ratio approach is another significant departure from previous attempts and might offer the necessary structural separation. If this structure also fails parameter recovery for either parameter, be prepared to think even further outside the box for the next iteration \u2013 consider entirely different inputs, different ways of combining inputs (e.g., multiplicative interactions, exponential terms), or conceptualizing fairness's role differently (e.g., as a non-linear modulator of sensitivity, or a threshold in a non-standard way). The key is finding a structure where the two parameters' contributions to utility are as independent as possible across the dataset.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 44), building on the results of Run 43.\n\nInstructions for Run 44 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC and accuracy are valuable secondary goals, they must not come at the expense of robust parameter recovery.\n\nThe previous run (Run 43) explored a model based on the weighted sum of the logarithms of the proposed share and the fair share (`U = beta_split_sens * log(split) + beta_fair_sens * log(fair)`). This structure resulted in moderate BIC (87.24) and accuracy (0.780). Critically, parameter recovery was mixed: `beta_fair_sens` recovered acceptably (r = 0.771), but `beta_split_sens` failed significantly (r = 0.399). This indicates that simply taking the logarithm of the inputs and adding them with separate weights was not sufficient to structurally decouple the influences of the proposed share and the fair share in a way that allowed both sensitivity parameters to be reliably estimated from the data. The influences of `log(split_perc_self)` and `log(fair_perc_self)` may be too correlated or their effect too similar within this additive structure.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** that ensures both parameters have distinct, identifiable influences on responder decisions (`trial_role == 1`). Linear combinations, piecewise deviations based on absolute difference, linear relationships with derived ratios, and additive logarithmic relationships have all shown issues with simultaneous parameter recovery for *both* parameters.\n\nFor this run, let's revisit the *ratio* concept but apply the parameters in a piecewise manner, attempting to separate the sensitivity to favorable ratios (at or above fair) from the sensitivity to unfavorable ratios (below fair). This departs from the linear ratio model (Run 42) and the additive logarithmic model (Run 43), offering a new structural form.\n\nDesign a computational model that predicts the utility of accepting an offer based on a **piecewise linear function of the ratio** between the proposed percentage share and the participant's fair percentage share.\n\n*   **Structural Direction (Piecewise Ratio):** Consider modeling utility (`U`) as proportional to the ratio of the proposed share to the fair share, but with different proportionality constants (sensitivities) depending on whether the ratio is at least 1 (offer is fair or generous) or less than 1 (offer is unfair).\n    *   Calculate the necessary intermediate variables:\n        *   `sum_tokens = token_self + token_opp`\n        *   `fair_perc_self = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)` (Ensures `fair_perc_self` is >= 0).\n        *   `epsilon_val = 1e-6` (Small constant to handle potential division by zero if `fair_perc_self` is 0, although the IF statement handles the sum_tokens=0 case, split_perc_self could still be 0).\n        *   `R_val = (split_perc_self + epsilon_val) / (fair_perc_self + epsilon_val)` (Calculate the ratio, adding epsilon to numerator and denominator for robustness).\n    *   Structure the utility (`U`) using a conditional statement based on the value of `R_val`:\n        *   If `R_val >= 1.0`, `U = beta_gain_ratio * R_val`\n        *   If `R_val < 1.0`, `U = beta_loss_ratio * R_val`\n    *   This structure uses two distinct learnable parameters (`beta_gain_ratio` and `beta_loss_ratio`) to scale the utility based on whether the offer ratio is favorable or unfavorable relative to fairness. This separation of influence for gain/loss scenarios using the ratio as the metric is a new structural attempt to achieve parameter identifiability.\n\n*   **Key Inputs & Calculated Variables:**\n    *   Use `split_perc_self`, `token_self`, `token_opp` as data variables.\n    *   Calculate `sum_tokens`, `fair_perc_self`, `epsilon_val`, `R_val`, and `U`.\n    *   Ensure these calculated variables are included in your <MODEL> tag calculations and <VARIABLES> descriptions.\n\n*   **Model Formula:** Define the utility (`U`) based on the conditional logic applied to `R_val` and your 2 learnable parameters. Include the calculation steps for necessary derived variables (`sum_tokens`, `fair_perc_self`, `epsilon_val`, `R_val`) before the final formula for `U`. Use clear mathematical notation (IF/ELSE or similar conditional structure).\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**.\n    *   `beta_gain_ratio`: Sensitivity parameter for the ratio when it is greater than or equal to 1 (fair or favorable offers). Suggest generous bounds like [-10.0, 10.0].\n    *   `beta_loss_ratio`: Sensitivity parameter for the ratio when it is less than 1 (unfair offers). Suggest generous bounds like [-10.0, 10.0].\n    Choose descriptive names suitable for Python code. Define clear, generous, finite numerical bounds for both.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model (`sum_tokens`, `fair_perc_self`, `epsilon_val`, `R_val`, `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`, etc.).\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Include the calculation steps for necessary derived variables before the final formula for `U`. Use clear mathematical notation.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status. Be mindful of the range for `R_val` given its calculation.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing your model. Explain the core idea of how utility is determined by a piecewise linear function of the ratio between proposed and fair shares, with separate sensitivity parameters (`beta_gain_ratio`, `beta_loss_ratio`) for ratios at or above 1 and ratios below 1. Explain how this piecewise structure on the ratio aims to improve parameter identifiability compared to previous additive or linear models.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability *within* the constraints of **exactly 2 learnable parameters** is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. This piecewise ratio approach is another significant departure from previous attempts and might offer the necessary structural separation. If this structure also fails parameter recovery for either parameter, be prepared to think even further outside the box for the next iteration \u2013 consider entirely different inputs, different ways of combining inputs (e.g., multiplicative interactions, exponential terms), or conceptualizing fairness's role differently (e.g., as a non-linear modulator of sensitivity, or a threshold in a non-standard way). The key is finding a structure where the two parameters' contributions to utility are as independent as possible across the dataset.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "```json\n<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_val = 1e-6\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nU = IF(R_val >= 1.0, beta_gain_ratio * R_val, beta_loss_ratio * R_val)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens (participant + opponent)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on tokens, 50% if sum_tokens is 0\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"epsilon_val\": {\n      \"description\": \"Small constant added for numerical stability in ratio calculation\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R_val\": {\n      \"description\": \"Ratio of proposed percentage share for self to calculated fair percentage share for self\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain_ratio\": {\n      \"description\": \"Sensitivity parameter for the utility of accepting when R_val is >= 1.0\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_ratio\": {\n      \"description\": \"Sensitivity parameter for the utility of accepting when R_val is < 1.0\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts the utility of accepting an offer using a piecewise linear function of the ratio between the proposed percentage share and the participant's fair share based on token contributions. The utility is calculated as the ratio multiplied by one of two sensitivity parameters: 'beta_gain_ratio' if the ratio is 1 or greater (fair or favorable offers), and 'beta_loss_ratio' if the ratio is less than 1 (unfair offers). This piecewise structure aims to separate the influence of favorable versus unfavorable offer ratios on the decision utility, using exactly two learnable parameters.\n</SUMMARY>\n```"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_gain_ratio', 'beta_loss_ratio']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_val = 1e-6\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nU = IF(R_val >= 1.0, beta_gain_ratio * R_val, beta_loss_ratio * R_val)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens (participant + opponent)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on tokens, 50% if sum_tokens is 0\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"epsilon_val\": {\n      \"description\": \"Small constant added for numerical stability in ratio calculation\",\n      \"range\": {\n        \"min\": 1e-06,\n        \"max\": 1e-06,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R_val\": {\n      \"description\": \"Ratio of proposed percentage share for self to calculated fair percentage share for self\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain_ratio\": {\n      \"description\": \"Sensitivity parameter for the utility of accepting when R_val is >= 1.0\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_ratio\": {\n      \"description\": \"Sensitivity parameter for the utility of accepting when R_val is < 1.0\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_gain_ratio=1.0, beta_loss_ratio=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0.0)\n\n        sum_tokens = token_self + token_opp\n        if sum_tokens > 0:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n        else:\n            fair_perc_self_calc = 50.0\n\n        epsilon_val = 1e-6\n        R_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\n\n        if R_val >= 1.0:\n            U = beta_gain_ratio * R_val\n        else:\n            U = beta_loss_ratio * R_val\n\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 7, \"token_self\": 3, \"combined_earning\": 10, \"split_opp\": 7.0, \"split_self\": 3.0, \"splitperc_opp\": 70, \"splitperc_self\": 30, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 30.0, \"proposed_amount\": 3.0}, {\"ID\": 1, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 4, \"token_self\": 6, \"combined_earning\": 10, \"split_opp\": 5.0, \"split_self\": 5.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 5.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 5.0}, {\"ID\": 2, \"group\": \"control\", \"trial_number\": 3, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 7, \"token_self\": 3, \"combined_earning\": 10, \"split_opp\": 7.0, \"split_self\": 3.0, \"splitperc_opp\": 70, \"splitperc_self\": 30, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 30.0, \"proposed_amount\": 3.0}]'\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1746101586.3803241
    }
  ],
  "learnable_parameters": {
    "beta_gain_ratio": {
      "description": "Sensitivity parameter for the utility of accepting when R_val is >= 1.0",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_loss_ratio": {
      "description": "Sensitivity parameter for the utility of accepting when R_val is < 1.0",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_val = 1e-6\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nU = IF(R_val >= 1.0, beta_gain_ratio * R_val, beta_loss_ratio * R_val)",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "Proposed share for the participant in percentage",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens (participant + opponent)",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Calculated fair percentage share for the participant based on tokens, 50% if sum_tokens is 0",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "epsilon_val": {
      "description": "Small constant added for numerical stability in ratio calculation",
      "range": {
        "min": 1e-06,
        "max": 1e-06,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "R_val": {
      "description": "Ratio of proposed percentage share for self to calculated fair percentage share for self",
      "range": {
        "min": 0.0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_gain_ratio": {
      "description": "Sensitivity parameter for the utility of accepting when R_val is >= 1.0",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_loss_ratio": {
      "description": "Sensitivity parameter for the utility of accepting when R_val is < 1.0",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Utility of accepting the proposed offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "This model predicts the utility of accepting an offer using a piecewise linear function of the ratio between the proposed percentage share and the participant's fair share based on token contributions. The utility is calculated as the ratio multiplied by one of two sensitivity parameters: 'beta_gain_ratio' if the ratio is 1 or greater (fair or favorable offers), and 'beta_loss_ratio' if the ratio is less than 1 (unfair offers). This piecewise structure aims to separate the influence of favorable versus unfavorable offer ratios on the decision utility, using exactly two learnable parameters.",
  "target_variable": "accept",
  "full_reasoning": "```json\n<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_val = 1e-6\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nU = IF(R_val >= 1.0, beta_gain_ratio * R_val, beta_loss_ratio * R_val)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens (participant + opponent)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on tokens, 50% if sum_tokens is 0\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"epsilon_val\": {\n      \"description\": \"Small constant added for numerical stability in ratio calculation\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R_val\": {\n      \"description\": \"Ratio of proposed percentage share for self to calculated fair percentage share for self\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain_ratio\": {\n      \"description\": \"Sensitivity parameter for the utility of accepting when R_val is >= 1.0\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_ratio\": {\n      \"description\": \"Sensitivity parameter for the utility of accepting when R_val is < 1.0\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the proposed offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThis model predicts the utility of accepting an offer using a piecewise linear function of the ratio between the proposed percentage share and the participant's fair share based on token contributions. The utility is calculated as the ratio multiplied by one of two sensitivity parameters: 'beta_gain_ratio' if the ratio is 1 or greater (fair or favorable offers), and 'beta_loss_ratio' if the ratio is less than 1 (unfair offers). This piecewise structure aims to separate the influence of favorable versus unfavorable offer ratios on the decision utility, using exactly two learnable parameters.\n</SUMMARY>\n```",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_val = 1e-6\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nU = IF(R_val >= 1.0, beta_gain_ratio * R_val, beta_loss_ratio * R_val)\nSummary: This model predicts the utility of accepting an offer using a piecewise linear function of the ratio between the proposed percentage share and the participant's fair share based on token contributions. The utility is calculated as the ratio multiplied by one of two sensitivity parameters: 'beta_gain_ratio' if the ratio is 1 or greater (fair or favorable offers), and 'beta_loss_ratio' if the ratio is less than 1 (unfair offers). This piecewise structure aims to separate the influence of favorable versus unfavorable offer ratios on the decision utility, using exactly two learnable parameters.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_gain_ratio=1.0, beta_loss_ratio=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0.0)\n\n        sum_tokens = token_self + token_opp\n        if sum_tokens > 0:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n        else:\n            fair_perc_self_calc = 50.0\n\n        epsilon_val = 1e-6\n        R_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\n\n        if R_val >= 1.0:\n            U = beta_gain_ratio * R_val\n        else:\n            U = beta_loss_ratio * R_val\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.710927960927961,
  "group_accuracies": {
    "Control": 0.748062015503876,
    "Cocaine": 0.6776620370370371
  },
  "group_parameter_averages": {
    "Control": {
      "beta_gain_ratio": 9.0898758223028,
      "beta_loss_ratio": 2.6230558977024723
    },
    "Cocaine": {
      "beta_gain_ratio": 7.165161330807966,
      "beta_loss_ratio": -0.088992773449198
    }
  },
  "fitting_results": [
    {
      "beta_gain_ratio": 0.10561422625230119,
      "beta_loss_ratio": -5.736936936589349,
      "success": true,
      "log_likelihood": -9.237218752326552,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 0.28805446128815787,
      "success": true,
      "log_likelihood": -22.060994219398122,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 0.6606501354417328,
      "success": true,
      "log_likelihood": -21.56436255582569,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": -0.3724658175284131,
      "success": true,
      "log_likelihood": -21.981193089077955,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": -8.331997824639895e-07,
      "success": true,
      "log_likelihood": -22.180807019013795,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 1.4533040838333553,
      "success": true,
      "log_likelihood": -19.476136788477724,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 10.0,
      "success": true,
      "log_likelihood": -0.6028489305899624,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 1.7079679977480813,
      "success": true,
      "log_likelihood": -18.608009477500648,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 10.0,
      "success": true,
      "log_likelihood": -0.6028489305899623,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 9.553596689799178,
      "beta_loss_ratio": -0.47820602648620725,
      "success": true,
      "log_likelihood": -21.853678007039075,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 0.09191086634367257,
      "success": true,
      "log_likelihood": -22.168557494515643,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 0.10563083772164496,
      "beta_loss_ratio": -3.975533966096747,
      "success": true,
      "log_likelihood": -13.376471434807494,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": -0.19771765474534445,
      "success": true,
      "log_likelihood": -22.12381722731765,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 10.0,
      "success": true,
      "log_likelihood": -0.6028489305899625,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 10.0,
      "success": true,
      "log_likelihood": -0.6028489305899625,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 10.0,
      "success": true,
      "log_likelihood": -0.6028489305899625,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 10.0,
      "success": true,
      "log_likelihood": -0.6028489305899625,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 4.439560833445679,
      "success": true,
      "log_likelihood": -9.317305760089644,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 4.878847987497038,
      "success": true,
      "log_likelihood": -8.232011398970354,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 10.0,
      "success": true,
      "log_likelihood": -0.6028489305899625,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 0.7801441513332582,
      "success": true,
      "log_likelihood": -21.33030677986057,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 4.1755975239053615,
      "success": true,
      "log_likelihood": -10.034755990970108,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": -1.0671763601558344,
      "success": true,
      "log_likelihood": -20.638658273856308,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 0.43602242696630666,
      "success": true,
      "log_likelihood": -21.91063871289352,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 0.3374646618373471,
      "success": true,
      "log_likelihood": -22.016688738409645,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 1.0052561542975365,
      "success": true,
      "log_likelihood": -20.802713572479018,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 0.8174046402172489,
      "success": true,
      "log_likelihood": -21.250433182144306,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": -1.4941193990357737,
      "success": true,
      "log_likelihood": -19.3410447069112,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 4.383938732097939,
      "success": true,
      "log_likelihood": -9.464359610685703,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 2.507339289113874,
      "success": true,
      "log_likelihood": -15.635902006059254,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 10.0,
      "success": true,
      "log_likelihood": -0.6028489305899625,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 0.10560747554625434,
      "beta_loss_ratio": -5.736954077262384,
      "success": true,
      "log_likelihood": -9.237218752232845,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 1.0936175708053149,
      "beta_loss_ratio": -0.32873434697318027,
      "success": true,
      "log_likelihood": -24.112003910559313,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": -0.5821246307722989,
      "success": true,
      "log_likelihood": -21.69899915272249,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 10.0,
      "success": true,
      "log_likelihood": -0.6028489305899624,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 1.31981196974056,
      "success": true,
      "log_likelihood": -19.903526455894443,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 2.0405088293319404,
      "success": true,
      "log_likelihood": -17.392310481629693,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 0.32582175464743574,
      "success": true,
      "log_likelihood": -22.027743485865773,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 1.4681152977025755,
      "success": true,
      "log_likelihood": -19.427445068329206,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 4.949924205117194,
      "success": true,
      "log_likelihood": -8.06820132139177,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 9.900593558895698,
      "beta_loss_ratio": 1.0116165844000016,
      "success": true,
      "log_likelihood": -20.785917804762814,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": -2.598281827048141,
      "success": true,
      "log_likelihood": -15.295557433215585,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 6.2803928907934745,
      "success": true,
      "log_likelihood": -5.573089771874389,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 0.6515373283347431,
      "success": true,
      "log_likelihood": -21.580765186156064,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 1.1879685757834932,
      "success": true,
      "log_likelihood": -20.300460306906214,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 1.780427040354625,
      "success": true,
      "log_likelihood": -18.346467280069422,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 0.4930184161148057,
      "success": true,
      "log_likelihood": -21.83338915317829,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": -0.8119263410674947,
      "success": true,
      "log_likelihood": -21.264005293867147,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": -0.3114244120495515,
      "success": true,
      "log_likelihood": -22.041016444481148,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 0.8915734747359362,
      "beta_loss_ratio": 0.19550856618065107,
      "success": true,
      "log_likelihood": -24.410507148402324,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 1.4979231470890253,
      "success": true,
      "log_likelihood": -19.32857775324202,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 0.10560512266202637,
      "beta_loss_ratio": -3.38649252470502,
      "success": true,
      "log_likelihood": -15.240446656540641,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 1.0935863127366656,
      "beta_loss_ratio": 0.6850133366426764,
      "success": true,
      "log_likelihood": -23.606497373667114,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 0.8915547100884378,
      "beta_loss_ratio": 0.6940598517189785,
      "success": true,
      "log_likelihood": -23.78732081505747,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": -0.84858213169539,
      "success": true,
      "log_likelihood": -21.18101375824658,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": -0.8991787864830566,
      "success": true,
      "log_likelihood": -21.064494882458554,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": -1.6672166552463916,
      "success": true,
      "log_likelihood": -18.74860174863469,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 2.6748735234011143,
      "success": true,
      "log_likelihood": -15.0099521173237,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 0.10560666038776684,
      "beta_loss_ratio": -4.078983557466875,
      "success": true,
      "log_likelihood": -13.074459712305634,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 2.7791797778949707,
      "success": true,
      "log_likelihood": -14.623678269129435,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 0.8392849225090028,
      "success": true,
      "log_likelihood": -21.202113486359064,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 0.3373750252384053,
      "success": true,
      "log_likelihood": -22.016688753600217,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 0.10560614367837426,
      "beta_loss_ratio": -5.736943539235269,
      "success": true,
      "log_likelihood": -9.237218752245075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 1.0936150256645927,
      "beta_loss_ratio": -0.14364917106605496,
      "success": true,
      "log_likelihood": -24.237880968092043,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3333333333333333,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": -2.592426371702328,
      "success": true,
      "log_likelihood": -15.31718567539101,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 0.7739730736099111,
      "success": true,
      "log_likelihood": -21.343257078374684,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 5.100761126736359,
      "success": true,
      "log_likelihood": -7.733231604254048,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 3.7935268167251213,
      "success": true,
      "log_likelihood": -11.162010780675656,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 0.6215121310528551,
      "success": true,
      "log_likelihood": -21.633802651154113,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 4.356682729090399,
      "success": true,
      "log_likelihood": -9.537197484211543,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": -10.0,
      "success": true,
      "log_likelihood": -0.6028489305899618,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 0.10560629690554466,
      "beta_loss_ratio": -3.3697845774111674,
      "success": true,
      "log_likelihood": -15.296748765586779,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 0.4014728235850778,
      "success": true,
      "log_likelihood": -21.948936058845785,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 2.3466181372510384,
      "success": true,
      "log_likelihood": -16.24241529949121,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 0.628602059530513,
      "beta_loss_ratio": 0.20127820716029743,
      "success": true,
      "log_likelihood": -24.634276749073408,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 1.8178146814035965,
      "success": true,
      "log_likelihood": -18.21153570271842,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 5.846347118872494,
      "success": true,
      "log_likelihood": -6.2796057462543615,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": -1.0936124764077009,
      "beta_loss_ratio": -7.320153972952788,
      "success": true,
      "log_likelihood": -6.3082240040333515,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 0.5374551257034577,
      "success": true,
      "log_likelihood": -21.768985095856994,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 0.10560761872578071,
      "beta_loss_ratio": -5.736931617636033,
      "success": true,
      "log_likelihood": -9.237218752306832,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": -0.03444841975717206,
      "success": true,
      "log_likelihood": -22.179084692886075,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 3.635730805823094,
      "success": true,
      "log_likelihood": -11.657174147047,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": -1.0936174715842402,
      "beta_loss_ratio": -3.111914559200125,
      "success": true,
      "log_likelihood": -15.509658033804122,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 0.34036668861809943,
      "success": true,
      "log_likelihood": -22.013864400005104,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 0.5167092775288074,
      "success": true,
      "log_likelihood": -21.799732930815964,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 1.0936166339627387,
      "beta_loss_ratio": -5.736952853788866,
      "success": true,
      "log_likelihood": -8.5596295496967,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 1.5778077437076738,
      "success": true,
      "log_likelihood": -19.059509267991405,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": -0.10560623230405908,
      "beta_loss_ratio": -1.5929087005512856,
      "success": true,
      "log_likelihood": -21.771246098141432,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 6.212646927529274,
      "success": true,
      "log_likelihood": -5.677195469827713,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": -0.014277274085208949,
      "success": true,
      "log_likelihood": -22.18050801775608,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_ratio": 10.0,
      "beta_loss_ratio": 1.2256694148785272,
      "success": true,
      "log_likelihood": -20.1898400976259,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_gain_ratio": {
        "r": 0.6975694176645031,
        "p": 7.402379099381393e-16
      },
      "beta_loss_ratio": {
        "r": 0.9776755111946818,
        "p": 3.2863621742126323e-68
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 38.673503761676976,
  "bic_Control": 35.23930386818747,
  "bic_Cocaine": 41.74997449959466,
  "bic_results": {
    "average_bic": 38.673503761676976,
    "individual_bics": [
      25.64147538156532,
      51.28902631570846,
      50.295762988563595,
      51.12942405506813,
      51.52865191493981,
      46.11931145386767,
      8.372735738092144,
      44.383056831913514,
      8.372735738092144,
      50.87439389099037,
      51.5041528659435,
      33.91998074652721,
      51.41467233154752,
      8.372735738092144,
      8.372735738092144,
      8.372735738092144,
      8.372735738092144,
      25.80164939709151,
      23.631060674852925,
      8.372735738092144,
      49.82765143663336,
      27.236549858852435,
      48.444354424624834,
      50.988315302699256,
      51.20041535373151,
      48.772465021870254,
      49.66790424120083,
      45.84912729073462,
      26.095757098283627,
      38.438841889030726,
      8.372735738092144,
      25.64147538137791,
      55.391045698030844,
      50.5650361823572,
      8.372735738092144,
      46.974090788701105,
      41.9516588401716,
      51.222524848643765,
      46.02192801357063,
      23.303440519695762,
      48.738873486437846,
      37.75815274334339,
      18.313217420660997,
      50.32856824922435,
      47.767958490724645,
      43.85997243705106,
      50.8338161832688,
      49.69504846464651,
      51.249070765874514,
      55.988052173716866,
      45.824193383396256,
      37.6479311899935,
      54.38003262424645,
      54.74167950702716,
      49.529065393405375,
      49.296027641829326,
      44.6642413741816,
      37.18694211155962,
      33.31595730152349,
      36.41439441517109,
      49.571264849630346,
      51.20041538411265,
      25.641475381402373,
      55.6427998130963,
      37.801409227694236,
      49.853552033661586,
      22.633501085420313,
      29.491059438263534,
      50.434643179220444,
      26.241432845335304,
      8.372735738092143,
      37.76053540808578,
      51.06490999460379,
      39.65186847589464,
      56.43559137505903,
      43.59010928234906,
      19.72624936942094,
      19.783485884978923,
      50.705008068626206,
      25.641475381525886,
      51.52520726268437,
      30.48138617100622,
      38.18635394452046,
      51.19476667692243,
      50.766503738544145,
      24.28629697630562,
      45.28605641289503,
      50.70953007319508,
      18.521428816567646,
      51.528053912424376,
      47.54671807216402
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        25.64147538156532,
        51.28902631570846,
        50.295762988563595,
        51.12942405506813,
        51.52865191493981,
        46.11931145386767,
        8.372735738092144,
        44.383056831913514,
        8.372735738092144,
        50.87439389099037,
        51.5041528659435,
        33.91998074652721,
        51.41467233154752,
        8.372735738092144,
        8.372735738092144,
        8.372735738092144,
        8.372735738092144,
        25.80164939709151,
        23.631060674852925,
        8.372735738092144,
        49.82765143663336,
        27.236549858852435,
        48.444354424624834,
        50.988315302699256,
        51.20041535373151,
        48.772465021870254,
        49.66790424120083,
        45.84912729073462,
        26.095757098283627,
        38.438841889030726,
        8.372735738092144,
        25.64147538137791,
        55.391045698030844,
        50.5650361823572,
        8.372735738092144,
        46.974090788701105,
        41.9516588401716,
        51.222524848643765,
        46.02192801357063,
        23.303440519695762,
        48.738873486437846,
        37.75815274334339,
        18.313217420660997
      ],
      "Cocaine": [
        50.32856824922435,
        47.767958490724645,
        43.85997243705106,
        50.8338161832688,
        49.69504846464651,
        51.249070765874514,
        55.988052173716866,
        45.824193383396256,
        37.6479311899935,
        54.38003262424645,
        54.74167950702716,
        49.529065393405375,
        49.296027641829326,
        44.6642413741816,
        37.18694211155962,
        33.31595730152349,
        36.41439441517109,
        49.571264849630346,
        51.20041538411265,
        25.641475381402373,
        55.6427998130963,
        37.801409227694236,
        49.853552033661586,
        22.633501085420313,
        29.491059438263534,
        50.434643179220444,
        26.241432845335304,
        8.372735738092143,
        37.76053540808578,
        51.06490999460379,
        39.65186847589464,
        56.43559137505903,
        43.59010928234906,
        19.72624936942094,
        19.783485884978923,
        50.705008068626206,
        25.641475381525886,
        51.52520726268437,
        30.48138617100622,
        38.18635394452046,
        51.19476667692243,
        50.766503738544145,
        24.28629697630562,
        45.28605641289503,
        50.70953007319508,
        18.521428816567646,
        51.528053912424376,
        47.54671807216402
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_gain_ratio: r = 0.698\n- beta_loss_ratio: r = 0.978",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_val = 1e-6\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nU = IF(R_val >= 1.0, beta_gain_ratio * R_val, beta_loss_ratio * R_val)\nSummary: This model predicts the utility of accepting an offer using a piecewise linear function of the ratio between the proposed percentage share and the participant's fair share based on token contributions. The utility is calculated as the ratio multiplied by one of two sensitivity parameters: 'beta_gain_ratio' if the ratio is 1 or greater (fair or favorable offers), and 'beta_loss_ratio' if the ratio is less than 1 (unfair offers). This piecewise structure aims to separate the influence of favorable versus unfavorable offer ratios on the decision utility, using exactly two learnable parameters.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 38.673503761676976\nOverall Accuracy: 0.7109\nGroup Accuracies:\n- Control: 0.7481\n- Cocaine: 0.6777\n\nParameter Recovery:\n- beta_gain_ratio: r = 0.698\n- beta_loss_ratio: r = 0.978"
  ]
}