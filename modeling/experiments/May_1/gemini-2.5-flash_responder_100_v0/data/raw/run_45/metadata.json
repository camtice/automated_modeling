{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 45), building on the results of the previous run.\n\nInstructions for Run 45 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC and accuracy are valuable secondary goals, they must not come at the expense of robust parameter recovery.\n\nThe previous run explored a piecewise linear model based on the ratio of proposed share to fair share. It used `U = beta_gain_ratio * R_val` for ratios >= 1 and `U = beta_loss_ratio * R_val` for ratios < 1. This structure yielded good BIC (38.67) and moderate accuracy (0.711). Parameter recovery was mixed: `beta_loss_ratio` recovered well (r = 0.978), but `beta_gain_ratio` recovered just below the threshold (r = 0.698). This suggests the piecewise *linear* application of the ratio was successful in decoupling the \"loss\" sensitivity, but not quite the \"gain\" sensitivity, indicating the functional form (`beta * R_val`) might still not be optimal for the favorable range (`R_val >= 1`). The influence of the parameter scaling the linear ratio in the gain region might not be distinct enough from the baseline or other factors in the data.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** that ensures both parameters have distinct, identifiable influences on responder decisions (`trial_role == 1`). Linear combinations, piecewise deviations, linear ratio models, and additive logarithmic models have all shown issues with simultaneous parameter recovery for *both* parameters. The previous piecewise *linear* ratio model got close but didn't pass the threshold for one parameter.\n\nFor this run, let's maintain the *piecewise ratio* concept and the split at `R_val = 1.0`, but differentiate the *functional form* applied to the ratio in the two regions. Let's keep the successful linear scaling for the unfavorable range (`R_val < 1.0`) and introduce a *logarithmic* scaling for the favorable range (`R_val >= 1.0`). This creates a piecewise *log-linear* model structure.\n\nDesign a computational model that predicts the utility of accepting an offer based on a **piecewise log-linear function of the ratio** between the proposed percentage share and the participant's fair percentage share.\n\n*   **Structural Direction (Piecewise Log-Linear Ratio):** Model utility (`U`) based on the ratio of the proposed share to the fair share, using different functional forms and scaling parameters depending on whether the ratio is at least 1 (fair or generous) or less than 1 (unfair).\n    *   Calculate the necessary intermediate variables as before:\n        *   `sum_tokens = token_self + token_opp`\n        *   `fair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)` (Ensures `fair_perc_self_calc` is >= 0).\n        *   `epsilon_val = 1e-6` (Small constant for numerical stability).\n        *   `R_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)` (Calculate the ratio, ensuring `R_val` is always positive).\n    *   Structure the utility (`U`) using a conditional statement based on the value of `R_val`:\n        *   If `R_val >= 1.0`, `U = beta_gain_log_sens * log(R_val)` (Logarithmic scaling for gain/favorable offers). Note that `log(1.0)` is 0, so utility is 0 at the exact fair point on the gain side.\n        *   If `R_val < 1.0`, `U = beta_loss_linear_sens * R_val` (Linear scaling for loss/unfavorable offers), preserving the structure that showed good recovery in the previous run for this range.\n    *   This structure uses two distinct learnable parameters (`beta_gain_log_sens` and `beta_loss_linear_sens`) that scale different functional forms of the ratio depending on whether the offer is favorable or unfavorable. This change in functional form for the gain region is a direct attempt to improve the identifiability of the \"gain\" sensitivity parameter compared to the previous linear approach.\n\n*   **Key Inputs & Calculated Variables:**\n    *   Use `split_perc_self`, `token_self`, `token_opp` as data variables.\n    *   Calculate `sum_tokens`, `fair_perc_self_calc`, `epsilon_val`, `R_val`, and `U`.\n    *   Ensure these calculated variables are included in your <MODEL> tag calculations and <VARIABLES> descriptions.\n\n*   **Model Formula:** Define the utility (`U`) based on the conditional logic applied to `R_val` and your 2 learnable parameters. Include the calculation steps for necessary derived variables (`sum_tokens`, `fair_perc_self_calc`, `epsilon_val`, `R_val`) before the final formula for `U`. Use clear mathematical notation (IF/ELSE or similar conditional structure) and the standard mathematical logarithm function `log()`.\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**.\n    *   `beta_gain_log_sens`: Sensitivity parameter scaling the *log* of the ratio when it is greater than or equal to 1 (fair or favorable offers). Suggest generous bounds like [-10.0, 10.0].\n    *   `beta_loss_linear_sens`: Sensitivity parameter scaling the *linear* ratio when it is less than 1 (unfair offers). Suggest generous bounds like [-10.0, 10.0].\n    Choose descriptive names suitable for Python code that reflect the functional form they scale (log vs linear) and the ratio range (gain vs loss). Define clear, generous, finite numerical bounds for both.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model (`sum_tokens`, `fair_perc_self_calc`, `epsilon_val`, `R_val`, `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`). Be mindful of the range for `R_val` given its calculation (it will be >= `epsilon_val` / (100 + `epsilon_val`)).\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Include the calculation steps for necessary derived variables before the final formula for `U`. Use clear mathematical notation.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing your model. Explain the core idea of how utility is determined by a piecewise function of the ratio between proposed and fair shares, with a *logarithmic* relationship scaled by `beta_gain_log_sens` for ratios at or above 1, and a *linear* relationship scaled by `beta_loss_linear_sens` for ratios below 1. Explain how this combined log-linear piecewise structure on the ratio is a new attempt to improve parameter identifiability, particularly for the gain sensitivity, compared to previous strictly linear or additive models.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability *within* the constraints of **exactly 2 learnable parameters** is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. This piecewise log-linear ratio approach is another significant departure from previous attempts to address the identifiability challenge. If this structure also fails parameter recovery for either parameter, be prepared to think even further outside the box for the next iteration \u2013 consider entirely different inputs, different ways of combining inputs (e.g., multiplicative interactions, exponential terms), or conceptualizing fairness's role differently (e.g., as a non-linear modulator of sensitivity, or a threshold in a non-standard way). The key is finding a structure where the two parameters\u2019 contributions to utility are as independent as possible across the dataset.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 45), building on the results of the previous run.\n\nInstructions for Run 45 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC and accuracy are valuable secondary goals, they must not come at the expense of robust parameter recovery.\n\nThe previous run explored a piecewise linear model based on the ratio of proposed share to fair share. It used `U = beta_gain_ratio * R_val` for ratios >= 1 and `U = beta_loss_ratio * R_val` for ratios < 1. This structure yielded good BIC (38.67) and moderate accuracy (0.711). Parameter recovery was mixed: `beta_loss_ratio` recovered well (r = 0.978), but `beta_gain_ratio` recovered just below the threshold (r = 0.698). This suggests the piecewise *linear* application of the ratio was successful in decoupling the \"loss\" sensitivity, but not quite the \"gain\" sensitivity, indicating the functional form (`beta * R_val`) might still not be optimal for the favorable range (`R_val >= 1`). The influence of the parameter scaling the linear ratio in the gain region might not be distinct enough from the baseline or other factors in the data.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** that ensures both parameters have distinct, identifiable influences on responder decisions (`trial_role == 1`). Linear combinations, piecewise deviations, linear ratio models, and additive logarithmic models have all shown issues with simultaneous parameter recovery for *both* parameters. The previous piecewise *linear* ratio model got close but didn't pass the threshold for one parameter.\n\nFor this run, let's maintain the *piecewise ratio* concept and the split at `R_val = 1.0`, but differentiate the *functional form* applied to the ratio in the two regions. Let's keep the successful linear scaling for the unfavorable range (`R_val < 1.0`) and introduce a *logarithmic* scaling for the favorable range (`R_val >= 1.0`). This creates a piecewise *log-linear* model structure.\n\nDesign a computational model that predicts the utility of accepting an offer based on a **piecewise log-linear function of the ratio** between the proposed percentage share and the participant's fair percentage share.\n\n*   **Structural Direction (Piecewise Log-Linear Ratio):** Model utility (`U`) based on the ratio of the proposed share to the fair share, using different functional forms and scaling parameters depending on whether the ratio is at least 1 (fair or generous) or less than 1 (unfair).\n    *   Calculate the necessary intermediate variables as before:\n        *   `sum_tokens = token_self + token_opp`\n        *   `fair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)` (Ensures `fair_perc_self_calc` is >= 0).\n        *   `epsilon_val = 1e-6` (Small constant for numerical stability).\n        *   `R_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)` (Calculate the ratio, ensuring `R_val` is always positive).\n    *   Structure the utility (`U`) using a conditional statement based on the value of `R_val`:\n        *   If `R_val >= 1.0`, `U = beta_gain_log_sens * log(R_val)` (Logarithmic scaling for gain/favorable offers). Note that `log(1.0)` is 0, so utility is 0 at the exact fair point on the gain side.\n        *   If `R_val < 1.0`, `U = beta_loss_linear_sens * R_val` (Linear scaling for loss/unfavorable offers), preserving the structure that showed good recovery in the previous run for this range.\n    *   This structure uses two distinct learnable parameters (`beta_gain_log_sens` and `beta_loss_linear_sens`) that scale different functional forms of the ratio depending on whether the offer is favorable or unfavorable. This change in functional form for the gain region is a direct attempt to improve the identifiability of the \"gain\" sensitivity parameter compared to the previous linear approach.\n\n*   **Key Inputs & Calculated Variables:**\n    *   Use `split_perc_self`, `token_self`, `token_opp` as data variables.\n    *   Calculate `sum_tokens`, `fair_perc_self_calc`, `epsilon_val`, `R_val`, and `U`.\n    *   Ensure these calculated variables are included in your <MODEL> tag calculations and <VARIABLES> descriptions.\n\n*   **Model Formula:** Define the utility (`U`) based on the conditional logic applied to `R_val` and your 2 learnable parameters. Include the calculation steps for necessary derived variables (`sum_tokens`, `fair_perc_self_calc`, `epsilon_val`, `R_val`) before the final formula for `U`. Use clear mathematical notation (IF/ELSE or similar conditional structure) and the standard mathematical logarithm function `log()`.\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**.\n    *   `beta_gain_log_sens`: Sensitivity parameter scaling the *log* of the ratio when it is greater than or equal to 1 (fair or favorable offers). Suggest generous bounds like [-10.0, 10.0].\n    *   `beta_loss_linear_sens`: Sensitivity parameter scaling the *linear* ratio when it is less than 1 (unfair offers). Suggest generous bounds like [-10.0, 10.0].\n    Choose descriptive names suitable for Python code that reflect the functional form they scale (log vs linear) and the ratio range (gain vs loss). Define clear, generous, finite numerical bounds for both.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model (`sum_tokens`, `fair_perc_self_calc`, `epsilon_val`, `R_val`, `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`). Be mindful of the range for `R_val` given its calculation (it will be >= `epsilon_val` / (100 + `epsilon_val`)).\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Include the calculation steps for necessary derived variables before the final formula for `U`. Use clear mathematical notation.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing your model. Explain the core idea of how utility is determined by a piecewise function of the ratio between proposed and fair shares, with a *logarithmic* relationship scaled by `beta_gain_log_sens` for ratios at or above 1, and a *linear* relationship scaled by `beta_loss_linear_sens` for ratios below 1. Explain how this combined log-linear piecewise structure on the ratio is a new attempt to improve parameter identifiability, particularly for the gain sensitivity, compared to previous strictly linear or additive models.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability *within* the constraints of **exactly 2 learnable parameters** is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. This piecewise log-linear ratio approach is another significant departure from previous attempts to address the identifiability challenge. If this structure also fails parameter recovery for either parameter, be prepared to think even further outside the box for the next iteration \u2013 consider entirely different inputs, different ways of combining inputs (e.g., multiplicative interactions, exponential terms), or conceptualizing fairness's role differently (e.g., as a non-linear modulator of sensitivity, or a threshold in a non-standard way). The key is finding a structure where the two parameters\u2019 contributions to utility are as independent as possible across the dataset.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "```\nLet me think through this step by step...\nThe user requires a computational model for the responder's decision in an ultimatum game, specifically predicting the `accept` variable.\nThe model must:\n1.  Be based on a utility function `U`.\n2.  Have exactly two learnable parameters.\n3.  Ensure parameter recovery is high for both learnable parameters.\n4.  Be applicable to the provided dataset structure.\n5.  Predict utility such that U < 0 implies a probability < 50% via a logistic function.\n\nThe specific instructions for this run (Run 45) dictate a piecewise log-linear structure based on the ratio (`R_val`) of the proposed share to the fair share.\n- Calculate `sum_tokens = token_self + token_opp`.\n- Calculate `fair_perc_self_calc = (token_self / sum_tokens) * 100.0`, with a fallback to 50.0 if `sum_tokens` is 0.\n- Calculate `R_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)` using `epsilon_val = 1e-6` for numerical stability.\n- Define utility `U` conditionally:\n    - If `R_val >= 1.0`: `U = beta_gain_log_sens * log(R_val)`\n    - If `R_val < 1.0`: `U = beta_loss_linear_sens * R_val`\n- The two learnable parameters are `beta_gain_log_sens` and `beta_loss_linear_sens`.\n\nI will now structure the output according to the user's specifications.\n\n```json\n<MODEL>\nsum_tokens = token_self + token_opp\nepsilon_val = 1e-6\nfair_perc_self_calc = IF sum_tokens > 0 THEN (token_self / sum_tokens) * 100.0 ELSE 50.0 END IF\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nU = IF R_val >= 1.0 THEN beta_gain_log_sens * log(R_val) ELSE beta_loss_linear_sens * R_val END IF\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"epsilon_val\": {\n      \"description\": \"Small constant for numerical stability in ratio calculation\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Participant's calculated fair percentage share based on token contribution, with fallback to 50% if sum_tokens is 0\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R_val\": {\n      \"description\": \"Ratio of proposed percentage share to calculated fair percentage share, with epsilon for stability\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain_log_sens\": {\n      \"description\": \"Sensitivity parameter scaling the logarithm of the ratio for R_val >= 1.0 (fair or favorable offers)\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_linear_sens\": {\n      \"description\": \"Sensitivity parameter scaling the linear ratio for R_val < 1.0 (unfair offers)\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA computational model predicting responder acceptance utility based on the ratio of the proposed share to the participant's fair share derived from token contributions. Utility is calculated using a piecewise function of this ratio: for ratios at or above 1, utility is the logarithm of the ratio scaled by a learnable parameter (beta_gain_log_sens); for ratios below 1, utility is the linear ratio scaled by a separate learnable parameter (beta_loss_linear_sens). This log-linear piecewise structure aims to improve parameter identifiability compared to previous linear models by allowing distinct sensitivities to favorable (gain) and unfavorable (loss) deviations from the fair point, mediated through different functional forms.\n</SUMMARY>\n```"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_gain_log_sens', 'beta_loss_linear_sens']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nepsilon_val = 1e-6\nfair_perc_self_calc = IF sum_tokens > 0 THEN (token_self / sum_tokens) * 100.0 ELSE 50.0 END IF\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nU = IF R_val >= 1.0 THEN beta_gain_log_sens * log(R_val) ELSE beta_loss_linear_sens * R_val END IF\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"epsilon_val\": {\n      \"description\": \"Small constant for numerical stability in ratio calculation\",\n      \"range\": {\n        \"min\": 1e-06,\n        \"max\": 1e-06,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Participant's calculated fair percentage share based on token contribution, with fallback to 50% if sum_tokens is 0\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R_val\": {\n      \"description\": \"Ratio of proposed percentage share to calculated fair percentage share, with epsilon for stability\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain_log_sens\": {\n      \"description\": \"Sensitivity parameter scaling the logarithm of the ratio for R_val >= 1.0 (fair or favorable offers)\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_linear_sens\": {\n      \"description\": \"Sensitivity parameter scaling the linear ratio for R_val < 1.0 (unfair offers)\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_gain_log_sens=1, beta_loss_linear_sens=1):\n    model_predictions = []\n    epsilon_val = 1e-6\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n        sum_tokens = token_self + token_opp\n\n        if sum_tokens > 0:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n        else:\n            fair_perc_self_calc = 50.0\n\n        R_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\n\n        if R_val >= 1.0:\n            U = beta_gain_log_sens * math.log(R_val)\n        else:\n            U = beta_loss_linear_sens * R_val\n\n        model_predictions.append(U)\n    return model_predictions\n\n# Data as list of dictionaries\ndata_json = '[{\"ID\": 0, \"group\": \"control\", \"trial_number\": 1, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 248, \"token_self\": 252, \"combined_earning\": 500, \"split_opp\": 252.0, \"split_self\": 248.0, \"splitperc_opp\": 50, \"splitperc_self\": 50, \"accept\": 1.0, \"accepted_amount\": 248.0, \"accepted_perc\": 50.0, \"proposed_perc\": 50.0, \"proposed_amount\": 248.0}, {\"ID\": 1, \"group\": \"control\", \"trial_number\": 2, \"trial_type\": 1, \"trial_role\": 1, \"token_opp\": 248, \"token_self\": 252, \"combined_earning\": 500, \"split_opp\": 375.0, \"split_self\": 125.0, \"splitperc_opp\": 75, \"splitperc_self\": 25, \"accept\": 0.0, \"accepted_amount\": 0.0, \"accepted_perc\": 0.0, \"proposed_perc\": 25.0, \"proposed_amount\": 125.0}]'\n\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n```",
      "timestamp": 1746101661.969632
    }
  ],
  "learnable_parameters": {
    "beta_gain_log_sens": {
      "description": "Sensitivity parameter scaling the logarithm of the ratio for R_val >= 1.0 (fair or favorable offers)",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_loss_linear_sens": {
      "description": "Sensitivity parameter scaling the linear ratio for R_val < 1.0 (unfair offers)",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nepsilon_val = 1e-6\nfair_perc_self_calc = IF sum_tokens > 0 THEN (token_self / sum_tokens) * 100.0 ELSE 50.0 END IF\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nU = IF R_val >= 1.0 THEN beta_gain_log_sens * log(R_val) ELSE beta_loss_linear_sens * R_val END IF",
  "variable_descriptions": {
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": 1000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "Proposed share for the participant in percentage",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by participant and opponent",
      "range": {
        "min": 0,
        "max": 2000,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "epsilon_val": {
      "description": "Small constant for numerical stability in ratio calculation",
      "range": {
        "min": 1e-06,
        "max": 1e-06,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Participant's calculated fair percentage share based on token contribution, with fallback to 50% if sum_tokens is 0",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "R_val": {
      "description": "Ratio of proposed percentage share to calculated fair percentage share, with epsilon for stability",
      "range": {
        "min": 0.0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_gain_log_sens": {
      "description": "Sensitivity parameter scaling the logarithm of the ratio for R_val >= 1.0 (fair or favorable offers)",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_loss_linear_sens": {
      "description": "Sensitivity parameter scaling the linear ratio for R_val < 1.0 (unfair offers)",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": false,
        "inclusive_max": false
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "A computational model predicting responder acceptance utility based on the ratio of the proposed share to the participant's fair share derived from token contributions. Utility is calculated using a piecewise function of this ratio: for ratios at or above 1, utility is the logarithm of the ratio scaled by a learnable parameter (beta_gain_log_sens); for ratios below 1, utility is the linear ratio scaled by a separate learnable parameter (beta_loss_linear_sens). This log-linear piecewise structure aims to improve parameter identifiability compared to previous linear models by allowing distinct sensitivities to favorable (gain) and unfavorable (loss) deviations from the fair point, mediated through different functional forms.",
  "target_variable": "accept",
  "full_reasoning": "```\nLet me think through this step by step...\nThe user requires a computational model for the responder's decision in an ultimatum game, specifically predicting the `accept` variable.\nThe model must:\n1.  Be based on a utility function `U`.\n2.  Have exactly two learnable parameters.\n3.  Ensure parameter recovery is high for both learnable parameters.\n4.  Be applicable to the provided dataset structure.\n5.  Predict utility such that U < 0 implies a probability < 50% via a logistic function.\n\nThe specific instructions for this run (Run 45) dictate a piecewise log-linear structure based on the ratio (`R_val`) of the proposed share to the fair share.\n- Calculate `sum_tokens = token_self + token_opp`.\n- Calculate `fair_perc_self_calc = (token_self / sum_tokens) * 100.0`, with a fallback to 50.0 if `sum_tokens` is 0.\n- Calculate `R_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)` using `epsilon_val = 1e-6` for numerical stability.\n- Define utility `U` conditionally:\n    - If `R_val >= 1.0`: `U = beta_gain_log_sens * log(R_val)`\n    - If `R_val < 1.0`: `U = beta_loss_linear_sens * R_val`\n- The two learnable parameters are `beta_gain_log_sens` and `beta_loss_linear_sens`.\n\nI will now structure the output according to the user's specifications.\n\n```json\n<MODEL>\nsum_tokens = token_self + token_opp\nepsilon_val = 1e-6\nfair_perc_self_calc = IF sum_tokens > 0 THEN (token_self / sum_tokens) * 100.0 ELSE 50.0 END IF\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nU = IF R_val >= 1.0 THEN beta_gain_log_sens * log(R_val) ELSE beta_loss_linear_sens * R_val END IF\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"Proposed share for the participant in percentage\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 2000,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"epsilon_val\": {\n      \"description\": \"Small constant for numerical stability in ratio calculation\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Participant's calculated fair percentage share based on token contribution, with fallback to 50% if sum_tokens is 0\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R_val\": {\n      \"description\": \"Ratio of proposed percentage share to calculated fair percentage share, with epsilon for stability\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain_log_sens\": {\n      \"description\": \"Sensitivity parameter scaling the logarithm of the ratio for R_val >= 1.0 (fair or favorable offers)\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_linear_sens\": {\n      \"description\": \"Sensitivity parameter scaling the linear ratio for R_val < 1.0 (unfair offers)\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": false,\n        \"inclusive_max\": false\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nA computational model predicting responder acceptance utility based on the ratio of the proposed share to the participant's fair share derived from token contributions. Utility is calculated using a piecewise function of this ratio: for ratios at or above 1, utility is the logarithm of the ratio scaled by a learnable parameter (beta_gain_log_sens); for ratios below 1, utility is the linear ratio scaled by a separate learnable parameter (beta_loss_linear_sens). This log-linear piecewise structure aims to improve parameter identifiability compared to previous linear models by allowing distinct sensitivities to favorable (gain) and unfavorable (loss) deviations from the fair point, mediated through different functional forms.\n</SUMMARY>\n```",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nepsilon_val = 1e-6\nfair_perc_self_calc = IF sum_tokens > 0 THEN (token_self / sum_tokens) * 100.0 ELSE 50.0 END IF\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nU = IF R_val >= 1.0 THEN beta_gain_log_sens * log(R_val) ELSE beta_loss_linear_sens * R_val END IF\nSummary: A computational model predicting responder acceptance utility based on the ratio of the proposed share to the participant's fair share derived from token contributions. Utility is calculated using a piecewise function of this ratio: for ratios at or above 1, utility is the logarithm of the ratio scaled by a learnable parameter (beta_gain_log_sens); for ratios below 1, utility is the linear ratio scaled by a separate learnable parameter (beta_loss_linear_sens). This log-linear piecewise structure aims to improve parameter identifiability compared to previous linear models by allowing distinct sensitivities to favorable (gain) and unfavorable (loss) deviations from the fair point, mediated through different functional forms.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_gain_log_sens=1, beta_loss_linear_sens=1):\n    model_predictions = []\n    epsilon_val = 1e-6\n    for trial in trial_data:\n        token_opp = trial.get(\"token_opp\", 0)\n        token_self = trial.get(\"token_self\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 0)\n        sum_tokens = token_self + token_opp\n\n        if sum_tokens > 0:\n            fair_perc_self_calc = (token_self / sum_tokens) * 100.0\n        else:\n            fair_perc_self_calc = 50.0\n\n        R_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\n\n        if R_val >= 1.0:\n            U = beta_gain_log_sens * math.log(R_val)\n        else:\n            U = beta_loss_linear_sens * R_val\n\n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6804029304029304,
  "group_accuracies": {
    "Control": 0.7202842377260982,
    "Cocaine": 0.6446759259259259
  },
  "group_parameter_averages": {
    "Control": {
      "beta_gain_log_sens": 9.470466329504587,
      "beta_loss_linear_sens": 2.6229715121535073
    },
    "Cocaine": {
      "beta_gain_log_sens": 7.542707627598034,
      "beta_loss_linear_sens": -0.08898429761977333
    }
  },
  "fitting_results": [
    {
      "beta_gain_log_sens": 2.410097445521875,
      "beta_loss_linear_sens": -5.736983261188361,
      "success": true,
      "log_likelihood": -9.115078151390783,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 0.2880561613648036,
      "success": true,
      "log_likelihood": -23.614101302545535,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 0.660657495290057,
      "success": true,
      "log_likelihood": -23.11746963903985,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": -0.37246535218724014,
      "success": true,
      "log_likelihood": -23.534300172230388,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 7.59921389700704e-08,
      "success": true,
      "log_likelihood": -23.73391410216537,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 1.4533525035077555,
      "success": true,
      "log_likelihood": -21.029243867452745,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 10.0,
      "success": true,
      "log_likelihood": -2.1559560137424927,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 1.7071200612792286,
      "success": true,
      "log_likelihood": -20.16111581178971,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 10.0,
      "success": true,
      "log_likelihood": -2.1559560137424922,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": -0.478205587414902,
      "success": true,
      "log_likelihood": -23.406729356233186,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 0.09188787957353046,
      "success": true,
      "log_likelihood": -23.721664576904995,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 2.4098722524679865,
      "beta_loss_linear_sens": -3.975527224426554,
      "success": true,
      "log_likelihood": -13.254330834356262,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": -0.19839298735678634,
      "success": true,
      "log_likelihood": -23.676923651556827,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 10.0,
      "success": true,
      "log_likelihood": -2.1559560137424922,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 10.0,
      "success": true,
      "log_likelihood": -2.155956013742493,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 10.0,
      "success": true,
      "log_likelihood": -2.155956013742493,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 10.0,
      "success": true,
      "log_likelihood": -2.155956013742492,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 4.439560841301023,
      "success": true,
      "log_likelihood": -10.87041284324217,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 4.878847995246212,
      "success": true,
      "log_likelihood": -9.785118482122874,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 10.0,
      "success": true,
      "log_likelihood": -2.155956013742493,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 0.7801128995591119,
      "success": true,
      "log_likelihood": -22.88341386167459,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 4.175595511211068,
      "success": true,
      "log_likelihood": -11.587863074125238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": -1.067322421250104,
      "success": true,
      "log_likelihood": -22.19176533009432,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 0.43400080883414244,
      "success": true,
      "log_likelihood": -23.4637400046592,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 0.3374648729253483,
      "success": true,
      "log_likelihood": -23.569795821562074,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 1.0051112790652348,
      "success": true,
      "log_likelihood": -22.355820628783516,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 0.817404718373489,
      "success": true,
      "log_likelihood": -22.803540265296856,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": -1.4941825537282138,
      "success": true,
      "log_likelihood": -20.894151785551994,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 4.383932642202399,
      "success": true,
      "log_likelihood": -11.017466693826023,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 2.50751431729158,
      "success": true,
      "log_likelihood": -17.18900907088257,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 10.0,
      "success": true,
      "log_likelihood": -2.1559560137424927,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 2.4100824707073967,
      "beta_loss_linear_sens": -5.736953396535065,
      "success": true,
      "log_likelihood": -9.11507815124657,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": -0.3287314956684842,
      "success": true,
      "log_likelihood": -23.578123226432137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": -0.5823063242660461,
      "success": true,
      "log_likelihood": -23.252106189966387,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 10.0,
      "success": true,
      "log_likelihood": -2.1559560137424922,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 1.319811966539948,
      "success": true,
      "log_likelihood": -21.45663353904697,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 2.0405471331588703,
      "success": true,
      "log_likelihood": -18.94541756342779,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 0.32582173115042057,
      "success": true,
      "log_likelihood": -23.58085056901831,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 1.4681466843050572,
      "success": true,
      "log_likelihood": -20.98055215038986,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 4.950169666860007,
      "success": true,
      "log_likelihood": -9.62130839070358,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 1.0116159384010621,
      "success": true,
      "log_likelihood": -22.339014570789704,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": -2.598282242140541,
      "success": true,
      "log_likelihood": -16.848664516367926,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 6.280394685330618,
      "success": true,
      "log_likelihood": -7.126196855027603,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 0.651561892887276,
      "success": true,
      "log_likelihood": -23.133872268475425,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 1.1879501954181144,
      "success": true,
      "log_likelihood": -21.853567390474836,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 1.7804281140578542,
      "success": true,
      "log_likelihood": -19.89957436322318,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 0.4929917275723366,
      "success": true,
      "log_likelihood": -23.386496235323925,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": -0.8111705017702664,
      "success": true,
      "log_likelihood": -22.817111612723554,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": -0.3112837199226632,
      "success": true,
      "log_likelihood": -23.594123499157153,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 2.409686436139442,
      "beta_loss_linear_sens": 0.19549458837530653,
      "success": true,
      "log_likelihood": -24.767894215401373,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.3611111111111111,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 1.4979208084546793,
      "success": true,
      "log_likelihood": -20.881684836387258,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 2.4104140738916677,
      "beta_loss_linear_sens": -3.386474977669881,
      "success": true,
      "log_likelihood": -15.118306057934436,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 0.6849540310158092,
      "success": true,
      "log_likelihood": -23.072616684298623,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 2.410083555170597,
      "beta_loss_linear_sens": 0.6940936047272469,
      "success": true,
      "log_likelihood": -24.144707876905137,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": -0.848693021725973,
      "success": true,
      "log_likelihood": -22.73412082510647,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": -0.8991795873714186,
      "success": true,
      "log_likelihood": -22.617601965611787,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": -1.6672138729633041,
      "success": true,
      "log_likelihood": -20.30170883177734,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 2.6748745694934146,
      "success": true,
      "log_likelihood": -16.563059200476882,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 2.410030026910374,
      "beta_loss_linear_sens": -4.078983431121637,
      "success": true,
      "log_likelihood": -12.952319111380296,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 2.7792372357552177,
      "success": true,
      "log_likelihood": -16.17678535005015,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 0.8392853791277578,
      "success": true,
      "log_likelihood": -22.75522056951106,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 0.33746479354031395,
      "success": true,
      "log_likelihood": -23.569795825189928,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 2.4100779651841755,
      "beta_loss_linear_sens": -5.736948644401072,
      "success": true,
      "log_likelihood": -9.115078151250655,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": -0.143648977045155,
      "success": true,
      "log_likelihood": -23.704000283972302,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": -2.5924990308123292,
      "success": true,
      "log_likelihood": -16.87029275474745,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 0.773923228083031,
      "success": true,
      "log_likelihood": -22.896364158178823,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 5.100778225873153,
      "success": true,
      "log_likelihood": -9.286338687351224,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 3.7935264717850887,
      "success": true,
      "log_likelihood": -12.715117863828185,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 0.6213602580638098,
      "success": true,
      "log_likelihood": -23.186909702499083,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 4.356682931763476,
      "success": true,
      "log_likelihood": -11.09030456736406,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": -10.0,
      "success": true,
      "log_likelihood": -2.155956013742492,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 1.0,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 2.4100799325526574,
      "beta_loss_linear_sens": -3.3697832182650442,
      "success": true,
      "log_likelihood": -15.174608164601782,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 0.40172030140711246,
      "success": true,
      "log_likelihood": -23.502043054934283,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 2.346497876035183,
      "success": true,
      "log_likelihood": -17.795522370963965,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": -2.409954058831182,
      "beta_loss_linear_sens": 0.20128481919411093,
      "success": true,
      "log_likelihood": -24.764587664950746,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 1.8178363552601058,
      "success": true,
      "log_likelihood": -19.764642785417102,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 5.8461570076847815,
      "success": true,
      "log_likelihood": -7.832712824570205,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": -10.0,
      "beta_loss_linear_sens": -7.320170481496387,
      "success": true,
      "log_likelihood": -5.774343319886163,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 0.5375152967372964,
      "success": true,
      "log_likelihood": -23.32209217393487,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 2.4100871774336228,
      "beta_loss_linear_sens": -5.736932859851841,
      "success": true,
      "log_likelihood": -9.115078151312181,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": -0.03444708477159708,
      "success": true,
      "log_likelihood": -23.732191776037165,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.3888888888888889,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 3.6359609080288147,
      "success": true,
      "log_likelihood": -13.210281206818076,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": -10.0,
      "beta_loss_linear_sens": -3.1119005422048547,
      "success": true,
      "log_likelihood": -14.975777349567869,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 0.3403774471667368,
      "success": true,
      "log_likelihood": -23.566971482990336,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 0.5167057529202582,
      "success": true,
      "log_likelihood": -23.352840013952097,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": -5.736964348467623,
      "success": true,
      "log_likelihood": -8.025748865599176,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8333333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 1.5775019019111922,
      "success": true,
      "log_likelihood": -20.612616249662025,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": -2.4105389837457087,
      "beta_loss_linear_sens": -1.5929515534664629,
      "success": true,
      "log_likelihood": -21.649105503642954,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 6.212639033519398,
      "success": true,
      "log_likelihood": -7.230302552973617,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": -0.014352716114917828,
      "success": true,
      "log_likelihood": -23.733615092695395,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_log_sens": 10.0,
      "beta_loss_linear_sens": 1.2256275278344304,
      "success": true,
      "log_likelihood": -21.742947178650905,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_gain_log_sens": {
        "r": 0.7113196458160447,
        "p": 1.1032668847264307e-16
      },
      "beta_loss_linear_sens": {
        "r": 0.96376786036581,
        "p": 4.763618680131169e-58
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 41.0893120716175,
  "bic_Control": 38.01468993149763,
  "bic_Cocaine": 43.84366107214155,
  "bic_results": {
    "average_bic": 41.0893120716175,
    "individual_bics": [
      25.397194179693784,
      54.39524048200329,
      53.40197715499192,
      54.235638221372994,
      54.63486608124296,
      49.22552561181771,
      11.478949904397204,
      47.48926950049164,
      11.478949904397204,
      53.98049658937859,
      54.61036703072221,
      33.675699545624745,
      54.52088518002587,
      11.478949904397204,
      11.478949904397206,
      11.478949904397206,
      11.478949904397204,
      28.90786356339656,
      26.73727484115797,
      11.478949904397206,
      52.9338656002614,
      30.342764025162694,
      51.55056853710086,
      54.09451788623062,
      54.30662952003637,
      51.87867913447925,
      52.77411840750593,
      48.955341448016206,
      29.201971264564264,
      41.54505601867736,
      11.478949904397204,
      25.39719417940536,
      54.32328432977649,
      53.67125025684499,
      11.478949904397204,
      50.080304955006156,
      45.057873003767796,
      54.32873901494884,
      49.12814217769194,
      26.409654658319383,
      51.845067018491626,
      40.86436690964807,
      21.419431586967427,
      53.43478241386307,
      50.87417265786189,
      46.96618660335858,
      53.94003034756007,
      52.80126110235933,
      54.35528487522652,
      56.702826307714965,
      48.930407549686734,
      37.40364999278109,
      53.312271245509464,
      55.45645363072249,
      52.63527952712516,
      52.40224180813579,
      47.7704555404669,
      40.29315627786598,
      33.071676099672814,
      39.52060857701252,
      52.67747901593434,
      54.306629527292074,
      25.397194179413532,
      54.57503844485682,
      40.90762338640712,
      52.959766193269864,
      25.73971525161467,
      32.59727360456859,
      53.540857281910384,
      29.34764701164034,
      11.478949904397204,
      37.51625420611578,
      54.171123986780785,
      42.75808261884015,
      56.69621320681371,
      46.69632344774642,
      22.832463526052628,
      18.715724516684546,
      53.81122222478196,
      25.397194179536584,
      54.63142142898655,
      33.58760029054837,
      37.11859257604796,
      54.30098084289289,
      53.87271790481641,
      23.21853560811057,
      48.39227037623627,
      50.465248884198125,
      21.627642982859456,
      54.63426806230301,
      50.65293223421403
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        25.397194179693784,
        54.39524048200329,
        53.40197715499192,
        54.235638221372994,
        54.63486608124296,
        49.22552561181771,
        11.478949904397204,
        47.48926950049164,
        11.478949904397204,
        53.98049658937859,
        54.61036703072221,
        33.675699545624745,
        54.52088518002587,
        11.478949904397204,
        11.478949904397206,
        11.478949904397206,
        11.478949904397204,
        28.90786356339656,
        26.73727484115797,
        11.478949904397206,
        52.9338656002614,
        30.342764025162694,
        51.55056853710086,
        54.09451788623062,
        54.30662952003637,
        51.87867913447925,
        52.77411840750593,
        48.955341448016206,
        29.201971264564264,
        41.54505601867736,
        11.478949904397204,
        25.39719417940536,
        54.32328432977649,
        53.67125025684499,
        11.478949904397204,
        50.080304955006156,
        45.057873003767796,
        54.32873901494884,
        49.12814217769194,
        26.409654658319383,
        51.845067018491626,
        40.86436690964807,
        21.419431586967427
      ],
      "Cocaine": [
        53.43478241386307,
        50.87417265786189,
        46.96618660335858,
        53.94003034756007,
        52.80126110235933,
        54.35528487522652,
        56.702826307714965,
        48.930407549686734,
        37.40364999278109,
        53.312271245509464,
        55.45645363072249,
        52.63527952712516,
        52.40224180813579,
        47.7704555404669,
        40.29315627786598,
        33.071676099672814,
        39.52060857701252,
        52.67747901593434,
        54.306629527292074,
        25.397194179413532,
        54.57503844485682,
        40.90762338640712,
        52.959766193269864,
        25.73971525161467,
        32.59727360456859,
        53.540857281910384,
        29.34764701164034,
        11.478949904397204,
        37.51625420611578,
        54.171123986780785,
        42.75808261884015,
        56.69621320681371,
        46.69632344774642,
        22.832463526052628,
        18.715724516684546,
        53.81122222478196,
        25.397194179536584,
        54.63142142898655,
        33.58760029054837,
        37.11859257604796,
        54.30098084289289,
        53.87271790481641,
        23.21853560811057,
        48.39227037623627,
        50.465248884198125,
        21.627642982859456,
        54.63426806230301,
        50.65293223421403
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_gain_log_sens: r = 0.711\n- beta_loss_linear_sens: r = 0.964",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nepsilon_val = 1e-6\nfair_perc_self_calc = IF sum_tokens > 0 THEN (token_self / sum_tokens) * 100.0 ELSE 50.0 END IF\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nU = IF R_val >= 1.0 THEN beta_gain_log_sens * log(R_val) ELSE beta_loss_linear_sens * R_val END IF\nSummary: A computational model predicting responder acceptance utility based on the ratio of the proposed share to the participant's fair share derived from token contributions. Utility is calculated using a piecewise function of this ratio: for ratios at or above 1, utility is the logarithm of the ratio scaled by a learnable parameter (beta_gain_log_sens); for ratios below 1, utility is the linear ratio scaled by a separate learnable parameter (beta_loss_linear_sens). This log-linear piecewise structure aims to improve parameter identifiability compared to previous linear models by allowing distinct sensitivities to favorable (gain) and unfavorable (loss) deviations from the fair point, mediated through different functional forms.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 41.0893120716175\nOverall Accuracy: 0.6804\nGroup Accuracies:\n- Control: 0.7203\n- Cocaine: 0.6447\n\nParameter Recovery:\n- beta_gain_log_sens: r = 0.711\n- beta_loss_linear_sens: r = 0.964"
  ]
}