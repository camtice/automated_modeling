{
  "task_description": "In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent",
  "output_description": "Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.",
  "instructions": "Okay, here are the improved instructions for the next run (Run 47), building on the results of the previous runs.\n\nInstructions for Run 47 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC and accuracy are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nOne of the recently tested models, the piecewise log-log ratio model (where utility was `beta_gain_log_sens * log(R_val)` for `R_val >= 1` and `beta_loss_log_sens * log(R_val)` for `R_val < 1`), successfully achieved parameter recovery values above the 0.7 threshold for *both* of its learnable parameters (`beta_gain_log_sens: r = 0.795`, `beta_loss_log_sens: r = 0.962`). This makes it the current best *recoverable* model found so far. Its BIC (40.45) and accuracy (0.662) are acceptable but indicate room for improvement.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** that ensures both parameters have distinct, identifiable influences on responder decisions (`trial_role == 1`). The piecewise structure, particularly splitting based on the ratio `R_val` being >= or < 1.0, appears key to the parameter identifiability success seen in recent models.\n\nFor this run, let's continue to explore the *piecewise structure* based on the ratio `R_val` split at 1.0, maintaining exactly **2 learnable parameters**, but try a new functional form: **piecewise linear based on the *difference* from the fair ratio (i.e., `R_val - 1.0`)**. This approach aligns with behavioral economic concepts of deviations from a reference point (fairness) and may offer a better fit to the data compared to the log function, while preserving parameter identifiability through the piecewise split and scaling of deviations.\n\nDesign a computational model that predicts the utility of accepting an offer based on a **piecewise linear function of the *difference* between the ratio of the proposed percentage share to the participant's fair percentage share, and 1.0**.\n\n*   **Structural Direction (Piecewise Linear Difference):** Model utility (`U`) based on the difference `R_val - 1.0`, using different linear scaling parameters depending on whether this difference is non-negative (fair or generous offers) or negative (unfair offers).\n    *   Calculate the necessary intermediate variables as before:\n        *   `sum_tokens = token_self + token_opp`\n        *   `fair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)` (Ensures `fair_perc_self_calc` is >= 0).\n        *   `epsilon_val = 1e-6` (Small constant for numerical stability).\n        *   `R_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)` (Calculate the ratio, ensuring `R_val` is always positive).\n    *   Calculate the difference from the fair ratio: `R_diff = R_val - 1.0`.\n    *   Structure the utility (`U`) using a conditional statement based on the value of `R_diff` (or equivalently, `R_val`):\\n\n        *   If `R_diff >= 0.0` (i.e., `R_val >= 1.0`), `U = beta_gain_linear_diff * R_diff` (Linear scaling for gain/favorable offers).\n        *   If `R_diff < 0.0` (i.e., `R_val < 1.0`), `U = beta_loss_linear_diff * R_diff` (Linear scaling for loss/unfair offers). Note that `R_diff` will be negative for `R_val < 1`.\n    *   This structure uses two distinct learnable parameters (`beta_gain_linear_diff` and `beta_loss_linear_diff`) that scale the positive or negative deviation from the fair ratio (1.0). This modification explores whether a linear relationship around the reference point provides a better fit and if scaling the difference (which is positive for gains and negative for losses) further aids parameter identifiability compared to scaling the positive ratio itself (as in the previous piecewise linear ratio model).\n\n*   **Key Inputs & Calculated Variables:**\n    *   Use `split_perc_self`, `token_self`, `token_opp` as data variables.\n    *   Calculate `sum_tokens`, `fair_perc_self_calc`, `epsilon_val`, `R_val`, `R_diff`, and `U`.\n    *   Ensure these calculated variables are included in your <MODEL> tag calculations and <VARIABLES> descriptions.\n\n*   **Model Formula:** Define the utility (`U`) based on the conditional logic applied to `R_val` (or `R_diff`) and your 2 learnable parameters. Include the calculation steps for necessary derived variables (`sum_tokens`, `fair_perc_self_calc`, `epsilon_val`, `R_val`, `R_diff`) before the final formula for `U`. Use clear mathematical notation (IF/ELSE or similar conditional structure).\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**.\n    *   `beta_gain_linear_diff`: Sensitivity parameter scaling the *difference* (`R_val - 1.0`) when the ratio is greater than or equal to 1 (fair or favorable offers). Suggest generous bounds like [-10.0, 10.0].\n    *   `beta_loss_linear_diff`: Sensitivity parameter scaling the *difference* (`R_val - 1.0`) when the ratio is less than 1 (unfair offers). Suggest generous bounds like [-10.0, 10.0].\n    Choose descriptive names suitable for Python code that reflect the functional form (linear) and the value they scale (the difference) and the ratio range (gain vs loss). Define clear, generous, finite numerical bounds for both.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model (`sum_tokens`, `fair_perc_self_calc`, `epsilon_val`, `R_val`, `R_diff`, `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`). Be mindful of the range for `R_diff` given its calculation (it can be negative).\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Include the calculation steps for necessary derived variables before the final formula for `U`. Use clear mathematical notation.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing your model. Explain the core idea of how utility is determined by a piecewise linear function of the *difference* between the proposed ratio and 1.0 (the fair reference point), scaled by `beta_gain_linear_diff` for differences >= 0 (gain/favorable offers) and by `beta_loss_linear_diff` for differences < 0 (loss/unfair offers). Explain how this piecewise linear structure on the difference from the reference point is the next attempt to improve fit (BIC/Accuracy) while building on the success of the piecewise approach for parameter identifiability.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability *within* the constraints of **exactly 2 learnable parameters** is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. This piecewise linear difference approach is a promising alternative to the piecewise ratio models, potentially capturing deviations from fairness in a more direct way. If this structure also meets recovery but doesn't significantly improve BIC/Accuracy, or if it fails recovery for either parameter, be prepared to think even further outside the box for the next iteration \u2013 consider entirely different inputs, different ways of combining inputs (e.g., non-ratio based interactions, exponential terms, incorporating absolute values or amounts), or conceptualizing fairness\\'s role differently (e.g., as a non-linear modulator of sensitivity, or a threshold in a non-standard way). The key is finding a structure where the two parameters\u2019 contributions to utility are as independent as possible across the dataset.",
  "dataset_info": "\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276",
  "complete_model_interaction": [
    {
      "solver": "model_design_solver",
      "input": "Task Description: In this ultimatum game experiment, the participant acts as both a proposer and a responsder. They are the proposer 14 times and the responsder 36 times. Each is designated by a trial number in the data set. This gives 50 instances for the learnable parameters to be trained (although really it may rather be 36 or 14 depending on how the computational model should be created). There is also a pretask where the participant finds a number of tokens that correspond to their contribution to the group. This is designated by the variable \"token_self\". The other variable, \"token_opp\", is the number of tokens found the opponent's and represents the opoonents contribution to the shared pot that will be later divided by the opponent. The rounds are a mixed, with the participant doing a handful of turns as a responder, then a handful as a proposer, and then a handful as a responder, and so on.\n\nAgain, the participant gets to act as both a proposer and responder - this is reflected in the data. If you are guessing the proposed amount, you should only be making this guess when trial_role == 2, since this is when the data within the proposed_perc and proposed_amount columns are relevent.\n\nNote that in each trial there is a variable amount of money in the combined earning, so that two equal split_self variables do not represent the same \"fairness\".\n\nBelow is the description of each variable in the dataset, which will be followed by information about the data type of the variable:\n\ntrial_type = how much was the contribution [1 = equal, 2 = opponent more, 3 = participant more]\ntrial_role = the role of the participant [1 = responder, 2 = proposer]\ntoken_opp = number of tokens found by the opponent\ntoken_self = number of tokens found by the participant\ncombined_earning = amount of money earned in total (note that each token found is \u00a33)\nsplit_opp = the proposed share of the opponent (in \u00a3)\nsplit_self = the proposed share for the participant (in \u00a3)\nsplitperc_opp = same but in %\nsplit_perc_self = same but in %\naccept = whether the participant responded accept (1) or reject (0)\naccepted_amount = if accepted, what is the amount gain (in \u00a3)\naccepted_perc = same as above but in %\nproposed_perc = when participant is the proposer, what is the % proposed to the opponent\n\nDesired Output Specification: Design a computational model for the described task. Your model should utilyze the given variables appropriately (but not necessarily all unless otherwise specified). \n\nThe model should:\n1. Predict only responder behavior (should target \"accept = whether the participant responded accept (1) or reject (0)\")\n2. You will have to pass parameter recovery tests. This should be roughly equal in priority to accuracy.\n3. Be applicable to the dataset given within the task description (i.e. the model should be able\nto be run using only the provided dataset structure).\n4. Predict utility, where less than 0 is less than 50% likely.\n\nFor any learnable parameters in your model, you must specify finite numerical bounds (it just can not be infinity) in the variable descriptions. However, this bound should be generous. The utility variable may be unbounded (-inf to inf).\n\nThen, provide your formal mathematical model between <MODEL> tags, followed by variable descriptions between <VARIABLES> tags. Additionally, specify the target variable that your model will predict. This should be one of the variables from the dataset above. Enclose it in <target_variable> tags.\nFor example: <target_variable>accept</target_variable> if your model is predicting whether a participant accepts or rejects a proposal. \n\nUse clear mathematical notation and ensure each variable is fully described. Every variable must be utilized within the mathematical formula provided between <MODEL> and </MODEL>, and only strictly the mathematical formula should be provided between these tags with no filler words or descriptions. For variable descriptions, provide them in a JSON format with the following structure: <VARIABLES> Bounds are by default inclusive. Please spell out the greek variable names instead of using the symbols. Finally, you should provide a short description of the model in the summary tags <SUMMARY> </SUMMARY>. This will be used to compare different computational models of the task; it should be concise and purely descriptive. Do not include generic information about the name of the tasks, since that is implied. \n\n{\n  \"variables\": {\n    \"variable_name\": {\n      \"description\": \"Clear description\",\n      \"range\": {\n        \"min\": value,\n        \"max\": value,\n        \"inclusive_min\": boolean,\n        \"inclusive_max\": boolean\n      },\n      \"distribution\": {\n        \"type\": \"distribution type\",\n        \"parameters\": {}\n      },\n      \"learnable\": boolean,\n      \"source\": \"learnable/data/calculated\"\n    }\n  }\n}\n</VARIABLES>\n\nExample #1: \n<EXAMPLE>\n(Model of a Random Choice Task):\nLet me think through this step by step...\n[your reasoning here]\n\n<MODEL>\nU_i = \u03b2 + \u03b5E + \u03b7N\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"U_i\": {\n      \"description\": \"Utility of choosing action i\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta\": {\n      \"description\": \"Base tendency parameter (inherent preference)\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"epsilon\": {\n      \"description\": \"Environmental sensitivity parameter\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"E\": {\n      \"description\": \"Environmental cue value\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"eta\": {\n      \"description\": \"Noise parameter\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": 1,\n        \"exclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"N\": {\n      \"description\": \"Random noise drawn from normal distribution N(0,1)\",\n      \"distribution\": {\n        \"type\": \"normal\",\n        \"mean\": 0,\n        \"std\": 1\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n<SUMMARY>\nA linear utility model combining base preference, environmental influence, and stochastic noise. The model uses two learnable parameters: a base tendency parameter (\u03b2) constrained to [0,1] and an unconstrained environmental sensitivity parameter (\u03b5). Environmental cues and normally distributed noise modify the base utility, allowing for both systematic and random variation in choice behavior.\n</SUMMARY>\n</EXAMPLE>\n\nPlease be sure to provide the mathematical formula for the model between <MODEL> and </MODEL>, and the variable descriptions between <VARIABLES> and </VARIABLES>. No description of the model should be provided within the <MODEL> tags.\n\nThe parameter names you choose in your <VARIABLES> section will be used exactly as specified in subsequent code generation. Please choose clear, non-reserved parameter names that can be used directly in Python code. For example, avoid Python reserved words like 'lambda' and use alternatives like 'learning_rate' or 'lambda_param'.\n\nModel Type: \nYour model should predict the utility of a binary choice. The utility will be converted to a probability using a logistic function with temperature 1, and then used to predict binary decisions.\n\n\nInstructions: Okay, here are the improved instructions for the next run (Run 47), building on the results of the previous runs.\n\nInstructions for Run 47 of 100:\n\nThe unwavering primary objective remains achieving parameter recovery >= 0.7 for *all* learnable parameters. This is the critical benchmark for model usability. While improved BIC and accuracy are valuable secondary goals, they must not come at the expense of robust parameter recovery. A model with excellent fit but poor parameter identifiability is not suitable for drawing meaningful conclusions about the underlying cognitive processes.\n\nOne of the recently tested models, the piecewise log-log ratio model (where utility was `beta_gain_log_sens * log(R_val)` for `R_val >= 1` and `beta_loss_log_sens * log(R_val)` for `R_val < 1`), successfully achieved parameter recovery values above the 0.7 threshold for *both* of its learnable parameters (`beta_gain_log_sens: r = 0.795`, `beta_loss_log_sens: r = 0.962`). This makes it the current best *recoverable* model found so far. Its BIC (40.45) and accuracy (0.662) are acceptable but indicate room for improvement.\n\nThe core challenge persists: designing a mathematical structure for utility using exactly **2 learnable parameters** that ensures both parameters have distinct, identifiable influences on responder decisions (`trial_role == 1`). The piecewise structure, particularly splitting based on the ratio `R_val` being >= or < 1.0, appears key to the parameter identifiability success seen in recent models.\n\nFor this run, let's continue to explore the *piecewise structure* based on the ratio `R_val` split at 1.0, maintaining exactly **2 learnable parameters**, but try a new functional form: **piecewise linear based on the *difference* from the fair ratio (i.e., `R_val - 1.0`)**. This approach aligns with behavioral economic concepts of deviations from a reference point (fairness) and may offer a better fit to the data compared to the log function, while preserving parameter identifiability through the piecewise split and scaling of deviations.\n\nDesign a computational model that predicts the utility of accepting an offer based on a **piecewise linear function of the *difference* between the ratio of the proposed percentage share to the participant's fair percentage share, and 1.0**.\n\n*   **Structural Direction (Piecewise Linear Difference):** Model utility (`U`) based on the difference `R_val - 1.0`, using different linear scaling parameters depending on whether this difference is non-negative (fair or generous offers) or negative (unfair offers).\n    *   Calculate the necessary intermediate variables as before:\n        *   `sum_tokens = token_self + token_opp`\n        *   `fair_perc_self_calc = IF(sum_tokens > 0, (token_self / sum_tokens) * 100.0, 50.0)` (Ensures `fair_perc_self_calc` is >= 0).\n        *   `epsilon_val = 1e-6` (Small constant for numerical stability).\n        *   `R_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)` (Calculate the ratio, ensuring `R_val` is always positive).\n    *   Calculate the difference from the fair ratio: `R_diff = R_val - 1.0`.\n    *   Structure the utility (`U`) using a conditional statement based on the value of `R_diff` (or equivalently, `R_val`):\\n\n        *   If `R_diff >= 0.0` (i.e., `R_val >= 1.0`), `U = beta_gain_linear_diff * R_diff` (Linear scaling for gain/favorable offers).\n        *   If `R_diff < 0.0` (i.e., `R_val < 1.0`), `U = beta_loss_linear_diff * R_diff` (Linear scaling for loss/unfair offers). Note that `R_diff` will be negative for `R_val < 1`.\n    *   This structure uses two distinct learnable parameters (`beta_gain_linear_diff` and `beta_loss_linear_diff`) that scale the positive or negative deviation from the fair ratio (1.0). This modification explores whether a linear relationship around the reference point provides a better fit and if scaling the difference (which is positive for gains and negative for losses) further aids parameter identifiability compared to scaling the positive ratio itself (as in the previous piecewise linear ratio model).\n\n*   **Key Inputs & Calculated Variables:**\n    *   Use `split_perc_self`, `token_self`, `token_opp` as data variables.\n    *   Calculate `sum_tokens`, `fair_perc_self_calc`, `epsilon_val`, `R_val`, `R_diff`, and `U`.\n    *   Ensure these calculated variables are included in your <MODEL> tag calculations and <VARIABLES> descriptions.\n\n*   **Model Formula:** Define the utility (`U`) based on the conditional logic applied to `R_val` (or `R_diff`) and your 2 learnable parameters. Include the calculation steps for necessary derived variables (`sum_tokens`, `fair_perc_self_calc`, `epsilon_val`, `R_val`, `R_diff`) before the final formula for `U`. Use clear mathematical notation (IF/ELSE or similar conditional structure).\n\n*   **Learnable Parameters:** Your model *must* have exactly **2 learnable parameters**.\n    *   `beta_gain_linear_diff`: Sensitivity parameter scaling the *difference* (`R_val - 1.0`) when the ratio is greater than or equal to 1 (fair or favorable offers). Suggest generous bounds like [-10.0, 10.0].\n    *   `beta_loss_linear_diff`: Sensitivity parameter scaling the *difference* (`R_val - 1.0`) when the ratio is less than 1 (unfair offers). Suggest generous bounds like [-10.0, 10.0].\n    Choose descriptive names suitable for Python code that reflect the functional form (linear) and the value they scale (the difference) and the ratio range (gain vs loss). Define clear, generous, finite numerical bounds for both.\n\n*   **Calculated Variables:** Ensure all calculated variables used in the model (`sum_tokens`, `fair_perc_self_calc`, `epsilon_val`, `R_val`, `R_diff`, `U`) are included in your <VARIABLES> descriptions with `source: \"calculated\"`. Include descriptions for all data variables used as inputs (`token_self`, `token_opp`, `split_perc_self`). Be mindful of the range for `R_diff` given its calculation (it can be negative).\n\n*   **Model Specification:** Provide the formal mathematical formula between <MODEL> tags. Include the calculation steps for necessary derived variables before the final formula for `U`. Use clear mathematical notation.\n\n*   **Variable Descriptions:** Provide variable descriptions in JSON format between <VARIABLES> tags for *all* variables used in the <MODEL> formula (data, calculated, learnable). Include source, range (with inclusive flags), distribution (if applicable), and learnable status.\n\n*   **Target Variable:** Specify \"accept\" as the target variable using <target_variable> tags.\n\n*   **Summary:** Provide a concise summary between <SUMMARY> tags, describing your model. Explain the core idea of how utility is determined by a piecewise linear function of the *difference* between the proposed ratio and 1.0 (the fair reference point), scaled by `beta_gain_linear_diff` for differences >= 0 (gain/favorable offers) and by `beta_loss_linear_diff` for differences < 0 (loss/unfair offers). Explain how this piecewise linear structure on the difference from the reference point is the next attempt to improve fit (BIC/Accuracy) while building on the success of the piecewise approach for parameter identifiability.\n\nAvailable Data Variables:\n- trial_type, trial_role, token_opp, token_self, combined_earning, split_opp, split_self, splitperc_opp, split_perc_self, accept, accepted_amount, accepted_perc, proposed_perc, proposed_amount.\n\nPlease think through this step by step, then provide your model specification and variable descriptions. Remember that robust parameter identifiability *within* the constraints of **exactly 2 learnable parameters** is the absolute priority. Your goal is to find a mathematical structure where both parameters can be uniquely and reliably estimated from the data by ensuring their influences are clearly distinguishable. This piecewise linear difference approach is a promising alternative to the piecewise ratio models, potentially capturing deviations from fairness in a more direct way. If this structure also meets recovery but doesn't significantly improve BIC/Accuracy, or if it fails recovery for either parameter, be prepared to think even further outside the box for the next iteration \u2013 consider entirely different inputs, different ways of combining inputs (e.g., non-ratio based interactions, exponential terms, incorporating absolute values or amounts), or conceptualizing fairness\\'s role differently (e.g., as a non-linear modulator of sensitivity, or a threshold in a non-standard way). The key is finding a structure where the two parameters\u2019 contributions to utility are as independent as possible across the dataset.\n\nPrevious Models:Not Provided\n\nPlease think through this step by step, then provide your model specification and variable descriptions.",
      "output": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_val = 1e-6\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nR_diff = R_val - 1.0\nU = IF(R_diff >= 0.0, beta_gain_linear_diff * R_diff, beta_loss_linear_diff * R_diff)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed percentage share for the participant\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contributions\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"epsilon_val\": {\n      \"description\": \"Small constant for numerical stability\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R_val\": {\n      \"description\": \"Ratio of the proposed percentage share to the calculated fair percentage share for the participant\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R_diff\": {\n      \"description\": \"Difference between the ratio R_val and 1.0 (deviation from fairness)\",\n      \"range\": {\n        \"min\": -1.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain_linear_diff\": {\n      \"description\": \"Sensitivity parameter scaling R_diff when R_val is >= 1.0 (fair or favorable offers)\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_linear_diff\": {\n      \"description\": \"Sensitivity parameter scaling R_diff when R_val is < 1.0 (unfair offers)\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThe model predicts the utility of accepting an offer based on a piecewise linear function of the difference between the proposed percentage share ratio (relative to the calculated fair share based on token contributions) and 1.0 (the fair reference point). Specifically, the utility is calculated as beta_gain_linear_diff multiplied by this difference if the proposed ratio is greater than or equal to 1.0 (representing a gain or fair scenario), and as beta_loss_linear_diff multiplied by this difference if the proposed ratio is less than 1.0 (representing a loss or unfair scenario). This structure uses two learnable parameters, one for gains and one for losses relative to fairness, attempting to capture differential sensitivity to favorable versus unfavorable deviations.\n</SUMMARY>"
    },
    {
      "solver": "simulate_model_solver",
      "input": "\n                Write Python code to simulate the following mathematical model using only Python standard library (no pandas or numpy).\n                The code should take a list of dictionaries as input (each dictionary representing a trial) and return a value for each trial.\n\n                IMPORTANT: Use these exact parameter names for learnable parameters: ['beta_gain_linear_diff', 'beta_loss_linear_diff']\n\n                Please write a function called `simulate_model` that:\n                1. Takes a list of dictionaries as input (each dictionary contains trial data)\n                2. Has parameter names that matches the variable descriptions exactly\n                3. Implements the mathematical model above using only standard Python math operations\n                4. Returns a list of model_predictions for each trial (please use the exact name \"model_predictions\" as the return value)\n\n                Your code will be implemented within the following code block (please do not include any code outside of this code block, for instance, you should not include data_json = # imported from .json dumps, or data = json.loads(data_json)):\n\n                ```python\nimport json\nimport math\n\n[YOUR SIMULATE_MODEL FUNCTION HERE]\n\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n\nBelow is an example for you to follow:\n<EXAMPLE>\nModel Specification:\nU_i = \u03b2 + \u03b5E + \u03b7N\n\nVariable Descriptions:\nU_i: Utility (probability) of choosing action i \u03b2: [learnable] Base tendency parameter (0-1) representing inherent preference \u03b5: [learnable] Environmental sensitivity parameter (0-1) E: Environmental cue value (-1 to 1) \u03b7: Noise parameter (0-1) N: Random noise drawn from normal distribution N(0,1)\n\nDataset Structure:\nVariables available:\n- trial_id (int64)\n- environmental_cue (float64)\n- beta (float64)\n- epsilon (float64)\n- eta (float64)\n- utility (float64)\n- choice_made (int64)\n- trial_number (int64)\n- participant_id (int64)\n\n\n<YOUR RESPONSE>\ndef simulate_model(trial_data, beta=1, epsilon=1, eta=1):\n    model_predictions = []\n    for trial in trial_data:\n        E = trial.get(\"environmental_cue\", 0)\n        u1, u2 = random.random(), random.random()\n        N = math.sqrt(-2 * math.log(u1)) * math.cos(2 * math.pi * u2)\n        model_predictions.append(beta + (epsilon * E) + (eta * N))\n    return model_predictions\n</YOUR RESPONSE>\n\nNow, create a simulate_model function for the following model incorporating the information provided. DO NOT OUTPUT ANYTHING AFTER YOU RETURN THE MODEL PREDICTIONS.\n                Model Specification:\n                sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_val = 1e-6\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nR_diff = R_val - 1.0\nU = IF(R_diff >= 0.0, beta_gain_linear_diff * R_diff, beta_loss_linear_diff * R_diff)\n\n                Variable Descriptions:\n                {\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed percentage share for the participant\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contributions\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"epsilon_val\": {\n      \"description\": \"Small constant for numerical stability\",\n      \"range\": {\n        \"min\": 1e-06,\n        \"max\": 1e-06,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R_val\": {\n      \"description\": \"Ratio of the proposed percentage share to the calculated fair percentage share for the participant\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R_diff\": {\n      \"description\": \"Difference between the ratio R_val and 1.0 (deviation from fairness)\",\n      \"range\": {\n        \"min\": -1.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain_linear_diff\": {\n      \"description\": \"Sensitivity parameter scaling R_diff when R_val is >= 1.0 (fair or favorable offers)\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_linear_diff\": {\n      \"description\": \"Sensitivity parameter scaling R_diff when R_val is < 1.0 (unfair offers)\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"distribution\": null,\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n\nDataset Structure:\n\nDataset Structure:\nVariables available:\n- ID (int64)\n- group (object)\n- trial_number (int64)\n- trial_type (int64)\n- trial_role (int64)\n- token_opp (int64)\n- token_self (int64)\n- combined_earning (int64)\n- split_opp (float64)\n- split_self (float64)\n- splitperc_opp (int64)\n- splitperc_self (int64)\n- accept (float64)\n- accepted_amount (float64)\n- accepted_perc (float64)\n- proposed_perc (float64)\n- proposed_amount (float64)\n\nNumber of observations: 3276\n\n                ",
      "output": "\n\n```python\nimport json\nimport math\n\ndef simulate_model(trial_data, beta_gain_linear_diff=1.0, beta_loss_linear_diff=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 50.0)  # Corrected variable name\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0.0 else 50.0\n        epsilon_val = 1e-6\n        R_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\n        R_diff = R_val - 1.0\n        \n        if R_diff >= 0.0:\n            U = beta_gain_linear_diff * R_diff\n        else:\n            U = beta_loss_linear_diff * R_diff\n        \n        model_predictions.append(U)\n    return model_predictions\n# Data as list of dictionaries\ndata_json = # imported from .json dumps\ndata = json.loads(data_json)\n\n# Get results for the data\nresults = simulate_model(data)\nprint(json.dumps({\"results\": results}))  # Output as JSON for reliable parsing\n'''\n",
      "timestamp": 1746101765.275952
    }
  ],
  "learnable_parameters": {
    "beta_gain_linear_diff": {
      "description": "Sensitivity parameter scaling R_diff when R_val is >= 1.0 (fair or favorable offers)",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_loss_linear_diff": {
      "description": "Sensitivity parameter scaling R_diff when R_val is < 1.0 (unfair offers)",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    }
  },
  "model_specification": "sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_val = 1e-6\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nR_diff = R_val - 1.0\nU = IF(R_diff >= 0.0, beta_gain_linear_diff * R_diff, beta_loss_linear_diff * R_diff)",
  "variable_descriptions": {
    "token_self": {
      "description": "Number of tokens found by the participant",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "token_opp": {
      "description": "Number of tokens found by the opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "split_perc_self": {
      "description": "The proposed percentage share for the participant",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "data"
    },
    "sum_tokens": {
      "description": "Total number of tokens found by participant and opponent",
      "range": {
        "min": 0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "fair_perc_self_calc": {
      "description": "Calculated fair percentage share for the participant based on token contributions",
      "range": {
        "min": 0.0,
        "max": 100.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "epsilon_val": {
      "description": "Small constant for numerical stability",
      "range": {
        "min": 1e-06,
        "max": 1e-06,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "R_val": {
      "description": "Ratio of the proposed percentage share to the calculated fair percentage share for the participant",
      "range": {
        "min": 0.0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "R_diff": {
      "description": "Difference between the ratio R_val and 1.0 (deviation from fairness)",
      "range": {
        "min": -1.0,
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    },
    "beta_gain_linear_diff": {
      "description": "Sensitivity parameter scaling R_diff when R_val is >= 1.0 (fair or favorable offers)",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "beta_loss_linear_diff": {
      "description": "Sensitivity parameter scaling R_diff when R_val is < 1.0 (unfair offers)",
      "range": {
        "min": -10.0,
        "max": 10.0,
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": true,
      "source": "learnable"
    },
    "U": {
      "description": "Utility of accepting the offer",
      "range": {
        "min": "-inf",
        "max": "inf",
        "inclusive_min": true,
        "inclusive_max": true
      },
      "distribution": null,
      "learnable": false,
      "source": "calculated"
    }
  },
  "model_summary": "The model predicts the utility of accepting an offer based on a piecewise linear function of the difference between the proposed percentage share ratio (relative to the calculated fair share based on token contributions) and 1.0 (the fair reference point). Specifically, the utility is calculated as beta_gain_linear_diff multiplied by this difference if the proposed ratio is greater than or equal to 1.0 (representing a gain or fair scenario), and as beta_loss_linear_diff multiplied by this difference if the proposed ratio is less than 1.0 (representing a loss or unfair scenario). This structure uses two learnable parameters, one for gains and one for losses relative to fairness, attempting to capture differential sensitivity to favorable versus unfavorable deviations.",
  "target_variable": "accept",
  "full_reasoning": "<MODEL>\nsum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_val = 1e-6\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nR_diff = R_val - 1.0\nU = IF(R_diff >= 0.0, beta_gain_linear_diff * R_diff, beta_loss_linear_diff * R_diff)\n</MODEL>\n\n<VARIABLES>\n{\n  \"variables\": {\n    \"token_self\": {\n      \"description\": \"Number of tokens found by the participant\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"token_opp\": {\n      \"description\": \"Number of tokens found by the opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"split_perc_self\": {\n      \"description\": \"The proposed percentage share for the participant\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"data\"\n    },\n    \"sum_tokens\": {\n      \"description\": \"Total number of tokens found by participant and opponent\",\n      \"range\": {\n        \"min\": 0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"fair_perc_self_calc\": {\n      \"description\": \"Calculated fair percentage share for the participant based on token contributions\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"epsilon_val\": {\n      \"description\": \"Small constant for numerical stability\",\n      \"range\": {\n        \"min\": 1e-6,\n        \"max\": 1e-6,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R_val\": {\n      \"description\": \"Ratio of the proposed percentage share to the calculated fair percentage share for the participant\",\n      \"range\": {\n        \"min\": 0.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"R_diff\": {\n      \"description\": \"Difference between the ratio R_val and 1.0 (deviation from fairness)\",\n      \"range\": {\n        \"min\": -1.0,\n        \"max\": \"inf\",\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    },\n    \"beta_gain_linear_diff\": {\n      \"description\": \"Sensitivity parameter scaling R_diff when R_val is >= 1.0 (fair or favorable offers)\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"beta_loss_linear_diff\": {\n      \"description\": \"Sensitivity parameter scaling R_diff when R_val is < 1.0 (unfair offers)\",\n      \"range\": {\n        \"min\": -10.0,\n        \"max\": 10.0,\n        \"inclusive_min\": true,\n        \"inclusive_max\": true\n      },\n      \"learnable\": true,\n      \"source\": \"learnable\"\n    },\n    \"U\": {\n      \"description\": \"Utility of accepting the offer\",\n      \"range\": {\n        \"min\": \"-inf\",\n        \"max\": \"inf\"\n      },\n      \"learnable\": false,\n      \"source\": \"calculated\"\n    }\n  }\n}\n</VARIABLES>\n\n<target_variable>accept</target_variable>\n\n<SUMMARY>\nThe model predicts the utility of accepting an offer based on a piecewise linear function of the difference between the proposed percentage share ratio (relative to the calculated fair share based on token contributions) and 1.0 (the fair reference point). Specifically, the utility is calculated as beta_gain_linear_diff multiplied by this difference if the proposed ratio is greater than or equal to 1.0 (representing a gain or fair scenario), and as beta_loss_linear_diff multiplied by this difference if the proposed ratio is less than 1.0 (representing a loss or unfair scenario). This structure uses two learnable parameters, one for gains and one for losses relative to fairness, attempting to capture differential sensitivity to favorable versus unfavorable deviations.\n</SUMMARY>",
  "prediction_type": "utility",
  "current_model": "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_val = 1e-6\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nR_diff = R_val - 1.0\nU = IF(R_diff >= 0.0, beta_gain_linear_diff * R_diff, beta_loss_linear_diff * R_diff)\nSummary: The model predicts the utility of accepting an offer based on a piecewise linear function of the difference between the proposed percentage share ratio (relative to the calculated fair share based on token contributions) and 1.0 (the fair reference point). Specifically, the utility is calculated as beta_gain_linear_diff multiplied by this difference if the proposed ratio is greater than or equal to 1.0 (representing a gain or fair scenario), and as beta_loss_linear_diff multiplied by this difference if the proposed ratio is less than 1.0 (representing a loss or unfair scenario). This structure uses two learnable parameters, one for gains and one for losses relative to fairness, attempting to capture differential sensitivity to favorable versus unfavorable deviations.\nTarget Variable: accept\nPrediction Type: utility",
  "simulation_errors": [],
  "current_retry": 0,
  "simulation_code": "def simulate_model(trial_data, beta_gain_linear_diff=1.0, beta_loss_linear_diff=1.0):\n    model_predictions = []\n    for trial in trial_data:\n        token_self = trial.get(\"token_self\", 0)\n        token_opp = trial.get(\"token_opp\", 0)\n        split_perc_self = trial.get(\"splitperc_self\", 50.0)  # Corrected variable name\n\n        sum_tokens = token_self + token_opp\n        fair_perc_self_calc = (token_self / sum_tokens) * 100.0 if sum_tokens > 0.0 else 50.0\n        epsilon_val = 1e-6\n        R_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\n        R_diff = R_val - 1.0\n        \n        if R_diff >= 0.0:\n            U = beta_gain_linear_diff * R_diff\n        else:\n            U = beta_loss_linear_diff * R_diff\n        \n        model_predictions.append(U)\n    return model_predictions",
  "total_retries": 0,
  "skipped_participants": [],
  "num_skipped_participants": 0,
  "overall_accuracy": 0.6715506715506716,
  "group_accuracies": {
    "Control": 0.6996124031007752,
    "Cocaine": 0.6464120370370371
  },
  "group_parameter_averages": {
    "Control": {
      "beta_gain_linear_diff": 9.459823318116458,
      "beta_loss_linear_diff": -0.8636788040187686
    },
    "Cocaine": {
      "beta_gain_linear_diff": 7.526816286464136,
      "beta_loss_linear_diff": 1.7307537111890055
    }
  },
  "fitting_results": [
    {
      "beta_gain_linear_diff": 2.2575163756598946,
      "beta_loss_linear_diff": 10.0,
      "success": true,
      "log_likelihood": -6.952969931495509,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 1.6825974124512153,
      "success": true,
      "log_likelihood": -21.41488020767213,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 1.717768070725601,
      "success": true,
      "log_likelihood": -21.329872453861984,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 2.550478531544557,
      "success": true,
      "log_likelihood": -19.125738523172203,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 2.6202038969201036,
      "success": true,
      "log_likelihood": -18.931848576644747,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 0.48678693076192797,
      "success": true,
      "log_likelihood": -23.486446876787177,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -10.0,
      "success": true,
      "log_likelihood": -3.3622157981810954,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 0.23745795845000503,
      "success": true,
      "log_likelihood": -23.64924390224972,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -10.0,
      "success": true,
      "log_likelihood": -3.3622157981810954,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 3.2817093503078456,
      "success": true,
      "log_likelihood": -17.09587404677124,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 2.8830861451967915,
      "success": true,
      "log_likelihood": -18.19862766005407,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 2.2574448887332554,
      "beta_loss_linear_diff": 9.168909751073208,
      "success": true,
      "log_likelihood": -8.173858076985779,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 3.0519663284652347,
      "success": true,
      "log_likelihood": -17.728909095571026,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -10.0,
      "success": true,
      "log_likelihood": -3.362215798181096,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -10.0,
      "success": true,
      "log_likelihood": -3.362215798181095,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -10.0,
      "success": true,
      "log_likelihood": -3.3622157981810954,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -10.0,
      "success": true,
      "log_likelihood": -3.3622157981810967,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9444444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -1.9806328281515684,
      "success": true,
      "log_likelihood": -20.667838675375293,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -2.628056192049941,
      "success": true,
      "log_likelihood": -18.909980913379737,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -10.0,
      "success": true,
      "log_likelihood": -3.362215798181096,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 1.2677227547294005,
      "success": true,
      "log_likelihood": -22.334654606740905,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -2.1102750859852617,
      "success": true,
      "log_likelihood": -20.32700168264703,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6388888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 2.65968497970114,
      "success": true,
      "log_likelihood": -18.821852889633764,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 1.2941432708773115,
      "success": true,
      "log_likelihood": -22.281282961441054,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 1.783151042538245,
      "success": true,
      "log_likelihood": -21.16942279710996,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 1.0161692561797768,
      "success": true,
      "log_likelihood": -22.80051914080927,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 1.3313951359878342,
      "success": true,
      "log_likelihood": -22.204706269995473,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 6.028471344236449,
      "success": true,
      "log_likelihood": -10.920249947645207,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -2.891716761472487,
      "success": true,
      "log_likelihood": -18.174566039184814,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -1.2257609272467302,
      "success": true,
      "log_likelihood": -22.417768617491703,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -10.0,
      "success": true,
      "log_likelihood": -3.3622157981810963,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 2.2574414146145685,
      "beta_loss_linear_diff": 10.0,
      "success": true,
      "log_likelihood": -6.952969931341464,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 1.837553929916653,
      "success": true,
      "log_likelihood": -21.03365170212021,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 2.952914437325808,
      "success": true,
      "log_likelihood": -18.00410439912239,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -10.0,
      "success": true,
      "log_likelihood": -3.3622157981810963,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 0.31551551385353493,
      "success": true,
      "log_likelihood": -23.61007868094177,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 0.04558701441111323,
      "success": true,
      "log_likelihood": -23.69874810206157,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 1.7592363670082833,
      "success": true,
      "log_likelihood": -21.228462128795687,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -0.045587160086605356,
      "success": true,
      "log_likelihood": -23.69874810243007,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -3.739919379329766,
      "success": true,
      "log_likelihood": -15.869457370533379,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 0.44956153773768537,
      "success": true,
      "log_likelihood": -23.51765783283959,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 5.97016793876822,
      "success": true,
      "log_likelihood": -11.020236840872808,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -8.908479137652634,
      "success": true,
      "log_likelihood": -7.309024792678305,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Control",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 1.0513580426030067,
      "success": true,
      "log_likelihood": -22.74021739451272,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 0.6988379815837743,
      "success": true,
      "log_likelihood": -23.26429621124613,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -0.7900317314474145,
      "success": true,
      "log_likelihood": -23.146442291684053,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 1.4014306066534246,
      "success": true,
      "log_likelihood": -22.05668846231057,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 2.3579816903491877,
      "success": true,
      "log_likelihood": -19.657260589805816,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 2.7158999819153737,
      "success": true,
      "log_likelihood": -18.665070183324218,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 2.2575101373415274,
      "beta_loss_linear_diff": 0.3109170598937738,
      "success": true,
      "log_likelihood": -24.703442977904672,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -0.5616294621119231,
      "success": true,
      "log_likelihood": -23.41655851014954,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 2.257279050026429,
      "beta_loss_linear_diff": 6.149197957445818,
      "success": true,
      "log_likelihood": -11.808058504761883,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 1.1071272683638,
      "success": true,
      "log_likelihood": -22.64129135209277,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4722222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 2.257420689701774,
      "beta_loss_linear_diff": -0.013679716188823616,
      "success": true,
      "log_likelihood": -24.791230730852977,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 2.2731745141863025,
      "success": true,
      "log_likelihood": -19.88879857491126,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 4.582342899390512,
      "success": true,
      "log_likelihood": -13.800598520203739,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 4.959552118722351,
      "success": true,
      "log_likelihood": -12.966510406249697,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -5.620281190052455,
      "success": true,
      "log_likelihood": -11.647622543989238,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 2.257442225985786,
      "beta_loss_linear_diff": 8.446869079914016,
      "success": true,
      "log_likelihood": -8.83336449636523,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -1.6304601002741526,
      "success": true,
      "log_likelihood": -21.539115295891595,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 0.2008244760202621,
      "success": true,
      "log_likelihood": -23.6638530206215,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 1.7831496083551062,
      "success": true,
      "log_likelihood": -21.16942281626186,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5555555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 2.257441919183655,
      "beta_loss_linear_diff": 10.0,
      "success": true,
      "log_likelihood": -6.952969931341454,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 1.5115093777117798,
      "success": true,
      "log_likelihood": -21.813984432949248,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 5.9991589748640095,
      "success": true,
      "log_likelihood": -10.970364894943637,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7777777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 1.2571962962427123,
      "success": true,
      "log_likelihood": -22.35569557027637,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -3.6461301336233802,
      "success": true,
      "log_likelihood": -16.11563987444242,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -2.343682063673801,
      "success": true,
      "log_likelihood": -19.696441024927562,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 1.0011564875527552,
      "success": true,
      "log_likelihood": -22.82573563401582,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -4.239904166701464,
      "success": true,
      "log_likelihood": -14.608591255411325,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 10.0,
      "success": true,
      "log_likelihood": -3.3622157981810954,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 2.257144441604389,
      "beta_loss_linear_diff": 6.21174842646409,
      "success": true,
      "log_likelihood": -11.705052941150793,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.8055555555555556,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 1.2362186882416215,
      "success": true,
      "log_likelihood": -22.397252163939793,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6666666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -1.385166549428051,
      "success": true,
      "log_likelihood": -22.091520791370037,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": -2.256874723120704,
      "beta_loss_linear_diff": 0.8874059088783603,
      "success": true,
      "log_likelihood": -24.097435590604203,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.5833333333333334,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -0.18710072840469302,
      "success": true,
      "log_likelihood": -23.668702073599444,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4166666666666667,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -4.9402275664756665,
      "success": true,
      "log_likelihood": -13.007759322648287,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": -10.0,
      "beta_loss_linear_diff": 7.386787520596065,
      "success": true,
      "log_likelihood": -8.925201010488031,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.9166666666666666,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -0.2512105190408978,
      "success": true,
      "log_likelihood": -23.643135562697175,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6944444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 2.257433172238809,
      "beta_loss_linear_diff": 10.0,
      "success": true,
      "log_likelihood": -6.952969931343617,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8888888888888888,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 0.4961133695147728,
      "success": true,
      "log_likelihood": -23.478256049681068,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5277777777777778,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -5.403364672972911,
      "success": true,
      "log_likelihood": -12.060893844699489,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": -10.0,
      "beta_loss_linear_diff": 7.538049447716179,
      "success": true,
      "log_likelihood": -8.738657800945738,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 1.7891525440581082,
      "success": true,
      "log_likelihood": -21.154538230673786,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -0.28333553425037206,
      "success": true,
      "log_likelihood": -23.6275448867656,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.4444444444444444,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 10.0,
      "success": true,
      "log_likelihood": -5.862215759471052,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.8611111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -0.4635069330073069,
      "success": true,
      "log_likelihood": -23.506244514581645,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": -2.2576151626831282,
      "beta_loss_linear_diff": 5.357676864077254,
      "success": true,
      "log_likelihood": -13.241321361069112,
      "optimization_message": "CONVERGENCE: RELATIVE REDUCTION OF F <= FACTR*EPSMCH",
      "prediction_type": "utility",
      "accuracy": 0.75,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -4.719438588517323,
      "success": true,
      "log_likelihood": -13.490580836398289,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.7222222222222222,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": 1.7711712779876108,
      "success": true,
      "log_likelihood": -21.199042126080155,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.5,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    },
    {
      "beta_gain_linear_diff": 10.0,
      "beta_loss_linear_diff": -0.9266806760591284,
      "success": true,
      "log_likelihood": -22.94621549519597,
      "optimization_message": "CONVERGENCE: NORM OF PROJECTED GRADIENT <= PGTOL",
      "prediction_type": "utility",
      "accuracy": 0.6111111111111112,
      "participant_id": null,
      "group": "Cocaine",
      "n_trials": 36
    }
  ],
  "parameter_recovery": {
    "correlations": {
      "beta_gain_linear_diff": {
        "r": 0.7269760705863475,
        "p": 1.0984240377683391e-17
      },
      "beta_loss_linear_diff": {
        "r": 0.9659907491127714,
        "p": 2.2577913194484885e-59
      }
    },
    "plots_directory": "param_recovery_plots"
  },
  "average_bic": 40.534449251706036,
  "bic_Control": 38.01918652621858,
  "bic_Cocaine": 42.78770544328854,
  "bic_results": {
    "average_bic": 40.534449251706036,
    "individual_bics": [
      21.072977739903237,
      49.99679829225648,
      49.82678278463619,
      45.41851492325662,
      45.03073503020171,
      54.13993163048657,
      13.89146947327441,
      54.465525681411656,
      13.89146947327441,
      41.3587859704547,
      43.564293197020355,
      23.51475403088378,
      42.62485606805427,
      13.891469473274412,
      13.891469473274409,
      13.89146947327441,
      13.891469473274412,
      48.502715227662804,
      44.98699970367169,
      13.891469473274412,
      51.83634709039403,
      47.82104124220628,
      44.810743656179746,
      51.729603799794326,
      49.50588347113214,
      52.76807615853076,
      51.576450416903164,
      29.00753777220263,
      43.516169955281846,
      52.002575111895624,
      13.891469473274412,
      21.072977739595146,
      49.23434128115264,
      43.175246675157,
      13.891469473274412,
      54.387195238795755,
      54.564534081035355,
      49.62396213450359,
      54.56453408177236,
      38.905952617978976,
      54.202353542591396,
      29.207511558657835,
      21.78508746226883,
      52.647472665937656,
      53.69563029940448,
      53.459922460280325,
      51.28041480153336,
      46.48155905652385,
      44.497178243560654,
      56.57392383272156,
      54.000154897211296,
      30.783154886435987,
      52.44962058109776,
      56.74949933861817,
      46.94463502673474,
      34.768234917319695,
      33.10005868941161,
      30.462282964890697,
      24.83376686964268,
      50.24526846869541,
      54.494743918155216,
      49.50588350943594,
      21.072977739595128,
      50.79500674281071,
      29.107767666799496,
      51.87842901746496,
      39.398317625797056,
      46.55991992676734,
      52.81850914494386,
      36.38422038773487,
      13.89146947327441,
      30.577143759213804,
      51.961542204791805,
      51.35007945965229,
      55.361909058120624,
      54.50444202411111,
      33.18255652220879,
      25.01743989788828,
      54.45330900230657,
      21.07297773959945,
      54.123549976274354,
      31.288825566311196,
      24.644353478803694,
      49.47611433825979,
      54.42212765044342,
      18.891469395854322,
      54.17952690607551,
      33.64968059905044,
      34.1481995497088,
      49.56512212907253,
      53.059468867304155
    ],
    "group_enabled": true,
    "group_bics": {
      "Control": [
        21.072977739903237,
        49.99679829225648,
        49.82678278463619,
        45.41851492325662,
        45.03073503020171,
        54.13993163048657,
        13.89146947327441,
        54.465525681411656,
        13.89146947327441,
        41.3587859704547,
        43.564293197020355,
        23.51475403088378,
        42.62485606805427,
        13.891469473274412,
        13.891469473274409,
        13.89146947327441,
        13.891469473274412,
        48.502715227662804,
        44.98699970367169,
        13.891469473274412,
        51.83634709039403,
        47.82104124220628,
        44.810743656179746,
        51.729603799794326,
        49.50588347113214,
        52.76807615853076,
        51.576450416903164,
        29.00753777220263,
        43.516169955281846,
        52.002575111895624,
        13.891469473274412,
        21.072977739595146,
        49.23434128115264,
        43.175246675157,
        13.891469473274412,
        54.387195238795755,
        54.564534081035355,
        49.62396213450359,
        54.56453408177236,
        38.905952617978976,
        54.202353542591396,
        29.207511558657835,
        21.78508746226883
      ],
      "Cocaine": [
        52.647472665937656,
        53.69563029940448,
        53.459922460280325,
        51.28041480153336,
        46.48155905652385,
        44.497178243560654,
        56.57392383272156,
        54.000154897211296,
        30.783154886435987,
        52.44962058109776,
        56.74949933861817,
        46.94463502673474,
        34.768234917319695,
        33.10005868941161,
        30.462282964890697,
        24.83376686964268,
        50.24526846869541,
        54.494743918155216,
        49.50588350943594,
        21.072977739595128,
        50.79500674281071,
        29.107767666799496,
        51.87842901746496,
        39.398317625797056,
        46.55991992676734,
        52.81850914494386,
        36.38422038773487,
        13.89146947327441,
        30.577143759213804,
        51.961542204791805,
        51.35007945965229,
        55.361909058120624,
        54.50444202411111,
        33.18255652220879,
        25.01743989788828,
        54.45330900230657,
        21.07297773959945,
        54.123549976274354,
        31.288825566311196,
        24.644353478803694,
        49.47611433825979,
        54.42212765044342,
        18.891469395854322,
        54.17952690607551,
        33.64968059905044,
        34.1481995497088,
        49.56512212907253,
        53.059468867304155
      ]
    },
    "num_parameters": 2,
    "prediction_type": "utility",
    "bic_formula": "BIC = -2 * log_likelihood + k * log(n_trials)"
  },
  "recovery_summary": "Parameter Recovery:\n- beta_gain_linear_diff: r = 0.727\n- beta_loss_linear_diff: r = 0.966",
  "previous_models": [
    "Specification: sum_tokens = token_self + token_opp\nfair_perc_self_calc = IF(sum_tokens > 0.0, (token_self / sum_tokens) * 100.0, 50.0)\nepsilon_val = 1e-6\nR_val = (split_perc_self + epsilon_val) / (fair_perc_self_calc + epsilon_val)\nR_diff = R_val - 1.0\nU = IF(R_diff >= 0.0, beta_gain_linear_diff * R_diff, beta_loss_linear_diff * R_diff)\nSummary: The model predicts the utility of accepting an offer based on a piecewise linear function of the difference between the proposed percentage share ratio (relative to the calculated fair share based on token contributions) and 1.0 (the fair reference point). Specifically, the utility is calculated as beta_gain_linear_diff multiplied by this difference if the proposed ratio is greater than or equal to 1.0 (representing a gain or fair scenario), and as beta_loss_linear_diff multiplied by this difference if the proposed ratio is less than 1.0 (representing a loss or unfair scenario). This structure uses two learnable parameters, one for gains and one for losses relative to fairness, attempting to capture differential sensitivity to favorable versus unfavorable deviations.\nTarget Variable: accept\nPrediction Type: utility\nBIC: 40.534449251706036\nOverall Accuracy: 0.6716\nGroup Accuracies:\n- Control: 0.6996\n- Cocaine: 0.6464\n\nParameter Recovery:\n- beta_gain_linear_diff: r = 0.727\n- beta_loss_linear_diff: r = 0.966"
  ]
}